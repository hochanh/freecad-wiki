<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.7/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.7/ http://www.mediawiki.org/xml/export-0.7.xsd" version="0.7" xml:lang="en">
  <siteinfo>
    <sitename>FreeCAD Documentation</sitename>
    <base>http://www.freecadweb.org/wiki/index.php?title=Main_Page</base>
    <generator>MediaWiki 1.20.3</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">FreeCAD</namespace>
      <namespace key="5" case="first-letter">FreeCAD talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="1198" case="first-letter">Translations</namespace>
      <namespace key="1199" case="first-letter">Translations talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>2d Drafting Module</title>
    <ns>0</ns>
    <id>417</id>
    <revision>
      <id>108197</id>
      <parentid>88913</parentid>
      <timestamp>2014-09-01T20:56:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>3D input devices</title>
    <ns>0</ns>
    <id>1249</id>
    <revision>
      <id>45721</id>
      <parentid>45720</parentid>
      <timestamp>2013-11-30T00:08:40Z</timestamp>
      <contributor>
        <username>Emagdalena</username>
        <id>1293</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>o3vg06i21g7lg669wklnct1x1xs0qh5</sha1>
      <text xml:space="preserve" bytes="428">
&lt;!--T:1--&gt;
FreeCAD supports some specialized input devices, such as 3D mice. These enables the user to rotate, translate and zoom objects in three dimensions.

==Supported hardware == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
*3Dconnexion [http://www.3dconnexion.com/products/spacenavigator.html SpaceNavigator]
**Installation instructions: [[3Dconnexion input devices]]

&lt;!--T:4--&gt;
[[category:Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>3Dconnexion input devices</title>
    <ns>0</ns>
    <id>1248</id>
    <revision>
      <id>132803</id>
      <parentid>132782</parentid>
      <timestamp>2014-12-22T18:57:56Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>0v7su49i397vmx41yo6zy8yen3rvlaz</sha1>
      <text xml:space="preserve" bytes="5969">[[File:SpaceNavigator.jpg|200px|thumb|right|3Dconnexion SpaceNavigator]]

== Driver installation == &lt;!--T:1--&gt;
=== Linux ===
FreeCAD supports drivers from project [http://spacenav.sourceforge.net/ Spacenav]. This is a project aiming to create an open-sourced driver which is compatible with the proprietary drivers from 3Dconnexion.

==== Install from repo ==== &lt;!--T:14--&gt;
===== Ubuntu =====

{{Code|code=
sudo apt-get install spacenavd
}}


===== Fedora ===== &lt;!--T:23--&gt;

{{Code|code=
sudo yum install spacenavd
}}



==== Compile Spacenav from source ==== &lt;!--T:2--&gt;
This is recommended if your distribution might provide an outdated version. 

&lt;!--T:24--&gt;
*Download the following files:
**[http://sourceforge.net/projects/spacenav/files/spacenav%20daemon/spacenavd%200.5/spacenavd-0.5.tar.gz/download spacenavd-0.5.tar.gz]
**[http://sourceforge.net/projects/spacenav/files/spacenav%20library%20%28SDK%29/libspnav%200.2.2/libspnav-0.2.2.tar.gz/download libspnav-0.2.2.tar.gz]
**[http://sourceforge.net/projects/spacenav/files/spacenavd%20config%20gui/spnavcfg%200.2.1/spnavcfg-0.2.1.tar.gz/download spnavcfg-0.2.1.tar.gz]
*Unpack the archives into a folder in your home directory.
*Enter the directory spacenavd-0.5 and run the following commands:

{{Code|code=
./configure
make
}}

&lt;!--T:3--&gt;
*If this was successful, run the following commands '''as root''' (or prefix with sudo.)

{{Code|code=
make install
./setup_init
/etc/init.d/spacenavd start
}}

&lt;!--T:4--&gt;
*This installs the spacenav daemon, configures it to automatically load on system boot, and starts the daemon without having to reboot.
*Now it is time to check that your device is properly detected. With your device unplugged, run the following command and then plug it in.

{{Code|code=
tail -n100 -f /var/log/spnavd.log 
}}

&lt;!--T:5--&gt;
*If the output looks something like this, you can continue.

{{Code|code=
Device detection, parsing /proc/bus/input/devices
trying alternative detection, querying /dev/input/eventX device names...
  trying &quot;/dev/input/event1&quot; ... Power Button
  trying &quot;/dev/input/event2&quot; ... 3Dconnexion SpaceNavigator
using device: /dev/input/event2
device name: 3Dconnexion SpaceNavigator
}}

&lt;!--T:6--&gt;
*Now enter the directory named libspnav-0.2.2 and run the following commands:

{{Code|code=
./configure
make
}}

&lt;!--T:7--&gt;
*If make fails with the following error: ...

{{Code|code=
fatal error: gtk/gtk.h: No such file or directory
}}

&lt;!--T:8--&gt;
* ... then you need to install libgtkmm-2.4-dev. Under Ubuntu, this is done like this:

{{Code|code=
sudo apt-get install libgtkmm-2.4-dev
}}

&lt;!--T:9--&gt;
*When make has completed successfully, run the following command '''as root''' (or prefix with sudo.)

{{Code|code=
make install
}}

&lt;!--T:10--&gt;
*Look in the directory libspnav-0.2.2/examples/. If you want to test your device, compile and run either one of the two examples.

&lt;!--T:11--&gt;
*Follow the same pattern to compile and install spnavcfg. Make sure to run spnavcfg as root, or no settings will be saved!

==== Restart ==== &lt;!--T:12--&gt;
If sometimes navigator stops working, it is good to restart driver. To restart it, go to Terminal and execute:

{{Code|code=
sudo xhost +
sudo /etc/init.d/spacenavd restart
}}

&lt;!--T:13--&gt;
After that restart FreeCAD. On some distros this is necessary at each boot.

=== OSX === &lt;!--T:15--&gt;
One user managed to get space navigator working under OSX. However it was not merged in master yet. More info [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=2576&amp;hilit=space+navigator+osx&amp;start=10#p19923 here]

=== Windows === &lt;!--T:16--&gt;
As of version 0.13, 3D mouse is supported under windows. You need to have propriate drivers installed, but since support was developed on lower level, it will override settings you set in 3D Connexion control panel. However, most of those settings can be set in Tools&gt;&gt;Customize dialog, under Spaceball tabs.

== Setting up FreeCAD == &lt;!--T:17--&gt;
3D mouse support was made with spnav project on Linux, and on a very low level on Windows. This means there was no support for any settings for a device, since on Linux there is no good support for this, and on Windows it is overridden. This is why two additional pages were added to &quot;Customize&quot; dialog.


[[File:Spaceball_Motion.png|450px]]
[[File:Spaceball_Buttons.png|450px]]


=== Spaceball Motion === &lt;!--T:18--&gt;
In this tab you have ability to set up some of general space mouse settings. They include:
* Global Sensitivity - Slider with ability to set global sensitivity
* Dominant - if you enable dominant mode, only axes with highest move will be considered
* Flip YZ - This option enables you to flip Y and Z axes on 3D mouse
* Enable Translations - easy way to enable/disable translations
* Enable Rotations - easy way to enable/disable rotations
* Calibrate - enables you to calibrate space navigator. It is pressed while space navigator is not moved.
* Set To Default - removes all settings and sets them to default.

&lt;!--T:19--&gt;
Other than this, for each axes you have ability to set:
* Enabled - Enable/Disable axes
* Reverse - Reverse movement on axes
* Sensitivity - slider with ability to set sensitivity

=== Spaceball Buttons === &lt;!--T:20--&gt;
When you open this tab for the first time, it will be empty and unavailable. To activate it, you must press one of your space mouse buttons. After you do, list of buttons will appear on the left side, and list of commands will be available on the right side.

&lt;!--T:21--&gt;
To connect certain command with a button, select button on the left side, and it's command on the right side.
To clear commands from button, press &quot;Clear&quot;.

&lt;!--T:22--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>3Dconnexxion input devices</title>
    <ns>0</ns>
    <id>1252</id>
    <revision>
      <id>108068</id>
      <parentid>88945</parentid>
      <timestamp>2014-09-01T19:33:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>3d mice</title>
    <ns>0</ns>
    <id>1253</id>
    <revision>
      <id>108069</id>
      <parentid>88946</parentid>
      <timestamp>2014-09-01T19:33:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>ANSI template</title>
    <ns>0</ns>
    <id>19804</id>
    <revision>
      <id>108070</id>
      <parentid>60397</parentid>
      <timestamp>2014-09-01T19:34:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>ANSI templates</title>
    <ns>0</ns>
    <id>19838</id>
    <revision>
      <id>63686</id>
      <parentid>63079</parentid>
      <timestamp>2014-01-25T18:10:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7o8ddyk907jipy1aohs65a1zlezmqay</sha1>
      <text xml:space="preserve" bytes="1700">
&lt;!--T:1--&gt;
This page lists the templates according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute ANSI] standard

===ANSI A=== &lt;!--T:2--&gt;
====ANSI_A_Landscape====

&lt;!--T:3--&gt;
[[Image:ANSI_A_Landscape.svg|800px]]

====ANSI_A_Portrait==== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Image:ANSI_A_Portrait.svg|800px]]

===ANSI B=== &lt;!--T:6--&gt;
====ANSI_B_Landscape====

&lt;!--T:7--&gt;
[[Image:ANSI_B_Landscape.svg|800px]]

====ANSI_B_Portrait==== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
[[Image:ANSI_B_Portrait.svg|800px]]

===ANSI C=== &lt;!--T:10--&gt;
====ANSI_C_Landscape====

&lt;!--T:11--&gt;
[[Image:ANSI_C_Landscape.svg|800px]]

====ANSI_C_Portrait==== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
[[Image:ANSI_C_Portrait.svg|800px]]

===ANSI D=== &lt;!--T:14--&gt;
====ANSI_D_Landscape====

&lt;!--T:15--&gt;
[[Image:ANSI_D_Landscape.svg|800px]]

====ANSI_D_Portrait==== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
[[Image:ANSI_D_Portrait.svg|800px]]

===ANSI E=== &lt;!--T:18--&gt;
====ANSI_E_Landscape====

&lt;!--T:19--&gt;
[[Image:ANSI_E_Landscape.svg|800px]]

====ANSI_E_Portrait==== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
[[Image:ANSI_E_Portrait.svg|800px]]

==Other standards available== &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
* [[Drawing_templates|Drawing templates]]: default FreeCAD templates
* [[Arch_templates|Arch templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute Arch] standard 
* [[Misc_templates|Misc templates]]: mixed templates

==Credits== &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
The templates are drawn by [[quick61]] and listed [https://github.com/quick61/FreeCAD-Drawing-Templates FreeCAD-Drawing-Templates].

&lt;!--T:24--&gt;
[[Category:Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>API documentation</title>
    <ns>0</ns>
    <id>1172</id>
    <redirect title="Category:API" />
    <revision>
      <id>4933</id>
      <timestamp>2011-02-26T03:10:31Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Category:API]]</comment>
      <sha1>d8c58dy7awr8b1p1res2sn8bo409483</sha1>
      <text xml:space="preserve" bytes="27">#REDIRECT [[:Category:API]]</text>
    </revision>
  </page>
  <page>
    <title>About FreeCAD</title>
    <ns>0</ns>
    <id>8</id>
    <revision>
      <id>111461</id>
      <parentid>111460</parentid>
      <timestamp>2014-09-27T10:41:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>kheh091x2vgwofkuf7nnw8c5zvu0j9l</sha1>
      <text xml:space="preserve" bytes="3764">
&lt;!--T:1--&gt;
[[Image:Freecad default.jpg|1024px|center]] 

&lt;!--T:2--&gt;
'''FreeCAD''' is a general purpose parametric 3D [http://en.wikipedia.org/wiki/CAD '''CAD'''] modeler. The development is completely [http://en.wikipedia.org/wiki/Open_source Open Source] (LGPL License). FreeCAD is aimed directly at [http://en.wikipedia.org/wiki/Mechanical_engineering mechanical engineering] and [http://en.wikipedia.org/wiki/Product_design product design] but also fits in a wider range of uses around engineering, such as architecture or other engineering specialties.

&lt;!--T:5--&gt;
FreeCAD features tools similar to [http://en.wikipedia.org/wiki/Catia Catia], [http://en.wikipedia.org/wiki/Solidworks SolidWorks] or [http://en.wikipedia.org/wiki/Solid_Edge Solid Edge], and therefore also falls into the category of [http://en.wikipedia.org/wiki/CAD '''MCAD'''], [http://en.wikipedia.org/wiki/Product_Lifecycle_Management '''PLM'''], [http://en.wikipedia.org/wiki/CAx '''CAx'''] and [http://en.wikipedia.org/wiki/Computer-aided_engineering '''CAE''']. It is a [http://en.wikipedia.org/wiki/Parametric_feature_based_modeler feature based parametric modeler] with a modular software architecture which makes it easy to provide additional functionality without modifying the core system.

&lt;!--T:6--&gt;
As with many modern 3D [http://en.wikipedia.org/wiki/CAD CAD] modelers it has many 2D components in order to sketch 2D shapes or extract design details from the 3D model to create 2D production drawings, but direct 2D drawing (like [http://en.wikipedia.org/wiki/AutoCAD#AutoCAD_LT AutoCAD LT]) is not the focus, neither are animation or organic shapes (like [http://en.wikipedia.org/wiki/Maya_(software) Maya], [http://en.wikipedia.org/wiki/3ds_Max 3ds Max], [http://en.wikipedia.org/wiki/Blender_%28software%29 Blender] or [http://en.wikipedia.org/wiki/CINEMA_4D Cinema 4D]), although, thanks to its wide adaptability, FreeCAD might become useful in a much broader area than its current focus.

&lt;!--T:7--&gt;
FreeCAD makes heavy use of all the great open-source libraries that exist out there in the field of [http://en.wikipedia.org/wiki/Scientific_Computation Scientific Computing]. Among them are [http://OpenCascade.org OpenCascade], a powerful CAD kernel, [http://www.Coin3D.org Coin3D], an incarnation of [http://en.wikipedia.org/wiki/Open_Inventor Open Inventor], [http://www.qtsoftware.com/ Qt], the world-famous UI framework, and [http://www.python.org Python], one of the best scripting languages available. FreeCAD itself can also be used as a library by other programs.

&lt;!--T:8--&gt;
FreeCAD is also fully [http://en.wikipedia.org/wiki/Cross-platform multi-platform], and currently runs flawlessly on Windows and Linux/Unix and Mac OSX systems, with the exact same look and functionality on all platforms.

&lt;!--T:9--&gt;
For more information about FreeCAD's capabilities, take a look at the [[Feature list]], the [[Getting_started#What's new| latest release notes]] or the [[Getting started]] articles.

===About the FreeCAD project=== &lt;!--T:10--&gt;

&lt;!--T:12--&gt;
The FreeCAD project was started as far as 2001, as described in its [[history|history]] page. 

&lt;!--T:11--&gt;
FreeCAD is maintained and developed by a community of enthusiastic developers and users (see the [[contributors|contributors]] page). They work on FreeCAD voluntarily, in their free time. They cannot guarantee that FreeCAD contains or will contain everything you might wish, but they will usually do their best! The community gathers on the [http://forum.freecadweb.org FreeCAD forum], where most of the ideas and decisions are discussed. Feel free to join us there!

&lt;!--T:3--&gt;
{{Docnav|Online Help Startpage|Feature list}}

&lt;!--T:4--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>About this site</title>
    <ns>0</ns>
    <id>9</id>
    <revision>
      <id>45680</id>
      <parentid>45679</parentid>
      <timestamp>2013-11-29T23:41:09Z</timestamp>
      <contributor>
        <username>Emagdalena</username>
        <id>1293</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>joalgkcmznlxwilh8sx8ca72sge5h5b</sha1>
      <text xml:space="preserve" bytes="1479">
&lt;!--T:1--&gt;
This is the official site of the [[About FreeCAD|FreeCAD]] application. It is a [http://en.wikipedia.org/wiki/Wiki wiki] site, built by the community of developers and users of FreeCAD. As so, it is in constant evolution, and might occasionally contain obsolete or inaccurate information, although we believe it is pretty up-to-date.

&lt;!--T:2--&gt;
This site serves primarily as the main and official documentation resource for using FreeCAD, and is broadly divided into '''three main categories''', corresponding to the three big categories of people who use FreeCAD:

&lt;!--T:3--&gt;
* The [[User hub]], directed at the general user, the person who simply wants to use FreeCAD
* The [[Power users hub]], directed at persons who also would like to customize certain aspects of FreeCAD with [http://en.wikipedia.org/wiki/Python_(programming_language) python scripting]
* The [[Developer hub]], directed at programmers who would like to use FreeCAD as a base for developing their own application

&lt;!--T:4--&gt;
This most complete articles from this site also form what will become the '''FreeCAD manual'''. You can already browse the manual online. It will take you smoothly through the three categories mentioned above.

&lt;!--T:5--&gt;
* Read the [[Online Help Toc|Online version]] of the manual, easier to browse
* Read or print the [[Manual|Printable version]] of the manual as one big document

&lt;!--T:6--&gt;
[[Category:Poweruser Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Acerca do FreeCAD</title>
    <ns>0</ns>
    <id>3499</id>
    <revision>
      <id>107945</id>
      <parentid>14786</parentid>
      <timestamp>2014-09-01T10:46:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Aeroplane</title>
    <ns>0</ns>
    <id>2304</id>
    <revision>
      <id>52917</id>
      <parentid>52916</parentid>
      <timestamp>2013-12-08T12:28:01Z</timestamp>
      <contributor>
        <username>Emagdalena</username>
        <id>1293</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bwziwzrv3rjyjdziia5iokis5jooa44</sha1>
      <text xml:space="preserve" bytes="7659">
== First Steps == &lt;!--T:1--&gt;
We will be working in the [[Part Workbench]] - select it from menus via View-&gt;Workbench-&gt;Part or from the Workbench selector.

&lt;!--T:2--&gt;
* Create a new empty document.
* Switch to Axonometric View.
* Toggle axis cross ON (via View Menu).
* Ensure you have the Combo View showing (via View-&gt;Views).

&lt;!--T:3--&gt;
* Create a cylinder by clicking on the [[Image:Part_Cylinder.png|32px]] [[Part_Cylinder|Cylinder]] button.
* Select it by clicking on Cylinder in the Project viewer.
* Click on the Data tab at the bottom of the Project viewer.

&lt;!--T:4--&gt;
Change the Height to 20mm. Leave the Radius at 2mm.

&lt;!--T:5--&gt;
Click on [[Tasks_Placement|Placement]] (note the little [+]) and a button with three dots will appear. Click on it. (You can also select: Menu-&gt;Edit-&gt;Placement.) The Tasks viewer appears.

&lt;!--T:6--&gt;
[[File:HTCaeroplane01.png|300px]]

&lt;!--T:7--&gt;
If you are unfamiliar with the XYZ axes then have a play with the numbers in the Translation box. When finished playing click on the Reset button.

== Second Steps == &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
[[File:HTCaeroplane02.png|400px|right]]

&lt;!--T:10--&gt;
We are now going to rotate the cylinder so that is lying along the X axis. To do this it needs to be rotated around the Y axis. The Rotation box should say 'Rotation axis with angle' so change the Axis to Y and increment the Angle until it reaches 90. Click on OK.

&lt;!--T:11--&gt;
I like to play with rotating the view at this point (and often!) so by all means do so. You should find the 'seam' of the cylinder on the underside.

&lt;!--T:12--&gt;
&lt;br style=&quot;clear:both&quot; /&gt;
[[File:HTCaeroplane03.png|400px|right]]

&lt;!--T:13--&gt;
We are now going to add and modify a box so click on the [[Image:Part_Box.png|32px]] [[Part_Box|Box]] button. Select it by clicking on Box in the Project viewer.
Change the Height to 1mm, the Length to 5mm and the Width to 20mm.

&lt;!--T:14--&gt;
Click on [[Tasks_Placement|Placement and the three dots]] to get the Tasks viewer. Using the Translation box enter Y: -10 and Z: -1. Click on OK

&lt;!--T:15--&gt;
We are now going to merge these two shapes together with a Boolean Operation. Click on the [[Image:Part_Booleans.png|32px]] [[Part_Booleans|Booleans]] button and the Tasks viewer will display the Boolean Operation selector.

&lt;!--T:16--&gt;
Make sure Union is selected, and that the Cylinder and the Box are each ticked once in the two shape lists. Click on Apply. Click on Close. You now have a single object called Fusion.

&lt;!--T:17--&gt;
&lt;br style=&quot;clear:both&quot; /&gt;

&lt;!--T:18--&gt;
Let's add one more box to finish off our model. Create a Box, Select it and change its Height to 5mm, Length to 3mm and Width to 1mm. Change its Placement by Y: -0.5.

&lt;!--T:19--&gt;
We now need to join our Fusion to Box001 so we'll do it the quick way. Click on Fusion in the Project viewer and CTRL-click on Box001. This selects both parts together. Now click on the [[Image:Part_Fuse.png|32px]] [[Part_Fuse|Fuse]] button to get Fusion001.

&lt;!--T:20--&gt;
You should now have a simple aeroplane model. Right-click on Fusion001 and Rename it 'Aeroplane'.

&lt;!--T:21--&gt;
[[File:HTCaeroplane04.png|500px|right]]

&lt;!--T:22--&gt;
I think the wings need to be moved forward a bit but if I select Aeroplane and try changing its Placement X Translation the whole thing moves. I only want to move the wings so cancel the Placement.

&lt;!--T:23--&gt;
Expand Aeroplane (click on the [+] beside it) and expand Fusion.

&lt;!--T:24--&gt;
Click on Box and get its [[Tasks_Placement|Placement into Tasks]]. Notice it already has Y: -10 and Z: -1 in the Translation. Change the X translation to 3 and click on Apply. That's better. Click OK.

&lt;!--T:25--&gt;
&lt;br style=&quot;clear:both&quot; /&gt;

== Rotations == &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
Click on Aeroplane and get its [[Tasks_Placement|Placement into Tasks]] (Other explanation on [[Placement|Placement]]). In the Rotation section change where it says 'Rotation axis with angle' to 'Euler angles' because they're a lot easier to work with.

&lt;!--T:28--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;200&quot;&gt;
Image:Tache_Placement_Lacet_fr_Mini.gif|'''Yaw''' is the rotation about the '''Z axis''', that is to say a rotation from left to right. (The yaw angle is the '''Psi ψ''').
Image:Tache_Placement_Tangage_fr_Mini.gif|'''Pitch''' is rotation about the '''Y axis''', that is to say nose-up and nose-down.
Image:Tache_Placement_Roulis_fr_Mini.gif|'''Roll''' is rotation about the '''X axis''', that is to say wing up and down.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br&gt; 

&lt;!--T:29--&gt;
{{clear}}
However, even here there are some important things to remember:

&lt;!--T:30--&gt;
* Positive Rotations are clockwise when viewed from the Origin outwards along a positive axis. Or to put it another way: Positive Rotations are anticlockwise when viewed from a positive axis towards the Origin.

&lt;!--T:31--&gt;
* Although the three labels are Yaw, Pitch and Roll that's not really what they are. Yaw, Pitch and Roll are references to the ''body coordinates'' of an object in 3D space. The labels should be Heading, Elevation and Bank or even Azimuth, Inclination and Bank because thay actually refer to the ''space coordinates'' of the 3D system. These are the '''Tait-Bryan angles'''. If you want more information then try [http://en.wikipedia.org/wiki/Euler_angles#Tait-Bryan_angles Euler Angles].

&lt;!--T:32--&gt;
* With the Aeroplane in its present position simple rules apply. Yaw is rotation around the Z axis, ie left and right. Pitch is rotation around the Y axis, ie nose up and down. Roll is rotation around the X axis, ie wings up and down. That's fine to start with but it's not going to be true later!

&lt;!--T:33--&gt;
Have a play with the three YPR numbers. You only need to change things by a few degrees to get the idea. Reset when you finished.

&lt;!--T:34--&gt;
Now we're going to see why the Yaw-Pitch-Roll labels are not really suitable. Change the Roll number to 90°. Yaw should move the nose of the aeroplane up and down and Pitch should move it side to side ''as viewed from outside the aeroplane'' which is where we are. Do they? No they don't! Pitch changes the yaw and Yaw changes the pitch. OK, Reset.

&lt;!--T:35--&gt;
So, a better way of thinking about rotations is that Yaw changes your Longitude, Pitch changes your Latitude and Roll changes the direction (NSEW) that you're facing. Or you could check out [http://en.wikipedia.org/wiki/Axes_conventions Axes conventions] for other descriptions.

&lt;!--T:36--&gt;
Right, back to work. Change Yaw to 45° and Pitch to -30°. Click on OK to show that the operation has been completed. Now get back the [[Tasks_Placement|Placement Task]] and look at the Rotation box. It has reverted to 'Rotation axis with angle' and has some wierd numbers Axis and Angle boxes. Mine had Axis: (0.219493,-0.529904,0.819161) and Angle: 53.65°. The three numbers in brackets are the XYZ components of a unit vector in the 3D space. It is the axis about which our original Aeroplane was rotated to get our final Aeroplane. The angle is how much it was rotated. Clever, huh, but not very friendly! It was Euler who showed that you could combine a series of XYZ rotations into one rotation about one axis.

&lt;!--T:37--&gt;
Here's some more suggestions for playing with the Aeroplane:

&lt;!--T:38--&gt;
* Change the Z Location (and Apply) then change the YPR numbers and see what the effect is. Then try changing the X and Y Locations and rotating.
* Change the X Centre (and Apply) then change the YPR numbers and see what the effect is. Then try changing the Y and Z Centres and rotating.

&lt;!--T:39--&gt;
I hope this little tutorial has helped you to get a feel for rotations.

&lt;!--T:40--&gt;
[[Category:Tutorials]]

</text>
    </revision>
  </page>
  <page>
    <title>Application Overview</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>108072</id>
      <parentid>88947</parentid>
      <timestamp>2014-09-01T19:35:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Arbeiten mit Arbeitsbereichen</title>
    <ns>0</ns>
    <id>1279</id>
    <revision>
      <id>107946</id>
      <parentid>88949</parentid>
      <timestamp>2014-09-01T10:47:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Arbeiten mit Pivy</title>
    <ns>0</ns>
    <id>2283</id>
    <revision>
      <id>107947</id>
      <parentid>88950</parentid>
      <timestamp>2014-09-01T10:48:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Arbeiten mit PyQt</title>
    <ns>0</ns>
    <id>2282</id>
    <revision>
      <id>107948</id>
      <parentid>88951</parentid>
      <timestamp>2014-09-01T10:49:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Arch Add</title>
    <ns>0</ns>
    <id>1728</id>
    <revision>
      <id>70980</id>
      <parentid>70979</parentid>
      <timestamp>2014-02-22T16:29:21Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>6wrlo23gwaiuszr7igmm0mxkzh06402</sha1>
      <text xml:space="preserve" bytes="1821">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Add|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Add|SeeAlso=[[Arch Remove]]}}

==Description== &lt;!--T:10--&gt; 

&lt;!--T:2--&gt;
The Add tool allows you to do 4 kinds of operations:
* Add [[Part Module|shape]]-based objects to an Arch component, such as a [[Arch Wall|wall]] or [[Arch Structure|structure]]. These objects make then part of the Arch component, and allow you to modify its shape but keeping its base properties such as width and height
* Add Arch components, such as a [[Arch Wall|walls]] or [[Arch Structure|structures]], to a group-based arch object such as [[Arch Floor|floors]].
* Add [[Arch Axis|axis systems]] to [[Arch Structure|structural objects]]
* Add objects to [[Arch SectionPlane|section planes]]

&lt;!--T:11--&gt;
[[Image:Arch Add example.jpg|640px]]

&lt;!--T:3--&gt;
In the above image, a box is being added to a wall.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select the object(s) to be added, then the &quot;host&quot; object (the host object must be the last one you selected)
# Press the {{KEY|[[Image:Arch Add.png|16px]] '''Add'''}} button

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The Add tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 addComponents (objectsList,hostObject) 
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Adds the given object or the objects from the given list as components to the given host Object. Use this for example to add windows to a wall, or to add walls to a floor.
* Returns nothing.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD, Arch, Draft, Part
 line = Draft.makeWire([FreeCAD.Vector(0,0,0),FreeCAD.Vector(2,2,0)])
 wall = Arch.makeWall(line)
 box = Part.makeBox(1,1,1)
 Arch.addComponents(box,wall)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Axis</title>
    <ns>0</ns>
    <id>3674</id>
    <revision>
      <id>46266</id>
      <parentid>46265</parentid>
      <timestamp>2013-11-30T18:30:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>b4gmwerjcsftgxrup9j7yr00aevbanl</sha1>
      <text xml:space="preserve" bytes="3097">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Axis|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Axis|Shortcut=A X}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Axis tool allows you to places an axes system in the current document. The distance and the angle between axes is customizable, as well as the numbering style. The axes serve mainly as references to snap objects onto, but can also be used together with [[Arch Structure|structures]] to create parametric arrays of beams or columns.

&lt;!--T:18--&gt;
[[Image:Arch Axis example.jpg|600px]]

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Press the {{KEY|[[Image:Arch Axis.png|16px]] [[Arch Axis]]}} button, or press {{KEY|A}} then {{KEY|X}} keys
# [[Draft Move|Move]]/[[Draft Rotate|rotate]] the axes system to the desired position
# Enter edit mode by double-clicking the axes system in the tree view to adjust its settings like number of axes, distances and angles between axes.

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* Each axis in an axes system has its own distance and angle in relation to the previous axis. This allows to do very complex systems such as non-orthogonal systems, polar systems or any kind of non-uniform system.
* Axes length, size of the bubbles and numbering styles are customizable directly via the axes system's properties

==Structural systems== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The main use of axes systems is simply to give you reference lines to snap to, but they can also be used to automatically build structural arrays, such as columns grids and beam layouts:

&lt;!--T:19--&gt;
[[Image:Arch Axis example2.jpg|600px]]

&lt;!--T:10--&gt;
To obtain that result, one or more axes systems must be added to a [[Arch Structure|structural element]], turning it into an array. If one axes system is added, the element is copied once on each line of the system, like the beams on the image above. If two systems are added, the element is copied once on each intersection of the two systems, like the columns on the image above. The same axes systems can of course be used in several structural objects.

&lt;!--T:11--&gt;
# Create an [[Arch Structure]] object
# Create one or more [[Arch Axis|axes systems]]
# Select one or more axes systems, then the structure object
# Press the {{KEY|[[Image:Arch Add.png|16px]] [[Arch Add]]}} button
# By entering the edit mode of the structure object (double-clicking it in the tree view), you can add or remove axes systems from it.

==Properties== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* {{PropertyData|Length}}: The length of the axes
* {{PropertyView|Bubble Size}}: The size of the axis bubbles
* {{PropertyView|Numeration style}}: How the axes are numbered: 1,2,3, A,B,C, etc...

==Scripting== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
The Axis tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeAxis ([number],[interval])
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
:makes an Axis System based on the given number of axes and interval distance

&lt;!--T:17--&gt;
Example:

&lt;syntaxhighlight&gt;
import Arch
Arch.makeAxis(5,2)
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch Building</title>
    <ns>0</ns>
    <id>1720</id>
    <revision>
      <id>44139</id>
      <parentid>44138</parentid>
      <timestamp>2013-11-29T10:50:10Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>houw4yayt5eflzeexj8acd4b17rgfwk</sha1>
      <text xml:space="preserve" bytes="1445">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Building|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Building|Shortcut=B U|SeeAlso=[[Arch Floor]], [[Arch Site]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Arch Building is a special type of FreeCAD group object particularly suited for representing a whole building unit. They are mostly used to organize your model, by containing [[Arch Floor|floor]] objects.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Optionally, select one or more objects to be included in your new building
# Press the {{KEY|[[Image:Arch Building.png|16px]] '''Arch Building'''}} button, or press the {{KEY|B}} then {{KEY|U}} keys

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* After creating a building, you can add more objects to it by drag and dropping them in the Tree View or by using the [[Image:Arch Add.png|16px]] [[Arch Add]] tool
* You can remove objects from a building by drag and dropping them out of it the Tree View or by using the [[Image:Arch Remove.png|16px]] [[Arch Remove]] tool

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Building tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeBuilding ([objectslist])
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
creates a building including the objects from the given list.

&lt;!--T:11--&gt;
Example:

&lt;syntaxhighlight&gt;
import Arch
Arch.makeBuilding()
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Cell</title>
    <ns>0</ns>
    <id>1718</id>
    <revision>
      <id>83859</id>
      <parentid>72299</parentid>
      <timestamp>2014-05-16T07:36:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>3o2yqsyi3nfs87rthkrx9w1aqujki9x</sha1>
      <text xml:space="preserve" bytes="924">'''NOTE: Starting with version 0.13 this command is deleted. Instead, use the command''' {{KEY|[[Image:Draft_AddToGroup.png|16px|Draft_AddToGroup|link=Draft_AddToGroup]] [[Draft_AddToGroup|group]]}}.
====Description====

The Cell tools allows to group several architectural components into a &quot;group&quot;. The similar geometries are joined (walls with walls, structure elements with structure elements, etc)

[[Image:Arch Cell example.jpg]]

In the above example, the 3 walls at the left are joined into a cell, displayed at the right

====Usage====

* Select base objects to be grouped
* Press the [[Image:Arch Cell.png|16px]] '''Arch Cell''' button
* Individual components can then be added or removed to/from the cell with the [[Arch Add]] and [[Arch Remove]] tools.
[[Category:User Documentation]]
[[Category:Command_Reference]]
{{languages | {{es|Arch_Cell/es}} {{fr|Arch_Cell/fr}} {{it|Arch_Cell/it}} {{se|Arch_Cell/se}} }}</text>
    </revision>
  </page>
  <page>
    <title>Arch Check</title>
    <ns>0</ns>
    <id>3688</id>
    <revision>
      <id>93572</id>
      <parentid>71549</parentid>
      <timestamp>2014-07-02T07:55:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>o0j2w5sd93u8v0a74bpz69dl0s8erta</sha1>
      <text xml:space="preserve" bytes="897">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Check|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Check|SeeAlso=[[Arch CloseHoles|Arch CloseHoles]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool checks the current document or the selected objects for non-solid [[Part Module|Part]] or [[Arch Module|Arch]] objects, that might give problems, since most operations of the Arch module require solid objects.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Press the {{KEY|[[Image:Arch Check.png|16px]] '''Check'''}} entry in Arch -&gt; Utilities menu 

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
This tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
check (objectslist,includehidden=False)
&lt;/syntaxhighlight&gt;


&lt;!--T:8--&gt;
checks if the given objects contain only solids

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch CloseHoles</title>
    <ns>0</ns>
    <id>3687</id>
    <revision>
      <id>71593</id>
      <parentid>71537</parentid>
      <timestamp>2014-02-23T22:07:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>8o2khtxdep5xsagwbncpsmgeslozjua</sha1>
      <text xml:space="preserve" bytes="920">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch CloseHoles|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Close Holes|SeeAlso=[[Arch Check]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool identifies holes (circular sequence of open edges) in a [[Part Module|Shape]] object and attempts to close it by adding it a new face made from that edges sequence. You must still verify yourself that the result is a solid, though.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a [[Part Module|Shape]] object
# Press the {{KEY|[[Image:Arch CloseHoles.png|16px]] '''Close Holes'''}} entry in Arch -&gt; Utilities menu 

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
This tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
closeHole (shape)
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
closes a hole in an open shape

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch Concept</title>
    <ns>0</ns>
    <id>1292</id>
    <revision>
      <id>122795</id>
      <parentid>122369</parentid>
      <timestamp>2014-11-15T17:50:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>fb8z819j7rg0u9hbv6v7ys0sqgn57y9</sha1>
      <text xml:space="preserve" bytes="19523">
&lt;!--T:1--&gt;
This page is an attempt to collect ideas about parametric design in the field of architecture for building the [[Arch Module]]. Since it is a bit different than the mech engineering field, I want to define concepts a bit better before thinking about how to start implementing it... Feel free to add your ideas!

== Similar software == &lt;!--T:2--&gt;
* [http://en.wikipedia.org/wiki/Revit Revit]
* [http://en.wikipedia.org/wiki/Archicad Archicad]
* [http://en.wikipedia.org/wiki/Generative_Components Generative Components]

== File formats == &lt;!--T:3--&gt;
* [http://en.wikipedia.org/wiki/ISO_10303 STEP] - already fully working in FreeCAD
* [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC]
** http://forge.osor.eu/plugins/wiki/index.php?id=175&amp;type=g an IFC sdk
** http://www.bimserver.org/
** http://konstruct.nl/parsing-ifc-stepexpress-files-in-python-and-s

== General concepts == &lt;!--T:4--&gt;
* FreeCAD is perfect for the task. Designing with parametric objects will greatly reduce the only real problem I see in FreeCAD, which is dealing with thousands of objects. Everything needed is there already, like custom object types, custom properties, etc. The main difficulty, designing a general model for dealing with interaction between objects, is now potentially over, since FreeCAD introduced a dependency graph especially for that purpose.

&lt;!--T:5--&gt;
* [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] (building information modeling) is a concept invented by a couple of building parametric design software vendors, principally autodesk. It means that you don't project a building by drawing anymore, but by inserting information (parameters). The software would then produce a drawing automatically. This is &lt;strike&gt;totally bullshit&lt;/strike&gt; highly questionable in my opinion and only a propaganda concept. Even in most advanced BIM software around (Revit, Archicad and Microstation GC), you can't abstract the act of drawing unless you want to kill any creativity. The goal here is not to be the most automatic, but to keep flexible.

&lt;!--T:6--&gt;
* Mech engineering parametric design is usually based on changes history and constraint solving. Those two concept have much less importance in building design, since you rarely want to crawl back in the steps you did (they are usually very simple), and keeping constraints like horizontality, angle, or distance, even if they are useful, is not as important as in mech design.

&lt;!--T:7--&gt;
* Arch parametric design is based on archetypes: wall, door/window, roof, slab, beam, are the basic ones. Outside them, what you'll mostly have are derivatives of those

&lt;!--T:8--&gt;
* It makes heavy use of assembly: for example several windows are grouped together to form a curtain wall

&lt;!--T:9--&gt;
* Relationship is the key. Elements are rarely very complex or require much modeling work, but they must often be transformed by the juxtaposition or inclusion of other elements. For example a wall is nothing else than a simple extrusion, but it must connect to other walls, or take a hole when a window is inserted into it. How to build that relationship model and how/where to store it is the big problem.

&lt;!--T:10--&gt;
* A problem of about all parametric building modeling software is that they rely heavily on those archetype objects. Creating new, not-in-the-library parts, is extremely hard (Archicad) or much easier (Revit) but always a bit of a problem, and there is always a big communication problem between &quot;parametric&quot; parts and &quot;non-parametric&quot; parts. Basically you only gain the full power of the software if you use parts that are made for the job. For example transforming a simple solid into a wall is extremely problematic.

&lt;!--T:11--&gt;
* An autodesk paper about Revit: http://images.autodesk.com/adsk/files/bim_parametric_building_modeling_jan07_1_.pdf this article is mostly a propaganda for Revit, and several concepts are IMHO unimportant, like &quot;generated&quot; 2d drawings vs the ability to modify your model in 2d, but it is interesting anyway.

&lt;!--T:12--&gt;
* Speed of object calculation is not a very big issue IMHO. Modifying an object shouldn't affect many other objects, and it is usually made in a phase of adjustments, so it's not so important to have lightning-speed updates. One important thing, though, is to always save the final shape of objects, so opening saved models should not require calculations. Before saving, everything should always be recomputed.

&lt;!--T:13--&gt;
* A state-of-the-art section tool is very important. Floor plans, Elevations, Sections, Ceiling Plans - all are similar BIM tools, as they are axonometric/orthographic &quot;cut planes&quot; through the BIM model. 

&lt;!--T:14--&gt;
* There is the problem of annotation. Where to draw dimensions? on the model? Directly on the svg sheet? Not very practical... This point must be investigated further. Dimensions will belong to a layer that can be turned on/off on the plots. Also, since plots are made to a specific scale, dimensions will be scaled to match the selected scale or a custom one, chosen by user. 

&lt;!--T:15--&gt;
* A &quot;parametric building&quot; should be understood as a mix of relationship-capable objects (archetype-based) and other, non-archetype based. Transforming one object from one category to another should be feasible, and all should behave the same way under sectioning (and dimensioning).

&lt;!--T:16--&gt;
* A system for creating new components and assemblies, graphically if possible. Assemblies would work as &quot;sub-models&quot; that can be inserted/imported/linked to any BIM model. That way, a sub-model can be updated/changed and that will reflect automatically into the BIM model (if the sub-model is &quot;linked&quot;, if it is &quot;imported&quot;, then user can select to &quot;update&quot; the model to reflect the latest version of the sub-model, otherwise that will remain as last imported).

&lt;!--T:17--&gt;
* An edit mode, so one can modify the original shape that generated the part.

== About archetypes == &lt;!--T:18--&gt;
* All archetypes should always behave like object-oriented programming objects: You can make a new class based on another class.
* All archetypes should be able to interact with common object. For this, probably common objects would need custom properties.
* Walls should be defined by a simple wire (that would be extruded horizontally, then vertically), a planar shape (that would simply be added a thickness) or a solid (that would be done nothing). The result would always be a solid. Its parameters would therefore vary, depending of your data at the time of creation.
* Walls should connect to crossing/touching walls
* Walls could be made of different layers (materials). Same materials would connect together.
* Walls don't really need a drawing tool. You make them easily by converting something else. But in that case, the draft module could gain a &quot;double-line&quot; tool.
* Doors/Windows are quite simple objects, their parameter almost only concerns their internal look. But they must have a &quot;box&quot; that creates holes in other objects. 
* Beams and Slabs are simple too, but depending on their materials they must be able to connect to other slabs, beams and walls. Beams and slabs could also be joined into one single &quot;structural&quot; element. There are pillars too. All of them could be defined the same way as walls, by a wire, a shape or a solid. They could even be based on the same basis as walls...
* Roofs are a special type of object, not very interesting in their own actually, but useful because it's painful to calculate a roof manually. Basically you need to create a shape based on a contour and inclination. Should be easy to do and to extend later to other roof types.
* Assemblies need to be defined further. They are basically made of other parts, that could be anything, shapes, windows, etc... and custom properties, such as array repetition, deformation (follow a shape?), etc.
* Site Builder - a special set of tools must handle site creation and update. This toolbox needs to be compatible with other major Open Source terrain/site modelers and GIS applications (like GRASS). SiteBuilder will allow for creation of a site based on topo curves, and easy manipulation/update of the site. That will allow easy creation of: sidewalks, curbs and curb cuts, roads, landscaping, parking lots with all required sewer/runoff systems, etc. The database generated will allow for estimating cut and fill as well as other info required to do the site work. SiteBuilder will be useful also to generate the excavation required for a project. 

== Archetypes (object types) == &lt;!--T:19--&gt;

=== Wall === &lt;!--T:20--&gt;
Wall is a vertical building component that follows a path on a defined level (i.e. first floor, third floor, etc.) or is extruded horizontally from a vertical surface. Walls are made of several layers (materials, each one with specific thickness and thermal properties), and allow for openings (resulted from subtractions) or appendices (unions). When two different walls intersect, user can select the option to connect the two walls (with similar structure). All parameters of a wall are available for future structural and thermal calculations, as well to generate reports (bill of materials). So for a wall, face areas, volumes, material quantities, etc. are directly inserted in the bill of materials and cost estimate.

&lt;!--T:21--&gt;
As mentioned, walls in BIM are defined by a line/polyline/etc. that represents the &quot;center-line&quot; of the wall. This line can be aligned with the exterior face of the wall, interior face of the wall, or the center or the wall, or if user chose to, it can be custom defined. Walls have several parameters that define them: 
:- level in which wall is placed( i.e. first floor, basement, fifth floor, etc.)
:- width
:- height
:- composition

&lt;!--T:22--&gt;
The level in which walls are placed, require a previous insertion of that &quot;level&quot; by user. Once a level is inserted in the BIM model, that creates automatically a horizontal section, that in turn will generate a &quot;sheet&quot;, i.e. once I insert level called &quot;First Floor&quot; at height 0.00 that will automatically section all the visible elements at that height (plus and minus up and down so doors/windows/openings will be visible in that floor plan). Levels and elevations are similar in concept, as basically both are &quot;section planes&quot; located to a certain position/rotation in the 3D space.

&lt;!--T:23--&gt;
Walls allow for insertions of libraries like: doors, windows, curtain walls, and other custom made objects that require an opening in that wall. If just an opening is required, that can be inserted as well. 

=== Door/Window (Insert element) === &lt;!--T:24--&gt;
Doors and windows are really the same thing, a totally object which can have a lot of parameters to define its shape, and an invisible volume that is used to cut openings through receiving walls. They are typically inserted into a wall, but not always. since they can differ much, they should be easy to design.

=== Roof === &lt;!--T:25--&gt;
Roof is simply a handy way to calculate roof slope intersections

=== Slab === &lt;!--T:26--&gt;
Slab is horizontal, made from extruding vertically a closed wire or face, should connect by material to other structural members, and can have a number of appendices (union) or holes (subtraction), and layers (materials). The horizontal areas and volume must be calculated

=== Beam/Pillar (Structural element) === &lt;!--T:27--&gt;
A closed wire or face extruded in any direction, can have a number of appendices (union) or holes (subtraction).

=== Assembly === &lt;!--T:28--&gt;
A group of windows that can be shaped as a whole

== Generic mechanisms == &lt;!--T:29--&gt;
* Dependency: windows must know which wall they are inserted, walls must know which window they contain, etc... See part booleans
* Joints: walls must know which other wall connect to them and correctly connect their materials together. Moving a wall must therefore recalculate the neighbours. Establish a chart of possible joint types
* Edge categories: some edges must not be drawn when they are between 2 objects of same material. Mark edges for choosing later how to render them.
* Auto-grouping: Objects of a certain type go automatically into specific groups
* &quot;Window designer&quot;: An easy way to design parametric windows, based on profiles

=== Energy Analysis === &lt;!--T:30--&gt;
* Building needs to perform appropriate to the program that serves as well to the particular geographical location. For example a single project can be built in Miami, Florida (US) or Frankfurt (Germany) or Sydney (Australia). However, it will perform with large differences. What is appropriate for one location, might be inappropriate for another location. Designs we generate with FCBIM should be &quot;tested&quot; and see how they performs in terms of energy consumption. At this moment there are few tools available out there that allows energy performance of buildings. Major Freeware/Open Source players are: EnergyPlus, OpenStudio (an GUI interface for EnergyPlus) and ESP-r.

=== Daylight Simulation === &lt;!--T:31--&gt;
* Harvesting daylight is one of the basic approaches in sustainable design. Many modern designs turn their back to natural light and result in undesirable solutions for human beings. In US a large percentage of buildings create the so-called Sick Building Syndrome, that lead to health issues for people that live and work in these. Using daylight alleviate part of this problem. FCBIM should incorporate tools that allows daylight simulations, maybe Radiance or LuxRender or Yaf(a)ray.

=== HVAC &amp; Natural Ventilation === &lt;!--T:32--&gt;
* Tools to insert draw and calculate HVAC and allow to calculate for use of natural ventilation. Maybe OpenFOAM should be a candidate in this area, that will complement FCBIM.

== Capturing Building Knowledge == &lt;!--T:33--&gt;
The effort to create a module that will make it possible for FreeCAD to provide a contemporary building information modeling (BIM) environment is underway. The effort is geared towards bringing its capabilities to compare to those of more mature architectural modeling systems such as Revit. We recognize the limitations in available implementations of BIM one of which is the ignorance of building knowledge. For this reason we are also pursuing a parallel goal of developing capabilities that will enable FreeCAD capture such knowledge typically created mostly in the early design stage but also in the later detail design stage. In the following sections, we document capabilities that are not so common in available tools but which we believe are more appropriate and efficient in capturing building knowledge and information from concept to demolition. The following sections provide specifications and guidelines regarding the &quot;what&quot; part of this effort. We shall fill in the &quot;how&quot; as our effort progresses. Needless to say, things will change or be amended as our understanding and implementation comes together.

=== Procedure Descriptions to Identify Objects === &lt;!--T:34--&gt;
The building design session begins on the site where the designer establishes the north-direction and introduces appropriate setbacks according to the building code applicable in the design locale. By doing this the maximum footprint for the new building is established.

==== Object 1: Building Site ==== &lt;!--T:35--&gt;
There is only one building site in a project. This object should be created as soon as the decision to design a house is made by the designer. It should exist as a form of container (because it secludes a space. More on this later) with sides, a top and a bottom. The sides can then be interactively defines in terms of length and angle. It should also be possible to add or remove sides as needed. Although the bottom is created flat, it can also be redefined with contours to provide appropriate slope. The bottom is the only part of the site that should be visible.

==== Object 2: North-Direction ==== &lt;!--T:36--&gt;
The north direction is an object that establishes the angle in the direction of true north. It is a part of the site and makes it possible for the site to determine the prevailing winds, the movement of the sun, etc.

==== Object 3: SetBack ==== &lt;!--T:37--&gt;
These are distances from the boundaries of the site which are required by code. They are part of the site but require certain parameters to be provided in order to determine which boundaries and what distances. For example the setback from the boundary next to the street may be different from the setback from a boundary next to a neighboring site. This information can be provided interactively but with the north-direction established, it is possible for the designer to enter this information during the collection of the requirements for the design. The setback, like the site, is a type of container object.

==== Object 4: Building Level ==== &lt;!--T:38--&gt;
At this point the maximum footprint for the building has been established. This footprint represents the first building level. The building level is an object that makes it possible to integrate the different building systems. Examples of building systems are architectural, structural, electrical, etc. The building level, like the building site, is a form of container. There can be one or more levels which are typically stacked on top of each other starting from the bottom. The first level is established after designating the setback for all site boundaries. Additional levels can be created but only the elevation of the bottom is modified as the boundaries of the level are invisible.

==== Object 5: Building Space ==== &lt;!--T:39--&gt;
The space is defined to satisfy the main function of the building such as a space for sleeping, eating, relaxing, working, etc. Spaces are created and grouped inside levels. There are different types of spaces which provide the appropriate functions in different building types. For example in a residential building type there are 4 main types including sleeping, living, service and traffic.

==== Object 6: Space Object ==== &lt;!--T:40--&gt;
This represents everything else that can be located in a space. Each object will have certain fundamental knowledge of its requirements. For example to describe an area for sitting, an object with at least a seat area, a leg room and maximum height requirements will be necessary.

==== Object 7: Building Container ==== &lt;!--T:41--&gt;
Most of the objects described so far are types of containers. Containers have an interior area that are secluded by boundaries. There are '''Bottom''', '''Top''' and '''Side''' boundaries. Two containers can share a side boundary. When this sharing occurs a special '''Share-Side''' object replaces the individual sides from each of the participating containers. It establishes a link between the two containers and makes it possible for them to communicate. For example when there is a shared side between a sleeping and a service space such as a bathroom and a bedroom, that side will expect some form of treatment for noise dampening to avoid flooding the sleeping area with too much noise. Each boundary in a container has a '''Form'''. A form is a container-type object that can have the necessary descriptions or '''Property''' of materials typical in building envelops.

=== Object Diagram === &lt;!--T:42--&gt;
The following diagram illustrates the relationship between all objects described so far.

&lt;!--T:43--&gt;
[[File:BldgComponents.png|800px|thumb|left|Objects for capturing building knowledge]]

&lt;!--T:44--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch CutPlane</title>
    <ns>0</ns>
    <id>47882</id>
    <revision>
      <id>123410</id>
      <parentid>123309</parentid>
      <timestamp>2014-11-17T17:54:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>spelling</comment>
      <sha1>guovwg366tou0yru4awszckt68bmjp6</sha1>
      <text xml:space="preserve" bytes="1335">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch CutPlane|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Cut Plane|SeeAlso=[[Arch Remove|Arch Remove]]}}

==Description== &lt;!--T:10--&gt; 

&lt;!--T:2--&gt;
The Cut Plane tool allows you to cut an Arch object according to a plan:
* You can cut an Arch object with the selected face, normal or opposite of the face plan.
* This add a substraction component CutVolume to the Arch object

&lt;!--T:11--&gt;
[[Image:Arch CutPlane example.jpg|640px]]

&lt;!--T:3--&gt;
In the above image, two Arch Structure are cut with respective plane.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select the object to be cut, then the face (the face must be the last one you selected)
# Press the {{KEY|[[Image:Arch_CutPlane.svg|16px]] '''Cut Plane'''}} button
# Choose if the object is cut '''behind''' the normale face or '''front''' of the normale face
# Click the Ok button

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The CutPlane tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 cutComponentwithPlane (archObject,face,faceSide) 
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* archObject is the object to cut
* face is the face of an object that come the plan from 
* faceSide is the side of the face to cut. 0 = Behind, 1 = Front

</text>
    </revision>
  </page>
  <page>
    <title>Arch DAE</title>
    <ns>0</ns>
    <id>1711</id>
    <revision>
      <id>44411</id>
      <parentid>44410</parentid>
      <timestamp>2013-11-29T14:13:28Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0o935s0b0ok9uaqf2xvmzt266eutnmi</sha1>
      <text xml:space="preserve" bytes="772">
&lt;!--T:1--&gt;
The [http://en.wikipedia.org/wiki/COLLADA Collada (DAE)] format is a standard file format for exchange of Mesh data. The [[Arch Module]] can import meshes from .dae files, and export Arch and other [[Part Module|Shape]]-based objects to the .dae format.

&lt;!--T:2--&gt;
Note that imported objects will be [[Mesh Module|Mesh]] objects, and will need to be turned into Shapes or Arch objects for optimal use. The [[Arch Module]] has several tools to help you in performing that operation.

&lt;!--T:3--&gt;
The Collada import functionality in the Arch module depends on [http://pycollada.github.com/ pycollada]. If it is not installed on your system, Collada import/export will be disabled.

&lt;!--T:4--&gt;
[[Category: User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Arch Floor</title>
    <ns>0</ns>
    <id>1719</id>
    <revision>
      <id>44117</id>
      <parentid>44116</parentid>
      <timestamp>2013-11-29T10:21:48Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0gzl72v6l4q0g6ipfus7eh3nv4idudl</sha1>
      <text xml:space="preserve" bytes="1691">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Floor|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Floor|Shortcut=F L|SeeAlso=[[Arch Building]], [[Arch Site]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Arch Floor is a special type of FreeCAD group object that has a couple of additional properties particularly suited for building floors. Particularly, they have a height property, that its children objects ([[Arch Wall|walls]] and [[Arch Structure|structures]]) can use to set their own height automatically. They are mostly used to organize your model.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Optionally, select one or more objects to be included in your new floor
# Press the {{KEY|[[Image:Arch Floor.png|16px]] '''Arch Floor'''}} button or press the {{KEY|F}} then {{KEY|L}} keys

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* After creating a floor, you can add more objects to it by drag and dropping them in the Tree View or by using the [[Image:Arch Add.png|16px]] [[Arch Add]] tool
* You can remove objects from a floor by drag and dropping them out of it the Tree View or by using the [[Image:Arch Remove.png|16px]] [[Arch Remove]] tool 

==Properties== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{PropertyData|Height}}: The height of the floor, to be used by its child objects

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Floor tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeFloor ([objectslist])
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
creates a floor including the objects from the given list.

&lt;!--T:13--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Arch
 Arch.makeFloor()
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch Frame</title>
    <ns>0</ns>
    <id>24851</id>
    <revision>
      <id>108316</id>
      <parentid>108315</parentid>
      <timestamp>2014-09-03T02:03:15Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>1urlo9zk8ldgx53hjcm7nu9rj2luxu2</sha1>
      <text xml:space="preserve" bytes="2738">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Frame|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Frame|Shortcut=F R}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Frame tool is used to build all kinds of frame objects based on a profile and a layout. The profile is extruded along the edges of the layout, which can be any 2D object such as a [[Sketcher Module|sketch]], or a [[Draft Module|draft object]]. It is especially useful to create railings, or frame walls. Frame objects can then easily be turned into [[Arch Wall|wall]] or [[Arch Structure|structure]] objects.


[[Image:Arch Frame example.jpg|640px]]


&lt;!--T:4--&gt;
In the above image, a [[Draft Line|line]] has been turned into an [[Draft Array|array]], and a frame object has been made using the array as layout, and a [[Draft Circle|circle]] as profile.

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
# Create a layout object and a profile object, for example with the [[Draft Workbench]] or the [[Sketcher Workbench]]
# Select the layout object first, then, with {{KEY|CTRL}} pressed, select the profile object
# Press the {{KEY|[[Image:Arch Frame.png|16px]] [[Arch Frame]]}} button, or press {{KEY|F}} then {{KEY|R}} keys

==Options== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* The frame object can be placed at a certain distance from the layout object, by setting its Offset property
* The profile will be copied at the base of each edge of the layout object, then extruded along it. You can control how the profile is placed at the base of each edge with the Align and Rotation properties.

==Properties== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
* {{PropertyData|Base}}: The layout this frame is based on.
* {{PropertyData|Profile}}: The profile this frame is based on.
* {{PropertyData|Align}}: Specifies if the profile must be rotated to have its normal axis aligned with each edge.
* {{PropertyData|Offset}}: An optional distance between the layout object and the frame object.
* {{PropertyData|Rotation}}: The rotation of the profile around its extrusion axis.

==Scripting== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
The Frame tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makeFrame ( layout,profile )
&lt;/syntaxhighlight&gt;


&lt;!--T:13--&gt;
* Creates a frame object from a base sketch (or any other object containing wires) and a profile object (an extrudable 2D object containing faces or closed wires)
* Returns the new frame object, or None if the operation failed.

&lt;!--T:14--&gt;
Example:


&lt;syntaxhighlight&gt;
 import Draft, Arch
 layout = Draft.makeLine(FreeCAD.Vector(0,0,0),FreeCAD.Vector(2,0,0))
 profile = Draft.makeCircle(.2)
 Arch.makeFrame(layout,profile)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch IFC</title>
    <ns>0</ns>
    <id>1710</id>
    <revision>
      <id>71327</id>
      <parentid>71053</parentid>
      <timestamp>2014-02-23T13:22:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>s1qpxg7ml56pd2mzpoqn0vvxoxowctb</sha1>
      <text xml:space="preserve" bytes="1951">

&lt;!--T:3--&gt;
'''Warning''': IFC files handling is still under development, and should not be relied on for production work.

==Importing== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
The [[Arch Module]] features an [http://en.wikipedia.org/wiki/Industry_Foundation_Classes Industry Foundation Classes (IFC)] importer. The IFC format is a more and more widely spread format to interchange data between [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] applications, used in architecture an d engineering.

&lt;!--T:6--&gt;
The importer is still a work in progress, and can use two different IFC processing engines: a built-in python parser, that is slower but doesn't need any other piece of software, or [http://ifcopenshell.org IfcOpenShell], which is not bundled with FreeCAD and must be [[Extra_python_modules|installed on your system]]. If IfcOpenShell is correctly installed, it will be detected by FreeCAD and used to import IFC files, unless you force the use of the internal python parser from the Arch preferences settings.

&lt;!--T:7--&gt;
The use of IfcOpenShell is highly recommended, since it is much faster and more powerful than the internal parser. IfcOpenShell supports all Ifc 2.3 entities that carry geometry information (not all of them can be converted to [[Arch Module|Arch]] objects, those that can't will be imported as simple [[Part Module|Part]] shapes. The internal parser only supports the following types:

&lt;!--T:8--&gt;
* Walls
* Beams, columns, Footings and Slabs
* Doors and Windows
* Floors
* Buildings
* Sites 

== Exporting == &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Exporting to IFC files is currently experimental and requires a special [http://github.com/aothms/IfcOpenShell development version] of IfcOpenShell. If that version is installed, IFC export becomes available. Be aware that this functionality is still in development and might not produce usable files.

&lt;!--T:11--&gt;
[[Category: User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Arch Icon</title>
    <ns>0</ns>
    <id>51414</id>
    <revision>
      <id>130643</id>
      <parentid>130124</parentid>
      <timestamp>2014-12-08T21:04:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>ci9q5h26vms4amvgg6fu3u6sxc9c3oi</sha1>
      <text xml:space="preserve" bytes="4343">
==[[Image:Arch Wall.png|32px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[[Image:Arch Wall.png|32px|Wall|link=Arch Wall]] [[Arch Wall|Arch Wall]]
 &lt;nowiki&gt;[[Image:Arch Wall.png|32px|Wall|link=Arch Wall]] [[Arch Wall|Arch Wall]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Arch Structure.png|32px|Arch Structure|link=Arch Structure]] [[Arch Structure|Arch Structure]]
 &lt;nowiki&gt;[[Image:Arch Structure.png|32px|Arch Structure|link=Arch Structure]] [[Arch Structure|Arch Structure]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Arch Cell.png|32px|Arch Cell|link=Arch Cell]] [[Arch Cell|Arch Cell]]
 &lt;nowiki&gt;[[Image:Arch Cell.png|32px|Arch Cell|link=Arch Cell]] [[Arch Cell|Arch Cell]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
[[Image:Arch Floor.png|32px|Arch Floor|link=Arch Floor]] [[Arch Floor|Arch Floor]]
 &lt;nowiki&gt;[[Image:Arch Floor.png|32px|Arch Floor|link=Arch Floor]] [[Arch Floor|Arch Floor]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Arch Building.png|32px|Arch Building|link=Arch Building|Arch Building]] [[Arch Building|Arch Building]]
 &lt;nowiki&gt;[[Image:Arch Building.png|32px|Arch Building|link=Arch Building|Arch Building]] [[Arch Building|Arch Building]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:Arch Site.png|32px|Arch Site|link=Arch Site]] [[Arch Site|Arch Site]]
 &lt;nowiki&gt;[[Image:Arch Site.png|32px|Arch Site|link=Arch Site]] [[Arch Site|Arch Site]]&lt;/nowiki&gt;

&lt;!--T:13--&gt;
[[Image:Arch Window.png|32px|Arch Window|link=Arch Window]] [[Arch Window|Arch Window]]
 &lt;nowiki&gt;[[Image:Arch Window.png|32px|Arch Window|link=Arch Window]] [[Arch Window|Arch Window]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[Image:Arch SectionPlane.png|32px|Arch SectionPlane|link=Arch SectionPlane]] [[Arch SectionPlane|Arch SectionPlane]]
 &lt;nowiki&gt;[[Image:Arch SectionPlane.png|32px|Arch SectionPlane|link=Arch SectionPlane]] [[Arch SectionPlane|Arch SectionPlane]]&lt;/nowiki&gt;

&lt;!--T:15--&gt;
[[Image:Arch Axis.png|32px|Arch Axis|link=Arch Axis]] [[Arch Axis|Arch Axis]]
 &lt;nowiki&gt;[[Image:Arch Axis.png|32px|Arch Axis|link=Arch Axis]] [[Arch Axis|Arch Axis]]&lt;/nowiki&gt;

&lt;!--T:16--&gt;
[[Image:Arch Roof.png|32px|Arch Roof|link=Arch Roof]] [[Arch Roof|Arch Roof]]
 &lt;nowiki&gt;[[Image:Arch Roof.png|32px|Arch Roof|link=Arch Roof]] [[Arch Roof|Arch Roof]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
[[Image:Arch Add.png|32px|Arch Add|link=Arch Add]] [[Arch Add|Arch Add]]
 &lt;nowiki&gt;[[Image:Arch Add.png|32px|Arch Add|link=Arch Add]] [[Arch Add|Arch Add]]&lt;/nowiki&gt;

&lt;!--T:18--&gt;
[[Image:Arch Remove.png|32px|Arch Remove|link=Arch Remove]] [[ Arch Remove|Arch Remove]]
 &lt;nowiki&gt;[[Image:Arch Remove.png|32px|Arch Remove|link=Arch Remove]] [[ Arch Remove|Arch Remove]]&lt;/nowiki&gt;

===Architectural modification tools=== &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
[[Image:Arch SplitMesh.png|32px|Arch SplitMesh|link=Arch SplitMesh]] [[Arch SplitMesh|Arch SplitMesh]]
 &lt;nowiki&gt;[[Image:Arch SplitMesh.png|32px|Arch SplitMesh|link=Arch SplitMesh]] [[Arch SplitMesh|Arch SplitMesh]]&lt;/nowiki&gt;

&lt;!--T:21--&gt;
[[Image:Arch MeshToShape.png|32px|Arch MeshToShape|link=Arch MeshToShape]] [[Arch MeshToShape|Arch MeshToShape]]
 &lt;nowiki&gt;[[Image:Arch MeshToShape.png|32px|Arch MeshToShape|link=Arch MeshToShape]] [[Arch MeshToShape|Arch MeshToShape]]&lt;/nowiki&gt;

&lt;!--T:22--&gt;
[[Image:Arch RemoveShape.png|32px|Arch RemoveShape|link=Arch RemoveShape]] [[Arch RemoveShape|Arch RemoveShape]]
 &lt;nowiki&gt;[[Image:Arch RemoveShape.png|32px|Arch RemoveShape|link=Arch RemoveShape]] [[Arch RemoveShape|Arch RemoveShape]]&lt;/nowiki&gt;

&lt;!--T:23--&gt;
[[Image:Arch SelectNonSolidMeshes.png|32px|Arch SelectNonSolidMeshes|link=Arch SelectNonSolidMeshes]] [[Arch SelectNonSolidMeshes|Arch SelectNonSolidMeshes]]
 &lt;nowiki&gt;[[Image:Arch SelectNonSolidMeshes.png|32px|Arch SelectNonSolidMeshes|link=Arch SelectNonSolidMeshes]] [[Arch SelectNonSolidMeshes|Arch SelectNonSolidMeshes]]&lt;/nowiki&gt;

&lt;!--T:24--&gt;
[[Image:Arch CloseHoles.png|32px|Arch CloseHoles|link=Arch CloseHoles]] [[Arch CloseHoles|Arch CloseHoles]]
 &lt;nowiki&gt;[[Image:Arch CloseHoles.png|32px|Arch CloseHoles|link=Arch CloseHoles]] [[Arch CloseHoles|Arch CloseHoles]]&lt;/nowiki&gt;

&lt;!--T:25--&gt;
[[Image:Arch Check.png|32px|Arch Check|link=Arch Check]] [[Arch Check|Arch Check]]
 &lt;nowiki&gt;[[Image:Arch Check.png|32px|Arch Check|link=Arch Check]] [[Arch Check|Arch Check]]&lt;/nowiki&gt;

&lt;!--T:26--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Arch IfcExplorer</title>
    <ns>0</ns>
    <id>24891</id>
    <revision>
      <id>93610</id>
      <parentid>71046</parentid>
      <timestamp>2014-07-02T08:11:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>14lo3qymykpmmbrns7kslpd0rgzfwb1</sha1>
      <text xml:space="preserve" bytes="849">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch IfcExplorer|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Ifc Explorer|SeeAlso=[[Arch IFC|Arch IFC]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The IFC explorer is a simple utility to explore the contents of an [[Arch IFC|IFC]] file. IFC files are text files, and are therefore readable in a text editor, but the information is condensed and hard to browse. This utility presents you the exact same content, but displayed in an easier way. 


[[Image:Arch IfcExplorer example.jpg|640px]]


&lt;!--T:4--&gt;
The purpose of this explorer is simply to allow you to check what is really written in an IFC file, in case you want to verify if the contents were correctly imported or exported to / from an IFC-aware application such as FreeCAD. 



</text>
    </revision>
  </page>
  <page>
    <title>Arch Key</title>
    <ns>0</ns>
    <id>51436</id>
    <revision>
      <id>131435</id>
      <parentid>130114</parentid>
      <timestamp>2014-12-13T21:06:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>bfjryltbnv35jo5sj7qy9b1xsp67x6g</sha1>
      <text xml:space="preserve" bytes="4589">
==[[File:Arch Wall.png|32px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Arch Wall.png|16px|Wall|link=Arch Wall]] [[Arch Wall|Arch Wall]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Wall.png|16px|Wall|link=Arch Wall]] [[Arch Wall|Arch Wall]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Arch Structure.png|16px|Arch Structure|link=Arch Structure]] [[Arch Structure|Arch Structure]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Structure.png|16px|Arch Structure|link=Arch Structure]] [[Arch Structure|Arch Structure]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Arch Cell.png|16px|Arch Cell|link=Arch Cell]] [[Arch Cell|Arch Cell]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Cell.png|16px|Arch Cell|link=Arch Cell]] [[Arch Cell|Arch Cell]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Arch Floor.png|16px|Arch Floor|link=Arch Floor]] [[Arch Floor|Arch Floor]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Floor.png|16px|Arch Floor|link=Arch Floor]] [[Arch Floor|Arch Floor]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Arch Building.png|16px|Arch Building|link=Arch Building|Arch Building]] [[Arch Building|Arch Building]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Building.png|16px|Arch Building|link=Arch Building|Arch Building]] [[Arch Building|Arch Building]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Arch Site.png|16px|Arch Site|link=Arch Site]] [[Arch Site|Arch Site]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Site.png|16px|Arch Site|link=Arch Site]] [[Arch Site|Arch Site]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Arch Window.png|16px|Arch Window|link=Arch Window]] [[Arch Window|Arch Window]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Window.png|16px|Arch Window|link=Arch Window]] [[Arch Window|Arch Window]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Arch SectionPlane.png|16px|Arch SectionPlane|link=Arch SectionPlane]] [[Arch SectionPlane|Arch SectionPlane]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch SectionPlane.png|16px|Arch SectionPlane|link=Arch SectionPlane]] [[Arch SectionPlane|Arch SectionPlane]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Arch Axis.png|16px|Arch Axis|link=Arch Axis]] [[Arch Axis|Arch Axis]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Axis.png|16px|Arch Axis|link=Arch Axis]] [[Arch Axis|Arch Axis]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Arch Roof.png|16px|Arch Roof|link=Arch Roof]] [[Arch Roof|Arch Roof]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Roof.png|16px|Arch Roof|link=Arch Roof]] [[Arch Roof|Arch Roof]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:Arch Add.png|16px|Arch Add|link=Arch Add]] [[Arch Add|Arch Add]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Add.png|16px|Arch Add|link=Arch Add]] [[Arch Add|Arch Add]]}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
{{KEY|[[File:Arch Remove.png|16px|Arch Remove|link=Arch Remove]] [[ Arch Remove|Arch Remove]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Remove.png|16px|Arch Remove|link=Arch Remove]] [[ Arch Remove|Arch Remove]]}}&lt;/nowiki&gt;

===Architectural modification tools=== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
{{KEY|[[File:Arch SplitMesh.png|16px|Arch SplitMesh|link=Arch SplitMesh]] [[Arch SplitMesh|Arch SplitMesh]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch SplitMesh.png|16px|Arch SplitMesh|link=Arch SplitMesh]] [[Arch SplitMesh|Arch SplitMesh]]}}&lt;/nowiki&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Arch MeshToShape.png|16px|Arch MeshToShape|link=Arch MeshToShape]] [[Arch MeshToShape|Arch MeshToShape]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch MeshToShape.png|16px|Arch MeshToShape|link=Arch MeshToShape]] [[Arch MeshToShape|Arch MeshToShape]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
{{KEY|[[File:Arch RemoveShape.png|16px|Arch RemoveShape|link=Arch RemoveShape]] [[Arch RemoveShape|Arch RemoveShape]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch RemoveShape.png|16px|Arch RemoveShape|link=Arch RemoveShape]] [[Arch RemoveShape|Arch RemoveShape]]}}&lt;/nowiki&gt;

&lt;!--T:18--&gt;
{{KEY|[[File:Arch SelectNonSolidMeshes.png|16px|Arch SelectNonSolidMeshes|link=Arch SelectNonSolidMeshes]] [[Arch SelectNonSolidMeshes|Arch SelectNonSolidMeshes]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch SelectNonSolidMeshes.png|16px|Arch SelectNonSolidMeshes|link=Arch SelectNonSolidMeshes]] [[Arch SelectNonSolidMeshes|Arch SelectNonSolidMeshes]]}}&lt;/nowiki&gt;

&lt;!--T:19--&gt;
{{KEY|[[File:Arch CloseHoles.png|16px|Arch CloseHoles|link=Arch CloseHoles]] [[Arch CloseHoles|Arch CloseHoles]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch CloseHoles.png|16px|Arch CloseHoles|link=Arch CloseHoles]] [[Arch CloseHoles|Arch CloseHoles]]}}&lt;/nowiki&gt;

&lt;!--T:20--&gt;
{{KEY|[[File:Arch Check.png|16px|Arch Check|link=Arch Check]] [[Arch Check|Arch Check]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Check.png|16px|Arch Check|link=Arch Check]] [[Arch Check|Arch Check]]}}&lt;/nowiki&gt;

&lt;!--T:21--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Arch MeshToShape</title>
    <ns>0</ns>
    <id>3685</id>
    <revision>
      <id>71573</id>
      <parentid>70920</parentid>
      <timestamp>2014-02-23T22:00:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>sr6fvprgw78o9667tvzhyvzord8uti7</sha1>
      <text xml:space="preserve" bytes="1066">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch MeshToShape|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Mesh to Shape|SeeAlso=[[Arch RemoveShape]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool converts a selected [[Mesh Module|Mesh]] object into a [[Part Module|Shape]] object. Note that this tool is optimized for objects with flat faces (no curves). The corresponding tool from the [[Part Workbench]] might be more suited for objects that contain curved surfaces.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a mesh object
# Press the {{KEY|[[Image:Arch MeshToShape.png|16px]] '''Mesh to Shape'''}} entry in Arch -&gt; Utilities menu 

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
This tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
meshToShape (object,[mark])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
turns a mesh into a shape, joining coplanar facets.

&lt;!--T:9--&gt;
If mark is True (default), non-solid objects will be marked in red

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch Module</title>
    <ns>0</ns>
    <id>466</id>
    <revision>
      <id>76655</id>
      <parentid>75266</parentid>
      <timestamp>2014-03-18T17:26:33Z</timestamp>
      <contributor>
        <username>Ccamara</username>
        <id>3308</id>
      </contributor>
      <sha1>g3vnvcpf6ji8ric4cvh07uv7j09xhaz</sha1>
      <text xml:space="preserve" bytes="1216">
&lt;!--T:1--&gt;
The Arch workbench provides modern [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] workflow to FreeCAD, with support for features like [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] support, fully parametric architectural entities such as walls, structural elements or windows, and rich 2D document production. The Arch workbench also feature all the tools from the [[Draft Workbench]].


[[Image:Screenshot arch window.jpg]]


&lt;!--T:2--&gt;
__NOTOC__

== Tools == &lt;!--T:8--&gt;

&lt;!--T:3--&gt;
{{Arch Tools}}

===File formats=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* [[Arch IFC|IFC]] : Industry foundation Classes (import only)
* [[Arch DAE|DAE]] : Collada mesh format
* [[Arch OBJ|OBJ]] : Obj mesh format (export only)

== API == &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
The Arch module can be used in python scripts and [[macros]] using the [http://www.freecadweb.org/api/Arch.html Arch Python API] functions.

== Tutorials == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
* [[Arch tutorial]]
* [http://yorik.uncreated.net/guestblog.php?2012=180 Arch tutorial in Yorik's blog]

&lt;!--T:6--&gt;
{{docnav|Draft Module|Robot Module}}

&lt;!--T:7--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Arch OBJ</title>
    <ns>0</ns>
    <id>1712</id>
    <revision>
      <id>44422</id>
      <parentid>44421</parentid>
      <timestamp>2013-11-29T14:16:19Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>q9s3zgvmcon506kwppggqgzx5ukxdfp</sha1>
      <text xml:space="preserve" bytes="390">
&lt;!--T:1--&gt;
Additionally to the standard FreeCAD [http://en.wikipedia.org/wiki/Wavefront_.obj_file OBJ] exporter, the [[Arch Module]] features an alternative exporter that exports coplanar faces as whole OBJ faces, instead of triangulating [[Part Module|Shape]]-based objects, like the standard exporter does.

&lt;!--T:2--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Arch Panel</title>
    <ns>0</ns>
    <id>40148</id>
    <revision>
      <id>108354</id>
      <parentid>108333</parentid>
      <timestamp>2014-09-03T11:48:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>r06jn0fqula9tqnx1l528ncon2j0szl</sha1>
      <text xml:space="preserve" bytes="2238">
&lt;!--T:4--&gt;
{{GuiCommand|Name=Arch Panel|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Panel|Shortcut=P,A|SeeAlso=[[Arch Structure|Arch Structure]]}}

==Description== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
This tool allows you to build all kinds of panel-like elements, typically for panel constructions like the [http://www.wikihouse.cc/ WikiHouse] project, but also for all kinds of objects that are based on a flat profile.


[[Image:Arch Panel example.jpg|700px]] 


&lt;!--T:7--&gt;
The above image shows a series of panel objects, simply made from imported 2D contours from a DXF file. They can then be rotated and assembled to create structures.

==How to use== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
# Select a 2D shape (draft object, face or sketch)
# Press the {{KEY|[[Image:Arch Panel.png|16px]] [[Arch Panel]]}} button, or press {{KEY|P}} then {{KEY|A}} keys
# Adjust the desired properties

==Options== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
* The thickness of a panel can be adjusted after creation
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.
* Double-clicking on the panel in the tree view after it is created allows you to enter edit mode and access and modify its additions and subtractions
* It is possible to automatically make panels composed of more than one sheet of a material, by raising its Sheets property.

==Properties== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* {{PropertyData|Thickness}}: The thickness of the panel
* {{PropertyData|Sheets}}: The number of sheets of material the panel is made of

==Scripting== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
The Panel tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makePanel ([obj],[thickness],[name])
&lt;/syntaxhighlight&gt;


&lt;!--T:16--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Arch,Draft
 base = Draft.makeRectangle(500,200)
 Arch.makePanel(base,36)
&lt;/syntaxhighlight&gt;


==Limitations== &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
* There is currently no automatic system to produce 2D cutting sheets from panel objects, but such feature is in the plans and will be added in the future.
* This tool is not available in FreeCAD versions prior to 0.15


</text>
    </revision>
  </page>
  <page>
    <title>Arch Rebar</title>
    <ns>0</ns>
    <id>24829</id>
    <revision>
      <id>93946</id>
      <parentid>70957</parentid>
      <timestamp>2014-07-02T12:48:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>rccs5juvtid3tmwwe4tbongjgdz61of</sha1>
      <text xml:space="preserve" bytes="4305">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Rebar|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Rebar|Shortcut=R B|SeeAlso=[[Arch Structure|Arch Structure]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Rebar tool allows you to place [http://en.wikipedia.org/wiki/Rebar reinforcing bars] inside [[Arch Structure]] objects. Rebar objects are based on 2D profiles such as [[Sketcher Module|sketches]] or [[Draft Module|draft objects]], that must be drawn on a face of a structure object. You can then adjust the configuration of the rebars, such as the number and diameter of the bars, or the offset distance between the two ends of the structural element.

&lt;!--T:4--&gt;
[[Image:Arch Rebar example.jpg|400px]]

&lt;!--T:5--&gt;
The above image shows a structural object, where two sketches are drawn, defining two bar diagrams. These two sketches are then turned into rebar objects.

==How to use== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
# Create a [[Arch Structure|structure]] element
# Switch to the [[Sketcher Workbench]]
# Select one face of the structural element
# Press the {{KEY|[[Image:Sketcher NewSketch.png|16px]] [[Sketcher NewSketch|New Sketch]]}} button to start a new sketch on the selected face
# Draw the diagram of your bar
# Press the {{KEY|[[Image:Sketcher LeaveSketch.png|16px]] [[Sketcher LeaveSketch|Leave Sketch]]}} button to finish
# Switch back to the [[Arch Workbench]]
# Select the sketch you just drew
# Press the {{KEY|[[Image:Arch Rebar.png|16px]] [[Arch Rebar]]}} button, or press {{KEY|R}} then {{KEY|B}} keys
# Adjust the desired properties (your rebar might not appear immediately, if some of the properties create an impossible situation, such as the bar diameter being 0, or the offset distances being bigger than the length of the structural element)

==Options== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* The rounding value is expressed in times the diameter. If your bar has a diameter of 5mm, a rounding value of 3 will create rounding at angles with a radius of 15mm.
* Default values for new rebars can be set in the Arch preferences settings.
* If a direction vector is not specified, the direction and distance along which the bars will spread is calculated automatically from the host structural object, by taking the normal direction of the base sketch, and taking its intersection with the structural object. If you specify a direction vector, the length of that vector will also be taken into account.
* The spacing value is calculated from the current amount of bars, and represents the distance between the axes of each bar. You must therefore subtract the bar diameter to obtain the size of the free space between bars.

==Properties== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
* {{PropertyData|Amount}}: The amount of bars.
* {{PropertyData|Diameter}}: The diameter of the bars.
* {{PropertyData|Direction}}: The direction (and length) along which the bars must spread. If the value is (0,0,0), the direction is calculated automatically from the host structural object.
* {{PropertyData|Offset Start}}: The offset distance between the border of the structural object and the first bar.
* {{PropertyData|Offset End}}: The offset distance between the border of the structural object and the last bar.
* {{PropertyData|Rounding}}: A rounding value to be applied to the corners of the bars, expressed in times the diameter.
* {{PropertyData|Spacing}}: The distance between the axes of each bar.

==Scripting== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
The Rebar tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeRebar (structure,sketch,[diameter],[amount],[offset])
&lt;/syntaxhighlight&gt;


&lt;!--T:14--&gt;
* Adds a Reinforcing Bar object to the given structural object, using the given sketch as profile.
* If no diameter, amount or offset value is given, the default values from the Arch preferences settings are applied.
* Returns the new Rebar object.

&lt;!--T:15--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD, Arch, Sketcher, PArt
 struct = Arch.makeStructure(1,1,3)
 sketch = FreeCAD.ActiveDocument.addObject('Sketcher::SketchObject','Sketch')
 sketch.Support = (struct,[&quot;Face6&quot;])
 sketch.addGeometry(Part.Line(App.Vector(-0.4,0.4,0),App.Vector(0.4,0.4,0)))
 Arch.makeRebar(structure,sketch)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Remove</title>
    <ns>0</ns>
    <id>1730</id>
    <revision>
      <id>44023</id>
      <parentid>44022</parentid>
      <timestamp>2013-11-29T08:50:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a8b0wayd397tv70r942s19tu7rncbmu</sha1>
      <text xml:space="preserve" bytes="1661">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Remove|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Remove|SeeAlso=[[Arch Add]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Remove tools allows you to do 2 kinds of operations:
* Remove a subcomponent from an Arch object, for example remove a box that has been added to a wall, like in the [[Arch Add]] example
* Subtract a [[Part Module|shape]]-based object from an Arch component such as a [[Arch Wall|wall]] or [[Arch Structure|structure]]

&lt;!--T:4--&gt;
[[Image:Arch Remove example.jpg|600px]]

&lt;!--T:5--&gt;
In the above image, a box is being subtracted from a wall

==How to use== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
# Select a subcomponent inside an Arch object, '''or''':
# Select object(s) to be subtracted, then the Arch component from which they must be subtracted (the arch component must be the last thing you selected)
# Press the {{KEY|[[Image:Arch Remove.png|16px]] '''Remove'''}} button

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Remove tool can by used in [[macros]] and from the python console by using the following function:

 '''removeComponents (objectsList,[hostObject])'''

&lt;!--T:10--&gt;
* removes the given component or the components from the given list from their parents. If a host object is specified, this function will try adding the components as holes to the host object instead.
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD, Arch, Draft, Part
 line = Draft.makeWire([FreeCAD.Vector(0,0,0),FreeCAD.Vector(2,2,0)])
 wall = Arch.makeWall(line)
 box = Part.makeBox(1,1,1)
 Arch.addComponents(box,wall)
 Arch.removeComponents(box)
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch RemoveShape</title>
    <ns>0</ns>
    <id>3686</id>
    <revision>
      <id>92847</id>
      <parentid>71583</parentid>
      <timestamp>2014-06-19T19:05:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>47r8xu4cozp4a79zcfcekhmfjs2lzzg</sha1>
      <text xml:space="preserve" bytes="1101">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch RemoveShape|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Utilities → Remove Shape|SeeAlso=[[Arch MeshToShape|Arch MeshToShape]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool attempts at removing the inner cubic shape of an [[Arch Wall]] or [[Arch Structure]], and adjusting its properties, making it totally parametric. This tool will only work if the underlying shape is cubic (exactly 6 faces, all corners have only right angles).

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select an [[Arch Wall]] or [[Arch Structure]]
# Press the {{KEY|[[Image:Arch RemoveShape.png|16px]] '''Remove Shape'''}} entry in Arch -&gt; Utilities menu

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
This tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
removeShape (object)
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
takes an arch object (wall or structure) built on a cubic shape, and removes the inner shape, keeping its length, width and height as parameters.

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch Roof</title>
    <ns>0</ns>
    <id>3682</id>
    <revision>
      <id>132575</id>
      <parentid>46524</parentid>
      <timestamp>2014-12-20T09:11:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>link to Arch Roof2</comment>
      <sha1>4qhjxjnvpmopyjcfrxvhi1c8mefn8yy</sha1>
      <text xml:space="preserve" bytes="1503">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Roof|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Roof|Shortcut=R F|SeeAlso=[[Arch Roof2|Arch Roof2]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Roof tool allows you to create a sloped roof from a selected face. Any face of any shape-based object can be used, and the created roof object is parametric, keeping its relationship with the base object. Please note that this tool is still in development, and might fail with very complex shapes.

&lt;!--T:12--&gt;
[[Image:Arch Roof example.jpg|600px]]

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select an existing face
# Press the {{KEY|[[Image:Arch Roof.png|16px]] [[Arch Roof]]}} button, or press {{KEY|R}} then {{KEY|F}} keys

==Properties== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* {{PropertyData|Angle}}: The slope angle of the roof
* {{PropertyData|Face}}: The face index of the base object to be used

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Roof tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeRoof (baseobj,[facenr],[angle],[name])
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
:Makes a roof based on a face from an existing object. You can provide the number of the face to build the roof on (default = 1), the angle in degrees (default=45) and a name (default = roof).

&lt;!--T:11--&gt;
Example:

&lt;syntaxhighlight&gt;
import Arch, Draft
rect = Draft.makeRectangle(2,4)
Arch.makeRoof(rect,angle=30)
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch Roof2</title>
    <ns>0</ns>
    <id>51435</id>
    <revision>
      <id>132559</id>
      <parentid>132558</parentid>
      <timestamp>2014-12-20T09:08:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>egtbtjlg8r5ln50btpz0o1ols6xyfoh</sha1>
      <text xml:space="preserve" bytes="3108">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Roof|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Roof|Shortcut=R F}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Roof tool allows you to create a sloped roof from a selected wire. The created roof object is parametric, keeping its relationship with the base object. Please note that this tool is still in development, and might fail with very complex shapes. The principle is that each edge is seen allotting a profile of roof (slope, width, overhang, thickness…).

&lt;!--T:12--&gt;
[[Image:RoofExample.png|600px]]

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Create a wire with following the conterclockwise direction and select it.
#[[Image:CounterclockwiseWire.png|600px]]
# Press the {{KEY|[[Image:Arch Roof.png|16px]] [[Arch Roof]]}} button, or press {{KEY|R}} then {{KEY|F}} keys
# The default roof object could have a strange shape, it's because the tool have not all the needed informations.
# After creating the default roof, double click on the object in the tree view to access and edit all the properties. Angle must be between 0 and 90.
#[[Image:RoofTable.png]]
# Each line correspond to a roof pane. So you can set properties you want for each roof pane.
# To help you, you can set Angle or Run to 0 and defined a Relative Id, this make automatic calculs to find the data relative to the relative Id.
# It work like this :
## If Angle = 0 and Run = 0 then profile is identical to the relative profile.
## If Angle = 0 then angle is calculated so that the height is the same one as the relative profile.
## If Run = 0 then Run is calculated so that the height is the same one as the relative profile.
# At the end, set an angle to 90° to make a gable.

&lt;!--T:13--&gt;
[[Image:RoofProfil.png|600px]]

==Properties== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* {{PropertyData|Angles}}: List of the slope angle of the roof pane (an angle for each edge in the wire).
* {{PropertyData|Runs}}: List of the width of the roof pane (a run for each edge in the wire).
* {{PropertyData|IdRel}}: List of relation Id The slope angle of the roof
* {{PropertyData|Thickness}}: List of thickness of the roof pane. (a thickness for each edge in the wire).
* {{PropertyData|Overhang}}: List of the overhang of the roof pane (an overhang for each edge in the wire).
* {{PropertyData|Face}}: The face index of the base object to be used #Not really used

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Roof tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeRoof (baseobj,[facenr],[angles],[runs],[idrel],[thickness],[overhang],[name])
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
:Makes a roof based on a closed wire. You can provide a list of angles, run, idrel, thickness, overhang for each edges in the wire to define the roof shape. The default for angle is 45 and the list is automatically complete to match with number of edges in the wire.

&lt;!--T:11--&gt;
Example:

&lt;syntaxhighlight&gt;
import Arch, Draft
rect = Draft.makeRectangle(30,40)
Arch.makeRoof(rect,angles=[30.,])
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch SectionPlane</title>
    <ns>0</ns>
    <id>1726</id>
    <revision>
      <id>46223</id>
      <parentid>46062</parentid>
      <timestamp>2013-11-30T18:21:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5sj7d4zyli7gslvlk3m07z7eqeo1hrd</sha1>
      <text xml:space="preserve" bytes="2533">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch SectionPlane|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Section Plane|Shortcut=S P}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool places in the current Document a section plane gizmo, which defines a section or view plane. The gizmo can be relocated and reoriented by moving and rotating it, until it describes the 2D view you want to obtain. The Section plane object will only consider objects that were selected when it got created. Objects can later be added or removed from a SectionPlane object with the [[Arch Add]] and [[Arch Remove]] tools.

&lt;!--T:4--&gt;
Upon creation, SectionPlane objects also insert a [[Drawing View|view]] of themselves into the active [[Drawing Module|Drawing page]], or create a new page if none exist. You can also add views of Section planes directly in the document, by using the [[Draft Shape2DView]] tool with a section plane selected.

&lt;!--T:16--&gt;
[[Image:Arch SectionPlane example.jpg|600px]]

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
# Select objects you want to be included in your section view
# Press the {{KEY|[[Image:Arch SectionPlane.png|16px]] '''SectionPlane'''}} button or press {{KEY|S}} then {{KEY|P}} keys
# [[Draft Move|Move]]/[[Draft Rotate|rotate]] the Section Plane into correct position
# Press the {{KEY|[[Image:Std Recompute.png|16px]] '''Recompute'''}} button to update the view

==Options== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* With a section plane object selected, use the [[Draft Shape2DView]] tool to create a shape object representing the section view in the document

&lt;!--T:17--&gt;
[[Image:Arch Section example2.jpg|600px]]

&lt;!--T:9--&gt;
* Create additional [[Drawing View|views]] of a section plane by selecting it, then using the [[Draft Drawing]] tool

&lt;!--T:18--&gt;
[[Image:Arch Section example3.jpg|600px]]

==Properties== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
* {{PropertyView|Display Size}}: The size of the section plane gizmo in the 3D view

==Scripting== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
The Section Plane tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeSectionPlane ([objectslist])
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
:Creates a Section plane objects including the given objects.

&lt;!--T:15--&gt;
Example:

&lt;syntaxhighlight&gt;
import FreeCAD, Draft, Arch
trace = Part.Line(FreeCAD.Vector (0, 0, 0),FreeCAD.Vector (2, 2, 0))
wall = Arch.makeWall(trace,width=0.1,height=1,align=&quot;Center&quot;)
Arch.makeSectionPlane([wall])
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch SelectNonSolidMeshes</title>
    <ns>0</ns>
    <id>3684</id>
    <revision>
      <id>93727</id>
      <parentid>71532</parentid>
      <timestamp>2014-07-02T08:59:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>b60enj0s314dkkls3f7u2ojvpn6xcrg</sha1>
      <text xml:space="preserve" bytes="628">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch SelectNonSolidMeshes|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Select non solid|SeeAlso=[[Arch MeshToShape|Arch MeshToShape]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool identifies and selects the non-solid (non-[http://en.wikipedia.org/wiki/Manifold manifold]) meshes in a selected group of selected [[Mesh Module|Mesh]] objects.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a mesh object
# Press the {{KEY|[[Image:Arch SelectNonSolidMeshes.png|16px]] '''Select non solid'''}} entry in Arch -&gt; Utilities menu


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch Site</title>
    <ns>0</ns>
    <id>1721</id>
    <revision>
      <id>94046</id>
      <parentid>45057</parentid>
      <timestamp>2014-07-02T14:04:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7cd6v9h3j55pg660o5kwyzzkk5fqx0c</sha1>
      <text xml:space="preserve" bytes="1445">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Site|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Site|Shortcut=S I|SeeAlso=[[Arch Floor|Arch Floor]], [[Arch Building|Arch Building]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Arch Site is a special type of FreeCAD group object particularly suited for representing a whole project site, or terrain. They are mostly used to organize your model, by containing [[Arch Building|building]] objects.

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Optionally, select one or more objects to be included in your new site
# Press the {{KEY|[[Image:Arch Site.png|16px]] '''Arch Site'''}} button, or press the {{KEY|S}} then {{KEY|I}} keys

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* After creating a site, you can add more objects to it by drag and dropping them in the Tree View or by using the [[Image:Arch Add.png|16px]] [[Arch Add]] tool
* You can remove objects from a site by drag and dropping them out of it the Tree View or by using the [[Image:Arch Remove.png|16px]] [[Arch Remove]] tool

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Site tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeSite ([objectslist])
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
:creates a site including the objects from the given list.

&lt;!--T:11--&gt;
Example:

&lt;syntaxhighlight&gt;
import Arch
Arch.makeSite()
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Space</title>
    <ns>0</ns>
    <id>11055</id>
    <revision>
      <id>93930</id>
      <parentid>71262</parentid>
      <timestamp>2014-07-02T12:40:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2dhxsmbw79ro9iyillp0cydir6seukk</sha1>
      <text xml:space="preserve" bytes="2887">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Space|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Space|Shortcut=S P}}

==Description== &lt;!--T:2--&gt;
The Space tool allows you to define an empty volume, either by basing it on a solid shape, or by defining its boundaries, or a mix of both. If it is based solely on boundaries, the volume is calculated by starting from the bounding box of all the given boundaries, and subtracting the spaces behind each boundary. The space object always defines a solid volume. The floor area of a space object, calculated by intersecting a horizontal plane at the center of mass of the space volume, can also be displayed, by setting the display mode of the space object to &quot;detailed&quot;.


[[Image:Arch Space example.jpg|640px]]


&lt;!--T:3--&gt;
In the above image, a space object is created from an existing solid object, then two wall faces are added as boundaries, and the display mode is set to &quot;detailed&quot; to show the floor area.

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
# Select an existing solid object, or faces on boundary objects
# Press the {{KEY|[[Image:Arch_Space.png|16px]] [[Arch Space]]}} button, or press {{KEY|S}}, {{KEY|P}} keys

==Properties== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* {{PropertyData|Base}}: The base object, if any (must be a solid)
* {{PropertyData|Boundaries}}: A list of optional boundary elements

==Scripting== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
The space tool can be used in python scripts and [[macros]] by using the following function:


&lt;syntaxhighlight&gt;
 makeSpace(objects)
&lt;/syntaxhighlight&gt;


&lt;!--T:16--&gt;
* Creates a space object from the given objects. 
* Objects can be one document object, in which case it becomes the base shape of the space object, or a list of selection objects as returned by FreeCADGui.Selection.getSelectionEx(), or a list of tuples (object, subobjectname).
* Returns the newly created space object.

&lt;!--T:17--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD, Arch, Part
 b = Part.makeBox(2,2,2)
 FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,&quot;Box&quot;).Shape=b
 sp = makeSpace([FreeCAD.ActiveDocument.Box])
&lt;/syntaxhighlight&gt;


&lt;!--T:18--&gt;
After a space object is created, selected faces can be added to it with the following function:


&lt;syntaxhighlight&gt;
 import FreeCADGui
 Arch.addSpaceBoundaries(sp, FreeCADGui.Selection.getSelectionEx())
&lt;/syntaxhighlight&gt;


&lt;!--T:19--&gt;
Boundaries can also be removed with:


&lt;syntaxhighlight&gt;
 Arch.removeSpaceBoundaries(sp, FreeCADGui.Selection.getSelectionEx())
&lt;/syntaxhighlight&gt;


==Limitations== &lt;!--T:13--&gt;

&lt;!--T:20--&gt;
* Not available below FreeCAD version 0.14
* The boundaries properties is currently not editable via GUI
* See the [http://forum.freecadweb.org/viewtopic.php?f=9&amp;t=4275 forum announcement]


{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Arch SplitMesh</title>
    <ns>0</ns>
    <id>3683</id>
    <revision>
      <id>71563</id>
      <parentid>70919</parentid>
      <timestamp>2014-02-23T21:58:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>h96nsaytrjqo8nffocbjzsucj22dwxc</sha1>
      <text xml:space="preserve" bytes="959">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch SplitMesh|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Utilities -&gt; Split Mesh|SeeAlso=[[Arch SelectNonSolidMeshes]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool splits a selected [[Mesh Module|Mesh]] object into its separate components

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a mesh object
# Press the {{KEY|[[Image:Arch SplitMesh.png|16px]] '''Split Mesh'''}} entry in Arch -&gt; Utilities menu 

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The Split Mesh tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
splitMesh (object,[mark])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
splits the given mesh object into separated components.

&lt;!--T:9--&gt;
If mark is False, nothing else is done. If True (default), non-[http://en.wikipedia.org/wiki/Manifold manifold] components will be painted in red.

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Arch Stairs</title>
    <ns>0</ns>
    <id>11051</id>
    <revision>
      <id>85844</id>
      <parentid>85843</parentid>
      <timestamp>2014-05-22T21:19:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6sb5a5med39utrxqf9l2ensc7cfsahg</sha1>
      <text xml:space="preserve" bytes="3335">
&lt;!--T:19--&gt;
{{GuiCommand|Name=Arch Stairs|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch → Stairs|Shortcut=S R}}

==Description== &lt;!--T:1--&gt;
The stairs tool allows you to build automatically several types of stairs. At the moment, only straight stairs (with or without a central landing) are supported. Stairs can be built from scratch, or from a straight [[Draft Line|line]], in which case the stairs follow the line. If the line is not horizontal but has a vertical inclination, the stairs will also follow its slope.

&lt;!--T:9--&gt;
See the [http://en.wikipedia.org/wiki/Stairs Stairs entry in wikipedia] for a definition of the different terms used to describe parts of stairs.


[[Image:Arch Stairs example.jpg|640px]]


&lt;!--T:7--&gt;
On the above image, two stairs were created, one with a massive structure and a landing, and another one with a single stringer.

==How to use== &lt;!--T:2--&gt;
# Press the {{KEY|[[Image:Arch_Stairs.png|16px]] [[Arch Stairs]]}} button, or press {{KEY|S}}, {{KEY|R}} keys
# Adjust the desired properties. Some parts of the stairs, such as the structure, might not appear immediately, if any of the properties makes it impossible, such as a structure thickness of 0.

==Properties== &lt;!--T:6--&gt;

&lt;!--T:3--&gt;
Base

&lt;!--T:10--&gt;
* {{PropertyData|Align}}: The alignment of these stairs on their baseline, if applicable.
* {{PropertyData|Base}}: The baseline of these stairs, if any.
* {{PropertyData|Height}}: The total height of these stairs, if not based on a baseline, or the baseline is horizontal.
* {{PropertyData|Length}}: The total length of these stairs if no baseline is defined.
* {{PropertyData|Width}}: The width of these stairs.

&lt;!--T:11--&gt;
Steps

&lt;!--T:12--&gt;
* {{PropertyData|Nosing}}: The size of the nosing.
* {{PropertyData|Number of Steps}}: The numbers of steps (risers) in these stairs.
* {{PropertyData|Riser Height}}: The height of the risers.
* {{PropertyData|Tread Depth}}: The depth of the treads.
* {{PropertyData|Tread Thickness}}: The thickness of the treads.

&lt;!--T:13--&gt;
Structure

&lt;!--T:14--&gt;
* {{PropertyData|Landings}}: The type of landings.
* {{PropertyData|Stringer Offset}}: The offset between the border of the stairs and the structure.
* {{PropertyData|Stringer Width}}: The width of the stringers.
* {{PropertyData|Structure}}: The type of structure of these stairs.
* {{PropertyData|Structure Thickness}}: The thickness of the structure.
* {{PropertyData|Winders}}: The type of winders.

== Scripting == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
Stairs can be created from python scripts and [[macros]] by using the following function:


&lt;syntaxhighlight&gt;
 makeStairs([base], [length], [width], [height], [steps])
&lt;/syntaxhighlight&gt;


&lt;!--T:17--&gt;
* Creates a stairs object with the given attributes.
* Returns the new stairs object.

&lt;!--T:18--&gt;
Example:


&lt;syntaxhighlight&gt;
 import Arch
 makeStairs(length=5, width=1.2, height=3, steps=14)
&lt;/syntaxhighlight&gt;


==Limitations== &lt;!--T:5--&gt;
* Not available before FreeCAD version 0.14
* Only straight stairs are available at the moment
* See the [http://forum.freecadweb.org/viewtopic.php?f=23&amp;t=6534 forum entry] for circle stairs.
* See the [http://forum.freecadweb.org/viewtopic.php?f=9&amp;t=4564 forum announcement].


{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Arch Structure</title>
    <ns>0</ns>
    <id>1716</id>
    <revision>
      <id>94838</id>
      <parentid>70917</parentid>
      <timestamp>2014-07-08T14:04:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>pn97dhuzwkamh6pb6hkhinr8zoqzep2</sha1>
      <text xml:space="preserve" bytes="2885">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Structure|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Structure|Shortcut=S T|SeeAlso=[[Arch Wall|Arch Wall]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool allows you to build structural elements such as columns or beams, by specifying their width, length and height, or by basing them on a 2D profile.

&lt;!--T:15--&gt;
[[Image:Arch Structure example.jpg]]

&lt;!--T:4--&gt;
The above image shows a column based on a 2D base profile, a column and a beam based on no profile (defined by their height, length and width dimensions) and a metallic profile based on a 2D contour (face, wire or sketch). Additionally, a certain number of presets available during object creation, allow you to quickly build a structural element from a predefined standard profile.

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
# Select a 2D shape (draft object, face or sketch) (optional)
# Press the {{KEY|[[Image:Arch Structure.png|16px]] '''Arch Structure'''}} button, or press {{KEY|S}} then {{KEY|T}} keys
# Adjust the desired properties

==Options== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* If no object is selected, a default 3-dimension block is created
* The height, width and length of a structure can be adjusted after creation
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.
* Double-clicking on the structure in the tree view after it is created allows you to enter edit mode and access and modify its additions and subtractions
* In edit mode, it is also possible to add [[Arch Axis|axes systems]] to the structural element. When adding one axes system, the structural element will be copied once on each axis of the system. When adding two axes systems, the structural element will be copied once on each intersection of the two systems.

==Properties== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
* {{PropertyData|Length}}: The length of the structure (only used if not based on a profile)
* {{PropertyData|Width}}: The width of the structure (only used if not based on a profile)
* {{PropertyData|Height}}: The height of the structure (or the extrusion length when based on a profile). If no height is given, and the structure is inside a [[Arch Floor|floor]] object with its height defined, the structure will automatically take the value of the floor height.

==Scripting== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
The Structure tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeStructure ([obj],[length],[width],[height],[name])
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
: creates a structure element based on the given profile object and the given extrusion height. If no base object is given, you can also specify length and width for a cubic object.

&lt;!--T:14--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Arch
 Arch.makeStructure(0.5,1,3)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Survey</title>
    <ns>0</ns>
    <id>24877</id>
    <revision>
      <id>72510</id>
      <parentid>71031</parentid>
      <timestamp>2014-02-28T16:09:07Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>thq1ovshbnpc6ufy8tyja1urcwd8udo</sha1>
      <text xml:space="preserve" bytes="2357">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Survey|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Survey|SeeAlso=[[Macro FCInfo|FCInfo (macro)]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The survey tool enters a special surveying mode, which allows you to quickly grab measures and information from a model, and transfer that information to other applications. Once you are in Survey mode, clicking on different subelements of 3D objects gathers the following information, depending on what you click:

&lt;!--T:4--&gt;
* If you click on an edge, you get its length
* If you click on a vertex, you get its height (coordinate on the Z axis)
* If you click on a face, you get its area
* If you double-click anything, therefore select the whole object, you get its volume

&lt;!--T:5--&gt;
When such a piece of information is gathered, three things happen:

&lt;!--T:6--&gt;
* A label is placed on top of the element you clicked, that displays the value (with &quot;a&quot; for area, &quot;l&quot; for length, &quot;z&quot; for height, or &quot;v&quot; for volume)
* The numeric value is copied to the clipboard, so you can paste it in another application
* A line is printed on the FreeCAD output window. After you exit the survey mode, those lines can be copied and pasted in another application (the values are comma-separated, making it easy to convert to spreadsheet data)


[[Image:Arch Survey example.jpg|640px]]


&lt;!--T:7--&gt;
The above image shows what happens when running the survey mode.

==How to use== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
# Press the {{KEY|[[Image:Arch Survey.png|16px]] [[Arch Survey]]}} button
# Click on vertices, edges, faces or double-click to select whole objects
# Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to exit survey mode and remove all the labels.

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Survey mode cannot be used directly from python scripts, but gathering the same information from any selected [[Part Module|Part]]-based object is easy reproduced with the following script:

&lt;syntaxhighlight&gt;
 import FreeCADGui
 selection = FreeCADGui.Selection.getSelectionEx()
 for obj in selection:
    for element in obj.SubObjects:
        print &quot;Area: &quot;, element.Area
        print &quot;Length: &quot;, element.Length
        print &quot;Volume: &quot;, element.Volume
        print &quot;Center of Mass: &quot;, element.CenterOfMass
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Arch Wall</title>
    <ns>0</ns>
    <id>1714</id>
    <revision>
      <id>97106</id>
      <parentid>71054</parentid>
      <timestamp>2014-07-23T20:43:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>c0oycnp65w5w6fma70irxon1mkoqlh6</sha1>
      <text xml:space="preserve" bytes="7211">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Wall|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Wall|Shortcut=W A|SeeAlso=[[Arch Structure|Arch Structure]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool builds a Wall object from scratch or on top of any other [[Part Module|shape]]-based or [[Mesh Module|mesh]]-based object. A wall can be built without any base object, in which case it behaves as a cubic volume, using length, width and height properties. When built on top of an existing shape, a wall can be based on:

&lt;!--T:4--&gt;
* A '''linear 2D object''', such as lines, wires, arcs or sketches, in which case you can change thickness, alignment(right, left or centered) and height. The length property has no effect.
* A '''flat face''', in which case you can only change the height. Length and width properties have no effect. If the base face is vertical, however, the wall will use the width property instead of height, allowing you to build walls from space-like objects or mass studies.
* A '''solid''', in which case length, width and height properties have no effect. The wall simply uses the underlying solid as its shape.
* A '''mesh''', in which case the underlying mesh must be a closed, non-manifold solid.

&lt;!--T:5--&gt;
[[Image:Arch Wall example.jpg|780px]]
''Example of walls built from a line, a wire, a face, a solid and a sketch''

&lt;!--T:6--&gt;
Walls can also have additions or subtractions. Additions are other objects whose shapes are joined in this Wall's shape, while subtractions are subtracted. Additions and subtractions can be added with the [[Arch Add]] and [[Arch Remove]] tools. Additions and subtractions have no influence over wall parameters such as height and width, which can still be changed. Walls can also have their height automatic, if they are included into a higher-level object such as [[Arch Floor|floors]]. The height must be kept at 0, then the wall will adopt the height specified in the parent object.

&lt;!--T:7--&gt;
When several walls should intersect, you need to place them into a [[Arch Floor|floor]] to have their geometry intersected.

==How to use== &lt;!--T:8--&gt;

===Drawing a wall from scratch=== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
# Press the {{KEY|[[Image:Arch Wall.png|16px]] [[Arch Wall]]}} button, or press {{KEY|W}} then {{KEY|A}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

===Drawing a wall on top of a selected object=== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
# Select one or more base geometry objects (Draft object, sketch, etc)
# Press the {{KEY|[[Image:Arch Wall.png|16px]] [[Arch Wall]]}} button, or press the {{KEY|W}} then {{KEY|A}} keys
# Adjust needed properties such as height or width.

==Options== &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
* The height, width and alignment of a wall can be set during drawing, via the task panel
* When snapping a wall to an existing wall, both walls will be joined into one. The way the two walls are joined depends on their properties: If they have the same width, height and alignment, and if the option &quot;join base sketches&quot; is enabled in the Arch preferences, the resulting wall will be one object based on a sketch made of several segments. Otherwise, the latter wall will be added to the first one as addition.
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after the first point to constrain the second point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the '''Relative''' button. If relative mode is on, the coordinates of the second point are relative to the first one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your second point horizontally or vertically in relation to the first one.
* Press {{KEY|ESC}} or the '''Cancel''' button to abort the current command.
* Double-clicking on the wall in the tree view after it is created allows you to enter edit mode and access and modify its additions and subtractions
* Multi-layer walls can be easily created by building several walls from the same baseline. By setting their Align property to either left or right, and specifying an Offset value, you can effectively construct several wall layers. Placing a window in such a wall layer will propagate the opening to the other wall layers based on the same baseline.

==Snapping== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
Snapping works a bit differently with Arch walls than other Arch and Draft objects. If a wall has a baseline object, snapping will anchor to the base object, instead of the wall geometry, allowing to easily align walls by their baseline. If, however, you specifically want to snap to the wall geometry, pressing {{KEY|CTRL}} will switch snapping to the wall object.

&lt;!--T:23--&gt;
[[Image:Arch wall snap.jpg|780px]]

==Properties== &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
Wall objects inherit the properties of [[Part Module|Part]] objects, and also have the following extra properties:
* {{PropertyData|Align}}: The alignment of the wall on its baseline: Left, right or center
* {{PropertyData|Base}}: The base object this wall is built on
* {{PropertyData|Face}}: The index of the face from the base object to use. If the vaue is not set or 0, the whole object is used
* {{PropertyData|Force Wire}}: If True, and the wall is based on a face, only the border wire of the face is used, resulting in a wall bordering the face
* {{PropertyData|Length}}: The length of the wall (not used when the wall is based on an object)
* {{PropertyData|Width}}: The width of the wall (not used when the wall is based on a face)
* {{PropertyData|Height}}: The height of the wall (not used when the wall is based on a solid). If no height is given, and the wall is inside a [[Arch Floor|floor]] object with its height defined, the wall will automatically take the value of the floor height.
* {{PropertyData|Normal}}: An extrusion direction for the wall. If set to (0,0,0), the extrusion direction is automatic.
* {{PropertyData|Offset}}: This specifies the distance between the wall and its baseline. Works only if the Align property is set to Right or Left.

==Scripting== &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
The Wall tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeWall ( [obj],[length],[width],[height],[align],[face],[name] )
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
* Creates a wall based on the given object, which can be a sketch, a draft object, a face or a solid. align can be &quot;Center&quot;,&quot;Left&quot; or &quot;Right&quot;. If you provide no base object, then you can use numeric values for length, width and height. Face can be used to give the index of a face from the underlying object, to build this wall on, instead of using the whole object.
* Returns the created wall, or None if the operation failed.

&lt;!--T:22--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD, Draft, Arch
 baseline = Draft.makeLine(FreeCAD.Vector(0,0,0),FreeCAD.Vector(2,0,0))
 Arch.makeWall(baseline,None,0.1,2)
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch Window</title>
    <ns>0</ns>
    <id>1723</id>
    <revision>
      <id>97278</id>
      <parentid>79448</parentid>
      <timestamp>2014-07-23T21:42:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>c4971dk6jm4053kyecvxnn7ponmlhhk</sha1>
      <text xml:space="preserve" bytes="5592">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Arch Window|Workbenches=[[Arch Module|Arch]]|MenuLocation=Arch -&gt; Window|Shortcut=W I|SeeAlso=[[Arch Wall|Arch Wall]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Window is a base object for all kinds of &quot;embeddable&quot; objects, such as windows, doors, etc... It is designed to be either independent, or &quot;hosted&quot; inside another component such as a wall. It has its own geometry, that can be made of several components (the window frame, for example), and also defines a volume to be subtracted to host objects, in order to create an opening.

&lt;!--T:4--&gt;
Windows are based on closed 2D objects, such as [[Draft Rectangle|Draft Rectangles]] or [[Sketcher Module|Sketches]], that are used to define their inner components. The base 2D object can therefore contain several closed wires, that can be combined to form filled panels (one wire) or frames (several wires). If the base 2D object was drawn on a support object, and that support object is a wall, then the window gets automatically included in that wall.

&lt;!--T:26--&gt;
The window tool also features several '''presets''' ({{Version|014}}), that allow to create full doors or windows from a list of parameters, without the need to create the base 2D objects and components manually.

&lt;!--T:22--&gt;
[[Image:Arch Window example.jpg|600px]]

&lt;!--T:5--&gt;
In the above image, a window is constructed on top of a [[Draft Rectangle]], then inserted into a [[Arch Wall|Wall]]. [[Arch Add|Adding]] a window to a wall automatically cuts a correct opening in the host wall.

&lt;!--T:23--&gt;
[[Image:Arch Window example2.jpg|600px]]

&lt;!--T:6--&gt;
The above image shows a more complex window being constructed on top of a sketch. When entering the window's edit mode, you can create different components, set their thickness, and select and assign wires from the sketch to them.

==How to use== &lt;!--T:7--&gt;

===Using a preset=== &lt;!--T:8--&gt;

&lt;!--T:27--&gt;
# Deselect everything. If a face is selected you will enter the &quot;creating from scratch&quot; mode automatically
# Press the {{KEY|[[Image:Arch Window.png|16px]] [[Arch Window]]}} button, or press {{KEY|W}} then {{KEY|I}} keys
# Select one of the presets in the list
# Fill out the desired parameters

===Creating from scratch=== &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
# If you are going to draw your window directly on a wall, select one face of a wall
# Press the {{KEY|[[Image:Arch Window.png|16px]] [[Arch Window]]}} button, or press {{KEY|W}} then {{KEY|I}} keys
# A new sketch will be created (on the selected wall face if applicable). Draw one or more closed wires
# Press the {{KEY|CLose}} button in the task panel to create the window
# Enter Edit mode by double-clicking the window in the tree view, to adjust the window components

==Presets== &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
The following presets are available ({{Version|014}}):

&lt;!--T:32--&gt;
&lt;gallery heights=160 widths=200&gt;
Image:ParametersDoorGlass.svg|Glass door
Image:ParametersDoorSimple.svg|Simple door
Image:ParametersWindowDouble.svg|Double-opening window
Image:ParametersWindowFixed.svg|Fixed window
Image:ParametersWindowSimple.svg|Single-opening window
Image:ParametersWindowStash.svg|Sash-opening window
&lt;/gallery&gt;

==Building components== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Windows can include 2 types of components: panels and frames. Panels are made from one closed wire, which gets extruded, while frames are made from 2 or more closed wire, where each one is extrudes, then the smaller ones are subtracted from the biggest one. You can access, create, modify and delete components of a window in edit mode (double-click the window in the Tree view). The components have the following properties:

&lt;!--T:11--&gt;
* '''Name''': A name for the component
* '''Type''': The type of component. Can be &quot;Frame&quot;, &quot;Glass panel&quot; or &quot;Solid panel&quot;
* '''Wires''': A comma-separated list of wires the component is based on
* '''Thickness''': The extrusion thickness of the component
* '''Offset''': The distance between the component and its base 2D wire(s)

&lt;!--T:24--&gt;
[[Image:Arch Window options.jpg|600px]]

==Options== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* You can also create a closed 2D profile (for example with the [[Draft Workbench]] or [[Sketcher Workbench]]), then, with that 2D object selected, press the {{KEY|[[Image:Arch Window.png|16px]] [[Arch Window]]}} button.
* Add a selected window to a [[Arch Wall|wall]] by selecting both, then pressing the {{KEY|[[Image:Arch Add.png|16px]] [[Arch Add]]}} button.
* Remove a selected window from a [[Arch Wall|wall]] by selecting the window, then pressing the {{KEY|[[Image:Arch Remove.png|16px]] [[Arch Remove]]}} button.
* When using presets, it is often convenient to turn the &quot;Near&quot; [[Draft Snap]] on, so you can snap your window to an existing face.

==Doors== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
Doors can be made easily with the window tool, you only need to draw the base of the inner wire touching the exterior wire like in the image below.

&lt;!--T:25--&gt;
[[Image:Arch door.jpg|600px|Door]]

==Properties== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
* {{PropertyData|Window Parts}}: A list of strings (5 strings per component, setting the component options above)

==Scripting== &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
The Window tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeWindow (obj,[name])
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
:creates a window based on the given object

&lt;!--T:21--&gt;
Example:

&lt;syntaxhighlight&gt;
import Draft, Arch
rect = Draft.makeRectangle(length=2,height=4)
Arch.makeWindow(rect)
&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Arch Workbench</title>
    <ns>0</ns>
    <id>1299</id>
    <redirect title="Arch Module" />
    <revision>
      <id>5410</id>
      <timestamp>2011-04-27T17:42:13Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Arch Module]]</comment>
      <sha1>6hmlt62i1u4ldt5zi4oe71c9ybe4y6i</sha1>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Arch Module]]</text>
    </revision>
  </page>
  <page>
    <title>Arch templates</title>
    <ns>0</ns>
    <id>19805</id>
    <revision>
      <id>63682</id>
      <parentid>63080</parentid>
      <timestamp>2014-01-25T18:08:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>aozhbcuxt20o4ij06wnt3stlpzm5pox</sha1>
      <text xml:space="preserve" bytes="2279">
&lt;!--T:1--&gt;
This page lists the templates according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute Arch] standard

===Arch A=== &lt;!--T:2--&gt;
====Arch_A_Landscape====

&lt;!--T:3--&gt;
[[Image:Arch_A_Landscape.svg|800px]]

====Arch_A_Portrait==== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Image:Arch_A_Portrait.svg|800px]]

===Arch B=== &lt;!--T:6--&gt;
====Arch_B_Landscape====

&lt;!--T:7--&gt;
[[Image:Arch_B_Landscape.svg|800px]]

====Arch_B_Portrait==== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
[[Image:Arch_B_Portrait.svg|800px]]

===Arch C=== &lt;!--T:10--&gt;
====Arch_C_Landscape====

&lt;!--T:11--&gt;
[[Image:Arch_C_Landscape.svg|800px]]

====Arch_C_Portrait==== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
[[Image:Arch_C_Portrait.svg|800px]]

===Arch D=== &lt;!--T:14--&gt;
====Arch_D_Landscape====

&lt;!--T:15--&gt;
[[Image:Arch_D_Landscape.svg|800px]]

====Arch_D_Portrait==== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
[[Image:Arch_D_Portrait.svg|800px]]

===Arch E=== &lt;!--T:18--&gt;
====Arch_E_Landscape====

&lt;!--T:19--&gt;
[[Image:Arch_E_Landscape.svg|800px]]

====Arch_E_Portrait==== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
[[Image:Arch_E_Portrait.svg|800px]]

===Arch E1=== &lt;!--T:22--&gt;
====Arch_E1_Landscape====

&lt;!--T:23--&gt;
[[Image:Arch_E1_Landscape.svg|800px]]

====Arch_E1_Portrait==== &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
[[Image:Arch_E1_Portrait.svg|800px]]

===Arch E2=== &lt;!--T:26--&gt;
====Arch_E2_Landscape====

&lt;!--T:27--&gt;
[[Image:Arch_E2_Landscape.svg|800px]]

====Arch_E2_Portrait==== &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
[[Image:Arch_E2_Portrait.svg|800px]]

===Arch E3=== &lt;!--T:30--&gt;
====Arch_E3_Landscape====

&lt;!--T:31--&gt;
[[Image:Arch_E3_Landscape.svg|800px]]

====Arch_E3_Portrait==== &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
[[Image:Arch_E3_Portrait.svg|800px]]



==Other standards available== &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
* [[Drawing_templates|Drawing templates]]: default FreeCAD templates 
* [[ANSI_templates|ANSI templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute ANSI] standard 
* [[Misc_templates|Misc templates]]: mixed templates

==Credits== &lt;!--T:37--&gt;

&lt;!--T:38--&gt;
The templates are drawn by [[quick61]] and listed [https://github.com/quick61/FreeCAD-Drawing-Templates FreeCAD-Drawing-Templates].

&lt;!--T:36--&gt;
[[Category:Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Arch tutorial</title>
    <ns>0</ns>
    <id>25005</id>
    <revision>
      <id>90253</id>
      <parentid>88971</parentid>
      <timestamp>2014-06-04T19:47:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>f0f5fhq5g4djflia1gf3aeyevo3x29j</sha1>
      <text xml:space="preserve" bytes="62536">[[Image:Arch tutorial 00.jpg]]


== Introduction == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
This tutorial aims at giving you the basics to work with the [[Arch Workbench]]. I will try to make it simple enough so you don't need any previous experience with FreeCAD, but having some experience with 3D or [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] applications will be useful. In any case, you should be prepared to look for yourself for further information about how FreeCAD works on the [[Main Page|FreeCAD documentation wiki]]. The [[Getting started]] page is a must read, if you have no previous experience with FreeCAD. Also check our [[tutorials]] section, and on [http://www.youtube.com/results?search_query=freecad youtube] you will also find a lot more of FreeCAD tutorials.

&lt;!--T:3--&gt;
The purpose of the [[Arch Workbench]] is to offer a complete [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] workflow inside FreeCAD. As it is still under development, don't expect to find here the same tools and level of completion as grown-up commercial alternatives such as [http://en.wikipedia.org/wiki/Revit Revit] or [http://en.wikipedia.org/wiki/Archicad ArchiCAD], but on the other hand, FreeCAD being used in a much bigger scope than these applications, the [[Arch Workbench]] greatly benefits from the other disciplines FreeCAD caters to, and offers some features rarely seen in traditional BIM applications.

&lt;!--T:4--&gt;
Here are, for example, a couple of interesting features of FreeCAD's [[Arch Workbench]] that you'll hardly find in other BIM apps:

&lt;!--T:5--&gt;
* Architectural objects are always solids. From FreeCAD's strong mechanical background, we learned the importance of always working with solid objects. This ensures a much more error-free workflow, and very reliable boolean operations. Since cutting through 3D objects with a 2D plane, in order to extract sections, is also a boolean operation, you can immediately see the importance of this point.

&lt;!--T:6--&gt;
* Architectural objects can always have any shape. No restrictions. Walls don't need to be vertical, slabs don't need to look like slab. Any solid object can always become any architectural object. Very complex things, usually hard to define in other BIM applications, like a floor slab curving up and becoming a wall (yes Zaha Hadid, it's you we're talking about), present no particular problem at all in FreeCAD.

&lt;!--T:7--&gt;
* The whole power of FreeCAD is at your fingertips. You can design architectural objects with any other tool of FreeCAD, such as the [[PartDesign Workbench]], and when they are ready, convert them to architectural objects. They will still retain their full modeling history, and continue totally editable. The [[Arch Workbench]] also inherits much of the [[Draft Workbench]] functionality, such as [[Draft Snap|snapping]] and [[Draft SelectPlane|working planes]].

&lt;!--T:8--&gt;
* The [[Arch Workbench]] is very [[Mesh Module|mesh]]-friendly. You can easily design an architectural model in a mesh-based application such as [http://en.wikipedia.org/wiki/Blender_%28software%29 Blender] or [http://en.wikipedia.org/wiki/Sketchup SketchUp] and import it in FreeCAD. If you took care of the quality of your model and its objects are non-manifold solid shapes, turning them into architectural objects only requires the press of a button.

&lt;!--T:9--&gt;
At the time I'm writing this, though, the [[Arch Workbench]], as the rest of FreeCAD, suffers some limitations. Most are being worked on, though, and will disappear in the future.

&lt;!--T:10--&gt;
* FreeCAD is no 2D application. It is made for 3D. There is a reasonable set of tools for drawing and editing 2D objects with the [[Draft Workbench]] and [[Sketcher Workbench]], but it is not made for handling very large (and sometimes badly drawn) 2D CAD files. You can usually successfully import 2D files, but don't expect very high performance if you want to keep working on them in 2D. You have been warned.

&lt;!--T:11--&gt;
* No materials support. FreeCAD will have a complete [[Material]] system, able to define very complex materials, with all the goodies you can expect (custom properties, material families, rendering and visual aspect properties, etc), and the [[Arch Workbench]] will of course use it when it is ready.

&lt;!--T:12--&gt;
* Very preliminary [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] support. You can already [[Arch IFC|import IFC files]], quite reliably, provided [http://ifcopenshell.org IfcOpenShell] is installed on your system, but exporting is still not officially supported. This is worked on both by the FreeCAD and IfcOpenShell developers, and in the future we can expect full-powered IFC support.

&lt;!--T:13--&gt;
* Most Arch tools are still in development. That means that automatic &quot;wizard&quot; tools that create complex geometry automatically, such as [[Arch Roof]] or [[Arch Stairs]] can only produce certain types of objects, and other tools that have presets, such as [[Arch Structure]] or [[Arch Window]] only have a couple of basic presets. This will of course grow over time.

&lt;!--T:14--&gt;
* [[Assembly project|Relations between objects]] in FreeCAD are still not officially available. These, for example the relation between a window and its host wall, are currently implemented in the [[Arch Workbench]] with temporary (and therefore somewhat limited) methods. Many new possibilities will arise when this feature will be fully available.

&lt;!--T:15--&gt;
* [[Units]] are being implemented in FreeCAD, which will allow you to work with any unit you wish (even imperial units, you guys from the USA can be eternally grateful for this to Jürgen, FreeCAD's godfather and dictator). But at the moment the implementation is not complete, and the Arch workbench still doesn't support them. You must consider it &quot;unit-less&quot;.


&lt;!--T:16--&gt;
{{Note|FreeCAD version 0.14 required|This tutorial was written using [[Release notes 014|FreeCAD version 0.14]]. You will need at least this version number in order to follow it. Earlier versions might not contain all the needed tools,or they could lack options presented here.}}

== Typical workflows == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
The [[Arch Workbench]] is mainly made for two kinds of workflows:

&lt;!--T:19--&gt;
* Build your model with a faster, mesh-based application such as [http://en.wikipedia.org/wiki/Blender_%28software%29 Blender] or [http://en.wikipedia.org/wiki/Sketchup SketchUp], and import them in FreeCAD in order to extract plans and section views. FreeCAD being made for precision modeling, at a much higher level than what we usually need in architectural modeling, building your models directly in FreeCAD can be heavy and slow. For this reason, such a workflow has big advantages. I described it in [http://yorik.uncreated.net/guestblog.php?2012=180 this article] on my blog. If you care to model correctly and precisely (clean, solid, non-manifold meshes), this workflow gives you the same performance and precision level as the other.

&lt;!--T:20--&gt;
* Build your model directly in FreeCAD. That is what I will showcase in this tutorial. We will use mostly three workbenches: [[Arch Workbench|Arch]], of course, but also [[Draft Workbench|Draft]], whose tools are all included in Arch, so there is no need to switch workbenches, and [[Sketcher Workbench|Sketcher]]. Conveniently, you can do as I usually so, which is to create a custom toolbar in your Arch workbench, with Tools -&gt; Customize, and add the tools from the sketcher that you use often. This is my &quot;customized&quot; Arch workbench:


[[Image:Arch tutorial 01.jpg]]


&lt;!--T:21--&gt;
In this tutorial, we will model the house in 3D, based on the 2D drawings we'll download from the net, and extract from it 2D documents, such as plans, elevations and sections.

== Preparation == &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
Instead of creating a project from scratch, Let's take an example project to model, it will save us time. I chose this wonderful house by the famous architect [http://en.wikipedia.org/wiki/Jo%C3%A3o_Batista_Vilanova_Artigas Vilanova Artigas] (see a series of [http://www.pedrokok.com.br/2010/02/residencia-artigas-sao-paulo-sp/img_8258-533px/ pictures] by Pedro Kok), because it is close to where I live, it is simple, it's a wonderful example of the amazing modernist architecture of São Paulo (it is even for [http://specialproperties.com.br/properties/view/id/8643/title/%C3%8Dcone+da+Arquitetura+Paulista sale] if you have &quot;a few&quot; Reals to spend), and dwg drawings are [http://www.bibliocad.com/library/second-house-vilanova-artigas_72926# easily available].

&lt;!--T:24--&gt;
We will use the 2D DWG drawings obtained from the link above (you need to register to download, but it's free) as a base to build our model. So the first thing you'll want to do is to download the file, unzip it, and open the DWG file inside with a dwg application such as [http://www.3ds.com/products-services/draftsight/overview/ DraftSight]. Alternatively, you can convert it to DXF with a free autility such as the [http://www.opendesign.com/guestfiles/TeighaFileConverter Teigha File Converter]. If you have the Teigha converter installed (and its path set in the Arch preferences settings), FreeCAD is also [[Draft DXF|able to import DWG files directly]]. But since these files can sometimes being of bad quality and very heavy, it's usually better open it first with a 2D CAD application and do some cleaning.

&lt;!--T:25--&gt;
Here, I removed all the detail drawings, all the titleblocks and page layouts, did a &quot;clean&quot; (&quot;purge&quot; in AutoCAD slang) to remove all unused entities, reorganized the sections at a logical location in relation to the plan view, and moved everything to the (0,0) point. After that, our file can be opened quite efficiently in FreeCAD. Check the different options available in Edit -&gt; Preferences -&gt; Draft -&gt; Import/Export, they can affect how (and how quickly) DXF/DWG files are imported.

&lt;!--T:26--&gt;
This is how the file looks after being opened in FreeCAD. I also changed the thickness of the walls (the contents of the &quot;muros&quot; group), and flipped a couple of doors that were imported with wrong X scale, with the [[Draft Scale]] tool:


[[Image:Arch tutorial 02.jpg]]


&lt;!--T:27--&gt;
The [[Draft DXF|DXF importer]] (which also takes care of DWG files, since when importing DWG files, they are simpl converted to DXF first), groups the imported objects by layer. There is no layer in FreeCAD, but there are groups. Groups offer a similar way to organize the objects of your files, but don't have specific properties, like AutoCAD layers, that apply to their contents. But they can be placed inside other groups, which is very handy. The first thing we might want to do here, is to create a new group in the [[Document structure|tree view]], right-click on the document icon, add a group, right click on it to rename it as &quot;base 2D plans&quot;, and drag and drop all the other objects into it.

== Building the walls == &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
Like most [[Arch Workbench|Arch]] objects, [[Arch Wall|walls]] can be built upon a big variety of other objects: [[Draft Line|lines]], [[Draft Wire|wires]] (polylines), [[Sketcher Workbench|sketches]], faces or solid (or even on nothing at all, in which case they are defined by height, width and length). The resulting geometry of the wall depends on that base geometry, and the properties you fill in, such as width and height. As you might guess, a wall based on a line will use that line as its alignment line, while a wall based on a face will use that face as its base footprint, and a wall based on a solid will simply adopt the shape of that solid. This allows about any shape imaginable to become a wall.

&lt;!--T:30--&gt;
There are different possible strategies to build walls in FreeCAD. One might want to build a complete &quot;floor plan&quot; with the [[Sketcher Workbench|sketcher]], and build one, big, wall object from it. This technique works, but you can only give one thickness for all the walls of the project. Or, you can build each piece of wall from separate line segments. Or, this is what we will do here, a mix of both: We will build a couple of [[Draft Wire|wires]] on top of the imported plan, one for each type of wall:


[[Image:Arch tutorial 03.jpg]]


&lt;!--T:31--&gt;
As you see, I've drawn in red the lines that will become concrete walls (a [http://www.google.com/search?tbm=isch&amp;q=casa+artigas+brooklin pictures search] of the house can help you to see the different wall types), the green ones are the exterior brick walls, and the blue ones will become the inner walls. I passed the lines through the doors, because doors will be inserted in the walls later, and will create their openings automatically. Walls can also be aligned left, right or centrally on their baseline, so it doesn't matter which side you draw the baseline. I also took care on avoiding intersections as much as I could, because our model will be cleaner that way. But we'll take care of intersections later.

&lt;!--T:32--&gt;
When this is done, place all those lines in a new group if you want, select each line one by one, and press the [[Arch Wall]] tool to build a wall from each of them. You can also select several lines at once. After doing that, and correcting widths (exterior walls are 25cm wide, inner walls are 15cm wide) and some alignments, we have our walls ready:


[[Image:Arch tutorial 04.jpg]]


&lt;!--T:33--&gt;
We could also have built our walls from scratch. If you press the [[Arch Wall]] button with no object selected, you will be able to click two points on the screen to draw a wall. But under the hood, the wall tool will actually draw a line and build a wall on it. In this case, I found it more didactic to show you how things work.

&lt;!--T:34--&gt;
Did you notice that I took great care not to cross the walls? this will save us some headache later, for example if we export our work to other applications, that might not like it. I have only one intersection, where I was too lazy to draw two small line segments, and drew one big wire crossing another. This must be fixed. Fortunately, all Arch objects have a great feature: you can add one to another. Doing that will unite their geometries, but they are still editable independently after. To add one of our crossing walls to the other, just select one, CTRL + select the other, and press the [[Arch Add]] tool:


[[Image:Arch tutorial 05.jpg]]


&lt;!--T:35--&gt;
On the left is are the two intersecting walls, on the right the result after adding one to the other.

&lt;!--T:36--&gt;
{{Note|An important note about parametric objects|Something is important to consider already. As you can see, in FreeCAD, everything is parametric: Our new &quot;united&quot; wall is made from two walls, each based on a baseline. When you expand them in the [[Document structure|tree view]], you can see all that chain of dependencies. As you can imagine, this little game can quickly become very complex. Furthermore, if you already know how to work with the [[Sketcher Workbench|sketcher]], you might have wanted to draw the baselines with constrained sketches. This whole complexity has a cost: it raises exponentially the number of calculations that FreeCAD has to perform to keep your model geometry up to date. So, think about it, don't add unnecessary complexity when you don't need it. Keep a good balance between simple and complex objects, and keep these for the cases where you really need them.}}

&lt;!--T:37--&gt;
For example, I could have drawn all my baselines above without caring about what crosses what, and fix things with the [[Arch Add]] tool later. But I would have raised much the complexity of my model, for no gain at all. Better make them correct right from the start, and keeping them as very simple pieces of geometry.

&lt;!--T:38--&gt;
Now that our walls are okay, we need to raise their height, until they intersect the roof. Then, since the wall object still cannot be cut automatically by roofs (this will happen some day, though), we will build a &quot;dummy&quot; object, that follows the shape of the roof, to be subtracted from our walls.

&lt;!--T:39--&gt;
First, by looking at our 2D drawings, we can see that the highest point of the roof is 5.6m above the ground. So let's give all our walls a height of 6m, so we make sure they will be cut by our dummy roof volume. Why 6m and not 5.6m? You may ask. Well, if you already worked with boolean operations (additions, subtractions, intersections), you must already know that these operations usually don't like much &quot;face-on-face&quot; situations. They prefer clearly, frankly intersecting objects. So by doing this, we keep on the safe side.

&lt;!--T:40--&gt;
To raise the height of our walls, simply select all of them (don't forget the one we added to the other) in the tree view, and change the value of their &quot;height&quot; property.

&lt;!--T:41--&gt;
Before making our roof and cutting the walls, let's make the remaining objects that will need to be cut: The walls of the above studio, and the columns. The walls of the studio are made the same way as we did, on the superior floor plan, but they will be raised up to level 2.6m. So we will give them the needed height so their top is at 6m too, that is, 3.4m. Once this is done, let's move our walls up by 2.6m: Select them both, put yourself in frontal view (View -&gt; Standard Views -&gt; Front), press the [[Draft Move]] button, select a first point, then enter 0, 2.6, 0 as coordinates, and press enter. Your objects now have jumped 2.6m high:


[[Image:Arch tutorial 06.jpg]]


&lt;!--T:42--&gt;
{{Note|About coordinates|The [[Draft Module|Draft]] objects, and most [[Arch Module|Arch]] objects too, obey to a Draft system called [[Draft SelectPlane|working planes]]. This system defines a 2D plane where next operations will take place. If you don't specify any, that working plane adapts itself to the current view. This is why we switched to frontal view, and you see that we indicated a movement in X of 0 and in Y of 2.6. We could also have forced the working plane to stay on the ground, by using the [[Draft SelectPlane]] tool. Then, we would have entered a movement of X of 0, Y of 0 and Z of 2.6. }}

&lt;!--T:43--&gt;
Now let's move our walls horizontally, to their correct location. Since we have points to snap to, this is easier: Select both walls, press the [[Draft Move]] tool, and move them from one point to the other:


[[Image:Arch tutorial 07.jpg]]


&lt;!--T:44--&gt;
Finally, I changed the color of some walls to a brick-like color (so it's easier to differentiate), and made a small correction: Some walls don't go up to the roof, but stop at a height of 2.60m. I corrected the height of those walls.

== Raising the structure == &lt;!--T:45--&gt;

&lt;!--T:46--&gt;
Now, since we'll have to cut our walls with a subtraction volume, we might as well see if there aren't other objects that will need to be cut that way. There are, some of the columns. This is a good opportunity to introduce a second arch object: the [[Arch Structure]]. Structure objects behave more or less like walls, but they aren't made to follow a baseline. Rather, their prefer to work from a profile, that gets extruded (along a profile line or not). Any flat object can be a profile for a structure, with only one requirement: they must form a closed shape.

&lt;!--T:47--&gt;
For our columns, we will use another strategy than with the walls. Instead of &quot;drawing&quot; on top of the 2D plans, we will directly use objects from it: the circles that represent the columns in the plan view. In theory, we could just select one of them, and press the [[Arch Structure]] button. However, if we do that, we produce an &quot;empty&quot; structural object. This is because you can never be too sure at how well objects were drawn in the DWG file, and often they are not closed shapes. So, before turning them into actual columns, let's turn them into faces, by using the [[Draft Upgrade]] tool twice on them. The first time to convert them into closed wires (polylines), the second time to convert those wires into faces. That second step is not mandatory, but, if you have a face, you are 100% sure that it is closed (otherwise a face cannot be made).

&lt;!--T:48--&gt;
After we have converted all our columns to faces, we can use the [[Arch Structure]] tool on them, and adjust the height (some have 6m, other only 2.25m height):


[[Image:Arch tutorial 08.jpg]]


&lt;!--T:49--&gt;
On the image above, you can see two columns that are still as they were in the DWG file, two that were upgraded to faces, and two that were turned into structural objects, and their height set to 6m and 2.25m.

&lt;!--T:50--&gt;
Note that those different Arch objects (walls, structures, and all the others we'll discover) all share a lot of things between them (for example all can be added one to another, like we already saw with walls, and any of them can be converted to another). So it's more a matter of taste, we could have made our columns with the wall tool too, and converted them if needed. In fact, some of our walls are concrete walls, we might want to convert them to structures later.

== Subtractions == &lt;!--T:51--&gt;

&lt;!--T:52--&gt;
Now it is time to build our subtraction volume. The easiest way will be to draw its profile on top of the section view. Then, we will rotate it and place it at its correct position. See why I placed the sections and elevations like that before beginning? It will be very handy for drawing stuff there, then moving it to its correct position on the model.

&lt;!--T:53--&gt;
Let's draw a volume, bigger than the roof, that will be subtracted from our walls. To do that, I drew two lines on top of the base of the roof, then extended them a bit further with the [[Draft Trimex]] tool. Then, I drew a [[Draft Wire|wire]], snapping on these lines, and going well above our 6 meters. I also drew a blue line on the ground level (0.00), that will be or rotation axis.


[[Image:Arch tutorial 09.jpg|1024px]]


&lt;!--T:54--&gt;
Now is the tricky part: We will use the [[Draft Rotate]] tool to rotate our profile 90 degrees up, in the right position to be extruded. To do that, we must first change the [[Draft SelectPlane|working plane]] to the YZ plane. Once this is done, the rotation will happen in that plane. But if we do like we did a bit earlier, and set our view to side view, it will be hard to see and select our profile, and to know where is the basepoint around which it must rotate, right? Then we must set the working plane manually: Press the [[Draft SelectPlane]] button (it is in the &quot;tasks&quot; tab of the tree view), and set it to YZ (which is the &quot;side&quot; plane). Once you set the working plane manually, like that, it won't change depending on your view. You can now rotate your view until you have a good view of all the things you must select. To switch the working plane back to &quot;automatic&quot; mode later, press the [[Draft SelectPlane]] button again and set it to &quot;None&quot;.

&lt;!--T:55--&gt;
Now the rotation will be easy to do: Select the profile, press the [[Draft Rotate]] button, click on a point of the blue line, enter 0 as start angle, and 90 as rotation:


[[Image:Arch tutorial 10.jpg|1024px]]


&lt;!--T:56--&gt;
Now all we need to do it to move the profile a bit closer to the model (set the working plane to XY if needed), and extrude it. This can be done either with the [[Part Extrude]] tool, or [[Draft Trimex]], which also has the special hidden power to extrude faces. Make sure your extrusion is larger than all the walls it will be subtracted from, to avoid face-on-face situations:


[[Image:Arch tutorial 11.jpg|1024px]]


&lt;!--T:57--&gt;
Now, here comes into action the contrary of the [[Arch Add]] tool: [[Arch Remove]]. As you might have guessed, it also makes an object a child of another, but its shape is subtracted from the host object, instead of being united. So now things are simple: Select the volume to subtract (I renamed it as &quot;Roof volume to subtract&quot; in the tree view so it is easy to spot), CTRL + select a wall, and press the [[Arch Remove]] button. You'll see that, after the subtraction happened, the volume to subtract disappeared from both the 3D view and the tree view. That is because it has been marked as child of the wall, and &quot;swallowed&quot; by that wall. Select the wall, expand it in the tree view, there is our volume.

&lt;!--T:58--&gt;
Now, select the volume in the tree vieew, CTRL + select the next wall, press [[Arch Remove]]. Repeat for the next walls until you have everything properly cut:


[[Image:Arch tutorial 12.jpg|1024px]]


&lt;!--T:59--&gt;
Remember that for both [[Arch Add]] and [[Arch Remove]], the order you select the objects is important. The host is always the last one, like in &quot;Remove X from Y&quot; or &quot;Add X to Y&quot;

&lt;!--T:60--&gt;
{{Note|A note about additions and subtractions|Arch objects that support such additions and subtractions (all of them except the &quot;visual&quot; helper objects such as the axes) keep track of such objects by having two properties, respectively &quot;Additions&quot; and &quot;Subtractions&quot;, that contains a list of links to other objects to be subtracted or added. A same object can be in thr lists of several other objects, as it is the case of our subtraction volume here. Each of the fathers will want to swallow it in the tree view, though, so it will usually &quot;live&quot; in the last one. But you can always edit those lists for any object, by double-clicking it in the tree view, which in FreeCAD enters edit mode. Pressing the escape key exits edit mode.}}

== Making the roofs == &lt;!--T:61--&gt;

&lt;!--T:62--&gt;
Now, all we have to do to complete the structure, is to make the roof and the smaller inner slabs. Again, the easiest way is to draw their profiles on top of the section, with the [[Draft Wire]] tool. Here I drew 3 profiles on top of each other (I moved them apart in the image below so you see better). The green one will be used for the lateral borders of the roof slab, then the blue one for the side parts, and the red ones for the central part, that sits above the bathroom block:


[[Image:Arch tutorial 13.jpg|1024px]]


&lt;!--T:63--&gt;
Then, we must repeat the rotation operation above, to rotate the objects in a vertical position, then move them at their correct places, and copy some of them that will need to be extruded twice, with the [[Draft Move]] tool, with the ALT key pressed, which creates copies instead of moving the actual object. I also added two more profiles for the side walls of the bathroom opening.


[[Image:Arch tutorial 14.jpg|1024px]]


&lt;!--T:64--&gt;
When everything is in place, it's just a matter of using the [[Draft Trimex]] tool to extrude, then convert them to [[Arch Structure]] objects. 


[[Image:Arch tutorial 15.jpg|1024px]]


&lt;!--T:65--&gt;
After that, we can see some problems arising: two of the columns on the right are too short (they should go up to the roof), and there is a gap between the slab and the walls of the studio on the far right (the 2.60 level symbol on the section view was obviously wrong). Thanks to the parametric objects, all this is very easy to solve: For the columns, just change their height to 6m, fish your roof subtraction volume from the tree view, and subtract it to the columns. For the walls, it's even easier: move them a bit down. Since the subtraction volume continues at the same place, the wall geometry will adapt automatically.

&lt;!--T:66--&gt;
Now one last thing must be fixed, there is a small slab in the bathroom, that intersects some walls. Let's fix that by creating a new subtraction volume, and subtract it from those walls. Another feature of the [[Draft Trimex]] tool, that we use to extrude stuff, is that it can also extrude one single face of an existing object. This creates a new, separate object, so there is no risk to &quot;harm&quot; the other object. So we can select the base face of the small slab (look at it from beneath the model, you'll see it), then press the [[Draft Trimex]] button, and extrude it up to well above the roofs. Then, subtract it from the two inner bathroom walls with the [[Arch Remove]] tool:


[[Image:Arch tutorial 16.jpg|1024px]]


== Floors, stairs and chimney == &lt;!--T:67--&gt;

&lt;!--T:68--&gt;
Now, our structure is complete, we just have a couple of smaller objects to do. 

===The chimney=== &lt;!--T:69--&gt;

&lt;!--T:70--&gt;
Let's start with the chimney. Now you already know how it works, right? Draw a couple of closed [[Draft Wire|wires]], move them up at their correct height with the [[Draft Move]] tool, extrude them with the [[Draft Trimex]] tool, turn the bigger one into a [[Arch Structure|structure]], and subtract the smaller ones. Notice how the chimney tube wasn't drawn on the plan view, but I found its position by dragging blue lines from the section views.


[[Image:Arch tutorial 17.jpg|1024px]]


===The floors=== &lt;!--T:71--&gt;

&lt;!--T:72--&gt;
The floors are not well represented in the base drawings. When looking at the sections, you cannot know where and how thick the floor slabs are. So I will suppose that the walls are sitting on top of foundation blocks, at level 0.00, and that there are floor slabs, also sitting on those blocks, 15cm thick. So the floor slabs don't run under the walls, but around them. We could do that by creating a big rectangular slab then subtracting the walls, but remember, subtraction operations cost us. Better do it in smaller pieces, it will be &quot;cheaper&quot; in terms of calculation, and also if we do it intelligently, room by room, these will also be useful to calculate floor areas later:


[[Image:Arch tutorial 18.jpg|1024px]]


&lt;!--T:73--&gt;
Once the wires are drawn, just turn them into [[Arch Structure|structures]], and give them a height of 0.15:


[[Image:Arch tutorial 19.jpg|1024px]]


===The stairs=== &lt;!--T:74--&gt;

&lt;!--T:75--&gt;
Now the stairs. Met the next of the Arch tools, the [[Arch Stairs]]. This tool is still in a very early stage of development, at the time I'm writing, so don't expect too much of it. But it is already pretty useful to make simple, straight stairs. One concept is important to know, the stairs tool is thought to build stairs from a flat floor up to a wall. In other words, when viewed from the top, the stairs object occupies exactly the space that it occupies on the plan view, so the last riser is not drawn (but it is of course taken into account when calculating heights).

&lt;!--T:76--&gt;
In this case, I preferred to build the stairs on the section view, because we'll need many measurements that are easier to get from that view. Here, I drew a couple of red guidelines, then two blue lines that will be the base of our two pieces of stairs, and two green closed wires, that will form the missing parts. Now select the first blue line, press the [[Arch Stairs]] tool, set the number of steps to 5, the height to 0.875,the width to 1.30, the structure type to &quot;massive&quot; and the structure thickness to 0.12. Repeat for the other piece.

&lt;!--T:77--&gt;
Then, extrude both green wires by 1.30, and rotate and move them to the right position:


[[Image:Arch tutorial 20.jpg|1024px]]


&lt;!--T:78--&gt;
On the elevation view, draw (then rotate) the border:


[[Image:Arch tutorial 21.jpg|1024px]]


&lt;!--T:79--&gt;
Then move everything into place:


[[Image:Arch tutorial 22.jpg|1024px]]


&lt;!--T:80--&gt;
Don't forget also to cut the column that crosses the stairs, because in BIM it's always bad to have intersecting objects. We are building like in the real world, remember, where solid objects cannot intersect. Here, I didn't want to subtract the column directly from the stairs (otherwise the column object would be swallowed by the stairs object in the tree view, and I didn't like that), so I took the face on which the column was built, and extruded it again. This new extrusion was then subtracted from the stairs.

&lt;!--T:81--&gt;
Right! All the hard work is now done, let's go on with the very hard work!

== Doors and windows == &lt;!--T:82--&gt;

&lt;!--T:83--&gt;
[[Arch Window|Arch Windows]] are pretty complex objects. They are used to make all kinds of &quot;inserted&quot; objects, such as windows or doors. Yes, in FreeCAD, doors are just a special kind of window. In real life too, if you think of it, no? The [[Arch Window]] tool can still be a bit hard to use today, but consider this as a tradeoff, as it was built for maximum power. Almost any kind of window your imagination can produce can be done with it. But as the tool will gain more presets, this situation will certainly become better in the future.

&lt;!--T:84--&gt;
The [[Arch Window]] object works like this: It is based on a 2D layout, any 2D object, but preferably a [[Sketcher Module|sketch]], that contains closed wires (polylines). These wires define the different parts of the window: outer frames, inner frames, glass panels, solid panels, etc. The window objects then has a property that stores what to do with each of these wires: extrude it, place it at a certain offset, etc. Finally, a window can be inserted into a host object such as a wall or structure, and it will automatically create a hole in it. That hole will be calculated by extruding the biggest wire found in the 2D layout.

&lt;!--T:85--&gt;
There are two ways to create such objects in FreeCAD: By using a preset, or drawing the window layout from scratch. We'll look at both methods here. But remember that the preset method does nothing else than creating the layout object and defining the necessary extrusions for you.

=== Using presets === &lt;!--T:86--&gt;

&lt;!--T:87--&gt;
When pressing the [[Arch Window]] tool with no object selected, you are invited either to pick a 2D layout, or to use one of the presets. Let's use the &quot;Simple Door&quot; preset to place the main entrance door of our model. Give it a width of 1m, a height of 2.45m, a W1 size of 0.15m, and leave the other parameters to 0.05m. Then click the lower left corner of the wall, and your new door is created:


[[Image:Arch tutorial 23.jpg|1024px]]


&lt;!--T:88--&gt;
You will notice that your new door won't appear in the tree view. That is because, by snapping to a wall, we indicated that wall as its host object. Consequently, it has been &quot;swallowed&quot; by the wall. But a right click on it -&gt; Go to selection will find it in the tree.

&lt;!--T:89--&gt;
In this case, as our window is not inserted in any wall (the opening was there already), we might as well detach our window from its host wall. This is done by double-clicking the host wall in the tree view to enter its edit mode. There, you will see the window in its &quot;Subtractions&quot; group. Simply select the window there, press the &quot;remove element&quot; button, then &quot;OK&quot;. Our window has now been removed from its host wall, and lies at the bottom of the tree view.

&lt;!--T:90--&gt;
We have a second door, exactly the same as this one, a bit on the left. Instead of creating a new door from scratch, we have two ways to make a copy of the previous one: By using the [[Draft Move]] tool, with the ALT key pressed, which, as you already know, copies an object instead of moving it. Or, even better, we can use the [[Draft Clone]] tool. The clone tool produces a &quot;clone&quot; of a selected object, that you can move around, but that retains the shape of the original object. If the original object changes, the clone changes too.

&lt;!--T:91--&gt;
So all we need to do now is select the door, press the [[Draft Clone]] tool, then move the clone to its correct position with the [[Draft Move]] tool.

=== Organizing your model === &lt;!--T:92--&gt;


[[Image:Arch tutorial 24.jpg|400px|left]]


&lt;!--T:93--&gt;
Now would be a good time to do a bit of housecleaning. Since we already have two windows, it is a good moment to do some cleaning in the tree view: Create a new group, rename it to &quot;windows&quot;, and drop the 2 windows in it. I also recommend you to separate other elements that way, such as the walls and structures. Since you can also create groups inside groups, you can organize further, for example by placing all elements that form the roof into a separate group, so it is easy to turn on and off (turning a group visible or invisible does the same with all objects inside).

&lt;!--T:94--&gt;
The [[Arch Workbench]] has some additional tools to organize your model: the [[Arch Site]], [[Arch Building]] and [[Arch Floor]]. Those 3 objects are based on the standard FreeCAD group, so they behave exactly like groups, but they have a couple of additional properties. For example, [[Arch Floor|floors]] have the ability to set and manage the height of the contained walls and structure, and when they are moved, all their contents are moved too.

&lt;!--T:95--&gt;
But here, since we have only one building with only one (and a half) floor, there is no real need to use such objects, so let's stick with simple groups.


{{clear}}


&lt;!--T:96--&gt;
Now, let's get back to work. Turn off the roof group, so we can see better inside, and switch the Display Mode of the floor objects to Wireframe (or use the [[Draft ToggleDisplayMode]] tool) so we can still snap to them, but we can see the plan view underneath. But you can also turn off the floors completely, then place your doors at level 0, then raise them of 15cm with the [[Draft Move]] tool.

&lt;!--T:97--&gt;
Let's place the interior doors. Use the &quot;Simple Door&quot; preset again, make doors of 1.00m and 0.70m wide x 2.10m high, with W1 size of 0.1m. Make sure you snap to the correct wall when you place them, so they automatically create a hole in that wall. If it is hard to place them correctly, you can place them at an easier location, at the corner of the wall, for example, then move them. The &quot;hole&quot; will move together.

&lt;!--T:98--&gt;
If by mistake you hosted a window in the wrong wall, it is easy to fix: Remove the window from the &quot;Subtraction&quot; group of the host wall in edit mode, as we saw above, then add it to the &quot;Subtraction&quot; group of the correct wall, by the same method, or, simply, using the [[Arch Remove]] tool.

&lt;!--T:99--&gt;
A little work later, all our doors are there:


[[Image:Arch tutorial 25.jpg|1024px]]


&lt;!--T:100--&gt;
After a closer look at the elevation view, I now detected another error: The top of the brick walls is not as 2.60m, but 17.5cm lower, that is, 2.425m. Fortunately, windows based on presets have a facility: You can alter their general dimensions (width and height) from their properties. So let's change their height to 2.425 - 0.15, that is, 2.275. The second window, as it is a clone of the first one, will adapt too. This is basically where the true magic of parametric design appears.

&lt;!--T:101--&gt;
Now we can look at the really interesting stuff: How to design your own custom windows.

=== Creating custom windows === &lt;!--T:102--&gt;

&lt;!--T:103--&gt;
As I explained above, [[Arch Window]] objects are created from 2D layouts, made of closed elements (wires (polylines), circles, rectangles, anything). Since [[Draft Module|Draft]] objects cannot hold more than one of these elements, the preferred tool to draw window layouts is the [[Sketcher Module|Sketcher]]. Unfortunately, with the sketcher, it is not possible to snap to external objects like with the Draft workbench, which would be useful here, since our elevations are drawn already. Fortunately, a tool exists to convert Draft objects to a sketch: The [[Draft Draft2Sketch|Draft To Sketch]] tool.

&lt;!--T:104--&gt;
So, let's start by building our first window layout. I drew it on the elevation, using several [[Draft Rectangle|rectangles]]: One for the outer line, and 4 for the inner lines. I stopped before the door, because, remember, our door already has a frame there:


[[Image:Arch tutorial 26.jpg|1024px]]


&lt;!--T:105--&gt;
Then, select all the rectangles, and press the [[Draft Draft2Sketch|Draft To Sketch]] button (and delete the rectangles, because this tool doesn't delete the original objects, in case something goes wrong). Then, with the new sketch selected, press the [[Arch Window]] tool:


[[Image:Arch tutorial 27.jpg|1024px]]


&lt;!--T:106--&gt;
The tool will detect that the layout has one outer wire and several inner wires, and automatically proposes you a default configuration: One frame, made by subtracting the inner wires from the outer one, extruded by 1m. Let's change that, by entering the window's edit mode, by double-clicking on it in the tree view:

&lt;!--T:107--&gt;
You will see a &quot;Default&quot; component, that has been created automatically by the Window tool, that uses the 5 wires (always subtracting the other ones from the biggest one), and has an extrusion value of 1. Let's change its extrusion value to 0.1, to match what we used in the doors.

&lt;!--T:108--&gt;
Then, let's add 4 new glass panels, each using a single wire, and give them an extrusion of 0.01, and an offset of 0.05, so they are placed at the middle of the frame. This will be how your window looks like when you are finished:


[[Image:Arch tutorial 28.jpg|1024px]]


&lt;!--T:109--&gt;
I suppose now you must have understood the power of this system: Any combination of frames and panels of any shape is possible. If you can draw it in 2D, it can exist as a full valid 3D object.

&lt;!--T:110--&gt;
Now, let's draw the other pieces, then we'll move everything into place together. But first. we'll need to do some corrections to the base 2D drawing, because some lines are clearly missing, where the windows meet the stairs. We can fix that by offsetting the stairs line by 2.5cm with the [[Draft Offset]] tool (with ALT pressed of course, to copy our lines instead of moving them). Now we can draw our layout, with [[Draft Wire|wires]], then convert them to a sketch, then making a window of it.

&lt;!--T:111--&gt;
After doing that a couple of times (I made it in 4 separate pieces, but it's up to you to decide), we have our facade complete:


[[Image:Arch tutorial 29.jpg|1024px]]


&lt;!--T:112--&gt;
Now, as before, it's just a matter of rotating the pieces, and moving them to their correct position:


[[Image:Arch tutorial 30.jpg|1024px]]


&lt;!--T:113--&gt;
Last missing piece, there is a segment of wall that didn't appear on the plan view, that we need to add. We have several options for that, I chose to draw a line on the ground plane, then move it up to the correct height, then create a wall from it. Then, we also need to fish up our roof subtraction volume (it must have stayed in the last column), then subtract it. Now this side of the building is ready:


[[Image:Arch tutorial 31.jpg|1024px]]


&lt;!--T:114--&gt;
Ready? Not quite. Look at the image above, we did our doors with a 5cm frame, remember (it was the default from the preset). But the other windows have 2.5cm frames. This needs to be fixed.

=== Editing windows === &lt;!--T:115--&gt;

&lt;!--T:116--&gt;
We already saw how to build and update window components, via the window's edit mode, but we can also edit the underlying sketch. Preset windows are not different than custom windows, the [[Arch Window]] tool only created the underlying sketch fo you. Select our door object (the original, not the copy, remember, we made a clone), and expand it in the tree view. There is our sketch. Double-click it to enter edit mode.

&lt;!--T:117--&gt;
the [[Sketcher Workbench]] is an extremely powerful tool. It doesn't have some of the [[Draft Workbench|Draft]] conveniences, such as snapping or working planes, but it has many other advantages. In FreeCAD you will frequently use one or another depending on the need. The most important feature of the sketcher is constraints. Constraints allow you to automatically fix the position of some elements relative to others. For example, you can force a segment to always be vertical, or to always be at a certain distance to another.

&lt;!--T:118--&gt;
When we edit our door sketch, we can see that it is made on a fully constrained sketch:


[[Image:Arch tutorial 32.jpg|1024px]]


&lt;!--T:119--&gt;
Now all we need to do is edit the 5cm distances between the outer line and the inner line, by double-clicking them, and changing their value to 2.5cm (Remember, the units are still not fully functional at the time I'm writing this). After clicking the &quot;OK&quot; button, our door (and its clone) have been updated.

== Working without 2D support == &lt;!--T:120--&gt;

&lt;!--T:121--&gt;
Until now our work has been relatively easy, because we had the underlying 2D drawings to base our work upon. But now, we must do the opposite facade and the glass atrium, and things are getting more complicated: The opposite facade drawing has a lot of wrong things, doesn't represent the atrium at all, and we have simply no drawing for the inner walls of the atrium. So we will need to invent a couple of things ourselves. Be sure to have a look at [http://www.pedrokok.com.br/2010/02/residencia-artigas-sao-paulo-sp/img_8265-533px/ reference pictures] to figure out how things are made. Or do it as you wish!

&lt;!--T:122--&gt;
One thing we can already do: duplicate the complicated stairs window with the [[Draft Move]] tool, because it is equal on both sides:


[[Image:Arch tutorial 33.jpg|1024px]]


&lt;!--T:123--&gt;
Note that here, I preferred to duplicate with the [[Draft Move]] tool instead of using a [[Draft Clone|clone]], because the clone currently doesn't support different colors inside objects. The difference is that the clone is a copy of the final shape of the original object, while if you copy an object, you create a new object and give it all the same properties as the original one (therefore, also its base sketch and its window components definition, which are both stored as properties).

&lt;!--T:124--&gt;
Now we must attack the parts that are not drawn anywhere. Let's start with the glass wall between the sitting room and the atrium. It'll be easier to draw it on the elevation view, because we'll get the correct height of the roof. Once you are in plan view, you can rotate the view from the menu View -&gt; Standard Views -&gt; Rotate left or right, until you get a comfortable view to work, like this:


[[Image:Arch tutorial 34.jpg|1024px]]


&lt;!--T:125--&gt;
Note how on the image above, I made a line from the model to the left section, to get the exact width of the window. Then, I reproduced that width on the elevation view and divided it into 4 pieces. Then I built one main window piece, plus 4 additional windows for the sliding doors. The sketcher sometimes has difficulties with overlapping wires, that's why I preferred to keep them separated like this:


[[Image:Arch tutorial 35.jpg|1024px]]


&lt;!--T:126--&gt;
After the necessary rotations, everything clicks perfectly into place:


[[Image:Arch tutorial 36.jpg|1024px]]


&lt;!--T:127--&gt;
We still need some corner piece there. A little useful trick with the [[Draft SelectPlane]] tool, if you have a face selected when you press the button, the working plane matches this face (at least its position, and if the face is rectangular, it also tries to match its axes). This is useful to draw 2D objects directly on the model, such as here, we can draw a rectangle to be extruded directly at its correct position:


[[Image:Arch tutorial 37.jpg|1024px]]


&lt;!--T:128--&gt;
Then let's do the two remaining pieces. One is easy, it is a copy of what's on the other side, so we can simply use the 2D drawing:


[[Image:Arch tutorial 38.jpg|1024px]]


&lt;!--T:129--&gt;
The other one is a bit tricky, by looking at the pictures, we see that it has many vertical divisions, like the stairs windows. By chance (or very good design from Vilanova Artigas), the width of our window, of 4.50m, is exactly the same as the stairs window, so we can use the exact same division: 15 pieces of 30cm. Here I used the [[Draft Array]] tool to copy over the two lines 15 times,and drew rectangles on top of them:


[[Image:Arch tutorial 39.jpg|1024px]]


&lt;!--T:130--&gt;
Once this is done, we can create our window with the same method we already know. Another small useful trick, in case you haven't found it yourself already: When editing a window, if you change the name of a component, it actually creates a duplicate of it. So to create the 15 inner glass panels, instead of clicking 15 times the &quot;add&quot; button and fill 15 times the data, you can just keep editing one, and change its name and wire, it will create a copy each time.

&lt;!--T:131--&gt;
After the window is rotated and moved into place, the atrium is complete:


[[Image:Arch tutorial 40.jpg|1024px]]


== Edits and fixes == &lt;!--T:132--&gt;

&lt;!--T:133--&gt;
Now when we look at our back elevation, and compare it with the plan, we see that there are some differences that need to be fixed. Namely, the bedroom windows are smaller than I first thought, and we'll need to add some more walls. In order to do that properly, some floors need to be cut:


[[Image:Arch tutorial 41.jpg|1024px]]


&lt;!--T:134--&gt;
We have of course several ways to do that, making a subtraction volume would be an easy way, but it would add unnecessary complexity to the model. Better to edit the base wire of each floors. This is where the [[Draft Edit]] mode comes into action. By expanding these floors in the tree view, then making their base wire visible, we can then double-click them to enter edit mode. There, we can move their points, or [[Draft AddPoint|add]] or [[Draft DelPoint|remove]] points. With this,editing our floor plates becomes easy.


[[Image:Arch tutorial 42.jpg|1024px]]


&lt;!--T:135--&gt;
After some more sweat (the person who made those drawings obviously became pretty lazy when did this last elevation, much is drawn wrong), we finally have our complete house:


[[Image:Arch tutorial 43.jpg|1024px]]


&lt;!--T:136--&gt;
Note the chimney tube, which is made from a circle I used to make a hole in the chimney block, that I extruded, then converted into a tube with the [[Part Offset]] tool.

&lt;!--T:137--&gt;
{{Note|Problems in objects|Sometimes an object you made can have problems. For example, the object it was based onto has been deleted, and the object can therefore not recalculate its shape. These are usually shown to you by a little red sign on their icon, and/or a warning in the output window. There is no generic recipe to fix these problems, because they can have many origins. But, the easiest way to solve them is often to delete them, and, if you didn't delete their base objects, recreate them.}}

== Output == &lt;!--T:138--&gt;

&lt;!--T:139--&gt;
Now, after all the hard work we passed through to build this model, comes the reward: What can we do with it? Basically, this is the big advantage of working with BIM, all our traditional architectural needs, such as 2d drawings (plans, sections, etc), renderings, and calculations (bills of quantities, etc) can all be extracted from the model. And, even better, regenerated every time the model changes. I'll show you here how to obtain these different documents.

=== Preparations === &lt;!--T:140--&gt;

&lt;!--T:141--&gt;
Before starting to export stuff, one consideration is interesting to do: As you saw, our model is becoming increasingly complex, with a lot of relationships between objects. This can make subsequent calculation operations, such as cutting through the model, heavy. One quick way to magically &quot;simplify&quot; drastically your model, is to remove all of this complexity, by exporting it to the [http://en.wikipedia.org/wiki/ISO_10303-21 STEP] format. That format will preserve all your geometry, but will discard all the relationships and parametric constructions, keeping only the final shape. When reimporting that STEP file into FreeCAD, you will get a model that has no relationship, and a much smaller file size. Think of it as an &quot;output&quot; file, that you can regenerate anytime from your &quot;master&quot; file:


[[Image:Arch tutorial 44.jpg|1024px]]


=== Exporting to IFC and other applications === &lt;!--T:142--&gt;


[[Image:Arch tutorial 45.jpg|400px|left]]


&lt;!--T:143--&gt;
One of the very fundamental things you need when working with BIM is to be able to import and export [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] files. This is still a work in progress in FreeCAD. [[Arch IFC|IFC]] format is already supported, and importing IFC files into FreeCAD is already pretty reliable. Exporting is still experimental, though, and has currently many limitations. However, things are bettering and we should get proper IFC export very soon.

&lt;!--T:144--&gt;
[[Arch IFC|IFC export]] requires very little setup, once the necessary software libraries are installed. You only need to recreate the building structure, which is needed in all IFC files, by adding an [[Arch Building]] to your file, then an [[Arch Floor]], then moving all the groups of objects that compose your model in it. Make sure you leave your construction geometry (all the 2D stuff we've been drawing) out of it to avoid making your IFC file unnecessarily heavy.

&lt;!--T:145--&gt;
Another thing to set, is to check the &quot;Role&quot; property of structural elements. Since IFC has no &quot;generic&quot; structural element, like FreeCAD, we need to assign them roles (column, beam, etc...) so the exporter knows what element to create in the IFC file.

&lt;!--T:146--&gt;
In this case, we need our whole architectural system, so the IFC exporter can know if an object must be exported as a wall or a column, so we are using our &quot;master&quot; model, not our &quot;output&quot; model.

&lt;!--T:147--&gt;
Once this is done, simply select your building object, and choose the &quot;Industry Foundation Classes&quot; format. Exporting to non-BIM applications, such as [http://www.sketchup.com/ Sketchup] is also easy, you have several export formats at your disposal, such as [[Arch DAE|Collada]], STEP, IGES ou OBJ.


{{clear}}


=== Rendering === &lt;!--T:148--&gt;

&lt;!--T:149--&gt;
FreeCAD also features a rendering module, the [[Raytracing Workbench]]. That workbench currently supports two render engines, [http://www.povray.org/ PovRay] and [http://www.luxrender.net LuxRender]. Since FreeCAD is not designed for image rendering, the features that the Raytracing workbench offer to you are somewhat limited. The best course of action when you want to do proper rendering, is to export your model to a mesh-based format such as OBJ or STL, and open it in an application more suited to rendering, such as [http://www.blender.org blender]. The image below has been rendered with blender's cycles engine:


[[Image:Arch tutorial 47.jpg|1024px]]


&lt;!--T:150--&gt;
But, for a quick rendering, the Raytracing workbench can already do a good job, with the advantage of being very easy to setup, thanks to its templates system. This is a rendering of our model fully made within FreeCAD, with the Luxrender engine, using the &quot;indoor&quot; template.


[[Image:Arch tutorial 48.jpg|1024px]]


&lt;!--T:151--&gt;
The Raytracing workbench still offers you very limited control over materials, but lighting and environments are defined in templates, so they can be fully customized.

=== 2D drawings === &lt;!--T:152--&gt;

&lt;!--T:153--&gt;
Certainly the most important use of BIM is to produce 2D drawings automatically. This is done in FreeCAD with the [[Arch SectionPlane]] tool. This tool allows you to place a section plane object in the 3D view, that you can orient to produce plans, sections and elevations. Section planes must know what objects they must consider, so once you have created one, you must add objects to it with the [[Arch Add]] tool. You can add individual objects, or, more conveniently, a group, a floor or a whole building. This allows you to easily change the scope of a certain section plane later, by adding or removing objects to/from that group. Any change to these objects gets reflected in the views produced by the section plane.

&lt;!--T:154--&gt;
The section plane automatically produces cut views of the objects it intersects. In other words, to produce views instead of sections, you just need to place the section plane outside of your objects.


[[Image:Arch tutorial 49.jpg|1024px]]


&lt;!--T:155--&gt;
The section planes can produce two different outputs: [[Part Module|shape]] objects, that live in the same document as your 3D model, or [[Drawing Module|drawing views]], that are made to use on a drawing sheet produced by the [[Drawing Module|Drawing workbench]]. Each of these behave differently, and has its own advantages.

&lt;!--T:156--&gt;
'''Shape views'''

&lt;!--T:157--&gt;
This output is produced by using the [[Draft Shape2DView]] tool with a section plane selected. You produce a 2D view of the model directly in the 3D space, like on the image above. The main advantage here is that you can work on them using the [[Draft Workbench|Draft]] tools (or any other standard tool of FreeCAD), so you can add texts, dimensions, symbols, etc:


[[Image:Arch tutorial 50.jpg|1024px]]


&lt;!--T:158--&gt;
On the image above, two [[Draft Shape2DView|Shape2D views]] have been produced for each section, one showing everything, the other showing only the cut lines. This allows us to give it a different line weight, and turn hatching on. Then, dimensions, texts and symbols have been added, and a couple of DXF blocks have been imported to represent the furniture. These views are then easy to export to DXF or DWG, and open in your favorite 2D CAD application, such as [http://www.librecad.org LibreCAD] or [http://www.3ds.com/products-services/draftsight/overview/ DraftSight], where you can work further on them:


[[Image:Arch tutorial 51.jpg|1024px]]


&lt;!--T:159--&gt;
Note that some features are still not supported by the [[Draft DXF|DXF/DWG exporter]] so the result in your 2D application might differ a bit. For example, in the image above, I had to redo the hatching, and correct the position of some dimension texts. If you place your objects in different groups in FreeCAD, these become layers in your 2D CAD application.

&lt;!--T:160--&gt;
'''Drawing views'''

&lt;!--T:161--&gt;
The other kind of output that can be produced from [[Arch SectionPlane|section planes]] is a [[Drawing Module|Drawing view]]. These are produced by using the [[Draft Drawing]] tool with a section plane selected. This method has one big limitation compared to the previous one: you have limited possibilities to edit the results, and at the moment, things like dimensioning or hatching are still not natively supported. 

&lt;!--T:162--&gt;
On the other hand, the final output being easier to manipulate, and the graphical possibilities of the SVG format being huge, in the future, undoubtedly this will be the preferred method. At the moment, though, you'll get better results using the previous one.


[[Image:Arch tutorial 52.jpg|1024px]]


&lt;!--T:163--&gt;
On the image above, the geometry is the direct output of the section plane, but some other Draft objects have been added, such as dimensions and hatched polygons, and another view object with same scale and offset values has been produced from them with the [[Draft Drawing]] tool. In the future, such operations will be done directly on the Drawing page, leaving your model totally clean.

=== Quantities extraction === &lt;!--T:164--&gt;

&lt;!--T:165--&gt;
This is another very important task to be performed on BIM models. In FreeCAD, things look good right from the start, since the OpenCasCade kernel of FreeCAD already takes care of calculating lengths, areas and volumes for all the shapes it produces. Since all [[Arch Module|Arch]] objects are solids, you are always guaranteed to be able to obtain a volume from them.

&lt;!--T:166--&gt;
'''Using spreadsheets'''

&lt;!--T:167--&gt;
There is a brand-new workbench in FreeCAD, the [[Spreadsheet Workbench]], that is the perfect tool for collecting such information about our model. It can count objects of a certain name or a certain type, or display a specific properties of those objects. The spreadsheet workbench features two objects: The [[Spreadsheet Create|spreadsheet]] object is a simple spreadsheet container, that you can edit, and place values inside the cells, but has no automation. The [[Spreadsheet Controller|cell controller]], on the other hand, is an object that you must insert in a spreadsheet, that controls a series of cells of its host spreadsheet, filling them according to what you specify. This, provided that you organized your model well, allows you to easily retrieve individual values:


[[Image:Arch tutorial 53.jpg|1024px]]


&lt;!--T:168--&gt;
Note that the spreadsheet workbench is still very new, and like everything very new, still contains many bugs and limitations. But for simple summaries like this, it already works well. The resulting spreadsheet can then be exported to a CSV file, which can be imported in any spreadsheet application.

&lt;!--T:169--&gt;
'''The survey mode'''

&lt;!--T:170--&gt;
Another way to survey your model and extract values, is to use the [[Arch Survey]] mode. In this mode, you can click on points, edges, faces or double-click to select whole objects, and you get altitude, length, area or volume values, shown on the model, printed on the FreeCAD output window, and copied to the clipboard, so you can easily pick and paste values in another opened application


[[Image:Arch tutorial 54.jpg|1024px]]


== Conclusion == &lt;!--T:171--&gt;

&lt;!--T:172--&gt;
I hope this gives you a good overview of the available tools, be sure to refer to the [[Arch Workbench]] and [[Draft Workbench]] documentation for more (there are more tools that I didn't mention here), and, more generally, to the rest of the [[Main Page|FreeCAD documentation]]. Pay a visit to the [http://forum.freecadweb.org forum] too, many problems can usually be solved there in no time, and follow my [http://yorik.uncreated.net/guestblog.php?tag=freecad blog] for news about he Arch workbench development.

&lt;!--T:173--&gt;
The file created during this tutorial can be found [http://yorik.uncreated.net/archive/freecad/casa_artigas.fcstd here]

&lt;!--T:174--&gt;
[[Category:Tutorials]]


</text>
    </revision>
  </page>
  <page>
    <title>Artwork</title>
    <ns>0</ns>
    <id>11</id>
    <revision>
      <id>109800</id>
      <parentid>109799</parentid>
      <timestamp>2014-09-19T21:03:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>oy8dibi12546d438sfljj2whbiyhgdo</sha1>
      <text xml:space="preserve" bytes="42160">
&lt;!--T:190--&gt;
Here is the artwork that has been created for FreeCAD. Feel free to reuse in other applications. If you would like to contribute with icons, please read the guidelines at the bottom of this page first.

== Application Icons == &lt;!--T:191--&gt; 

=== The FreeCAD Icon === &lt;!--T:192--&gt; 

[[Image:Freecad.svg]]


===File Menu and Toolbar Icons=== &lt;!--T:193--&gt;

[[Image:Document-new.svg]]
[[Image:Document-open.svg]]
[[Image:Document-save.svg]]
[[Image:Document-save-as.svg]]
[[Image:Document-print.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-paste.svg]]
[[Image:Edit-undo.svg]]
[[Image:Edit-redo.svg]]
[[Image:View-refresh.svg]]
[[Image:WhatsThis.svg]]
[[Image:system-log-out.svg]]


===Edit Menu and Toolbar Icons=== &lt;!--T:194--&gt;

[[Image:Edit-undo.svg]]
[[Image:Edit-redo.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-paste.svg]]
[[Image:View-refresh.svg]]
[[Image:Edit-select-box.svg]]
[[Image:Edit-select-all.svg]]
[[Image:Std_Edit.svg]]
[[Image:Preferences-general.svg]]


===Edit &gt; Preferences Sub-menu Icons=== &lt;!--T:195--&gt;

[[Image:Preferences-system.svg]]
[[Image:Preferences-general.svg]]
[[Image:Preferences-display.svg]]
[[Image:Preferences-arch.svg]]
[[Image:Preferences-draft.svg]]
[[Image:preferences-import-export.svg]]
[[Image:preferences-openscad.svg]]
[[Image:preferences-part_design.svg]]
[[Image:preferences-raytracing.svg]]


===View Menu Icons=== &lt;!--T:196--&gt;

[[Image:Window-new.svg]]
[[Image:View-isometric.svg]]
[[Image:View-perspective.svg]]
[[Image:Std_Tool1.svg]]
[[Image:View-measurement.svg]]


===View &gt; Standard Views Sub-menu and Toolbar Icons=== &lt;!--T:197--&gt;

[[Image:View-zoom-all.svg]]
[[Image:View-zoom-selection.svg]]
[[Image:View-axometric.svg]]
[[Image:View-front.svg]]
[[Image:View-top.svg]]
[[Image:View-right.svg]]
[[Image:View-rear.svg]]
[[Image:View-bottom.svg]]
[[Image:View-left.svg]]
[[Image:View-rotate-left.svg]]
[[Image:View-rotate-right.svg]]


===View &gt; Draw Style Sub-menu and Toolbar Icons=== &lt;!--T:198--&gt;

[[Image:DrawStyleAsIs.svg]]
[[Image:DrawStyleFlatLines.svg]]
[[Image:DrawStyleShaded.svg]]
[[Image:DrawStyleWireFrame.svg]]
[[Image:DrawStylePoints.svg]]


===View &gt; Stereo Sub-menu Icons=== &lt;!--T:199--&gt;

[[Image:Std_Tool1.svg]]


===View &gt; Zoom Sub-menu Icons=== &lt;!--T:200--&gt;

[[Image:View-zoom-in.svg]]
[[Image:View-zoom-out.svg]]
[[Image:View-zoom-border.svg]]


===View &gt; Visibility Sub-menu Icons=== &lt;!--T:201--&gt;

[[Image:view-unselectable.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Part_Measure_Clear_All.svg]]


===View &gt; Workbench Sub-menu Icons=== &lt;!--T:202--&gt;

[[Image:Workbench Arch.svg]]
[[Image:Workbench Complete.svg|64px]] 
[[Image:Workbench_Draft.svg]]
[[Image:Workbench_Drawing.svg]]
[[Image:Workbench_Image.svg]]
[[Image:Workbench_Mesh.svg]]
[[Image:Workbench_Part.svg]]
[[Image:Workbench_PartDesign.svg]]
[[Image:Workbench_Raytracing.svg]]
[[Image:Workbench_Robot.svg]]
[[Image:Workbench_Sketcher.svg]]
[[Image:Workbench_Start.svg]]
[[Image:Workbench_Web.svg]]  


===Tools Menu Icons=== &lt;!--T:203--&gt;

[[Image:Camera-photo.svg]]
[[Image:Applications-accessories.svg]]


===Macro Menu and Toolbar Icons=== &lt;!--T:204--&gt;

[[Image:Macro-record.svg]]
[[Image:Macro-stop.svg]]
[[Image:Std_DlgMacroExecuteDirect.svg]]
[[Image:Macro-execute.svg]]
[[Image:Debug-start.svg]]
[[Image:Debug-stop.svg]]


===Windows Menu Icons=== &lt;!--T:205--&gt;

[[Image:Std_WindowNext.svg]]
[[Image:Std_WindowPrev.svg]]
[[Image:Std_WindowTileVer.svg]]
[[Image:Std_WindowCascade.svg]]


===Help Menu Icons=== &lt;!--T:206--&gt;

[[Image:Help-browser.svg]]
[[Image:Internet-web-browser.svg]]
[[Image:Applications-python.svg]]
[[Image:Freecad.svg]]
[[Image:WhatsThis.svg]]


===Tree Icons, Overall GUI=== &lt;!--T:207--&gt;

[[Image:Document.svg]]
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]]
[[Image:Tree_Python.svg]]


===Arch WB: Architecture Menu and Arch Tools Toolbar Icons=== &lt;!--T:208--&gt;

[[Image:Arch_Wall.svg]]
[[Image:Arch_Structure.svg]]
[[Image:Arch_Rebar.svg]]
[[Image:Arch_Floor.svg]]
[[Image:Arch_Building.svg]]
[[Image:Arch_Site.svg]]
[[Image:Arch_Window.svg]]
[[Image:Arch_Roof.svg]]
[[Image:Arch_Axis.svg]]
[[Image:Arch_SectionPlane.svg]]
[[Image:Arch_Space.svg]]
[[Image:Arch_Stairs.svg]]
[[Image:Arch_Panel.svg]]
[[Image:Arch_Frame.svg]]
[[Image:Arch_Add.svg]]
[[Image:Arch_Remove.svg]]
[[Image:Arch_Survey.svg]]


===Arch WB: Architecture &gt; Utilities Sub-menu Icons=== &lt;!--T:209--&gt; 

[[Image:Arch_SplitMesh.svg]]
[[Image:Arch_MeshToShape.svg]]
[[Image:Arch_SelectNonManifold.svg]]
[[Image:Arch_RemoveShape.svg]]
[[Image:Arch_CloseHoles.svg]]
[[Image:Arch_MergeWalls.svg]]
[[Image:Arch_Check.svg]]
[[Image:IFC.svg]]
[[Image:Arch_ToggleIfcBrepFlag.svg]]


===Arch WB: Tree Icons=== &lt;!--T:210--&gt; 

[[Image:Arch_Axis_Tree.svg]]
[[Image:Arch_Building_Tree.svg]]
[[Image:Arch_Cell_Tree.svg]]
[[Image:Arch_Floor_Tree.svg]]
[[Image:Arch_Frame_Tree.svg]]
[[Image:Arch_Panel_Tree.svg]]
[[Image:Arch_Rebar_Tree.svg]]
[[Image:Arch_Roof_Tree.svg]]
[[Image:Arch_SectionPlane_Tree.svg]]
[[Image:Arch_Site_Tree.svg]]
[[Image:Arch_Space_Tree.svg]]
[[Image:Arch_Stairs_Tree.svg]]
[[Image:Arch_StructuralSystem_Tree.svg]]
[[Image:Arch_Structure_Tree.svg]]
[[Image:Arch_Wall_Tree.svg]]
[[Image:Arch_Wall_Tree_Assembly.svg]]
[[Image:Arch_Window_Tree.svg]]


===Draft WB: Draft Menu Icons===

[[Image:Draft_Line.svg]]
[[Image:Draft_Polyline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_BezCurve.svg]]


[[Image:Draft_Move.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_PutOnSheet.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Shape2DView.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Clone.svg]]


===Draft WB: Draft &gt; Utilities Sub-menu Icons===

[[Image:Draft_VisGroup.svg]]
[[Image:Draft_Heal.svg]]
[[Image:Draft_FlipDimension.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_Apply.svg]]
[[Image:Draft_SwitchMode.svg]]
[[Image:Draft_AddToGroup.svg]]
[[Image:Draft_SelectGroup.svg]]
[[Image:Draft_SelectPlane.svg]]
[[Image:Snap_Grid.svg]]


===Draft WB: Draft &gt; Wire Tools Sub-menu Icons===

[[Image:Draft_Rotate.svg]]
[[Image:Draft_Finish.svg]]
[[Image:Draft_Lock.svg]]


===Draft WB: Draft &gt; Snapping Sub-menu and Toolbar Icons===

[[Image:Snap_Lock.svg]]
[[Image:Snap_Midpoint.svg]]
[[Image:Snap_Perpendicular.svg]]
[[Image:Snap_Grid.svg]]
[[Image:Snap_Intersection.svg]]
[[Image:Snap_Parallel.svg]]
[[Image:Snap_Endpoint.svg]]
[[Image:Snap_Angle.svg]]
[[Image:Snap_Center.svg]]
[[Image:Snap_Extension.svg]]
[[Image:Snap_Near.svg]]
[[Image:Snap_Ortho.svg]]
[[Image:Snap_Dimensions.svg]]
[[Image:Snap_WorkingPlane.svg]]


===Draft WB: Draft Menu Icons===

[[Image:Draft_Line.svg]]
[[Image:Draft_Polyline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_BezCurve.svg]]


===Draft WB: Draft Modification Tools Menu Icons===

[[Image:Draft_Move.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_PutOnSheet.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Shape2DView.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Clone.svg]]


===Draft WB: Command Bar Icons===

[[Image:Draft_SelectPlane.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Apply.svg]]


===Draft WB: Tree Icons===

[[Image:Draft_Draft.svg]]


===Drawing WB: Toolbar and Menu Icons===

[[Image:document-new.svg]]
[[Image:drawing-landscape.svg]]
[[Image:drawing-landscape-new.svg]]
[[Image:drawing-landscape-A0.svg]]
[[Image:drawing-landscape-A1.svg]]
[[Image:drawing-landscape-A2.svg]]
[[Image:drawing-landscape-A3.svg]]
[[Image:drawing-landscape-A4.svg]]
[[Image:drawing-portrait-A4.svg]]
[[Image:drawing-view.svg]]
[[Image:drawing-orthoviews.svg]]
[[Image:drawing-openbrowser.svg]]
[[Image:drawing-annotation.svg]]
[[Image:drawing-clip.svg]]
[[Image:drawing-symbol.svg]]
[[Image:Document-save.svg]]


===FEM WB: FEM Menu and Toolbar Icons===

[[Image:Fem_FemMesh.svg]]
[[Image:Fem_Material.svg]]
[[Image:Fem_Analysis.svg]]
[[Image:Fem_NewAnalysis.svg]]
[[Image:Fem_FemMesh_createnodebypoly.svg]]
[[Image:Fem_ConstraintFixed.svg]]
[[Image:Fem_ConstraintForce.svg]]
[[Image:Fem_ConstraintBearing.svg]]
[[Image:Fem_ConstraintGear.svg]]
[[Image:Fem_ConstraintPulley.svg]]
[[Image:Fem_Result.svg]]
[[Image:Fem_ResultDisplacement.svg]]
[[Image:Fem_ResultStress.svg]]
[[Image:Fem_AddFemMesh.svg]]
[[Image:Fem_AddMaterial.svg]]
[[Image:Fem_AddPart.svg]]


===Image WB: Toolbar Icons===

[[Image:Image-import.svg]]


===Inspection WB: Inspection Menu Icons===

[[Image:inspect_pipette.svg]]


===Meshes WB: Meshes Menu and Toolbar Icons===

[[Image:Mesh_Import_Mesh.svg]]
[[Image:Mesh_Export_Mesh.svg]]
[[Image:Mesh_Mesh_from_Shape.svg]]
[[Image:Mesh_Harmonize_Normals.svg]]
[[Image:Mesh_Flip_Normals.svg]]
[[Image:mesh_boundary.svg]]
[[Image:Mesh_Remove_Components.svg]]
[[Image:Mesh_Regular_Solid.svg]]
[[Image:Mesh_cut.svg]]
[[Image:Mesh_Curvature_Plot.svg]]


===Meshes WB: Analyze Sub-menu Icons===
[[Image:mesh_pipette.svg]]


===Meshes WB: Regular Solids Sub-menu Icons===

[[Image:Mesh_Cone.svg]]
[[Image:Mesh_Cube.svg]]
[[Image:Mesh_Cylinder.svg]]
[[Image:Mesh_Ellipsoid.svg]]
[[Image:Mesh_Sphere.svg]]
[[Image:Mesh_Torus.svg]]
[[Image:MeshFace.svg]]


===Meshes WB: Tree Icons===

[[Image:Tree_Mesh.svg]]
[[Image:Mesh_Tree_Curvature_Plot.svg]]


===OpenSCAD WB: OpenSCAD Menu and Toolbar Icons===

[[Image:OpenSCAD_AddOpenSCADElement.svg]]
[[Image:OpenSCAD_ReplaceObject.svg]]
[[Image:OpenSCAD_RemoveSubtree.svg]]
[[Image:OpenSCAD_Explode_Group.svg]]
[[Image:OpenSCAD_RefineShapeFeature.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:OpenSCAD_IncreaseToleranceFeature.svg]]
[[Image:Part_CreatePrimitives.svg]]
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Cut.svg]]
[[Image:Part_Fuse.svg]]
[[Image:Part_Common.svg]]
[[Image:Python.svg]]

[[Image:OpenSCAD_ColorCodeShape.svg]]
[[Image:OpenSCAD_Hull.svg]]
[[Image:OpenSCAD_MeshBooleans.svg]]
[[Image:OpenSCAD_Minkowski.svg]]


===Part WB: Part Menu Icons===

[[Image:Part_Import.svg]]
[[Image:Part_Export.svg]]
[[Image:Part_CreatePrimitives.svg]] 
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Shape_from_Mesh.svg]]
[[Image:Part_Refine_Shape.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:Part_CrossSections.svg]]


===Part WB: Part &gt; Part Tools Menu Area and Toolbar Icons===

[[Image:Part_Extrude.svg]]
[[Image:Part_Revolve.svg]] 
[[Image:Part_Mirror.svg]]
[[Image:Part_Fillet.svg]]
[[Image:Part_Chamfer.svg]]
[[Image:Part_RuledSurface.svg]] 
[[Image:Part_Loft.svg]]
[[Image:Part_Sweep.svg]] 
[[Image:Part_Offset.svg]]
[[Image:Part_Thickness.svg]]


===Part WB: Part &gt; Primitives Sub-menu, and Solids Toolbar Icons===

[[Image:Part_Box.svg]]
[[Image:Part_Cylinder.svg]]
[[Image:Part_Sphere.svg]]
[[Image:Part_Cone.svg]]
[[Image:Part_Torus.svg]]
[[Image:Part_CreatePrimitives.svg]] 
[[Image:Part_Shapebuilder.svg]]


===Part WB: Part &gt; Create Parametric Primitives Sub-menu and Toolbar Icons===

[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Wedge.svg]]
[[Image:Part_Helix_Parametric.svg]]
[[Image:Part_Spiral_Parametric.svg]]
[[Image:Part_Circle_Parametric.svg]]
[[Image:Part_Ellipse_Parametric.svg]]
[[Image:Part_Point_Parametric.svg]]
[[Image:Part_Line_Parametric.svg]]
[[Image:Part_Polygon_Parametric.svg]]


===Part WB: Part &gt; Part Boolean Sub-menu and Toolbar Icons===

[[Image:Part_Booleans.svg]]
[[Image:Part_Cut.svg]] 
[[Image:Part_Fuse.svg]]
[[Image:Part_Common.svg]]


===Part WB: Measure Menu and Toolbar Icons===

[[Image:Part_Measure_Linear.svg]]
[[Image:Part_Measure_Angular.svg]]
[[Image:Part_Measure_Clear_All.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Part_Measure_Toggle_3d.svg]]
[[Image:Part_Measure_Toggle_Delta.svg]]

===Part WB: Tree Icons===

[[Image:Tree_Part.svg]]
[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Wedge.svg]]


===Part Design WB: Part Design Menu or Toolbar Icons===

[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_LeaveSketch.svg]] 
[[Image:Sketcher_ViewSketch.svg]] 
[[Image:Sketcher_MapSketch.svg]] 
[[Image:PartDesign_Pad.svg]] 
[[Image:PartDesign_Pocket.svg]] 
[[Image:PartDesign_Revolve.svg]] 
[[Image:PartDesign_Groove.svg]] 
[[Image:PartDesign_Fillet.svg]] 
[[Image:PartDesign_Chamfer.svg]] 
[[Image:PartDesign_Draft.svg]] 
[[Image:PartDesign_Mirrored.svg]] 
[[Image:PartDesign_LinearPattern.svg]] 
[[Image:PartDesign_PolarPattern.svg]] 
[[Image:PartDesign_MultiTransform.svg]]
[[Image:PartDesign_InternalExternalGear.svg]]
[[Image:WizardShaft.svg]]

===Plot WB: Plot Menu or Toolbar Icons===

[[Image:Save.svg ]]
[[Image:Axes.svg]]
[[Image:Series.svg]]
[[Image:Grid.svg]]
[[Image:Legend.svg]]
[[Image:Labels.svg]]
[[Image:Positions.svg]]


===Points WB: Points Toolbar and Menu Icons===

[[Image:Points_Import_Point_cloud.svg]]
[[Image:Points_Export_Point_cloud.svg]]
[[Image:PolygonPick.svg]]


===Points WB: Points &gt; Test Sub-menu Icons===

[[Image:Test1.svg]]


===Raytracing WB: Raytracing Menu Icons===

[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_ResetCamera.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Render.svg]]


===Raytracing WB: Raytracing &gt; Utilities Sub-menu Icons===

[[Image:Raytrace_Export.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_Part.svg]]

===Raytracing WB: Raytracing &gt; New POV-Ray Project Sub-menu Icons===

[[Image:Raytrace_New.svg]]


===Raytracing WB: Raytracing &gt; New LuxRender Project Sub-menu Icons===

[[Image:Raytrace_Lux.svg]]


===Raytracing WB: Raytracing Toolbar Icons Icons===

[[Image:Raytrace_New.svg]]
[[Image:Raytrace_Lux.svg]]
[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Render.svg]]


===Reverse Engineering WB: REEN Menu and Toolbar Icons===

[[Image:FitSurface.svg]]


===Robot WB: Robot Menu and Toolbar Icons=== 

[[Image:Robot_CreateRobot.svg|64px]]
[[Image:Robot_CreateTrajectory.svg|64px]]
[[Image:Robot_InsertWaypoint.svg|64px]]
[[Image:Robot_InsertWaypointPre.svg|64px]]
[[Image:Robot_Edge2Trac.svg|64px]]
[[Image:Robot_TrajectoryDressUp.svg|64px]]
[[Image:Robot_TrajectoryCompound.svg|64px]]
[[Image:Robot_SetHomePos.svg|64px]]
[[Image:Robot_RestoreHomePos.svg|64px]]
[[Image:Robot_Simulate.svg|64px]]
[[Image:Robot_Export.svg|64px]]
[[Image:Robot_SetDefaultOrientation.svg|64px]]
[[Image:Robot_SetDefaultValues.svg|64px]]


===Ship WB: Ship Design Menu and Toolbar Icons===

[[Image:Ship_Load.svg]]
[[Image:Ship_Module.svg]]
[[Image:Ship_OutlineDraw.svg]]
[[Image:Ship_AreaCurve.svg]]
[[Image:Ship_Hydrostatics.svg]]


===Ship WB: Ship Weights Menu and Toolbar Icons===

[[Image:FreeCAD-Ship-WeightIco.png|64px]]
[[Image:FreeCAD-Ship-TankIco.png|64px]]
[[Image:HydrostaticsIco.png|64px]]


===Sketcher WB: Sketcher Menu and Sketch Toolbar Icons===

[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_LeaveSketch.svg]] 
[[Image:Sketcher_ViewSketch.svg]] 
[[Image:Sketcher_MapSketch.svg]]


===Sketcher WB: Sketch &gt; Sketcher Geometries Sub-menu and Toolbar Icons===

[[Image:Sketcher_Point.svg]]
[[Image:Sketcher_Line.svg]]
[[Image:Sketcher_Arc.svg]] 
[[Image:Sketcher_Create3PointArc.svg]]
[[Image:Sketcher_Circle.svg]]
[[Image:Sketcher_Create3PointCircle.svg]]
[[Image:Sketcher_Polyline.svg]] 
[[Image:Sketcher_Rectangle.svg]]
[[Image:Sketcher_CreateTriangle.svg]]
[[Image:Sketcher_CreateSquare.svg]]
[[Image:Sketcher_CreatePentagon.svg]]
[[Image:Sketcher_CreateHexagon.svg]]
[[Image:Sketcher_CreateHeptagon.svg]]
[[Image:Sketcher_CreateOctagon.svg]]
[[Image:Sketcher_CreateSlot.svg]]
[[Image:Sketcher_CreateFillet.svg]] 
[[Image:Sketcher_Trimming.svg]] 
[[Image:Sketcher_External.svg]] 
[[Image:Sketcher_AlterConstruction.svg]]

===Sketcher WB: Sketch &gt; Sketcher Constraints Sub-menu and Toolbar Icons=== &lt;!--T:211--&gt;

[[Image:Constraint_PointOnPoint.svg]]
[[Image:Constraint_PointOnObject.svg]]
[[Image:Constraint_Vertical.svg]]
[[Image:Constraint_Horizontal.svg]]
[[Image:Constraint_Parallel.svg]]
[[Image:Constraint_Perpendicular.svg]]
[[Image:Constraint_Tangent.svg]]
[[Image:Constraint_EqualLength.svg]]
[[Image:Constraint_Symmetric.svg]]
[[Image:Constraint_Lock.svg]]
[[Image:Constraint_HorizontalDistance.svg]]
[[Image:Constraint_VerticalDistance.svg]]
[[Image:Constraint_Length.svg]]
[[Image:Constraint_Radius.svg]]
[[Image:Constraint_InternalAngle.svg]]



===Sketcher Constraints Icons Not Used=== &lt;!--T:69--&gt;


[[Image:Constraint_Concentric.svg]]
[[Image:Constraint_ExternalAngle.svg]]
[[Image:Constraint_PointOnEnd.svg]]
[[Image:Constraint_PointOnMidPoint.svg]]
[[Image:Constraint_PointOnStart.svg]]
[[Image:Constraint_PointToObject.svg]]
[[Image:Constraint_TangentToEnd.svg]]
[[Image:Constraint_TangentToStart.svg]]


===Sketcher WB: Sketch &gt; Sketcher Accelerators Sub-menu and Toolbar Icons=== &lt;!--T:164--&gt;


[[Image:Sketcher_CloseShape.svg]]
[[Image:Sketcher_ConnectLines.svg]]
[[Image:Sketcher_SelectConstraints.svg]]
[[Image:Sketcher_SelectOrigin.svg]]
[[Image:Sketcher_SelectVerticalAxis.svg]]
[[Image:Sketcher_SelectHorizontalAxis.svg]]


===Sketcher WB: Combo View &gt; Elements Icons=== &lt;!--T:166--&gt;


[[Image:Sketcher_Element_Point_StartingPoint.svg]]
[[Image:Sketcher_Element_Line_StartingPoint.svg]]
[[Image:Sketcher_Element_Line_EndPoint.svg]]
[[Image:Sketcher_Element_Line_Edge.svg]]
[[Image:Sketcher_Element_Circle_MidPoint.svg]]
[[Image:Sketcher_Element_Circle_Edge.svg]]
[[Image:Sketcher_Element_Arc_MidPoint.svg]]
[[Image:Sketcher_Element_Arc_StartingPoint.svg]]
[[Image:Sketcher_Element_Arc_EndPoint.svg]]
[[Image:Sketcher_Element_Arc_Edge.svg]]


===Tree Icons=== &lt;!--T:168--&gt;


[[Image:Tree_Part.svg]]
[[Image:Tree_Mesh.svg]] 
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]] 
[[Image:Tree_Python.svg]]
[[Image:Tree_Selectable.svg]] 
[[Image:Tree_Unselectable.svg]]


===Other/General Icons=== &lt;!--T:73--&gt;

=== Emot icons === &lt;!--T:74--&gt;


[[File:FreeCAD05_Tango_Face-angel.svg]]
[[File:FreeCAD05_Tango_Face-blush.svg]]
[[File:FreeCAD05_Tango_Face-crying.svg]]
[[File:FreeCAD05_Tango_Face-devil-grin.svg]]
[[File:FreeCAD05_Tango_Face-glasses.svg]]
[[File:FreeCAD05_Tango_Face-grin.svg]]
[[File:FreeCAD05_Tango_Face-grin-braces.svg]]
[[File:FreeCAD05_Tango_Face-kiss.svg]]
[[File:FreeCAD05_Tango_Face-plain.svg]]
[[File:FreeCAD05_Tango_Face-sad.svg]]
[[File:FreeCAD05_Tango_Face-smile.svg]]
[[File:FreeCAD05_Tango_Face-smile-big.svg]]
[[File:FreeCAD05_Tango_Face-surprise.svg]]
[[File:FreeCAD05_Tango_Face-wink.svg]]


[[File:FreeCAD05_Tango_Anaglyph.svg]]
[[File:FreeCAD05_Tango_Applications-games.svg]]
[[File:FreeCAD05_Tango_Applications-ristretto.svg]]
[[File:FreeCAD05_Tango_Dialog-error.svg]]
[[File:FreeCAD05_Tango_Dialog-warning.svg]]
[[File:FreeCAD05_Tango_Measure.svg]]
[[File:FreeCAD05_Tango_Process-stop.svg]]
[[File:FreeCAD05_Tango_Text-x-python.svg]]
[[File:FreeCAD05_Tango_Camera-photo.svg]]
[[File:FreeCAD05_Tango_Preferences-system.svg]]
[[File:FreeCAD05_Tango_Camera-video.svg]]
[[File:FreeCAD05_Tango_Applications-graphics.svg]]
[[File:FC_Christmas.svg]]


== Splash screens == &lt;!--T:77--&gt;


[[Image:Splashscreen09.png]]

[[Image:Splashscreen010.png]]

[[Image:Splash011.png]]

[[Image:Splashscreen012.png]]

[[Image:Splash013.jpg]]

[[Image:Freecadsplash14.png]]

[[Image:Freecadsplash15.png]]


== FreeCAD Icons by their location in source code == &lt;!--T:84--&gt;


=== From \src\Gui\Icons === &lt;!--T:86--&gt;


[[Image:Accessories-text-editor.svg]]
[[Image:Add.svg]]
[[Image:Applications-accessories.svg]]
[[Image:Applications-python.svg]]
[[Image:Background.png|64px]]
[[Image:Breakpoint.svg]]
[[Image:Bulb.svg]]
[[Image:Button_down.svg]]
[[Image:Button_invalid.svg|64px]]
[[Image:Button_left.svg]]
[[Image:Button_right.svg]]
[[Image:Button_up.svg]]
[[Image:Button_valid.svg|64px]]
[[Image:Camera-photo.svg]]
[[Image:Debug_marker.svg]]
[[Image:Debug-start.svg]]
[[Image:Debug-stop.svg]]
[[Image:Delete.svg]]
[[Image:Document.svg]]
[[Image:Document-new.svg]]
[[Image:Document-open.svg]]
[[Image:Document-print.svg]]
[[Image:Document-properties.svg]]
[[Image:Document-save.svg]]
[[Image:Document-save-as.svg]]
[[Image:DrawStyleAsIs.svg]]
[[Image:DrawStyleFlatLines.svg]]
[[Image:DrawStylePoints.svg]]
[[Image:DrawStyleShaded.svg]]
[[Image:DrawStyleWireFrame.svg]]
[[Image:Edit_Cancel.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-delete.svg]]
[[Image:Edit-edit.svg]]
[[Image:Edit_OK.svg]]
[[Image:Edit-paste.svg]]
[[Image:Edit-redo.svg]]
[[Image:Edit_remove.svg]]
[[Image:Edit-select-all.svg]]
[[Image:Edit-select-box.svg]]
[[Image:Edit-undo.svg]]
[[Image:Feature.svg|64px]]
[[Image:Freecad.svg]]
[[Image:FreeCAD_Doc.png]]
[[Image:Freecadsplash15.png|64px]]
[[Image:Help-browser.svg]]
[[Image:Internet-web-browser.svg]]
[[Image:Macro-execute.svg]]
[[Image:Macro-record.svg]]
[[Image:Macro-stop.svg]]
[[Image:Material.svg]]
[[Image:Mouse_pointer.svg]]
[[Image:Part_Measure_Clear_All.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Preferences-display.svg]]
[[Image:Preferences-general.svg]]
[[Image:preferences-import-export.svg]]
[[Image:Preferences-system.svg]]
[[Image:Process-stop.svg]]
[[Image:Spaceball_button.svg]]
[[Image:SpNav-PanLR.svg]]
[[Image:SpNav-PanUD.svg]]
[[Image:SpNav-Roll.svg]]
[[Image:SpNav-Spin.svg]]
[[Image:SpNav-Tilt.svg]]
[[Image:SpNav-Zoom.svg]]
[[Image:Std_ViewScreenShot.svg]]
[[Image:System-log-out.svg]]
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]]
[[Image:Tree_Python.svg]]
[[Image:Utilities-terminal.svg]]
[[Image:View-axometric.svg]]
[[Image:View-bottom.svg]]
[[Image:View-front.svg]]
[[Image:View-fullscreen.svg]]
[[Image:View-isometric.svg]]
[[Image:View-left.svg]]
[[Image:View-measurement.svg]]
[[Image:View-perspective.svg]]
[[Image:View-rear.svg]]
[[Image:View-refresh.svg]]
[[Image:View-right.svg]]
[[Image:View-rotate-left.svg]]
[[Image:View-rotate-right.svg]]
[[Image:View-top.svg]]
[[Image:View-unselectable.svg]]
[[Image:View-zoom-all.svg]]
[[Image:View-zoom-border.svg]]
[[Image:View-zoom-fit.svg]]
[[Image:View-zoom-in.svg]]
[[Image:View-zoom-out.svg]]
[[Image:View-zoom-selection.svg]]
[[Image:Window-new.svg]]


&lt;!--T:171--&gt;
The Background has been re-sized to a display width of 480 pixels:


[[Image:Background.png|480px]]

=== From \src\Gui\Icons\ClassBrowser === &lt;!--T:85--&gt;

[[Image:Const_member.svg]]
[[Image:Member.svg]]
[[Image:Method.svg]]
[[Image:Property.svg]]
[[Image:Type_class.svg]]
[[Image:Type_enum.svg]]
[[Image:Type_module.svg]]


=== From \src\Mod\Arch\Resources\icons === &lt;!--T:89--&gt;


[[Image:Arch_Add.svg]]
[[Image:Arch_Axis.svg]]
[[Image:Arch_Axis_Tree.svg]]
[[Image:Arch_Building.svg]]
[[Image:Arch_Building_Tree.svg]]
[[Image:Arch_Cell.svg]]
[[Image:Arch_Cell_Tree.svg]]
[[Image:Arch_Check.svg]]
[[Image:Arch_CloseHoles.svg]]
[[Image:Arch_Fixture.svg]]
[[Image:Arch_Floor.svg]]
[[Image:Arch_Floor_Tree.svg]]
[[Image:Arch_Frame.svg]]
[[Image:Arch_Frame_Tree.svg]]
[[Image:Arch_MergeWalls.svg]]
[[Image:Arch_MeshToShape.svg]]
[[Image:Arch_Panel.svg]]
[[Image:Arch_Panel_Tree.svg]]
[[Image:Arch_Rebar.svg]]
[[Image:Arch_Rebar_Tree.svg]]
[[Image:Arch_Remove.svg]]
[[Image:Arch_RemoveShape.svg]]
[[Image:Arch_Roof.svg]]
[[Image:Arch_Roof_Tree.svg]]
[[Image:Arch_SectionPlane.svg]]
[[Image:Arch_SectionPlane_Tree.svg]]
[[Image:Arch_SelectNonManifold.svg]]
[[Image:Arch_Site.svg]]
[[Image:Arch_Site_Tree.svg]]
[[Image:Arch_Space.svg]]
[[Image:Arch_Space_Tree.svg]]
[[Image:Arch_SplitMesh.svg]]
[[Image:Arch_Stairs.svg]]
[[Image:Arch_Stairs_Tree.svg]]
[[Image:Arch_StructuralSystem.svg]]
[[Image:Arch_StructuralSystem_Tree.svg]]
[[Image:Arch_Structure.svg]]
[[Image:Arch_Structure_Tree.svg]]
[[Image:Arch_Survey.svg]]
[[Image:Arch_ToggleIfcBrepFlag.svg]]
[[Image:Arch_Wall.svg]]
[[Image:Arch_Wall_Tree.svg]]
[[Image:Arch_Wall_Tree_Assembly.svg]]
[[Image:Arch_Window.svg]]
[[Image:Arch_Window_Tree.svg]]
[[Image:IFC.svg]]
[[Image:preferences-arch.svg]]

=== From \src\Mod\Arch\Resources\ui === &lt;!--T:91--&gt;


[[Image:ParametersDoorGlass.svg]]
[[Image:ParametersDoorSimple.svg]]
[[Image:ParametersWindowDouble.svg]]
[[Image:ParametersWindowFixed.svg]]
[[Image:ParametersWindowSimple.svg]]
[[Image:ParametersWindowStash.svg]]


=== From src\Mod\Assembly\Gui\Resources\icons\actions === &lt;!--T:93--&gt;


[[Image:Axle_constraint.svg]]


=== From \src\Mod\Draft\Resources\Icons === &lt;!--T:174--&gt;


[[Image:Draft_2DShapeView.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_AddToGroup.svg]]
[[Image:Draft_Apply.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_BezCurve.svg]]
[[Image:Draft_BezSharpNode.svg]]
[[Image:Draft_BezSymNode.svg]]
[[Image:Draft_BezTanNode.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Clone.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Cursor.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_Dot.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Draft.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Drawing.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_Finish.svg]]
[[Image:Draft_FlipDimension.svg]]
[[Image:Draft_Heal.svg]]
[[Image:Draft_Line.svg]]
[[Image:Draft_Lock.svg]]
[[Image:Draft_Macro.svg]]
[[Image:Draft_Move.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_SelectGroup.svg]]
[[Image:Draft_SelectPlane.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Snap.svg]]
[[Image:Draft_SwitchMode.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_VisGroup.svg]]
[[Image:Draft_Wipe.svg]]
[[Image:Draft_Wire.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:preferences-draft.svg]]
[[Image:Snap_Angle.svg]]
[[Image:Snap_Center.svg]]
[[Image:Snap_Dimensions.svg]]
[[Image:Snap_Endpoint.svg]]
[[Image:Snap_Extension.svg]]
[[Image:Snap_Grid.svg]]
[[Image:Snap_Intersection.svg]]
[[Image:Snap_Lock.svg]]
[[Image:Snap_Midpoint.svg]]
[[Image:Snap_Near.svg]]
[[Image:Snap_Ortho.svg]]
[[Image:Snap_Parallel.svg]]
[[Image:Snap_Perpendicular.svg]]
[[Image:Snap_WorkingPlane.svg]]

=== From \src\Mod\Draft\Resources\Patterns === &lt;!--T:97--&gt;


[[Image:concrete.svg]]
[[Image:cross.svg]]
[[Image:line.svg]]
[[Image:simple.svg]]
[[Image:square.svg]]


=== From \src\Mod\Drawing\Gui\Resources\Icons === &lt;!--T:99--&gt;


[[Image:Page.svg]]
[[Image:Pages.svg]]
[[Image:View.svg]]


=== From \src\Mod\Drawing\Gui\Resources\Icons\Actions === &lt;!--T:101--&gt;


[[Image:document-new.svg]]
[[Image:drawing-annotation.svg]]
[[Image:drawing-clip.svg]]
[[Image:drawing-landscape.svg]]
[[Image:drawing-landscape-A0.svg]]
[[Image:drawing-landscape-A1.svg]]
[[Image:drawing-landscape-A2.svg]]
[[Image:drawing-landscape-A3.svg]]
[[Image:drawing-landscape-A4.svg]]
[[Image:drawing-landscape-new.svg]]
[[Image:drawing-openbrowser.svg]]
[[Image:drawing-orthoviews.svg]]
[[Image:drawing-portrait-A4.svg]]
[[Image:drawing-symbol.svg]]
[[Image:drawing-view.svg]]



=== From \src\Mod\Drawing\Templates === &lt;!--T:176--&gt;


[[Image:A3_Landscape.svg|480px]]
[[Image:A3_Landscape_ISO7200.svg|480px]]
[[Image:A4_Landscape.svg|480px]]
[[Image:A4_Landscape_ISO7200.svg|480px]]
[[Image:A4_Portrait_ISO7200.svg|480px]]

&lt;!--T:178--&gt;
The following image is &quot;A4_Simple.svg&quot;:


[[Image:A4_Simple.svg|480px]]


=== From \src\Mod\Fem\Gui\Resources\Icons\Actions === &lt;!--T:103--&gt;


[[Image:Fem_AddFemMesh.svg]]
[[Image:Fem_AddMaterial.svg]]
[[Image:Fem_AddPart.svg]]
[[Image:Fem_Analysis.svg]]
[[Image:Fem_ConstraintBearing.svg]]
[[Image:Fem_ConstraintFixed.svg]]
[[Image:Fem_ConstraintForce.svg]]
[[Image:Fem_ConstraintGear.svg]]
[[Image:Fem_ConstraintPulley.svg]]
[[Image:Fem_FemMesh.svg]]
[[Image:Fem_FemMesh_createnodebypoly.svg]]
[[Image:Fem_Material.svg]]
[[Image:Fem_NewAnalysis.svg]]
[[Image:Fem_Result.svg]]
[[Image:Fem_ResultDisplacement.svg]]
[[Image:Fem_ResultStress.svg]]


=== From \src\Mod\Image\Gui\Resources\Icons === &lt;!--T:105--&gt;


[[Image:image-import.svg]]


=== From \src\Mod\Mesh\Gui\Resources\Icons === &lt;!--T:107--&gt;


[[Image:mesh_boundary.svg]]
[[Image:mesh_cut.svg]]
[[Image:Tree_Mesh.svg]]



=== From \src\Mod\Inspect\Gui\Resources\Icons === &lt;!--T:180--&gt; 


[[Image:inspect_pipette.svg]]


=== From \src\Mod\Material\Gui\Resources\Icons === &lt;!--T:182--&gt;


[[Image:preview-rendered.svg]]
[[Image:preview-vector.svg]]


=== From \src\Mod\Mesh\Gui\Resources\Icons === &lt;!--T:184--&gt;


[[Image:mesh_boundary.svg]]
[[Image:Mesh_Curvature_Plot.svg]]
[[Image:mesh_cut.svg]]
[[Image:Mesh_Export_Mesh.svg]]
[[Image:Mesh_Flip_Normals.svg]]
[[Image:Mesh_Harmonize_Normals.svg]]
[[Image:Mesh_Import_Mesh.svg]]
[[Image:Mesh_Mesh_from_Shape.svg]]
[[Image:mesh_pipette.svg]]
[[Image:Mesh_Regular_Solid.svg]]
[[Image:Mesh_Remove_Components.svg]]
[[Image:Mesh_Tree_Curvature_Plot.svg]]
[[Image:Tree_Mesh.svg]]


=== From \src\Mod\Mesh\Gui\Resources\Icons\RegularSolids === &lt;!--T:186--&gt;


[[Image:Mesh_Cone.svg]]
[[Image:Mesh_Cube.svg]]
[[Image:Mesh_Cylinder.svg]]
[[Image:Mesh_Ellipsoid.svg]]
[[Image:Mesh_Sphere.svg]]
[[Image:Mesh_Torus.svg]]


=== From \src\Mod\MeshPart\Gui\Resources\Icons\Actions === &lt;!--T:109--&gt;


[[Image:MeshFace.svg]]


=== From \src\Mod\OpenSCAD\Gui\Resources\Icons\ === &lt;!--T:111--&gt;


[[Image:OpenSCAD_AddOpenSCADElement.svg]]
[[Image:OpenSCAD_ColorCodeShape.svg]]
[[Image:OpenSCAD_Explode_Group.svg]]
[[Image:OpenSCAD_Hull.svg]]
[[Image:OpenSCAD_IncreaseToleranceFeature.svg]]
[[Image:OpenSCAD_MeshBooleans.svg]]
[[Image:OpenSCAD_Minkowski.svg]]
[[Image:OpenSCAD_RefineShapeFeature.svg]]
[[Image:OpenSCAD_RemoveSubtree.svg]]
[[Image:OpenSCAD_ReplaceObject.svg]]
[[Image:preferences-openscad.svg]]


=== From \src\Mod\Part\Gui\Resources\icons\ === &lt;!--T:113--&gt;


[[Image:Part_Booleans.svg]]
[[Image:Part_Box.svg]]
[[Image:Part_Chamfer.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:Part_Circle_Parametric.svg]]
[[Image:Part_Common.svg]]
[[Image:Part_Cone.svg]]
[[Image:Part_CreatePrimitives.svg]]
[[Image:Part_CrossSections.svg]]
[[Image:Part_Cut.svg]]
[[Image:Part_Cylinder.svg]]
[[Image:Part_Ellipse_Parametric.svg]]
[[Image:Part_Export.svg]]
[[Image:Part_Extrude.svg]]
[[Image:PartFeature.svg]]
[[Image:Part_Fillet.svg]]
[[Image:Part_Fuse.svg]]
[[Image:Part_Helix_Parametric.svg]]
[[Image:Part_Import.svg]]
[[Image:Part_Line_Parametric.svg]]
[[Image:Part_Loft.svg]]
[[Image:Part_Measure_Angular.svg]]
[[Image:Part_Measure_Linear.svg]]
[[Image:Part_Measure_Step_Active.svg]]
[[Image:Part_Measure_Step_Done.svg]]
[[Image:Part_Measure_Toggle_3d.svg]]
[[Image:Part_Measure_Toggle_Delta.svg]]
[[Image:Part_Mirror.svg]]
[[Image:Part_Offset.svg]]
[[Image:Part_Point_Parametric.svg]]
[[Image:Part_Refine_Shape.svg]]
[[Image:Part_Revolve.svg]]
[[Image:Part_RuledSurface.svg]]
[[Image:Part_Section.svg]]
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Shape_from_Mesh.svg]]
[[Image:Part_ShapeInfo.svg]]
[[Image:Part_Sphere.svg]]
[[Image:Part_Spiral_Parametric.svg]]
[[Image:Part_Spline_Parametric.svg]]
[[Image:Part_Sweep.svg]]
[[Image:Part_Thickness.svg]]
[[Image:Part_Torus.svg]]
[[Image:preferences-part_design.svg]]
[[Image:Tree_Part.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Wedge.svg]]


=== From \src\Mod\PartDesign\Gui\Resources\icons\ === &lt;!--T:115--&gt;


[[Image:PartDesign_Chamfer.svg]]
[[Image:PartDesign_Draft.svg]]
[[Image:PartDesign_Fillet.svg]]
[[Image:PartDesign_Groove.svg]]
[[Image:PartDesign_Hole.svg]]
[[Image:PartDesign_InternalExternalGear.svg]]
[[Image:PartDesign_InvoluteGear.svg|64px]]
[[Image:PartDesign_LinearPattern.svg]]
[[Image:PartDesign_Mirrored.svg]]
[[Image:PartDesign_MultiTransform.svg]]
[[Image:PartDesign_Pad.svg]]
[[Image:PartDesign_Pocket.svg]]
[[Image:PartDesign_PolarPattern.svg]]
[[Image:PartDesign_Revolution.svg]]
[[Image:PartDesign_Scaled.svg]]
[[Image:Tree_PartDesign_Pad.svg]]
[[Image:Tree_PartDesign_Revolution.svg]]


=== From \src\Mod\PartDesign\WizardShaft\ === &lt;!--T:117--&gt;


[[Image:WizardShaft.svg]]


=== From \src\Mod\Plot\resources\icons === &lt;!--T:119--&gt;


[[Image:Axes.svg]]
[[Image:Grid.svg]]
[[Image:Icon.svg]]
[[Image:Labels.svg]]
[[Image:Legend.svg]]
[[Image:Positions.svg]]
[[Image:Save.svg]]
[[Image:Series.svg]]



=== From \src\Mod\Points\Gui\Resources\icons === &lt;!--T:188--&gt;


[[Image:Points_Export_Point_cloud.svg]]
[[Image:Points_Import_Point_cloud.svg]]


=== From \src\Mod\Raytracing\Gui\Resources\icons === &lt;!--T:121--&gt;


[[Image:preferences-raytracing.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_Export.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Lux.svg]]
[[Image:Raytrace_New.svg]]
[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_Part.svg]]
[[Image:Raytrace_Render.svg]]
[[Image:Raytrace_ResetCamera.svg]]



=== From \src\Mod\ReverseEngineering\Gui\Resources\icons\actions === &lt;!--T:123--&gt;


[[Image:FitSurface.svg]]


=== From \src\Mod\Robot\Gui\Resources\icons === &lt;!--T:125--&gt;

&lt;!--T:126--&gt;
The following icons have been re-sized upwards to a display width of 64 pixels:


[[Image:Robot_CreateRobot.svg|64px]]
[[Image:Robot_CreateTrajectory.svg|64px]]
[[Image:Robot_Edge2Trac.svg|64px]]
[[Image:Robot_Export.svg|64px]]
[[Image:Robot_InsertWaypoint.svg|64px]]
[[Image:Robot_InsertWaypointPre.svg|64px]]
[[Image:Robot_RestoreHomePos.svg|64px]]
[[Image:Robot_SetDefaultOrientation.svg|64px]]
[[Image:Robot_SetDefaultValues.svg|64px]]
[[Image:Robot_SetHomePos.svg|64px]]
[[Image:Robot_Simulate.svg|64px]]
[[Image:Robot_TrajectoryCompound.svg|64px]]
[[Image:Robot_TrajectoryDressUp.svg|64px]]


=== From \src\Mod\Ship\Resources\icons === &lt;!--T:128--&gt;


[[Image:Ship_AreaCurve.svg]]
[[Image:Ship_Hydrostatics.svg]]
[[Image:Ship_Instance.svg]]
[[Image:Ship_Load.svg]]
[[Image:Ship_Logo.svg|64px]]
[[Image:Ship_Module.svg]]
[[Image:Ship_OutlineDraw.svg]]


=== From \src\Mod\Sketcher\Gui\Resources\icons === &lt;!--T:130--&gt;


[[Image:Constraint_Concentric.svg]]
[[Image:Constraint_EqualLength.svg]]
[[Image:Constraint_ExternalAngle.svg]]
[[Image:Constraint_Horizontal.svg]]
[[Image:Constraint_HorizontalDistance.svg]]
[[Image:Constraint_InternalAngle.svg]]
[[Image:Constraint_Length.svg]]
[[Image:Constraint_Parallel.svg]]
[[Image:Constraint_Perpendicular.svg]]
[[Image:Constraint_PointOnEnd.svg]]
[[Image:Constraint_PointOnMidPoint.svg]]
[[Image:Constraint_PointOnObject.svg]]
[[Image:Constraint_PointOnPoint.svg]]
[[Image:Constraint_PointOnStart.svg]]
[[Image:Constraint_PointToObject.svg]]
[[Image:Constraint_Radius.svg]]
[[Image:Constraint_Symmetric.svg]]
[[Image:Constraint_Tangent.svg]]
[[Image:Constraint_TangentToEnd.svg]]
[[Image:Constraint_TangentToStart.svg]]
[[Image:Constraint_Vertical.svg]]
[[Image:Constraint_VerticalDistance.svg]]
[[Image:Sketcher_AlterConstruction.svg]]
[[Image:Sketcher_AlterFillet.svg]]
[[Image:Sketcher_CloseShape.svg]]
[[Image:Sketcher_ConnectLines.svg]]
[[Image:Sketcher_ConstrainCoincident.svg]]
[[Image:Sketcher_ConstrainDistance.svg]]
[[Image:Sketcher_ConstrainHorizontal.svg]]
[[Image:Sketcher_ConstrainLock.svg]]
[[Image:Sketcher_ConstrainParallel.svg]]
[[Image:Sketcher_ConstrainVertical.svg]]
[[Image:Sketcher_Create3PointArc.svg]]
[[Image:Sketcher_Create3PointCircle.svg]]
[[Image:Sketcher_CreateArc.svg]]
[[Image:Sketcher_CreateCircle.svg]]
[[Image:Sketcher_CreateFillet.svg]]
[[Image:Sketcher_CreateHeptagon.svg]]
[[Image:Sketcher_CreateHexagon.svg]]
[[Image:Sketcher_CreateLine.svg]]
[[Image:Sketcher_CreateOctagon.svg]]
[[Image:Sketcher_CreatePentagon.svg]]
[[Image:Sketcher_CreatePoint.svg]]
[[Image:Sketcher_CreatePolyline.svg]]
[[Image:Sketcher_CreateRectangle.svg]]
[[Image:Sketcher_CreateSlot.svg]]
[[Image:Sketcher_CreateSquare.svg]]
[[Image:Sketcher_CreateText.svg]]
[[Image:Sketcher_CreateTriangle.svg]]
[[Image:Sketcher_DraftLine.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_Element_Arc_Edge.svg]]
[[Image:Sketcher_Element_Arc_EndPoint.svg]]
[[Image:Sketcher_Element_Arc_MidPoint.svg]]
[[Image:Sketcher_Element_Arc_StartingPoint.svg]]
[[Image:Sketcher_Element_Circle_Edge.svg]]
[[Image:Sketcher_Element_Circle_MidPoint.svg]]
[[Image:Sketcher_Element_Line_Edge.svg]]
[[Image:Sketcher_Element_Line_EndPoint.svg]]
[[Image:Sketcher_Element_Line_StartingPoint.svg]]
[[Image:Sketcher_Element_Point_StartingPoint.svg]]
[[Image:Sketcher_Element_SelectionTypeInvalid.svg]]
[[Image:Sketcher_External.svg]]
[[Image:Sketcher_LeaveSketch.svg]]
[[Image:Sketcher_MapSketch.svg]]
[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_ProfilesHexagon1.svg]]
[[Image:Sketcher_SelectConstraints.svg]]
[[Image:Sketcher_SelectHorizontalAxis.svg]]
[[Image:Sketcher_SelectOrigin.svg]]
[[Image:Sketcher_SelectVerticalAxis.svg]]
[[Image:Sketcher_Sketch.svg]]
[[Image:Sketcher_Trimming.svg]]
[[Image:Sketcher_ViewSketch.svg]]


=== From \src\Mod\Sketcher\Gui\Resources\icons\small === &lt;!--T:132--&gt;


&lt;!--T:161--&gt;
Files in this folder cannot be uploaded due to the file extension.


=== From \src\Mod\Spreadsheet\Resources\icons === &lt;!--T:134--&gt;


[[Image:Spreadsheet.svg]]
[[Image:SpreadsheetController.svg]]
[[Image:SpreadsheetPropertyController.svg]]


=== From \src\Mod\Start\StartPage === &lt;!--T:136--&gt;


[[Image:ArchDesign.png]]
[[Image:Blank.png]]
[[Image:Complete.png]]
[[Image:freecad-doc.png]]
[[Image:mesh.png]]
[[Image:PartDesign.png]]
[[Image:ship.png]]
[[Image:web.png]]



&lt;!--T:138--&gt;
The following images have been re-sized to a display width of 600 pixels:


[[Image:ArchExample.png|600px]]

[[Image:Background.jpg|600px]]

[[Image:Banner.jpeg|600px]]

[[Image:complete.jpg|600px]]

[[Image:PartDesignExample.png|600px]]

[[Image:ShipExample.png|600px]]


=== From \src\Mod\Web\Gui\Resources\icons\actions === &lt;!--T:150--&gt;


[[Image:web-browser.svg]]
[[Image:web-home.svg]]
[[Image:web-next.svg]]
[[Image:web-previous.svg]]
[[Image:web-refresh.svg]]
[[Image:web-stop.svg]]
[[Image:web-zoom-in.svg]]
[[Image:web-zoom-out.svg]]


== Guidelines == &lt;!--T:152--&gt;

=== General guidelines === &lt;!--T:153--&gt;

&lt;!--T:154--&gt;
We try to maintain in FreeCAD a certain graphical consistency between all parts of the application. Therefore, all icons that are designed for the application should ideally conform to the following rules:

&lt;!--T:155--&gt;
* Be in SVG format, drawn with vectorial objects (no bitmaps) at 64x64px. We recommend using [http://www.inkscape.org inkscape] for designing icons
** To access the Tango palette in Inkscape, click the arrow located on the bar colors below and to the right and choose &quot;Tango icons&quot;
* Be scalable to smaller sizes (32x32px and 16x16px) and still look nice
* Follow as much as possible the [http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines Tango Icon Theme Guidelines.]
* Respect users with dark desktop themes or special high-contrast desktop colors. Your icon must look nice on a dark background
* Follow the color codes below, which are used throughout FreeCAD.

&lt;!--T:156--&gt;
See the [[Gui Command]] page for more information about how FreeCAD commands and icons are formatted.

=== Color chart === &lt;!--T:157--&gt;


[[Image:Colorchart.png]]


&lt;!--T:162--&gt;
[[Category:Developer]]



</text>
    </revision>
  </page>
  <page>
    <title>Artwork quick61 rework</title>
    <ns>0</ns>
    <id>44115</id>
    <revision>
      <id>116384</id>
      <parentid>116383</parentid>
      <timestamp>2014-10-28T06:53:05Z</timestamp>
      <contributor>
        <username>Quick61</username>
        <id>3300</id>
      </contributor>
      <sha1>l6ba3syj9yk6x1jextiwciastxnctq4</sha1>
      <text xml:space="preserve" bytes="52986">{{VeryImportantMessage|SAMPLE ONLY - Not For Release - Do not Translate''}}

&lt;!--T:190--&gt;
Here is the artwork that has been created for FreeCAD. Feel free to reuse in other applications. If you would like to contribute with icons, please read the guidelines at the bottom of this page first.

== Application Icons == &lt;!--T:191--&gt; 

=== The FreeCAD Icon === &lt;!--T:192--&gt; 
[[Image:Freecad.svg]]

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===File Menu and Toolbar Icons=== &lt;!--T:193--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Document-new.svg]]
[[Image:Document-open.svg]]
[[Image:Document-save.svg]]
[[Image:Document-save-as.svg]]
[[Image:Document-print.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-paste.svg]]
[[Image:Edit-undo.svg]]
[[Image:Edit-redo.svg]]
[[Image:View-refresh.svg]]
[[Image:WhatsThis.svg]]
[[Image:system-log-out.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Edit Menu and Toolbar Icons=== &lt;!--T:194--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Edit-undo.svg]]
[[Image:Edit-redo.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-paste.svg]]
[[Image:View-refresh.svg]]
[[Image:Edit-select-box.svg]]
[[Image:Edit-select-all.svg]]
[[Image:Std_Edit.svg]]
[[Image:Preferences-general.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Edit &gt; Preferences Sub-menu Icons=== &lt;!--T:195--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Preferences-system.svg]]
[[Image:Preferences-general.svg]]
[[Image:Preferences-display.svg]]
[[Image:Preferences-arch.svg]]
[[Image:Preferences-draft.svg]]
[[Image:preferences-import-export.svg]]
[[Image:preferences-openscad.svg]]
[[Image:preferences-part_design.svg]]
[[Image:preferences-raytracing.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View Menu Icons=== &lt;!--T:196--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Window-new.svg]]
[[Image:View-isometric.svg]]
[[Image:View-perspective.svg]]
[[Image:Std_Tool1.svg]]
[[Image:View-measurement.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Standard Views Sub-menu and Toolbar Icons=== &lt;!--T:197--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:View-zoom-all.svg]]
[[Image:View-zoom-selection.svg]]
[[Image:View-axometric.svg]]
[[Image:View-front.svg]]
[[Image:View-top.svg]]
[[Image:View-right.svg]]
[[Image:View-rear.svg]]
[[Image:View-bottom.svg]]
[[Image:View-left.svg]]
[[Image:View-rotate-left.svg]]
[[Image:View-rotate-right.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Draw Style Sub-menu and Toolbar Icons=== &lt;!--T:198--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:DrawStyleAsIs.svg]]
[[Image:DrawStyleFlatLines.svg]]
[[Image:DrawStyleShaded.svg]]
[[Image:DrawStyleWireFrame.svg]]
[[Image:DrawStylePoints.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Stereo Sub-menu Icons=== &lt;!--T:199--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Std_Tool1.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Zoom Sub-menu Icons=== &lt;!--T:200--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:View-zoom-in.svg]]
[[Image:View-zoom-out.svg]]
[[Image:View-zoom-border.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Visibility Sub-menu Icons=== &lt;!--T:201--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:view-unselectable.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Part_Measure_Clear_All.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===View &gt; Workbench Sub-menu Icons=== &lt;!--T:202--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Workbench Arch.svg]]
[[Image:Workbench Complete.svg|64px]] 
[[Image:Workbench_Draft.svg]]
[[Image:Workbench_Drawing.svg]]
[[Image:Workbench_Image.svg]]
[[Image:Workbench_Mesh.svg]]
[[Image:Workbench_Part.svg]]
[[Image:Workbench_PartDesign.svg]]
[[Image:Workbench_Raytracing.svg]]
[[Image:Workbench_Robot.svg]]
[[Image:Workbench_Sketcher.svg]]
[[Image:Workbench_Start.svg]]
[[Image:Workbench_Web.svg]]  
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Tools Menu Icons=== &lt;!--T:203--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Camera-photo.svg]]
[[Image:Applications-accessories.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Macro Menu and Toolbar Icons=== &lt;!--T:204--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Macro-record.svg]]
[[Image:Macro-stop.svg]]
[[Image:Std_DlgMacroExecuteDirect.svg]]
[[Image:Macro-execute.svg]]
[[Image:Debug-start.svg]]
[[Image:Debug-stop.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Windows Menu Icons=== &lt;!--T:205--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Std_WindowNext.svg]]
[[Image:Std_WindowPrev.svg]]
[[Image:Std_WindowTileVer.svg]]
[[Image:Std_WindowCascade.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Help Menu Icons=== &lt;!--T:206--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Help-browser.svg]]
[[Image:Internet-web-browser.svg]]
[[Image:Applications-python.svg]]
[[Image:Freecad.svg]]
[[Image:WhatsThis.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Tree Icons, Overall GUI=== &lt;!--T:207--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Document.svg]]
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]]
[[Image:Tree_Python.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Arch WB: Architecture Menu and Arch Tools Toolbar Icons=== &lt;!--T:208--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Arch_Wall.svg]]
[[Image:Arch_Structure.svg]]
[[Image:Arch_Rebar.svg]]
[[Image:Arch_Floor.svg]]
[[Image:Arch_Building.svg]]
[[Image:Arch_Site.svg]]
[[Image:Arch_Window.svg]]
[[Image:Arch_Roof.svg]]
[[Image:Arch_Axis.svg]]
[[Image:Arch_SectionPlane.svg]]
[[Image:Arch_Space.svg]]
[[Image:Arch_Stairs.svg]]
[[Image:Arch_Panel.svg]]
[[Image:Arch_Frame.svg]]
[[Image:Arch_Add.svg]]
[[Image:Arch_Remove.svg]]
[[Image:Arch_Survey.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Arch WB: Architecture &gt; Utilities Sub-menu Icons=== &lt;!--T:209--&gt; 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Arch_SplitMesh.svg]]
[[Image:Arch_MeshToShape.svg]]
[[Image:Arch_SelectNonManifold.svg]]
[[Image:Arch_RemoveShape.svg]]
[[Image:Arch_CloseHoles.svg]]
[[Image:Arch_MergeWalls.svg]]
[[Image:Arch_Check.svg]]
[[Image:IFC.svg]]
[[Image:Arch_ToggleIfcBrepFlag.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Arch WB: Tree Icons=== &lt;!--T:210--&gt; 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Arch_Axis_Tree.svg]]
[[Image:Arch_Building_Tree.svg]]
[[Image:Arch_Cell_Tree.svg]]
[[Image:Arch_Floor_Tree.svg]]
[[Image:Arch_Frame_Tree.svg]]
[[Image:Arch_Panel_Tree.svg]]
[[Image:Arch_Rebar_Tree.svg]]
[[Image:Arch_Roof_Tree.svg]]
[[Image:Arch_SectionPlane_Tree.svg]]
[[Image:Arch_Site_Tree.svg]]
[[Image:Arch_Space_Tree.svg]]
[[Image:Arch_Stairs_Tree.svg]]
[[Image:Arch_StructuralSystem_Tree.svg]]
[[Image:Arch_Structure_Tree.svg]]
[[Image:Arch_Wall_Tree.svg]]
[[Image:Arch_Wall_Tree_Assembly.svg]]
[[Image:Arch_Window_Tree.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_Line.svg]]
[[Image:Draft_Polyline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_BezCurve.svg]]


[[Image:Draft_Move.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_PutOnSheet.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Shape2DView.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Clone.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft &gt; Utilities Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_VisGroup.svg]]
[[Image:Draft_Heal.svg]]
[[Image:Draft_FlipDimension.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_Apply.svg]]
[[Image:Draft_SwitchMode.svg]]
[[Image:Draft_AddToGroup.svg]]
[[Image:Draft_SelectGroup.svg]]
[[Image:Draft_SelectPlane.svg]]
[[Image:Snap_Grid.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft &gt; Wire Tools Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_Rotate.svg]]
[[Image:Draft_Finish.svg]]
[[Image:Draft_Lock.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft &gt; Snapping Sub-menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Snap_Lock.svg]]
[[Image:Snap_Midpoint.svg]]
[[Image:Snap_Perpendicular.svg]]
[[Image:Snap_Grid.svg]]
[[Image:Snap_Intersection.svg]]
[[Image:Snap_Parallel.svg]]
[[Image:Snap_Endpoint.svg]]
[[Image:Snap_Angle.svg]]
[[Image:Snap_Center.svg]]
[[Image:Snap_Extension.svg]]
[[Image:Snap_Near.svg]]
[[Image:Snap_Ortho.svg]]
[[Image:Snap_Dimensions.svg]]
[[Image:Snap_WorkingPlane.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_Line.svg]]
[[Image:Draft_Polyline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_BezCurve.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Draft Modification Tools Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_Move.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_PutOnSheet.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Shape2DView.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Clone.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Command Bar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_SelectPlane.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Apply.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Draft WB: Tree Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_Draft.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Drawing WB: Toolbar and Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:document-new.svg]]
[[Image:drawing-landscape.svg]]
[[Image:drawing-landscape-new.svg]]
[[Image:drawing-landscape-A0.svg]]
[[Image:drawing-landscape-A1.svg]]
[[Image:drawing-landscape-A2.svg]]
[[Image:drawing-landscape-A3.svg]]
[[Image:drawing-landscape-A4.svg]]
[[Image:drawing-portrait-A4.svg]]
[[Image:drawing-view.svg]]
[[Image:drawing-orthoviews.svg]]
[[Image:drawing-openbrowser.svg]]
[[Image:drawing-annotation.svg]]
[[Image:drawing-clip.svg]]
[[Image:drawing-symbol.svg]]
[[Image:Document-save.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===FEM WB: FEM Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Fem_FemMesh.svg]]
[[Image:Fem_Material.svg]]
[[Image:Fem_Analysis.svg]]
[[Image:Fem_NewAnalysis.svg]]
[[Image:Fem_FemMesh_createnodebypoly.svg]]
[[Image:Fem_ConstraintFixed.svg]]
[[Image:Fem_ConstraintForce.svg]]
[[Image:Fem_ConstraintBearing.svg]]
[[Image:Fem_ConstraintGear.svg]]
[[Image:Fem_ConstraintPulley.svg]]
[[Image:Fem_Result.svg]]
[[Image:Fem_ResultDisplacement.svg]]
[[Image:Fem_ResultStress.svg]]
[[Image:Fem_AddFemMesh.svg]]
[[Image:Fem_AddMaterial.svg]]
[[Image:Fem_AddPart.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Image WB: Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Image-import.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Inspection WB: Inspection Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:inspect_pipette.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Meshes WB: Meshes Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Mesh_Import_Mesh.svg]]
[[Image:Mesh_Export_Mesh.svg]]
[[Image:Mesh_Mesh_from_Shape.svg]]
[[Image:Mesh_Harmonize_Normals.svg]]
[[Image:Mesh_Flip_Normals.svg]]
[[Image:mesh_boundary.svg]]
[[Image:Mesh_Remove_Components.svg]]
[[Image:Mesh_Regular_Solid.svg]]
[[Image:Mesh_cut.svg]]
[[Image:Mesh_Curvature_Plot.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Meshes WB: Analyze Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:mesh_pipette.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Meshes WB: Regular Solids Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Mesh_Cone.svg]]
[[Image:Mesh_Cube.svg]]
[[Image:Mesh_Cylinder.svg]]
[[Image:Mesh_Ellipsoid.svg]]
[[Image:Mesh_Sphere.svg]]
[[Image:Mesh_Torus.svg]]
[[Image:MeshFace.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Meshes WB: Tree Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Tree_Mesh.svg]]
[[Image:Mesh_Tree_Curvature_Plot.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===OpenSCAD WB: OpenSCAD Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:OpenSCAD_AddOpenSCADElement.svg]]
[[Image:OpenSCAD_ReplaceObject.svg]]
[[Image:OpenSCAD_RemoveSubtree.svg]]
[[Image:OpenSCAD_Explode_Group.svg]]
[[Image:OpenSCAD_RefineShapeFeature.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:OpenSCAD_IncreaseToleranceFeature.svg]]
[[Image:Part_CreatePrimitives.svg]]
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Cut.svg]]
[[Image:Part_Fuse.svg]]
[[Image:Part_Common.svg]]
[[Image:Python.svg]]

[[Image:OpenSCAD_ColorCodeShape.svg]]
[[Image:OpenSCAD_Hull.svg]]
[[Image:OpenSCAD_MeshBooleans.svg]]
[[Image:OpenSCAD_Minkowski.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Part Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Import.svg]]
[[Image:Part_Export.svg]]
[[Image:Part_CreatePrimitives.svg]] 
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Shape_from_Mesh.svg]]
[[Image:Part_Refine_Shape.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:Part_CrossSections.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Part &gt; Part Tools Menu Area and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Extrude.svg]]
[[Image:Part_Revolve.svg]] 
[[Image:Part_Mirror.svg]]
[[Image:Part_Fillet.svg]]
[[Image:Part_Chamfer.svg]]
[[Image:Part_RuledSurface.svg]] 
[[Image:Part_Loft.svg]]
[[Image:Part_Sweep.svg]] 
[[Image:Part_Offset.svg]]
[[Image:Part_Thickness.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Part &gt; Primitives Sub-menu, and Solids Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Box.svg]]
[[Image:Part_Cylinder.svg]]
[[Image:Part_Sphere.svg]]
[[Image:Part_Cone.svg]]
[[Image:Part_Torus.svg]]
[[Image:Part_CreatePrimitives.svg]] 
[[Image:Part_Shapebuilder.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Part &gt; Create Parametric Primitives Sub-menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Wedge.svg]]
[[Image:Part_Helix_Parametric.svg]]
[[Image:Part_Spiral_Parametric.svg]]
[[Image:Part_Circle_Parametric.svg]]
[[Image:Part_Ellipse_Parametric.svg]]
[[Image:Part_Point_Parametric.svg]]
[[Image:Part_Line_Parametric.svg]]
[[Image:Part_Polygon_Parametric.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Part &gt; Part Boolean Sub-menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Booleans.svg]]
[[Image:Part_Cut.svg]] 
[[Image:Part_Fuse.svg]]
[[Image:Part_Common.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Measure Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Measure_Linear.svg]]
[[Image:Part_Measure_Angular.svg]]
[[Image:Part_Measure_Clear_All.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Part_Measure_Toggle_3d.svg]]
[[Image:Part_Measure_Toggle_Delta.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part WB: Tree Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Tree_Part.svg]]
[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Wedge.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Part Design WB: Part Design Menu or Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_LeaveSketch.svg]] 
[[Image:Sketcher_ViewSketch.svg]] 
[[Image:Sketcher_MapSketch.svg]] 
[[Image:PartDesign_Pad.svg]] 
[[Image:PartDesign_Pocket.svg]] 
[[Image:PartDesign_Revolve.svg]] 
[[Image:PartDesign_Groove.svg]] 
[[Image:PartDesign_Fillet.svg]] 
[[Image:PartDesign_Chamfer.svg]] 
[[Image:PartDesign_Draft.svg]] 
[[Image:PartDesign_Mirrored.svg]] 
[[Image:PartDesign_LinearPattern.svg]] 
[[Image:PartDesign_PolarPattern.svg]] 
[[Image:PartDesign_MultiTransform.svg]]
[[Image:PartDesign_InternalExternalGear.svg]]
[[Image:WizardShaft.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Plot WB: Plot Menu or Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Save.svg ]]
[[Image:Axes.svg]]
[[Image:Series.svg]]
[[Image:Grid.svg]]
[[Image:Legend.svg]]
[[Image:Labels.svg]]
[[Image:Positions.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Points WB: Points Toolbar and Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Points_Import_Point_cloud.svg]]
[[Image:Points_Export_Point_cloud.svg]]
[[Image:PolygonPick.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Points WB: Points &gt; Test Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Test1.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Raytracing WB: Raytracing Menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_ResetCamera.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Render.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Raytracing WB: Raytracing &gt; Utilities Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Raytrace_Export.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_Part.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Raytracing WB: Raytracing &gt; New POV-Ray Project Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Raytrace_New.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Raytracing WB: Raytracing &gt; New LuxRender Project Sub-menu Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Raytrace_Lux.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Raytracing WB: Raytracing Toolbar Icons Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Raytrace_New.svg]]
[[Image:Raytrace_Lux.svg]]
[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Render.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Reverse Engineering WB: REEN Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:FitSurface.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Robot WB: Robot Menu and Toolbar Icons=== 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Robot_CreateRobot.svg|64px]]
[[Image:Robot_CreateTrajectory.svg|64px]]
[[Image:Robot_InsertWaypoint.svg|64px]]
[[Image:Robot_InsertWaypointPre.svg|64px]]
[[Image:Robot_Edge2Trac.svg|64px]]
[[Image:Robot_TrajectoryDressUp.svg|64px]]
[[Image:Robot_TrajectoryCompound.svg|64px]]
[[Image:Robot_SetHomePos.svg|64px]]
[[Image:Robot_RestoreHomePos.svg|64px]]
[[Image:Robot_Simulate.svg|64px]]
[[Image:Robot_Export.svg|64px]]
[[Image:Robot_SetDefaultOrientation.svg|64px]]
[[Image:Robot_SetDefaultValues.svg|64px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Ship WB: Ship Design Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Ship_Load.svg]]
[[Image:Ship_Module.svg]]
[[Image:Ship_OutlineDraw.svg]]
[[Image:Ship_AreaCurve.svg]]
[[Image:Ship_Hydrostatics.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Ship WB: Ship Weights Menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:FreeCAD-Ship-WeightIco.png|64px]]
[[Image:FreeCAD-Ship-TankIco.png|64px]]
[[Image:HydrostaticsIco.png|64px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher WB: Sketcher Menu and Sketch Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_LeaveSketch.svg]] 
[[Image:Sketcher_ViewSketch.svg]] 
[[Image:Sketcher_MapSketch.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher WB: Sketch &gt; Sketcher Geometries Sub-menu and Toolbar Icons===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Sketcher_Point.svg]]
[[Image:Sketcher_Line.svg]]
[[Image:Sketcher_Arc.svg]] 
[[Image:Sketcher_Create3PointArc.svg]]
[[Image:Sketcher_Circle.svg]]
[[Image:Sketcher_Create3PointCircle.svg]]
[[Image:Sketcher_Polyline.svg]] 
[[Image:Sketcher_Rectangle.svg]]
[[Image:Sketcher_CreateTriangle.svg]]
[[Image:Sketcher_CreateSquare.svg]]
[[Image:Sketcher_CreatePentagon.svg]]
[[Image:Sketcher_CreateHexagon.svg]]
[[Image:Sketcher_CreateHeptagon.svg]]
[[Image:Sketcher_CreateOctagon.svg]]
[[Image:Sketcher_CreateSlot.svg]]
[[Image:Sketcher_CreateFillet.svg]] 
[[Image:Sketcher_Trimming.svg]] 
[[Image:Sketcher_External.svg]] 
[[Image:Sketcher_AlterConstruction.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher WB: Sketch &gt; Sketcher Constraints Sub-menu and Toolbar Icons=== &lt;!--T:211--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Constraint_PointOnPoint.svg]]
[[Image:Constraint_PointOnObject.svg]]
[[Image:Constraint_Vertical.svg]]
[[Image:Constraint_Horizontal.svg]]
[[Image:Constraint_Parallel.svg]]
[[Image:Constraint_Perpendicular.svg]]
[[Image:Constraint_Tangent.svg]]
[[Image:Constraint_EqualLength.svg]]
[[Image:Constraint_Symmetric.svg]]
[[Image:Constraint_Lock.svg]]
[[Image:Constraint_HorizontalDistance.svg]]
[[Image:Constraint_VerticalDistance.svg]]
[[Image:Constraint_Length.svg]]
[[Image:Constraint_Radius.svg]]
[[Image:Constraint_InternalAngle.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher Constraints Icons Not Used=== &lt;!--T:69--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Constraint_Concentric.svg]]
[[Image:Constraint_ExternalAngle.svg]]
[[Image:Constraint_PointOnEnd.svg]]
[[Image:Constraint_PointOnMidPoint.svg]]
[[Image:Constraint_PointOnStart.svg]]
[[Image:Constraint_PointToObject.svg]]
[[Image:Constraint_TangentToEnd.svg]]
[[Image:Constraint_TangentToStart.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher WB: Sketch &gt; Sketcher Accelerators Sub-menu and Toolbar Icons=== &lt;!--T:164--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Sketcher_CloseShape.svg]]
[[Image:Sketcher_ConnectLines.svg]]
[[Image:Sketcher_SelectConstraints.svg]]
[[Image:Sketcher_SelectOrigin.svg]]
[[Image:Sketcher_SelectVerticalAxis.svg]]
[[Image:Sketcher_SelectHorizontalAxis.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Sketcher WB: Combo View &gt; Elements Icons=== &lt;!--T:166--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Sketcher_Element_Point_StartingPoint.svg]]
[[Image:Sketcher_Element_Line_StartingPoint.svg]]
[[Image:Sketcher_Element_Line_EndPoint.svg]]
[[Image:Sketcher_Element_Line_Edge.svg]]
[[Image:Sketcher_Element_Circle_MidPoint.svg]]
[[Image:Sketcher_Element_Circle_Edge.svg]]
[[Image:Sketcher_Element_Arc_MidPoint.svg]]
[[Image:Sketcher_Element_Arc_StartingPoint.svg]]
[[Image:Sketcher_Element_Arc_EndPoint.svg]]
[[Image:Sketcher_Element_Arc_Edge.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Tree Icons=== &lt;!--T:168--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Tree_Part.svg]]
[[Image:Tree_Mesh.svg]] 
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]] 
[[Image:Tree_Python.svg]]
[[Image:Tree_Selectable.svg]] 
[[Image:Tree_Unselectable.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
===Other/General Icons=== &lt;!--T:73--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Emot icons === &lt;!--T:74--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[File:FreeCAD05_Tango_Face-angel.svg]]
[[File:FreeCAD05_Tango_Face-blush.svg]]
[[File:FreeCAD05_Tango_Face-crying.svg]]
[[File:FreeCAD05_Tango_Face-devil-grin.svg]]
[[File:FreeCAD05_Tango_Face-glasses.svg]]
[[File:FreeCAD05_Tango_Face-grin.svg]]
[[File:FreeCAD05_Tango_Face-grin-braces.svg]]
[[File:FreeCAD05_Tango_Face-kiss.svg]]
[[File:FreeCAD05_Tango_Face-plain.svg]]
[[File:FreeCAD05_Tango_Face-sad.svg]]
[[File:FreeCAD05_Tango_Face-smile.svg]]
[[File:FreeCAD05_Tango_Face-smile-big.svg]]
[[File:FreeCAD05_Tango_Face-surprise.svg]]
[[File:FreeCAD05_Tango_Face-wink.svg]]


[[File:FreeCAD05_Tango_Anaglyph.svg]]
[[File:FreeCAD05_Tango_Applications-games.svg]]
[[File:FreeCAD05_Tango_Applications-ristretto.svg]]
[[File:FreeCAD05_Tango_Dialog-error.svg]]
[[File:FreeCAD05_Tango_Dialog-warning.svg]]
[[File:FreeCAD05_Tango_Measure.svg]]
[[File:FreeCAD05_Tango_Process-stop.svg]]
[[File:FreeCAD05_Tango_Text-x-python.svg]]
[[File:FreeCAD05_Tango_Camera-photo.svg]]
[[File:FreeCAD05_Tango_Preferences-system.svg]]
[[File:FreeCAD05_Tango_Camera-video.svg]]
[[File:FreeCAD05_Tango_Applications-graphics.svg]]
[[File:FC_Christmas.svg]]
&lt;/div&gt;
&lt;/div&gt;

== Splash Screens == &lt;!--T:77--&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Former and Current Splash Screens === &lt;!--T:77--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Splashscreen09.png]]

[[Image:Splashscreen010.png]]

[[Image:Splash011.png]]

[[Image:Splashscreen012.png]]

[[Image:Splash013.jpg]]

[[Image:Freecadsplash14.png]]

[[Image:Freecadsplash15.png]]
&lt;/div&gt;
&lt;/div&gt;
== FreeCAD Icons by their location in source code == &lt;!--T:84--&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Gui\Icons === &lt;!--T:86--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Accessories-text-editor.svg]]
[[Image:Add.svg]]
[[Image:Applications-accessories.svg]]
[[Image:Applications-python.svg]]
[[Image:Background.png|64px]]
[[Image:Breakpoint.svg]]
[[Image:Bulb.svg]]
[[Image:Button_down.svg]]
[[Image:Button_invalid.svg|64px]]
[[Image:Button_left.svg]]
[[Image:Button_right.svg]]
[[Image:Button_up.svg]]
[[Image:Button_valid.svg|64px]]
[[Image:Camera-photo.svg]]
[[Image:Debug_marker.svg]]
[[Image:Debug-start.svg]]
[[Image:Debug-stop.svg]]
[[Image:Delete.svg]]
[[Image:Document.svg]]
[[Image:Document-new.svg]]
[[Image:Document-open.svg]]
[[Image:Document-print.svg]]
[[Image:Document-properties.svg]]
[[Image:Document-save.svg]]
[[Image:Document-save-as.svg]]
[[Image:DrawStyleAsIs.svg]]
[[Image:DrawStyleFlatLines.svg]]
[[Image:DrawStylePoints.svg]]
[[Image:DrawStyleShaded.svg]]
[[Image:DrawStyleWireFrame.svg]]
[[Image:Edit_Cancel.svg]]
[[Image:Edit-copy.svg]]
[[Image:Edit-cut.svg]]
[[Image:Edit-delete.svg]]
[[Image:Edit-edit.svg]]
[[Image:Edit_OK.svg]]
[[Image:Edit-paste.svg]]
[[Image:Edit-redo.svg]]
[[Image:Edit_remove.svg]]
[[Image:Edit-select-all.svg]]
[[Image:Edit-select-box.svg]]
[[Image:Edit-undo.svg]]
[[Image:Feature.svg|64px]]
[[Image:Freecad.svg]]
[[Image:FreeCAD_Doc.png]]
[[Image:Freecadsplash15.png|64px]]
[[Image:Help-browser.svg]]
[[Image:Internet-web-browser.svg]]
[[Image:Macro-execute.svg]]
[[Image:Macro-record.svg]]
[[Image:Macro-stop.svg]]
[[Image:Material.svg]]
[[Image:Mouse_pointer.svg]]
[[Image:Part_Measure_Clear_All.svg]]
[[Image:Part_Measure_Toggle_All.svg]]
[[Image:Preferences-display.svg]]
[[Image:Preferences-general.svg]]
[[Image:preferences-import-export.svg]]
[[Image:Preferences-system.svg]]
[[Image:Process-stop.svg]]
[[Image:Spaceball_button.svg]]
[[Image:SpNav-PanLR.svg]]
[[Image:SpNav-PanUD.svg]]
[[Image:SpNav-Roll.svg]]
[[Image:SpNav-Spin.svg]]
[[Image:SpNav-Tilt.svg]]
[[Image:SpNav-Zoom.svg]]
[[Image:Std_ViewScreenShot.svg]]
[[Image:System-log-out.svg]]
[[Image:Tree_Annotation.svg]]
[[Image:Tree_Dimension.svg]]
[[Image:Tree_Python.svg]]
[[Image:Utilities-terminal.svg]]
[[Image:View-axometric.svg]]
[[Image:View-bottom.svg]]
[[Image:View-front.svg]]
[[Image:View-fullscreen.svg]]
[[Image:View-isometric.svg]]
[[Image:View-left.svg]]
[[Image:View-measurement.svg]]
[[Image:View-perspective.svg]]
[[Image:View-rear.svg]]
[[Image:View-refresh.svg]]
[[Image:View-right.svg]]
[[Image:View-rotate-left.svg]]
[[Image:View-rotate-right.svg]]
[[Image:View-top.svg]]
[[Image:View-unselectable.svg]]
[[Image:View-zoom-all.svg]]
[[Image:View-zoom-border.svg]]
[[Image:View-zoom-fit.svg]]
[[Image:View-zoom-in.svg]]
[[Image:View-zoom-out.svg]]
[[Image:View-zoom-selection.svg]]
[[Image:Window-new.svg]]

&lt;!--T:171--&gt;
The Background has been re-sized to a display width of 480 pixels:

[[Image:Background.png|480px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Gui\Icons\ClassBrowser === &lt;!--T:85--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Const_member.svg]]
[[Image:Member.svg]]
[[Image:Method.svg]]
[[Image:Property.svg]]
[[Image:Type_class.svg]]
[[Image:Type_enum.svg]]
[[Image:Type_module.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Arch\Resources\icons === &lt;!--T:89--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Arch_Add.svg]]
[[Image:Arch_Axis.svg]]
[[Image:Arch_Axis_Tree.svg]]
[[Image:Arch_Building.svg]]
[[Image:Arch_Building_Tree.svg]]
[[Image:Arch_Cell.svg]]
[[Image:Arch_Cell_Tree.svg]]
[[Image:Arch_Check.svg]]
[[Image:Arch_CloseHoles.svg]]
[[Image:Arch_Fixture.svg]]
[[Image:Arch_Floor.svg]]
[[Image:Arch_Floor_Tree.svg]]
[[Image:Arch_Frame.svg]]
[[Image:Arch_Frame_Tree.svg]]
[[Image:Arch_MergeWalls.svg]]
[[Image:Arch_MeshToShape.svg]]
[[Image:Arch_Panel.svg]]
[[Image:Arch_Panel_Tree.svg]]
[[Image:Arch_Rebar.svg]]
[[Image:Arch_Rebar_Tree.svg]]
[[Image:Arch_Remove.svg]]
[[Image:Arch_RemoveShape.svg]]
[[Image:Arch_Roof.svg]]
[[Image:Arch_Roof_Tree.svg]]
[[Image:Arch_SectionPlane.svg]]
[[Image:Arch_SectionPlane_Tree.svg]]
[[Image:Arch_SelectNonManifold.svg]]
[[Image:Arch_Site.svg]]
[[Image:Arch_Site_Tree.svg]]
[[Image:Arch_Space.svg]]
[[Image:Arch_Space_Tree.svg]]
[[Image:Arch_SplitMesh.svg]]
[[Image:Arch_Stairs.svg]]
[[Image:Arch_Stairs_Tree.svg]]
[[Image:Arch_StructuralSystem.svg]]
[[Image:Arch_StructuralSystem_Tree.svg]]
[[Image:Arch_Structure.svg]]
[[Image:Arch_Structure_Tree.svg]]
[[Image:Arch_Survey.svg]]
[[Image:Arch_ToggleIfcBrepFlag.svg]]
[[Image:Arch_Wall.svg]]
[[Image:Arch_Wall_Tree.svg]]
[[Image:Arch_Wall_Tree_Assembly.svg]]
[[Image:Arch_Window.svg]]
[[Image:Arch_Window_Tree.svg]]
[[Image:IFC.svg]]
[[Image:preferences-arch.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Arch\Resources\ui === &lt;!--T:91--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:ParametersDoorGlass.svg]]
[[Image:ParametersDoorSimple.svg]]
[[Image:ParametersWindowDouble.svg]]
[[Image:ParametersWindowFixed.svg]]
[[Image:ParametersWindowSimple.svg]]
[[Image:ParametersWindowStash.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From src\Mod\Assembly\Gui\Resources\icons\actions === &lt;!--T:93--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Axle_constraint.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Draft\Resources\Icons === &lt;!--T:174--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Draft_2DShapeView.svg]]
[[Image:Draft_AddPoint.svg]]
[[Image:Draft_AddToGroup.svg]]
[[Image:Draft_Apply.svg]]
[[Image:Draft_Arc.svg]]
[[Image:Draft_Array.svg]]
[[Image:Draft_BezCurve.svg]]
[[Image:Draft_BezSharpNode.svg]]
[[Image:Draft_BezSymNode.svg]]
[[Image:Draft_BezTanNode.svg]]
[[Image:Draft_BSpline.svg]]
[[Image:Draft_Circle.svg]]
[[Image:Draft_Clone.svg]]
[[Image:Draft_Construction.svg]]
[[Image:Draft_Cursor.svg]]
[[Image:Draft_DelPoint.svg]]
[[Image:Draft_Dimension.svg]]
[[Image:Draft_Dot.svg]]
[[Image:Draft_Downgrade.svg]]
[[Image:Draft_Draft.svg]]
[[Image:Draft_Draft2Sketch.svg]]
[[Image:Draft_Drawing.svg]]
[[Image:Draft_Edit.svg]]
[[Image:Draft_Ellipse.svg]]
[[Image:Draft_Facebinder.svg]]
[[Image:Draft_Finish.svg]]
[[Image:Draft_FlipDimension.svg]]
[[Image:Draft_Heal.svg]]
[[Image:Draft_Line.svg]]
[[Image:Draft_Lock.svg]]
[[Image:Draft_Macro.svg]]
[[Image:Draft_Move.svg]]
[[Image:Draft_Offset.svg]]
[[Image:Draft_PathArray.svg]]
[[Image:Draft_Point.svg]]
[[Image:Draft_Polygon.svg]]
[[Image:Draft_Rectangle.svg]]
[[Image:Draft_Rotate.svg]]
[[Image:Draft_Scale.svg]]
[[Image:Draft_SelectGroup.svg]]
[[Image:Draft_SelectPlane.svg]]
[[Image:Draft_ShapeString.svg]]
[[Image:Draft_Snap.svg]]
[[Image:Draft_SwitchMode.svg]]
[[Image:Draft_Text.svg]]
[[Image:Draft_Trimex.svg]]
[[Image:Draft_Upgrade.svg]]
[[Image:Draft_VisGroup.svg]]
[[Image:Draft_Wipe.svg]]
[[Image:Draft_Wire.svg]]
[[Image:Draft_WireToBSpline.svg]]
[[Image:preferences-draft.svg]]
[[Image:Snap_Angle.svg]]
[[Image:Snap_Center.svg]]
[[Image:Snap_Dimensions.svg]]
[[Image:Snap_Endpoint.svg]]
[[Image:Snap_Extension.svg]]
[[Image:Snap_Grid.svg]]
[[Image:Snap_Intersection.svg]]
[[Image:Snap_Lock.svg]]
[[Image:Snap_Midpoint.svg]]
[[Image:Snap_Near.svg]]
[[Image:Snap_Ortho.svg]]
[[Image:Snap_Parallel.svg]]
[[Image:Snap_Perpendicular.svg]]
[[Image:Snap_WorkingPlane.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Draft\Resources\Patterns === &lt;!--T:97--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:concrete.svg]]
[[Image:cross.svg]]
[[Image:line.svg]]
[[Image:simple.svg]]
[[Image:square.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Drawing\Gui\Resources\Icons === &lt;!--T:99--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Page.svg]]
[[Image:Pages.svg]]
[[Image:View.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Drawing\Gui\Resources\Icons\Actions === &lt;!--T:101--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:document-new.svg]]
[[Image:drawing-annotation.svg]]
[[Image:drawing-clip.svg]]
[[Image:drawing-landscape.svg]]
[[Image:drawing-landscape-A0.svg]]
[[Image:drawing-landscape-A1.svg]]
[[Image:drawing-landscape-A2.svg]]
[[Image:drawing-landscape-A3.svg]]
[[Image:drawing-landscape-A4.svg]]
[[Image:drawing-landscape-new.svg]]
[[Image:drawing-openbrowser.svg]]
[[Image:drawing-orthoviews.svg]]
[[Image:drawing-portrait-A4.svg]]
[[Image:drawing-symbol.svg]]
[[Image:drawing-view.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Drawing\Templates === &lt;!--T:176--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:A3_Landscape.svg|480px]]
[[Image:A3_Landscape_ISO7200.svg|480px]]
[[Image:A4_Landscape.svg|480px]]
[[Image:A4_Landscape_ISO7200.svg|480px]]
[[Image:A4_Portrait_ISO7200.svg|480px]]

&lt;!--T:178--&gt;
The following image is &quot;A4_Simple.svg&quot;:

[[Image:A4_Simple.svg|480px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Fem\Gui\Resources\Icons\Actions === &lt;!--T:103--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Fem_AddFemMesh.svg]]
[[Image:Fem_AddMaterial.svg]]
[[Image:Fem_AddPart.svg]]
[[Image:Fem_Analysis.svg]]
[[Image:Fem_ConstraintBearing.svg]]
[[Image:Fem_ConstraintFixed.svg]]
[[Image:Fem_ConstraintForce.svg]]
[[Image:Fem_ConstraintGear.svg]]
[[Image:Fem_ConstraintPulley.svg]]
[[Image:Fem_FemMesh.svg]]
[[Image:Fem_FemMesh_createnodebypoly.svg]]
[[Image:Fem_Material.svg]]
[[Image:Fem_NewAnalysis.svg]]
[[Image:Fem_Result.svg]]
[[Image:Fem_ResultDisplacement.svg]]
[[Image:Fem_ResultStress.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Image\Gui\Resources\Icons === &lt;!--T:105--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:image-import.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Mesh\Gui\Resources\Icons === &lt;!--T:107--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:mesh_boundary.svg]]
[[Image:mesh_cut.svg]]
[[Image:Tree_Mesh.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Inspect\Gui\Resources\Icons === &lt;!--T:180--&gt; 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:inspect_pipette.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Material\Gui\Resources\Icons === &lt;!--T:182--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:preview-rendered.svg]]
[[Image:preview-vector.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Mesh\Gui\Resources\Icons === &lt;!--T:184--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:mesh_boundary.svg]]
[[Image:Mesh_Curvature_Plot.svg]]
[[Image:mesh_cut.svg]]
[[Image:Mesh_Export_Mesh.svg]]
[[Image:Mesh_Flip_Normals.svg]]
[[Image:Mesh_Harmonize_Normals.svg]]
[[Image:Mesh_Import_Mesh.svg]]
[[Image:Mesh_Mesh_from_Shape.svg]]
[[Image:mesh_pipette.svg]]
[[Image:Mesh_Regular_Solid.svg]]
[[Image:Mesh_Remove_Components.svg]]
[[Image:Mesh_Tree_Curvature_Plot.svg]]
[[Image:Tree_Mesh.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Mesh\Gui\Resources\Icons\RegularSolids === &lt;!--T:186--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Mesh_Cone.svg]]
[[Image:Mesh_Cube.svg]]
[[Image:Mesh_Cylinder.svg]]
[[Image:Mesh_Ellipsoid.svg]]
[[Image:Mesh_Sphere.svg]]
[[Image:Mesh_Torus.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\MeshPart\Gui\Resources\Icons\Actions === &lt;!--T:109--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:MeshFace.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\OpenSCAD\Gui\Resources\Icons\ === &lt;!--T:111--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:OpenSCAD_AddOpenSCADElement.svg]]
[[Image:OpenSCAD_ColorCodeShape.svg]]
[[Image:OpenSCAD_Explode_Group.svg]]
[[Image:OpenSCAD_Hull.svg]]
[[Image:OpenSCAD_IncreaseToleranceFeature.svg]]
[[Image:OpenSCAD_MeshBooleans.svg]]
[[Image:OpenSCAD_Minkowski.svg]]
[[Image:OpenSCAD_RefineShapeFeature.svg]]
[[Image:OpenSCAD_RemoveSubtree.svg]]
[[Image:OpenSCAD_ReplaceObject.svg]]
[[Image:preferences-openscad.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Part\Gui\Resources\icons\ === &lt;!--T:113--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Part_Booleans.svg]]
[[Image:Part_Box.svg]]
[[Image:Part_Chamfer.svg]]
[[Image:Part_CheckGeometry.svg]]
[[Image:Part_Circle_Parametric.svg]]
[[Image:Part_Common.svg]]
[[Image:Part_Cone.svg]]
[[Image:Part_CreatePrimitives.svg]]
[[Image:Part_CrossSections.svg]]
[[Image:Part_Cut.svg]]
[[Image:Part_Cylinder.svg]]
[[Image:Part_Ellipse_Parametric.svg]]
[[Image:Part_Export.svg]]
[[Image:Part_Extrude.svg]]
[[Image:PartFeature.svg]]
[[Image:Part_Fillet.svg]]
[[Image:Part_Fuse.svg]]
[[Image:Part_Helix_Parametric.svg]]
[[Image:Part_Import.svg]]
[[Image:Part_Line_Parametric.svg]]
[[Image:Part_Loft.svg]]
[[Image:Part_Measure_Angular.svg]]
[[Image:Part_Measure_Linear.svg]]
[[Image:Part_Measure_Step_Active.svg]]
[[Image:Part_Measure_Step_Done.svg]]
[[Image:Part_Measure_Toggle_3d.svg]]
[[Image:Part_Measure_Toggle_Delta.svg]]
[[Image:Part_Mirror.svg]]
[[Image:Part_Offset.svg]]
[[Image:Part_Point_Parametric.svg]]
[[Image:Part_Refine_Shape.svg]]
[[Image:Part_Revolve.svg]]
[[Image:Part_RuledSurface.svg]]
[[Image:Part_Section.svg]]
[[Image:Part_Shapebuilder.svg]]
[[Image:Part_Shape_from_Mesh.svg]]
[[Image:Part_ShapeInfo.svg]]
[[Image:Part_Sphere.svg]]
[[Image:Part_Spiral_Parametric.svg]]
[[Image:Part_Spline_Parametric.svg]]
[[Image:Part_Sweep.svg]]
[[Image:Part_Thickness.svg]]
[[Image:Part_Torus.svg]]
[[Image:preferences-part_design.svg]]
[[Image:Tree_Part.svg]]
[[Image:Tree_Part_Box_Parametric.svg]]
[[Image:Tree_Part_Cone_Parametric.svg]]
[[Image:Tree_Part_Cylinder_Parametric.svg]]
[[Image:Tree_Part_Ellipsoid_Parametric.svg]]
[[Image:Tree_Part_Plane_Parametric.svg]]
[[Image:Tree_Part_Prism.svg]]
[[Image:Tree_Part_Sphere_Parametric.svg]]
[[Image:Tree_Part_Torus_Parametric.svg]]
[[Image:Tree_Part_Wedge.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\PartDesign\Gui\Resources\icons\ === &lt;!--T:115--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:PartDesign_Chamfer.svg]]
[[Image:PartDesign_Draft.svg]]
[[Image:PartDesign_Fillet.svg]]
[[Image:PartDesign_Groove.svg]]
[[Image:PartDesign_Hole.svg]]
[[Image:PartDesign_InternalExternalGear.svg]]
[[Image:PartDesign_InvoluteGear.svg|64px]]
[[Image:PartDesign_LinearPattern.svg]]
[[Image:PartDesign_Mirrored.svg]]
[[Image:PartDesign_MultiTransform.svg]]
[[Image:PartDesign_Pad.svg]]
[[Image:PartDesign_Pocket.svg]]
[[Image:PartDesign_PolarPattern.svg]]
[[Image:PartDesign_Revolution.svg]]
[[Image:PartDesign_Scaled.svg]]
[[Image:Tree_PartDesign_Pad.svg]]
[[Image:Tree_PartDesign_Revolution.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\PartDesign\WizardShaft\ === &lt;!--T:117--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:WizardShaft.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Plot\resources\icons === &lt;!--T:119--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Axes.svg]]
[[Image:Grid.svg]]
[[Image:Icon.svg]]
[[Image:Labels.svg]]
[[Image:Legend.svg]]
[[Image:Positions.svg]]
[[Image:Save.svg]]
[[Image:Series.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Points\Gui\Resources\icons === &lt;!--T:188--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Points_Export_Point_cloud.svg]]
[[Image:Points_Import_Point_cloud.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Raytracing\Gui\Resources\icons === &lt;!--T:121--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:preferences-raytracing.svg]]
[[Image:Raytrace_Camera.svg]]
[[Image:Raytrace_Export.svg]]
[[Image:Raytrace_ExportProject.svg]]
[[Image:Raytrace_Lux.svg]]
[[Image:Raytrace_New.svg]]
[[Image:Raytrace_NewPartSegment.svg]]
[[Image:Raytrace_Part.svg]]
[[Image:Raytrace_Render.svg]]
[[Image:Raytrace_ResetCamera.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\ReverseEngineering\Gui\Resources\icons\actions === &lt;!--T:123--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:FitSurface.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Robot\Gui\Resources\icons === &lt;!--T:125--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
&lt;!--T:126--&gt;

The following icons have been re-sized upwards to a display width of 64 pixels:

[[Image:Robot_CreateRobot.svg|64px]]
[[Image:Robot_CreateTrajectory.svg|64px]]
[[Image:Robot_Edge2Trac.svg|64px]]
[[Image:Robot_Export.svg|64px]]
[[Image:Robot_InsertWaypoint.svg|64px]]
[[Image:Robot_InsertWaypointPre.svg|64px]]
[[Image:Robot_RestoreHomePos.svg|64px]]
[[Image:Robot_SetDefaultOrientation.svg|64px]]
[[Image:Robot_SetDefaultValues.svg|64px]]
[[Image:Robot_SetHomePos.svg|64px]]
[[Image:Robot_Simulate.svg|64px]]
[[Image:Robot_TrajectoryCompound.svg|64px]]
[[Image:Robot_TrajectoryDressUp.svg|64px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Ship\Resources\icons === &lt;!--T:128--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Ship_AreaCurve.svg]]
[[Image:Ship_Hydrostatics.svg]]
[[Image:Ship_Instance.svg]]
[[Image:Ship_Load.svg]]
[[Image:Ship_Logo.svg|64px]]
[[Image:Ship_Module.svg]]
[[Image:Ship_OutlineDraw.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Sketcher\Gui\Resources\icons === &lt;!--T:130--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Constraint_Concentric.svg]]
[[Image:Constraint_EqualLength.svg]]
[[Image:Constraint_ExternalAngle.svg]]
[[Image:Constraint_Horizontal.svg]]
[[Image:Constraint_HorizontalDistance.svg]]
[[Image:Constraint_InternalAngle.svg]]
[[Image:Constraint_Length.svg]]
[[Image:Constraint_Parallel.svg]]
[[Image:Constraint_Perpendicular.svg]]
[[Image:Constraint_PointOnEnd.svg]]
[[Image:Constraint_PointOnMidPoint.svg]]
[[Image:Constraint_PointOnObject.svg]]
[[Image:Constraint_PointOnPoint.svg]]
[[Image:Constraint_PointOnStart.svg]]
[[Image:Constraint_PointToObject.svg]]
[[Image:Constraint_Radius.svg]]
[[Image:Constraint_Symmetric.svg]]
[[Image:Constraint_Tangent.svg]]
[[Image:Constraint_TangentToEnd.svg]]
[[Image:Constraint_TangentToStart.svg]]
[[Image:Constraint_Vertical.svg]]
[[Image:Constraint_VerticalDistance.svg]]
[[Image:Sketcher_AlterConstruction.svg]]
[[Image:Sketcher_AlterFillet.svg]]
[[Image:Sketcher_CloseShape.svg]]
[[Image:Sketcher_ConnectLines.svg]]
[[Image:Sketcher_ConstrainCoincident.svg]]
[[Image:Sketcher_ConstrainDistance.svg]]
[[Image:Sketcher_ConstrainHorizontal.svg]]
[[Image:Sketcher_ConstrainLock.svg]]
[[Image:Sketcher_ConstrainParallel.svg]]
[[Image:Sketcher_ConstrainVertical.svg]]
[[Image:Sketcher_Create3PointArc.svg]]
[[Image:Sketcher_Create3PointCircle.svg]]
[[Image:Sketcher_CreateArc.svg]]
[[Image:Sketcher_CreateCircle.svg]]
[[Image:Sketcher_CreateFillet.svg]]
[[Image:Sketcher_CreateHeptagon.svg]]
[[Image:Sketcher_CreateHexagon.svg]]
[[Image:Sketcher_CreateLine.svg]]
[[Image:Sketcher_CreateOctagon.svg]]
[[Image:Sketcher_CreatePentagon.svg]]
[[Image:Sketcher_CreatePoint.svg]]
[[Image:Sketcher_CreatePolyline.svg]]
[[Image:Sketcher_CreateRectangle.svg]]
[[Image:Sketcher_CreateSlot.svg]]
[[Image:Sketcher_CreateSquare.svg]]
[[Image:Sketcher_CreateText.svg]]
[[Image:Sketcher_CreateTriangle.svg]]
[[Image:Sketcher_DraftLine.svg]]
[[Image:Sketcher_EditSketch.svg]]
[[Image:Sketcher_Element_Arc_Edge.svg]]
[[Image:Sketcher_Element_Arc_EndPoint.svg]]
[[Image:Sketcher_Element_Arc_MidPoint.svg]]
[[Image:Sketcher_Element_Arc_StartingPoint.svg]]
[[Image:Sketcher_Element_Circle_Edge.svg]]
[[Image:Sketcher_Element_Circle_MidPoint.svg]]
[[Image:Sketcher_Element_Line_Edge.svg]]
[[Image:Sketcher_Element_Line_EndPoint.svg]]
[[Image:Sketcher_Element_Line_StartingPoint.svg]]
[[Image:Sketcher_Element_Point_StartingPoint.svg]]
[[Image:Sketcher_Element_SelectionTypeInvalid.svg]]
[[Image:Sketcher_External.svg]]
[[Image:Sketcher_LeaveSketch.svg]]
[[Image:Sketcher_MapSketch.svg]]
[[Image:Sketcher_NewSketch.svg]]
[[Image:Sketcher_ProfilesHexagon1.svg]]
[[Image:Sketcher_SelectConstraints.svg]]
[[Image:Sketcher_SelectHorizontalAxis.svg]]
[[Image:Sketcher_SelectOrigin.svg]]
[[Image:Sketcher_SelectVerticalAxis.svg]]
[[Image:Sketcher_Sketch.svg]]
[[Image:Sketcher_Trimming.svg]]
[[Image:Sketcher_ViewSketch.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Sketcher\Gui\Resources\icons\small === &lt;!--T:132--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

&lt;!--T:161--&gt;
Files in this folder cannot be uploaded due to the file extension.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Spreadsheet\Resources\icons === &lt;!--T:134--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Spreadsheet.svg]]
[[Image:SpreadsheetController.svg]]
[[Image:SpreadsheetPropertyController.svg]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Start\StartPage === &lt;!--T:136--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:ArchDesign.png]]
[[Image:Blank.png]]
[[Image:Complete.png]]
[[Image:freecad-doc.png]]
[[Image:mesh.png]]
[[Image:PartDesign.png]]
[[Image:ship.png]]
[[Image:web.png]]


&lt;!--T:138--&gt;
The following images have been re-sized to a display width of 600 pixels:

[[Image:ArchExample.png|600px]]

[[Image:Background.jpg|600px]]

[[Image:Banner.jpeg|600px]]

[[Image:complete.jpg|600px]]

[[Image:PartDesignExample.png|600px]]

[[Image:ShipExample.png|600px]]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== From \src\Mod\Web\Gui\Resources\icons\actions === &lt;!--T:150--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:web-browser.svg]]
[[Image:web-home.svg]]
[[Image:web-next.svg]]
[[Image:web-previous.svg]]
[[Image:web-refresh.svg]]
[[Image:web-stop.svg]]
[[Image:web-zoom-in.svg]]
[[Image:web-zoom-out.svg]]
&lt;/div&gt;
&lt;/div&gt;
== Guidelines == &lt;!--T:152--&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== General guidelines === &lt;!--T:153--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

&lt;!--T:154--&gt;
We try to maintain in FreeCAD a certain graphical consistency between all parts of the application. Therefore, all icons that are designed for the application should ideally conform to the following rules:

&lt;!--T:155--&gt;
* Be in SVG format, drawn with vectorial objects (no bitmaps) at 64x64px. We recommend using [http://www.inkscape.org inkscape] for designing icons
** To access the Tango palette in Inkscape, click the arrow located on the bar colors below and to the right and choose &quot;Tango icons&quot;
* Be scalable to smaller sizes (32x32px and 16x16px) and still look nice
* Follow as much as possible the [http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines Tango Icon Theme Guidelines.]
* Respect users with dark desktop themes or special high-contrast desktop colors. Your icon must look nice on a dark background
* Follow the color codes below, which are used throughout FreeCAD.

&lt;!--T:156--&gt;
See the [[Gui Command]] page for more information about how FreeCAD commands and icons are formatted.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Color chart === &lt;!--T:157--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

[[Image:Colorchart.png]]
&lt;/div&gt;
&lt;/div&gt;

&lt;!--T:162--&gt;
[[Category:Developer]]</text>
    </revision>
  </page>
  <page>
    <title>Assembly Basic Tutorial</title>
    <ns>0</ns>
    <id>10829</id>
    <revision>
      <id>108869</id>
      <parentid>64510</parentid>
      <timestamp>2014-09-11T00:19:05Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Removed the Tutorials category tag. Will link the tutorial from the Assembly project wiki page.</comment>
      <sha1>fy27g59o43qock1n9ctrdsupbjcuu2x</sha1>
      <text xml:space="preserve" bytes="12318">{{VeryImportantMessage|'''This tutorial is for the development version of FreeCAD. Compile the jriegel/dev-assembly branch from here: http://git.code.sf.net/p/free-cad/code'''}}

This tutorial shall give some insides in the current assembly workflow while providing theoretical background of the used design. Goal is to achieve a understanding of the assembly workbench's working, it's structure and how to use it. 

This workbench is in an early development stage, therefore you will experience inconsistent behavior and all kinds of errors/crashs. Please report reproducible problems to the [[http://forum.freecadweb.org/viewforum.php?f=20&amp;sid=ae640f5baed4980a960d27d3dc8b6de0 assembly sub-forum]] or the [[http://www.freecadweb.org/tracker/main_page.php mantis bug tracker]]. 
&lt;br clear=all&gt;

== How to move things: Coordinate Systems ==

The goal of an assembly workbench is to move parts around. It's therefore obvious that there needs to be a way to achieve this transformation of parts, and this part of the introduction is about this basic functionality.

In FreeCAD every object in 3D space has it's own coordinate system. This local system is set in relation to it's parent system by a transformation, its placement. The object's placement defines how the local geometry needs to be translated and rotated to be expressed in the parents system. Hence if you move a part by editing its placement property, you don't change the part, only the transformation of its coordinate system into the parent system. Imagine a simple box created in the Part workbench. Once created, the length parameter changes the box's dimension in the local x direction. As the placement is empty, it's also the global x direction. If you rotate the part by setting a rotation axis and an angle, the length will still be in local x direction, however, visually it will not change on x anymore as the visuals are presented in the global coordinate system. The box geometry has not changed, just the visualization is transformed.

[[Image:Bodycs.png|Transformation Feature to Body|thumb|center|250px]]
&lt;br clear=all&gt;

This would make it easy to move single parts around: just adopt its placement. However, in FreeCAD most designs are done with many features (pads, pockets etc.), how would one handle that? Move every feature? Only the last one? Both ways would introduce some very problematic modeling behavior, therefore a third way is used: don't move features at all! Instead the concept of a Body was introduced into general modeling, everything done in part design is now grouped beneath it. This object has a placement property too and can be transformed.

Coming back to local and parent coordinate systems: the body is the perfect incarnation of that concept! Every feature beneath the body can't be moved directly, it's placement is always empty. That means, the feature's geometry doesn't need to be rotated or translated if we want to express it in the bodies coordinate system. But we can move the body inside the global coordinate system by setting it's placement, and then the global value of the feature's geometry is calculated by applying this transformation too. Remember, we rotate coordinate systems. That means if we transform the body system, everything beneath uses it as its personal global system. There is no need to move features at all. You want your whole design at a different place? Just set the body's placement!


To summarize: Coordinate systems can be stacked, every object uses it's parents system as personal global one. If the parents coordinate system is transformed, all children get transformed too without changing their local systems.
&lt;br clear=all&gt;

== What can be assembled: Object model ==

With the Body object we have everything we want for assembly: we can move complex designs in a comprehensible way, right?. Not quiet! What would happen if you want to have your design many times inside the assembly? For example if you modeled a screw, you don't want to remodel it again every time you need one. Copying may work, however, what if you change your screw design: change all copies? That would be very annoying. To overcome this, again a new object is introduced: the part. A part is a pure assembly object and can only be created inside this workbench. Its purpose is to reference a body object and provide another coordinate system.

To understand why it's introduced we have to consider how things are moved in FreeCAD. Lets extend the body chart above with two parts referencing the same body as shown in the next picture. 

[[Image:Partcs.png|Transformation Feature to Part|thumb|center|350px]]
&lt;br clear=all&gt;

The bodys local system is the same in both parts, however, the parts have their own placements and therefore can be transformed in respect to the global system. As placements get applied recursively, the very same features can end up on different positions. Imagine you change the parts placement P4 and P5 to different values, your design would appear in two total different places inside the global system without any changes to the features or the body holding them. And then imagine changing the body's coordinate system P3: You would change the position of all incarnations of your design in the same manner! 

You may wonder how you design can be in two places while being only one geometry. Thats simple: The part shows only a visual representation of the geometry inside the body, and you can have many pictures of your single part. Also those visuals representations are transformed if you set the placement. A part holds absolutely no modeling information. 

Back to our use case: if you need 100 screws you will model only one body with your design. Then you can add as much parts as you want holding this one body. By applying different placements to the parts only you can move the screws around as you want. And if you change something in your design, the body gets updated and every part too, as they all reference it. Awesome!


Now imagine another use case: you have a nice electrical motor assembly consisting of multiple parts, are all moved to the right position. Afterwards you want to create a bigger machine and you need multiple electrical motors for it. What we want is to reuse the motor assembly, the same reasoning as with the multiple body incarnations apply. For simple designs we were able to create multiple parts from one body, however, we can't create a part from multiple parts. Therefore we need another object which can do that! FreeCAD introduces the product object for this. A product is basically a full assembly with multiple parts, but also has a placement property. What does that mean? It becomes clear when we again extend the coordinate system chart with our new product object.

[[Image:Productcs.png|Transformation Feature to Product|thumb|right|400px]]

Now our parts are not anymore beneath the global coordinate system, but they are grouped beneath the product. For the parts nothing change: they works as before. And in fact, if  our Product1 would have been the top-level object, absolutely nothing would change at all. The global system is just replaced by a product coordinate system which acts as global one. In  our example however, we added the product to another product, together with a third part. Now it gets interesting: As a product has a placement property, it can be moved! And we already learned that such a transformation is applied to all children. Therefore parts 1 and 2 would move when you change the placement of Product1. 

Back to our example: Product1 would be the electrical motor, Product2 the big machine. Now you can add multiple products to the machine which all reference the same parts as Product1, hence all representing a electrical motor. And as every product can be placed diffrently, you can move all motors to diffrent positions. Combine it with other parts and assemblies and you can build a complex machine. Again, if you update one body, all parts and therefore all products referencing it get updated. 

At last you may ask why there is no global coordinate system in the last picture. Thats because nothing like a global coordinate system exists, it was just a concept for easy explaining. If you assembly your electrical motor, the top-level coordinate system would be the Product1 system. However, this is not a general global one, as you can add it to a another product which is the top-level cs afterwards. And this can be added to another, and so on. There is nothing like a global coordinate system, just a top-level one.

To summarize: In the assembly workbench you can combine parts to assemblies (products). These products can be staked together with other parts in arbitrary numbers.

== How to set Relations: Assembly Constraints ==

Up to now we discussed all details of moving things around with placements and the objects involved in it. It is however very tedious to calculate all placements by hand and set them manual via the property editor. It would be more pleasant if it would be possible to set simple relations between parts instead of abstract rotations and translations. Therefore FreeCAD introduces assembly constraints. As the name indicates, they work the same way as in the sketcher: the user applies different attributes to geometries of the parts. This can be for example the distance between two points, or their orientation (parallel, perpendicular) of lines etc. FreeCAD trys then to find placements which satisfy all given constraints.

[[Image:Geometry.png|Geometry which is supported by FreeCAD assembly constraints|thumb|right|250px]]

To assemble things in the real world, one would use the parts structure to fit the counterpart into its place, for example a bolt which belongs into a hole. Or surfaces which touch each other and therefore define the parts exact position. In FreeCAD it works exactly like that: you use the parts geometry to specify where the second part belongs to. At your disposal are points, straight lines, planes and cylinders. The picture to the right shows them all in the FreeCAD environment. But of course, the geometry alone is not enough to calculate the parts positions, the kind of relation needs to be known too. For example two faces: They can touch each other, or just be parallel, maybe even perpendicular. This relation is set in FreeCAD through the already mentioned assembly constraints. You have 6 diffrent types at your hand: Fix, Distance, Orientation, Angle, Align and Coincident. Lets see what they all do and how to use them.

=== Fix ===

The fix constraint is the simplest of all constraints. It only needs one part to be selected and then it fixes its position and its rotation. No matter what you do to this part afterwards: it will hold its place. And thats the whole purpose of that type. It's most useful to have always one fixed part per assembly, as it can be annoying if all parts get moved to satisfy other constraints. If you fix the most basic part in your assembly, all other parts will move towards it which gives you a pleasant experience. Note that this constraint works only in the assembly it is created in, the part will not be fixed in any parent assembly (remember: assemblies can be stacked).

===Distance===

As you already guessed from the name, with this constraint you can specify the distance between two geometries. This works for two points, but also for a point and a line, or a line and a cylinder and many more combinations. This constraint is pretty simple, but two points need mentioning: First, if there are multiple possible distances between geometries, for example the last mentioned line and cylinder, then the shortest distance is used. Second, sometimes multiple solutions exist even for the shortest distance. This is the case for the point-plane distance: every value can be satisfied with the point above AND below the plane. So if you only specify the value, it can happen that FreeCAD puts the point at the wrong side of the plane. To control this, the distance constraint has a special option, the solution space. This option allows to reduce the space of possible solutions, so that it matches your wishes. Lets see how this works on our small example: 



{{languages | {{es|Assembly_Basic_Tutorial/es}} {{it|Assembly_Basic_Tutorial/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Assembly Workbench</title>
    <ns>0</ns>
    <id>36585</id>
    <revision>
      <id>98604</id>
      <parentid>98603</parentid>
      <timestamp>2014-07-25T07:53:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>iz77mo6gig7mi8p7czwlvgecmg8n5sq</sha1>
      <text xml:space="preserve" bytes="119">
&lt;!--T:1--&gt;
Assembly Workbench‏‎


&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]






</text>
    </revision>
  </page>
  <page>
    <title>Assembly project</title>
    <ns>0</ns>
    <id>413</id>
    <revision>
      <id>122006</id>
      <parentid>122005</parentid>
      <timestamp>2014-11-15T10:06:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>emjtv6unr0vj3xzg287kvs7bp7pb57m</sha1>
      <text xml:space="preserve" bytes="10789">
&lt;!--T:1--&gt;
Here the project plan for the '''Assembly''' modul as part of the [[Development_roadmap|Development roadmap]]

== Purpose and principles == &lt;!--T:2--&gt;
This is a software development project aimed to implement a Assembly and product creation capabilities. Its about implementing some '''core features''' into the CAD modules of FreeCAD, '''Part and Assembly'''.

&lt;!--T:3--&gt;
The development steps are planed here and tracked in the Issue tracking system to get a well formed change log: 
[http://apps.sourceforge.net/mantisbt/free-cad/my_view_page.php Issue tracker]

== Outcome == &lt;!--T:4--&gt;
Aim of the project is to enable FreeCAD accomplish a design task like this one:

&lt;!--T:5--&gt;
[[Image:Gripper.jpg|400px]]

&lt;!--T:6--&gt;
This will be achived by using the '''Assembly''' to put all the different kind of parts together with constraints and stay as close as possible to the ISO 10303 specification to allow easy model exchange. 

&lt;!--T:7--&gt;
Another aim is to utilize [http://en.wikipedia.org/wiki/Open_Dynamics_Engine ODE] for kinematics.

== Brainstorming == &lt;!--T:8--&gt;

=== Multi model === &lt;!--T:9--&gt;
[[Image:MultiModel.png|600px|right]]
A key feature to real world designs is the ability to split a design into handleable pieces. Its impossible to work on all aspects of a design at the same time or alone. That is true for the geometry and also for engineering tasks like FEM or CAM. There for FreeCAD need the ability to split models. That opens some possibilities: 
* '''Late loading''' - Only need resources like Graphics and main memory for the piece you work on.
* [http://en.wikipedia.org/wiki/Concurrent_engineering '''Concurrent engineering'''] - allows many people to work on the same design
* Fine grained [http://en.wikipedia.org/wiki/Version_control '''Version control'''] -  better control over various aspects of the design
* and many more....

&lt;!--T:10--&gt;
A multi model design could look like that:

=== Project management === &lt;!--T:11--&gt;
Multi model means a lot of files belonging to one project, most likely under a common directory. A project file and a project browser can help organizing the files. Also it can save additional information about the project or a project website.

&lt;!--T:12--&gt;
1. Two modes, the &quot;Simple&quot; and the &quot;Project&quot; mode. Simple mean only one document and all the assemblies and parts go in one document. If a Project is opened or created FreeCAD is in project mode.

&lt;!--T:13--&gt;
2. Projects. The position of the FCPrj file on the drive defines a root directory. All Files below this dir are defined with relative paths to the root dir. A additional view on the left side will hold the ProjectExplorer which shows the dir tree with the handled files. This root dir is also used as root for a SVN sand box, which allows later ease sharing and Version control. External references (towards a dir outside root, a sever share or a web resource) will handled and showed separably in the ProjectExplorer (one pseudo dir for each file server or web server). This makes it possible to get a fast overview about external references and re-route them.

=== Copyright === &lt;!--T:14--&gt;
Now copyright of 3D models is a interesting field. 3D models do fall under the copyright. The copyright falls to the '''creator''' of the model. Its only possible to protect the shape, which is represented by the model, by a patent or a design patent (US). But patents cover only the creation of a physical part to earn money. As an example the [http://patft1.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PALL&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&amp;r=1&amp;f=G&amp;l=50&amp;s1=D464,651.PN.&amp;OS=PN/D464,651&amp;RS=PN/D464,651 Microsoft Mouse design patent].

&lt;!--T:15--&gt;
So we have to remember the creator (copyright holder) and any kind of license for each model/product/file of a design. 
For the license I would use the CC type licenses. http://creativecommons.org/

&lt;!--T:16--&gt;
Abbreviation Keys for CC licenses:
* BY = Attribution only
* BY-ND = Attribution-NoDerivatives
* BY-NC-ND = Attribution-NonCommercial- NoDerivatives
* BY-NC = Attribution-NonCommercial
* BY-NC-SA = Attribution-NonCommercial- ShareAlike
* BY-SA = Attribution-ShareAlike
* PD = Dedicated to or marked as being in the public domain via one of our public domain tools, or other public domain work; adaptations of works in the public domain may be built upon and licensed by the creator under any license terms desired 

&lt;!--T:17--&gt;
Additional a URL link to the full license document (in case of custom licenses)

=== ISO 10303 === &lt;!--T:18--&gt;
The ISO 10303 (STEP) is very important in this field. Its the only good standardized and widely discussed and recognized definition of product structures I know of. 
[[Image:Product structure modeling Process-Data diagram.gif|500px|right]]

&lt;!--T:19--&gt;
Here some links with info:
* [http://en.wikipedia.org/wiki/ISO_10303 ISO 10303 on Wikipedia]
* [http://www.wikistep.org/index.php/Main_Page WikiStep.org] with a lot of basic info but mostly toward STEP-NC
* The [http://www.wikistep.org/index.php/Product_Basics product structure] in STEP
* Some [http://www.wikistep.org/index.php/STEP_Tutorial examples] about STEP
* [http://en.wikipedia.org/wiki/ISO_10303-11  ISO 10303-11] about the modeling language (EXPRESS)
* [http://en.wikipedia.org/wiki/Product_Structure_Modeling A Wikipedia article] about product modeling
* [http://www.steptools.com/support/stdev_docs/express/step_irs/index.html#part41 Overview of Part 41 -- Fundamentals of Product Description and Support]
* [http://www.steptools.com/support/stdev_docs/express/step_irs/index.html#part44 Overview of Part 44 (edition 2) -- Product Structure Configuration]
* [http://www.steptools.com/support/stdev_docs/express/ap214/index.html Examples of small AP 214 files]

=== Assembly constraints === &lt;!--T:20--&gt;
An important role in building up large models and products take the assembly constraints, which formulate certain rules how parts assemble a product. Mainly these are Fix, FaceToFace, Angle, Offset and some kind of pattern instantiation. This constraints need a specialized solver to keep them up if the parts change. This solver is fundamentally different to the Sketch solver. I think we have to go for a graph based approach on this...

=== Kinematics === &lt;!--T:21--&gt;
A further step would be to use [http://ode.org/ ODE], or similar libs, to put the parts and the assembly constraints together to do a kinematic simulation of machines. That would allow checking for collisions and exploring the conditions of 
a mechanical system.

=== Revision control === &lt;!--T:22--&gt;
An important point is the version control and distributed development. With multi model design we are able to split designs in smaller pieces and can distribute work among a team. For a software developer &quot;distributed&quot; and &quot;Version&quot; sounds familiar, so why not use a [http://en.wikipedia.org/wiki/Distributed_Version_Control_System DVCS]. A good comparison is [http://en.wikipedia.org/wiki/Comparison_of_revision_control_software#Technical_information here].

&lt;!--T:23--&gt;
Since we deal with big data, and data which can not be easily diffed, we are limited to those which use the snapshot persistence model. Any system storing just diffs will have grave problems with our data (personally tested with Mercurial and Catia files). After sorting out commercial and non-free, basically only [http://en.wikipedia.org/wiki/Git_%28software%29 Git] and [http://subversion.apache.org/ SVN] remains.

&lt;!--T:24--&gt;
Using Git for the task leaves us with two big frontiers:
* Git is very complicated; Branching merging and tagging along a non linear development path let alone merging with remote repositories (push, pull) 
will put a lot of complexity in that matter. To hide it from the user will be a challenging task. 
* Git allow Merge and Diff handlers for certain file types; We need one for .fcstd. This handler has to examine two FreeCAD 
documents and show and merge differences in the objects, features and parameters. Also not easy.

&lt;!--T:25--&gt;
But using git would open a lot of possibilities even high class PLM system would dream of...

== Organizing == &lt;!--T:26--&gt;
Here some development task needed for a decent Assembly/Product design: 

=== Infrastructure === &lt;!--T:27--&gt;
The assembly will demand some changes in the base system and infrastructure layer of FreeCAD.

==== Multi model ==== &lt;!--T:28--&gt;
Multi-Model was in mind from the beginning of FreeCADs design. There fore we have a multi document interface and can load unlimited documents. But we need to upgrade especially the 3D-Viewer to handle showing more the one document in its view (Part-Trees).

==== Part-Trees ==== &lt;!--T:29--&gt;
Since in Assembly the composition of parts and sub-assemblies is the main workflow, the tools to stack (group) Parts in a tree have to be implemented. Unlike a DocumentObjectGroup the Assembly group has to deal with visibility and placement of the children. Best done by stacking ViewProvider on each other. That need a kind of ClaimChildren() interface to the ViewProviders. 

==== Unified Drag/Drop/Copy/Paste interface ==== &lt;!--T:30--&gt;
A interface allow ViewProvider and Workbenches full control about Drag/Drop/Copy/Paste operations in the tree or the 3D view. 

==== External resources ====  &lt;!--T:31--&gt;
Handling of doped links (from internal or external browsers). Means loading resources over (potential) slow connections (http).

=== Material === &lt;!--T:32--&gt;
Describing material and its properties is a vital part of a CAD/CAE system. Material has a lot of properties and names heavily dependent on the field its use. E.g. FEM and mechanical engineering have different frameworks and standards to describe Material. 

&lt;!--T:33--&gt;
For the Material description a special article is made: [[Material|Material]]

=== Object model === &lt;!--T:34--&gt;
Class tree to deal with concepts needed. References, interfaces, document links, views, compounds, constraints, configurations, and many more...

== STEP check loop == &lt;!--T:35--&gt;
Implementing a first STEP importer for more then geometry and color to check if the object model holds for a wider usage. 

=== Assembly constraint solver === &lt;!--T:36--&gt;
Define a interface to a assembly constraint solver, very similar to the Sketcher solver interface.

=== Physics simulation interface === &lt;!--T:37--&gt;
Interface to allow a (external) (multi)physics simulation software to take control over the positioning of the Parts of a assembly. This would allow to use &quot;bullet&quot; or &quot;ODE&quot; to do kinematic tests and DMU.

== Next actions == &lt;!--T:38--&gt;
* Object model
* Wait for the 0.12 release branch happened 

== Tutorial == &lt;!--T:39--&gt;
* [[Assembly Basic Tutorial|Assembly Basic Tutorial]]

&lt;!--T:40--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Atelier Image</title>
    <ns>0</ns>
    <id>1342</id>
    <revision>
      <id>107949</id>
      <parentid>90959</parentid>
      <timestamp>2014-09-01T10:50:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Maillage</title>
    <ns>0</ns>
    <id>1043</id>
    <revision>
      <id>107950</id>
      <parentid>90960</parentid>
      <timestamp>2014-09-01T10:50:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Mise en plan</title>
    <ns>0</ns>
    <id>1341</id>
    <revision>
      <id>107951</id>
      <parentid>90961</parentid>
      <timestamp>2014-09-01T10:51:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier PartDesign</title>
    <ns>0</ns>
    <id>2189</id>
    <revision>
      <id>107952</id>
      <parentid>90962</parentid>
      <timestamp>2014-09-01T10:51:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Pièce</title>
    <ns>0</ns>
    <id>1343</id>
    <revision>
      <id>107953</id>
      <parentid>90989</parentid>
      <timestamp>2014-09-01T10:52:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Raytracing</title>
    <ns>0</ns>
    <id>1348</id>
    <revision>
      <id>107954</id>
      <parentid>90990</parentid>
      <timestamp>2014-09-01T10:52:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Robot</title>
    <ns>0</ns>
    <id>2190</id>
    <revision>
      <id>107955</id>
      <parentid>90991</parentid>
      <timestamp>2014-09-01T10:53:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atelier Sketcher</title>
    <ns>0</ns>
    <id>2191</id>
    <revision>
      <id>107956</id>
      <parentid>90992</parentid>
      <timestamp>2014-09-01T10:53:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Atom</title>
    <ns>0</ns>
    <id>12</id>
    <revision>
      <id>108790</id>
      <parentid>48</parentid>
      <timestamp>2014-09-09T19:50:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Base API</title>
    <ns>0</ns>
    <id>735</id>
    <revision>
      <id>122977</id>
      <parentid>120996</parentid>
      <timestamp>2014-11-15T22:53:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>qzmo0wfssm30bcr4jyupsiaip6vedyv</sha1>
      <text xml:space="preserve" bytes="938">
&lt;!--T:1--&gt;
The Base module is contained inside the FreeCAD module and contains constructors for different types of objects heavily used in FreeCAD. 



&lt;!--T:2--&gt;
{{APIClass|BoundBox|[Xmin,Ymin,Zmin,Xmax,Ymax,Zmax] ) or ( Tuple, Tuple ) or ( Vector, Vector|Creates a bounding box. A bounding box is an orthographic cube which is a way to describe outer boundaries. You get a bounding box from a lot of 3D types. It is often used to check if a 3D entity lies in the range of another object. Checking for bounding interference first can save a lot of computing time!}}
{{APIClass|Matrix| |Creates a 4x4 [[Matrix_API|Matrix]], that can be used to apply transformations to objects.}}
{{APIClass|Vector|) or ( x,y,z|Creates a FreeCAD 3D [[Vector_API|Vector]], representing a 3D point or a direction.}}
{{APIClass|Placement| |Creates a [[Placement_API|Placement]].}}

&lt;!--T:6--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Basic Part Design Tutorial</title>
    <ns>0</ns>
    <id>43881</id>
    <revision>
      <id>116110</id>
      <parentid>116015</parentid>
      <timestamp>2014-10-24T20:59:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0jlfw7a8910f95jpf97a8w2z5ag8kjy</sha1>
      <text xml:space="preserve" bytes="13913">
&lt;!--T:1--&gt;
{{TutorialInfo|Class=Modeling|Level=Beginner|Author=Mark Stephen ([[User:Quick61|Quick61]])|Time=Less than an hour|FCVersion=0.14.3700 or greater}}

== Welcome == &lt;!--T:2--&gt;
Welcome. This tutorial is designed to help the new FreeCAD user become acquainted with some of the tools and techniques used in the [[PartDesign Workbench|Part Design Workbench]]. This tutorial is not a complete and comprehensive guide to the Part Design Workbench and many of the tools and capabilities are not covered. It is only intended to introduce the new user to the workbench. With that being said, what this tutorial will do is take the new FreeCAD user through the steps needed to successfully model the part shown in the image below.    

[[Image:PD WB Tutorial018.png|center]]

== Before You Begin == &lt;!--T:3--&gt;
Before you begin this tutorial, you will want to adjust a few settings in FreeCAD [[Preferences Editor|Preferences]]. First switch to the Part Design Workbench and then go to the Edit menu and select Preferences. Once the Preferences dialog is open, click on the Part Design graphic on the left. Under the General tab, there are 3 check boxes under Model settings. Check all 3 of those boxes. After you are finished with this tutorial, you may leave the settings as they are or change them to your liking. Once you have completed this, we are ready to proceed.

== The Task == &lt;!--T:4--&gt;
In this tutorial, you will be using the Part Design Workbench to create a 3D solid model of the part shown in the [[Drawing Module|Drawing]] below. All of the necessary dimensions to complete this task are given. You will start by creating a core shape from a base Sketch and then build on that shape, adding what is known as Features. These features will either add material to, or remove material from the solid by use of additional sketches and accompanying feature operations. This Tutorial will not use every feature and tool available within the Part Design Workbench, but should use enough to give the user of this tutorial a basic foundation upon which to build their knowledge and skills. 

== The Part == &lt;!--T:5--&gt;

[[Image:Tutorial Drawing Sheet.svg|1024px]]

=== Constructing The Part === &lt;!--T:6--&gt;
First begin by making sure your in the Part Design Workbench. Once there, you will want to create a new document if you have not done so already. It is a good habit to save your work often, so before anything else save the new document, giving it any name you might like. Now that it is saved, we will start with out base sketch. To start this Sketch, click on the New sketch icon on the tool bar or from the Part Design menu, New sketch. Once invoked, you should see a dialog that prompts you to Chose you sketch orientation and provides the input of an offset. We will not be using the offset, but for our base sketch we want to pick the YZ plane as shown in the image below. Once the YZ plane is selected click OK and we can start to construct the first sketch.

[[Image:PD WB Tutorial001.png|center]]

&lt;!--T:7--&gt;
Next you will want to use the Polyline tool and make a shape roughly like that in the next image. It does not need to be perfect as after it is done, applying constraints will. Once you have the basic shape, we will start applying the constraints. If you had Auto constraints on, some of these constraints will have been applied automatically, if not, do the following. 


&lt;!--T:8--&gt;
# Select the two horizontal lines with your mouse by clicking on them, and once selected, click on the horizontal constraint. 
# Select the vertical line on the right and then click on the vertical constraint. 
# Select the start and end points of your polyline and click on the coincident constraint to close the polyline. 
# Select the bottom horizontal line and the right vertical line and apply and equal constraint. 
# Select either the horizontal or vertical line and apply either a corresponding horizontal or vertical distance constraint and give it a value of 26 mm.
# Select the top horizontal line and apply the horizontal distance constraint and give it a value of 5 mm
# Select the lower left point, (vertice) of the horizontal line and the upper right point of the vertical line, then select the center point of the grid and apply the symmetry constraint.

&lt;!--T:9--&gt;
At this point you should have a fully constrained sketch as indicated by it changing color and the message shown in the Combo View. It should now look just like the image below. 

[[Image:PD_WB_Tutorial002.png|center]]

&lt;!--T:10--&gt;
Now in the Combo View, click on the OK button to leave the sketch edit mode and select Pad from the toolbar or from the Part Design menu. This will give you a Pad dialog in the Combo View. Using that dialog, first using the Type pulldown menu, select Two dimensions. Sense we can tell by the drawing presented at the beginning of this tutorial, the part is 53 mm long. What we want to do is Pad our sketch both ways from the center plane to make up that distance. The reason for this will become obvious in a bit. For now, given we want it to be 53 mm long in total we will input 26.5 for Length, and 26.5 again for the Second length. Alternatively, you can provide a single length of 53 mm and click the Symmetric to plane check box. Once that is done we now have our base solid upon which we will add additional features to construct our part. 

&lt;!--T:11--&gt;
Using the mouse or the view icons turn the model around so you can see its back. Once the Back of the part is visible, select the back face by clicking on it as seen in the next image. 

[[Image:PD_WB_Tutorial003.png|center]]

&lt;!--T:12--&gt;
After the face is selected, click on the New sketch icon in the toolbar or from the Part Design menu and that will map our next sketch to the back face of the part. Now select the retangle tool and place a rectangle on the rear face of the part in a similar fashion as shown below. Now following the steps listed, constrain the sketch.

&lt;!--T:13--&gt;
# Select one of the horizontal lines apply a horizontal distance constraint and a value of 5 mm. 
# Select one of the vertical lines and give it a vertical distance constraint and a value of 11 mm. 
# Use the External geometry tool and select the upper right vertex of the face and click it so you are provided a point from the external geometry to link our sketch to. 

[[Image:PD_WB_Tutorial004.png|center]]

&lt;!--T:14--&gt;
Select that point you just made available with the External geometry tool and then select the upper right vertex of the rectangle and click on the coincident constraint. At this point the sketch should be fully constrained and look like the next image. 

[[Image:PD_WB_Tutorial005.png|center]]

&lt;!--T:15--&gt;
once that is done, click OK in the Combo View Sketch edit dialog, then select the Pocket tool from the tool bar or Part Design menu. Using this tool is the opposite of the Pad tool. As the Pad tool adds material to the part, the Pocket tool removes material from the part. Both operations are called features. In this Pocket operation we want to select Through all from the type pulldown menu and then click OK. 

&lt;!--T:16--&gt;
For the next operation, make sure that “Pocket” is selected in the Model tree view and once done, click on the Mirror feature on the toolbar or from the Part Design menu. In the Mirror dialog in the Combo View, select Horizontal sketch axis from the Plane pulldown menu. Then click OK. The Mirror feature works in this way because the base feature of our model was Padded both ways from the horizontal plane in the first operation with the base sketch. If all has gone well, you should now have a part that looks like the image below after you orbit it around to the front. 

[[Image:PD_WB_Tutorial006.png|center]]

&lt;!--T:17--&gt;
After taking a look, orbit back around and once again select the back face of the part and select that face to map the next Sketch to. 

[[Image:PD_WB_Tutorial007.png|center]]

&lt;!--T:18--&gt;
Select New sketch and make a new rectangle in the manner similar to what is shown below in the next image. Then proceed to add dimensional constraints to the rectangle.

&lt;!--T:19--&gt;
# Select a horizontal line and apply a horizontal distance constraint with a value of 16.7.
# Select a vertical line and apply a vertical distance constraint of 7 mm
# Using the External geometry tool, select the upper left vertex of the part face.

[[Image:PD_WB_Tutorial008.png|center]]

&lt;!--T:20--&gt;
Now selecting the upper left vertex of the rectangle and the external geometry point, click on the coincident constraint to fully constrain the sketch. 

[[Image:PD_WB_Tutorial009.png|center]]

&lt;!--T:21--&gt;
Next we will click on the Pad feature and in the Pad dialog in the Combo View we want a length of 26 mm leaving the type as Dimension and then placing a check on the Reversed checkbox. Using the Reversed checkbox will cause the Pad to go into the part instead of away from the part. This operation provides with the following result. 

[[Image:PD_WB_Tutorial010.png|center]]

&lt;!--T:22--&gt;
Once again using the Mirror feature, first ensure that Pad001 is selected in the tree view, then click on Mirror in the toolbar of select it from the Part Design menu. We will repete the operation we did for Pocket above and select Horizontal sketch axis from the Plane pulldown menu. 

&lt;!--T:23--&gt;
At this point orbiting the part around to the front, we can see that our part is now starting to look like the part in the dimensioned drawing at the beginning of this tutorial. Once you have the view of the front, click on the sloped face with your mouse to select the next face we will use for the next sketch.

[[Image:PD_WB_Tutorial011.png|center]]

&lt;!--T:24--&gt;
Here we will use the rectangle tool and place a rectangle in our sketch and once having done so, apply the following constraints. 

&lt;!--T:25--&gt;
# Select a horizontal line and a vertical line, and after both are selected, click on the Equals constraint. 
# Select either a horizontal or vertical line and apply a corresponding horizontal or vertical distance constraint with a value of 17 mm
# Using the External geometry tool, select the vertex as shown in the image below. 

[[Image:PD_WB_Tutorial012.png|center]]

&lt;!--T:26--&gt;
Now using the dimensions from the drawing, apply the following constraints.

&lt;!--T:27--&gt;
# Select the external geometry point and the upper right vertex of the now square sketch and apply a horizontal distance constraint of 7 mm
# Select the external geometry point and the upper right vertex of the now square sketch and apply a vertical constraint of 11 mm

&lt;!--T:28--&gt;
The result should be as follows. 

[[Image:PD_WB_Tutorial013.png|center]]

&lt;!--T:29--&gt;
At this point if we were to simply Pocket this sketch, the resulting hole would be perpendicular to the sloped face that it is mapped to, and this is not what we want. We want the hole to be perpendicular to the back face, but it's projected dimensions are not the 17 mm x 17 mm dimensions that are given in the  drawing. Now we could of done the math and calculated the dimensions needed, or we can use the tools provided in FreeCAD to make that projection for us. To do that, we are going to create a small Pad feature from the sketch we just made as a helper. We will use the External geometry tool to project the points of the base of that helper Pad on to the back face where we will place our final sketch that will pocket the hole through to finish the model.

&lt;!--T:30--&gt;
So first, after clicking OK and closing the Sketch edit dialog, select Pad and provide a distance of 1 mm. Click OK and you should see the following result. 

[[Image:PD_WB_Tutorial014.png|center]]

&lt;!--T:31--&gt;
Next we will orbit back around to see the back face of the part once again and select the back face to map the final sketch to. 

[[Image:PD_WB_Tutorial015.png|center]]

&lt;!--T:32--&gt;
Select New sketch from the toolbar or Part Design menu. Now in sketch edit mode, we will orbit back around to the front so we can see two perpendicular edges of the Pad we made in the last operation. Using the External geometry tool, select the connected horizontal and vertical edges at the base of the Pad with the External geometry tool. The image below shows the base edges to be selected with the External geometry tool. 

[[Image:PD_WB_Tutorial016.png|center]]

&lt;!--T:33--&gt;
Now orbiting around to the back face, or alternatively double clicking on the active sketch in the Model tree view, you will see the two external geometry lines that we provided from the front of the model. Make a rectangle and using the coincident constraint, do the folowing.

&lt;!--T:34--&gt;
# Select the upper left vertex of the rectangle and the upper left point of the external geometry and click on the coincident constraint.
# Click on the lower right vertex of the rectangle and the lower right point of the external geometry and click on the coincident constraint.

&lt;!--T:35--&gt;
And we should end up with this. 

[[Image:PD_WB_Tutorial017.png|center]]

&lt;!--T:36--&gt;
For the final step in this tutorial, we will select the Pocket feature from the toolbar or from the Part Design menu and from the Type pulldown select Through all. Click OK, and with that action, this tutorial and your model are complete. 

[[Image:PD_WB_Tutorial019.png|center]]


== Additional Resources == &lt;!--T:37--&gt;

&lt;!--T:38--&gt;
Accompanying video coming soon


&lt;!--T:39--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Basic modeling tutorial</title>
    <ns>0</ns>
    <id>1314</id>
    <revision>
      <id>127634</id>
      <parentid>127264</parentid>
      <timestamp>2014-12-02T20:36:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>jqilnypzh6qf5t2t4tcq6e1ja0wjz3z</sha1>
      <text xml:space="preserve" bytes="7539">
&lt;!--T:1--&gt;
This Basic Modeling Tutorial will show you how to model an iron angle. One thing to know is that FreeCAD is modular by design, and like for many other CAD software, there are always more than one way to do things. We will explore two methods here.

== Before we begin == &lt;!--T:2--&gt;
Keep in mind that FreeCAD is still in an early stage of development, so you might not be as productive as with another CAD application, and you will certainly encounter bugs, or experience crashes. FreeCAD now has the ability to save backup files. The number of those backup files can be specified in the preferences dialog. Don't hesitate to allow 2 or 3 backup files until you know well how to deal with FreeCAD.

&lt;!--T:3--&gt;
Save your work often, from time to time save your work under a different name, so you have a &quot;safe&quot; copy to fall back to, and be prepared to the possibilty that some commands might not give you the expected results. 

== Modeling Techniques Intro == &lt;!--T:4--&gt;
The first (and basic) technique of solid modeling is [http://en.wikipedia.org/wiki/Constructive_solid_geometry Constructive Solid Geometry (CSG)]. You work with primitive shapes like cubes, cylinders, spheres and cones to construct your geometry by combining them, subtracting one shape from the other, or intersecting them. These tools are part of the [[Part Workbench]]. You can also apply transformations on shapes, like applying rounds or chamfers on edges. These tools are also in the [[Part Workbench]].

&lt;!--T:5--&gt;
Then there are more advanced tools. You start by drawing a 2D profile which you'll either extrude or revolve.

&lt;!--T:6--&gt;
So let's start by trying to do some iron feet for a table with these 2 methods.

== 1st Method - By Constructive Solid Geometry == &lt;!--T:7--&gt;
* Start with the [[Part Workbench]] ('''View &gt; Workbench &gt; Part''' menu)
* Click on the [[Image:Part_Box.png|32px]] [[Part_Box|Box]] button to create a box
* Change its dimensions by selecting it either in the 3D space, or by clicking it in the Project tab to the left, then
* Click on the Data tab at the bottom, and change values for Height, Length and Width to 750mm, 50 and 50 ''(see Fig. 1.1)''
* Create a second box the same way, but with values 750, 40 and 40mm. By default this box will be superimposed on the first one. ''(see Fig. 1.2)''
* You'll now subtract the second box from the first. Select the first shape first (named Box), then the second one (named Box001), the selection order is important! (Make sure that both shapes are selected in the Project tree. One thing to remember: in Inventor navigation mode, Ctrl + click does not work for multiple selection. [[Mouse_Model|Switch]] to either CAD or Blender selection.)
* On the Part Workbench toolbar, click on the [[Image:Part_Cut.png|32px]] [[Part_Cut|Cut]] tool.

&lt;!--T:8--&gt;
[[Image:Tutorial-normand01.jpg|center|frame|Fig. 1.1 The first box]]

&lt;!--T:9--&gt;
[[Image:Tutorial-normand02.jpg|center|frame|Fig. 1.2 The second box on top of the first one, ready to be subtracted]]

&lt;!--T:10--&gt;
[[Image:Tutorial-normand03.jpg|center|frame|Fig. 1.3 After the subtraction]]

&lt;!--T:11--&gt;
You now have your first iron angle ''(Fig. 1.3)''. You'll notice that, in the Project tab on the left, both boxes have been replaced by a &quot;Cut&quot; object. Actually, they're not disappeared, but rather grouped under the Cut object. Click on the + in front of it, and you'll see that both boxes are still there, but greyed out ''(Fig. 1.4)''. If you click on either of them and hit the space bar, it will show up. The space bar toggles visibility of selected objects. ''(Fig. 1.5)''

&lt;!--T:12--&gt;
Don't want the angle oriented that way? You just need to change the placement of the Box001 shape. Select it, unhide it, and in the Data tab, click on the + in front of Placement, then expand the Position parameter, and change its X and Y coordinates. Hit Enter, hide the Box001 shape again, and your angle orientation is now different. ''(Fig. 1.5)'' You can even change either of your shapes dimensions, and the Cut object will be updated.

&lt;!--T:13--&gt;
[[Image:Tutorial-normand04.jpg|center|frame|Fig. 1.4 The cut operation retains its original objects (the boxes)]]

&lt;!--T:14--&gt;
[[Image:Tutorial-normand05.jpg|center|frame|Fig. 1.5 You can still make the original boxes visible]]

&lt;!--T:15--&gt;
By the way, we can add rounds to the angle so it is more realistic, using the [[Image:Part_Fillet.png|32px]] [[Part_Fillet|Fillet]] tool. ''(Fig. 1.6)''

&lt;!--T:16--&gt;
[[Image:Tutorial-normand06.jpg|center|frame|Fig. 1.6 The filleted edges]]

== 2nd Method - By extruding a profile == &lt;!--T:17--&gt;
This method requires that you start by drawing a 2D profile. You need to activate the [[Draft Workbench|2d Drafting workbench]] ('''View &gt; Workbench &gt; 2d Draft''' menu).

&lt;!--T:18--&gt;
Next we need to set the [[Draft_SelectPlane|working plane]]. Depending on your FreeCAD version, you'll have right under the toolbar, on the right, a &quot;None&quot; button. Click it, and on the left will appear right after &quot;active command&quot;: Select Plane Offset, then a text field and a series of buttons. Assuming you want to start your profile on the plan view, select XY. The &quot;None&quot; button will now show &quot;Top&quot; as active plane.
[[#DraftPlaneButton|See note.]]
    
Select the [[Image:Draft_Wire.png]] [[Draft_Wire|Wire (multiple-point line)]] tool, then start drawing a shape, using the text fields for X and Y positions. The &quot;Relative&quot; box should be checked, as well as the &quot;Filled&quot; box.

&lt;!--T:19--&gt;
* 1st point: 0,0
* 2nd point: 50,0
* 3rd point: 0,10
* 4th point: -40,0
* 5th point: 0,40
* 6th point: -10,0
* No 7th point, rather click on the &quot;Close&quot; button to close the profile. You should now have this profile, titled &quot;Wire&quot; in the Project tab:

&lt;!--T:20--&gt;
[[Image:Tutorial-normand07.jpg|center|frame|Fig. 1.7 The base wire]] 

&lt;!--T:21--&gt;
Hit the zero key on the numpad to set the view to axonometric.

&lt;!--T:22--&gt;
Activate the [[Part Workbench]].

&lt;!--T:23--&gt;
Click on the [[Image:Part_Extrude.png|32px]] [[Part_Extrude|Extrude]] tool.

&lt;!--T:24--&gt;
On the Tasks tab on the left, select the '''Wire''' object. Then enter the desired length, say 750mm. Leave the direction at Z. Click Apply. You should now have an '''Extrude''' object in the Project tab ''(fig. 1.8)''

&lt;!--T:25--&gt;
[[Image:Tutorial-normand08.jpg|center|frame|Fig. 1.8 The extruded object]]

&lt;!--T:26--&gt;
This method has a minor caveat compared to the other one: to edit the shape, you need to edit the Wire, it's not as easy to do as the previous method.

&lt;!--T:27--&gt;
And there are a few other ways to do it too! I hope these two examples get you started. You'll sure hit some snags along the way (I did when I first learned FreeCAD, and I do have 3D CAD experience), but don't hesitate to ask questions on the [http://forum.freecadweb.org FreeCAD forum]!



&lt;!--T:28--&gt;
&lt;div id=&quot;DraftPlaneButton&quot;&gt;Note on Draft working plane button:&lt;/div&gt;
The label on your button may be different, depending on your version and also on
what you were doing beforehand.  The button label could read: &quot;top&quot;, &quot;front&quot;, &quot;side&quot;, &quot;None&quot; or a Vector representation such as d(0.0,0.0,1.0). It can also be blank. For example:

&lt;!--T:29--&gt;
[[Image:DraftPlaneNone.png|left|frame|Select Plane None]]

&lt;!--T:30--&gt;
[[Image:DraftPlaneTop.png|left|frame|Select Plane Top]]

&lt;!--T:31--&gt;
[[Image:DraftPlaneView.png|left|frame|Select Plane View]]
{{clear}}

&lt;!--T:32--&gt;
The above instructions will work, no matter what label your button has.


&lt;!--T:33--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Benutzereinstellungen vornehmen</title>
    <ns>0</ns>
    <id>1276</id>
    <revision>
      <id>107957</id>
      <parentid>95777</parentid>
      <timestamp>2014-09-01T10:54:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>njhovis0bbygo84goy332x0cf3smzaq</sha1>
      <text xml:space="preserve" bytes="54">&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Benutzeroberfläche anpassen</title>
    <ns>0</ns>
    <id>1281</id>
    <revision>
      <id>107958</id>
      <parentid>95778</parentid>
      <timestamp>2014-09-01T10:54:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Boiler NonCommand</title>
    <ns>0</ns>
    <id>9791</id>
    <revision>
      <id>87485</id>
      <parentid>54725</parentid>
      <timestamp>2014-05-26T21:23:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>6i9pirva31fr3v0mxfuxnjw6gyrkvel</sha1>
      <text xml:space="preserve" bytes="389">&lt;!-- Boiler_NonCommand --&gt;
 __NOTOC__
{{VeryImportantMessage|Page mock-up for discussion.}}
==Page Topic==

===Overview===

&lt;br&gt;
===Chapter 1===

&lt;br&gt;
===Chapter 2===

&lt;br&gt; 
===Chapter 3===

&lt;br&gt;
===Notes===
* 
&lt;br&gt;
===Issues===
* 
&lt;br&gt;
===More===
*

&lt;br&gt;

{{docnav|Previous|Next}}

{{languages | {{|}} {{|}} }}

[[Category:Cat1]]
[[Category:Cat2]]
&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Branding</title>
    <ns>0</ns>
    <id>13</id>
    <revision>
      <id>114298</id>
      <parentid>114297</parentid>
      <timestamp>2014-10-14T19:56:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>17lry252pilfvv3q7amrf7obbbj25n2</sha1>
      <text xml:space="preserve" bytes="4424">
&lt;!--T:1--&gt;
This article describes the '''Branding''' of FreeCAD. Branding means to start your own application on base of FreeCAD. That can be only your own executable or [[Splash screen|splash screen]] till a complete reworked program. On base of the flexible architecture of FreeCAD it's easy to use it as base for your own special purpose program.

=== General === &lt;!--T:2--&gt;
Most of the branding is done in the '''MainCmd.cpp'' or ''MainGui.cpp'''. These Projects generate the executable files of FreeCAD. To make your own Brand just copy the Main or MainGui projects and give the executable an own name, e.g. FooApp.exe. 
The most important settings for a new look can be made in one place in the main() function. Here is the code section that controls the branding:


&lt;syntaxhighlight&gt;
 int main( int argc, char ** argv )
 {
   // Name and Version of the Application
   App::Application::Config()[&quot;ExeName&quot;] = &quot;FooApp&quot;;
   App::Application::Config()[&quot;ExeVersion&quot;] = &quot;0.7&quot;;
 
   // set the banner (for loging and console)
   App::Application::Config()[&quot;CopyrightInfo&quot;] = sBanner;
   App::Application::Config()[&quot;AppIcon&quot;] = &quot;FooAppIcon&quot;;
   App::Application::Config()[&quot;SplashScreen&quot;] = &quot;FooAppSplasher&quot;;
   App::Application::Config()[&quot;StartWorkbench&quot;] = &quot;Part design&quot;;
   App::Application::Config()[&quot;HiddenDockWindow&quot;] = &quot;Property editor&quot;;
   App::Application::Config()[&quot;SplashAlignment&quot; ] = &quot;Bottom|Left&quot;;
   App::Application::Config()[&quot;SplashTextColor&quot; ] = &quot;#000000&quot;; // black
 
   // Inits the Application 
   App::Application::Config()[&quot;RunMode&quot;] = &quot;Gui&quot;;
   App::Application::init(argc,argv);
 
   Gui::BitmapFactory().addXPM(&quot;FooAppSplasher&quot;, ( const char** ) splash_screen);
 
   Gui::Application::initApplication();
   Gui::Application::runApplication();
   App::Application::destruct();
 
   return 0;
 }
&lt;/syntaxhighlight&gt;

&lt;!--T:3--&gt;
The first Config entry defines the program name. This is not the executable name, which can be changed by renaming or by compiler settings, but the name that is displayed in the task bar on windows or in the program list on Unix systems.

&lt;!--T:4--&gt;
The next lines define the Config entries of your FooApp Application. A description of the Config and its entries you find in [[Start up and Configuration]].

=== Images === &lt;!--T:5--&gt;
Image resources are compiled into FreeCAD using [http://qt-project.org/doc/qt-4.8/resources.html Qt's resource system]. Therefore you have to write a .qrc file, an XML-based file format that lists image files on the disk but also any other kind of resource files. To load the compiled resources inside the application you have to add a line

&lt;syntaxhighlight&gt;
 Q_INIT_RESOURCE(FooApp); 
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
into the main() function. Alternatively, if you have an image in XPM format you can directly include it into your main.cpp and add the following line to register it:

&lt;syntaxhighlight&gt;
 Gui::BitmapFactory().addXPM(&quot;FooAppSplasher&quot;, ( const char** ) splash_screen);
&lt;/syntaxhighlight&gt;

=== Branding XML === &lt;!--T:7--&gt;
In FreeCAD there is also a method supported without writing a customized main() function. For this method you must write a file name called branding.xml and put it into the installation directory of FreeCAD. Here is an example with all supported tags:

&lt;syntaxhighlight&gt;
 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
 &lt;Branding&gt;
 	&lt;Application&gt;FooApp&lt;/Application&gt;
 	&lt;WindowTitle&gt;Foo App in title bar&lt;/WindowTitle&gt;
 	&lt;BuildVersionMajor&gt;1&lt;/BuildVersionMajor&gt;
 	&lt;BuildVersionMinor&gt;0&lt;/BuildVersionMinor&gt;
 	&lt;BuildRevision&gt;1234&lt;/BuildRevision&gt;
 	&lt;BuildRevisionDate&gt;2014/1/1&lt;/BuildRevisionDate&gt;
 	&lt;CopyrightInfo&gt;(c) My copyright&lt;/CopyrightInfo&gt;
 	&lt;MaintainerUrl&gt;Foo App URL&lt;/MaintainerUrl&gt;
 	&lt;ProgramLogo&gt;Path to logo (appears in bottom right corner)&lt;/ProgramLogo&gt;
 	&lt;WindowIcon&gt;Path to icon file&lt;/WindowIcon&gt;
 	&lt;ProgramIcons&gt;Path to program icons&lt;/ProgramIcons&gt;
 	&lt;SplashScreen&gt;splashscreen.png&lt;/SplashScreen&gt;
 	&lt;SplashAlignment&gt;Bottom|Left&lt;/SplashAlignment&gt;
 	&lt;SplashTextColor&gt;#ffffff&lt;/SplashTextColor&gt;
 	&lt;SplashInfoColor&gt;#c8c8c8&lt;/SplashInfoColor&gt;
 	&lt;StartWorkbench&gt;PartDesignWorkbench&lt;/StartWorkbench&gt;
 &lt;/Branding&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
All of the listed tags are optional.

&lt;!--T:9--&gt;
{{docnav|Testing|Localisation}}

&lt;!--T:10--&gt;
[[Category:Developer Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Builtin modules</title>
    <ns>0</ns>
    <id>14</id>
    <revision>
      <id>122811</id>
      <parentid>122810</parentid>
      <timestamp>2014-11-15T22:16:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>cmsv6p29ydlz9lsb1se3udhrfz04yzh</sha1>
      <text xml:space="preserve" bytes="1130">
&lt;!--T:12--&gt;
This page presents more in-depth information over the built-in FreeCAD modules, and what are the functions and properties availible to you. This page is not a complete list of all the contents of these modules, and, because of the fast evolution of FreeCAD, the information presented here might be slightly outdated, but it should give you a good overview of the possibilities. For complete list of the modules content, use the dir(module) function in the interpreter.

__NOTOC__

=== [[FreeCAD_API|The FreeCAD module]] === &lt;!--T:1--&gt;

=== [[Base_API|Base]] === &lt;!--T:2--&gt;

=== [[Vector_API|Vectors]] === &lt;!--T:3--&gt;

=== [[Matrix_API|Matrixes]] === &lt;!--T:4--&gt;

=== [[Console_API|Console module]] === &lt;!--T:5--&gt;

=== [[FreeCADGui_API|The FreeCADGui Module]] === &lt;!--T:6--&gt;

=== [[Selection_API|Selection module]] === &lt;!--T:7--&gt;

=== [[Placement_API|Placement]] === &lt;!--T:8--&gt;

=== [[Object_API|Document Objects]] === &lt;!--T:9--&gt;

=== [[ViewObject_API|View Objects]] === &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[Category:API]]
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>CAM project</title>
    <ns>0</ns>
    <id>415</id>
    <revision>
      <id>123576</id>
      <parentid>123575</parentid>
      <timestamp>2014-11-17T20:55:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>il5lts1nynjncf0pnay0hlwpfidxre4</sha1>
      <text xml:space="preserve" bytes="922">
&lt;!--T:1--&gt;
This is the project plan for the FreeCAD CAM workbench as part of the [[Development roadmap]].

&lt;!--T:2--&gt;
The CAM module is in early phase. A forum is dedicated to it : [http://forum.freecadweb.org/viewforum.php?f=15 forum CAM freecad]

== Purpose and principles == &lt;!--T:3--&gt;


== Outcome == &lt;!--T:4--&gt;


== Brainstorming == &lt;!--T:5--&gt;


=== IRC Notes: === &lt;!--T:6--&gt;
http://paste.ubuntu.com/1262228/

== Organizing == &lt;!--T:7--&gt;

== Code == &lt;!--T:8--&gt;
https://github.com/andrewjrobinson/FreeCAD_sf_master/tree/cam-py

== Discussion == &lt;!--T:9--&gt;
* [http://forum.freecadweb.org/viewtopic.php?f=15&amp;t=4341 CAM features]
* [http://forum.freecadweb.org/viewtopic.php?f=15&amp;t=4450&amp;start=10 Postprocessor discussion]
* [http://forum.freecadweb.org/viewtopic.php?f=15&amp;t=3601 How-to Install CAM -module]

== Next actions == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Cam Module</title>
    <ns>0</ns>
    <id>15</id>
    <revision>
      <id>96880</id>
      <parentid>96879</parentid>
      <timestamp>2014-07-22T20:40:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5um9nfanavnguoqrmt1939mshtfeo3h</sha1>
      <text xml:space="preserve" bytes="174">
== Introduction == &lt;!--T:1--&gt;
This module is about CAM (Computer Aided Machining).

&lt;!--T:2--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Changelog</title>
    <ns>0</ns>
    <id>688</id>
    <revision>
      <id>129293</id>
      <parentid>129292</parentid>
      <timestamp>2014-12-06T20:13:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>l02orrwb75ih7hv74ixc2y1y5d3w9nw</sha1>
      <text xml:space="preserve" bytes="247">
&lt;!--T:1--&gt;
The FreeCAD changelog is maintained on our mantis tracker:

&lt;!--T:2--&gt;
http://www.freecadweb.org/tracker/changelog_page.php

&lt;!--T:3--&gt;
[[Category:Administration]]
[[Category:Developer]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Clipping plane</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>102713</id>
      <parentid>83861</parentid>
      <timestamp>2014-08-03T12:29:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>3a320vudyt6y68dyosyzm089rbba8wp</sha1>
      <text xml:space="preserve" bytes="81">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
Replaced by Std ClippingPlane</text>
    </revision>
  </page>
  <page>
    <title>Code snippets</title>
    <ns>0</ns>
    <id>17</id>
    <revision>
      <id>132781</id>
      <parentid>131794</parentid>
      <timestamp>2014-12-22T18:11:06Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code= }} and supp spaces</comment>
      <sha1>i29s3wztz185lyfqds6s1u3q6k6ur5r</sha1>
      <text xml:space="preserve" bytes="39791">
&lt;!--T:1--&gt;
This page contains examples, pieces, chunks of FreeCAD python code collected from users experiences and discussions on the forums. Read and use it as a start for your own scripts...


=== A typical InitGui.py file === &lt;!--T:2--&gt;
Every module must contain, besides your main module file, an InitGui.py file, responsible for inserting the module in the main Gui. This is an example of a simple one. 

{{Code|code=
class ScriptWorkbench (Workbench): 
    MenuText = &quot;Scripts&quot;
    def Initialize(self):
        import Scripts # assuming Scripts.py is your module
        list = [&quot;Script_Cmd&quot;] # That list must contain command names, that can be defined in Scripts.py
        self.appendToolbar(&quot;My Scripts&quot;,list) 
        
Gui.addWorkbench(ScriptWorkbench())
}}


=== A typical module file === &lt;!--T:3--&gt;
This is an example of a main module file, containing everything your module does. It is the Scripts.py file invoked by the previous example. You can have all your custom commands here.

{{Code|code=
 import FreeCAD, FreeCADGui 
 
class ScriptCmd: 
   def Activated(self): 
       # Here your write what your ScriptCmd does...
       FreeCAD.Console.PrintMessage('Hello, World!')
   def GetResources(self): 
       return {'Pixmap' : 'path_to_an_icon/myicon.png', 'MenuText': 'Short text', 'ToolTip': 'More detailed text'} 
       
FreeCADGui.addCommand('Script_Cmd', ScriptCmd())
}}


=== Import a new filetype === &lt;!--T:4--&gt;
Making an importer for a new filetype in FreeCAD is easy. FreeCAD doesn't consider that you import data in an opened document, but rather that you simply can directly open the new filetype. So what you need to do is to add the new file extension to FreeCAD's list of known extensions, and write the code that will read the file and create the FreeCAD objects you want:

&lt;!--T:5--&gt;
This line must be added to the InitGui.py file to add the new file extension to the list:

{{Code|code=
# Assumes Import_Ext.py is the file that has the code for opening and reading .ext files
FreeCAD.addImportType(&quot;Your new File Type (*.ext)&quot;,&quot;Import_Ext&quot;) 
}}

&lt;!--T:6--&gt;
Then in the Import_Ext.py file:

{{Code|code=
def open(filename): 
   doc=App.newDocument()
   # here you do all what is needed with filename, read, classify data, create corresponding FreeCAD objects
   doc.recompute()
}}

&lt;!--T:7--&gt;
To export your document to some new filetype works the same way, except that you use:
 FreeCAD.addExportType(&quot;Your new File Type (*.ext)&quot;,&quot;Export_Ext&quot;) 

=== Adding a line === &lt;!--T:8--&gt;
A line simply has 2 points.

{{Code|code=

import Part,PartGui 
doc=App.activeDocument() 
# add a line element to the document and set its points 
l=Part.Line()
l.StartPoint=(0.0,0.0,0.0)
l.EndPoint=(1.0,1.0,1.0)
doc.addObject(&quot;Part::Feature&quot;,&quot;Line&quot;).Shape=l.toShape() 
doc.recompute()
}}


=== Adding a polygon === &lt;!--T:9--&gt;
A polygon is simply a set of connected line segments (a polyline in AutoCAD). It doesn't need to be closed.

{{Code|code=
import Part,PartGui 
doc=App.activeDocument()
n=list() 
# create a 3D vector, set its coordinates and add it to the list 
v=App.Vector(0,0,0) 
n.append(v) 
v=App.Vector(10,0,0) 
n.append(v) 
#... repeat for all nodes 
# Create a polygon object and set its nodes 
p=doc.addObject(&quot;Part::Polygon&quot;,&quot;Polygon&quot;) 
p.Nodes=n 
doc.recompute()
}}


=== Adding and removing an object to a group === &lt;!--T:10--&gt;

{{Code|code=
doc=App.activeDocument() 
grp=doc.addObject(&quot;App::DocumentObjectGroup&quot;, &quot;Group&quot;) 
lin=doc.addObject(&quot;Part::Feature&quot;, &quot;Line&quot;)
grp.addObject(lin) # adds the lin object to the group grp
grp.removeObject(lin) # removes the lin object from the group grp
}}

&lt;!--T:11--&gt;
Note: You can even add other groups to a group...

=== Adding a Mesh === &lt;!--T:12--&gt;

{{Code|code=
import Mesh
doc=App.activeDocument()
# create a new empty mesh
m = Mesh.Mesh()
# build up box out of 12 facets
m.addFacet(0.0,0.0,0.0, 0.0,0.0,1.0, 0.0,1.0,1.0)
m.addFacet(0.0,0.0,0.0, 0.0,1.0,1.0, 0.0,1.0,0.0)
m.addFacet(0.0,0.0,0.0, 1.0,0.0,0.0, 1.0,0.0,1.0)
m.addFacet(0.0,0.0,0.0, 1.0,0.0,1.0, 0.0,0.0,1.0)
m.addFacet(0.0,0.0,0.0, 0.0,1.0,0.0, 1.0,1.0,0.0)
m.addFacet(0.0,0.0,0.0, 1.0,1.0,0.0, 1.0,0.0,0.0)
m.addFacet(0.0,1.0,0.0, 0.0,1.0,1.0, 1.0,1.0,1.0)
m.addFacet(0.0,1.0,0.0, 1.0,1.0,1.0, 1.0,1.0,0.0)
m.addFacet(0.0,1.0,1.0, 0.0,0.0,1.0, 1.0,0.0,1.0)
m.addFacet(0.0,1.0,1.0, 1.0,0.0,1.0, 1.0,1.0,1.0)
m.addFacet(1.0,1.0,0.0, 1.0,1.0,1.0, 1.0,0.0,1.0)
m.addFacet(1.0,1.0,0.0, 1.0,0.0,1.0, 1.0,0.0,0.0)
# scale to a edge langth of 100
m.scale(100.0)
# add the mesh to the active document
me=doc.addObject(&quot;Mesh::Feature&quot;,&quot;Cube&quot;)
me.Mesh=m
}}


=== Adding an arc or a circle === &lt;!--T:13--&gt;

{{Code|code=
import Part
doc = App.activeDocument()
c = Part.Circle() 
c.Radius=10.0  
f = doc.addObject(&quot;Part::Feature&quot;, &quot;Circle&quot;) # create a document with a circle feature 
f.Shape = c.toShape() # Assign the circle shape to the shape property 
doc.recompute()
}}


=== Accessing and changing representation of an object === &lt;!--T:14--&gt;
Each object in a FreeCAD document has an associated view representation object that stores all the parameters that define how the object appear, like color, linewidth, etc...

{{Code|code=
gad=Gui.activeDocument()   # access the active document containing all 
                          # view representations of the features in the
                          # corresponding App document 

v=gad.getObject(&quot;Cube&quot;)    # access the view representation to the Mesh feature 'Cube' 
v.ShapeColor               # prints the color to the console 
v.ShapeColor=(1.0,1.0,1.0) # sets the shape color to white
}}


=== Observing mouse events in the 3D viewer via Python === &lt;!--T:15--&gt;
The Inventor framework allows to add one or more callback nodes to the scenegraph of the viewer. By default in FreeCAD one callback node is installed per viewer which allows to add global or static C++ functions. In the appropriate Python binding some methods are provided to make use of this technique from within Python code.

{{Code|code=
App.newDocument()
v=Gui.activeDocument().activeView()
 
#This class logs any mouse button events. As the registered callback function fires twice for 'down' and
#'up' events we need a boolean flag to handle this.
class ViewObserver:
   def logPosition(self, info):
       down = (info[&quot;State&quot;] == &quot;DOWN&quot;)
       pos = info[&quot;Position&quot;]
       if (down):
           FreeCAD.Console.PrintMessage(&quot;Clicked on position: (&quot;+str(pos[0])+&quot;, &quot;+str(pos[1])+&quot;)\n&quot;)
       
o = ViewObserver()
c = v.addEventCallback(&quot;SoMouseButtonEvent&quot;,o.logPosition)
}}

&lt;!--T:16--&gt;
Now, pick somewhere on the area in the 3D viewer and observe the messages in the output window. To finish the observation just call

{{Code|code=
v.removeEventCallback(&quot;SoMouseButtonEvent&quot;,c)
}}

&lt;!--T:17--&gt;
The following event types are supported
* SoEvent -- all kind of events
* SoButtonEvent -- all mouse button and key events
* SoLocation2Event -- 2D movement events (normally mouse movements)
* SoMotion3Event -- 3D movement events (normally spaceball)
* SoKeyboardEvent -- key down and up events
* SoMouseButtonEvent -- mouse button down and up events
* SoSpaceballButtonEvent -- spaceball button down and up events

&lt;!--T:18--&gt;
The Python function that can be registered with addEventCallback() expects a dictionary. Depending on the watched event the dictionary can contain different keys. 
 
For all events it has the keys: 
* Type -- the name of the event type i.e. SoMouseEvent, SoLocation2Event, ... 
* Time -- the current time as string 
* Position -- a tuple of two integers, mouse position 
* ShiftDown -- a boolean, true if Shift was pressed otherwise false 
* CtrlDown -- a boolean, true if Ctrl was pressed otherwise false 
* AltDown -- a boolean, true if Alt was pressed otherwise false 
 
For all button events, i.e. keyboard, mouse or spaceball events 
* State -- A string 'UP' if the button was up, 'DOWN' if it was down or 'UNKNOWN' for all other cases 
 
For keyboard events: 
* Key -- a character of the pressed key 
 
For mouse button event 
* Button -- The pressed button, could be BUTTON1, ..., BUTTON5 or ANY 
 
For spaceball events: 
* Button -- The pressed button, could be BUTTON1, ..., BUTTON7 or ANY 
 
And finally motion events: 
* Translation -- a tuple of three floats 
* Rotation -- a quaternion for the rotation, i.e. a tuple of four floats

=== Manipulate the scenegraph in Python === &lt;!--T:19--&gt;
It is also possible to get and change the scenegraph in Python, with the 'pivy' module -- a Python binding for Coin.

{{Code|code=
from pivy.coin import *                # load the pivy module
view = Gui.ActiveDocument.ActiveView   # get the active viewer
root = view.getSceneGraph()            # the root is an SoSeparator node
root.addChild(SoCube())
view.fitAll()
}}

&lt;!--T:20--&gt;
The Python API of pivy is created by using the tool SWIG. As we use in FreeCAD some self-written nodes you cannot create them directly in Python.
However, it is possible to create a node by its internal name. An instance of the type 'SoFCSelection' can be created with

{{Code|code=
type = SoType.fromName(&quot;SoFCSelection&quot;)
node = type.createInstance()
}}


=== Adding and removing objects to/from the scenegraph === &lt;!--T:21--&gt;
Adding new nodes to the scenegraph can be done this way. Take care of always adding a SoSeparator to contain the geometry, coordinates and material info of a same object. The following example adds a red line from (0,0,0) to (10,0,0):

{{Code|code=
from pivy import coin
sg = Gui.ActiveDocument.ActiveView.getSceneGraph()
co = coin.SoCoordinate3()
pts = [[0,0,0],[10,0,0]]
co.point.setValues(0,len(pts),pts)
ma = coin.SoBaseColor()
ma.rgb = (1,0,0)
li = coin.SoLineSet()
li.numVertices.setValue(2)
no = coin.SoSeparator()
no.addChild(co)
no.addChild(ma)
no.addChild(li)
sg.addChild(no)
}}

&lt;!--T:22--&gt;
To remove it, simply issue:

{{Code|code=
sg.removeChild(no)
}}


===Adding custom widgets to the interface=== &lt;!--T:23--&gt;
You can create custom widgets with Qt designer, transform them into a python script, and then load them into the FreeCAD interface with PyQt4.

&lt;!--T:24--&gt;
The python code produced by the Ui python compiler (the tool that converts qt-designer .ui files into python code) generally looks like this (it is simple, you can also code it directly in python):

{{Code|code=
class myWidget_Ui(object):
 def setupUi(self, myWidget):
   myWidget.setObjectName(&quot;my Nice New Widget&quot;)
   myWidget.resize(QtCore.QSize(QtCore.QRect(0,0,300,100).size()).expandedTo(myWidget.minimumSizeHint())) # sets size of the widget
 
   self.label = QtGui.QLabel(myWidget) # creates a label
   self.label.setGeometry(QtCore.QRect(50,50,200,24)) # sets its size
   self.label.setObjectName(&quot;label&quot;) # sets its name, so it can be found by name

 def retranslateUi(self, draftToolbar): # built-in QT function that manages translations of widgets
   myWidget.setWindowTitle(QtGui.QApplication.translate(&quot;myWidget&quot;, &quot;My Widget&quot;, None, QtGui.QApplication.UnicodeUTF8))
   self.label.setText(QtGui.QApplication.translate(&quot;myWidget&quot;, &quot;Welcome to my new widget!&quot;, None, QtGui.QApplication.UnicodeUTF8))				
}}

&lt;!--T:25--&gt;
Then, all you need to do is to create a reference to the FreeCAD Qt window, insert a custom widget into it, and &quot;transform&quot; this widget into yours with the Ui code we just made:

{{Code|code=
app = QtGui.qApp
FCmw = app.activeWindow() # the active qt window, = the freecad window since we are inside it
myNewFreeCADWidget = QtGui.QDockWidget() # create a new dckwidget
myNewFreeCADWidget.ui = myWidget_Ui() # load the Ui script
myNewFreeCADWidget.ui.setupUi(myNewFreeCADWidget) # setup the ui
FCmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,myNewFreeCADWidget) # add the widget to the main window
}}


===Adding a Tab to the Combo View=== &lt;!--T:26--&gt;
The following code allows you to add a tab to the FreeCAD ComboView, besides the &quot;Project&quot; and &quot;Tasks&quot; tabs. It also uses the uic module to load an ui file directly in that tab.

{{Code|code=
# create new Tab in ComboView
from PySide import QtGui,QtCore
#from PySide import uic

def getMainWindow():
   &quot;returns the main window&quot;
   # using QtGui.qApp.activeWindow() isn't very reliable because if another
   # widget than the mainwindow is active (e.g. a dialog) the wrong widget is
   # returned
   toplevel = QtGui.qApp.topLevelWidgets()
   for i in toplevel:
       if i.metaObject().className() == &quot;Gui::MainWindow&quot;:
           return i
   raise Exception(&quot;No main window found&quot;)

def getComboView(mw):
   dw=mw.findChildren(QtGui.QDockWidget)
   for i in dw:
       if str(i.objectName()) == &quot;Combo View&quot;:
           return i.findChild(QtGui.QTabWidget)
       elif str(i.objectName()) == &quot;Python Console&quot;:
           return i.findChild(QtGui.QTabWidget)
   raise Exception (&quot;No tab widget found&quot;)

mw = getMainWindow()
tab = getComboView(getMainWindow())
tab2=QtGui.QDialog()
tab.addTab(tab2,&quot;A Special Tab&quot;)

#uic.loadUi(&quot;/myTaskPanelforTabs.ui&quot;,tab2)
tab2.show()
#tab.removeTab(2)

}}

===Enable or disable a window=== &lt;!--T:47--&gt;

{{Code|code=
from PySide import QtGui
mw=FreeCADGui.getMainWindow()
dws=mw.findChildren(QtGui.QDockWidget)

# objectName may be :
# &quot;Report view&quot;
# &quot;Tree view&quot;
# &quot;Property view&quot;
# &quot;Selection view&quot;
# &quot;Combo View&quot;
# &quot;Python console&quot;
# &quot;draftToolbar&quot;

for i in dws:
  if i.objectName() == &quot;Report view&quot;:
    dw=i
    break

va=dw.toggleViewAction()
va.setChecked(True)        # True or False
dw.setVisible(True)        # True or False
}}


===Opening a custom webpage=== &lt;!--T:27--&gt;

{{Code|code=
import WebGui
WebGui.openBrowser(&quot;http://www.example.com&quot;)
}}


===Getting the HTML contents of an opened webpage=== &lt;!--T:28--&gt;

{{Code|code=
from PyQt4 import QtGui,QtWebKit
a = QtGui.qApp
mw = a.activeWindow()
v = mw.findChild(QtWebKit.QWebFrame)
html = unicode(v.toHtml())
print html
}}


===Retrieve and use the coordinates of 3 selected points or objects=== &lt;!--T:29--&gt;

{{Code|code=
# -*- coding: utf-8 -*-
# the line above to put the accentuated in the remarks
# If this line is missing, an error will be returned
# extract and use the coordinates of 3 objects selected
import Part, FreeCAD, math, PartGui, FreeCADGui
from FreeCAD import Base, Console
sel = FreeCADGui.Selection.getSelection() # &quot; sel &quot; contains the items selected
if len(sel)!=3 :
  # If there are no 3 objects selected, an error is displayed in the report view
  # The \r and \n at the end of line mean return and the newline CR + LF.
  Console.PrintError(&quot;Select 3 points exactly\r\n&quot;)
else :
  points=[]
  for obj in sel:
    points.append(obj.Shape.BoundBox.Center)

  for pt in points:
    # display of the coordinates in the report view
    Console.PrintMessage(str(pt.x)+&quot;\r\n&quot;)
    Console.PrintMessage(str(pt.y)+&quot;\r\n&quot;)
    Console.PrintMessage(str(pt.z)+&quot;\r\n&quot;)

  Console.PrintMessage(str(pt[1]) + &quot;\r\n&quot;)
}}


===List all objects=== &lt;!--T:30--&gt;

{{Code|code=
# -*- coding: utf-8 -*-
import FreeCAD,Draft
# List all objects of the document
doc = FreeCAD.ActiveDocument
objs = FreeCAD.ActiveDocument.Objects
#App.Console.PrintMessage(str(objs) + &quot;\n&quot;)
#App.Console.PrintMessage(str(len(FreeCAD.ActiveDocument.Objects)) + &quot; Objects&quot;  + &quot;\n&quot;)

for obj in objs:
    a = obj.Name                                             # list the Name  of the object  (not modifiable)
    b = obj.Label                                            # list the Label of the object  (modifiable)
    try:
        c = obj.LabelText                                    # list the LabeText of the text (modifiable)
        App.Console.PrintMessage(str(a) +&quot; &quot;+ str(b) +&quot; &quot;+ str(c) + &quot;\n&quot;) # Displays the Name the Label and the text
    except:
        App.Console.PrintMessage(str(a) +&quot; &quot;+ str(b) + &quot;\n&quot;) # Displays the Name and the Label of the object

#doc.removeObject(&quot;Box&quot;) # Clears the designated object
}}


===Function resident with the mouse click action=== &lt;!--T:31--&gt;

{{Code|code=
# -*- coding: utf-8 -*-
# causes an action to the mouse click on an object
# This function remains resident (in memory) with the function &quot;addObserver(s)&quot;
# &quot;removeObserver(s) # Uninstalls the resident function
class SelObserver:
    def addSelection(self,doc,obj,sub,pnt):               # Selection
        App.Console.PrintMessage(&quot;addSelection&quot;+ &quot;\n&quot;)
        App.Console.PrintMessage(str(doc)+ &quot;\n&quot;)          # Name of the document
        App.Console.PrintMessage(str(obj)+ &quot;\n&quot;)          # Name of the object
        App.Console.PrintMessage(str(sub)+ &quot;\n&quot;)          # The part of the object name
        App.Console.PrintMessage(str(pnt)+ &quot;\n&quot;)          # Coordinates of the object
        App.Console.PrintMessage(&quot;______&quot;+ &quot;\n&quot;)

    def removeSelection(self,doc,obj,sub):                # Delete the selected object
        App.Console.PrintMessage(&quot;removeSelection&quot;+ &quot;\n&quot;)
    def setSelection(self,doc):                           # Selection in ComboView
        App.Console.PrintMessage(&quot;setSelection&quot;+ &quot;\n&quot;)
    def clearSelection(self,doc):                         # If click on the screen, clear the selection
        App.Console.PrintMessage(&quot;clearSelection&quot;+ &quot;\n&quot;)  # If click on another object, clear the previous object
s =SelObserver()
FreeCADGui.Selection.addObserver(s)                       # install the function mode resident
#FreeCADGui.Selection.removeObserver(s)                   # Uninstall the resident function
}}


===List the components of an object=== &lt;!--T:32--&gt;

{{Code|code=
# -*- coding: utf-8 -*-
# This function list the components of an object
# and extract this object its XYZ coordinates,
# its edges and their lengths center of mass and coordinates
# its faces and their center of mass
# its faces and their surfaces and coordinates
# 8/05/2014

import Draft,Part
def detail():
    sel = FreeCADGui.Selection.getSelection()   # Select an object
    if len(sel) != 0:                           # If there is a selection then
        Vertx=[]
        Edges=[]
        Faces=[]
        compt_V=0
        compt_E=0
        compt_F=0
        pas    =0
        perimetre = 0.0   
        EdgesLong = []

        # Displays the &quot;Name&quot; and the &quot;Label&quot; of the selection
        App.Console.PrintMessage(&quot;Selection &gt; &quot; + str(sel[0].Name) + &quot;  &quot; + str(sel[0].Label) +&quot;\n&quot;+&quot;\n&quot;)

        for j in enumerate(sel[0].Shape.Edges):                                     # Search the &quot;Edges&quot; and their lengths
            compt_E+=1
            Edges.append(&quot;Edge%d&quot; % (j[0]+1))
            EdgesLong.append(str(sel[0].Shape.Edges[compt_E-1].Length))
            perimetre += (sel[0].Shape.Edges[compt_E-1].Length)                     # calculates the perimeter

            # Displays the &quot;Edge&quot; and its length
            App.Console.PrintMessage(&quot;Edge&quot;+str(compt_E)+&quot; Length &gt; &quot;+str(sel[0].Shape.Edges[compt_E-1].Length)+&quot;\n&quot;)

            # Displays the &quot;Edge&quot; and its center mass
            App.Console.PrintMessage(&quot;Edge&quot;+str(compt_E)+&quot; Center &gt; &quot;+str(sel[0].Shape.Edges[compt_E-1].CenterOfMass)+&quot;\n&quot;)

            num = sel[0].Shape.Edges[compt_E-1].Vertexes[0]
            Vertx.append(&quot;X1: &quot;+str(num.Point.x))
            Vertx.append(&quot;Y1: &quot;+str(num.Point.y))
            Vertx.append(&quot;Z1: &quot;+str(num.Point.z))
            # Displays the coordinates 1
            App.Console.PrintMessage(&quot;X1: &quot;+str(num.Point[0])+&quot; Y1: &quot;+str(num.Point[1])+&quot; Z1: &quot;+str(num.Point[2])+&quot;\n&quot;)

            try:
                num = sel[0].Shape.Edges[compt_E-1].Vertexes[1]
                Vertx.append(&quot;X2: &quot;+str(num.Point.x))
                Vertx.append(&quot;Y2: &quot;+str(num.Point.y))
                Vertx.append(&quot;Z2: &quot;+str(num.Point.z))
            except:
                Vertx.append(&quot;-&quot;)
                Vertx.append(&quot;-&quot;)
                Vertx.append(&quot;-&quot;)
            # Displays the coordinates 2
            App.Console.PrintMessage(&quot;X2: &quot;+str(num.Point[0])+&quot; Y2: &quot;+str(num.Point[1])+&quot; Z2: &quot;+str(num.Point[2])+&quot;\n&quot;)

            App.Console.PrintMessage(&quot;\n&quot;)
        App.Console.PrintMessage(&quot;Perimeter of the form  : &quot;+str(perimetre)+&quot;\n&quot;) 

        App.Console.PrintMessage(&quot;\n&quot;)
        FacesSurf = []
        for j in enumerate(sel[0].Shape.Faces):                                      # Search the &quot;Faces&quot; and their surface
            compt_F+=1
            Faces.append(&quot;Face%d&quot; % (j[0]+1))
            FacesSurf.append(str(sel[0].Shape.Faces[compt_F-1].Area))

            # Displays 'Face' and its surface
            App.Console.PrintMessage(&quot;Face&quot;+str(compt_F)+&quot; &gt;  Surface &quot;+str(sel[0].Shape.Faces[compt_F-1].Area)+&quot;\n&quot;)

            # Displays 'Face' and its CenterOfMass
            App.Console.PrintMessage(&quot;Face&quot;+str(compt_F)+&quot; &gt;  Center  &quot;+str(sel[0].Shape.Faces[compt_F-1].CenterOfMass)+&quot;\n&quot;)

            # Displays 'Face' and its Coordinates
            FacesCoor = []
            fco = 0
            for f0 in sel[0].Shape.Faces[compt_F-1].Vertexes:                        # Search the Vertexes of the face
                fco += 1
                FacesCoor.append(&quot;X&quot;+str(fco)+&quot;: &quot;+str(f0.Point.x))
                FacesCoor.append(&quot;Y&quot;+str(fco)+&quot;: &quot;+str(f0.Point.y))
                FacesCoor.append(&quot;Z&quot;+str(fco)+&quot;: &quot;+str(f0.Point.z))

            # Displays 'Face' and its Coordinates
            App.Console.PrintMessage(&quot;Face&quot;+str(compt_F)+&quot; &gt;  Coordinate&quot;+str(FacesCoor)+&quot;\n&quot;)

            # Displays 'Face' and its Volume
            App.Console.PrintMessage(&quot;Face&quot;+str(compt_F)+&quot; &gt;  Volume  &quot;+str(sel[0].Shape.Faces[compt_F-1].Volume)+&quot;\n&quot;)
            App.Console.PrintMessage(&quot;\n&quot;)

        # Displays the total surface of the form
        App.Console.PrintMessage(&quot;Surface of the form    : &quot;+str(sel[0].Shape.Area)+&quot;\n&quot;)

        # Displays the total Volume of the form
        App.Console.PrintMessage(&quot;Volume  of the form    : &quot;+str(sel[0].Shape.Volume)+&quot;\n&quot;)

detail()
}}


===List the PropertiesList=== &lt;!--T:33--&gt;

{{Code|code=
import FreeCADGui
from FreeCAD import Console
o = App.ActiveDocument.ActiveObject
op = o.PropertiesList
for p in op:
    Console.PrintMessage(&quot;Property: &quot;+ str(p)+ &quot; Value: &quot; + str(o.getPropertyByName(p))+&quot;\r\n&quot;)
}}

===Search and data extraction=== &lt;!--T:36--&gt;

&lt;!--T:37--&gt;
Examples of research and decoding information on an object.

&lt;!--T:38--&gt;
Each section is independently and is separated by &quot;############&quot; can be copied directly into the Python console, or in a macro or use this macro. The description of the macro in the commentary.

&lt;!--T:39--&gt;
Displaying it in the &quot;View Report&quot; window (View &gt; Views &gt; View report)

{{Code|code=

# -*- coding: utf-8 -*-
from __future__ import unicode_literals
 
# Exemples de recherche et de decodage d'informations sur un objet
# Chaque section peut etre copiee directement dans la console Python ou dans une macro ou utilisez la macro tel quel
# certaines commandes se repetent seul l'approche est differente
#
# Examples of research and decoding information on an object
# Each section can be copied directly into the Python console, or in a macro or uses this macro
# Certain commands as repeat alone approach is different
#
# rev:29/09/2014
 
from FreeCAD import Base
import DraftVecUtils, Draft, Part
 
mydoc = FreeCAD.activeDocument().Name                                     # Name of active Document
App.Console.PrintMessage(&quot;Active docu    : &quot;+str(mydoc)+&quot;\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
object_Label = sel[0].Label                                               # Label of the object (modifiable)
App.Console.PrintMessage(&quot;object_Label   : &quot;+str(object_Label)+&quot;\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
App.Console.PrintMessage(&quot;sel            : &quot;+str(sel[0])+&quot;\n\n&quot;)            # sel[0] first object selected
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
object_Name  = sel[0].Name                                                # Name of the object (not modifiable)
App.Console.PrintMessage(&quot;object_Name    : &quot;+str(object_Name)+&quot;\n\n&quot;)
##################################################################################
 
try:
    SubElement = FreeCADGui.Selection.getSelectionEx()                    # sub element name with getSelectionEx()
    element_ = SubElement[0].SubElementNames[0]                           # name of 1 element selected
    App.Console.PrintMessage(&quot;elementSelec   : &quot;+str(element_)+&quot;\n\n&quot;)            
except:
    App.Console.PrintMessage(&quot;Oups&quot;+&quot;\n\n&quot;)            
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
App.Console.PrintMessage(&quot;sel            : &quot;+str(sel[0])+&quot;\n\n&quot;)          # sel[0] first object selected
##################################################################################
 
SubElement = FreeCADGui.Selection.getSelectionEx()                        # sub element name with getSelectionEx()
App.Console.PrintMessage(&quot;SubElement     : &quot;+str(SubElement[0])+&quot;\n\n&quot;)     # name of sub element
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
i = 0
for j in enumerate(sel[0].Shape.Edges):                                   # list all Edges
    i += 1
    App.Console.PrintMessage(&quot;Edges n : &quot;+str(i)+&quot;\n&quot;)
    a = sel[0].Shape.Edges[j[0]].Vertexes[0]
    App.Console.PrintMessage(&quot;X1             : &quot;+str(a.Point.x)+&quot;\n&quot;)     # coordinate XYZ first point
    App.Console.PrintMessage(&quot;Y1             : &quot;+str(a.Point.y)+&quot;\n&quot;)
    App.Console.PrintMessage(&quot;Z1             : &quot;+str(a.Point.z)+&quot;\n&quot;)
    try:
        a = sel[0].Shape.Edges[j[0]].Vertexes[1]
        App.Console.PrintMessage(&quot;X2             : &quot;+str(a.Point.x)+&quot;\n&quot;) # coordinate XYZ second point
        App.Console.PrintMessage(&quot;Y2             : &quot;+str(a.Point.y)+&quot;\n&quot;)
        App.Console.PrintMessage(&quot;Z2             : &quot;+str(a.Point.z)+&quot;\n&quot;)
    except:
        App.Console.PrintMessage(&quot;Oups&quot;+&quot;\n&quot;)    
App.Console.PrintMessage(&quot;\n&quot;)    
##################################################################################
 
try:
    SubElement = FreeCADGui.Selection.getSelectionEx()                    # sub element name with getSelectionEx()
    subElementName = Gui.Selection.getSelectionEx()[0].SubElementNames[0] # sub element name with getSelectionEx()
    App.Console.PrintMessage(&quot;subElementName : &quot;+str(subElementName)+&quot;\n&quot;)

    subObjectX = Gui.Selection.getSelectionEx()[0].SubObjects[0].Point.x  # sub element coordinate X
    App.Console.PrintMessage(&quot;subObject_X    : &quot;+str(subObjectX)+&quot;\n&quot;)
    subObjectY = Gui.Selection.getSelectionEx()[0].SubObjects[0].Point.y  # sub element coordinate Y
    App.Console.PrintMessage(&quot;subObject_Y    : &quot;+str(subObjectY)+&quot;\n&quot;)
    subObjectZ = Gui.Selection.getSelectionEx()[0].SubObjects[0].Point.z  # sub element coordinate Z
    App.Console.PrintMessage(&quot;subObject_Z    : &quot;+str(subObjectZ)+&quot;\n&quot;)

    subObjectLength = Gui.Selection.getSelectionEx()[0].SubObjects[0].Length # sub element Length
    App.Console.PrintMessage(&quot;subObjectLength: &quot;+str(subObjectLength)+&quot;\n&quot;)

    surfaceFace = Gui.Selection.getSelectionEx()[0].SubObjects[0].Area    # Area of the 1 face
    App.Console.PrintMessage(&quot;surfaceFace    : &quot;+str(surfaceFace)+&quot;\n\n&quot;)
except:
    App.Console.PrintMessage(&quot;Oups&quot;+&quot;\n\n&quot;)            
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
surface = sel[0].Shape.Area                                               # Area object complete
App.Console.PrintMessage(&quot;surfaceObjet   : &quot;+str(surface)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
CenterOfMass = sel[0].Shape.CenterOfMass                                  # Center of Mass of the object
App.Console.PrintMessage(&quot;CenterOfMass   : &quot;+str(CenterOfMass)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;CenterOfMassX  : &quot;+str(CenterOfMass[0])+&quot;\n&quot;)   # coordinates [0]=X [1]=Y [2]=Z
App.Console.PrintMessage(&quot;CenterOfMassY  : &quot;+str(CenterOfMass[1])+&quot;\n&quot;)
App.Console.PrintMessage(&quot;CenterOfMassZ  : &quot;+str(CenterOfMass[2])+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
for j in enumerate(sel[0].Shape.Faces):                                   # List alles faces of the object
    App.Console.PrintMessage(&quot;Face           : &quot;+str(&quot;Face%d&quot; % (j[0]+1))+&quot;\n&quot;)
App.Console.PrintMessage(&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
volume_ = sel[0].Shape.Volume                                             # Volume of the object
App.Console.PrintMessage(&quot;volume_        : &quot;+str(volume_)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
boundBox_= sel[0].Shape.BoundBox                                          # BoundBox of the object
App.Console.PrintMessage(&quot;boundBox_      : &quot;+str(boundBox_)+&quot;\n&quot;)
 
boundBoxLX = boundBox_.XLength                                            # Length x boundBox rectangle
boundBoxLY = boundBox_.YLength                                            # Length y boundBox rectangle
boundBoxLZ = boundBox_.ZLength                                            # Length z boundBox rectangle
App.Console.PrintMessage(&quot;boundBoxLX     : &quot;+str(boundBoxLX)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;boundBoxLY     : &quot;+str(boundBoxLY)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;boundBoxLZ     : &quot;+str(boundBoxLZ)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
pl = sel[0].Shape.Placement                                               # Placement Vector XYZ and Yaw-Pitch-Roll
App.Console.PrintMessage(&quot;Placement      : &quot;+str(pl)+&quot;\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
pl = sel[0].Shape.Placement.Base                                          # Placement Vector XYZ
App.Console.PrintMessage(&quot;PlacementBase  : &quot;+str(pl)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
Yaw = sel[0].Shape.Placement.Rotation.toEuler()[0]                        # decode angle Euler Yaw
App.Console.PrintMessage(&quot;Yaw            : &quot;+str(Yaw)+&quot;\n&quot;)
Pitch = sel[0].Shape.Placement.Rotation.toEuler()[1]                      # decode angle Euler Pitch
App.Console.PrintMessage(&quot;Pitch          : &quot;+str(Pitch)+&quot;\n&quot;)
Roll = sel[0].Shape.Placement.Rotation.toEuler()[2]                       # decode angle Euler Yaw
App.Console.PrintMessage(&quot;Yaw            : &quot;+str(Roll)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
oripl_X = sel[0].Placement.Base[0]                                        # decode Placement X
oripl_Y = sel[0].Placement.Base[1]                                        # decode Placement Y
oripl_Z = sel[0].Placement.Base[2]                                        # decode Placement Z
 
App.Console.PrintMessage(&quot;oripl_X        : &quot;+str(oripl_X)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;oripl_Y        : &quot;+str(oripl_Y)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;oripl_Z        : &quot;+str(oripl_Z)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
rotation = sel[0].Placement.Rotation                                      # decode Placement Rotation
App.Console.PrintMessage(&quot;rotation              : &quot;+str(rotation)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
pl = sel[0].Shape.Placement.Rotation                                      # decode Placement Rotation other method
App.Console.PrintMessage(&quot;Placement Rot         : &quot;+str(pl)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
pl = sel[0].Shape.Placement.Rotation.Angle                                # decode Placement Rotation Angle
App.Console.PrintMessage(&quot;Placement Rot Angle   : &quot;+str(pl)+&quot;\n\n&quot;)
##################################################################################
 
sel = FreeCADGui.Selection.getSelection()                                 # select object with getSelection()
Rot_0 = sel[0].Placement.Rotation.Q[0]                                    # decode Placement Rotation 0
App.Console.PrintMessage(&quot;Rot_0         : &quot;+str(Rot_0)+ &quot; rad ,  &quot;+str(180 * Rot_0 / 3.1416)+&quot; deg &quot;+&quot;\n&quot;)
 
Rot_1 = sel[0].Placement.Rotation.Q[1]                                    # decode Placement Rotation 1
App.Console.PrintMessage(&quot;Rot_1         : &quot;+str(Rot_1)+ &quot; rad ,  &quot;+str(180 * Rot_1 / 3.1416)+&quot; deg &quot;+&quot;\n&quot;)
 
Rot_2 = sel[0].Placement.Rotation.Q[2]                                    # decode Placement Rotation 2
App.Console.PrintMessage(&quot;Rot_2         : &quot;+str(Rot_2)+ &quot; rad ,  &quot;+str(180 * Rot_2 / 3.1416)+&quot; deg &quot;+&quot;\n&quot;)
 
Rot_3 = sel[0].Placement.Rotation.Q[3]                                    # decode Placement Rotation 3
App.Console.PrintMessage(&quot;Rot_3         : &quot;+str(Rot_3)+&quot;\n\n&quot;)
##################################################################################
}}

Manual search of an element with label

{{Code|code=
# Extract the coordinate X,Y,Z and Angle giving the label 
App.Console.PrintMessage(&quot;Base.x       : &quot;+str(FreeCAD.ActiveDocument.getObjectsByLabel(&quot;Cylindre&quot;)[0].Placement.Base.x)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;Base.y       : &quot;+str(FreeCAD.ActiveDocument.getObjectsByLabel(&quot;Cylindre&quot;)[0].Placement.Base.y)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;Base.z       : &quot;+str(FreeCAD.ActiveDocument.getObjectsByLabel(&quot;Cylindre&quot;)[0].Placement.Base.z)+&quot;\n&quot;)
App.Console.PrintMessage(&quot;Base.Angle   : &quot;+str(FreeCAD.ActiveDocument.getObjectsByLabel(&quot;Cylindre&quot;)[0].Placement.Rotation.Angle)+&quot;\n\n&quot;)
##################################################################################

}}


&lt;!--T:40--&gt;
'''PS:''' Usually the angles are given in Radian to convert :

&lt;!--T:41--&gt;
#angle in Degrees to Radians :
#*Angle in radian = '''pi * (angle in degree) / 180'''
#*Angle in radian = math.radians(angle in degree)
#angle in Radians to Degrees :
#*Angle in degree = '''180 * (angle in radian) / pi'''
#*Angle in degree = math.degrees(angle in radian)

===Cartesian coordinates === &lt;!--T:42--&gt;

&lt;!--T:43--&gt;
This code displays the Cartesian coordinates of the selected item.

&lt;!--T:44--&gt;
Change the value of &quot;numberOfPoints&quot; if you want a different number of points (precision)

{{Code|code=
numberOfPoints = 100                                                         # Decomposition number (or precision you can change)
selectedEdge = FreeCADGui.Selection.getSelectionEx()[0].SubObjects[0].copy() # select one element
points  = selectedEdge.discretize(numberOfPoints)                            # discretize the element
i=0
for p in points:                                                             # list and display the coordinates
    i+=1
    print i, &quot; X&quot;, p.x, &quot; Y&quot;, p.y, &quot; Z&quot;, p.z
}}

&lt;!--T:45--&gt;
Other method display on &quot;Int&quot; and &quot;Float&quot;

{{Code|code=
import Part
from FreeCAD import Base

c=Part.makeCylinder(2,10)        # create the circle
Part.show(c)                     # display the shape

# slice accepts two arguments:
#+ the normal of the cross section plane
#+ the distance from the origin to the cross section plane. Here you have to find a value so that the plane intersects your object
s=c.slice(Base.Vector(0,1,0),0)  # 

# here the result is a single wire
# depending on the source object this can be several wires
s=s[0]

# if you only need the vertexes of the shape you can use
v=[]
for i in s.Vertexes:
    v.append(i.Point)

# but you can also sub-sample the section to have a certain number of points (int) ...
p1=s.discretize(20)
ii=0
for i in p1:
    ii+=1
    print i                                              # Vector()
    print ii, &quot;: X:&quot;, i.x, &quot; Y:&quot;, i.y, &quot; Z:&quot;, i.z        # Vector decode
Draft.makeWire(p1,closed=False,face=False,support=None)  # to see the difference accuracy (20)

## uncomment to use
#import Draft
#Draft.downgrade(App.ActiveDocument.ActiveObject,delete=True)  # first transform the DWire in Wire         &quot;downgrade&quot;
#Draft.downgrade(App.ActiveDocument.ActiveObject,delete=True)  # second split the Wire in single objects   &quot;downgrade&quot;
#
##Draft.upgrade(FreeCADGui.Selection.getSelection(),delete=True) # to attach lines contiguous SELECTED use &quot;upgrade&quot;


# ... or define a sampling distance (float)
p2=s.discretize(0.5)
ii=0
for i in p2:
    ii+=1
    print i                                              # Vector()
    print ii, &quot;: X:&quot;, i.x, &quot; Y:&quot;, i.y, &quot; Z:&quot;, i.z        # Vector decode 
Draft.makeWire(p2,closed=False,face=False,support=None)  # to see the difference accuracy (0.5)

## uncomment to use
#import Draft
#Draft.downgrade(App.ActiveDocument.ActiveObject,delete=True)  # first transform the DWire in Wire         &quot;downgrade&quot;
#Draft.downgrade(App.ActiveDocument.ActiveObject,delete=True)  # second split the Wire in single objects   &quot;downgrade&quot;
#
##Draft.upgrade(FreeCADGui.Selection.getSelection(),delete=True) # to attach lines contiguous SELECTED use &quot;upgrade&quot;

}}

===Select all objects in the document=== &lt;!--T:46--&gt;

{{Code|code=
import FreeCAD
for obj in FreeCAD.ActiveDocument.Objects:
    print obj.Name                                # display the object Name
    objName = obj.Name
    obj = App.ActiveDocument.getObject(objName)
    Gui.Selection.addSelection(obj)               # select the object
}}


&lt;!--T:34--&gt;
{{docnav|Embedding FreeCAD|Line drawing function}}

&lt;!--T:35--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Common Airfoil Data Import</title>
    <ns>0</ns>
    <id>47878</id>
    <revision>
      <id>123314</id>
      <parentid>123313</parentid>
      <timestamp>2014-11-17T17:09:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>d7ocs2zqo4tja65qaqpnplwfqeubjs4</sha1>
      <text xml:space="preserve" bytes="1909">
== Importing Airfoil Data == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
FreeCAD can import airfoil data such as that found on the [http://m-selig.ae.illinois.edu/ads/coord_database.html UIUC Airfoil Coordinates Database] or files produced by airfoil creation and annalizing software like [http://www.xflr5.com/xflr5.htm XFLR5]

== How To == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
From the File menu, select either Open for a new document or Import for existing document. From the Open or Import dialog &quot;Files of type: pull down menu select Common airfoil data (*.dat), select your file and click Open. 

&lt;!--T:5--&gt;
When opening airfoil data files, FreeCAD reads the file and imports then in FreeCAD units. Airfoil data files provide XY coordinates in numbers between 0 and 1. As a result, the imported airfoil will have a chord length of 1 mm by default. Here is a tunicated sample of a typical airfoil .dat file. Notice that all data points fall between 0 and 1.  

&lt;syntaxhighlight&gt;
AG35
     0.999998    0.002490
     0.994759    0.003346
     0.985091    0.004927
     0.973580    0.006810
     0.961032    0.008862
     0.948054    0.010984
     0.934900    0.013135

~ ~ ~ ~ ~ ~ ~ ~

     0.947640   -0.000001
     0.960660   -0.000001
     0.973282    0.000000
     0.984898    0.000000
     0.994724   -0.000001
     1.000001    0.000000
&lt;/syntaxhighlight&gt;

== Enhanced Import == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
There is a macro available that will import the airfoil with a user defined chord length. This macro will first allow the user to select the airfoil data file to import and then take an input for the chord length. It will then properly scale the airfoil for use. The macro can be found in the [[Macros recipes|Macros recipes]] section of this Wiki under [[Macro Airfoil Import &amp; Scale|Macro Airfoil Import &amp; Scale]].


&lt;!--T:8--&gt;
[[Category:User Documentation]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>CompileOnMac</title>
    <ns>0</ns>
    <id>451</id>
    <revision>
      <id>132622</id>
      <parentid>132605</parentid>
      <timestamp>2014-12-20T11:33:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0la6j7oqrrbpxjx3nc3sqgqww77cj0o</sha1>
      <text xml:space="preserve" bytes="5244">
&lt;!--T:52--&gt;
This page explains how to compile the latest FreeCAD source code on Mac OS X.

== Prerequisites == &lt;!--T:53--&gt;
First of all, you will need to install the following software.

=== Xcode Development Tools === &lt;!--T:54--&gt;
Unless you want to use the Xcode IDE for FreeCAD development, you will only need to install the Command Line Tools. To do this on 10.9 and later, open Terminal, run the following command, and then click Install in the dialog that comes up.

&lt;pre&gt;
xcode-select --install
&lt;/pre&gt;

&lt;!--T:55--&gt;
For other versions of OS X, you can get the package from the Apple developer [https://developer.apple.com/downloads/index.action?q=xcode downloads page] (sign in with the same Apple ID you use for other Apple services). Specifically, you will need to download Development Tools 3.2 for OS X 10.6, and Command Line Tools 4.8 for OS X 10.8.

=== CMake === &lt;!--T:56--&gt;
Install the latest version of CMake from http://www.cmake.org/download. Although Homebrew will also install CMake, it only installs the command line executable.

=== Homebrew ===  &lt;!--T:57--&gt;
To install Homebrew, enter the following in Terminal:

&lt;pre&gt;
ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
&lt;/pre&gt;

== Getting the source == &lt;!--T:58--&gt;
In this guide, the source and build folders are created in '''/Users/username/FreeCAD''', but you can of course use whatever folder you want.

&lt;pre&gt;
mkdir ~/FreeCAD
cd ~/FreeCAD
&lt;/pre&gt;

&lt;!--T:59--&gt;
To get the FreeCAD source code, run:

&lt;pre&gt;
git clone git://git.code.sf.net/p/free-cad/code FreeCAD-git
&lt;/pre&gt;

&lt;!--T:60--&gt;
Alternatively, you can use the github mirror: https://github.com/FreeCAD/FreeCAD_sf_master.git

== Installing the Dependencies ==  &lt;!--T:61--&gt;
All of the needed libraries can be installed using Homebrew.

&lt;pre&gt;
brew tap homebrew/science
brew tap sanelson/freecad
brew install boost eigen freetype oce python qt pyside pyside-tools xerces-c
brew install --without-framework --without-soqt sanelson/freecad/coin
brew install --HEAD pivy
&lt;/pre&gt;

== Compiling FreeCAD == &lt;!--T:62--&gt;
First, create a new folder for the build:

&lt;pre&gt;
mkdir ~/FreeCAD/build
&lt;/pre&gt;

&lt;!--T:63--&gt;
Now you will need to run CMake to generate the build files. Open the CMake app, and fill in the source and build folder fields. In this case, it would be '''/Users/username/FreeCAD/FreeCAD-git''' for the source, and '''/Users/username/FreeCAD/build''' for the build folder. 

&lt;!--T:64--&gt;
Next, click the '''Configure''' button. This will display a dialog asking you to specify what generator to use. Leave it at the default '''Unix Makefiles.''' Configuring will fail the first time because there are some options that need to be changed. Note: You will need to check the '''Advanced''' checkbox to get all of the options.

&lt;!--T:65--&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align:left&quot;
|-
! Option name !! Value  !! Notes
|-               
| BUILD_ROBOT || OFF (unchecked) || As of 12/19/2014, the robot module fails to build using newer versions of clang (OS X 10.9 and later)        
|-               
| CMAKE_BUILD_TYPE || Release ||
|-               
| FREECAD_USE_EXTERNAL_PIVY   || ON (checked) ||
|-               
| FREETYPE_INCLUDE_DIR_freetype2 || /usr/local/include/freetype2 || You will only need to set this if you are using a CMake version older than 3.1.0
|-               
| OCE_DIR || /usr/local/Cellar/oce/0.16.1/OCE.framework/Versions/0.16/Resources || 
|-               
| PYSIDERCC4BINARY || /usr/local/bin/pyside-rcc ||
|-               
| PYSIDEUIC4BINARY || /usr/local/bin/pyside-uic ||
|-
| PYTHON_EXECUTABLE || /usr/local/bin/python ||
|-
| PYTHON_INCLUDE_DIR || /usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/include/python2.7 ||
|-
| PYTHON_LIBRARY || /usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib ||
|-
|}
Note: The above paths for OCE and Python are for versions 0.16.1 and 2.7.9, respectively -- change as needed.

&lt;!--T:66--&gt;
Now click '''Configure''' again and then '''Generate'''.

&lt;!--T:67--&gt;
Finally, run '''make''' to compile FreeCAD.

&lt;pre&gt;
cd ~/FreeCAD/build
make –j3
&lt;/pre&gt;

&lt;!--T:68--&gt;
The -j option specifies how many make processes to run at once. One plus the number of CPU cores is usually a good number to use. However, if compiling fails for some reason, it is useful to rerun make without the -j option, so that you can see exactly where the error occurred.

If make finishes without any errors, you can now launch FreeCAD, either from Terminal with '''./bin/FreeCAD''', or by double clicking the executable in Finder.
== Creating an application bundle == &lt;!--T:69--&gt;
TODO
== Updating ==
FreeCAD development happens fast; everyday or so there are bug fixes or new features. To get these changes, run:

&lt;pre&gt;
cd ~/FreeCAD/FreeCAD-git
git pull
&lt;/pre&gt;

And then repeat the compile step above.
== Troubleshooting == &lt;!--T:70--&gt;
TODO
{{docnav|CompileOnUnix|Third Party Libraries}}

&lt;!--T:71--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>CompileOnUnix</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>133882</id>
      <parentid>133086</parentid>
      <timestamp>2014-12-27T11:25:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6kyddjzqbkzu3uyvhun1hs52dgibbbm</sha1>
      <text xml:space="preserve" bytes="29160">
&lt;!--T:1--&gt;
On recent linux distributions, FreeCAD is generally easy to build, since all dependencies are usually provided by the package manager. It basically involves 3 steps:

&lt;!--T:113--&gt;
# Getting the FreeCAD source code
# Getting the dependencies (packages FreeCAD depends upon)
# Compiling with &quot;cmake . &amp;&amp; make&quot;

&lt;!--T:114--&gt;
Below, you'll find detailed explanations of the whole process and particularities you might encounter. If you find anything wrong or out-of-date in the text below (Linux distributions change often), or if you use a distribution which is not listed, please help us correcting it.

== Getting the source == &lt;!--T:115--&gt;
Before you can compile FreeCAD, you need the source code. There are 3 ways to get it:

=== Git === &lt;!--T:116--&gt;
The quickest and best way to get the code is to clone the read-only git repository (you need the [http://git-scm.com/ git] package installed):

{{Code|lang=bash|code=git clone git://git.code.sf.net/p/free-cad/code free-cad-code}}


&lt;!--T:117--&gt;
This will place a copy of the latest version of the FreeCAD source code in a new directory called &quot;free-cad-code&quot;. The first time you try connecting to the free-cad.git.sourceforge.net host, you will receive a message asking to authenticate the sourceforge SSH key, which is normally safe to accept (you can check their SSH keys on the sourceforge website if you are not sure)

=== Github === &lt;!--T:118--&gt;
There is an always up to date FreeCAD repository on Github: 

[https://github.com/FreeCAD/FreeCAD_sf_master github.com/FreeCAD/FreeCAD_sf_master]

=== Source package === &lt;!--T:119--&gt;
Alternatively you can download a source package, but they could be already quite old so it's always better to get the latest sources via git or github.

&lt;!--T:120--&gt;
* Official FreeCAD source packages (distribution-independent): https://sourceforge.net/projects/free-cad/files/FreeCAD%20Source/

== Getting the dependencies == &lt;!--T:121--&gt;
To compile FreeCAD under Linux you have to install all libraries mentioned in [[Third Party Libraries]] first. Please note that the names and availability of the libraries will depend on your distribution. Note that if you don't use the most recent version of your distribution, some of the packages below might be missing from your repositories. In that case, look in the [[#Older and non-conventional distributions|Older and non-conventional distributions]] section below. 

&lt;!--T:122--&gt;
[[#Compile_FreeCAD|Skip to Compile FreeCAD]]

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Debian and Ubuntu === &lt;!--T:123--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
On Debian-based systems (Debian, Ubuntu, Mint, etc...) it is quite easy to get all needed dependencies installed. Most of the libraries are available via apt-get or synaptic package manager.

&lt;div style=&quot;column-count:2;-moz-column-count:2;-webkit-column-count:2&quot;&gt;
*build-essential
*cmake
*python
*python-matplotlib
*libtool
either:
:*libcoin60-dev (Debian Wheezy, Wheezy-backports, Ubuntu 13.04 and before)
or:
:*libcoin80-dev (Debian unstable(Jesse), testing, Ubuntu 13.10 and forward)
*libsoqt4-dev
*libxerces-c-dev
*libboost-dev
*libboost-filesystem-dev
*libboost-regex-dev
*libboost-program-options-dev 
*libboost-signals-dev
*libboost-thread-dev
*libqt4-dev
*libqt4-opengl-dev
*qt4-dev-tools
*python-dev
*python-pyside
*pyside-tools
either:
:*libopencascade-dev (official opencascade version)
or: 
:*liboce*-dev (opencascade community edition)
:*oce-draw
*libeigen3-dev
*libqtwebkit-dev
*libshiboken-dev
*libpyside-dev
*libode-dev
*swig
*libzipios++-dev
*libfreetype6
*libfreetype6-dev
&lt;/div&gt;

&lt;!--T:124--&gt;
[http://forum.freecadweb.org/viewtopic.php?f=4&amp;t=5096#p40018 Additional instruction] for libcoin80-dev Debian wheezy-backports, unstable, testing, Ubuntu 13.10 and forward

&lt;!--T:125--&gt;
Note that liboce*-dev includes the following libraries:

*liboce-foundation-dev 
*liboce-modeling-dev 
*liboce-ocaf-dev 
*liboce-visualization-dev 
*liboce-ocaf-lite-dev  

&lt;!--T:126--&gt;
You may have to install these packages by individual name.

&lt;!--T:127--&gt;
Optionally you can also install these extra packages:

*libsimage-dev (to make Coin to support additional image file formats)
*checkinstall (to register your installed files into your system's package manager, so yo can easily uninstall later)
*python-pivy (needed for the 2D Drafting module)
*python-qt4 (needed for the 2D Drafting module)
*doxygen and libcoin60-doc (if you intend to generate source code documentation)
*libspnav-dev (for 3Dconnexion devices support like the Space Navigator or Space Pilot)
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Fedora === &lt;!--T:128--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages:

&lt;div style=&quot;column-count:2;-moz-column-count:2;-webkit-column-count:2&quot;&gt;
*cmake
*doxygen
*swig
*gettext
*dos2unix
*desktop-file-utils
*libXmu-devel
*freeimage-devel
*mesa-libGLU-devel
*OCE-devel
*python
*python-devel
*python-pyside-devel
*boost-devel
*tbb-devel
*eigen3-devel
*qt-devel
*qt-webkit-devel
*ode-devel
*xerces-c
*xerces-c-devel
*opencv-devel
*smesh-devel
*coin2-devel
*soqt-devel
*freetype
*freetype-devel
&lt;/div&gt;

&lt;!--T:129--&gt;
And optionally:

&lt;div style=&quot;column-count:2;-moz-column-count:2;-webkit-column-count:2&quot;&gt;
libspnav-devel (for 3Dconnexion devices support like the Space Navigator or Space Pilot)
pivy ( https://bugzilla.redhat.com/show_bug.cgi?id=458975 Pivy is not mandatory but needed for the Draft module )
&lt;/div&gt;

&lt;!--T:130--&gt;
Building FreeCAD with coin3 is still more of a hassle on Fedora, since only coin2 is provided in the official repos, but if you wish so anyway, you can avoid to rebuild all the coin3 / soqt / pivy suite by installing coin3-ready packages from http://www.zultron.com/rpm-repo/
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Gentoo === &lt;!--T:132--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages to build FreeCAD:

&lt;div style=&quot;column-count:2;-moz-column-count:2;-webkit-column-count:2&quot;&gt;
*dev-cpp/eigen
*dev-games/ode
*dev-libs/boost
*dev-libs/xerces-c
*dev-python/pivy
*dev-python/PyQt4
*media-libs/coin
*media-libs/SoQt
*sci-libs/opencascade-6.5
*sys-libs/zlib
*virtual/fortran
*x11-libs/qt-gui
*x11-libs/qt-opengl
*x11-libs/qt-svg
*x11-libs/qt-webkit
*x11-libs/qt-xmlpatterns
*dev-lang/swig-2.0.4-r1
*app-admin/eselect-python-20091230
*dev-lang/python-2.7.2-r3
*dev-util/cmake-2.8.4
*sys-apps/findutils-4.4.0
*freetype
&lt;/div&gt;

&lt;!--T:133--&gt;
Since the latest opencascade version is not available, you might want to compile opencascade too, hence the following additional libraries are needed:

*media-libs/ftgl
*virtual/opengl
*x11-libs/libXmu
*dev-lang/tcl-8.5.9
*dev-lang/tk-8.5.9-r1
*dev-tcltk/itcl-3.4_beta1
*dev-tcltk/itk-3.4_pre20090417
*dev-tcltk/tix-8.4.3
*x11-libs/gl2ps
*sys-devel/automake-1.11
*sys-devel/autoconf-2.68
*sys-devel/libtool
*dev-java/java-config-2.1.11-r3
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE === &lt;!--T:134--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages:

*gcc
*cmake
*OpenCASCADE-devel
*libXerces-c-devel
*python-devel
*libqt4-devel
*python-qt4
*Coin-devel
*SoQt-devel
*boost-devel
*libode-devel
*libQtWebKit-devel
*libeigen3-devel
*gcc-fortran
*freetype2
*freetype2-devel

&lt;!--T:135--&gt;
For FreeCAD 0.14 stable and 0.15 unstable you need to add Eigen3 and swig libraries, that don't seem to be in standard repos. You can get them with a one-click install here:
*[http://software.opensuse.org/search?q=eigen3&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true Eigen3]
*[http://software.opensuse.org/search?q=swig&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true swig]

&lt;!--T:136--&gt;
Also, note that the Eigen3 Library from Factory Education was causing problems sometimes, so use the one from the KDE 4.8 Extra repo
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Arch Linux === &lt;!--T:137--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You will need the following libraries from the official repositories:

&lt;div style=&quot;column-count:2;-moz-column-count:2;-webkit-column-count:2&quot;&gt; 
*boost-libs
*curl
*hicolor-icon-theme
*libspnav
*opencascade
*python2-pivy
*python2-matplotlib
*python2-pyside
*python2-shiboken
*qtwebkit
*shared-mime-info
*xerces-c
*boost
*cmake
*coin
*desktop-file-utils
*eigen
*gcc-fortran
*swig
*xerces-c
&lt;/div&gt;

&lt;!--T:138--&gt;
Also, make sure to check the AUR for any missing packages that are not on the repositories, currently:

*python2-pyside-tools
&lt;!--T:139--&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Older and non-conventional distributions === &lt;!--T:140--&gt;
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
On other distributions, we have very few feedback from users, so it might be harder to find the required packages. Try first locating the required libraries mentioned in [[Third Party Libraries]]. Beware that some of them might have a slightly different package name in your distribution (such as name, libname, name-dev, name-devel, etc...).

&lt;!--T:141--&gt;
You also need the [[wikipedia:GNU Compiler Collection|GNU gcc compiler]] version equal or above 3.0.0. g++ is also needed because FreeCAD is completely written in C++. During the compilation some Python scripts get executed. So the Python interpreter has to work properly. To avoid any linker problems during the build process it is also a good idea to have the library paths either in your ''LD_LIBRARY_PATH'' variable or in your ''ld.so.conf'' file. This is normally already the case in recent distributions.

&lt;!--T:25--&gt;
For more details have also a look to ''README.Linux'' in your sources.

&lt;/div&gt;
&lt;/div&gt;

&lt;!--T:151--&gt;
Below is additional help for a couple of libraries that might not be present in your distribution repositories

==== Eigen 3 ==== &lt;!--T:26--&gt;
The Eigen3 library is now required by the Sketcher module. This library is only available starting from Ubuntu 11.10 repositories. For prior Ubuntu releases, you can either download it [http://packages.ubuntu.com/oneiric/libeigen3-dev from here] and install it manually, or add the [https://launchpad.net/~freecad-maintainers/+archive/freecad-daily FreeCAD Daily Builds PPA] to your software sources before installing it through one of the means listed below.

==== OpenCASCADE community edition (OCE) ==== &lt;!--T:27--&gt;
OpenCasCade has recently been forked into a [http://github.com/tpaviot/oce Community edition], which is much, much easier to build. FreeCAD can use any version installed on your system, either the &quot;official&quot; edition or the community edition. The OCE website contains detailed build instructions.

==== OpenCASCADE official version ==== &lt;!--T:29--&gt;
'''Note''': You are advised to use the OpenCasCade community edition above, which is easier to build, but this one works too.
Not all Linux distributions have an official OpenCASCADE package in their repositories. You have to check for yourself if one is available for your distribution. At least from Debian Lenny and Ubuntu Intrepid an official .deb package is provided. For older Debian or Ubuntu releases you may get unofficial packages from [http://lyre.mit.edu/~powell/opencascade here]. To build your own private .deb packages follow these steps:

{{Code|lang=bash|code= 
wget http://lyre.mit.edu/~powell/opencascade/opencascade_6.2.0.orig.tar.gz
wget http://lyre.mit.edu/~powell/opencascade/opencascade_6.2.0-7.dsc
wget http://lyre.mit.edu/~powell/opencascade/opencascade_6.2.0-7.diff.gz

dpkg-source -x opencascade_6.2.0-7.dsc

# Install OCC build-deps
sudo apt-get install build-essential devscripts debhelper autoconf automake libtool bison libx11-dev tcl8.4-dev tk8.4-dev libgl1-mesa-dev libglu1-mesa-dev java-gcj-compat-dev libxmu-dev

#Build Opencascade packages. This takes hours and requires 
# at least 8 GB of free disk space
cd opencascade-6.2.0 ; debuild

# Install the resulting library debs
sudo dpkg -i libopencascade6.2-0_6.2.0-7_i386.deb
libopencascade6.2-dev_6.2.0-7_i386.deb
}}


&lt;!--T:30--&gt;
Alternatively, you can download and compile the latest version from [http://www.opencascade.org opencascade.org]:

&lt;!--T:31--&gt;
Install the package normally, be aware that the installer is a java program that requires the official java runtime edition from Sun (package name: sun-java6-jre), not the open-source java (gij) that is bundled with Ubuntu. Install it if needed:

{{Code|lang=bash|code= 
sudo apt-get remove gij
sudo apt-get install sun-java6-jre
}}

&lt;!--T:32--&gt;
Be careful, if you use gij java with other things like a browser plugin, they won't work anymore. If the installer doesn't work, try:

{{Code|lang=bash|code=java -cp path_to_file_setup.jar &lt;-Dtemp.dir=path_to_tmp_directory&gt; run}}

&lt;!--T:33--&gt;
Once the package is installed, go into the &quot;ros&quot; directory inside the opencascade dir, and do

{{Code|lang=bash|code=./configure --with-tcl=/usr/lib/tcl8.4 --with-tk=/usr/lib/tk8.4}}

&lt;!--T:34--&gt;
Now you can build. Go back to the ros folder and do:

{{Code|lang=bash|code=make}}

&lt;!--T:35--&gt;
It will take a long time, maybe several hours. 

&lt;!--T:36--&gt;
When it is done, just install by doing

{{Code|lang=bash|sudo make install}}

&lt;!--T:37--&gt;
The library files will be copied into /usr/local/lib which is fine because there they will be found automatically by any program. Alternatively, you can also do

{{Code|lang=bash|code=sudo checkinstall}}

&lt;!--T:38--&gt;
which will do the same as make install but create an entry in your package management system so you can easily uninstall later.
Now clean up the enormous temporary compilation files by doing

{{Code|lang=bash|code=make clean}}

&lt;!--T:39--&gt;
Possible error 1: If you are using OCC version 6.2, it is likely that the compiler will stop right after the beginning of the &quot;make&quot; operation. If it happens, edit the &quot;configure&quot; script, locate the CXXFLAGS=&quot;$CXXFLAGS &quot; statement, and replace it by CXXFLAGS=&quot;$CXXFLAGS -ffriend-injection -fpermissive&quot;. Then do the configure step again.

&lt;!--T:40--&gt;
Possible error 2: Possibly several modules (WOKSH, WOKLibs, TKWOKTcl, TKViewerTest and TKDraw) will complain that they couldn't find the tcl/tk headers. In that case, since the option is not offered in the configure script, you will have to edit manually the makefile of each of those modules: Go into adm/make and into each of the bad modules folders. Edit the Makefile, and locate the lines CSF_TclLibs_INCLUDES = -I/usr/include and CSF_TclTkLibs_INCLUDES = -I/usr/include and add /tcl8.4 and /tk8.4 to it so they read: CSF_TclLibs_INCLUDES = -I/usr/include/tcl8.4 and CSF_TclTkLibs_INCLUDES = -I/usr/include/tk8.4

==== SoQt ==== &lt;!--T:41--&gt;
The SoQt library must be compiled against Qt4, which is the case in most recent distributions. But at the time of writing this article there were only SoQt4 packages for Debian itself available but not for all Ubuntu versions. To get the packages built do the following steps:

{{Code|lang=bash|code=
wget http://ftp.de.debian.org/debian/pool/main/s/soqt/soqt_1.4.1.orig.tar.gz
wget http://ftp.de.debian.org/debian/pool/main/s/soqt/soqt_1.4.1-6.dsc
wget http://ftp.de.debian.org/debian/pool/main/s/soqt/soqt_1.4.1-6.diff.gz
dpkg-source -x soqt_1.4.1-6.dsc
sudo apt-get install doxygen devscripts fakeroot debhelper libqt3-mt-dev qt3-dev-tools libqt4-opengl-dev
cd soqt-1.4.1
debuild
sudo dpkg -i libsoqt4-20_1.4.1-6_i386.deb libsoqt4-dev_1.4.1-6_i386.deb libsoqt-dev-common_1.4.1-6_i386.deb
}}

&lt;!--T:42--&gt;
If you are on a 64bit system, you will probably need to change i386 by amd64.

==== Pivy ==== &lt;!--T:43--&gt;
Pivy is not needed to build FreeCAD or to run it, but it is needed for the 2D Drafting module to work. If you are not going to use that module, you won't need pivy. At the time of writing, Pivy is very new and might not have made its way into your distribution repository. If you cannot find Pivy in your distribution's packages repository, you can grab debian/ubuntu packages on the FreeCAD download page:

&lt;!--T:45--&gt;
http://sourceforge.net/projects/free-cad/files/FreeCAD%20Linux/
or compile pivy yourself:

&lt;!--T:46--&gt;
[[Extra_python_modules#Pivy|Pivy compilation instructions]]

== Compile FreeCAD == &lt;!--T:47--&gt;

=== Using cMake === &lt;!--T:48--&gt;
cMake is a newer build system which has the big advantage of being common for different target systems (Linux, Windows, MacOSX, etc). FreeCAD is now using the cMake system as its main building system. Compiling with cMake is usually very simple and happens in 2 steps. In the first step, cMake checks that every needed programs and libraries are present on your system and sets up all that's necessary for the subsequent compilation. You are given a few alternatives detailed below, but FreeCAD comes with sensible defaults. The second step is the compiling itself, which produces the FreeCAD executable.

&lt;!--T:49--&gt;
Since FreeCAD is a heavy application, compiling can take a bit of time (about 10 minutes on a fast machine, 30 minutes on a slow one)

==== In-source building ==== &lt;!--T:50--&gt;
FreeCAD can be built in-source, which means that all the files resulting from the compilation stay in the same folder as the source code. This is fine if you are just looking at FreeCAD, and want to be able to remove it easily by just deleting that folder. But in case you are planning to compile it often, you are advised to make an out-of-source build, which offers many more advantages. The following commands will compile freecad:

{{Code|lang=bash|code=$ cd freecad (the folder where you cloned the freecad source)}}

&lt;!--T:111--&gt;
If you installed pivy from source, set the compiler flag to use the correct pivy (via FREECAD_USE_EXTERNAL_PIVY=1). Also, set the build type to debug. (NOTE: the &quot;.&quot; and space after the cmake flags are CRITICAL!):

{{Code|lang=bash|code=
$ cmake -DFREECAD_USE_EXTERNAL_PIVY=1 -DCMAKE_BUILD_TYPE=Debug .
$ make
}}

&lt;!--T:51--&gt;
Your FreeCAD executable will then reside in the &quot;bin&quot; folder, and you can launch it with:

{{Code|lang=bash|code=$ ./bin/FreeCAD}}


==== Out-of-source build ==== &lt;!--T:52--&gt;
If you intend to follow the fast evolution of FreeCAD, building in a separate folder is much more convenient. Everytime you update the source code, cMake will then intelligently distinguish which files have changed, and recompile only what is needed. Out-of-source builds are specially handy when using the Git system, because you can easily try other branches without confusing the build system. To build out-of-source, simply create a build directory, distinct from your freecad source folder, and, from the build folder, point cMake to the source folder:

{{Code|lang=bash|code=
mkdir freecad-build
cd freecad-build
cmake ../freecad (or whatever the path is to your FreeCAD source folder)
make
}}

&lt;!--T:53--&gt;
The FreeCAD executable will then reside in the &quot;bin&quot; directory (within your freecad-build directory).

==== Configuration options ==== &lt;!--T:54--&gt;
There are a number of experimental or unfinished modules you may have to build if you want to work on them. To do so, you need to set the proper options for the configuration phase. Do it either on the command line, passing &lt;nowiki&gt;-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;&lt;/nowiki&gt; options to cMake or using one of the availables gui-frontends (eg for Debian, packages cmake-qt-gui or cmake-curses-gui).

&lt;!--T:55--&gt;
As an example, to configure on the command line with the Assembly module built, issue:

{{Code|lang=bash|code=cmake -D FREECAD_BUILD_ASSEMBLY:BOOL=ON ''path-to-freecad-root''}}

&lt;!--T:56--&gt;
Possible options are listed in FreeCAD's root CmakeLists.txt file.  

==== Qt designer plugin ==== &lt;!--T:66--&gt;
If you want to develop Qt stuff for FreeCAD, you'll need the Qt Designer plugin that provides all custom widgets of FreeCAD. Go to

{{Code|lang=bash|code=freecad/src/Tools/plugins/widget}}

&lt;!--T:67--&gt;
So far we don't provide a makefile -- but calling 

{{Code|lang=bash|code=qmake plugin.pro}}

&lt;!--T:68--&gt;
creates it. Once that's done, calling

{{Code|lang=bash|code=make}}

&lt;!--T:69--&gt;
will create the library libFreeCAD_widgets.so. To make this library known to Qt Designer you have to copy the file to $QTDIR/plugin/designer

==== Doxygen ==== &lt;!--T:70--&gt;
If you feel bold enough to dive in the code, you could take advantage to build and consult Doxygen generated FreeCAD's [[Source documentation]]

=== Making a debian package === &lt;!--T:71--&gt;
If you plan to build a Debian package out of the sources you need to install those packages first:

{{Code|lang=bash|code=
dh-make
devscripts

#optional, used for checking if packages are standard-compliant
lintian 
}}

&lt;!--T:72--&gt;
To build a package open a console, simply go to the FreeCAD directory and call

{{Code|lang=bash|code=debuild}}

&lt;!--T:73--&gt;
Once the package is built, you can use lintian to check if the package contains errors

{{Code|lang=bash|code=
#replace by the name of the package you just created
lintian your-fresh-new-freecad-package.deb}}


== Troubleshooting == &lt;!--T:74--&gt;

=== Note for 64bit systems === &lt;!--T:75--&gt;
When building FreeCAD for 64-bit there is a known issue with the OpenCASCADE 64-bit package. To get FreeCAD running properly you might need to run the ./configure script with the additional define _OCC64 set:

{{Code|lang=bash|code=./configure CXXFLAGS=&quot;-D_OCC64&quot;}}

&lt;!--T:76--&gt;
For Debian based systems this workaround is not needed when using the prebuilt package because there the OpenCASCADE package is built to set internally this define. Now you just need to compile FreeCAD the same way as described above.

=== Fedora 13 === &lt;!--T:79--&gt;
To build &amp; install FreeCAD on Fedora 13, a few tips and tricks are needed:
* Install a bunch of required packages, most are available from the Fedora 13 repositories
* Download and build xerces
* Download and build OpenCascade. Need to point it to xmu: 
{{Code|lang=bash|code=./configure --with-xmu-include=/usr/include/X11/Xmu --with-xmu-library=/usr/lib}}
* Download and build Pivy. You have to remove 2 references to non existent &quot;SoQtSpaceball.h&quot; from pivy/interfaces/soqt.i Commenting out those two lines allow the build &amp; install to work.
* Configure Freecad. You will need to point it to a few things: 
{{Code|lang=bash|code=./configure --with-qt4-include=/usr/include --with-qt4-bin=/usr/lib/qt4/bin --with-occ-lib=/usr/local/lib --with-occ-include=/usr/local/inc --with-xercesc-lib=/usr/local/lib}}
* make - hits a problem where the build is breaking because the ldflags for soqt are set to &quot;-LNONE&quot; which made libtool barf. My hackish workaround was to modify /usr/lib/Coin2/conf/soqt-default.cfg so that the ldflags are &quot;&quot; instead of &quot;-LNONE&quot;. After this -&gt; success !
* {{Code|lang=bash|code=make install}}

== Automatic build scripts == &lt;!--T:142--&gt;
Here is all what you need for a complete build of FreeCAD. It's a one-script-approach 
and works on a fresh installed distro. The commands will ask for root password
(for installation of packages) and sometime to acknowledge a fingerprint for
an external repository server or https-subversion repository. These scripts should
run on 32 and 64 bit versions. They are written for different versions, but are 
also likely to run on a later version with or without major changes.

&lt;!--T:143--&gt;
If you have such a script for your preferred distro, please send it! We will 
incorporate it into this article.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Ubuntu === 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

&lt;!--T:144--&gt;
Note that this script starts by adding the [https://launchpad.net/~freecad-maintainers/+archive/freecad-daily FreeCAD Daily Builds PPA] repository so it can proceed with the Eigen3 library (libeigen3-dev) installation. If you already have this library installed on your system, you can remove the first line.

{{Code|lang=bash|code=
sudo add-apt-repository ppa:freecad-maintainers/freecad-daily &amp;&amp; sudo apt-get update
sudo apt-get install build-essential python libcoin60-dev libsoqt4-dev \
libxerces-c2-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev \
libboost-graph-dev libboost-iostreams-dev libboost-program-options-dev \
libboost-serialization-dev libboost-signals-dev libboost-regex-dev libboost-thread-dev \
libqt4-dev qt4-dev-tools python2.7-dev libopencascade-dev libsoqt4-dev \
libode-dev subversion cmake libeigen2-dev libsimage-dev python-qt4 \
libtool autotools-dev automake bison flex gfortran libeigen3-dev libqtwebkit-dev git
 
# checkout the latest source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0

# use FreeCAD
./FreeCAD&lt;

# Update latest version

# go to source dir
cd freecad
 
# Update source
git pull
 
# build configuration 
cmake .
 
# build FreeCAD
make
}}
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE 12.2 ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

&lt;!--T:145--&gt;
No external Repositories are needed to compile FreeCAD 0.13 with this release. However, there is an imcompatability with python3-devel which needs to be removed.  FreeCAD can be compiled from GIT similar to in OpenSUSE 12.2

{{Code|lang=bash|code=
# install needed packages for development
sudo zypper install gcc cmake OpenCASCADE-devel libXerces-c-devel \
python-devel libqt4-devel python-qt4 Coin-devel SoQt-devel boost-devel \
libode-devel libQtWebKit-devel libeigen3-devel gcc-fortran git swig
 
# create new dir, and go into it
mkdir FreeCAD-Compiled 
cd FreeCAD-Compiled
 
# get the source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad
 
# Now you will have subfolder in this location called free-cad. It contains the source
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build1
cd FreeCAD-Build1 
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
}}
Since you are using git, next time you wish to compile you do not have to clone everything, just pull from git and compile once more
{{Code|lang=bash|code=
# go into free-cad dir created earlier
cd free-cad
 
# pull
git pull
 
# get back to previous dir
cd ..
 
# Now repeat last few steps from before.
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build2
cd FreeCAD-Build2
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
}}
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Debian Squeeze ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Code|lang=bash|code=
# get the needed tools and libs
sudo apt-get install build-essential python libcoin60-dev libsoqt4-dev \
libxerces-c2-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev \
libboost-graph-dev libboost-iostreams-dev libboost-program-options-dev \
libboost-serialization-dev libboost-signals-dev libboost-regex-dev \
libqt4-dev qt4-dev-tools python2.5-dev \
libsimage-dev libopencascade-dev \
libsoqt4-dev libode-dev subversion cmake libeigen2-dev python-pivy \
libtool autotools-dev automake gfortran
 
# checkout the latest source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
}}
&lt;/div&gt;
&lt;/div&gt;

== Updating the source code == &lt;!--T:149--&gt;
FreeCAD development happens fast, everyday or so there are bug fixes or new features. The cmake systems allows you to intelligently update the source code, and only recompile what has changed, making subsequent compilations very fast. Updating the source code with git or subversion is very easy:

{{Code|lang=bash|code=
#Replace with the location where you cloned the source code the first time
cd freecad
#If you are using git
git pull
}}


&lt;!--T:150--&gt;
Move into the appropriate build directory and run cmake again (as cmake updates the version number data for the Help menu, ...about FreeCAD), however you do not need to add the path to source code after &quot;cmake&quot;, just a space and a dot:

{{Code|lang=bash|code=
#Replace with the location of the build directory
cd ../freecad-build
cmake .
make
}}

&lt;!--T:96--&gt;
{{docnav|CompileOnWindows|CompileOnMac}}
[[Category:Developer Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>CompileOnUnixTest</title>
    <ns>0</ns>
    <id>51425</id>
    <revision>
      <id>129999</id>
      <parentid>129998</parentid>
      <timestamp>2014-12-08T00:01:38Z</timestamp>
      <contributor>
        <username>Drei</username>
        <id>3319</id>
      </contributor>
      <minor/>
      <comment>/* Getting the dependencies */</comment>
      <sha1>lx3qr0rs2gva267uhk3f1s0q33dfl2z</sha1>
      <text xml:space="preserve" bytes="22032">{{VeryImportantMessage|'''This is a test page to try different layouts for the CompileOnUnix wiki page. Do not translate.'''}}

On recent linux distributions, FreeCAD is generally easy to build, since all dependencies are usually provided by the package manager. It basically involves 3 steps:

# Getting the FreeCAD source code
# Getting the dependencies (packages FreeCAD depends upon)
# Compiling with &quot;cmake . &amp;&amp; make&quot;

Below, you'll find detailed explanations of the whole process and particularities you might encounter. If you find anything wrong or out-of-date in the text below (Linux distributions change often), or if you use a distribution which is not listed, please help us correcting it.

== Getting the source ==
Before you can compile FreeCAD, you need the source code. There are 3 ways to get it:

=== Git ===
The quickest and best way to get the code is to clone the read-only git repository (you need the [http://git-scm.com/ git] package installed):

&lt;pre&gt;
git clone git://git.code.sf.net/p/free-cad/code free-cad-code
&lt;/pre&gt;

This will place a copy of the latest version of the FreeCAD source code in a new directory called &quot;free-cad-code&quot;. The first time you try connecting to the free-cad.git.sourceforge.net host, you will receive a message asking to authenticate the sourceforge SSH key, which is normally safe to accept (you can check their SSH keys on the sourceforge website if you are not sure)

=== Github ===
There is an always up to date FreeCAD repository on Github: 
[https://github.com/FreeCAD/FreeCAD_sf_master github.com/FreeCAD/FreeCAD_sf_master]

=== Source package ===
Alternatively you can download a source package, but they could be already quite old so it's always better to get the latest sources via git or github.

* Official FreeCAD source packages (distribution-independent): https://sourceforge.net/projects/free-cad/files/FreeCAD%20Source/

== Getting the dependencies ==
To compile FreeCAD under Linux you have to install all libraries mentioned in [[Third Party Libraries]] first. Please note that the names and availability of the libraries will depend on your distribution. Note that if you don't use the most recent version of your distribution, some of the packages below might be missing from your repositories. In that case, look in the [[#Older and non-conventional distributions|Older and non-conventional distributions]] section below. 

[[CompileOnUnixTest#In-source_building|Skip to Compile FreeCAD]]

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Debian and Ubuntu ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
On Debian-based systems (Debian, Ubuntu, Mint, etc...) it is quite easy to get all needed dependencies installed. Most of the libraries are available via apt-get or synaptic package manager.

 build-essential
 cmake
 python
 python-matplotlib
 libtool
 either:
      libcoin60-dev (Debian Wheezy, Wheezy-backports, Ubuntu 13.04 and before)
 or:
      libcoin80-dev (Debian unstable(Jesse), testing, Ubuntu 13.10 and forward, See Additional instruction below])
 libsoqt4-dev
 libxerces-c-dev
 libboost-dev
 libboost-filesystem-dev
 libboost-regex-dev
 libboost-program-options-dev 
 libboost-signals-dev
 libboost-thread-dev
 libqt4-dev
 libqt4-opengl-dev
 qt4-dev-tools
 python-dev
 python-pyside
 pyside-tools
 either:
      libopencascade-dev (official opencascade version)
 or: 
      liboce*-dev (opencascade community edition)
      oce-draw
 gfortran
 libeigen3-dev
 libqtwebkit-dev
 libshiboken-dev
 libpyside-dev
 libode-dev
 swig
 libzipios++-dev
 libfreetype6
 libfreetype6-dev

[http://forum.freecadweb.org/viewtopic.php?f=4&amp;t=5096#p40018 Additional instruction] for libcoin80-dev Debian wheezy-backports, unstable, testing, Ubuntu 13.10 and forward

Note that liboce*-dev includes the following libraries liboce-foundation-dev liboce-modeling-dev liboce-ocaf-dev liboce-visualization-dev liboce-ocaf-lite-dev.  You may have to install these pacakges by individual name.

Optionally you can also install these extra packages:
 libsimage-dev (to make Coin to support additional image file formats)
 checkinstall (to register your installed files into your system's package manager, so yo can easily uninstall later)
 python-pivy (needed for the 2D Drafting module)
 python-qt4 (needed for the 2D Drafting module)
 doxygen and libcoin60-doc (if you intend to generate source code documentation)
 libspnav-dev (for 3Dconnexion devices support like the Space Navigator or Space Pilot)

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Fedora ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages:
 cmake
 doxygen
 swig
 gcc-gfortran
 gettext
 dos2unix
 desktop-file-utils
 libXmu-devel
 freeimage-devel
 mesa-libGLU-devel
 OCE-devel
 python
 python-devel
 python-pyside-devel
 boost-devel
 tbb-devel
 eigen3-devel
 qt-devel
 qt-webkit-devel
 ode-devel
 xerces-c
 xerces-c-devel
 opencv-devel
 smesh-devel
 coin2-devel
 soqt-devel
 freetype
 freetype-devel

And optionally:

 libspnav-devel (for 3Dconnexion devices support like the Space Navigator or Space Pilot)
 pivy ( https://bugzilla.redhat.com/show_bug.cgi?id=458975 Pivy is not mandatory but needed for the Draft module )

Building FreeCAD with coin3 is still more hassle on Fedora, since only coin2 is provided in the official repos, but if you wish so anyway, you can avoid to rebuild all the coin3 / soqt / pivy suite by installing coin3-ready packages from http://www.zultron.com/rpm-repo/
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Gentoo === 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages to build FreeCAD:
 dev-cpp/eigen
 dev-games/ode
 dev-libs/boost
 dev-libs/xerces-c
 dev-python/pivy
 dev-python/PyQt4
 media-libs/coin
 media-libs/SoQt
 sci-libs/opencascade-6.5
 sys-libs/zlib
 virtual/fortran
 x11-libs/qt-gui
 x11-libs/qt-opengl
 x11-libs/qt-svg
 x11-libs/qt-webkit
 x11-libs/qt-xmlpatterns
 dev-lang/swig-2.0.4-r1
 app-admin/eselect-python-20091230
 dev-lang/python-2.7.2-r3
 dev-util/cmake-2.8.4
 sys-apps/findutils-4.4.0
 freetype

Since latest opencascade is not available, you might want to compile opencascade too, hence the following additional libaries are needed:
 media-libs/ftgl
 virtual/opengl
 x11-libs/libXmu
 dev-lang/tcl-8.5.9
 dev-lang/tk-8.5.9-r1
 dev-tcltk/itcl-3.4_beta1
 dev-tcltk/itk-3.4_pre20090417
 dev-tcltk/tix-8.4.3
 x11-libs/gl2ps
 sys-devel/automake-1.11
 sys-devel/autoconf-2.68
 sys-devel/libtool
 dev-java/java-config-2.1.11-r3
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You need the following packages:
 gcc
 cmake
 OpenCASCADE-devel
 libXerces-c-devel
 python-devel
 libqt4-devel
 python-qt4
 Coin-devel
 SoQt-devel
 boost-devel
 libode-devel
 libQtWebKit-devel
 libeigen3-devel
 gcc-fortran
 freetype2
 freetype2-devel

For FreeCAD 0.14 stable and 0.15 unstable you need to add Eigen3 and swig libraries, that don't seem to be in standard repos. You can get them with one-click install here:
*[http://software.opensuse.org/search?q=eigen3&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true Eigen3]
*[http://software.opensuse.org/search?q=swig&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true swig]

Also, note that Eigen3 Library from Factory Education was causing problems sometimes, so use the one from KDE 4.8 Extra repo
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;

=== Arch Linux ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
You will need the following libraries from the official repositories:
 boost-libs
 curl
 hicolor-icon-theme
 libspnav
 opencascade
 python2-pivy
 python2-matplotlib
 python2-pyside
 python2-shiboken
 qtwebkit
 shared-mime-info
 xerces-c
 boost
 cmake
 coin
 desktop-file-utils
 eigen
 gcc-fortran
 swig
 xerces-c

Also, make sure to check the AUR for the remaining packages, currently:
 python2-pyside-tools
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Older and non-conventional distributions ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
On other distributions, we have very few feedback from users, so it might be harder to find the required packages. Try first locating the required libraries mentioned in [[Third Party Libraries]]. Beware that some of them might have a slightly different package name in your distribution (such as name, libname, name-dev, name-devel, etc...).

You also need the [[wikipedia:GNU Compiler Collection|GNU gcc compiler]] version equal or above 3.0.0. g++ is also needed because FreeCAD is completely written in C++. During the compilation some Python scripts get executed. So the Python interpreter has to work properly. To avoid any linker problems during the build process it is also a good idea to have the library paths either in your ''LD_LIBRARY_PATH'' variable or in your ''ld.so.conf'' file. This is normally already the case in recent distributions.

For more details have also a look to ''README.Linux'' in your sources.
&lt;/div&gt;
&lt;/div&gt;

== Compile FreeCAD ==
=== Using cMake ===
cMake is a newer build system which has the big advantage of being common for different target systems (Linux, Windows, MacOSX, etc). FreeCAD is now using the cMake system as its main building system. Compiling with cMake is usually very simple and happens in 2 steps. In the first step, cMake checks that every needed programs and libraries are present on your system and sets up all that's necessary for the subsequent compilation. You are given a few alternatives detailed below, but FreeCAD comes with sensible defaults. The second step is the compiling itself, which produces the FreeCAD executable.

Since FreeCAD is a heavy application, compiling can take a bit of time (about 10 minutes on a fast machine, 30 minutes on a slow one)

==== In-source building ====
FreeCAD can be built in-source, which means that all the files resulting from the compilation stay in the same folder as the source code. This is fine if you are just looking at FreeCAD, and want to be able to remove it easily by just deleting that folder. But in case you are planning to compile it often, you are advised to make an out-of-source build, which offers many more advantages. The following commands will compile freecad:

&lt;pre&gt;
$ cd freecad (the folder where you cloned the freecad source)
&lt;/pre&gt;

If you installed pivy from source, set the compiler flag to use the correct pivy (via FREECAD_USE_EXTERNAL_PIVY=1). Also, set the build type to debug. (NOTE: the &quot;.&quot; and space after the cmake flags are CRITICAL!):

&lt;pre&gt;
$ cmake -DFREECAD_USE_EXTERNAL_PIVY=1 -DCMAKE_BUILD_TYPE=Debug .
$ make
&lt;/pre&gt;

Your FreeCAD executable will then reside in the &quot;bin&quot; folder, and you can launch it with:

&lt;pre&gt;
$ ./bin/FreeCAD
&lt;/pre&gt;

==== Out-of-source build ====
If you intend to follow the fast evolution of FreeCAD, building in a separate folder is much more convenient. Everytime you update the source code, cMake will then intelligently distinguish which files have changed, and recompile only what is needed. Out-of-source builds are specially handy when using the Git system, because you can easily try other branches without confusing the build system. To build out-of-source, simply create a build directory, distinct from your freecad source folder, and, from the build folder, point cMake to the source folder:
&lt;pre&gt;
mkdir freecad-build
cd freecad-build
cmake ../freecad (or whatever the path is to your FreeCAD source folder)
make
&lt;/pre&gt;
The FreeCAD executable will then reside in the &quot;bin&quot; directory (within your freecad-build directory).

==== Configuration options ====
There are a number of experimental or unfinished modules you may have to build if you want to work on them. To do so, you need to set the proper options for the configuration phase. Do it either on the command line, passing &lt;nowiki&gt;-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;&lt;/nowiki&gt; options to cMake or using one of the availables gui-frontends (eg for Debian, packages cmake-qt-gui or cmake-curses-gui).

As an example, to configure on the command line with the Assembly module built, issue:
&lt;pre&gt;
cmake -D FREECAD_BUILD_ASSEMBLY:BOOL=ON ''path-to-freecad-root''
&lt;/pre&gt;
Possible options are listed in FreeCAD's root CmakeLists.txt file.

==== Qt designer plugin ====
If you want to develop Qt stuff for FreeCAD, you'll need the Qt Designer plugin that provides all custom widgets of FreeCAD. Go to
&lt;pre&gt;
freecad/src/Tools/plugins/widget
&lt;/pre&gt;
So far we don't provide a makefile -- but calling 
&lt;pre&gt;
qmake plugin.pro
&lt;/pre&gt;
creates it. Once that's done, calling
&lt;pre&gt;
make
&lt;/pre&gt;
will create the library libFreeCAD_widgets.so. To make this library known to Qt Designer you have to copy the file to $QTDIR/plugin/designer

==== Doxygen ====
If you feel bold enough to dive in the code, you could take advantage to build and consult Doxygen generated FreeCAD's [[Source documentation]]. Note that the current doc files are outdated.

=== Making a debian package ===
If you plan to build a Debian package out of the sources you need to install those packages first:
&lt;pre&gt;
dh-make
devscripts
lintian (optional, used for checking if packages are standard-compliant)
&lt;/pre&gt;
To build a package open a console, simply go to the FreeCAD directory and call
&lt;pre&gt;
debuild
&lt;/pre&gt;
Once the package is built, you can use lintian to check if the package contains errors
 lintian your-fresh-new-freecad-package.deb (replace by the name of the package you just created)

== Troubleshooting ==

== Automatic build scripts ==
Here is all what you need for a complete build of FreeCAD. It's a one-script-approach 
and works on a fresh installed distro. The commands will ask for root password
(for installation of packages) and sometime to acknowledge a fingerprint for
an external repository server or https-subversion repository. This scripts should
run on 32 and 64 bit versions. They are written for distinct version, but are 
also likely to run on a later version with or without minor changes.

If you have such a script for your preferred distro, please send it! We will 
incorporate it into this article.

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Ubuntu 10.04 LTS - Lucid Lynx / Ubuntu 10.10 Maverick Meerkat / Ubuntu 11.04 Natty Narwhal === 
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
Note that this script starts by adding the [https://launchpad.net/~freecad-maintainers/+archive/freecad-daily FreeCAD Daily Builds PPA] repository so it can proceed with the Eigen3 library (libeigen3-dev) installation. If you already have this library installed on your system, you can remove the first line.

&lt;pre&gt;
sudo add-apt-repository ppa:freecad-maintainers/freecad-daily &amp;&amp; sudo apt-get update
sudo apt-get install build-essential python libcoin60-dev libsoqt4-dev \
libxerces-c2-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev \
libboost-graph-dev libboost-iostreams-dev libboost-program-options-dev \
libboost-serialization-dev libboost-signals-dev libboost-regex-dev libboost-thread-dev \
libqt4-dev qt4-dev-tools python2.7-dev libopencascade-dev libsoqt4-dev \
libode-dev subversion cmake libeigen2-dev libsimage-dev python-qt4 \
libtool autotools-dev automake bison flex gfortran libeigen3-dev libqtwebkit-dev git
 
# checkout the latest source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0

# use FreeCAD
./FreeCAD

# Update latest version

# go to source dir
cd freecad
 
# Update source
git pull
 
# build configuration 
cmake .
 
# build FreeCAD
make
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;

=== OpenSUSE 12.2 ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
No external Repositories are needed to compile FreeCAD 0.13 with this release. However, there is an imcompatability with python3-devel which needs to be removed.  FreeCAD can be compiled from GIT similar to in OpenSUSE 12.2
&lt;pre&gt;
# install needed packages for development
sudo zypper install gcc cmake OpenCASCADE-devel libXerces-c-devel \
python-devel libqt4-devel python-qt4 Coin-devel SoQt-devel boost-devel \
libode-devel libQtWebKit-devel libeigen3-devel gcc-fortran git swig
 
# create new dir, and go into it
mkdir FreeCAD-Compiled 
cd FreeCAD-Compiled
 
# get the source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad
 
# Now you will have subfolder in this location called free-cad. It contains the source
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build1
cd FreeCAD-Build1 
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
Since you are using git, next time you wish to compile you do not have to clone everything, just pull from git and compile once more
&lt;pre&gt;
# go into free-cad dir created earlier
cd free-cad
 
# pull
git pull
 
# get back to previous dir
cd ..
 
# Now repeat last few steps from before.
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build2
cd FreeCAD-Build2
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE 12.1 ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
For FreeCAD 0.13 unstable you need to add Eigen3 and swig libraries, that don't seem to be in standard repos. You can get them with one-click install here:

Eigen3:
http://software.opensuse.org/search?q=eigen3&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true

swig:
http://software.opensuse.org/search?q=swig&amp;baseproject=openSUSE%3A12.1&amp;lang=en&amp;exclude_debug=true
&lt;pre&gt;
# install needed packages for development
sudo zypper install gcc cmake OpenCASCADE-devel libXerces-c-devel \
python-devel libqt4-devel python-qt4 Coin-devel SoQt-devel boost-devel \
libode-devel libQtWebKit-devel libeigen3-devel gcc-fortran git
 
# create new dir, and go into it
mkdir FreeCAD-Compiled 
cd FreeCAD-Compiled
 
# get the source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad
 
# Now you will have subfolder in this location called free-cad. It contains the source
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build1
cd FreeCAD-Build1 
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;

Since you are using git, next time you wish to compile you do not have to clone everything, just pull from git and compile once more

&lt;pre&gt;
# go into free-cad dir created earlier
cd free-cad
 
# pull
git pull
 
# get back to previous dir
cd ..
 
# Now repeat last few steps from before.
 
# make another dir for compilation, and go into it
mkdir FreeCAD-Build2
cd FreeCAD-Build2
 
# build configuration 
cmake ../free-cad
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE 11.2 ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
This script is '''not working''' at the moment because:
* libXerces-c-devel seems to have disappeared ....
&lt;pre&gt; 
# install needed packages for development
sudo zypper install gcc cmake subversion OpenCASCADE-devel \
libXerces-c-devel python-devel libqt4-devel  python-qt4 \
Coin-devel SoQt-devel boost-devel libode-devel libQtWebKit-devel \
libeigen2-devel gcc-fortran
 
# get the source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
nice make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== OpenSUSE 11.1 ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
&lt;pre&gt;
# additional repository (for OpenCascade)
sudo zypper -p http://packman.unixheads.com/suse/11.1/
 
# install needed packages for development
sudo zypper install gcc cmake subversion OpenCASCADE-devel \
libXerces-c-devel python-devel libqt4-devel  python-qt4 \
Coin-devel SoQt-devel boost-devel libode-devel libQtWebKit-devel \
libeigen2-devel
 
# get the source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
nice make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Debian Squeeze ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
&lt;pre&gt;
# get the needed tools and libs
sudo apt-get install build-essential python libcoin60-dev libsoqt4-dev \
libxerces-c2-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev \
libboost-graph-dev libboost-iostreams-dev libboost-program-options-dev \
libboost-serialization-dev libboost-signals-dev libboost-regex-dev \
libqt4-dev qt4-dev-tools python2.5-dev \
libsimage-dev libopencascade-dev \
libsoqt4-dev libode-dev subversion cmake libeigen2-dev python-pivy \
libtool autotools-dev automake gfortran
 
# checkout the latest source
git clone git://free-cad.git.sourceforge.net/gitroot/free-cad/free-cad freecad
 
# go to source dir
cd freecad
 
# build configuration 
cmake .
 
# build FreeCAD
make
 
# test FreeCAD
cd bin
./FreeCAD -t 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

== Updating the source code ==
FreeCAD development happens fast, everyday or so there are bug fixes or new features. The cmake systems allows you to intelligently update the source code, and only recompile what has changed, making subsequent compilations very fast. Updating the source code with git or subversion is very easy:
&lt;pre&gt;
cd freecad (or where you cloned the source code the first time)
git pull (if you are using git)
&lt;/pre&gt;

Move into the appropriate build directory and run cmake again (as cmake updates the version number data for the Help menu, ...about FreeCAD), however you do not need to add the path to source code after &quot;cmake&quot;, just a space and a dot:
&lt;pre&gt;
cd ../freecad-build (or wherever your build directory is located)
 
cmake .
 
make
&lt;/pre&gt;</text>
    </revision>
  </page>
  <page>
    <title>CompileOnWindows</title>
    <ns>0</ns>
    <id>19</id>
    <revision>
      <id>119061</id>
      <parentid>114803</parentid>
      <timestamp>2014-11-07T21:04:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>75u0uraq4vjkzeik8veos2jdkcqhy1c</sha1>
      <text xml:space="preserve" bytes="14623">
&lt;!--T:1--&gt;
This article explains step by step '''how to compile FreeCAD on Windows'''.

== Prerequisites == &lt;!--T:2--&gt;

&lt;!--T:70--&gt;
'''NOTE:- The new LibPack (FreeCADLibs_10.0_x64_VC11.7z) requires Visual Studio 2012.'''

&lt;!--T:72--&gt;
'''NOTE:- Currently you must use Cmake version 2.x.x, Cmake 3.x.x is not supported.'''


&lt;!--T:71--&gt;
What you need is mainly the compiler. On Windows we use the M$
Visual Studio 9 Compiler 2008 (or VC++ Express 2008) with the highest service pack. Although it's
probably possible to use Cygwin or MinGW gcc it's not tested or ported so
far. You need to download the Windows Platform SDK to get e.g. the Windows.h, although this should not be needed with M$ compilers (either full or express).

&lt;!--T:3--&gt;
Also you need all the [[Third Party Libraries]] to successfully compile FreeCAD.
If you use the M$ compilers you want most likely to download the FreeCAD LibPack 
which provides you with all needed libs to build FreeCAD on Windows.

&lt;!--T:4--&gt;
Other prerequisites (and helpful programs) are:
* CMake version 2.x.x (cmake 3.x.x will not work)
* TortoiseGit
* Python 2.6
* [http://sourceforge.net/projects/nsis/ NSIS] Windows installer (note: formerly, [http://wixtoolset.org/ WiX] installer was used - now under transition to NSIS) - if you want to make msi installer

&lt;!--T:5--&gt;
It is also necessary to have, in your system path, paths to:
* Libpack
* git (not tortoiseGit, but git.exe)
* python

== Building with CMake == &lt;!--T:6--&gt;
First of all, you have to [http://www.cmake.org/cmake/resources/software.html download CMake]
and install it on your build machine.

&lt;!--T:73--&gt;
'''NOTE:- Currently you must use Cmake version 2.x.x, Cmake 3.x.x is not supported.'''

=== The switch to CMake === &lt;!--T:7--&gt;
Since version 0.9 we use the CMake build system to generate the build/make files
for various compilers. We do not longer deliver .vcproj files. 
If you want build former versions of FreeCAD (0.8 and older) see
[[#Building older versions|Building older versions]] later in this article.

&lt;!--T:8--&gt;
We switched because it became more and more painful to maintain project files for 30+
build targets and x compilers. CMake gives us the possibility to support alternative 
IDEs, like  Code::Blocks, Qt Creator and Eclipse CDT. The main compiler
we use is still M$ VC9 Express, though. But we plan for the future a build process on 
Windows without proprietary compiler software.

=== CMake dependencies === &lt;!--T:52--&gt;
The first step to build FreeCAD with CMake is to configure the environment. There
are basically two ways to go:
* Using the LibPack
* Installing all needed libs and let CMake find them


&lt;!--T:53--&gt;
We will be using LibPack here.  The second option may be discussed
in [[#Options for the Build Process|Options for the Build Process]].  


&lt;!--T:54--&gt;
Add libpack to the system path:
* Start menu -&gt; Right click on Computer -&gt; Properties -&gt; Advanced system settings
* Advanced tab -&gt; Environment Variables...
* Add the libpack folder location to the '''PATH'''
* It should be separated from the others with a semicolon `;`

&lt;!--T:12--&gt;
If you are building with Qt Creator, jump to
[[#Building with Qt Creator|Building with Qt Creator]],
otherwise proceed to
[[#Building with Visual Studio 9 2008|Building with Visual Studio 9 2008]].

=== Building with Visual Studio 9 2008 === &lt;!--T:55--&gt;

==== Configure CMake using GUI ==== &lt;!--T:56--&gt;
[[File:CMake_Screen.png]]
* Open CMake GUI
* Specify source folder
* Specify build folder
* Click '''Configure'''
* Specify the generator as '''Visual Studio 9 2008''' 


&lt;!--T:57--&gt;
This will begin configuration and should fail because the location of
'''FREECAD_LIBPACK_DIR''' is unset.
* Expand the '''FREECAD''' category and set '''FREECAD_LIBPACK_DIR''' to the correct location
* Click '''Configure''' again
* There should be no errors
* Click '''Generate'''
* Close CMake
* Copy '''libpack\bin''' folder into the new build folder CMake created

==== Building ==== &lt;!--T:58--&gt;
* Open '''Visual Studio 9 2008''' or '''Visual C++ Express 2008'''&lt;ref&gt;Visual C++ Express 2008 does not support 64-bit compilation.  There is a workaround [http://jenshuebel.wordpress.com/2009/02/12/visual-c-2008-express-edition-and-64-bit-targets/ here]&lt;/ref&gt;
* File -&gt; Open -&gt; Project/Solution
* Open '''FreeCAD_Trunk.sln''' from the build folder CMake created
* Switch the '''Solutions Configuration''' dropdown at the top to '''Release'''
* Build -&gt; Build Solution to build
* This will take a long time...


&lt;!--T:59--&gt;
After it is built:
* Debug -&gt; Start without Debugging
* Click popup menu under '''Executable File Name''' and choose '''Browse'''
* Go to the build\bin folder and choose '''FreeCAD.exe'''
* You are done!

=== Building with Qt Creator === &lt;!--T:60--&gt;

==== Installation and configuration of Qt Creator ==== &lt;!--T:61--&gt;
* Download and install [https://qt-project.org/downloads Qt Creator]
* Tools -&gt; Options -&gt; Text Editor -&gt; Behavior tab:
** File Encodings -&gt; Default Encodings:
** Set to: '''ISO-8859-1 /...csISOLatin1'''&lt;ref&gt;Certain characters create errors/warnings with Qt Creator if left set to UTF-8.  This seems to fix it.&lt;/ref&gt;
* Tools -&gt; Options -&gt; Build &amp; Run:
** CMake tab
*** Fill Executable box with path to cmake.exe
** Kits tab
*** Name: MSVC 2008
*** Compiler: Microsoft Visual C++ Compiler 9.0 (x86)
*** Debugger: Auto detected...
*** Qt version: None
** General tab
*** Uncheck: Always build project before deploying it
*** Uncheck: Always deploy project before running it

==== Import project and Build ==== &lt;!--T:62--&gt;
* File -&gt; Open File or Project
* Open '''CMakeLists.txt''' which is in the top level of the source
* This will start CMake
* Choose build directory and click next
* Set generator to '''NMake Generator (MSVC 2008)'''
* Click Run CMake


&lt;!--T:63--&gt;
CMake will error because it doesn't know where libpack is
* Browse to the new build directory and open '''CMakeCache.txt'''
* Find: '''FREECAD_LIBPACK_DIR:PATH='''
* Set the right side to libpack's location
* Save and Close the file
* Return to CMake and click '''Run CMake'''
* This will configure and generate before completing
* Click Finish
* Copy '''libpack\bin''' folder into the new build folder CMake created


&lt;!--T:64--&gt;
Now FreeCAD can be built
* Build -&gt; Build All
* This will take a long time...


&lt;!--T:65--&gt;
Once complete, it can be run:
There are 2 green triangles at the bottom left.  One is debug.
The other is run.  Pick whichever you want.

=== Options for the Build Process === &lt;!--T:13--&gt;
The CMake build system gives us a lot more flexibility over the build process. That means
we can switch on and off some features or modules. It's in a way like the Linux kernel build.
You have a lot switches to determine the build process.

&lt;!--T:14--&gt;
Here is the description of these switches. They will most likely change a lot in the future
because we want to increase the build flexibility a lot more.

&lt;!--T:15--&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align:left&quot;
|+ Link table
|-
! Variable name       !! Description  !! Default
|-               
| FREECAD_LIBPACK_USE || Switch the usage of the FreeCAD LibPack on or off  || On Win32 on, otherwishe off        
|-               
| FREECAD_LIBPACK_DIR || Directory where the LibPack is || FreeCAD SOURCE dir
|-               
| FREECAD_BUILD_GUI   || Build FreeCAD with all Gui related modules || ON
|-               
| FREECAD_BUILD_CAM   || Build the CAM module, experimental! || OFF
|-               
| FREECAD_BUILD_INSTALLER || Create the project files for the Windows installer. || OFF
|-               
| FREECAD_BUILD_DOXYGEN_DOCU || Create the project files for source code documentation. || OFF
|-               
| FREECAD_MAINTAINERS_BUILD || Switch on stuff needed only when you do a Release build. || OFF
|}

=== Command line build === &lt;!--T:66--&gt;
Here an example how to build FreeCAD from the Command line:

&lt;syntaxhighlight&gt;
 rem @echo off
 rem   Build script, uses vcbuild to completetly build FreeCAD
 
 rem update trunc
 d:
 cd &quot;D:\_Projekte\FreeCAD\FreeCAD_0.9&quot;
 &quot;C:\Program Files (x86)\Subversion\bin\svn.exe&quot; update 
 
 rem  set the aprobiated Variables here or outside in the system
 
 set PATH=C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem
 set INCLUDE=
 set LIB=
 
 rem Register VS Build programms
 call &quot;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcvarsall.bat&quot;
 
 rem Set Standard include paths
 set INCLUDE=%INCLUDE%;%FrameworkSDKDir%\include
 set INCLUDE=%INCLUDE%;C:\Program Files\Microsoft SDKs\Windows\v6.0A\Include
 
 rem Set lib Pathes
 set LIB=%LIB%;C:\Program Files\Microsoft SDKs\Windows\v6.0A\Lib
 set LIB=%LIB%;%PROGRAMFILES%\Microsoft Visual Studio\VC98\Lib
 
 rem Start the Visuall Studio build process
 &quot;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages\vcbuild.exe&quot; &quot;D:\_Projekte\FreeCAD FreeCAD_0.9_build\FreeCAD_trunk.sln&quot; /useenv
&lt;/syntaxhighlight&gt;


== Building older versions == &lt;!--T:67--&gt;

=== Using LibPack === &lt;!--T:68--&gt;
To make it easier to get FreeCAD compiled, we provide a collection of all
needed libraries. It's called the [[Third Party Libraries|LibPack]]. You can find it on the  [http://sourceforge.net/project/showfiles.php?group_id=49159 download page] on
sourceforge.

&lt;!--T:26--&gt;
You need to set the following environment variables:

&lt;!--T:27--&gt;
:'''FREECADLIB''' = &quot;D:\Wherever\LIBPACK&quot;

&lt;!--T:28--&gt;
:'''QTDIR''' = &quot;%FREECADLIB%&quot;

&lt;!--T:29--&gt;
Add &quot;%FREECADLIB%\bin&quot; and &quot;%FREECADLIB%\dll&quot; to the system ''PATH'' variable. Keep in mind that you have to replace &quot;%FREECADLIB%&quot; with the path name, since Windows does not recursively replace environment variables.

==== Directory setup in Visual Studio ==== &lt;!--T:30--&gt;
Some search path of Visual Studio need to be set. 
To change them, use the menu ''Tools→Options→Directory

===== Includes ===== &lt;!--T:31--&gt;
Add the following search path to the include path search list:
* %FREECADLIB%\include
* %FREECADLIB%\include\Python
* %FREECADLIB%\include\boost
* %FREECADLIB%\include\xercesc
* %FREECADLIB%\include\OpenCascade
* %FREECADLIB%\include\OpenCV
* %FREECADLIB%\include\Coin
* %FREECADLIB%\include\SoQt
* %FREECADLIB%\include\QT
* %FREECADLIB%\include\QT\Qt3Support
* %FREECADLIB%\include\QT\QtCore
* %FREECADLIB%\include\QT\QtGui
* %FREECADLIB%\include\QT\QtNetwork
* %FREECADLIB%\include\QT\QtOpenGL
* %FREECADLIB%\include\QT\QtSvg
* %FREECADLIB%\include\QT\QtUiTools
* %FREECADLIB%\include\QT\QtXml
* %FREECADLIB%\include\Gts
* %FREECADLIB%\include\zlib

===== Libs ===== &lt;!--T:32--&gt;
Add the following search path to the lib path search list:
* %FREECADLIB%\lib

===== Executables ===== &lt;!--T:33--&gt;
Add the following search path to the executable path search list:
* %FREECADLIB%\bin
* TortoiseSVN binary installation directory, usually &quot;C:\Programm Files\TortoiseSVN\bin&quot;, this is needed for a distribution build when ''SubWVRev.exe'' is used to extract the version number from Subversion.

==== Python needed ==== &lt;!--T:34--&gt;
During the compilation some Python scripts get executed. So the Python
interpreter has to function on the OS. Use a command box to check it. If
the Python library is not properly installed you will get an error message
like ''Cannot find python.exe''. If you use the LibPack you can also use the
python.exe in the bin directory.

==== Special for VC8 ==== &lt;!--T:35--&gt;
When building the project with VC8, you have to change the link information for the WildMagic library, since you need a different version for VC6 and VC8. Both versions are supplied in ''LIBPACK/dll''. In the project properties for ''AppMesh'' change the library name for the ''wm.dll'' to the VC8 version. Take care to change it in Debug ''and'' Release configuration.

=== Compile === &lt;!--T:36--&gt; 

&lt;!--T:37--&gt;
After you conform to all prerequisites the compilation is - hopefully - only a mouse click in VC 

=== After Compiling === &lt;!--T:38--&gt;
To get FreeCAD up and running from the compiler environment you need to copy a few files from the [[Third Party Libraries|LibPack]] to the ''bin'' folder where FreeCAD.exe is installed after a successful build:

&lt;!--T:39--&gt;
* ''python.exe'' and ''python_d.exe'' from ''LIBPACK/bin''
* ''python25.dll'' and ''python25_d.dll'' from ''LIBPACK/bin''
* ''python25.zip'' from ''LIBPACK/bin''
* make a copy of ''Python25.zip'' and rename it to ''Python25_d.zip''
* ''QtCore4.dll'' from ''LIBPACK/bin''
* ''QtGui4.dll'' from ''LIBPACK/bin''
* ''boost_signals-vc80-mt-1_34_1.dll'' from ''LIBPACK/bin''
* ''boost_program_options-vc80-mt-1_34_1.dll'' from ''LIBPACK/bin''
* ''xerces-c_2_8.dll'' from ''LIBPACK/bin''
* ''zlib1.dll'' from ''LIBPACK/bin''
* ''coin2.dll'' from ''LIBPACK/bin''
* ''soqt1.dll'' from ''LIBPACK/bin''
* ''QtOpenGL4.dll'' from ''LIBPACK/bin''
* ''QtNetwork4.dll'' from ''LIBPACK/bin''
* ''QtSvg4.dll'' from ''LIBPACK/bin''
* ''QtXml4.dll'' from ''LIBPACK/bin''

&lt;!--T:40--&gt;
When using a [[Third Party Libraries|LibPack]] with a Python version older than 2.5 you have to copy two further files:
* ''zlib.pyd'' and ''zlib_d.pyd'' from ''LIBPACK/bin/lib''. This is needed by python to open the zipped python library.
* ''_sre.pyd'' and ''_sre_d.pyd'' from ''LIBPACK/bin/lib''. This is needed by python for the built in help system.

&lt;!--T:41--&gt;
If you don't get it running due to a Python error it is very likely that one of the ''zlib*.pyd'' files is missing.

=== Additional stuff === &lt;!--T:42--&gt; 

&lt;!--T:43--&gt;
If you whant to build the source code documentation you need [http://www.stack.nl/~dimitri/doxygen/ DoxyGen].

&lt;!--T:44--&gt;
To create an intstaller package you need [http://wix.sourceforge.net/ WIX].


&lt;!--T:45--&gt;
During the compilation some Python scripts get executed. So the Python interpreter has to work properly.

&lt;!--T:46--&gt;
For more details have also a look to ''README.Linux'' in your sources.

&lt;!--T:47--&gt;
First of all you should build the Qt plugin that provides all custom widgets of FreeCAD we need for the Qt Designer. The sources are located under 

&lt;pre&gt;
//src/Tools/plugins/widget//.
&lt;/pre&gt;

&lt;!--T:48--&gt;
So far we don't provide a makefile -- but calling 

&lt;pre&gt;
qmake plugin.pro
&lt;/pre&gt;

&lt;!--T:49--&gt;
creates it. Once that's done, calling ''make'' will create the library 

&lt;pre&gt;
//libFreeCAD_widgets.so//.
&lt;/pre&gt;

&lt;!--T:50--&gt;
To make this library known to your ''Qt Designer'' you have to copy the file to

&lt;pre&gt;
//$QTDIR/plugin/designer//.
&lt;/pre&gt;

== References ==
{{reflist}}



&lt;!--T:69--&gt;
{{docnav|Tracker|CompileOnUnix}}
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Compiling</title>
    <ns>0</ns>
    <id>629</id>
    <revision>
      <id>83888</id>
      <parentid>83887</parentid>
      <timestamp>2014-05-16T11:56:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a2sbj1f4oqbd16apg73pxx7ianfp1rn</sha1>
      <text xml:space="preserve" bytes="658">
&lt;!--T:1--&gt;
Each operating system has its own page for compiling FreeCAD in the [[Online_Help_Toc|Online Help Documentation]]. 
{| align='center' width=50%
|align=center|[[Image:Windows.png | alt='Windows' | link= CompileOnWindows]]
|align=center|[[Image:Linux.png   | alt='Linux' | link= CompileOnUnix]]
|align=center|[[Image:Mac.png     | alt='Mac' | link= CompileOnMac]] 
|-
|align=center|[[CompileOnWindows|Compile on Windows]]
|align=center|[[CompileOnUnix | Compile on Linux/Unix]]
|align=center|[[CompileOnMac | Compile on Mac]]
|}

&lt;!--T:2--&gt;
[[Category:Developer_Documentation]]
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Complete Workbench</title>
    <ns>0</ns>
    <id>38235</id>
    <revision>
      <id>101932</id>
      <parentid>101931</parentid>
      <timestamp>2014-08-02T15:08:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ru35qwm7d5t4tivhfgt9xgf2jdwb07y</sha1>
      <text xml:space="preserve" bytes="615">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
From [[Quality project]]:

&lt;!--T:3--&gt;
...  '''Complete''' workbench ... is the starting workbench
for the average user (if there is one ). The complete workbench hold all 
Commands and Features from all the modules and workbenches which met certain
'''[[Gui Command#Quality requirements | quality criteria]]'''. That will hide away 
the stormy development and half implemented features from the user which wants just model. 


&lt;!--T:4--&gt;
ToDo


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Console API</title>
    <ns>0</ns>
    <id>738</id>
    <revision>
      <id>133198</id>
      <parentid>121041</parentid>
      <timestamp>2014-12-23T20:53:50Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>eooycsyufdnq6fsb7fsz9vru4f5pzb1</sha1>
      <text xml:space="preserve" bytes="978">
&lt;!--T:1--&gt;
This module is contained inside the FreeCAD module and contains methods to send text to FreeCAD's output console and status bar. The messages will have different color if they are message, warning or error. 

&lt;!--T:2--&gt;
Example:

{{Code|code=
import FreeCAD
FreeCAD.Console.PrintMessage(&quot;Hello World!\n&quot;)
}}



&lt;!--T:3--&gt;
{{APIFunction|GetStatus|&quot;Log&quot; or &quot;Msg&quot; or &quot;Wrn&quot; or &quot;Err&quot;|Get the status for either Log, Msg, Wrn or Error for an observer|a status string.}}
{{APIFunction|PrintError|string|Prints an error message to the output|nothing}}
{{APIFunction|PrintLog|string|Prints a log message to the output|nothing}}
{{APIFunction|PrintMessage|string|Prints a message to the output|nothing}}
{{APIFunction|PrintWarning|string|Prints a warning to the output|nothing}}
{{APIFunction|SetStatus|string|Set the stats for either Log, Msg, Wrn or Error for an observer| }}

&lt;!--T:4--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint Concentric</title>
    <ns>0</ns>
    <id>37108</id>
    <revision>
      <id>104476</id>
      <parentid>104475</parentid>
      <timestamp>2014-08-12T20:49:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h58unfalgsnxr24axaui7cps4gc52cj</sha1>
      <text xml:space="preserve" bytes="386">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:4--&gt;
{{GuiCommand|Name=Constraint Concentric|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Concentric|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint EqualLength</title>
    <ns>0</ns>
    <id>1755</id>
    <revision>
      <id>93815</id>
      <parentid>57098</parentid>
      <timestamp>2014-07-02T09:34:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>a5quhp5b4whvlq0nzyn0dmn4iugejm5</sha1>
      <text xml:space="preserve" bytes="2394">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint EqualLength|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain equal|SeeAlso=[[Constraint Radius|Constraint Radius]]}}

====Description==== &lt;!--T:2--&gt;
The Constrain Equal constraint forces two or more line segments in a line , poly-line or rectangle to have equal length. If applied to arcs or circles the radii are constrained to be equal. It cannot be applied to geometry primitives which are not of the same type (e.g. line segments and arcs).

====Operation==== &lt;!--T:3--&gt;
The example sketch below contains a number of sketch primitives ( line,poly-line, rectangle, arc and circle).&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint1.png|256px]]&lt;br /&gt;&lt;br /&gt;
Select two or more line segments (e.g. line and one side of the rectangle).&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint2.png|256px]]&lt;br /&gt;&lt;br /&gt;
Click on the Constrain Equal icon  [[File:Constraint_EqualLength.png|16px]] in the Sketcher toolbar (in either the Sketcher or Part Design workbenches) or select the Constrain Equal menu item from the Sketcher constraints sub menu item in either the Sketch or Part Design menu item depending upon which workbench is selected (Sketcher or Part Design) to apply the constraint to the selected items.&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint3.png|256px]]&lt;br /&gt;&lt;br /&gt;
Now select the arc and the circle in the sketch.&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint4.png|256px]]&lt;br /&gt;&lt;br /&gt;
and apply the Constrain Equal [[File:Constraint_EqualLength.png|16px]] constraint as before.&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint5.png|256px]]&lt;br /&gt;&lt;br /&gt;
Now select the line segment, all segments of the poly-line and one of the remaining unconstrained sides of the rectangle &lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint6.png|256px]]&lt;br /&gt;&lt;br /&gt;
and apply the Constrain Equal [[File:Constraint_EqualLength.png|16px]] constraint as before.&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint7.png|256px]]&lt;br /&gt;&lt;br /&gt;
Select the line segment and the arc&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint8.png|256px]]&lt;br /&gt;&lt;br /&gt;
and apply the Constrain Equal [[File:Constraint_EqualLength.png|16px]] constraint as before. A pop-up message indicates that the constrained items have to be of the same geometrical type (lines of zero curvature or lines of non-zero curvature).&lt;br /&gt;&lt;br /&gt;
[[File:EqualConstraint9.png|256px]]


</text>
    </revision>
  </page>
  <page>
    <title>Constraint ExternalAngle</title>
    <ns>0</ns>
    <id>37087</id>
    <revision>
      <id>104491</id>
      <parentid>104490</parentid>
      <timestamp>2014-08-12T20:53:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sc09371eplbmsr10asr46fbwhktrwi5</sha1>
      <text xml:space="preserve" bytes="392">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:4--&gt;
{{GuiCommand|Name=Constraint ExternalAngle|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → ExternalAngle|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint Horizontal</title>
    <ns>0</ns>
    <id>1746</id>
    <revision>
      <id>95165</id>
      <parentid>56687</parentid>
      <timestamp>2014-07-10T22:36:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>3gy092lshwn9xp77u8l03du0bguo1vn</sha1>
      <text xml:space="preserve" bytes="1518">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Horizontal|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain horizontally|SeeAlso=[[Constraint Vertical|Constraint Vertical]]}}

====Description==== &lt;!--T:2--&gt;
The Horizontal Constraint forces a selected line or lines in the image to be parallel to the horizontal axis of the sketch.

====Operation==== &lt;!--T:3--&gt;
[[File:HorizontalConstraint1.png|left|256px]]
Select a line in the sketch by clicking on it.
&lt;br style=&quot;clear: both&quot; /&gt;
[[File:HorizontalConstraint2.png|left|256px]]
The line turns dark green.
&lt;br style=&quot;clear: both&quot; /&gt;
[[File:HorizontalConstraint3.png|left|256px]]
Apply the Horizontal Constraint by clicking on the Horizontal Constraint icon [[File:Constraint_Horizontal.png|16px]] in the Sketcher Constraints toolbar or by selecting the Constrain horizontally menu item in the Sketcher constraints sub menu of the Sketcher menu item in the Sketcher work bench (or the Part Design menu item of the Part Design work bench). The selected line is constrained to be parallel to the horizontal axis of the sketch.
&lt;br style=&quot;clear: both&quot; /&gt;
[[File:HorizontalConstraint4.png|left|256px]]
Multiple lines may be selected,
&lt;br style=&quot;clear: both&quot; /&gt;
[[File:HorizontalConstraint5.png|left|256px]]
and then applying the constraint as described above, they are constrained to be parallel to the sketch horizontal axis.
&lt;br style=&quot;clear: both&quot; /&gt;


</text>
    </revision>
  </page>
  <page>
    <title>Constraint HorizontalDistance</title>
    <ns>0</ns>
    <id>1743</id>
    <revision>
      <id>94989</id>
      <parentid>56679</parentid>
      <timestamp>2014-07-08T21:19:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>5pm415sp3lougi1vaozjdf0wnin4h27</sha1>
      <text xml:space="preserve" bytes="660">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint HorizontalDistance|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain horizontal distance|SeeAlso=[[Constraint Length|Constraint Length]], [[Constraint VerticalDistance|Constraint VerticalDistance]]}}

====Description==== &lt;!--T:2--&gt;
Fixes the horizontal distance between 2 points or line ends. If only one item is selected, the distance is set to the origin.

&lt;!--T:4--&gt;
[[File:Constraint_H_Distance.png]]

====Usage==== &lt;!--T:3--&gt;
# Pick one or two points
# Activate the constraint
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Constraint InternalAngle</title>
    <ns>0</ns>
    <id>1753</id>
    <revision>
      <id>94378</id>
      <parentid>56934</parentid>
      <timestamp>2014-07-07T12:09:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>6cinnxnawb33ij154rhnljhjx7lrbj6</sha1>
      <text xml:space="preserve" bytes="3440">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint InternalAngle|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|Shortcut=A|MenuLocation=Sketch → Sketcher constraints → Constrain angle|SeeAlso=[[Constraint Length|Constraint Length]], [[Constraint Perpendicular|Constraint Perpendicular]]}}

====Description==== &lt;!--T:2--&gt;
This tool constrains the angle between two selected lines in a sketch to be a specified value. By default, the internal angle, the smaller of the angles formed at the intersection of two lines (or their extensions) is constrained.&lt;br /&gt;
If a single line is selected, the angle is constrained relative to the horizontal axis of the selected sketcher plane

====Operation==== &lt;!--T:3--&gt;
Select any two lines in the sketch by clicking on them in sequence. They will change colour to dark green when selected. The direction of the line form the first point created to the end point is significant in calculation of the angle between the lines.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle1.png|256px|&lt;span title=&quot;Selected lines&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
Then click on the ConstraintAngle icon([[Image:Constraint_InternalAngle.png|16px]]) in the Sketcher or Part Design toolbar or select the ConstrainAngle menu item from the Sketcher constraints sub menu of either the Sketcher (Sketcher workbench) or Part Design (Part Design workbench)menu item to add the constraint. &lt;br /&gt;&lt;br /&gt;
The constraint is initially set to the current internal angle between the lines and the Constraint is added to the Tasks tab in the Combo View panel. &lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle2.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
Doubleclicking on the Constraint in the Tasks tab will bring up a pop-up dialog box in which this value may be edited to set it to a desired value. Alternatively, the datum text in the 3D view may be double clicked to bring up the pop-up dialog to set the value.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle3.png|256px|&lt;span title=&quot;Editing value&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle4.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
The value can be set to values greater than 180 (or even 360), in which case it becomes a constraint on the external angle and the angle is interpreted as modulo 360 degrees.&lt;br /&gt;&lt;br /&gt;
The absolute mode is invoked by only selecting one line before applying the constraint.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle5.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
Applying the constraint, the angle is constrained relative to the horizontal axis of the selected sketch plane.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle6.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
Selecting the second line which was drawn from the upper right to lower left.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle7.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
And applying the constraint as before,&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainAngle8.png|256px|&lt;span title=&quot;Constraint applied&quot;&gt;&lt;/span&gt;]]&lt;br /&gt;&lt;br /&gt;
the line is now constrained to have a value relative to the direction of the horizontal axis in the clockwise direction (angle values are restricted to 180 degrees anticlockwise or clockwise).&lt;br /&gt;&lt;br /&gt;
As before by double clicking on the constraint in either the Tasks tab of the Combo view or on the constraint in the 3D view will allow editing of the value of the constrained angle.


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Internal Alignment</title>
    <ns>0</ns>
    <id>53245</id>
    <revision>
      <id>133218</id>
      <parentid>133217</parentid>
      <timestamp>2014-12-23T22:49:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>muybmgjm3gwpsew8u96e0366w8h4zy0</sha1>
      <text xml:space="preserve" bytes="2717">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint InternalAlignment|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain InternalAlignment|Shortcut=Ctrl+A|SeeAlso=[[Sketcher Show Hide Internal Geometry|Show/Hide Internal Geometry]], [[Sketcher Ellipse|Ellipse]]}}

====Description==== &lt;!--T:2--&gt;
This constraint aligns lines and points to particular places of a complex sketcher element (there is just one &quot;complex&quot; element so far, the [[Sketcher Ellipse|Ellipse]]).

&lt;!--T:3--&gt;
For [[Sketcher Ellipse|Ellipse]] and its [[Sketcher Arc of Ellipse|Arc]], it supports constraining lines to become major and minor diameters, and constraining [[Sketcher Point|points]] to positions of ellipse's foci.

&lt;!--T:4--&gt;
The constraint requires a lot of effort to use in the way other constraints are. It is hidden in the menu, and not exposed on any toolbars by default. There is a helper tool called [[Sketcher Show Hide Internal Geometry|Show/Hide Internal Geometry]] which is exposed on workbenches' toolbars and aimed to completely remove the need to invoke the constraint manually.

====Operation on Ellipse==== &lt;!--T:5--&gt;
# Select elements to be aligned and an ellipse. The ellipse must be selected last. Accepted are up to two lines and up to two points.
# Invoke the constraint by picking the menu item (Sketch/Part Design → Sketcher constraints → Constrain InternalAlignment).

&lt;!--T:6--&gt;
The first line that was selected gets aligned to become ellipse's major diameter (but if it is not occupied already by another line, otherwise it will become minor diameter). The second line is aligned to become minor radius. The lines are automatically switched to [[Sketcher ConstructionMode|construction]].

&lt;!--T:7--&gt;
Likewise, the first point is constrained to become the first unoccupied focus, and the second point goes to the other focus.
{{clear}}

====Scripting==== &lt;!--T:8--&gt;

{{Code|code=
Sketch.addConstraint(Sketcher.Constraint('InternalAlignment:EllipseMajorDiameter', index_of_line, index_of_ellipse))
Sketch.addConstraint(Sketcher.Constraint('InternalAlignment:EllipseMinorDiameter', index_of_line, index_of_ellipse))
Sketch.addConstraint(Sketcher.Constraint('InternalAlignment:EllipseFocus1', index_of_point, 1, index_of_ellipse))
Sketch.addConstraint(Sketcher.Constraint('InternalAlignment:EllipseFocus2', index_of_point, 1, index_of_ellipse))
}}

&lt;!--T:9--&gt;
Remarks: 
: &lt;tt&gt;Sketch&lt;/tt&gt; is a sketch object.
: Number &lt;tt&gt;1&lt;/tt&gt; in the focus calls stands for starting point of a point element (it is ignored).

====Version==== &lt;!--T:10--&gt;
Introduced in FreeCAD v0.15.4309


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Length</title>
    <ns>0</ns>
    <id>1742</id>
    <revision>
      <id>95250</id>
      <parentid>56743</parentid>
      <timestamp>2014-07-11T19:47:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>s1irv00qiik37eh2qjwhv0e3n9ivd2b</sha1>
      <text xml:space="preserve" bytes="2666">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Length|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain distance|SeeAlso=[[Constraint HorizontalDistance|Constraint HorizontalDistance]], [[Constraint VerticalDistance|Constraint VerticalDistance]]}}

====Description==== &lt;!--T:2--&gt;
Constraint Length constrains the length of a line, the perpendicular distance between a point and a line or the distance between two points to have a specified value.

====Hint==== &lt;!--T:3--&gt;
If applicable please consider using the [[Constraint_HorizontalDistance|Horizontal Distance]] or [[Constraint_VerticalDistance|Vertical Distance]] constraints instead. These constraints are more robust and faster to calculate than the here documented length constraint.

====Operation==== &lt;!--T:4--&gt;
Select a line in the sketch,&lt;br /&gt;
[[File:LengthConstraint1.png|256px]]&lt;br /&gt;
by clicking on the line (it turns dark green).&lt;br /&gt;
[[File:LengthConstraint2.png|256px]]&lt;br /&gt;
Apply the Length Constraint by selecting the  icon [[File:Constraint_Length.png|16px]] from the Sketcher Constraints toolbar or selecting the Constrain distance menu item from the Sketcher Constraints sub-menu of the Sketcher menu item in the Sketcher workbench (or Part Design in the Part Design workbench).&lt;br /&gt;
[[File:LengthConstraint3.png|256px]]&lt;br /&gt;
The length of the line is constrained to its current value.Double clicking on the constraint in the 3D view or in the Tasks tab of the Combo View will bring up a dialog box to allow the constraint value to be edited.&lt;br /&gt;
[[File:LengthConstraint4.png|256px]]&lt;br /&gt;
Enter the required value and click OK to set the constraint length.&lt;br /&gt;
[[File:LengthConstraint5.png|256px]]&lt;br /&gt;
The Length Constraint also constrains the distance between a line and a point.&lt;br /&gt;
[[File:LengthConstraint6.png|256px]]&lt;br /&gt;
Select the line and a point in the sketch,&lt;br /&gt;
[[File:LengthConstraint7.png|256px]]&lt;br /&gt;
then apply the constraint as before.&lt;br /&gt;
The perpendicular distance between the point and the line is constrained to its current value. this may be edited as described above to set the constraint to a desired value.&lt;br /&gt;
[[File:LengthConstraint8.png|256px]]&lt;br /&gt;
The constraint may also be applied to two points, selected here at either end of a poly-line.&lt;br /&gt;
[[File:LengthConstraint9.png|256px]]&lt;br /&gt;
Applying the constraint as before, the distance between the two selected points is constrained. As described above it may be edited to set a desired value.&lt;br /&gt;
[[File:LengthConstraint10.png|256px]]&lt;br /&gt;

&lt;!--T:5--&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Lock</title>
    <ns>0</ns>
    <id>1747</id>
    <revision>
      <id>93884</id>
      <parentid>93883</parentid>
      <timestamp>2014-07-02T12:07:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ij1wka3fy2fttobemarn5skel6l5o3d</sha1>
      <text xml:space="preserve" bytes="2557">
&lt;!--T:4--&gt;
{{GuiCommand|Name=Sketcher ConstrainLock|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain lock|SeeAlso=[[Constraint PointOnPoint|Constraint Coincident]]}}

Create a lock constraint on the selected item
==Description== &lt;!--T:1--&gt;
This constraint tool attempts to &lt;em&gt;fully constrain&lt;/em&gt; any selected item.

&lt;!--T:2--&gt;
NOTE: It is advised that this tool be exclusively used on points for the time-being:

Owing to the fact that FreeCAD is still under development - this tool exhibits strange behaviour when it attempts to 'lock' anything other than a point. For example (as of V0.12 R4802), when locking a circle by its circumferential line rather than its centre &lt;em&gt;point&lt;/em&gt;, a horizontal constraint and a vertical constraint appear in the constraints dialogue, but they are both of value zero and do not appear in the graphics window.
==Operation== &lt;!--T:3--&gt;
&lt;ol&gt;
&lt;li&gt;Firstly it is necessary to highlight an item you wish to constrain. For reasons alluded-to above it is wise to only highlight a &lt;em&gt;point&lt;/em&gt;.&lt;br /&gt;
[[File:LockConstraint1.png|256px]]&lt;/li&gt;
&lt;li&gt;
Highlighting of a drawing item is achieved by moving the mouse over the item and clicking the left-mouse-button.
A highlighted item will change colour to green.&lt;br /&gt;
[[File:LockConstraint2.png|256px]]&lt;/li&gt;
&lt;li&gt;
Once an item is highlighted, left-clicking on the &lt;em&gt;lock&lt;/em&gt; constraint serves to lock the highlighted item in-place. This usually manifests as two constraints: a horizontal distance constraint from the drawing axis origin, and a vertical constraint from the drawing axis origin. These are set by default to the current co-ordinates of the point.&lt;br /&gt;
[[File:LockConstraint3.png|256px]]&lt;/li&gt;
&lt;li&gt;
The vertical and horizontal constraints forming the lock can be edited by double clicking on the appropriate constraint to be edited either in the drawing itself or in the Constraint tab of the Combo View pane. This will open a dialog box to edit the constraint. Clicking on the horizontal constraint component produces:&lt;br /&gt;
[[File:LockConstraint4.png|256px]].&lt;/li&gt;
&lt;li&gt;Enter the desired value into the dialog box and click OK.&lt;br /&gt;
[[File:LockConstraint5.png|256px]]&lt;/li&gt;
&lt;li&gt;The new value of the constraint is applied to the drawing.&lt;br /&gt;
[[File:LockConstraint6.png|256px]]&lt;/li&gt;
&lt;li&gt;The vertical constraint may be similarly edited to constrain the point to the desired location.&lt;br /&gt;
[[File:LockConstraint7.png|256px]]&lt;/li&gt;&lt;/ol&gt;


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Parallel</title>
    <ns>0</ns>
    <id>1751</id>
    <revision>
      <id>94408</id>
      <parentid>56919</parentid>
      <timestamp>2014-07-07T12:18:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>4ayo01ysadea7mw7wqkqmz4qe1x4liz</sha1>
      <text xml:space="preserve" bytes="1311">
&lt;!--T:10--&gt;
{{GuiCommand|Name=Constraint Parallel|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain parallel|SeeAlso=[[Constraint Vertical|Constraint Vertical]], [[Constraint Horizontal|Constraint Horizontal]]}}

====Description==== &lt;!--T:2--&gt;
The Constrain Parallel constraint forces two selected straight lines or edges to be parallel to each other. 

====Operation==== &lt;!--T:3--&gt;
The sketch contains two randomly oriented lines.

&lt;!--T:4--&gt;
[[File:ConstrainParallel1.png|256px]]

&lt;!--T:5--&gt;
Select both lines by clicking successively on each of them.

&lt;!--T:6--&gt;
[[File:ConstrainParallel2.png|256px]]

&lt;!--T:7--&gt;
Apply the Constrain Parallel constraint by selecting the Constrain Parallel icon [[File:Constraint_Parallel.png|16px]] from the Sketcher constraints toolbar or by selecting the Constraint Parallel menu item from the Sketcher constraints sub menu of the Sketcher (Sketcher workbench selected) or Part Design (Part Design workbench selected) menu item.

&lt;!--T:8--&gt;
[[File:ConstrainParallel3.png|256px]]

&lt;!--T:9--&gt;
The selected lines are forced to be parallel to each other. Changing the orientation of one line will change the orientation of the other to be the same.


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Perpendicular</title>
    <ns>0</ns>
    <id>1752</id>
    <revision>
      <id>56888</id>
      <parentid>56887</parentid>
      <timestamp>2013-12-21T22:12:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>k7hmho42g1ettu7yv65hj22cutjdxm4</sha1>
      <text xml:space="preserve" bytes="1221">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Perpendicular|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain perpendicular|Shortcut=N|SeeAlso=[[Constraint InternalAngle|Constraint Angle]]}}

====Description==== &lt;!--T:2--&gt;
The Constrain perpendicular constraint forces two selected lines or line segments in the sketch to be perpendicular to each other

====Operation==== &lt;!--T:3--&gt;
The sketch below has two lines at a random angle.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainPerpendicular1.png|256px]]&lt;br /&gt;&lt;br /&gt;
Select the two line segments you require to be perpendicular&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainPerpendicular2.png|256px]]&lt;br /&gt;&lt;br /&gt;
then click the Constrain Perpendicular icon [[File:Constraint_Perpendicular.png|16px]] in the Sketcher toolbar or select the Constrain Perpendicular menu item from the Sketcher constraints sub menu of the Sketcher or Part Design menus (depending upon whether the Sketcher or Part Design workbench is selected) to apply the constraint to the selected lines.&lt;br /&gt;&lt;br /&gt;
[[File:ConstrainPerpendicular3.png|256px]]&lt;br /&gt;&lt;br /&gt;
The lines are constrained to be perpendicular.


</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointOnEnd</title>
    <ns>0</ns>
    <id>37060</id>
    <revision>
      <id>104507</id>
      <parentid>104506</parentid>
      <timestamp>2014-08-12T20:56:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>22rv4otoqtn0us0n4ad08r4d2l76tdh</sha1>
      <text xml:space="preserve" bytes="386">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:4--&gt;
{{GuiCommand|Name=Constraint PointOnEnd|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → PointOnEnd|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointOnMidPoint</title>
    <ns>0</ns>
    <id>37051</id>
    <revision>
      <id>104523</id>
      <parentid>104521</parentid>
      <timestamp>2014-08-12T21:00:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ookmpqycm92h40vz2v38zeiativxs67</sha1>
      <text xml:space="preserve" bytes="396">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:4--&gt;
{{GuiCommand|Name=Constraint PointOnMidPoint|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → PointOnMidPoint|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointOnObject</title>
    <ns>0</ns>
    <id>1749</id>
    <revision>
      <id>105786</id>
      <parentid>105785</parentid>
      <timestamp>2014-08-22T20:07:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>npvieugsq5ubykjxwysw1orjdtssoo9</sha1>
      <text xml:space="preserve" bytes="478">

&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint PointOnObject|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain point onto object|Shortcut=Maiusc+O|SeeAlso=[[Constraint PointOnPoint|Constraint Coincident]]}}

====Description==== &lt;!--T:2--&gt;


====Usage==== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointOnPoint</title>
    <ns>0</ns>
    <id>1748</id>
    <revision>
      <id>93716</id>
      <parentid>55702</parentid>
      <timestamp>2014-07-02T08:55:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>fhmfzbh5ccwdphxss1pm9prke8178u0</sha1>
      <text xml:space="preserve" bytes="1709">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint PointOnPoint|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain coincident|SeeAlso=[[Constraint Lock|Constraint Lock]], [[Constraint PointOnObject|Constraint Point onto Object]]}}

&quot;Create a coincident constraint on the selected item&quot;
====Description==== &lt;!--T:2--&gt;
This constraint tool takes two points as its argument and serves to make the two points ''coincident''. (Meaning to make them as-one-point).
In practical terms this constraint tool is useful when there is a break in a profile for example - where two lines end near each other and need to be joined - a coincident constraint on their end-points will close the gap.

====Usage==== &lt;!--T:3--&gt;
As stated above, this tool takes two arguments - both are points.
#Firstly it is necessary to highlight two distinct points. (Note this will not work if, for example, you attempt to select the start and end point of the same line).
#Highlighting of a drawing item is achieved by moving the mouse over the item and clicking the left-mouse-button.
#A highlighted item will change colour to green.
#Subsequent items can be highlighted by repeating the above procedure(s) NOTE: There is no-need to hold-down any special key like Ctrl to achieve multiple item selection in a drawing.
#Once you have two points highlighted, left-clicking on the 'PointOnPoint' constraint will cause the two points to become ''coincident'' and be replaced by a single point.
NOTE: In order to make two points coincident, FreeCAD must necessarily move one, or both, of the original points.

&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointOnStart</title>
    <ns>0</ns>
    <id>37094</id>
    <revision>
      <id>104538</id>
      <parentid>104537</parentid>
      <timestamp>2014-08-12T21:02:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3ktz5dm4rkb1jkc64aohrmiyiuxxnba</sha1>
      <text xml:space="preserve" bytes="390">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:4--&gt;
{{GuiCommand|Name=Constraint PointOnStart|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → PointOnStart|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint PointToObject</title>
    <ns>0</ns>
    <id>37067</id>
    <revision>
      <id>105931</id>
      <parentid>105802</parentid>
      <timestamp>2014-08-23T11:39:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Undo revision 105802 by [[Special:Contributions/Renatorivo|Renatorivo]] ([[User talk:Renatorivo|talk]])</comment>
      <sha1>ed4zaiwam5zxn7f6j3bomiyx2dgkea2</sha1>
      <text xml:space="preserve" bytes="380">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Constraint PointToObject|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → PointToObject|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint Radius</title>
    <ns>0</ns>
    <id>1750</id>
    <revision>
      <id>93900</id>
      <parentid>56783</parentid>
      <timestamp>2014-07-02T12:13:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ial32n2lk23zwtl1ktnjk7fvh928xaa</sha1>
      <text xml:space="preserve" bytes="1800">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Radius|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain radius|SeeAlso=[[Constraint Length|Constraint Distance]], [[Constraint Horizontal|Constraint Horizontal]],  [[Constraint Vertical|Constraint Vertical]]}}

====Description==== &lt;!--T:2--&gt;
This constraint constrains the value of the radius of a circle or arc to have a specific value. Only one arc or circle can be constrained at a time.


====Operation==== &lt;!--T:3--&gt;
[[File:ConstrainRadius1.png|256px]]&lt;br /&gt;
Select an arc or circle in the sketch by clicking on is ( turns dark green to indicate selection).&lt;br /&gt;
[[File:ConstrainRadius2.png|256px]]&lt;br /&gt;
Apply the constraint by clicking on the Constrain Radius icon [[File:Constraint_Radius.png|16px]] in the Sketcher toolbar or selecting the Constrain radius menu item from the Sketcher constraints sub menu of the the Sketcher (or Part Design) menu item (depending upon which workbench is selected).&lt;br /&gt;
[[File:ConstrainRadius3.png|256px]]&lt;br /&gt;
The radius is constrained to have its current value when the constraint is applied.&lt;br /&gt;
To change the constraint value either double click on the constraint in the 3D display (turning red indicates the constraint is currently selected) or by double clicking on the constraint in the Constraints panel of the Tasks tab of the Combo View.&lt;br /&gt;This will bring up a pop-up window.&lt;br /&gt;
[[File:ConstrainRadius4.png|256px]]&lt;br /&gt;
Enter the desired value for the radius into the pop-up window and click OK to set the value of the constraint.&lt;br /&gt;
[[File:ConstrainRadius5.png|256px]]&lt;br /&gt;
The constraint value is set to the value entered in the pop-up window.&lt;br /&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Symmetric</title>
    <ns>0</ns>
    <id>1756</id>
    <revision>
      <id>94385</id>
      <parentid>57132</parentid>
      <timestamp>2014-07-07T12:11:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>b70m1qz38a61avzw9beb6noeiyt6545</sha1>
      <text xml:space="preserve" bytes="1339">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Symmetric|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain symmetrical|SeeAlso=[[Constraint Parallel|Constraint Parallel]]}}

====Description==== &lt;!--T:2--&gt;
The symmetrical constraint constrains two selected points to be symmetrical around a given line, i.e., both selected points are constrained to lie on a normal to the line through both points and are constrained to be equidistant from the line. Alternatively it can constrain two points to be symmetric with respect to a third one.

====Operation==== &lt;!--T:3--&gt;
[[File:SymmetricConstraint1.png|256px]]&lt;br /&gt;&lt;br /&gt;
Select two points (vertexes) in the sketch and a line in the sketch. The selected points and the line will be dark green.&lt;br /&gt;&lt;br /&gt;
[[File:SymmetricConstraint2.png|256px]]&lt;br /&gt;&lt;br /&gt;
Click on the SymmetricalConstraint icon [[File:Constraint_Symmetric.png|16px]] in the Sketcher toolbar or select the Constrain Symmetrical menu item from the Sketcher Constraints sub menu of the Sketcher (or Part Design) menu item. 
This will apply the constraint to the selected items.&lt;br /&gt;&lt;br /&gt;
[[File:SymmetricConstraint3.png|256px]]&lt;br /&gt;&lt;br /&gt;
This is a geometric constraint and has no editable parameters.


</text>
    </revision>
  </page>
  <page>
    <title>Constraint Tangent</title>
    <ns>0</ns>
    <id>1754</id>
    <revision>
      <id>90093</id>
      <parentid>56970</parentid>
      <timestamp>2014-06-04T17:17:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>s2jzj4z34sa48gxrwwzau3k7qm4su11</sha1>
      <text xml:space="preserve" bytes="2566">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Tangent|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain tangent|SeeAlso=[[Constraint PointOnObject|Constraint point on object]]}}

====Description==== &lt;!--T:2--&gt;
The Constraint tangent tool constrains a selected line (or an extension of it beyond its endpoints) to be tangential to a selected line, circle or arc in the sketch. Where the selected entities are two line segments, they are constrained to lie on the same line, i.e. be collinear.

====Operation==== &lt;!--T:3--&gt;
Curve and a line.

&lt;!--T:4--&gt;
[[File:TangentConstraint1.png|256px]]

&lt;!--T:5--&gt;
Select the line and a circle in the sketch by clicking on them (highlighted in dark green).

&lt;!--T:6--&gt;
[[File:TangentConstraint2.png|256px]] 

&lt;!--T:7--&gt;
Apply the Constraint tangent by either clicking on the Constrain tangent icon [[File:Constraint_Tangent.png|16px]] in the Sketcher Constraints toolbar or selecting the Constrain Tangent menu item from the Sketcher constraints sub-menu of the Sketcher menu, or the Part Design menu if the Part Design workbench is selected rather than the Sketcher workbench.

&lt;!--T:8--&gt;
[[File:TangentConstraint3.png|256px]]

&lt;!--T:9--&gt;
The line (or an extension of it beyond its endpoints) will be constrained to be tangent to the circle or arc by altering any or all of the line slope, the circle or arc radius or center point of the circle or arc depending upon what other constraints are operational in the sketch.&lt;br /&gt;&lt;br /&gt;
The tangent constraint can also operate on two selected points or a selected point and an edge(line)as illustrated in the following sequence.

&lt;!--T:10--&gt;
[[File:TangentConstraint4.png|256px]]

&lt;!--T:11--&gt;
First select two points (vertices) at the ends of an arc and a line.

&lt;!--T:12--&gt;
[[File:TangentConstraint7.png|256px]]

&lt;!--T:13--&gt;
Apply the Tangent Constraint as before.

&lt;!--T:14--&gt;
[[File:TangentConstraint8.png|256px]]

&lt;!--T:15--&gt;
The line is constrained to be tangent to the arc and the two points become coincident with the straight line continuing the arc. ( If applied to two straight lines, they are forced to be collinear).&lt;br /&gt;&lt;br /&gt;
Similarly by selecting a point at the end of an arc and a line,

&lt;!--T:16--&gt;
[[File:TangentConstraint5.png|256px]]

&lt;!--T:17--&gt;
and applying the Tangent Constraint as before

&lt;!--T:18--&gt;
[[File:TangentConstraint6.png|256px]]

&lt;!--T:19--&gt;
the line is forced to be tangent to the arc at the point selected on the curve. 


</text>
    </revision>
  </page>
  <page>
    <title>Constraint TangentToEnd</title>
    <ns>0</ns>
    <id>37074</id>
    <revision>
      <id>105937</id>
      <parentid>105936</parentid>
      <timestamp>2014-08-23T11:47:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7u2cos4iy64nyjhia181sbc8yj7nyci</sha1>
      <text xml:space="preserve" bytes="389">

&lt;!--T:4--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint TangentToEnd|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → TangentToEnd|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint TangentToStart</title>
    <ns>0</ns>
    <id>37080</id>
    <revision>
      <id>105946</id>
      <parentid>105945</parentid>
      <timestamp>2014-08-23T11:48:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fotw1awr6x2x86i18as07s3la7orfuh</sha1>
      <text xml:space="preserve" bytes="393">
&lt;!--T:4--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint TangentToStart|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → TangentToStart|Shortcut=|SeeAlso=}}

&lt;!--T:2--&gt;
Currently not used by FreeCAD

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Constraint Vertical</title>
    <ns>0</ns>
    <id>1745</id>
    <revision>
      <id>93588</id>
      <parentid>56718</parentid>
      <timestamp>2014-07-02T08:02:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>5krjrh2fe0r40fgjgw7e9m0o0koc7vp</sha1>
      <text xml:space="preserve" bytes="507">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint Vertical|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher constraints → Constrain vertically|SeeAlso=[[Constraint Horizontal|Constraint Horizontal]]}}

====Description==== &lt;!--T:2--&gt;
Creates a vertical constraint to the selected lines or polylines elements. More than one object can be selected.

====Usage==== &lt;!--T:3--&gt;
See [[Constraint Horizontal]]
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Constraint VerticalDistance</title>
    <ns>0</ns>
    <id>1744</id>
    <revision>
      <id>95284</id>
      <parentid>56617</parentid>
      <timestamp>2014-07-11T19:59:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2q7xuuo1vdviepq15au4x92wficbbip</sha1>
      <text xml:space="preserve" bytes="611">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Constraint VerticalDistance|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Constrain vertical distance|SeeAlso=[[Constraint HorizontalDistance|Constraint HorizontalDistance]], [[Constraint Length|Constraint Length]]}}

====Description==== &lt;!--T:2--&gt;
Fixes the vertical distance between 2 points or line ends. If only one item is selected, the distance is set to the origin. 

====Usage==== &lt;!--T:3--&gt;
# Pick one or two points
# Activate the constraint
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Contributors</title>
    <ns>0</ns>
    <id>20</id>
    <revision>
      <id>116254</id>
      <parentid>115773</parentid>
      <timestamp>2014-10-25T17:42:54Z</timestamp>
      <contributor>
        <username>Rockn</username>
        <id>1317</id>
      </contributor>
      <comment>Add Rockn in Community</comment>
      <sha1>nn38j5z9u15xr67600zst3239zhe32r</sha1>
      <text xml:space="preserve" bytes="3487">
&lt;!--T:1--&gt;
FreeCAD would not be what it is without the generous contributions of many people. Here's an overview of the people and companies who contributed to FreeCAD over time. For credits for the third party libraries see the [[Third Party Libraries]] page.

=== Developement === &lt;!--T:2--&gt;

==== Project managers ==== &lt;!--T:3--&gt;
Lead developers of the FreeCAD project:

* [[User:Jriegel|Jürgen Riegel]]
* [[User:Wmayer|Werner Mayer]]
* [[User:Yorikvanhavre|Yorik van Havre]]

==== Main developers ==== &lt;!--T:4--&gt;
People who work regularly on the FreeCAD code:

* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=270 Logari81]
* [http://freecadamusements.blogspot.co.uk/ Luke A. Parry]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=574 Jose Luis Cercos Pita]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=997 Jan Rheinlaender]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=765 shoogen]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=208 tanderson69]

==== Other coders ==== &lt;!--T:5--&gt;
People who contributed code to the FreeCAD project:

* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=686 ickby]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=611 jmaustpc]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=652 j-dowsett]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=930 keithsloan52]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=1375 wandererfan]
* Joachim Zettler
* Graeme van der Vlugt
* Berthold Grupp
* [[User:Xorx|Georg Wiora]]
* Martin Burbaum
* Jacques-Antoine Gaudin
* Ken Cline
* Dmitry Chigrin
* [[Migius|Remigiusz Fiedler]] (DXF-parser)

=== Companies === &lt;!--T:6--&gt;
Companies which donated code or developer time:

* Imetric 3D

=== Community === &lt;!--T:7--&gt;
People from the community who put a lot of efforts in helping the FreeCAD project either by being active on the forum, keeping a blog about FreeCAD, making video tutorials, packaging FreeCAD for Windows/Linux/MacOS X, writing a FreeCAD book... (listed by alphabetical order)

* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=1940 bejant]
* [http://www.packtpub.com/freecad-solid-modeling-with-python/book Brad Collette]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=251 cblt2l]
* [http://www.youtube.com/user/5needinput jdurston (5needinput)]
* [http://opensourcedesigntools.blogspot.com/ Daniel Falck]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=725 hobbes1069]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=611 jmaustpc]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=108 lhagan]
* [[User:Emagdalena|Eduardo Magdalena]]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=1047 marcxs]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=861 John Morris (butchwax)]
* [http://freecad-tutorial.blogspot.com/ Kwahooo]
* [[User:Normandc|Normandc]]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=1819 peterl94]
* [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=356 pperisin]
* [[User:Quick61|Quick61]]
* [[User:Renatorivo|Renatorivo]]
* [[User:Rockn|Rockn]]
* [[User:Mario52|Mario52]]


&lt;!--T:8--&gt;
[[Category:Developer]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Copying Objects</title>
    <ns>0</ns>
    <id>9681</id>
    <revision>
      <id>89334</id>
      <parentid>89328</parentid>
      <timestamp>2014-06-01T08:23:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>a7m55abfcprnkq3qf85w8o9k375ehfr</sha1>
      <text xml:space="preserve" bytes="2183">
==Overview== &lt;!--T:1--&gt;
A facility to duplicate objects (paragraphs, spreadsheet cells, images, etc) is present in most applications.  FreeCAD is no exception.  [[Document_structure|Document]] objects may be freely copied within a document or between documents using the [[Std_Copy|Copy]], [[Std_Paste|Paste]] and [[Std_DuplicateSelection|Duplicate Selection]] commands.
 
==Copying Linked Objects==
[[Document_structure|Document]] objects may be linked to other objects (for example, a Pad feature is linked to it's Sketch, and a Fusion feature is linked to it's component objects).  This means that some care must be exercised in selecting objects to copy.

&lt;!--T:2--&gt;
If an object is selected without it's children, those children are not automatically duplicated by Copy/Paste or Duplicate Selection.  In this case, the copied object may exhibit unexpected behaviour due to expected links not being present.  

In general, recommended practice is to select all dependent objects when copying a parent object. 
 
==Finding and Positioning Pasted Object(s)== &lt;!--T:3--&gt;
After the Copy/Paste operation, it may not be obvious where the new object(s) are located in the Document window.  That is because the new object has the same [[Placement|Placement]] property as the original.  Toggle the Visibility property (spacebar) to hide the original.  Then use the Placement dialog to move the copy to it's correct position.

==Other Methods== &lt;!--T:4--&gt;
Like most things in FreeCAD, there are many ways of making a copy.  For more ideas, look at: 
* PartDesign: [[PartDesign_Mirrored|Mirror]], [[PartDesign_LinearPattern|Linear Pattern]], [[PartDesign_PolarPattern|Polar Pattern]], [[PartDesign_MultiTransform|MultiTransform]]
* Part: [[Part_Mirror|Mirror]]
* Draft: [[Draft_Array|Array]],[[Draft_Clone|Clone]]
 
==Notes==
* In v0.14+, if an object to be copied has links to object(s) not in the selection, FreeCAD will ask if the unselected objects should be included in the copy operation. 

==More== &lt;!--T:5--&gt;
* [[Std_Copy|Copy]]
* [[Std_Paste|Paste]]
* [[Std_DuplicateSelection|Duplicate Selection]]

&lt;!--T:6--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Customize ToolsBar</title>
    <ns>0</ns>
    <id>52595</id>
    <revision>
      <id>132664</id>
      <parentid>131661</parentid>
      <timestamp>2014-12-20T14:56:16Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>iyl2of357456nhpuuxng67b5lf1cwuv</sha1>
      <text xml:space="preserve" bytes="3718">
&lt;!--T:1--&gt;
{{TutorialInfo|Class=SampleClass|Level=Beginner|Time=5 minutes|Author=[[User:Mario52|Mario52]]|FCVersion=All}}

===Synopsis=== &lt;!--T:2--&gt;
This tutorial walks you through how to create a Toolbar button and one or more buttons that connect you to your favourite macros or to other associated links whether there a custom icon or not.

===Use=== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
'''1''' : Click '''Menu → Tools → Customize'''


&lt;!--T:5--&gt;
[[File:CustomizeToolBar 01.png]]
{{clear}}

&lt;!--T:6--&gt;
or put you on a Toolbar and click the right mouse button

&lt;!--T:7--&gt;
[[File:CustomizeToolBar 02.png]]
{{clear}}

&lt;!--T:8--&gt;
the window Customize appears

&lt;!--T:9--&gt;
[[File:CustomizeToolBar 03.png]]
{{clear}}

&lt;!--T:10--&gt;
'''2''' : select the tab Macro

&lt;!--T:11--&gt;
'''3''' : to select an toolbar icon for your macro click the Pixmap button (labelled {{KEY|... }})

&lt;!--T:12--&gt;
[[File:CustomizeToolBar 04.png]]
{{clear}}

&lt;!--T:13--&gt;
'''4''' : search for an icon amongst the icons already in FreeCAD, if your icon is not here then click the {{KEY|Add icons...}} button for adding one or more icons in your library


&lt;!--T:14--&gt;
[[File:CustomizeToolBar 05.png]]
{{clear}}

&lt;!--T:15--&gt;
'''5''' : you will get a file selection window, select your image file which must be in the PNG format and must be 64x64 pixels

&lt;!--T:16--&gt;
[[File:CustomizeToolBar 06.png]]
{{clear}}


&lt;!--T:17--&gt;
'''6''' : select your icon and click the {{KEY|OK}} button

&lt;!--T:18--&gt;
[[File:CustomizeToolBar 07.png]]
{{clear}}

&lt;!--T:19--&gt;
the icon you selected is now displayed next to the Pixmap button labelled {{KEY|...}}

&lt;!--T:20--&gt;
[[File:CustomizeToolBar 08.png]]
{{clear}}

&lt;!--T:21--&gt;
'''7''' : Choose your macro and specify a Menu text (which will appear as the text label in the menu); also fill in the Tool Tip (which is the text that will appear when a mouse is over the button on the toolbar); there are other optional fields for your Button

&lt;!--T:22--&gt;
'''8''' : Click the button {{KEY|Add}}

&lt;!--T:23--&gt;
[[File:CustomizeToolBar 09.png]]
{{clear}}

&lt;!--T:24--&gt;
'''9''' : your button is created

&lt;!--T:25--&gt;
[[File:CustomizeToolBar 10.png]]
{{clear}}

&lt;!--T:26--&gt;
'''10''' : create a Toolbar for the button 

&lt;!--T:27--&gt;
'''11''' : click the tab '''Toolbars'''

&lt;!--T:28--&gt;
[[File:CustomizeToolBar 11.png]]
{{clear}}

&lt;!--T:29--&gt;
'''12''' : in left window select '''Macros'''

&lt;!--T:30--&gt;
[[File:CustomizeToolBar 12.png]]
{{clear}}

&lt;!--T:31--&gt;
'''13''' : now your macro and it's icon appears

&lt;!--T:32--&gt;
[[File:CustomizeToolBar 13.png]]
{{clear}}

&lt;!--T:33--&gt;
'''14''' : Click the button {{KEY|New...}} (you can choose your ToolBar here the ToolBar is attached to the Part Workbench)

&lt;!--T:34--&gt;
[[File:CustomizeToolBar 14.png]]
{{clear}}

&lt;!--T:35--&gt;
'''15''' : in the window &quot;New Toolbar&quot; enter the name for your ToolBar and click {{KEY|OK}}

&lt;!--T:36--&gt;
[[File:CustomizeToolBar 15.png]]
{{clear}}

&lt;!--T:37--&gt;
'''16''' : your ToolBar has now been created - make sure you check the checkbox so the toolbar will actually appear

&lt;!--T:38--&gt;
'''17''' : select your macro with it's icon in the left window and then click the {{KEY|Button}} with the right pointing arrow

&lt;!--T:39--&gt;
[[File:CustomizeToolBar 16.png]]
{{clear}}

&lt;!--T:40--&gt;
'''18''' : you have now created a toolbar called &quot;Camera&quot;

&lt;!--T:41--&gt;
'''19''' : click the {{KEY|Close}} button

&lt;!--T:42--&gt;
[[File:CustomizeToolBar 17.png]]
{{clear}}

&lt;!--T:43--&gt;
'''20''' : your new ToolBar with it's button is now both displayed above the active window as well as the right-click menu from the toolbars

&lt;!--T:44--&gt;
[[File:CustomizeToolBar 18.png]]
{{clear}}

&lt;!--T:45--&gt;
'''21''' : enjoy !



&lt;!--T:46--&gt;
[[Category:Tutorials]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>David</title>
    <ns>0</ns>
    <id>21</id>
    <revision>
      <id>11396</id>
      <parentid>302</parentid>
      <timestamp>2012-07-29T14:56:47Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>template fr</comment>
      <sha1>dpbkncz5f3obj6gt612jans3myhpzbx</sha1>
      <text xml:space="preserve" bytes="2619">'''[http://www.david-laserscanner.com DAVID]''' is a very low cost sensor system introduced by Dr. Simon Winkelbach and Sven Molkenstruck. It utilizes a standard USB webcam and any sort of hand held laser line projector. This article is about my first impression of the sensor system and the discussion about how to integrate the data into FreeCAD.


== Hardware ==

=== Sensor ===
I use the follwing hardware for the scan:
*A 10€ Laser line from the hardware store
*A 24€ Trust WebCam 640x480, 17 fps
&lt;gallery&gt;
Image:LaserLine.JPG|Laserline 10€
Image:Cam.JPG|Webcam 24€
&lt;/gallery&gt;

=== Test parts ===
I will use follwing test parts:
&lt;gallery&gt;
Image:WaWue.JPG|''Walter Cube''
Image:Band.JPG|Moebius-like band
Image:Blade.JPG|CAD test part
&lt;/gallery&gt;

=== Setup ===
Here is my sensor setup for the first two test parts. It is a corner with a 90° angle and two sheets with the calibration pattern.

[[Image:Setup_Bottle.JPG|250px]] [[Image:Setup_WaWue.JPG|250px]]

== Software ==
So far I use:
* The DAVID sensor wizard
* FreeCAD for post processing

== Scans ==
Here are the scans I made with the sensor.

=== First tryout ===
This is my first tryout with the above mentioned sensor hardware:
* [http://freecad.juergen-riegel.net/Data/ScanData1.zip First Scan] with .OBJ and cleaned .STL files.

&lt;gallery caption=&quot;Impressions of my first scans&quot;&gt;
Image:Bottle raw.jpg|Bottle raw
Image:Bottle.jpg|Bottle
Image:Bottle_detail.jpg|Bottle detail
Image:Bottle_detail_interpol.jpg|Bottle interpolated
Image:Wawue_Top.jpg|Walter cube top
Image:Wawue_Side.jpg|Walter cube side
Image:WaWue_SphrerFit.jpg|Walter cube with sphere fit
&lt;/gallery&gt;

== ToDos ==
Here some ToDos to enable FreeCAD to easily incorporate DAVID scanner data:

* A DAVID Workbench
* Own hole closing filter
* ...

=== Done ===
The following DAVID related features are allready implemented:
* OBJ file format import (Rev:358)

== Scans from others ==
Here a list of published scans from other persons (with no warranty ;-).
=== Roberto ===
====Example====
[http://img163.imagevenue.com/img.php?image=77510_chien_2_122_392lo.jpg Finished model of a little dog]

====Hardware====
MICROSOFT Webcam LifeCam NX-6000 USB 2.0 - 2MB pixel captor works very well in 800×600 at 30&amp;nbsp;fps grey scale(no saturation), the scan is precise to 0.1 mm (180mm model)with very few noise for 82 Euros wonderful.

====Software====
Only free software has been used
* DAVID
* [[wikipedia:MeshLab|MeshLab]] (noise remove)
* Scanalyse (assembly)

== Weblinks ==
* [http://www.david-laserscanner.com DAVID homepage]


{{languages | {{fr|David/fr}} }}

[[Category:Developer]]</text>
    </revision>
  </page>
  <page>
    <title>Deb package creation script</title>
    <ns>0</ns>
    <id>22</id>
    <revision>
      <id>129316</id>
      <parentid>129315</parentid>
      <timestamp>2014-12-06T20:31:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qlzrel35bomj719s7zcoag8irr3cihh</sha1>
      <text xml:space="preserve" bytes="4097">
&lt;!--T:1--&gt;
This script makes a .deb package out of FreeCAD source. You need the checkinstall package installed.
To use it, just:
* edit the script and change manually the config lines if needed
* copy it to your freecad source dir, 
* make it executable,
* make sure your source will compile without errors (do a &quot;make&quot; first), 
* then run the script.

&lt;!--T:2--&gt;
'''Note''': this script has been made for Ubuntu Gusty, there might be slight differences in dependency packages names if you use another version of Ubuntu/Debian. If you have more info on this, please add it here...

&lt;!--T:3--&gt;
'''For Ubuntu Hardy'''

&lt;!--T:4--&gt;
* remove libumfpack4 from dependencies (currently not used by FreeCAD)

&lt;code python&gt;
#!/usr/bin/env python

# DEBIAN/UBUNTU PACKAGE GENERATION SCRIPT
# this script builds a .deb package of FreeCAD
# use it instead of 'make + make install' to generate a nice package for your debian-based system!

# config - edit manually if needed

maintainer='name@domain.com' # put your own email here!
version='0.7' # the current FreeCAD version
build=False # if true, freecad will be compiled (make) before anything else. I suggest to use True only when you are sure it will compile without errors Otherwise do &quot;make&quot; first, then run this script.
occinclude='/usr/include/opencascade' # where your occ include files reside. Only used if build=True.
installdir='/opt/FreeCAD' # where you want to install FreeCAD
cflags='&quot;-O2&quot;' # my usual 64bit optimizations are &quot;-O3 -march=athlon64&quot;. Leave an empty string &quot;&quot; if not sure.

# end of config

# start

import os

# build FreeCAD, if needed

if build:
	cmd='./configure --with-occ-include='+occinclude+' --prefix='+installdir+' CFLAGS='+cflags+' CXXFLAGS='+cflags
	os.system(cmd)
	os.system('make')

# retrieve release version number from source

vfile=open(&quot;src/Build/Version.h&quot;)
for i in vfile:
	if (i.find(&quot;FCRevision &quot;) != -1):
		revline = i
release = revline.split('&quot;')[1]

# creating Checkinstall files

debinstall = open('debinstall-pak','w') # shellscript containing the installation procedure
debinstall.write('#!/bin/sh\n')
debinstall.write('make install\n')
debinstall.write('cp debian/freecad.desktop /usr/share/applications\n')
debinstall.write('cp src/Gui/Icons/FCIcon.xpm /usr/share/pixmaps')
debinstall.close()

os.system('chmod +x debinstall-pak')

postinstall = open('postinstall-pak','w') # shellscript to be run after freecad is installed
postinstall.write('#!/bin/sh\n')
postinstall.write('ln -s '+installdir+'/bin/FreeCAD /usr/bin/freecad')
postinstall.close()

preremove = open('preremove-pak','w') # shellscript to be run before freecad is removed
preremove.write('#!/bin/sh\n')
preremove.write('rm /usr/bin/freecad')
preremove.close()

description = open('description-pak','w') # package description
description.write(&quot;FreeCAD is an Open Source CAx RAD based on OpenCasCade, Qt and Python. It features some key concepts like macro recording, workbenches, ability to run as a server and dynamically loadable application extensions and it is designed to be platform independent. For more details see http://sourceforge.net/projects/free-cad&quot;)
description.close()

# executing Checkinstall

dependencies='&quot;opencascade, python, libc6-dev, libstdc++6, libboost-date-time-dev, libboost-filesystem-dev, libboost-graph-dev, libboost-iostreams-dev, libboost-program-options-dev, libboost-regex-dev, libboost-serialization-dev, libboost-signals-dev, libqt4-gui, zlib1g, libxerces27, libxt6, libsoqt4-dev, libxmu6, libxi6, libcoin40c2, libgl1-mesa-dev, libx11-6, libxext6, libgts-0.7-5, libumfpack4, libcv1, libqt4-qt3support, freeglut3-dev, libglu1-mesa-dev, libglu1-xorg-dev, libglut3-dev&quot;'
cmd='checkinstall --backup=no --fstrans=no --install=no --maintainer='+maintainer+' --pkgversion='+version+' --pkgrelease='+release+' --pkgname=&quot;freecad&quot; --pkggroup=&quot;Graphics&quot; --requires='+dependencies+' ./debinstall-pak'
os.system(cmd)

# removing temp files

os.system('rm -r *pak')
&lt;/code&gt;

&lt;!--T:5--&gt;
[[Category:Administration]]
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>DebianScript</title>
    <ns>0</ns>
    <id>23</id>
    <revision>
      <id>129891</id>
      <parentid>129890</parentid>
      <timestamp>2014-12-07T17:25:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jg19whms16bpr7fssn1jb8bpfvvcxkx</sha1>
      <text xml:space="preserve" bytes="3316">
&lt;!--T:1--&gt;
Copy and paste this into a file named &quot;compile.sh&quot;. Then type 

 chmod u+x compile.sh &amp;&amp; ./compile.sh

&lt;!--T:2--&gt;
You will have to fix problems as they come up, but it's better than nothing.
You have to get the opencascade libraries before running this script, since it requires registration. Or, download them while you run the script. Dont forget to define $PATH_TO_OCC


&lt;pre&gt; 
#setup build environment for freecad on debian testing
#btw this is probably incomplete. please fix any obvious errors!
sudo apt-get update

sudo apt-get install libcoin40c2 libcoin40-dev libqt4 libqt4-dev \
libboost* python2.5 python2.5-dev libxerces27 \
libgts-dev libgts-0.7-5 libxerces27-dev zlib1g zlib1g-dev checkinstall

#dont want these packages with qt4 installed: 
sudo apt-get remove libsoqt20 libsoqt-dev

#compile libSoQt
wget http://ftp.coin3d.org/coin/src/all/SoQt-1.4.1.tar.gz
tar -zxvf SoQt*
cd SoQt*
sudo cp cfg/soqt.m4 /usr/share/aclocal

#this doesnt work
#sed -i 's/SIM_AC_QT_PROG(MOC, moc)/SIM_AC_QT_PROG(MOC, moc-qt4)/' configure.ac

#we get the wrong (qt3) moc by default, so pull a switcheroo
sudo ln -s /usr/bin/moc-qt4 /usr/local/bin/moc
./configure --with-qt=/usr/lib/qt4 &amp;&amp; make
sudo rm /usr/local/bin/moc
checkinstall -D -y
#sudo apt-get remove libsoqt20
sudo dpkg -i soqt*deb

#get opencascade libraries. 182MB + you have to jump through some hoops 
cd /usr/local
sudo mkdir OpenCASCADE
sudo chown $USER OpenCASCADE
cd OpenCASCADE
tar -zxf $PATH_TO_OCC/OpenCASCADE_Linux.tgz
#$ dpkg -l sun*
#ii  sun-java5-jre 1.5.0-12-1 Sun Java(TM) Runtime Environment
sudo java -jar Linux/setup.jar
#pointy clicky drool
#i changed the destination directory to /usr/local/OpenCASCADE
#pick complete installation 
#it only took about 15 minutes
#you might want to change the file permissions
sudo chown $USER /usr/local/OpenCASCADE/ -R

#i'm not sure if you actually have to compile opencascade or not
cp /usr/local/OpenCASCADE/ros/configure \
/usr/local/OpenCASCADE/ros/configure.bak
sed -i \
's/CXXFLAGS=&quot;$CXXFLAGS &quot;/CXXFLAGS=&quot;$CXXFLAGS -ffriend-injection -fpermissive&quot;/'\
/usr/local/OpenCASCADE/ros/configure

cd /usr/local/OpenCASCADE/ros/
./configure --with-tcl=/usr/lib/tcl8.4 --with-tk=/usr/lib/tk8.4
cd adm/make
#the include path can get messed up, but this didnt happen for me for tcl
#uncomment if you dont see $string1/tcl8.4
#find . -name 'Makefile' -exec sed -i \
#'s|CSF_TclLibs_INCLUDES = -I/usr/include|CSF_TclLibs_INCLUDES = -I/usr/include/tcl8.4|' {} \;
find adm/make -name 'Makefile' -exec sed -i \
's|CSF_TclTkLibs_INCLUDES = -I/usr/include|CSF_TclTkLibs_INCLUDES = -I/usr/include/tk8.4|' {} \;
#make sure you have at least 7GB available, maybe more
time make
#real    568m35.068s
#checkinstall didnt work so well - dpkg error &quot;empty version&quot; ?
time sudo make install
#real     20m10.055s

#finally, get the freecad source code and compile it
cd /usr/local
sudo mkdir freecad
sudo chown $USER freecad
svn co https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk freecad
cd freecad
./autogen.sh
./configure --with-occ-include=/usr/local/OpenCASCADE/ros/inc/ \
--with-occ-lib=/usr/local/lib/
time make
checkinstall -Dy
sudo dpkg -i freecad*deb

&lt;/pre&gt;

&lt;!--T:3--&gt;
[[Category:Poweruser Documentation ]]

</text>
    </revision>
  </page>
  <page>
    <title>Debugging</title>
    <ns>0</ns>
    <id>24</id>
    <revision>
      <id>124689</id>
      <parentid>124625</parentid>
      <timestamp>2014-11-23T17:38:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rwvpd5hpxjteql50dgtfa38o9jxtuvl</sha1>
      <text xml:space="preserve" bytes="3578">
== Test First == &lt;!--T:1--&gt;
Before you go through the pain of debugging use the [[Testing|Test framework]] to check if the standard tests work properly. If they do not run complete there is possibly a broken installation.

== Command Line == &lt;!--T:2--&gt;
The ''debugging'' of FreeCAD is supported by a few internal mechanisms. The command line version of FreeCAD provides some options for debugging support.

&lt;!--T:13--&gt;
These are the currently recognized options in FreeCAD 0.15:

&lt;!--T:14--&gt;
Generic options:
  -v [ --version ]      Prints version string
  -h [ --help ]         Prints help message
  -c [ --console ]      Starts in console mode
  --response-file arg   Can be specified with '@name', too

&lt;!--T:15--&gt;
Configuration:
  -l [ --write-log ]       Writes a log file to:
                           /home/graphos/.FreeCAD/FreeCAD.log
  --log-file arg           Unlike to --write-log this allows to log to an 
                           arbitrary file
  -u [ --user-cfg ] arg    User config file to load/save user settings
  -s [ --system-cfg ] arg  Systen config file to load/save system settings
  -t [ --run-test ] arg    Test level
  -M [ --module-path ] arg Additional module paths
  -P [ --python-path ] arg Additional python paths

== Generating a Backtrace == &lt;!--T:3--&gt;
If you are running a version of FreeCAD from the bleeding edge of the development curve, it may &quot;crash&quot;.  You can help solve such problems by providing the developers with a &quot;backtrace&quot;.  To do this, you need to be running a &quot;debug build&quot; of the software. &quot;Debug build&quot; is a parameter that is set at compile time, so you'll either need to compile FreeCAD yourself, or obtain a pre-compiled &quot;debug&quot; version.  

=== For Linux === &lt;!--T:4--&gt;
Prerequisites: 

&lt;!--T:5--&gt;
* software package gdb installed
* a debug build of FreeCAD
* a FreeCAD model that causes a crash

&lt;!--T:6--&gt;
Steps:
Enter the following in your terminal window:

&lt;pre&gt;
$ cd FreeCAD/bin
$ gdb FreeCAD
&lt;/pre&gt;
GNUdebugger will output some initializing information. The (gdb) shows GNUDebugger is running in the terminal, now input:
&lt;pre&gt;
(gdb) handle SIG33 noprint nostop
(gdb) run
&lt;/pre&gt;

&lt;!--T:7--&gt;
FreeCAD will now start up.  Perform the steps that cause FreeCAD to crash or freeze, then enter in the terminal window:
&lt;pre&gt;
(gdb) bt
&lt;/pre&gt;
This will generate a lengthy listing of exactly what the program was doing when it crashed or froze. Include this with your problem report.

== Python Debugging == &lt;!--T:8--&gt;
Here is an example of using winpdb inside FreeCAD:

&lt;!--T:9--&gt;
# Run winpdb and set the password (e.g. test)
# Create a Python file with this content

&lt;syntaxhighlight&gt;
 import rpdb2
 rpdb2.start_embedded_debugger(&quot;test&quot;)
 import FreeCAD
 import Part
 import Draft
 print &quot;hello&quot;
 print &quot;hello&quot;
 import Draft
 points=[FreeCAD.Vector(-3.0,-1.0,0.0),FreeCAD.Vector(-2.0,0.0,0.0)]
 Draft.makeWire(points,closed=False,face=False,support=None)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
# Start FreeCAD and load the above file into FreeCAD
# Press F6 to execute it
# Now FreeCAD will become unresponsive because the Python debugger is waiting
# Switch to the Windpdb GUI and click on &quot;Attach&quot;. After a few seconds an item &quot;&lt;Input&gt;&quot; appears where you have to double-click
# Now the currently executed script appears in Winpdb.
# Set a break at the last line and press F5
# Now press F7 to step into the Python code of Draft.makeWire

&lt;!--T:11--&gt;
{{Docnav|Module Creation|Testing}}

&lt;!--T:12--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Der Image Arbeitsbereich</title>
    <ns>0</ns>
    <id>1663</id>
    <revision>
      <id>107963</id>
      <parentid>95782</parentid>
      <timestamp>2014-09-01T12:09:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Der Mesh Arbeitsbereich</title>
    <ns>0</ns>
    <id>1368</id>
    <revision>
      <id>107964</id>
      <parentid>95783</parentid>
      <timestamp>2014-09-01T12:10:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Der Montagebereich</title>
    <ns>0</ns>
    <id>4401</id>
    <revision>
      <id>107965</id>
      <parentid>95784</parentid>
      <timestamp>2014-09-01T12:10:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Der Part Arbeitsbereich</title>
    <ns>0</ns>
    <id>1367</id>
    <revision>
      <id>107966</id>
      <parentid>95785</parentid>
      <timestamp>2014-09-01T12:11:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Der Roboter Arbeitsbereich</title>
    <ns>0</ns>
    <id>2241</id>
    <revision>
      <id>107968</id>
      <parentid>95787</parentid>
      <timestamp>2014-09-01T12:11:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Developer hub</title>
    <ns>0</ns>
    <id>25</id>
    <revision>
      <id>82705</id>
      <parentid>82704</parentid>
      <timestamp>2014-05-13T19:29:56Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Undo revision 82704 by [[Special:Contributions/Yorik|Yorik]] ([[User talk:Yorik|talk]])</comment>
      <sha1>duxzxcujug1x1qws3m8x7o1ecxaf8sz</sha1>
      <text xml:space="preserve" bytes="2565">

&lt;!--T:1--&gt;
[[Image:Crystal_Clear_app_tutorials.png|right|150]]

&lt;!--T:2--&gt;
This is the place to come if you want to contribute to the development of the FreeCAD software. 

&lt;!--T:3--&gt;
These pages are in the early stage of development.  If you can't find the information you are looking for, or have found useful information somewhere we have not linked to, then please leave a comment on [[Talk:Developer_hub|the talk page]] and someone will look into it (or, if you are feeling bold, why not edit this page directly!).


== Developer Documentation == &lt;!--T:4--&gt;
The developer documentation comprises the following sections:

=== Do it yourself: Compiling FreeCAD === &lt;!--T:5--&gt;
* [[Source code management]]
* [[Tracker|Find assistance]] when you have a problem or think you may have found a bug
* [[CompileOnWindows|Compiling on Windows]]
* [[CompileOnUnix|Compiling on Unix]]
* [[CompileOnMac|Compiling on Mac OS X]]
* [[Licence|Licence details]] about the FreeCAD licences
* [[Third Party Libraries]]
* [[Third Party Tools]]
* [[Start up and Configuration]]
* [[Source documentation]]

=== Build Support Tools === &lt;!--T:6--&gt;
* The [[FreeCAD Build Tool]]
** [[Module_Creation|Adding an application module]] to FreeCAD
* [[Debugging]] FreeCAD
* [[Testing]] FreeCAD

=== Modifying FreeCAD === &lt;!--T:7--&gt;
* Add [[Gui Command|Features]] to FreeCAD or a Workbench
* [[Branding]] or ''how to give FreeCAD a unique look''
* [[Artwork]] we made for FreeCAD, that you can freely reuse
* [[Localisation|Translating FreeCAD]]
* [[Extra python modules]], or ''how to extend python functionality within FreeCAD''

=== OpenCascade Documentation === &lt;!--T:8--&gt;
* [http://opencascade.wikidot.com/romansarticles Roman Lygin's tutorials]
* [http://opencascade.sourcearchive.com/documentation/6.3.0.dfsg.1-1/classes.html Online class reference]. This is the help data on-line for the last version that they offer this way, it is out of date but still helpful and often still relevant. It is perhaps more convenient that having to download a single large file, which is what you have to do for a more recent version.
* [http://opencascade.wikidot.com The openCascade wiki]

== Roadmap == &lt;!--T:9--&gt;
FreeCAD, though usable in certain areas, is at the beginning of a long way into the CAD mainstream. There is still a lot to do 
to reach a state where we can compete with commercial software. 

&lt;!--T:10--&gt;
* [[Development roadmap]]

== Credits == &lt;!--T:11--&gt;
[[Contributors]]

&lt;!--T:12--&gt;
[[Category:Hubs]]
[[Category:Developer Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Development roadmap</title>
    <ns>0</ns>
    <id>395</id>
    <revision>
      <id>121050</id>
      <parentid>121049</parentid>
      <timestamp>2014-11-11T21:29:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8k36a5wngwb8nb907jyne071dzcfkb1</sha1>
      <text xml:space="preserve" bytes="3245">
&lt;!--T:1--&gt;
FreeCAD - though usable in many applications - is at the beginning of a long journey into CAD mainstream. There is still a lot to do to reach a state where we can compete with commercial software. 

&lt;!--T:2--&gt;
This section gives an overview of what is planned and gives you the opportunity to participate or give your opinion. As we are volunteers to FreeCAD we have only a certain amount of time. So if you interested in one of the topics and willing to help, just let us know! We use the [http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology Getting Things Done (GTD)] style for the project document. Here is the [[Project template]].

&lt;!--T:3--&gt;
* The [[Organization chart]] shows who does what in the FreeCAD universe.
* You can follow issues that are currently being worked on via the bugtracker here: http://www.freecadweb.org/tracker/roadmap_page.php

== Projects == &lt;!--T:4--&gt;

=== Current projects === &lt;!--T:5--&gt;
These are work in progress.

&lt;!--T:6--&gt;
* '''[[STEP project]]''' about improving and advancing the STEP support in FreeCAD
* '''[[Naming project]]''' is about implementing a robust Shape referencing frame work. 
* '''[[FreeCAD development model project]]''' move FreeCAD to a more capable development model 
* '''[[Sketcher project]]''' is ongoing implementation of the constraint/parametric Sketcher
* '''[[PartDesign project]]''' is the effort towards a working part-design in FreeCAD 
* '''[[Assembly project]]''' creates a assembly module which handle product creation, part-lists and some kinematics.
* '''[[Arch Concept|Architecture project]]''' will throw the bases of a modern, parametric architectural modeling environment.
* '''[[Units project]]''' finally get FreeCAD to recognize different Units and Units-systems.
* '''[[Resource framework project]]''' address the user collaboration, [http://en.wikipedia.org/wiki/Product_Data_Management PDM] catalog/standard part stuff
* '''[[Quality project]]''' aims to hide unfinished features and improve the documentation.
* '''[[Raytracing project]]''' provide a new generic interface for external renderers for visualisation
* '''[[UTF Project]]''' aims to update FreeCAD's Coin3D interface to utilise UTF Strings for better multilanguage experience with non ASCII characters

=== Future projects === &lt;!--T:7--&gt;
Projects for the near future.

&lt;!--T:8--&gt;
* '''[[Material data model]]''' Effort to describe a material data model in FreeCAD
* '''[[FEM project]]''' wants to create a [http://en.wikipedia.org/wiki/Finite_element_method FEM] module in FreeCAD.
* '''[[CAM project]]''' will make the existing [http://en.wikipedia.org/wiki/Computer-aided_manufacturing CAM] stuff in FreeCAD usable.
* '''[[Land Survey Workbench Blueprint]]'''

=== So far finished projects === &lt;!--T:9--&gt;
* '''[[Robot project]]''' A Robot simulation workbench

=== Ideas === &lt;!--T:10--&gt;

== Release schedule == &lt;!--T:11--&gt;
Like in the most [http://en.wikipedia.org/wiki/FLOSS FLOSS] projects a release schedule is very rough. There will be no fixed dates and '''&quot;It's done, when it's done!&quot;'''

&lt;!--T:12--&gt;
* The [[Release process]] page gather ideas for a more efficient release workflow

&lt;!--T:13--&gt;
[[Category:Roadmap]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Dialog creation</title>
    <ns>0</ns>
    <id>26</id>
    <revision>
      <id>118240</id>
      <parentid>118239</parentid>
      <timestamp>2014-11-05T20:10:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ezde2qmvvpp017xty2d2bgtg9h80ja3</sha1>
      <text xml:space="preserve" bytes="32962">
&lt;!--T:1--&gt;
In this page we will show how to build a simple Qt Dialog with [http://qt-project.org/doc/qt-4.8/designer-manual.html Qt Designer], Qt's official tool for designing interfaces, then convert it to python code, then use it inside FreeCAD. I'll assume in the example that you know how to edit and run python scripts already, and that you can do simple things in a terminal window such as navigate, etc. You must also have, of course, pyqt installed.

== Designing the dialog == &lt;!--T:2--&gt;
In CAD applications, designing a good UI (User Interface) is very important. About everything the user will do will be through some piece of interface: reading dialog boxes, pressing buttons, choosing between icons, etc. So it is very important to think carefully to what you want to do, how you want the user to behave, and how will be the workflow of your action.

&lt;!--T:3--&gt;
There are a couple of concepts to know when designing interface:
* [http://en.wikipedia.org/wiki/Modal_window Modal/non-modal dialogs]: A modal dialog appears in front of your screen, stopping the action of the main window, forcing the user to respond to the dialog, while a non-modal dialog doesn't stop you from working on the main window. In some case the first is better, in other cases not.
* Identifying what is required and what is optional: Make sure the user knows what he must do. Label everything with proper description, use tooltips, etc.
* Separating commands from parameters: This is usually done with buttons and text input fields. The user knows that clicking a button will produce an action while changing a value inside a text field will change a parameter somewhere. Nowadays, though, users usually know well what is a button, what is an input field, etc. The interface toolkit we are using, Qt, is a state-of-the-art toolkit, and we won't have to worry much about making things clear, since they will already be very clear by themselves.

&lt;!--T:4--&gt;
So, now that we have well defined what we will do, it's time to open the qt designer. Let's design a very simple dialog, like this:

&lt;!--T:5--&gt;
[[Image:Qttestdialog.jpg]]

&lt;!--T:6--&gt;
We will then use this dialog in FreeCAD to produce a nice rectangular plane. You might find it not very useful to produce nice rectangular planes, but it will be easy to change it later to do more complex things. When you open it, Qt Designer looks like this:

&lt;!--T:7--&gt;
[[Image:Qtdesigner-screenshot.jpg]]

&lt;!--T:8--&gt;
It is very simple to use. On the left bar you have elements that can be dragged on your widget. On the right side you have properties panels displaying all kinds of editable properties of selected elements. So, begin with creating a new widget. Select &quot;Dialog without buttons&quot;, since we don't want the default Ok/Cancel buttons. Then, drag on your widget '''3 labels''', one for the title, one for writing &quot;Height&quot; and one for writing &quot;Width&quot;. Labels are simple texts that appear on your widget, just to inform the user. If you select a label, on the right side will appear several properties that you can change if you want, such as font style, height, etc.

&lt;!--T:9--&gt;
Then, add '''2 LineEdits''', which are text fields that the user can fill in, one for the height and one for the width. Here too, we can edit properties. For example, why not set a default value? For example 1.00 for each. This way, when the user will see the dialog, both values will be filled already and if he is satisfied he can directly press the button, saving precious time. Then, add a '''PushButton''', which is the button the user will need to press after he filled the 2 fields.

&lt;!--T:10--&gt;
Note that I choosed here very simple controls, but Qt has many more options, for example you could use Spinboxes instead of LineEdits, etc... Have a look at what is available, you will surely have other ideas.

&lt;!--T:11--&gt;
That's about all we need to do in Qt Designer. One last thing, though, let's rename all our elements with easier names, so it will be easier to identify them in our scripts:

&lt;!--T:12--&gt;
[[Image:Qtpropeditor.jpg]]

== Converting our dialog to python == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
Now, let's save our widget somewhere. It will be saved as an .ui file, that we will easily convert to python script with pyuic. On windows, the pyuic program is bundled with pyqt (to be verified), on linux you probably will need to install it separately from your package manager (on debian-based systems, it is part of the pyqt4-dev-tools package). To do the conversion, you'll need to open a terminal window (or a command prompt window on windows), navigate to where you saved your .ui file, and issue:

&lt;syntaxhighlight&gt;
pyuic mywidget.ui &gt; mywidget.py
&lt;/syntaxhighlight&gt;

&lt;!--T:15--&gt;
On some systems the program is called pyuic4 instead of pyuic. This will simply convert the .ui file into a python script. If we open the mywidget.py file, its contents are very easy to understand:

&lt;syntaxhighlight&gt;
from PyQt4 import QtCore, QtGui

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName(&quot;Dialog&quot;)
        Dialog.resize(187, 178)
        self.title = QtGui.QLabel(Dialog)
        self.title.setGeometry(QtCore.QRect(10, 10, 271, 16))
        self.title.setObjectName(&quot;title&quot;)
        self.label_width = QtGui.QLabel(Dialog)
        ...

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

   def retranslateUi(self, Dialog):
        Dialog.setWindowTitle(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Dialog&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.title.setText(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Plane-O-Matic&quot;, None, QtGui.QApplication.UnicodeUTF8))
        ...
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
As you see it has a very simple structure: a class named Ui_Dialog is created, that stores the interface elements of our widget. That class has two methods, one for setting up the widget, and one for translating its contents, that is part of the general Qt mechanism for translating interface elements. The setup method simply creates, one by one, the widgets as we defined them in Qt Designer, and sets their options as we decided earlier. Then, the whole interface gets translated, and finally, the slots get connected (we'll talk about that later).

&lt;!--T:17--&gt;
We can now create a new widget, and use this class to create its interface. We can already see our widget in action, by putting our mywidget.py file in a place where FreeCAD will find it (in the FreeCAD bin directory, or in any of the Mod subdirectories), and, in the FreeCAD python interpreter, issue:

&lt;syntaxhighlight&gt;
from PyQt4 import QtGui
import mywidget
d = QtGui.QWidget()
d.ui = mywidget.Ui_Dialog()
d.ui.setupUi(d)
d.show()
&lt;/syntaxhighlight&gt;

&lt;!--T:18--&gt;
And our dialog will appear! Note that our python interpreter is still working, we have a non-modal dialog. So, to close it, we can (apart from clicking its close icon, of course) issue:

&lt;syntaxhighlight&gt;
d.hide()
&lt;/syntaxhighlight&gt;

== Making our dialog do something == &lt;!--T:19--&gt;
Now that we can show and hide our dialog, we just need to add one last part: To make it do something! If you play a bit with Qt designer, you'll quickly discover a whole section called &quot;signals and slots&quot;. Basically, it works like this: elements on your widgets (in Qt terminology, those elements are themselves widgets) can send signals. Those signals differ according to the widget type. For example, a button can send a signal when it is pressed and when it is released. Those signals can be connected to slots, which can be special functionality of other widgets (for example a dialog has a &quot;close&quot; slot to which you can connect the signal from a close button), or can be custom functions. The [http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/classes.html PyQt Reference Documentation] lists all the qt widgets, what they can do, what signals they can send, etc...

&lt;!--T:20--&gt;
What we will do here, is to create a new function that will create a plane based on height and width, and to connect that function to the pressed signal emitted by our &quot;Create!&quot; button. So, let's begin with importing our FreeCAD modules, by putting the following line at the top of the script, where we already import QtCore and QtGui:

&lt;syntaxhighlight&gt;
import FreeCAD, Part
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
Then, let's add a new function to our Ui_Dialog class:

&lt;syntaxhighlight&gt;
def createPlane(self):
    try:
        # first we check if valid numbers have been entered
        w = float(self.width.text())
        h = float(self.height.text())
    except ValueError:
        print &quot;Error! Width and Height values must be valid numbers!&quot;
    else:
        # create a face from 4 points
        p1 = FreeCAD.Vector(0,0,0)
        p2 = FreeCAD.Vector(w,0,0)
        p3 = FreeCAD.Vector(w,h,0)
        p4 = FreeCAD.Vector(0,h,0)
        pointslist = [p1,p2,p3,p4,p1]
        mywire = Part.makePolygon(pointslist)
        myface = Part.Face(mywire)
        Part.show(myface)
        self.hide()
&lt;/syntaxhighlight&gt;

&lt;!--T:22--&gt;
Then, we need to inform Qt to connect the button to the function, by placing the following line just before QtCore.QMetaObject.connectSlotsByName(Dialog):

&lt;syntaxhighlight&gt;
QtCore.QObject.connect(self.create,QtCore.SIGNAL(&quot;pressed()&quot;),self.createPlane)
&lt;/syntaxhighlight&gt;

&lt;!--T:23--&gt;
This, as you see, connects the pressed() signal of our create object (the &quot;Create!&quot; button), to a slot named createPlane, which we just defined. That's it! Now, as a final touch, we can add a little function to create the dialog, it will be easier to call. Outside the Ui_Dialog class, let's add this code:

&lt;syntaxhighlight&gt;
class plane():
   def __init__(self):
       self.d = QtGui.QWidget()
       self.ui = Ui_Dialog()
       self.ui.setupUi(self.d)
       self.d.show()
&lt;/syntaxhighlight&gt;

&lt;!--T:24--&gt;
(Python reminder: the __init__ method of a class is automatically executed whenever a new object is created!)
Then, from FreeCAD, we only need to do:

&lt;syntaxhighlight&gt;
import mywidget
myDialog = mywidget.plane()
&lt;/syntaxhighlight&gt;

&lt;!--T:25--&gt;
That's all Folks... Now you can try all kinds of things, like for example inserting your widget in the FreeCAD interface (see the [[Code snippets]] page), or making much more advanced custom tools, by using other elements on your widget.

== The complete script == &lt;!--T:26--&gt;
This is the complete script, for reference:

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mywidget.ui'
#
# Created: Mon Jun  1 19:09:10 2009
#      by: PyQt4 UI code generator 4.4.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui
import FreeCAD, Part 

class Ui_Dialog(object):
   def setupUi(self, Dialog):
       Dialog.setObjectName(&quot;Dialog&quot;)
       Dialog.resize(187, 178)
       self.title = QtGui.QLabel(Dialog)
       self.title.setGeometry(QtCore.QRect(10, 10, 271, 16))
       self.title.setObjectName(&quot;title&quot;)
       self.label_width = QtGui.QLabel(Dialog)
       self.label_width.setGeometry(QtCore.QRect(10, 50, 57, 16))
       self.label_width.setObjectName(&quot;label_width&quot;)
       self.label_height = QtGui.QLabel(Dialog)
       self.label_height.setGeometry(QtCore.QRect(10, 90, 57, 16))
       self.label_height.setObjectName(&quot;label_height&quot;)
       self.width = QtGui.QLineEdit(Dialog)
       self.width.setGeometry(QtCore.QRect(60, 40, 111, 26))
       self.width.setObjectName(&quot;width&quot;)
       self.height = QtGui.QLineEdit(Dialog)
       self.height.setGeometry(QtCore.QRect(60, 80, 111, 26))
       self.height.setObjectName(&quot;height&quot;)
       self.create = QtGui.QPushButton(Dialog)
       self.create.setGeometry(QtCore.QRect(50, 140, 83, 26))
       self.create.setObjectName(&quot;create&quot;)

       self.retranslateUi(Dialog)
       QtCore.QObject.connect(self.create,QtCore.SIGNAL(&quot;pressed()&quot;),self.createPlane)
       QtCore.QMetaObject.connectSlotsByName(Dialog)

   def retranslateUi(self, Dialog):
       Dialog.setWindowTitle(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Dialog&quot;, None, QtGui.QApplication.UnicodeUTF8))
       self.title.setText(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Plane-O-Matic&quot;, None, QtGui.QApplication.UnicodeUTF8))
       self.label_width.setText(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Width&quot;, None, QtGui.QApplication.UnicodeUTF8))
       self.label_height.setText(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Height&quot;, None, QtGui.QApplication.UnicodeUTF8))
       self.create.setText(QtGui.QApplication.translate(&quot;Dialog&quot;, &quot;Create!&quot;, None, QtGui.QApplication.UnicodeUTF8))

   def createPlane(self):
       try:
           # first we check if valid numbers have been entered
           w = float(self.width.text())
           h = float(self.height.text())
       except ValueError:
           print &quot;Error! Width and Height values must be valid numbers!&quot;
       else:
           # create a face from 4 points
           p1 = FreeCAD.Vector(0,0,0)
           p2 = FreeCAD.Vector(w,0,0)
           p3 = FreeCAD.Vector(w,h,0)
           p4 = FreeCAD.Vector(0,h,0)
           pointslist = [p1,p2,p3,p4,p1]
           mywire = Part.makePolygon(pointslist)
           myface = Part.Face(mywire)
           Part.show(myface)

class plane():
   def __init__(self):
       self.d = QtGui.QWidget()
       self.ui = Ui_Dialog()
       self.ui.setupUi(self.d)
       self.d.show()
&lt;/syntaxhighlight&gt;

==Creation of a dialog with buttons== &lt;!--T:27--&gt;

===Method 1=== &lt;!--T:28--&gt;
An example of a dialog box complete with its connections.

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# Create by flachyjoe

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)


class Ui_MainWindow(object):

     def __init__(self, MainWindow):
        self.window = MainWindow

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(400, 300)
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

        self.pushButton = QtGui.QPushButton(self.centralWidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 170, 93, 28))
        self.pushButton.setObjectName(_fromUtf8(&quot;pushButton&quot;))
        self.pushButton.clicked.connect(self.on_pushButton_clicked) #connection pushButton

        self.lineEdit = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 40, 211, 22))
        self.lineEdit.setObjectName(_fromUtf8(&quot;lineEdit&quot;))
        self.lineEdit.returnPressed.connect(self.on_lineEdit_clicked) #connection lineEdit

        self.checkBox = QtGui.QCheckBox(self.centralWidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 90, 81, 20))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName(_fromUtf8(&quot;checkBoxON&quot;))
        self.checkBox.clicked.connect(self.on_checkBox_clicked) #connection checkBox

        self.radioButton = QtGui.QRadioButton(self.centralWidget)
        self.radioButton.setGeometry(QtCore.QRect(30, 130, 95, 20))
        self.radioButton.setObjectName(_fromUtf8(&quot;radioButton&quot;))
        self.radioButton.clicked.connect(self.on_radioButton_clicked) #connection radioButton

        MainWindow.setCentralWidget(self.centralWidget)

        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 400, 26))
        self.menuBar.setObjectName(_fromUtf8(&quot;menuBar&quot;))
        MainWindow.setMenuBar(self.menuBar)

        self.mainToolBar = QtGui.QToolBar(MainWindow)
        self.mainToolBar.setObjectName(_fromUtf8(&quot;mainToolBar&quot;))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.mainToolBar)

        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8(&quot;statusBar&quot;))
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)

     def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;MainWindow&quot;, None))
        self.pushButton.setText(_translate(&quot;MainWindow&quot;, &quot;OK&quot;, None))
        self.lineEdit.setText(_translate(&quot;MainWindow&quot;, &quot;tyty&quot;, None))
        self.checkBox.setText(_translate(&quot;MainWindow&quot;, &quot;CheckBox&quot;, None))
        self.radioButton.setText(_translate(&quot;MainWindow&quot;, &quot;RadioButton&quot;, None))

     def on_checkBox_clicked(self):
        if self.checkBox.checkState()==0:
            App.Console.PrintMessage(str(self.checkBox.checkState())+&quot;  CheckBox KO\r\n&quot;)
        else:     
            App.Console.PrintMessage(str(self.checkBox.checkState())+&quot; CheckBox OK\r\n&quot;)
#        App.Console.PrintMessage(str(self.lineEdit.setText(&quot;tititi&quot;))+&quot; LineEdit\r\n&quot;) #write text to the lineEdit window !
#        str(self.lineEdit.setText(&quot;tititi&quot;)) #écrit le texte dans la fenêtre lineEdit
        App.Console.PrintMessage(str(self.lineEdit.displayText())+&quot; LineEdit\r\n&quot;)

     def on_radioButton_clicked(self):
        if self.radioButton.isChecked():
             App.Console.PrintMessage(str(self.radioButton.isChecked())+&quot; Radio OK\r\n&quot;)
        else:
             App.Console.PrintMessage(str(self.radioButton.isChecked())+&quot;  Radio KO\r\n&quot;)

     def on_lineEdit_clicked(self):
#        if self.lineEdit.textChanged():
		    App.Console.PrintMessage(str(self.lineEdit.displayText())+&quot; LineEdit Display\r\n&quot;)

     def on_pushButton_clicked(self):
        App.Console.PrintMessage(&quot;Terminé\r\n&quot;)
        self.window.hide()

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()
&lt;/syntaxhighlight&gt;

&lt;!--T:29--&gt;
Here the same window but with an icon on each button.

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)


class Ui_MainWindow(object):

     def __init__(self, MainWindow):
        self.window = MainWindow
#        path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
        path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(400, 300)
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

        self.pushButton = QtGui.QPushButton(self.centralWidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 170, 93, 28))
        self.pushButton.setObjectName(_fromUtf8(&quot;pushButton&quot;))
        self.pushButton.clicked.connect(self.on_pushButton_clicked) #connection pushButton

        self.lineEdit = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 40, 211, 22))
        self.lineEdit.setObjectName(_fromUtf8(&quot;lineEdit&quot;))
        self.lineEdit.returnPressed.connect(self.on_lineEdit_clicked) #connection lineEdit

        self.checkBox = QtGui.QCheckBox(self.centralWidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 90, 100, 20))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName(_fromUtf8(&quot;checkBoxON&quot;))
        self.checkBox.clicked.connect(self.on_checkBox_clicked) #connection checkBox

        self.radioButton = QtGui.QRadioButton(self.centralWidget)
        self.radioButton.setGeometry(QtCore.QRect(30, 130, 95, 20))
        self.radioButton.setObjectName(_fromUtf8(&quot;radioButton&quot;))
        self.radioButton.clicked.connect(self.on_radioButton_clicked) #connection radioButton

        MainWindow.setCentralWidget(self.centralWidget)

        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 400, 26))
        self.menuBar.setObjectName(_fromUtf8(&quot;menuBar&quot;))
        MainWindow.setMenuBar(self.menuBar)

        self.mainToolBar = QtGui.QToolBar(MainWindow)
        self.mainToolBar.setObjectName(_fromUtf8(&quot;mainToolBar&quot;))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.mainToolBar)

        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8(&quot;statusBar&quot;))
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)

        # Affiche un icône sur le bouton PushButton
        # self.image_01 = &quot;C:\Program Files\FreeCAD0.13\icone01.png&quot; # adapt the icon name
        self.image_01 = path+&quot;icone01.png&quot; # adapt the name of the icon
        icon01 = QtGui.QIcon() 
        icon01.addPixmap(QtGui.QPixmap(self.image_01),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon01) 
        self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the direction of the button

        # Affiche un icône sur le bouton RadioButton 
        # self.image_02 = &quot;C:\Program Files\FreeCAD0.13\icone02.png&quot; # adapt the name of the icon
        self.image_02 = path+&quot;icone02.png&quot; # adapter le nom de l'icône
        icon02 = QtGui.QIcon() 
        icon02.addPixmap(QtGui.QPixmap(self.image_02),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.radioButton.setIcon(icon02) 
        # self.radioButton.setLayoutDirection(QtCore.Qt.RightToLeft) #  This command reverses the direction of the button

        # Affiche un icône sur le bouton CheckBox 
        # self.image_03 = &quot;C:\Program Files\FreeCAD0.13\icone03.png&quot; # the name of the icon
        self.image_03 = path+&quot;icone03.png&quot; # adapter le nom de l'icône
        icon03 = QtGui.QIcon() 
        icon03.addPixmap(QtGui.QPixmap(self.image_03),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.checkBox.setIcon(icon03) 
        # self.checkBox.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the direction of the button


     def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;FreeCAD&quot;, None))
        self.pushButton.setText(_translate(&quot;MainWindow&quot;, &quot;OK&quot;, None))
        self.lineEdit.setText(_translate(&quot;MainWindow&quot;, &quot;tyty&quot;, None))
        self.checkBox.setText(_translate(&quot;MainWindow&quot;, &quot;CheckBox&quot;, None))
        self.radioButton.setText(_translate(&quot;MainWindow&quot;, &quot;RadioButton&quot;, None))

     def on_checkBox_clicked(self):
        if self.checkBox.checkState()==0:
            App.Console.PrintMessage(str(self.checkBox.checkState())+&quot;  CheckBox KO\r\n&quot;)
        else:     
            App.Console.PrintMessage(str(self.checkBox.checkState())+&quot; CheckBox OK\r\n&quot;)
           # App.Console.PrintMessage(str(self.lineEdit.setText(&quot;tititi&quot;))+&quot; LineEdit\r\n&quot;) # write text to the lineEdit window !
           # str(self.lineEdit.setText(&quot;tititi&quot;)) #écrit le texte dans la fenêtre lineEdit
        App.Console.PrintMessage(str(self.lineEdit.displayText())+&quot; LineEdit\r\n&quot;)

     def on_radioButton_clicked(self):
        if self.radioButton.isChecked():
             App.Console.PrintMessage(str(self.radioButton.isChecked())+&quot; Radio OK\r\n&quot;)
        else:
             App.Console.PrintMessage(str(self.radioButton.isChecked())+&quot;  Radio KO\r\n&quot;)

     def on_lineEdit_clicked(self):
          # if self.lineEdit.textChanged():
          App.Console.PrintMessage(str(self.lineEdit.displayText())+&quot; LineEdit Display\r\n&quot;)

     def on_pushButton_clicked(self):
        App.Console.PrintMessage(&quot;Terminé\r\n&quot;)
        self.window.hide()

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()
&lt;/syntaxhighlight&gt;

&lt;!--T:30--&gt;
Here the code to display the icon on the '''pushButton''', change the name for another button, ('''radioButton, checkBox''') and the path to the icon.

&lt;syntaxhighlight&gt;
        # Affiche un icône sur le bouton PushButton
        # self.image_01 = &quot;C:\Program Files\FreeCAD0.13\icone01.png&quot; # the name of the icon
        self.image_01 = path+&quot;icone01.png&quot; # the name of the icon
        icon01 = QtGui.QIcon() 
        icon01.addPixmap(QtGui.QPixmap(self.image_01),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon01) 
        self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the direction of the button
&lt;/syntaxhighlight&gt;

&lt;!--T:31--&gt;
The command
'''UserAppData''' gives the user path
'''AppHomePath''' gives the installation path of FreeCAD

&lt;syntaxhighlight&gt;
#        path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
        path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:32--&gt;
This command reverses the horizontal button, right to left.

&lt;syntaxhighlight&gt;
self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the direction of the button
&lt;/syntaxhighlight&gt;


===Method 2=== &lt;!--T:33--&gt;
Another method to display a window, here by creating a file '''QtForm.py''' which contains the header program (module called with '''import QtForm'''), and a second module that contains the code window all these accessories, and your code (the calling module).

&lt;!--T:34--&gt;
This method requires two separate files, but allows to shorten your program using the file ' ' QtForm.py ' ' import. Then distribute the two files together, they are inseparable.

&lt;!--T:35--&gt;
The file '''QtForm.py'''

&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
# Create by flachyjoe
from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
   def _fromUtf8(s):
      return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
      return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
   def _translate(context, text, disambig):
      return QtGui.QApplication.translate(context, text, disambig)

class Form(object):
   def __init__(self, title, width, height):
      self.window = QtGui.QMainWindow()
      self.title=title
      self.window.setObjectName(_fromUtf8(title))
      self.window.setWindowTitle(_translate(self.title, self.title, None))
      self.window.resize(width, height)

   def show(self):
      self.createUI()
      self.retranslateUI()
      self.window.show()
   
   def setText(self, control, text):
      control.setText(_translate(self.title, text, None))
&lt;/syntaxhighlight&gt;

&lt;!--T:36--&gt;
The appellant, file that contains the window and your code.

&lt;!--T:37--&gt;
The file my_file.py

&lt;!--T:38--&gt;
The connections are to do, a good exercise.

&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
# Create by flachyjoe
from PyQt4 import QtCore, QtGui
import QtForm

class myForm(QtForm.Form):
   def createUI(self):
      self.centralWidget = QtGui.QWidget(self.window)
      self.window.setCentralWidget(self.centralWidget)
      
      self.pushButton = QtGui.QPushButton(self.centralWidget)
      self.pushButton.setGeometry(QtCore.QRect(30, 170, 93, 28))
      self.pushButton.clicked.connect(self.on_pushButton_clicked)
      
      self.lineEdit = QtGui.QLineEdit(self.centralWidget)
      self.lineEdit.setGeometry(QtCore.QRect(30, 40, 211, 22))
      
      self.checkBox = QtGui.QCheckBox(self.centralWidget)
      self.checkBox.setGeometry(QtCore.QRect(30, 90, 81, 20))
      self.checkBox.setChecked(True)
      
      self.radioButton = QtGui.QRadioButton(self.centralWidget)
      self.radioButton.setGeometry(QtCore.QRect(30, 130, 95, 20))
   
   def retranslateUI(self):
      self.setText(self.pushButton, &quot;Fermer&quot;)
      self.setText(self.lineEdit, &quot;essai de texte&quot;)
      self.setText(self.checkBox, &quot;CheckBox&quot;)
      self.setText(self.radioButton, &quot;RadioButton&quot;)
   
   def on_pushButton_clicked(self):
      self.window.hide()

myWindow=myForm(&quot;Fenêtre de test&quot;,400,300)
myWindow.show()
&lt;/syntaxhighlight&gt;

==Some useful commands== &lt;!--T:39--&gt;

&lt;syntaxhighlight&gt;
# Here the code to display the icon on the '''pushButton''', 
# change the name to another button, ('''radioButton, checkBox''') as well as the path to the icon,

       # Displays an icon on the button PushButton
       # self.image_01 = &quot;C:\Program Files\FreeCAD0.13\icone01.png&quot; # he name of the icon
       self.image_01 = path+&quot;icone01.png&quot; # the name of the icon
       icon01 = QtGui.QIcon() 
       icon01.addPixmap(QtGui.QPixmap(self.image_01),QtGui.QIcon.Normal, QtGui.QIcon.Off)
       self.pushButton.setIcon(icon01) 
       self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the direction of the button


# path = FreeCAD.ConfigGet(&quot;UserAppData&quot;) # gives the user path
  path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;) # gives the installation path of FreeCAD

# This command reverses the horizontal button, right to left
self.pushButton.setLayoutDirection(QtCore.Qt.RightToLeft) # This command reverses the horizontal button

# Displays an info button
self.pushButton.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Quitter la fonction&quot;, None)) # Displays an info button

# This function gives a color button
self.pushButton.setStyleSheet(&quot;background-color: red&quot;) # This function gives a color button

# This function gives a color to the text of the button
self.pushButton.setStyleSheet(&quot;color : #ff0000&quot;) # This function gives a color to the text of the button

# combinaison des deux, bouton et texte
self.pushButton.setStyleSheet(&quot;color : #ff0000; background-color : #0000ff;&quot; ) #  combination of the two, button, and text

# replace the icon in the main window
MainWindow.setWindowIcon(QtGui.QIcon('C:\Program Files\FreeCAD0.13\View-C3P.png'))

# connects a lineEdit on execute
self.lineEdit.returnPressed.connect(self.execute) # connects a lineEdit on &quot;def execute&quot; after validation on enter
# self.lineEdit.textChanged.connect(self.execute) # connects a lineEdit on &quot;def execute&quot; with each keystroke on the keyboard

# display text in a lineEdit
self.lineEdit.setText(str(val_X)) # Displays the value in the lineEdit (convert to string)

# extract the string contained in a lineEdit
 val_X = self.lineEdit.text() # extract the (string) string contained in lineEdit
 val_X = float(val_X0)        # converted the string to an floating
 val_X = int(val_X0)          # convert the string to an integer

# This code allows you to change the font and its attributes
       font = QtGui.QFont()
       font.setFamily(&quot;Times New Roman&quot;)
       font.setPointSize(10)
       font.setWeight(10)
       font.setBold(True) # same result with tags &quot;&lt;b&gt;your text&lt;/b&gt;&quot; (in quotes)
       self.label_6.setFont(font)
       self.label_6.setObjectName(&quot;label_6&quot;)
       self.label_6.setStyleSheet(&quot;color : #ff0000&quot;) # This function gives a color to the text
       self.label_6.setText(_translate(&quot;MainWindow&quot;, &quot;Select a view&quot;, None))
&lt;/syntaxhighlight&gt;


&lt;!--T:40--&gt;
By using the characters with accents, where you get the error :

&lt;!--T:41--&gt;
Several solutions are possible.

&lt;!--T:42--&gt;
&lt;FONT COLOR=&quot;#FF0000&quot;&gt;'''UnicodeDecodeError: 'utf8' codec can't decode bytes in position 0-2: invalid data'''&lt;/FONT&gt;

&lt;syntaxhighlight&gt;
# conversion from a lineEdit
App.activeDocument().CopyRight.Text = str(unicode(self.lineEdit_20.text() , 'ISO-8859-1').encode('UTF-8'))
DESIGNED_BY = unicode(self.lineEdit_01.text(), 'ISO-8859-1').encode('UTF-8')
&lt;/syntaxhighlight&gt;

&lt;!--T:43--&gt;
or with the procedure

&lt;syntaxhighlight&gt;
def utf8(unio):
    return unicode(unio).encode('UTF8')
&lt;/syntaxhighlight&gt;

&lt;FONT COLOR=&quot;#FF0000&quot;&gt;'''UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 9: ordinal not in range(128)'''&lt;/FONT&gt;

&lt;syntaxhighlight&gt;
# conversion
a = u&quot;Nom de l'élément : &quot;
f.write('''a.encode('iso-8859-1')'''+str(element_)+&quot;\n&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:44--&gt;
or with the procedure

&lt;syntaxhighlight&gt;
def iso8859(encoder):
    return unicode(encoder).encode('iso-8859-1')
&lt;/syntaxhighlight&gt;

&lt;!--T:45--&gt;
or

&lt;syntaxhighlight&gt;
iso8859(unichr(176))
&lt;/syntaxhighlight&gt;

&lt;!--T:46--&gt;
or

&lt;syntaxhighlight&gt;
unichr(ord(176))
&lt;/syntaxhighlight&gt;

&lt;!--T:47--&gt;
or

&lt;syntaxhighlight&gt;
uniteSs = &quot;mm&quot;+iso8859(unichr(178))
print unicode(uniteSs, 'iso8859')
&lt;/syntaxhighlight&gt;



&lt;!--T:48--&gt;
{{docnav|Line drawing function|Licence}}

&lt;!--T:49--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Document structure</title>
    <ns>0</ns>
    <id>378</id>
    <revision>
      <id>132779</id>
      <parentid>45361</parentid>
      <timestamp>2014-12-22T17:44:10Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>template  {{Code|code= }}</comment>
      <sha1>t8u3c13ag2yvhmcs41b0n0be14bcpzd</sha1>
      <text xml:space="preserve" bytes="3770">
&lt;!--T:1--&gt;
[[Image:Screenshot treeview.jpg|left]]
A FreeCAD document contains all the objects of your scene. It can contain groups, and objects made with any workbench. You can therefore switch between workbenches, and still work on the same document. The document is what gets saved to disk when you save your work. You can also open several documents at the same time in FreeCAD, and open several views of the same document.

&lt;!--T:2--&gt;
Inside the document, the objects can be moved into groups, and have a unique name. Managing groups, objects and object names is done mainly from the Tree view. It can also be done, of course, like everything in FreeCAD, from the python interpreter. In the Tree view, you can create groups, move objects to groups, delete objects or groups, by right-clicking in the tree view or on an object, rename objects by double-clicking on their names, or possibly other operations, depending on the current workbench.

&lt;!--T:3--&gt;
The objects inside a FreeCAD document can be of different types. Each workbench can create its own types of objects, for example the [[Mesh Workbench]] creates mesh objects, the [[Part Workbench]] create Part objects, the [[Draft Workbench]] also creates Part objects, etc.

&lt;!--T:4--&gt;
If there is at least one document open in FreeCAD, there is always one and only one active document. That's the document that appears in the current 3D view, the document you are currently working on.

==Application and User Interface== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
Like almost everything else in FreeCAD, the user interface part (Gui) is separated from the base application part (App). This is also valid for documents. The documents are also made of two parts: the Application document, which contains our objects, and the View document, which contains the representation on screen of our objects. 

&lt;!--T:7--&gt;
Think of it as two spaces, where the objects are defined. Their constructive parameters (is it a cube? a cone? which size?) are stored in the Application document, while their graphical representation (is it drawn with black lines? with blue faces?) are stored in the View document. Why is that? Because FreeCAD can also be used WITHOUT graphical interface, for example inside other programs, and we must still be able to manipulate our objects, even if nothing is drawn on the screen.

&lt;!--T:8--&gt;
Another thing that is contained inside the View document are 3D views. One document can have several views opened, so you can inspect your document from several points of view at the same time. Maybe you would want to see a top view and a front view of your work at the same time? Then, you will have two views of the same document, both stored in the View document. Creating new views or closing views can be done from the View menu or by right-clicking on a view tab.

==Scripting== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Documents can be easily created, accessed and modified from the python interpreter. For example:

{{Code|code=
FreeCAD.ActiveDocument
}}

&lt;!--T:11--&gt;
Will return the current (active) document

{{Code|code=
FreeCAD.ActiveDocument.Blob
}}

&lt;!--T:12--&gt;
Would access an object called &quot;Blob&quot; inside your document

{{Code|code=
FreeCADGui.ActiveDocument
}}

&lt;!--T:13--&gt;
Will return the view document associated to the current document

{{Code|code=
FreeCADGui.ActiveDocument.Blob
}}

&lt;!--T:14--&gt;
Would access the graphical representation (view) part of our Blob object

{{Code|code=
FreeCADGui.ActiveDocument.ActiveView
}}

&lt;!--T:15--&gt;
Will return the current view

&lt;!--T:16--&gt;
{{docnav|Mouse Model|Preferences Editor}}

&lt;!--T:17--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Download</title>
    <ns>0</ns>
    <id>27</id>
    <revision>
      <id>134325</id>
      <parentid>93216</parentid>
      <timestamp>2014-12-27T20:04:49Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Updated Ubuntu versions</comment>
      <sha1>qnklx5ld4pslppgqsgby3s29pm1cu9c</sha1>
      <text xml:space="preserve" bytes="12488">
&lt;!--T:1--&gt;
There are several '''downloads''' for various operating systems available. Before downloading keep in mind: 
{{VeryImportantMessage|'''FreeCAD is under heavy development and might not be ready for production use'''}}

==Official Installers== &lt;!--T:2--&gt;

=== Stable FreeCAD installers === &lt;!--T:3--&gt;
The FreeCAD team provides ready-to-install packages for [[Image:windows.png|16px]] '''Windows''' (XP, Vista and 7, 32 and 64bits), [[Image:mac.png|16px]] '''Mac OS X''' (Lion 10.7), and  [[Image:linux.png|16px]] '''Debian-based Linux systems''' (Debian, Ubuntu, 32 and 64bits). Below are links to the Stable installation files for the various systems.  Also available on the [http://sourceforge.net/projects/free-cad/files/ FreeCAD Files page] are '''unstable''' packages, that provide the bleeding-edge new features being worked on, but might crash more often or contain features that are incompatible with earlier versions.
{| align=&quot;center&quot; cellpadding=&quot;20&quot;
|{{DownloadWindowsStable}} || || {{DownloadUnixStable}} || || {{DownloadMacStable}}
|}

=== Development Versions === &lt;!--T:4--&gt;
If you want to install FreeCAD with more in-development features, and are willing to accept that these versions have a higher chance of bugs and crashes, then you can check the  official [http://sourceforge.net/projects/free-cad/files/ FreeCAD Files page] to download 64 bit, older, or unstable releases.  Of course, if you want to stay even more on the bleeding edge of development, you can [[compiling| compile]] FreeCAD, or use the [[#Ubuntu PPA packages|Ubuntu daily build updates]].

===Notes for Windows users=== &lt;!--T:5--&gt;
The windows installer should also work on older Windows platforms, but has not always been tested. You need ''Windows Installer V1'' on your system (msiexec.exe). See [[Install on Windows|Installing on Windows]] for details about different installation options. Download the latest .msi file for windows systems, or the appropriate .deb file for your version of Ubuntu or Debian.

===Notes for Linux users=== &lt;!--T:6--&gt;
On most recent distributions such as Debian, Ubuntu, Fedora or Arch, FreeCAD is included in the official distribution's packages repository, and you are advised to preferably get FreeCAD from there, to make sure you have a version that is 100% compatible with your system. The pivy python module (usually named python-pivy) is needed by FreeCAD from version 0.9 or above. If it is not available on your system, you must download it from here too.

====Notes for Debian users==== &lt;!--T:7--&gt;
Because of a licensing conflict between third-party libraries required by FreeCAD, the freecad package was removed from the current Debian stable (wheezy) repository. This will be solved when the next stable release of FreeCAD comes out. In the meanwhile, you can either [[CompileOnUnix|compile FreeCAD]] or use an [[#Alternative_FreeCAD_builds|alternate build]].

&lt;!--T:8--&gt;
You should also note that although Ubuntu is based on Debian, the Ubuntu PPA packages are NOT compatible with Debian.

===Notes for Mac users=== &lt;!--T:9--&gt;
We rely on very few people to help building Mac OSX packages, so it doesn't get updated as often as the other platforms. The version available on this site might be slightly outdated. (To compile the most up-to-date version from source see [[CompileOnMac]])

&lt;!--T:41--&gt;
You can follow the topic dedicate to Mac on the [http://forum.freecadweb.org/viewtopic.php?f=4&amp;t=5452 forum]

== Ubuntu PPA packages == &lt;!--T:10--&gt;
The [https://launchpad.net/~freecad-maintainers FreeCAD Launchpad team] has set up a PPA (Personal Package Archive) repository that allows easy install of Ubuntu packages based on the development branch. Updates to the software are pushed to the Ubuntu Update Manager, which makes it the easiest way to get the latest FreeCAD build.

&lt;!--T:11--&gt;
The [https://launchpad.net/~freecad-maintainers/+archive/freecad-daily FreeCAD Daily Builds] PPA is an automatic daily build system, which can provide you with a fresh, daily-up-to-date version of FreeCAD. Please be advised that the packages from this bleeding edge PPA may be broken from time to time.

&lt;!--T:12--&gt;
Current supported architectures and versions are:
* Ubuntu 12.04 LTS (Precise Pangolin) 32 &amp; 64-Bit
* Ubuntu 14.04 (Trusty Tahr) 32 &amp; 64-Bit
* Ubuntu 14.10 (Utopic Unicorn) 32 &amp; 64-Bit

==== Adding the PPA and installing FreeCAD from the console ==== &lt;!--T:13--&gt;
Type (or copy-paste) these commands in a console to add the PPA and install FreeCAD along with the documentation:

&lt;syntaxhighlight&gt;
 sudo add-apt-repository ppa:freecad-maintainers/freecad-daily
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
Then:

&lt;syntaxhighlight&gt;
 sudo apt-get update
 sudo apt-get upgrade
 sudo apt-get install freecad freecad-doc
&lt;/syntaxhighlight&gt;

==== Adding the PPA and installing FreeCAD from the GUI ==== &lt;!--T:15--&gt;
Add to your system's Software Sources the following PPA (read [http://askubuntu.com/questions/4983/what-are-ppas-and-how-do-i-use-them/5102#5102%29 What are PPAs and how do I use them?] if you don't know how):

&lt;syntaxhighlight&gt;
 ppa:freecad-maintainers/freecad-daily
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
When a dialog window asks you to refresh your software sources, click OK.

&lt;!--T:17--&gt;
Now you can install FreeCAD and FreeCAD documentation through the Ubuntu Software Center, or your package manager of choice.

== Fedora package == &lt;!--T:24--&gt;
To install FreeCAD on Fedora, make sure you have the *NONFREE* repositories installed (necessary because of OCC/OCE license)

&lt;syntaxhighlight&gt;
 yum install freecad
&lt;/syntaxhighlight&gt;

&lt;!--T:25--&gt;
Or use the GUI installer.

== Alternative FreeCAD builds == &lt;!--T:26--&gt;
These are versions of FreeCAD built by other persons and not officially maintained by the FreeCAD team. They may include customized parts or be optimized for certain types of processors, or other modifications that the package maintainers judged necessary. They might also be out-of-date, since the people who make those package may take time to grab the newer versions of FreeCAD. But they are also sometimes better suited for certain operating systems. Note that on most common linux distributions, official packages are typically installed by the system's package management tool, so you don't need to download and install FreeCAD manually.

&lt;!--T:27--&gt;
*[http://packages.debian.org/freecad Official Debian package]
*[http://packages.ubuntu.com/freecad Official Ubuntu package]
*[http://software.opensuse.org/search?q=freecad&amp;baseproject=openSUSE%3A11.4&amp;lang=en&amp;exclude_debug=true Official OpenSuse package]
*[http://www.softpedia.com/get/Multimedia/Graphic/Graphic-Editors/FreeCAD.shtml Softpedia Windows build]
*[http://packman.links2linux.de/package/FreeCAD Packman RPM package (for opensuse, fedora)]
*[http://slackbuilds.org/repository/13.37/graphics/FreeCAD/ Slackbuilds package (for Slackware)]
*[http://aur.archlinux.org/packages.php?K=freecad ArchLinux AUR package]
*[http://packages.gentoo.org/package/media-gfx/freecad Gentoo ebuild package]
*[https://svn.pardus.org.tr/pardus/playground/kaan.aksit/2011/freecad/actions.py Pardus linux build script]
*[http://www.zultron.com/rpm-repo/ Unofficial but well maintained Fedora FreeCAD repository]
*[http://forum.freecadweb.org/viewtopic.php?f=4&amp;t=2995 Unofficial Debian Wheezy package (32-Bit and 64-Bit)]

== FreeCAD documentation == &lt;!--T:28--&gt;
The user documentation of FreeCAD is being written together by the developers and the users community, on this wiki site. The best way is to read it online, so you are sure to get the latest version:
* [[Online Help Toc|The FreeCAD Manual]]

&lt;!--T:29--&gt;
The manual can also be displayed as one big text, so you can print it or save it as a pdf file:
* [[Manual|All-in-one printable version]]

&lt;!--T:30--&gt;
The manual is also be compiled as a qt help file, so it can be browsed offline with the Qt help viewer. This is usually made at each release and is available together with FreeCAD package on most linux software repositories (on debian/ubuntu-based systems, look for '''freecad-doc''' package) and is also bundled in the windows installer. To access it, simply open the &quot;help&quot; menu inside FreeCAD, or use the &quot;What's this?&quot; button.

&lt;!--T:31--&gt;
For convenience, we also provide a pdf version of this manual:
* [http://yorik.uncreated.net/archive/documents/freecad010.pdf 0.10 Manual (Pdf file)]
* [http://yorik.uncreated.net/scripts/freecad011.pdf 0.11 Manual (Pdf file)]
* [http://sourceforge.net/projects/free-cad/files/FreeCAD%20Documentation/FreeCAD-0.12.pdf/download 0.12 Manual (Pdf file)]
* [http://sourceforge.net/projects/free-cad/files/FreeCAD%20Documentation/FreeCAD-0.13.pdf/download 0.13 Manual (Pdf file)]
* [http://sourceforge.net/projects/free-cad/files/FreeCAD%20Documentation/FreeCAD-014.pdf/download 0.14 Manual (Pdf file)]

&lt;!--T:32--&gt;
Here you can also find a copy of the OpenCasCade 5.2 docs, in a .chm file. After 5.2, the openCasCade documentation is not available as a single file anymore, but as a heavy 180Mb package. So, since there is little change, we keep this one around for convenience:
*[http://www.4shared.com/file/128871432/96b15e62/occ52.html OpenCasCADE 5.2 documentation]

== FreeCAD Source package == &lt;!--T:33--&gt;
For all other platforms you need to compile FreeCAD on your own from the Source package. You might also want to compile FreeCAD yourself if you want to optimize certain things, or customize certain parts of FreeCAD. Instructions for compiling can be found on the [[CompileOnWindows]], [[CompileOnMac]] and [[CompileOnUnix]] pages. You can grab a zip or tar.gz file containing the latest official version here (look for the latest version for your system):
*[http://sourceforge.net/projects/free-cad/files/ official FreeCAD Files repository]

&lt;!--T:34--&gt;
Alternatively, you can also download latest source code from the Git repositories. You'll get a more recent version, but it might contain bugs or even fail to compile. Instructions for accessing the Git repositories can be found here:
*[https://sourceforge.net/scm/?type=git&amp;group_id=49159 FreeCAD Git repository] (most active)
*[https://github.com/FreeCAD/FreeCAD_sf_master FreeCAD repository on github.com]

&lt;!--T:35--&gt;
You can also download automatically a GNU tarball from the latest source code tree or any part of it by using the code browser and clicking the &quot;Download GNU tarball&quot; at any time. The trunk folder contains the current development version, while the branches folder contains a snapshot of all stable releases to date.

== FreeCAD LibPack == &lt;!--T:36--&gt;
To collect all the needed libraries to compile FreeCAD can be a time consuming task. So we deliver a convenient package for development on Windows (VS8) with all needed libraries. You can download the latest version of the libpack from:
*[http://sourceforge.net/projects/free-cad/files/FreeCAD%20LibPack/ FreeCAD LibPack]

&lt;!--T:37--&gt;
For linux, you will normally find all necessary libraries in your software management system, so you should just read the [[CompileOnUnix]] page.

== Additional modules and related projects == &lt;!--T:38--&gt;
There are additional modules, addons of plugins for FreeCAD developed outside of the main FreeCAD development team. They are listed here but are not officially supported by the FreeCAD team.

&lt;!--T:39--&gt;
*[http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3391 Fold module]: a module for working with metal sheets (abandoned for some time, lmay not work anymore).
*[http://gitorious.org/freecad-ship Ship module], [http://jlcercos.wordpress.com/freecad-ship-en/ The blog of Jose Luis Cercós Pita] : a module in development for ship design (since 0.13, it included in official FreeCAD sources).
*[http://github.com/maxbots/MendelMax MendelMax]: a macro suite for FreeCAD to generate a MendelMax machine.
*[http://www.openplm.org/ OpenPLM]: an online PLM platform with FreeCAD support.
*[[Macros recipes]]: additional tools for your FreeCAD installation.
*[[Drawing templates]]: additional SVG templates for the Drawing module.
*[http://github.com/yorikvanhavre/tumbler-fcstd-thumbnailer Tumbler thumbnailer]: show .FcStd files as thumbnails in Thunar and Marlin file managers.
*[http://github.com/yorikvanhavre/kde-fcstd-thumbnailer KDE thumbnailer]: show .FcStd files as thumbnails in KDE Dolphin file manager.

&lt;!--T:40--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft API</title>
    <ns>0</ns>
    <id>693</id>
    <revision>
      <id>133199</id>
      <parentid>129099</parentid>
      <timestamp>2014-12-23T20:56:17Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>81aoi0nwxjoibws8445qd5ncqyf7zk5</sha1>
      <text xml:space="preserve" bytes="6438">
&lt;!--T:1--&gt;
These functions are part of the Draft module and can be used in scripts and macros or from the python interpreter, once the Draft module has been imported.

&lt;!--T:2--&gt;
Example:

{{Code|code=
import FreeCAD
from Draft import *
myrect = makeRectangle(4,3)
mydistance = FreeCAD.Vector(2,2,0)
move(myrect,mydistance)
}}



&lt;!--T:3--&gt;
{{APIFunction|cut|FreeCAD.Object, FreeCAD.Object|Returns a cut object made from the difference of the 2 given objects. The original objects get hidden.|The newly created object}}
{{APIFunction|extrude|FreeCAD.Object, Vector|Extrudes the given object in the direction given by the vector. The original object gets hidden.|The newly created object}}
{{APIFunction|formatObject|FreeCAD.Object, [FreeCAD.Object]|This function applies to the given target object the current properties set on the Draft toolbar (line color and line width), or copies the properties of a second object if provided. It also places the object in construction group if the construction button is pressed.|Nothing}}
{{APIFunction|fuse|FreeCAD.Object, FreeCAD.Object|Returns an object made from the union of the 2 given objects. If the objects are coplanar, a special Draft Wire is used, otherwise the final object is a standard Part fuse.|The newly created object}}
{{APIFunction|getDraftPath|[string]|Returns the user or system path where the Draft module is running from. If a subpath or a filename is supplied, the full path to the subpath inside the Draft module is returned.|A file path}}
{{APIFunction|getGroupContents|list|Scans recursively the given list for groups. If groups are encountered, their contents are appended to the list.|A list of FreeCAD Objects}}
{{APIFunction|getRealName|string|Strips the trailing numbers from an object name.|The stripped object name}}
{{APIFunction|getSelection| |Returns the current FreeCAD selection.|The current FreeCAD selection.}}
{{APIFunction|makeCircle|radius, [placement], [facemode], [startangle], [endangle]|Creates a circle object with given radius. If a placement is given, it is used. If facemode is False, the circle is shown as a wireframe, otherwise as a face. If startangle AND endangle are given (in degrees), they are used and the object appears as an arc.|The newly created object.}}
{{APIFunction|makeDimension|Vector, Vector, [Vector] or FreeCAD.Object, int, int, [Vector]|Creates a Dimension object measuring distance between first and second vectors, with the dimension line passign through the third vector if provided. The current line width and color from the Draft toolbar will be used. Instead of 2 vectors, you can also pass a FreeCAD object, and two integers (and optionally a vector where the dimension line must pass). In that case, the dimension will be associated with the object, and measure two of its vertices, indicated by the two given indice numbers.|The newly created object.}}
{{APIFunction|makeLine|Vector, Vector|Creates a line between the two given vectors. The current line width and color from the Draft toolbar will be used.|The newly created object.}}
{{APIFunction|makeRectangle|length, width, [placement], [facemode]|Creates a Rectangle object with length in X direction and height in Y direction. If a placement is given, it is used. If facemode is False, the rectangle is shown as a wireframe, otherwise as a face. The current line width and color from the Draft toolbar will be used.|The newly created object.}}
{{APIFunction|makeText|string or list, [Vector], [screenmode]|Creates a Text object, at the given point if a vector is provided, containing the string or the strings given in the list, one string by line. The current color from the Draft toolbar and the text height and font specified in preferences are used. If screenmode is True, the text always faces the view direction, otherwise it lies on the XY plane.|The newly created object.}}
{{APIFunction|makeWire|list or Part.Wire, [closed], [placement], [facemode]|Creates a DWire object from the given list of vectors or from the given Wire. If closed is True or if first and last points are identical, the wire is closed. If facemode is True (and wire is closed), the wire will appear filled. The current line width and color from the Draft toolbar will be used.|A new Draft DWire (not a Part Wire).}}
{{APIFunction|move|FreeCAD.Object or list, Vector, [copymode]|Moves the given object or the objects contained in the given list in the direction and distance indicated by the given vector. If copymode is True, the actual objects are not moved, but copies are created instead.|The object(s) (or their copies if copymode was True).}}
{{APIFunction|precision| |Returns the precision value from Draft user settings.|An integer.}}
{{APIFunction|rotate|FreeCAD.Object or list, angle, [center], [axis] ,[copymode]|Rotates the given object or the objects contained in the given list with the given angle around the given center if provided, using axis as a rotation axis. If axis is omitted, the rotation will be around the vertical Z axis. If copymode is True, the actual objects are not moved, but copies are created instead.|The objects (or their copies).}}
{{APIFunction|scale|FreeCAD.Object or list, vector, [center], [copymode]|Scales the given object or the objects contained in the given list with a scale factors defined by the given vector (in X, Y and Z directions) around the given center if provided. If copymode is True, the actual objects are not moved, but copies are created instead.|The objects (or their copies).}}
{{APIFunction|select|FreeCAD.Object|Deselects everything and selects only the passed object|Nothing.}}
{{APIFunction|shapify|FreeCAD.Object|Transforms a parametric shape object into non-parametric.|The new object.}}
{{APIFunction|draftify|FreeCAD.Object or list|Turns the given object or each object of the given list into Draft parametric wires.|Nothing.}}
{{APIFunction|getSVG|FreeCAD.Object, [linemodifier], [textmodifier], [(u,v)]|Creates a SVG representation of the given object. The linemodifier attribute is a scale factor (in percents) for line width, and textmodifier for text size. You can also optionally provide a tuple of vectors to define a projection plane, otherwise the geometry will be projected on the XY plane.|a string containing a SVG representation of the given object.}}


&lt;!--T:4--&gt;
[[Category:API]]
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft AddPoint</title>
    <ns>0</ns>
    <id>2767</id>
    <revision>
      <id>70717</id>
      <parentid>67932</parentid>
      <timestamp>2014-02-21T19:55:23Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>392yr742yhuj1vazndfx75fikhma6lv</sha1>
      <text xml:space="preserve" bytes="1071">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft AddPoint|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Add Point}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tools allows you to add additional points to [[Draft Wire|Wires]] and [[Draft BSpline|BSplines]].

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a [[Draft Wire|wire]] or a [[Draft BSpline|BSpline]]
# Press the {{KEY|[[Image:Draft AddPoint.png|16px]] [[Draft AddPoint]]}} button
# Click a point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* This functionality is also available inside the [[Image:Draft Edit.png|12px]] [[Draft Edit]] tool

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
Not available, but adding additional points to [[Draft Wire|Wires]] and [[Draft BSpline|BSplines]] is easy, for example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 points = FreeCAD.ActiveDocument.ActiveObject.Points
 points.append(FreeCAD.Vector(2,2,0))
 FreeCAD.ActiveDocument.ActiveObjects.Points = points
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft AddToGroup</title>
    <ns>0</ns>
    <id>2916</id>
    <revision>
      <id>70868</id>
      <parentid>68808</parentid>
      <timestamp>2014-02-21T21:30:03Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>axf5uochv77bddqihtrlqycjt35k3vu</sha1>
      <text xml:space="preserve" bytes="510">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft AddToGroup|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Add to group}}

==Description== &lt;!--T:2--&gt;
This tool displays a quick menu that allows you to add the selected objects to an existing group, or remove them from their current group

==How to use== &lt;!--T:3--&gt;
# Select object(s)
# Press the {{KEY|[[Image:Draft_AddToGroup.png|16px]] [[Draft AddToGroup|Add to group]]}} button


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Angle</title>
    <ns>0</ns>
    <id>37760</id>
    <revision>
      <id>105955</id>
      <parentid>105954</parentid>
      <timestamp>2014-08-23T11:50:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7toj09tq72ywpjh3634ckku1bmrpirz</sha1>
      <text xml:space="preserve" bytes="336">
&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Angle|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Angle|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Apply</title>
    <ns>0</ns>
    <id>366</id>
    <revision>
      <id>70865</id>
      <parentid>68725</parentid>
      <timestamp>2014-02-21T21:28:47Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>prdrlc120gwtjp5thjiwmrhs3lqu22d</sha1>
      <text xml:space="preserve" bytes="771">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Apply|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Apply style}}

==Description== &lt;!--T:2--&gt;
This tool applies the current Draft color and linestyle to the selected objects. 

==How to use== &lt;!--T:3--&gt;
# With the [[Draft Module|Draft]] or [[Arch Module|Arch]] workbench active, set the desired color and linewidth on the Tasks panel (or on the Draft toolbar if you are using the toolbar mode).
# Select one or several objects
# Press the {{KEY|[[Image:Draft_Apply.png|16px]] [[Draft Apply|Apply style]]}} button

==Options== &lt;!--T:4--&gt;
* If you just change the current Draft color or linewidth, the new setting will be applied to any selected object.


</text>
    </revision>
  </page>
  <page>
    <title>Draft Arc</title>
    <ns>0</ns>
    <id>28</id>
    <revision>
      <id>92444</id>
      <parentid>89000</parentid>
      <timestamp>2014-06-18T20:30:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>nbjge3603o6vi25knu0cbdds7itdqw0</sha1>
      <text xml:space="preserve" bytes="3661">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Arc|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Arc|Shortcut=A R|SeeAlso=[[Draft Circle|Draft Circle]]}}

==Description== &lt;!--T:2--&gt;
The Arc tool creates an arc in the current [[Draft SelectPlane|work plane]] by entering four points, the center, the radius, the first point and the last point, or by picking tangents, or any combination of those. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. This tool works the same way as the [[Draft Circle]] tool, but adds start and end angles.

&lt;!--T:3--&gt;
[[Image:Draft_Arc_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Arc.png|16px]] [[Draft Arc]]}} button, or press {{KEY|A}} then {{KEY|R}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or enter a radius value
# Click a third point in the 3D view, or enter a start angle
# Click a fourth point in the 3D View, or enter an end ange

==Options== &lt;!--T:5--&gt;
* The primary use of the arc tool is by picking four points: the centre, a point on the circumference, defining the radius, a third point defining the start of the arc, and a fourth one defining its end.
* By pressing {{KEY|ALT}}, you can select a tangent instead of picking point, to define the base circle of the arc. You can therefore construct several types of circles by selecting one, two or three tangents.
* The direction of the arc depends on the movement you are doing with your mouse. If you start to move clockwise after the third point is entered, your arc will go clockwise. To go counter-clockwise, simply move your mouse back over the third point, until the arc starts drawing in the other direction.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Arc tool will restart after you give the fourth point, allowing you to draw another arc without pressing the Arc button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your point horizontally or vertically in relation to the center.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.
* The arc can be turned into a circle after creation, by setting a same value to its first angle and last angle properties.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Radius}}: The radius of the arc
* {{PropertyData|First Angle}}: The angle of the first point of the arc
* {{PropertyData|Last Angle}}: The angle of the last point of the arc

==Scripting== &lt;!--T:7--&gt;
The Circle tool can also be used to create arcs in [[macros]] and from the python console by using the following function, giving it additional arguments:

&lt;syntaxhighlight&gt;
 makeCircle (radius, [placement], [facemode], [startangle], [endangle])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a circle object with given radius.  
* If a placement is given, it is used. If facemode is False, the circle is shown as a wireframe, otherwise as a face.
* If startangle AND endangle are given (in degrees), they are used and the object appears as an arc. 
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 myArc = Draft.makeCircle(2,startangle=0,endangle=90)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Array</title>
    <ns>0</ns>
    <id>2778</id>
    <revision>
      <id>71124</id>
      <parentid>70738</parentid>
      <timestamp>2014-02-23T13:00:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>25ckff93je3y0blxhvi1naw8bt2mc2e</sha1>
      <text xml:space="preserve" bytes="3590">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Array|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Array|SeeAlso=[[Draft PathArray|PathArray]]}}

==Description== &lt;!--T:2--&gt;
The Array tool creates an orthogonal (3-axes) or polar array from a selected object. If no object is selected, you will be invited to select one.

&lt;!--T:3--&gt;
[[Image:Draft_Array_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Select an object you wish to make an array with
# Press the {{KEY|[[Image:Draft Array.png|16px]] [[Draft Array]]}} button

==Options== &lt;!--T:5--&gt;
* The array starts as orthogonal by default, you can then change its mode in the properties.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Array Type}}: Specifies the type of the array, ortho or polar

&lt;!--T:7--&gt;
For orthogonal arrays:
* {{PropertyData|Interval X}}: The interval between each copy on the first axis
* {{PropertyData|Interval Y}}: The interval between each copy on the second axis
* {{PropertyData|Interval Z}}: The interval between each copy on the third axis
* {{PropertyData|Number X}}: The number of copies on the first axis
* {{PropertyData|Number Y}}: The number of copies on the second axis
* {{PropertyData|Number Z}}: The number of copies on the third axis

&lt;!--T:8--&gt;
For polar arrays:
* {{PropertyData|Axis}}: The normal direction of the array circle
* {{PropertyData|Center}}: The center point of the array
* {{PropertyData|Angle}}: The angle to cover with copies
* {{PropertyData|Number Polar}}: The number of copies

==Scripting== &lt;!--T:9--&gt;
The Array tool can by used in [[macros]] and from the python console by using one of the following functions, depending if you wish to obtain simple, standalone copies of your base object, or a parametric array object, that stays linked to the original object.

=== Simple array === &lt;!--T:10--&gt;
For rectangular array:

&lt;syntaxhighlight&gt;
 array (objectslist,xvector,yvector,xnum,ynum,[zvector,znum])
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
For polar array:

&lt;syntaxhighlight&gt;
 array (objectslist,center,totalangle,totalnum) 
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
* Creates an array of the objects contained in list (that can be an object or a list of objects) with, in case of rectangular array, xnum of iterations in the x direction at xvector distance between iterations, and same for y direction with yvector and ynum. In case of polar array, center is a vector, totalangle is the angle to cover (in degrees) and  totalnum is the number of objects, including the original. 
* This function produces standalone copies of the base object(s)

=== Parametric array === &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
For rectangular array:

&lt;syntaxhighlight&gt;
 makeArray (object,xvector,yvector,xnum,ynum)
&lt;/syntaxhighlight&gt;

&lt;!--T:15--&gt;
For polar array:

&lt;syntaxhighlight&gt;
 makeArray (object,center,totalangle,totalnum)
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
* Creates an array of the given object with, in case of rectangular array, xnum of iterations in the x direction at xvector distance between iterations, and same for y direction with yvector and ynum. In case of polar array, center is a vector, totalangle is the angle to cover (in degrees) and totalnum is the number of objects, including the original. 
* The result of this function is a parametric Draft Array object.

&lt;!--T:17--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.array(FreeCAD.ActiveDocument.ActiveObject,FreeCAD.Vector(2,0,0),FreeCAD.Vector(0,2,0),2,2)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft BSpline</title>
    <ns>0</ns>
    <id>1037</id>
    <revision>
      <id>94859</id>
      <parentid>89109</parentid>
      <timestamp>2014-07-08T14:11:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>kngyyex52jirix09jkrw30x3qcbfk2m</sha1>
      <text xml:space="preserve" bytes="4449">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft BSpline|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; BSpline|Shortcut=B S|SeeAlso=[[Draft Wire|Draft Wire]]}}

==Description== &lt;!--T:2--&gt;
The BSpline tool creates a [http://en.wikipedia.org/wiki/B-spline B-Spline curve] from several points in the current [[Draft SelectPlane|work plane]]. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. The BSpline tool behaves exactly like the [[Draft Wire]] tool.

&lt;!--T:3--&gt;
[[Image:Draft_bspline_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft BSpline.png|16px]] [[Draft BSpline]]}} button, or press {{KEY|B}} then {{KEY|S}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click additional point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Press {{KEY|F}} or {{KEY|C}}, or double-click the last point, or click on the first point to finish or close the spline. If the spline is closed, it will also be a face, even if it appears as wireframe.

==Options== &lt;!--T:5--&gt;
* Press {{KEY|F}} or the {{KEY|[[Image:Draft FinishLine.png|12px]] '''[[Draft_FinishLine|Finish]]'''}} button to finish the spline, leaving it open
* Press {{KEY|C}} or the {{KEY|[[Image:Draft CloseLine.png|12px]] '''[[Draft_CloseLine|Close]]'''}} button or click on the first point to finish the spline, but making it closed by adding a last segment between the last point and the first one.
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the BSpline tool will restart after you finish or close it, allowing you to draw another one without pressing the BSpline button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|W}} or press the {{KEY|[[Image:Draft Wipe.png|12px]] '''Wipe'''}} button to remove the existing segments and start the spline from the last point.
* Press {{KEY|CTRL}}+{{KEY|Z}} or press the {{KEY|[[Image:Draft UndoLine.png|12px]] '''[[Draft_UndoLine|Undo]]'''}} button to undo the last point.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the spline to appear as a face after it has been closed. This simply sets the View-&gt;Property of the Wire to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current BSpline command.
* BSplines, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property below.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Closed}}: Specifies if the spline is closed or not
* {{PropertyView|End Arrow}}: Shows an arrow symbol at the last point of the spline, so it can be used as an annotation leader line
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the wire with
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

==Scripting== &lt;!--T:7--&gt;
The BSpline tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makeBSpline (pointslist,[closed],[placement])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a B-Spline object from the given list of vectors. 
* If closed is True or first and last points are identical, the wire is closed. 
* If face is true (and the bspline is closed), the bspline will appear filled. 
* Instead of a list of points, you can also pass a Part Wire. 
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 p1 = FreeCAD.Vector(0,0,0)
 p2 = FreeCAD.Vector(1,1,0)
 p3 = FreeCAD.Vector(2,0,0)
 Draft.makeBSpline([p1,p2,p3],closed=True)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft BezCurve</title>
    <ns>0</ns>
    <id>21463</id>
    <revision>
      <id>89100</id>
      <parentid>71983</parentid>
      <timestamp>2014-05-31T17:20:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>qdv1hcqsubmnq5s091eb527qnstgid5</sha1>
      <text xml:space="preserve" bytes="4686">
&lt;!--T:14--&gt;
{{GuiCommand|Name=Draft BezCurve|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; BezCurve|Shortcut=B Z}}

==Description== &lt;!--T:1--&gt; 


&lt;!--T:2--&gt;
The BezCurve tool creates a [http://en.wikipedia.org/wiki/Bezier_curve Bezier Curve] (or a piecewise Bezier Curve)  from several points in the current [[Draft SelectPlane|work plane]]. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. 

&lt;!--T:12--&gt;
The object is created as a single Bezier Curve of degree (number_of_points - 1).  This can be changed to a piecewise Bezier Curve of a specified degree after creation using the [[Property|properties editor]].  Bezier Curves can be edited using {{KEY|[[Image:Draft Edit.png|16px]] [[Draft Edit]]}}. 

[[Image:Draft_BezCurve_Example.png|400px]]
==How to use== &lt;!--T:3--&gt;

# Press the {{KEY|[[Image:Draft_BezCurve.png|16px]] [[Draft BezCurve]]}} button, or press {{KEY|B}} then {{KEY|Z}} keys.
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click additional point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Press {{KEY|F}} or {{KEY|C}}, or double-click the last point, or click on the first point to finish and close the curve.
==Options== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* Press {{KEY|F}} or the {{KEY|[[Image:Draft FinishLine.png|12px]] '''[[Draft_FinishLine|Finish]]'''}} button to finish the spline, leaving it open
* Press {{KEY|C}} or the {{KEY|[[Image:Draft CloseLine.png|12px]] '''[[Draft_CloseLine|Close]]'''}} button or click on the first point to finish the spline, but making it closed by adding a last segment between the last point and the first one.
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the BezCurve tool will restart after you finish or close it, allowing you to draw another one without pressing the BezCurve button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|W}} or press the {{KEY|[[Image:Draft Wipe.png|12px]] '''Wipe'''}} button to remove the existing segments and start the spline from the last point.
* Press {{KEY|CTRL}}+{{KEY|Z}} or press the {{KEY|[[Image:Draft UndoLine.png|12px]] '''[[Draft_UndoLine|Undo]]'''}} button to undo the last point.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current BezCurve command.

==Properties== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* {{PropertyData|Closed}}: Specifies if the Bezier Curve is closed or not
* {{PropertyData|Degree}}: Specifies the degree of the Bezier Curve (or segments)

==Scripting== &lt;!--T:8--&gt;


&lt;!--T:9--&gt;
The BezCurve tool can by used in [[macros]] and from the python console by using the following function:

{{Code|code=
makeBezCurve(pointslist,[closed],[placement],[support],[degree])
}}

&lt;!--T:10--&gt;
* Create a Bezier Curve object from the given list of vectors.  Instead of a pointslist, you can also pass a Part Wire.


Example: 
{{Code|code=
 import FreeCAD,Draft
myFeature = Draft.makeBezCurve(Draft.makeBezCurve(points,False) 
}}

==Contraining Nodes== &lt;!--T:13--&gt;
The segment endpoints in a piecewise Bezier Curve can be constrained such that adjacent control points are tangent or symmetric to the segments at the endpoint.  This is done after object creation using {{KEY|[[Image:Draft Edit.png|16px]] [[Draft Edit]]}}.
* [[Image:Draft_BezSharpNode.svg|32px]]  '''Sharp''' - remove constraints
* [[Image:Draft_BezTanNode.svg|32px]]  '''Tangent''' - force adjacent control points to be tangent
* [[Image:Draft_BezSymNode.svg|32px]] '''Symmetric''' - force adjacent control points to be tangent and equi-distant

==Limitations== &lt;!--T:11--&gt;
* This tool is not available before FreeCAD version 0.14
* The Points Property does not yet appear in the properties list.
* OpenCascade does not support Bezier Curve with degree &gt; 25. This should not be a problem in practice. 

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Center</title>
    <ns>0</ns>
    <id>37773</id>
    <revision>
      <id>105807</id>
      <parentid>105806</parentid>
      <timestamp>2014-08-22T20:33:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tegwloodtkn5lajmwn31myp1o64pfhq</sha1>
      <text xml:space="preserve" bytes="337">
&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Center|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Center|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Circle</title>
    <ns>0</ns>
    <id>29</id>
    <revision>
      <id>116066</id>
      <parentid>116065</parentid>
      <timestamp>2014-10-24T20:55:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>r0weah0v3wjbqtcn6cv2y2z29arxlso</sha1>
      <text xml:space="preserve" bytes="3509">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Circle|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Circle|Shortcut=C I|SeeAlso=[[Draft Arc|Draft Arc]]}}

==Description== &lt;!--T:2--&gt;
The Circle tool creates a circle in the current [[Draft SelectPlane|work plane]] by entering two points, the center and the radius, or by picking tangents, or any combination of those. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. This tool works the same way as the [[Draft Arc]] tool, except that it stops after entering the radius.

&lt;!--T:3--&gt;
[[Image:Draft_Circle_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Circle.png|16px]] [[Draft Circle|Draft Circle]]}} button, or press {{KEY|C}} then {{KEY|I}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or enter a radius value.

==Options== &lt;!--T:5--&gt;
* The primary use of the circle tool is by picking two points, the centre and a point on the circumference, defining the radius.
* By pressing {{KEY|ALT}}, you can select a tangent instead of picking a point. You can therefore construct several types of circles by selecting one, two or three tangents.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Circle tool will restart after you give the second point, allowing you to draw another circle without pressing the Circle button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your second point horizontally or vertically in relation to the first one.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the circle to appear as a face after it has been closed. This simply sets the View-&gt;Property of the Circle to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.
* The circle can be turned into an arc after creation, by setting its first angle and last angle properties to different values.
* Circles, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property below. 

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Radius}}: The radius of the circle
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the wire with
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

&lt;!--T:10--&gt;
See also [[Draft Pattern|Draft Pattern]] page.

==Scripting== &lt;!--T:7--&gt;
The Circle tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeCircle (radius, [placement], [facemode], [startangle], [endangle])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a circle object with given radius.
* If a placement is given, it is used. 
* If facemode is False, the circle is shown as a wireframe, otherwise as a face.
* If startangle AND endangle are given (in degrees), they are used and the object appears as an arc. 
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 myCircle = Draft.makeCircle(2)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Clone</title>
    <ns>0</ns>
    <id>2780</id>
    <revision>
      <id>96120</id>
      <parentid>68620</parentid>
      <timestamp>2014-07-20T19:38:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>781qrlq1i510xlnl0xklwdifupodlqz</sha1>
      <text xml:space="preserve" bytes="1395">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Clone|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Clone|SeeAlso=[[Draft Scale|Draft Scale]]}}

==Description== &lt;!--T:2--&gt;
This tool produces a clone (a copy that is parametrically bound to the original object) of a selected object. If the original object changes, the clone changes too, but keeps its position, rotation and scale.

&lt;!--T:3--&gt;
[[Image:Draft_Clone_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Select objects you wish to clone
# Press the {{KEY|[[Image:Draft Clone.png|16px]] [[Draft Clone]]}} button

==Properties== &lt;!--T:5--&gt;
* {{PropertyData|Scale}}: Specifies an optional scale factor for the clone
* The result of the [[Draft Scale]] tool is also a clone

==Scripting== &lt;!--T:6--&gt;
The Clone tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 clone (obj,[delta])
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
* Makes a clone of the given object(s). 
* The clone is an exact, linked copy of the given object.
* If the original object changes, the final object changes too. Optionally, you can give a delta Vector to move the clone away from the original position.

&lt;!--T:8--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 Draft.clone(FreeCAD.ActiveDocument.ActiveObject)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft CloseLine</title>
    <ns>0</ns>
    <id>2808</id>
    <revision>
      <id>70851</id>
      <parentid>68364</parentid>
      <timestamp>2014-02-21T21:19:56Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>kyqahsji9d5kiqvw6i21ejm4lu6s246</sha1>
      <text xml:space="preserve" bytes="718">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft CloseLine|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Close Line|Shortcut=C|SeeAlso=[[Draft FinishLine|FinishLine]], [[Draft UndoLine|UndoLine]]}}

==Description== &lt;!--T:2--&gt;
This command finishes the drawing of a current wire, and closes it by drawing a closing segment between the last point and the first one. Closed wires are always also filled faces internally, even if they appear as wireframe.

==How to use== &lt;!--T:3--&gt;
# Start drawing a [[Draft Wire]]
# Press the {{KEY|[[Image:Draft CloseLine.png|16px]] [[Draft CloseLine|Close]]}} button or press the {{KEY|C}} key

&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Draft Constrain</title>
    <ns>0</ns>
    <id>30</id>
    <revision>
      <id>69277</id>
      <parentid>69276</parentid>
      <timestamp>2014-02-18T17:29:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5ls5edx323p5qxwl3z1obuyeiocl9e8</sha1>
      <text xml:space="preserve" bytes="974">
&lt;!--T:1--&gt;
To use constraining, press {{KEY|SHIFT}} while drawing.

&lt;!--T:2--&gt;
[[Image:Draft_Constrain_example.jpg]]

&lt;!--T:3--&gt;
In all tools that support constraining, you can force the next point to be constrained horizontally or vertically in relation to the last point entered. The vertical or horizontal constraining depends on where your mouse lies when you press {{KEY|SHIFT}}. If you are more north or south from the last point, it will be vertical. If you are more east or west, it will be horizontal. To change, just release {{KEY|SHIFT}} and press again at another location.

&lt;!--T:4--&gt;
Some tools, like [[Draft_Offset|offset]] and [[Draft_Trimex|trimex]] use constraining differently. They do not constrain vertically or horizontally but use a different way more adapted to the particular tool, like for example constraining the operation to a certain polyline segment.

&lt;!--T:5--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ConstructionMode</title>
    <ns>0</ns>
    <id>600</id>
    <redirect title="Draft ToggleConstructionMode" />
    <revision>
      <id>88964</id>
      <parentid>12322</parentid>
      <timestamp>2014-05-31T10:29:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>4r73k2hs7xpc0t0uq69bn6f7ztml1ye</sha1>
      <text xml:space="preserve" bytes="94">#REDIRECT [[Draft ToggleConstructionMode]]
&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft Coordinates</title>
    <ns>0</ns>
    <id>376</id>
    <revision>
      <id>69348</id>
      <parentid>69347</parentid>
      <timestamp>2014-02-18T17:46:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a1431gofblxlx4iftnzit7wi4brixnn</sha1>
      <text xml:space="preserve" bytes="3037">
&lt;!--T:1--&gt;
In all Draft tools, when you are asked for 3d point locations, distances, radiuses, angles or any other numeric data, you can always choose to enter those values graphically, by picking on the screen with your mouse, or directly by entering numbers with the keyboard. The first method is usually more intuitive, but when you work with absolute precision, you often need to enter a precise number and be sure the coordinate you entered is exact. Therefore, the command bar of the Draft module can always accept number input:

&lt;!--T:2--&gt;
[[Image:Draft_Coordinates.jpg]]

&lt;!--T:3--&gt;
The Draft command bar is an &quot;intelligent&quot; toolbar, which means its contents change according to the tool being used and the input required from the user. When you draw a circle, for example, the command bar will successively ask you for the circle center, then the radius. Those two values can both be indicated by picking a point on the screen or by entering numbers.

&lt;!--T:4--&gt;
Whenever you see the number input fields appearing on the command bar, you can enter numbers in them You will see that those numbers also reflect the movements of your mouse cursor. You can {{KEY|TAB}} through the X,Y and Z fields to set the coordinates. Pressing {{KEY|ENTER}} in the Z field will record the point. Repeating the entry of new X, Y and Z coordinates will set the second point for a line and/or  subsequent points for a wire.

&lt;!--T:5--&gt;
The following shortcuts can also be used:
* {{KEY|SPACE BAR}} to swap between absolute and relative coordinates
* {{KEY|C}} to swap between original mode and copy mode
* {{KEY|L}} to lock/unlock the Z coordinate
* {{KEY|TAB}} or {{KEY|ENTER}} switches to the next field (for ex. from X to Y or from Y to Z)

&lt;!--T:6--&gt;
Sometimes, it can be hard to align objects when working in 3D space. You can lock the Z coordinate, so you'll be certain that everything you draw will lie in the same horizontal plane. When you open FreeCAD, the Z coordinate is locked by default at 0.00, but you can easily change it, just unlock, change the Z value, and lock again. If Z coordinate is locked, you won't be able to draw in non-horizontal planes.

&lt;!--T:7--&gt;
Most of the Draft commands now work in 3D, just unlock the Z coordinate and switch the view to the appropriate angle, and what you'll draw next will be aligned to that view.

&lt;!--T:8--&gt;
Impose a decimal

&lt;!--T:9--&gt;
By default, FreeCAD works with two decimal places, to change the number of decimal places, you must:
* add a new integer element '''Decimals''' in the menu '''Tools → Edit parameters... → BaseApp → Preferences → Units'''
* make right click in the window and select '''New integer item''' → create name  '''Decimals'''  and enter the number of decimal places you want.
* then click {{KEY|Save to disk}}, to validate your change.
* close and return to FreeCAD to activate your changes.


&lt;!--T:10--&gt;
[[Image:PreferencesDecimals_01_en.png|480px|left]]


&lt;!--T:11--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft DAT</title>
    <ns>0</ns>
    <id>1305</id>
    <revision>
      <id>83901</id>
      <parentid>83900</parentid>
      <timestamp>2014-05-16T12:06:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dt3zxu9tzwu3u9m415fgkh5g8peique</sha1>
      <text xml:space="preserve" bytes="422">
&lt;!--T:1--&gt;
The common airfoil data format is a simple file containing the optional metadata about the airfoil in the first 1-2 lines and the coordinates of the upper and lower surface.

&lt;!--T:2--&gt;
There are many different dialects to this format so this import module tries to be as smart as possible to understand almost anyone.

&lt;!--T:3--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft DWG</title>
    <ns>0</ns>
    <id>25004</id>
    <revision>
      <id>108074</id>
      <parentid>88984</parentid>
      <timestamp>2014-09-01T19:38:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft DXF</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>133152</id>
      <parentid>133151</parentid>
      <timestamp>2014-12-23T18:32:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3pzsk15vumrk3qme2omu19vmxk3c059</sha1>
      <text xml:space="preserve" bytes="3132">
&lt;!--T:1--&gt;
[[Image:Screenshot qcad.jpg]]

===Opening=== &lt;!--T:2--&gt;
This function opens a DXF file (any version from 12 to 2007) in a new drawing.
The following DXF object types are currently supported:
* lines
* polylines and lwpolylines
* circles
* arcs
* layers (layers containing objects are conveted to FreeCAD Groups)
* texts and mtexts
* dimensions
* blocks (only geometry. texts, dims and attributes inside blocks will be skipped)
* points {{Version|0.13}}
* leaders {{Version|0.13}}
Other DXF entities are currently not imported because there is no corresponding FreeCAD object. As new functionality gets implemented, it will be possible to import more entity types.

===Importing=== &lt;!--T:3--&gt;
This works the same way as opening, but it will add the contents of the dxf file in the active documento instead of creating a new document.

&lt;!--T:7--&gt;
Tutorial: [[Dxf_Importer_Install|Dxf Importer Install]]

===Exporting=== &lt;!--T:4--&gt;
The exported DXF is compatible with Autocad version 12 and up, so it should open in about any application that supports dxf format.
Currently the following FreeCAD objects get exported:
* lines and wires (polylines)
* arcs and circles
* texts
* colors are mapped from objects RGB colors to autocad color index (ACI). Black will always be &quot;by layer&quot;
* layers are mapped from group names. When groups are nested, the deepest group gives the layer name.
* dimensions, which are exported with &quot;Standard&quot; dimstyle

===Preferences=== &lt;!--T:5--&gt;
The following parameters can be specified in the [[Draft Preferences]] tab (menu Edit -&gt; Preferences -&gt; Draft):
* Import style: This lets you choose the way objects from the dxf file will be drawn in FreeCAD. You can choose between:
** None: this is the faster way, there is no conversion, all objects will be black with 2px width (FreeCAD default)
** Use default color and linewidth: All imported dxf objects will take current linewidth/color from the draft command bar
** Original color and linewidth: Objects will keep the color and linewidth (if specified) they have in the dxf file
** Colors mapped to linewidth: If this option is selected, the mapping file option below is used.
* Color mapping file: This allows you to specify a mapping file to be used for translating dxf colors to color and linewidth, the same way as a plot style works in Autocad. The mapping file must be a tab-separated text file. There is a nice free utility called [http://www.noliturbare.com/TablePrintGUI.php Plot style viewer] that can convert Autocad CTB or STB (plot styles) files to tab-separated mapping files ready to use in FreeCAD. Alternatively, we have a couple of [[Draft_mapping_files|home-made mapping files]] availables here.
* Import texts: This allows you to specify if you want to import dxf texts and dimensions or not. Many texts might make your work in FreeCAD very heavy, so you might want to use this option some time.
* Import layout objects: Turn this on if you want to import paper space object. They will be merged in the same document than model space objects.

&lt;!--T:6--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Draft DelPoint</title>
    <ns>0</ns>
    <id>2768</id>
    <revision>
      <id>70716</id>
      <parentid>68004</parentid>
      <timestamp>2014-02-21T19:54:59Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>nmjqo5dcsq94pu8v3o1yvb27ls6tm8u</sha1>
      <text xml:space="preserve" bytes="1035">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft DelPoint|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Remove Point}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tools allows you to remove points from [[Draft Wire|Wires]] and [[Draft BSpline|BSplines]].

==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a [[Draft Wire|wire]] or a [[Draft BSpline|BSpline]]
# Press the {{KEY|[[Image:Draft DelPoint.png|16px]] [[Draft DelPoint]]}} button
# Click a point on the [[Draft Wire|wire]] or [[Draft BSpline|BSpline]]

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* This functionality is also available inside the [[Image:Draft Edit.png|12px]] [[Draft Edit]] tool

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
Not available, but removing points from [[Draft Wire|Wires]] and [[Draft BSpline|BSplines]] is easy, for example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 points = FreeCAD.ActiveDocument.ActiveObject.Points
 points.pop(0)
 FreeCAD.ActiveDocument.ActiveObjects.Points = points
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Dimension</title>
    <ns>0</ns>
    <id>434</id>
    <revision>
      <id>111263</id>
      <parentid>70913</parentid>
      <timestamp>2014-09-24T16:05:10Z</timestamp>
      <contributor>
        <username>Jmaustpc</username>
        <id>1193</id>
      </contributor>
      <sha1>2k257ycekfo3vuw6u95i8c4ykb2thco</sha1>
      <text xml:space="preserve" bytes="5951">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Dimension|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Dimension|Shortcut=D I|SeeAlso=[[Draft FlipDimension|FlipDimension]]}}

==Description== &lt;!--T:2--&gt;
The dimension tool creates a dimension in the current document with two points defining the distance to measure, and a third point specifying where the dimension line passes.

&lt;!--T:3--&gt;
[[Image:Screenshot_Draft_Dimension.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Dimension.png|16px]] [[Draft Dimension]]}} button, or press {{KEY|D}} then {{KEY|I}} keys
# Click a point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a third on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Available dimension types== &lt;!--T:5--&gt;
* '''Linear dimensions''': by picking any 2 points or any straight edge with {{KEY|ALT}} pressed.
* '''Horizontal/vertical dimensions''': by pressing {{KEY|SHIFT}} after the first point is selected.
* '''Diameter dimensions''': by picking a curved edge with {{KEY|ALT}} pressed.
* '''Radius dimensions''': by picking a curved edge with {{KEY|ALT}} pressed, then pressing {{KEY|SHIFT}}.
* '''Angular dimensions''': by picking 2 straight edges with {{KEY|ALT}} pressed.

==Options== &lt;!--T:6--&gt;
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Pressing {{KEY|SHIFT}} will [[Draft_Constrain|constrain]] the dimension horizontally or vertically, or, when working on a circular edge, switches between diameter and radius modes.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, you will be able to draw continued dimensions, one after the other, that share the same baseline.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.
* By picking an existing edge with {{KEY|ALT}}, instead of entering measurement points, the dimension will become '''parametric''' and remember which edge it is bound to. If the endpoints of that edge move later on, the dimension will follow them.
* The direction of the dimension can be changed afterwards, by modifying its &quot;Direction&quot; property

==Properties== &lt;!--T:7--&gt;
* {{PropertyData|Start}}: The start point of the distance to measure
* {{PropertyData|End}}: The end point of the distance to measure
* {{PropertyData|Dimline}}: A point through which the dimension line must pass
* {{PropertyView|Display Mode}}: Specifies if the text is aligned to the dimension lines or always faces the camera
* {{PropertyView|Font Size}}: The size of the letters
* {{PropertyView|Ext Lines}}: The size of the extension lines (between the measurement points and the dimension line)
* {{PropertyView|Text Position}}: Can be used to force the text to be displayed at a certain position
* {{PropertyView|Text Spacing}}: Specifies the space between the text and the dimension line
* {{PropertyView|Override}}: Specifies a text to display instead of the measurement. Insert &quot;$dim&quot;, inside that text, to display the measurement value
* {{PropertyView|Font Name}}: The font to use to draw the text. It can be a font name, such as &quot;Arial&quot;, a default style such as &quot;sans&quot;, &quot;serif&quot; or &quot;mono&quot;, or a family such as &quot;Arial,Helvetica,sans&quot; or a name with a style such as &quot;Arial:Bold&quot;. If the given font is not found on the system, a generic one is used instead.
* {{PropertyView|Arrow Type}}: The type of arrow to use
* {{PropertyView|Arrow Size}}: The size of the arrows
* {{PropertyView|Decimals}}: The number of decimal places to display on the dimension
* {{PropertyView|Flip Arrows}}: Reverse the orientation of arrows

==Scripting== &lt;!--T:8--&gt;
The Dimension tool can by used in [[macros]] and from the python console by using the following functions:

&lt;syntaxhighlight&gt;
 makeDimension (p1,p2,[p3]) 
&lt;/syntaxhighlight&gt;
or
&lt;syntaxhighlight&gt;
 makeDimension (object,i1,i2,p3)
&lt;/syntaxhighlight&gt;
or
&lt;syntaxhighlight&gt;
 makeDimension (objlist,indices,p3)
&lt;/syntaxhighlight&gt;
 
&lt;!--T:9--&gt;
* Creates a Dimension object with the dimension line passign through p3.
* The Dimension object takes the [[Draft Linestyle|Draft linewidth and color]] set in the command bar.
* There are multiple  ways to create a dimension, depending on the arguments you pass to it:
# (p1,p2,p3): creates a standard dimension from p1 to p2.
# (object,i1,i2,p3): creates a linked dimension to the given object, measuring the distance between its vertices indexed i1 and i2.
# (object,i1,mode,p3): creates a linked dimension to the given object, i1 is the index of the (curved) edge to measure, and mode is either &quot;radius&quot; or &quot;diameter&quot;. Returns the newly created object.

&lt;syntaxhighlight&gt;
 makeAngularDimension (center,[angle1,angle2],p3)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
* creates an angular Dimension from the given center, with the given list of angles, passing through p3.
* Returns the newly created object.

&lt;!--T:11--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 p1 = FreeCAD.Vector(0,0,0)
 p2 = FreeCAD.Vector(1,1,0)
 p3 = FreeCAD.Vector(2,0,0)
 Draft.makeDimension(p1,p2,p3)
&lt;/syntaxhighlight&gt;

==Links== &lt;!--T:12--&gt;
* Tutorial: [http://www.youtube.com/watch?v=nxNT0KychcY Projecting dimensions on a Drawing Page]


</text>
    </revision>
  </page>
  <page>
    <title>Draft Dimensions</title>
    <ns>0</ns>
    <id>37899</id>
    <revision>
      <id>101151</id>
      <parentid>101150</parentid>
      <timestamp>2014-08-01T08:34:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h6mkdgwh2agenrtagipm4x1xxpoup05</sha1>
      <text xml:space="preserve" bytes="346">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Dimensions|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Dimensions|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Downgrade</title>
    <ns>0</ns>
    <id>32</id>
    <revision>
      <id>115257</id>
      <parentid>92548</parentid>
      <timestamp>2014-10-16T20:20:16Z</timestamp>
      <contributor>
        <username>Ediloren</username>
        <id>3292</id>
      </contributor>
      <comment>Spelling corrections</comment>
      <sha1>rv2r5y9wadb8fdkjaozzk379kwae291</sha1>
      <text xml:space="preserve" bytes="2158">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Downgrade|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Downgrade|Shortcut=D N|SeeAlso=[[Draft Upgrade|Draft Upgrade]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool downgrades selected objects in different ways. If no object is selected, you will be invited to select one.


[[Image:Draft_Downgrade_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select one or more objects you widh to downgrade
# Press the {{KEY|[[Image:Draft Downgrade.png|16px]] [[Draft Downgrade]]}} button or press {{KEY|D}} then {{KEY|N}} keys

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The selected objects are modified/downgraded, according to the following conditions (in order):
* if only one object is selected and it contains more than one face, each face becomes a separate object
* if there are more than one face in the selection, the subsequent objects are subtracted from the first one
* if there is only one face in the selection, it gets converted into a wire
* otherwise all wires found in the selection are exploded into single edges

==Example== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;200&quot;&gt;
File:Draft Downgrade 01.png|Complete shape
File:Draft Downgrade 02.png|Downgraded shape, with disconnected and split faces
&lt;/gallery&gt;

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Downgrade tool can be used in python scripts and [[macros]] by using the following function:


&lt;syntaxhighlight&gt;
 downgrade (objects, [delete], [force])
&lt;/syntaxhighlight&gt;


&lt;!--T:12--&gt;
* Downgrades the given object(s) (can be an object or a list of objects). 
* If delete is True, old objects are deleted.
* The force attribute can be used to force a certain way of downgrading. It can be: explode, shapify, subtr, splitFaces, cut2, getWire, splitWires.
* Returns a dictionary containing two lists, a list of new objects and a list of objects to be deleted

&lt;!--T:13--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCADGui,Draft
 selection = FreeCADGui.Selection.getSelection()
 Draft.downgrade(selection)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Draft2Sketch</title>
    <ns>0</ns>
    <id>2776</id>
    <revision>
      <id>70714</id>
      <parentid>68466</parentid>
      <timestamp>2014-02-21T19:54:20Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>1e6zn1h4ypxhl8edhtj1x0qnzyxbb8c</sha1>
      <text xml:space="preserve" bytes="1313">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Draft2Sketch|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Drafting -&gt; Draft to Sketch}}

==Description== &lt;!--T:2--&gt;
This tool converts [[Draft Module|Draft objects]] to [[Sketcher Module|Sketcher objects]], and vice-versa.

&lt;!--T:3--&gt;
[[Image:Draft Draft2Sketch example.jpg||480px]]

==How to use== &lt;!--T:4--&gt;
# Select a Draft object or a Sketch
# Press the {{KEY|[[Image:Draft Draft2Sketch.png|16px]] [[Draft Draft2Sketch]]}} button

==Options== &lt;!--T:5--&gt;
* If you convert a [[Draft Wire]], point constraints will be applied to the nodes
* If you convert a [[Draft Rectangle]], point constraints will be applied to the corners, and horizontal and vertical constraints to the edges
* Non-Draft objects that are totally planar will also get converted to sketches

&lt;!--T:6--&gt;
The sketcher does support straight lines and circular arcs. The conversion of any element that can not be represented with those will fail.

&lt;!--T:7--&gt;
The conversion of any element that can not be represented with either a straight line or circular curve will just fail, i.e. the item will not appear in the sketch.

==Scripting== &lt;!--T:8--&gt;
Not available, see the [[Sketcher Module]] documentation for how to create sketches by scripting


</text>
    </revision>
  </page>
  <page>
    <title>Draft Drawing</title>
    <ns>0</ns>
    <id>668</id>
    <revision>
      <id>70720</id>
      <parentid>67489</parentid>
      <timestamp>2014-02-21T19:56:29Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>1s2kckwy7u0q89ntwlb3srllatkoi32</sha1>
      <text xml:space="preserve" bytes="2431">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Drawing|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Drafting -&gt; Drawing}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool allows you to put selected objects on a svg [[Drawing Module|Drawing sheet]]. If no [[Drawing_templates|sheet]] exists in the document, a default one will be created.


[[Image:Draft drawing example.jpg|640px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select the objects you wish to put on a drawing sheet
# Press the {{KEY|[[Image:Draft Drawing.png|16px]] [[Draft Drawing]]}} button

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* Select objects you want to put on the drawing sheet. The tool will work best with flat 2D objects from the [[Draft Module|Draft]] or [[Sketcher Workbench|Sketcher]] modules.
* If the selected object is an [[Arch SectionPlane]], this tool will create an additional view of that section plane.
* In the same selection, add the page object you want to draw your objects to. If there is no existing page, a new one will be created. If you didn't select a page but there is at least one in the document, the first found one will be used to draw to.
* If you selected an existing sheet, and the objects in the selection that are already on that sheet (for ex. for a &quot;Rectangle&quot; object there is already a &quot;ViewRectangle&quot; object on the sheet), they will be substitued. This allows you to simply select all the objects and send them to an existing page, which will simply be updated.

==Properties== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{PropertyData|Fill Style}}: For closed shapes, allows to specify one of the Default Draft fill styles, or use the shape color.
* {{PropertyData|Font Size}}: Allows you to specify the font size of texts and dimensions.
* {{PropertyData|Line Width}}: Allows you to specify the line width of viewed objects.

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Draft Drawing tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makeDrawingView (object,page)
&lt;/syntaxhighlight&gt;


&lt;!--T:12--&gt;
* Adds a view of the given object to the given page. 
* Returns the created view object.

&lt;!--T:13--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 obj = FreeCAD.ActiveDocument.ActiveObject
 page = FreeCAD.ActiveDocument.Page
 Draft.makeDrawingView(obj,page)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Edit</title>
    <ns>0</ns>
    <id>710</id>
    <revision>
      <id>70719</id>
      <parentid>67407</parentid>
      <timestamp>2014-02-21T19:56:12Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>93qw5cdkizuyl23tnwookjvzgmmgmbi</sha1>
      <text xml:space="preserve" bytes="2576">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Edit|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Edit}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool allows you to edit graphically certain properties of the selected object, such as the vertices of a Wire, or the length and width of a Rectangle, or the radius of a Circle. It does nothing more than enter the object's edit mode, so other ways to enter edit mode (such as double-clicking the object in the Tree view) give the same result.


[[Image:Draft edit example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a [[Draft Wire|wire]], [[Draft Line|line]], [[Draft Rectangle|rectangle]], [[Draft BSpline|bspline]] or [[Draft Circle|circle]]
# Press the {{KEY|[[Image:Draft Edit.png|16px]] [[Draft Edit]]}} button, or double-click the object in the Tree panel, or use the {{KEY|[[Image:Std Edit.png|16px]] [[Std Edit]]}} tool.
# Click on a point you wish to move
# Click another point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Press {{KEY|ESC}} or the {{KEY|'''Finish'''}} button

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* The Edit tool only works on one selected object at a time.
* The Edit tool only works on Draft Wires, Rectangles, Circles and Arcs. Other object types must first be converted to Draft objects.
* Click on an edit vertex to move it, click again to release it.
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button or the {{KEY|[[Image:Draft Edit.png|16px]] [[Draft Edit]]}} button again to finish editing.
* Pressing the {{KEY|[[Image:Draft AddPoint.png|12px]] [[Draft AddPoint|Add point]]}} button allows you to add points to Wires and BSplines by clicking on the segments
* Pressing the {{KEY|[[Image:Draft DelPoint.png|12px]] [[Draft DelPoint|Del point]]}} button allows you to remove points from Wires and BSplines by clicking on the points to remove

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
Not available. Each of the above object can be modified by changing its properties directly.


</text>
    </revision>
  </page>
  <page>
    <title>Draft Ellipse</title>
    <ns>0</ns>
    <id>22477</id>
    <revision>
      <id>116083</id>
      <parentid>116082</parentid>
      <timestamp>2014-10-24T20:56:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h4985rx11zbbcpkrlq6ews3yk26hp42</sha1>
      <text xml:space="preserve" bytes="3012">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Ellipse|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Ellipse|Shortcut=E L|SeeAlso=[[Draft Circle|Draft Circle]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Ellipse tool creates an ellipse in the current [[Draft SelectPlane|work plane]] by entering two points, defining the corner of a rectangular box in which the ellipse will fit. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab.

&lt;!--T:4--&gt;
[[Image:Draft_ellipse_example.jpg|400px]]

==How to use== &lt;!--T:5--&gt;
# Press the {{KEY|[[Image:Draft Ellipse.png|16px]] [[Draft Ellipse]]}} button, or press {{KEY|E}} then {{KEY|L}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Ellipse tool will restart after you give the second point, allowing you to draw another ellipse without pressing the Ellipse button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your second point horizontally or vertically in relation to the first one.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the ellipse to appear as a face after it has been closed. This simply sets the View-&gt;Property of the ellipse to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the command.
* Ellipses, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property below. 

==Properties== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{PropertyData|Major Radius}}: The major radius of the ellipse
* {{PropertyData|Minor Radius}}: The minor radius of the ellipse
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the ellipse with
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

&lt;!--T:13--&gt;
See also [[Draft Pattern|Draft Pattern]] page.

==Scripting== &lt;!--T:10--&gt;
The Ellipse tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeEllipse (majorradius, minorradius, [placement], [facemode])
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
* Creates an ellipse object with given major and minor radius.
* If a placement is given, it is used. 
* If facemode is False, the ellipse is shown as a wireframe, otherwise as a face.
* Returns the newly created object.

&lt;!--T:12--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 myEllipse = Draft.makeEllipse(4,2)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Endpoint</title>
    <ns>0</ns>
    <id>37748</id>
    <revision>
      <id>105963</id>
      <parentid>105962</parentid>
      <timestamp>2014-08-23T11:51:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>adqp7ob7ea4pv78dimol7gu8bf3s0df</sha1>
      <text xml:space="preserve" bytes="343">

&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Endpoint|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Endpoint|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Extension</title>
    <ns>0</ns>
    <id>37859</id>
    <revision>
      <id>101103</id>
      <parentid>101102</parentid>
      <timestamp>2014-08-01T08:22:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ip972xdmkakmw0vsycvrsnhzl8j2c2q</sha1>
      <text xml:space="preserve" bytes="344">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Extension|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Extension|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Facebinder</title>
    <ns>0</ns>
    <id>11047</id>
    <revision>
      <id>70725</id>
      <parentid>66169</parentid>
      <timestamp>2014-02-21T19:58:10Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>2yaot4k15ygnr5ddhe5s8wi60xja2af</sha1>
      <text xml:space="preserve" bytes="1809">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Facebinder|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → Facebinder|Shortcut=F F}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The facebinder a very simple object constructed from selected faces of other objects. It is of parametric, you can modify the original object and the facebinder object updates accordingly. It can then be used for example for making an extrusion out of a collection of faces from other objects. A typical use is in architectural design, to build an object that covers several pieces of walls. You can move and rotate the facebinder around after its creation, everything will stay linked to the original faces.


[[Image:Draft facebinder example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select faces on objects (use CTRL to select several faces)
# Press the {{KEY| [[Image:Draft_Facebinder.png|16px]] [[Draft_Facebinder|Facebinder]]}},  button, or press {{KEY|F}}, {{KEY|F}} keys

==Scripting== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The facebinder tool can be usedin scripts and [[macros]] by using the following function:

&lt;syntaxhighlight&gt;
 makeFacebinder ( selectionset )
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a facebinder object from the given selection set, which is a list of selection objects such as returned by the FreeCADGui.Selection.getSelectionEx() method.
* Only selected faces are taken into account
* Returns the newly created object

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft, FreeCADGui
 mySelection = FreeCADGui.Selection.getSelectionEx()
 Draft.makeFacebinder(mySelection)
&lt;/syntaxhighlight&gt;

==Limitations== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
*  Not available before version 0.14

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft FinishLine</title>
    <ns>0</ns>
    <id>2807</id>
    <revision>
      <id>70850</id>
      <parentid>70849</parentid>
      <timestamp>2014-02-21T21:18:52Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>a2gmau57zr559cd3hm5sjcxhxgrzygy</sha1>
      <text xml:space="preserve" bytes="566">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft FinishLine|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Finish Line|Shortcut=F|SeeAlso=[[Draft CloseLine|CloseLine]], [[Draft UndoLine|UndoLine]]}}

==Description== &lt;!--T:2--&gt;
This command finishes the drawing of a current wire, leaving it open.

==How to use== &lt;!--T:3--&gt;
# Start drawing a [[Draft Wire]]
# Press the {{KEY|[[Image:Draft FinishLine.png|16px]] [[Draft FinishLine|Finish]]}} button or press the {{KEY|F}} key

&lt;!--T:4--&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Draft FlipDimension</title>
    <ns>0</ns>
    <id>24804</id>
    <revision>
      <id>70907</id>
      <parentid>70906</parentid>
      <timestamp>2014-02-21T21:55:09Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>854q6pwu1tqanmp0079r4adsx68rkyu</sha1>
      <text xml:space="preserve" bytes="963">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft FlipDimension|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Flip Dimension|SeeAlso=[[Draft Dimension|Dimension]]}}

==Description== &lt;!--T:2--&gt;
When in 2D mode, the text of the [[Draft Dimension|Draft dimensions]] is displayed aligned to the dimension line. The Dimension tool always tries to show you the dimension text on the correct side of the dimension line, depending on where you are viewing it from. In some cases, though, the viewing direction might not reflect the intent of the viewer, and the orientation of the dimension text might be inverted. This tool inverts that orientation on selected [[Draft Dimension|dimension]] objects.

==How to use== &lt;!--T:3--&gt;
# Select one or more [[Draft Dimension|dimension]] objects
# Press the {{KEY|[[Image:Draft_FlipDimension.png|16px]] [[Draft FlipDimension|Flip Dimension]]}} button


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Heal</title>
    <ns>0</ns>
    <id>24796</id>
    <revision>
      <id>70899</id>
      <parentid>70898</parentid>
      <timestamp>2014-02-21T21:48:34Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dtaieyh6aodgan9wt8w76a2xqmmxsyi</sha1>
      <text xml:space="preserve" bytes="1133">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Heal|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Heal}}

==Description== &lt;!--T:2--&gt;
Because of the fast evolution of FreeCAD, some object definitions might change over time and between versions, causing some Draft objects found in older files to not load properly or contain errors when opened with a more recent version of FreeCAD. This command tries to fix those bad objects by recreating a new one from scratch, then copying the contents of the properties from the old one to the new one. It can be run with objects selected, in which case it will only look at the selected objects, or with no object selected. All the objects of the current document will then be scanned for errors. If no error is found, this command will do nothing.

&lt;!--T:3--&gt;
This command can only heal [[Draft Module|Draft]] objects.

==How to use== &lt;!--T:4--&gt;
# Select one or more problematic objects to heal, or nothing to scan the whole document
# Press the {{KEY|[[Image:Draft_Heal.png|16px]] [[Draft Heal|Heal]]}} button


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Icon</title>
    <ns>0</ns>
    <id>51415</id>
    <revision>
      <id>130128</id>
      <parentid>130127</parentid>
      <timestamp>2014-12-08T19:55:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>d3fotzy4mgdfqfp3f8a76nub4vqxdoh</sha1>
      <text xml:space="preserve" bytes="9447">
==[[Image:Workbench Draft.png|32px|Workbench Draft|link=Draft Module]] [[Draft Module|Draft Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Draft Line.png|32px|Draft Line|link=Draft Line]] [[Draft Line|Draft Line]]
 &lt;nowiki&gt;[[Image:Draft Line.png|32px|Draft Line|link=Draft Line]] [[Draft Line|Draft Line]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Draft Wire.png|32px|Draft Wire|link=Draft Wire]] [[Draft Wire|Draft Wire]]
 &lt;nowiki&gt;[[Image:Draft Wire.png|32px|Draft Wire|link=Draft Wire]] [[Draft Wire|Draft Wire]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Draft Circle.png|32px|Draft Circle|link=Draft Circle]] [[Draft Circle|Draft Circle]]
 &lt;nowiki&gt;[[Image:Draft Circle.png|32px|Draft Circle|link=Draft Circle]] [[Draft Circle|Draft Circle]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Draft Arc.png|32px|Draft Arc|link=Draft Arc]] [[Draft Arc|Draft Arc]]
 &lt;nowiki&gt;[[Image:Draft Arc.png|32px|Draft Arc|link=Draft Arc]] [[Draft Arc|Draft Arc]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Draft Polygon.png|32px|Draft Polygon|link=Draft Polygon]] [[Draft Polygon|Draft Polygon]]
 &lt;nowiki&gt;[[Image:Draft Polygon.png|32px|Draft Polygon|link=Draft Polygon]] [[Draft Polygon|Draft Polygon]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Draft Rectangle.png|32px|Draft Rectangle|link=Draft Rectangle]] [[Draft Rectangle|Draft Rectangle]]
 &lt;nowiki&gt;[[Image:Draft Rectangle.png|32px|Draft Rectangle|link=Draft Rectangle]] [[Draft Rectangle|Draft Rectangle]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Draft Text.png|32px|Draft Text|link=Draft Text]] [[Draft Text|Draft Text]]
 &lt;nowiki&gt;[[Image:Draft Text.png|32px|Draft Text|link=Draft Text]] [[Draft Text|Draft Text]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Draft Dimension.png|32px|Draft Dimension|link=Draft Dimension]] [[Draft Dimension|Draft Dimension]]
 &lt;nowiki&gt;[[Image:Draft Dimension.png|32px|Draft Dimension|link=Draft Dimension]] [[Draft Dimension|Draft Dimension]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
[[Image:Draft BSpline.png|32px|Draft BSpline|link=Draft BSpline]] [[Draft BSpline|Draft BSpline]]
 &lt;nowiki&gt;[[Image:Draft BSpline.png|32px|Draft BSpline|link=Draft BSpline]] [[Draft BSpline|Draft BSpline]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Draft Point.png|Point|32px|link=Draft Point]] [[Draft Point|Draft Point]]
 &lt;nowiki&gt;[[Image:Draft Point.png|Point|32px|link=Draft Point]] [[Draft Point|Draft Point]]&lt;/nowiki&gt;

===Draft tools for editing objects=== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
[[Image:Draft SelectGroup.png|32px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]
 &lt;nowiki&gt;[[Image:Draft SelectGroup.png|32px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[Image:Draft AddToGroup.png|32px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]
 &lt;nowiki&gt;[[Image:Draft AddToGroup.png|32px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]&lt;/nowiki&gt;

&lt;!--T:15--&gt;
[[Image:Draft Move.png|32px|Draft Move|link=Draft Move]] [[Draft Move|Draft Move]]
 &lt;nowiki&gt;[[Image:Draft Move.png|32px|Draft Move|link=Draft Move]] [[Draft Move|Draft Move]]&lt;/nowiki&gt;

&lt;!--T:16--&gt;
[[Image:Draft Rotate.png|32px|Draft Rotate|link=Draft Rotate]] [[Draft Rotate|Draft Rotate]]
 &lt;nowiki&gt;[[Image:Draft Rotate.png|32px|Draft Rotate|link=Draft Rotate]] [[Draft Rotate|Draft Rotate]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
[[Image:Draft Offset.png|32px|Draft Offset|link=Draft Offset]] [[Draft Offset|Draft Offset]]
 &lt;nowiki&gt;[[Image:Draft Offset.png|32px|Draft Offset|link=Draft Offset]] [[Draft Offset|Draft Offset]]&lt;/nowiki&gt;

&lt;!--T:18--&gt;
[[Image:Draft Trimex.png|32px|Draft Trimex|link=Draft Trimex]] [[Draft Trimex|Draft Trimex]]
 &lt;nowiki&gt;[[Image:Draft Trimex.png|32px|Draft Trimex|link=Draft Trimex]] [[Draft Trimex|Draft Trimex]]&lt;/nowiki&gt;

&lt;!--T:19--&gt;
[[Image:Draft Upgrade.png|32px|Draft Upgrade|link=Draft Upgrade]] [[Draft Upgrade|Draft Upgrade]]
 &lt;nowiki&gt;[[Image:Draft Upgrade.png|32px|Draft Upgrade|link=Draft Upgrade]] [[Draft Upgrade|Draft Upgrade]]&lt;/nowiki&gt;

&lt;!--T:20--&gt;
[[Image:Draft Downgrade.png|32px|Draft Downgrade|link=Draft Downgrade]] [[Draft Downgrade|Draft Downgrade]]
 &lt;nowiki&gt;[[Image:Draft Downgrade.png|32px|Draft Downgrade|link=Draft Downgrade]] [[Draft Downgrade|Draft Downgrade]]&lt;/nowiki&gt;

&lt;!--T:21--&gt;
[[Image:Draft Scale.png|32px|Draft Scale|link=Draft Scale]] [[Draft Scale|Draft Scale]]
 &lt;nowiki&gt;[[Image:Draft Scale.png|32px|Draft Scale|link=Draft Scale]] [[Draft Scale|Draft Scale]]&lt;/nowiki&gt;

&lt;!--T:22--&gt;
[[Image:Draft PutOnSheet.png|32px|Draft Drawing|link=Draft Drawing]] [[Draft Drawing|Draft Drawing]]
 &lt;nowiki&gt;[[Image:Draft PutOnSheet.png|32px|Draft Drawing|link=Draft Drawing]] [[Draft Drawing|Draft Drawing]]&lt;/nowiki&gt;

&lt;!--T:23--&gt;
[[Image:Draft Edit.png|32px|Draft Edit|link=Draft Edit]] [[ Draft Edit|Draft Edit]]
 &lt;nowiki&gt;[[Image:Draft Edit.png|32px|Draft Edit|link=Draft Edit]] [[ Draft Edit|Draft Edit]]&lt;/nowiki&gt;

&lt;!--T:24--&gt;
[[Image:Draft WireToBSpline.png|32px|Draft WireToBSpline|link=Draft WireToBSpline]] [[Draft WireToBSpline|Draft WireToBSpline]]
 &lt;nowiki&gt;[[Image:Draft WireToBSpline.png|32px|Draft WireToBSpline|link=Draft WireToBSpline]] [[Draft WireToBSpline|Draft WireToBSpline]]&lt;/nowiki&gt;

&lt;!--T:25--&gt;
[[Image:Draft AddPoint.png|32px|Draft AddPoint|link=Draft AddPoint]] [[Draft AddPoint|Draft AddPoint]]
 &lt;nowiki&gt;[[Image:Draft AddPoint.png|32px|Draft AddPoint|link=Draft AddPoint]] [[Draft AddPoint|Draft AddPoint]]&lt;/nowiki&gt;

&lt;!--T:26--&gt;
[[Image:Draft DelPoint.png|32px|Draft DelPoint|link=Draft DelPoint]] [[Draft DelPoint|Draft DelPoint]]
 &lt;nowiki&gt;[[Image:Draft DelPoint.png|32px|Draft DelPoint|link=Draft DelPoint]] [[Draft DelPoint|Draft DelPoint]]&lt;/nowiki&gt;

&lt;!--T:27--&gt;
[[Image:Draft Shape2DView.png|32px|Draft Shape2DView|link=Draft Shape2DView]] [[Draft Shape2DView|Draft Shape2DView]]
 &lt;nowiki&gt;[[Image:Draft Shape2DView.png|32px|Draft Shape2DView|link=Draft Shape2DView]] [[Draft Shape2DView|Draft Shape2DView]]&lt;/nowiki&gt;

&lt;!--T:28--&gt;
[[Image:Draft Draft2Sketch.png|32px|Draft Draft2Sketch|link=Draft Draft2Sketch]] [[Draft Draft2Sketch|Draft Draft2Sketch]]
 &lt;nowiki&gt;[[Image:Draft Draft2Sketch.png|32px|Draft Draft2Sketch|link=Draft Draft2Sketch]] [[Draft Draft2Sketch|Draft Draft2Sketch]]&lt;/nowiki&gt;

&lt;!--T:29--&gt;
[[Image:Draft Array.png|32px|Draft Array|link=Draft Array]] [[Draft Array|Draft Array]]
 &lt;nowiki&gt;[[Image:Draft Array.png|32px|Draft Array|link=Draft Array]] [[Draft Array|Draft Array]]&lt;/nowiki&gt;

&lt;!--T:30--&gt;
[[Image:Draft Clone.png|32px|Draft Clone|link=Draft Clone]] [[Draft Clone|Draft Clone]]
 &lt;nowiki&gt;[[Image:Draft Clone.png|32px|Draft Clone|link=Draft Clone]] [[Draft Clone|Draft Clone]]&lt;/nowiki&gt;

===Draft Snap=== &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
[[Image:Snap Midpoint.png|32px|Snap Midpoint|link=Draft Snap]] [[Draft Snap|Snap Midpoint]]
 &lt;nowiki&gt;[[Image:Snap Midpoint.png|32px|Snap Midpoint|link=Draft Snap]] [[Draft Snap|Snap Midpoint]]&lt;/nowiki&gt;

&lt;!--T:33--&gt;
[[Image:Snap Perpendicular.png|32px|Snap Perpendicular|link=Draft Snap]] [[Draft Snap|Snap Perpendicular]]
 &lt;nowiki&gt;[[Image:Snap Perpendicular.png|32px|Snap Perpendicular|link=Draft Snap]] [[Draft Snap|Snap Perpendicular]]&lt;/nowiki&gt;

&lt;!--T:34--&gt;
[[Image:Snap Grid.png|32px|Snap Grid|link=Draft Snap]] [[Draft Snap|Snap Grid]]
 &lt;nowiki&gt;[[Image:Snap Grid.png|32px|Snap Grid|link=Draft Snap]] [[Draft Snap|Snap Grid]]&lt;/nowiki&gt;

&lt;!--T:35--&gt;
[[Image:Snap Intersection.png|32px|Snap Intersection|link=Draft Snap]] [[Draft Snap|Snap Intersection]]
 &lt;nowiki&gt;[[Image:Snap Intersection.png|32px|Snap Intersection|link=Draft Snap]] [[Draft Snap|Snap Intersection]]&lt;/nowiki&gt;

&lt;!--T:36--&gt;
[[Image:Snap Parallel.png|32px|Snap Parallel|link=Draft Snap]] [[Draft Snap|Snap Parallel]]
 &lt;nowiki&gt;[[Image:Snap Parallel.png|32px|Snap Parallel|link=Draft Snap]] [[Draft Snap|Snap Parallel]]&lt;/nowiki&gt;

&lt;!--T:37--&gt;
[[Image:Snap Endpoint.png|32px|Snap Endpoint|link=Draft Snap]] [[Draft Snap|Snap Endpoint]]
 &lt;nowiki&gt;[[Image:Snap Endpoint.png|32px|Snap Endpoint|link=Draft Snap]] [[Draft Snap|Snap Endpoint]]&lt;/nowiki&gt;

&lt;!--T:38--&gt;
[[Image:Snap Angle.png|32px|Snap Angle|link=Draft Snap]] [[Draft Snap|Snap Angle]]
 &lt;nowiki&gt;[[Image:Snap Angle.png|32px|Snap Angle|link=Draft Snap]] [[Draft Snap|Snap Angle]]&lt;/nowiki&gt;

&lt;!--T:39--&gt;
[[Image:Snap Center.png|32px|Snap Center|link=Draft Snap]] [[Draft Snap|Snap Center]]
 &lt;nowiki&gt;[[Image:Snap Center.png|32px|Snap Center|link=Draft Snap]] [[Draft Snap|Snap Center]]&lt;/nowiki&gt;

&lt;!--T:40--&gt;
[[Image:Snap Extension.png|32px|Snap Extension|link=Draft Snap]] [[Draft Snap|Snap Extension]]
 &lt;nowiki&gt;[[Image:Snap Extension.png|32px|Snap Extension|link=Draft Snap]] [[Draft Snap|Snap Extension]]&lt;/nowiki&gt;

&lt;!--T:41--&gt;
[[Image:Snap Near.png|32px|Snap Near|link=Draft Snap]] [[Draft Snap|Snap Near]]
 &lt;nowiki&gt;[[Image:Snap Near.png|32px|Snap Near|link=Draft Snap]] [[Draft Snap|Snap Near]]&lt;/nowiki&gt;

&lt;!--T:42--&gt;
[[Image:Snap Ortho.png|32px|Snap Ortho|link=Draft Snap]] [[Draft Snap|Snap Ortho]]
 &lt;nowiki&gt;[[Image:Snap Ortho.png|32px|Snap Ortho|link=Draft Snap]] [[Draft Snap|Snap Ortho]]&lt;/nowiki&gt;

&lt;!--T:43--&gt;
[[Image:Draft ShowSnapBar.png|32px|Draft ShowSnapBar|link=Draft Snap]] [[Draft Snap|Draft ShowSnapBar]]
 &lt;nowiki&gt;[[Image:Draft ShowSnapBar.png|32px|Draft ShowSnapBar|link=Draft Snap]] [[Draft Snap|Draft ShowSnapBar]]&lt;/nowiki&gt;

&lt;!--T:44--&gt;
[[Image:Snap Lock.png|32px|Snap Lock|link=Draft Snap]] [[Draft Snap|Snap Lock]]
 &lt;nowiki&gt;[[Image:Snap Lock.png|32px|Snap Lock|link=Draft Snap]] [[Draft Snap|Snap Lock]]&lt;/nowiki&gt;

&lt;!--T:45--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Intersection</title>
    <ns>0</ns>
    <id>37723</id>
    <revision>
      <id>105967</id>
      <parentid>100763</parentid>
      <timestamp>2014-08-23T11:52:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>n0vrj1jv2ik8zl29l9pobgv756ek5q7</sha1>
      <text xml:space="preserve" bytes="309">

&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Intersection|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft_Snap|Snap]] → Intersection|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Key</title>
    <ns>0</ns>
    <id>51437</id>
    <revision>
      <id>131438</id>
      <parentid>130812</parentid>
      <timestamp>2014-12-13T21:09:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7mgn45qbh06yf6i48dr8ieujvi8bqng</sha1>
      <text xml:space="preserve" bytes="10038">
==[[File:Workbench Draft.png|32px|Workbench Draft|link=Draft Module]] [[Draft Module|Draft Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Draft Line.png|16px|Draft Line|link=Draft Line]] [[Draft Line|Draft Line]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Line.png|16px|Draft Line|link=Draft Line]] [[Draft Line|Draft Line]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Draft Wire.png|16px|Draft Wire|link=Draft Wire]] [[Draft Wire|Draft Wire]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Wire.png|16px|Draft Wire|link=Draft Wire]] [[Draft Wire|Draft Wire]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Draft Circle.png|16px|Draft Circle|link=Draft Circle]] [[Draft Circle|Draft Circle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Circle.png|16px|Draft Circle|link=Draft Circle]] [[Draft Circle|Draft Circle]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Draft Arc.png|16px|Draft Arc|link=Draft Arc]] [[Draft Arc|Draft Arc]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Arc.png|16px|Draft Arc|link=Draft Arc]] [[Draft Arc|Draft Arc]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Draft Polygon.png|16px|Draft Polygon|link=Draft Polygon]] [[Draft Polygon|Draft Polygon]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Polygon.png|16px|Draft Polygon|link=Draft Polygon]] [[Draft Polygon|Draft Polygon]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Draft Rectangle.png|16px|Draft Rectangle|link=Draft Rectangle]] [[Draft Rectangle|Draft Rectangle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Rectangle.png|16px|Draft Rectangle|link=Draft Rectangle]] [[Draft Rectangle|Draft Rectangle]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Draft Text.png|16px|Draft Text|link=Draft Text]] [[Draft Text|Draft Text]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Text.png|16px|Draft Text|link=Draft Text]] [[Draft Text|Draft Text]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Draft Dimension.png|16px|Draft Dimension|link=Draft Dimension]] [[Draft Dimension|Draft Dimension]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Dimension.png|16px|Draft Dimension|link=Draft Dimension]] [[Draft Dimension|Draft Dimension]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Draft BSpline.png|16px|Draft BSpline|link=Draft BSpline]] [[Draft BSpline|Draft BSpline]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft BSpline.png|16px|Draft BSpline|link=Draft BSpline]] [[Draft BSpline|Draft BSpline]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Draft Point.png|Point|32px|link=Draft Point]] [[Draft Point|Draft Point]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Point.png|Point|32px|link=Draft Point]] [[Draft Point|Draft Point]]}}&lt;/nowiki&gt;

===Draft Editions of objects=== &lt;!--T:12--&gt; 

&lt;!--T:13--&gt;
{{KEY|[[File:Draft SelectGroup.png|16px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft SelectGroup.png|16px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:Draft AddToGroup.png|16px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft AddToGroup.png|16px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]}}&lt;/nowiki&gt;

&lt;!--T:15--&gt;
{{KEY|[[File:Draft Move.png|16px|Draft Move|link=Draft Move]] [[Draft Move|Draft Move]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Move.png|16px|Draft Move|link=Draft Move]] [[Draft Move|Draft Move]]}}&lt;/nowiki&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Draft Rotate.png|16px|Draft Rotate|link=Draft Rotate]] [[Draft Rotate|Draft Rotate]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Rotate.png|16px|Draft Rotate|link=Draft Rotate]] [[Draft Rotate|Draft Rotate]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
{{KEY|[[File:Draft Offset.png|16px|Draft Offset|link=Draft Offset]] [[Draft Offset|Draft Offset]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Offset.png|16px|Draft Offset|link=Draft Offset]] [[Draft Offset|Draft Offset]]}}&lt;/nowiki&gt;

&lt;!--T:18--&gt;
{{KEY|[[File:Draft Trimex.png|16px|Draft Trimex|link=Draft Trimex]] [[Draft Trimex|Draft Trimex]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Trimex.png|16px|Draft Trimex|link=Draft Trimex]] [[Draft Trimex|Draft Trimex]]}}&lt;/nowiki&gt;

&lt;!--T:19--&gt;
{{KEY|[[File:Draft Upgrade.png|16px|Draft Upgrade|link=Draft Upgrade]] [[Draft Upgrade|Draft Upgrade]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Upgrade.png|16px|Draft Upgrade|link=Draft Upgrade]] [[Draft Upgrade|Draft Upgrade]]}}&lt;/nowiki&gt;

&lt;!--T:20--&gt;
{{KEY|[[File:Draft Downgrade.png|16px|Draft Downgrade|link=Draft Downgrade]] [[Draft Downgrade|Draft Downgrade]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Downgrade.png|16px|Draft Downgrade|link=Draft Downgrade]] [[Draft Downgrade|Draft Downgrade]]}}&lt;/nowiki&gt;

&lt;!--T:21--&gt;
{{KEY|[[File:Draft Scale.png|16px|Draft Scale|link=Draft Scale]] [[Draft Scale|Draft Scale]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Scale.png|16px|Draft Scale|link=Draft Scale]] [[Draft Scale|Draft Scale]]}}&lt;/nowiki&gt;

&lt;!--T:22--&gt;
{{KEY|[[File:Draft PutOnSheet.png|16px|Draft Drawing|link=Draft Drawing]] [[Draft Drawing|Draft Drawing]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft PutOnSheet.png|16px|Draft Drawing|link=Draft Drawing]] [[Draft Drawing|Draft Drawing]]}}&lt;/nowiki&gt;

&lt;!--T:23--&gt;
{{KEY|[[File:Draft Edit.png|16px|Draft Edit|link=Draft Edit]] [[ Draft Edit|Draft Edit]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Edit.png|16px|Draft Edit|link=Draft Edit]] [[ Draft Edit|Draft Edit]]}}&lt;/nowiki&gt;

&lt;!--T:24--&gt;
{{KEY|[[File:Draft WireToBSpline.png|16px|Draft WireToBSpline|link=Draft WireToBSpline]] [[Draft WireToBSpline|Draft WireToBSpline]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft WireToBSpline.png|16px|Draft WireToBSpline|link=Draft WireToBSpline]] [[Draft WireToBSpline|Draft WireToBSpline]]}}&lt;/nowiki&gt;

&lt;!--T:25--&gt;
{{KEY|[[File:Draft AddPoint.png|16px|Draft AddPoint|link=Draft AddPoint]] [[Draft AddPoint|Draft AddPoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft AddPoint.png|16px|Draft AddPoint|link=Draft AddPoint]] [[Draft AddPoint|Draft AddPoint]]}}&lt;/nowiki&gt;

&lt;!--T:26--&gt;
{{KEY|[[File:Draft DelPoint.png|16px|Draft DelPoint|link=Draft DelPoint]] [[Draft DelPoint|Draft DelPoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft DelPoint.png|16px|Draft DelPoint|link=Draft DelPoint]] [[Draft DelPoint|Draft DelPoint]]}}&lt;/nowiki&gt;

&lt;!--T:27--&gt;
{{KEY|[[File:Draft Shape2DView.png|16px|Draft Shape2DView|link=Draft Shape2DView]] [[Draft Shape2DView|Draft Shape2DView]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Shape2DView.png|16px|Draft Shape2DView|link=Draft Shape2DView]] [[Draft Shape2DView|Draft Shape2DView]]}}&lt;/nowiki&gt;

&lt;!--T:28--&gt;
{{KEY|[[File:Draft Draft2Sketch.png|16px|Draft Draft2Sketch|link=Draft Draft2Sketch]] [[Draft Draft2Sketch|Draft Draft2Sketch]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Draft2Sketch.png|16px|Draft Draft2Sketch|link=Draft Draft2Sketch]] [[Draft Draft2Sketch|Draft Draft2Sketch]]}}&lt;/nowiki&gt;

&lt;!--T:29--&gt;
{{KEY|[[File:Draft Array.png|16px|Draft Array|link=Draft Array]] [[Draft Array|Draft Array]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Array.png|16px|Draft Array|link=Draft Array]] [[Draft Array|Draft Array]]}}&lt;/nowiki&gt;

&lt;!--T:30--&gt;
{{KEY|[[File:Draft Clone.png|16px|Draft Clone|link=Draft Clone]] [[Draft Clone|Draft Clone]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Clone.png|16px|Draft Clone|link=Draft Clone]] [[Draft Clone|Draft Clone]]}}&lt;/nowiki&gt;

===Draft Snap=== &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
{{KEY|[[File:Snap Midpoint.png|16px|Snap Midpoint|link=Draft Snap]] [[Draft Snap|Snap Midpoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Midpoint.png|16px|Snap Midpoint|link=Draft Snap]] [[Draft Snap|Snap Midpoint]]}}&lt;/nowiki&gt;

&lt;!--T:33--&gt;
{{KEY|[[File:Snap Perpendicular.png|16px|Snap Perpendicular|link=Draft Snap]] [[Draft Snap|Snap Perpendicular]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Perpendicular.png|16px|Snap Perpendicular|link=Draft Snap]] [[Draft Snap|Snap Perpendicular]]}}&lt;/nowiki&gt;

&lt;!--T:34--&gt;
{{KEY|[[File:Snap Grid.png|16px|Snap Grid|link=Draft Snap]] [[Draft Snap|Snap Grid]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Grid.png|16px|Snap Grid|link=Draft Snap]] [[Draft Snap|Snap Grid]]}}&lt;/nowiki&gt;

&lt;!--T:35--&gt;
{{KEY|[[File:Snap Intersection.png|16px|Snap Intersection|link=Draft Snap]] [[Draft Snap|Snap Intersection]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Intersection.png|16px|Snap Intersection|link=Draft Snap]] [[Draft Snap|Snap Intersection]]}}&lt;/nowiki&gt;

&lt;!--T:36--&gt;
{{KEY|[[File:Snap Parallel.png|16px|Snap Parallel|link=Draft Snap]] [[Draft Snap|Snap Parallel]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Parallel.png|16px|Snap Parallel|link=Draft Snap]] [[Draft Snap|Snap Parallel]]}}&lt;/nowiki&gt;

&lt;!--T:37--&gt;
{{KEY|[[File:Snap Endpoint.png|16px|Snap Endpoint|link=Draft Snap]] [[Draft Snap|Snap Endpoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Endpoint.png|16px|Snap Endpoint|link=Draft Snap]] [[Draft Snap|Snap Endpoint]]}}&lt;/nowiki&gt;

&lt;!--T:38--&gt;
{{KEY|[[File:Snap Angle.png|16px|Snap Angle|link=Draft Snap]] [[Draft Snap|Snap Angle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Angle.png|16px|Snap Angle|link=Draft Snap]] [[Draft Snap|Snap Angle]]}}&lt;/nowiki&gt;

&lt;!--T:39--&gt;
{{KEY|[[File:Snap Center.png|16px|Snap Center|link=Draft Snap]] [[Draft Snap|Snap Center]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Center.png|16px|Snap Center|link=Draft Snap]] [[Draft Snap|Snap Center]]}}&lt;/nowiki&gt;

&lt;!--T:40--&gt;
{{KEY|[[File:Snap Extension.png|16px|Snap Extension|link=Draft Snap]] [[Draft Snap|Snap Extension]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Extension.png|16px|Snap Extension|link=Draft Snap]] [[Draft Snap|Snap Extension]]}}&lt;/nowiki&gt;

&lt;!--T:41--&gt;
{{KEY|[[File:Snap Near.png|16px|Snap Near|link=Draft Snap]] [[Draft Snap|Snap Near]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Near.png|16px|Snap Near|link=Draft Snap]] [[Draft Snap|Snap Near]]}}&lt;/nowiki&gt;

&lt;!--T:42--&gt;
{{KEY|[[File:Snap Ortho.png|16px|Snap Ortho|link=Draft Snap]] [[Draft Snap|Snap Ortho]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Ortho.png|16px|Snap Ortho|link=Draft Snap]] [[Draft Snap|Snap Ortho]]}}&lt;/nowiki&gt;

&lt;!--T:43--&gt;
{{KEY|[[File:Draft ShowSnapBar.png|16px|Draft ShowSnapBar|link=Draft Snap]] [[Draft Snap|Draft ShowSnapBar]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ShowSnapBar.png|16px|Draft ShowSnapBar|link=Draft Snap]] [[Draft Snap|Draft ShowSnapBar]]}}&lt;/nowiki&gt;

&lt;!--T:44--&gt;
{{KEY|[[File:Snap Lock.png|16px|Snap Lock|link=Draft Snap]] [[Draft Snap|Snap Lock]]}}
 &lt;nowiki&gt;{{KEY|[[File:Snap Lock.png|16px|Snap Lock|link=Draft Snap]] [[Draft Snap|Snap Lock]]}}&lt;/nowiki&gt;

&lt;!--T:45--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft Line</title>
    <ns>0</ns>
    <id>33</id>
    <revision>
      <id>92499</id>
      <parentid>89021</parentid>
      <timestamp>2014-06-18T21:09:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>p5k55jiljvmj9d1fuvndjaxt5i9lu83</sha1>
      <text xml:space="preserve" bytes="2777">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Line|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Line|Shortcut=L I|SeeAlso=[[Draft Wire|Draft Wire]]}}

==Description== &lt;!--T:2--&gt;
The Line tool creates a straight, two-points line in the current [[Draft SelectPlane|work plane]]. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. The Line tool behaves exactly like the [[Draft Wire]] tool, except that it stops after two points.

&lt;!--T:3--&gt;
[[Image:Draft_Line_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Line.png|16px]] [[Draft Line]]}} button, or press {{KEY|L}} then {{KEY|I}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:5--&gt;
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after the first point to constrain the second point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the second point are relative to the first one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Line tool will restart after you give the second point, allowing you to draw another line segment without pressing the Line button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your second point horizontally or vertically in relation to the first one.
* Press {{KEY|CTRL}}+{{KEY|Z}} or press the {{KEY|[[Image:Draft UndoLine.png|12px]] '''[[Draft_UndoLine|Undo]]'''}} button to undo the last point.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Start}}: The start point
* {{PropertyData|End}}: The end point

==Scripting== &lt;!--T:7--&gt;
The Line tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
makeLine (Vector, Vector)
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a line between the two given vectors. The current draft linewidth and color will be used.
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
import FreeCAD, Draft
Draft.makeLine(FreeCAD.Vector(0,0,0),FreeCAD.Vector(2,0,0))
&lt;/syntaxhighlight&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Linestyle</title>
    <ns>0</ns>
    <id>402</id>
    <revision>
      <id>91452</id>
      <parentid>91451</parentid>
      <timestamp>2014-06-17T10:28:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>joohb7n3p3ngqdqgctqmfd9w8nq7pye</sha1>
      <text xml:space="preserve" bytes="1519">
&lt;!--T:1--&gt;
The line color and line width of Draft objects (and any other FreeCAD object) can easily be changed in the Draft module.

&lt;!--T:2--&gt;
[[Image:Draft-linestyle.jpg]]

&lt;!--T:3--&gt;
On the '''Command bar ''', a series of buttons displayed, including three for lines :  [[File:Draft Style 01.png]]
&lt;br /&gt;
[[File:Draft_Style_Couleur_Ligne.png]] Gives color to the line (edge).&lt;br /&gt;
[[File:Draft_Style_Couleur_Face.png]] Gives background color (face) to the form.&lt;br /&gt;
[[File:Draft_Style_Epaisseur_Ligne.png]] Gives the thickness line (edge).&lt;br /&gt;
[[File:Draft_Style_Style.png]] Gives all the parameters of '''[[Draft_Apply|style]]''' bjects [[Draft_Select|selected]].


&lt;!--T:4--&gt;
On the '''Draft command bar''', you will see three buttons: a linewidth setting, a linecolor button, and an &quot;apply&quot; button. If objects are selected when you change those values, they will receive automatically the new values. If no object is selected, the changes you make will apply to objects you will create later. At any moment, you can hit the &quot;apply&quot; button to apply current settings to selected objects. You can also do that from the tree's context menu. If a group is selected, the settings will be applied to all objects in the group.

&lt;!--T:5--&gt;
If you would like to change the face color of filled objects, you can do it via the properties window.

&lt;!--T:6--&gt;
See also  [[Draft_Apply|Draft Apply]] [[File:Draft_Apply.png|16px]].

&lt;!--T:7--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Midpoint</title>
    <ns>0</ns>
    <id>37696</id>
    <revision>
      <id>105970</id>
      <parentid>100736</parentid>
      <timestamp>2014-08-23T11:53:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>39726wzyfectj2n4bdcnmh8p6bd6gf9</sha1>
      <text xml:space="preserve" bytes="300">
&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Midpoint|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft_Snap|Snap]] → Midpoint|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Module</title>
    <ns>0</ns>
    <id>34</id>
    <revision>
      <id>121152</id>
      <parentid>121151</parentid>
      <timestamp>2014-11-12T20:20:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>spelling</comment>
      <sha1>qa4gk7nijzi18yhgxm7365wqfqbvth4</sha1>
      <text xml:space="preserve" bytes="2461">
&lt;!--T:1--&gt;
The Draft workbench allows to quickly draw simple 2D objects in the current document, and offers several tools to modify them afterwards. Some of these tools also work on all other FreeCAD objects, not only those created with the Draft workbench. It also provides a complete snapping system, and several utilities to manage objects and settings.


__NOTOC__

&lt;!--T:2--&gt;
{{Draft Tools}}

===File formats=== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
The Draft module provides FreeCAD with importers and exporters for the following file formats:

&lt;!--T:5--&gt;
* [[Draft_DXF|Autodesk .DXF]]: Imports and exports [http://en.wikipedia.org/wiki/AutoCAD_DXF Drawing Exchange Format] files created with 2D CAD applications
* [[Draft_SVG|SVG (as geometry)]]: Imports and exports [http://en.wikipedia.org/wiki/Scalable_Vector_Graphics Scalable Vector Graphics] files created with vector drawing applications
* [[Draft_OCA|Open Cad format .OCA]]: Imports and exports OCA/GCAD files, a potentially new [http://groups.google.com/group/open_cad_format open CAD file format]
* [[Draft_DAT|Airfoil Data Format .DAT]]: Imports DAT files describing [http://www.ae.illinois.edu/m-selig/ads/coord_database.html Airfoil profiles]
* [[Draft_DXF|Autodesk .DWG]]: Import and exports DWG files via the DXF importer, when the [[Extra python modules|Teigha Converter]] utility is installed.
* [[FreeCAD_and_DWG_Import|FreeCAD and DWG Import]]: Import and exports DWG files

===Additional features=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* [[Draft_Snap|Snapping]]: Allows to place new points on special places on existing objects
* [[Draft_Constrain|Constraining]]: Allows to place new points horizontally or vertically in relation to previous points
* [[Draft_Coordinates|Working with manual coordinates]]: Allows to enter manual coordinates instead of clicking on screen
* [[Draft_SelectPlane|Working plane]]: Allows you to define a plane in the 3D space, where next operations will take place

===Preference settings=== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* The Draft module has its [[Draft Preferences|preferences]] screen

===Scripting=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Draft module features a complete [http://www.freecadweb.org/api/Draft.html Draft API] so you can use its functions in scripts and macros

===Tutorials=== &lt;!--T:14--&gt;
[[Draft_tutorial|Draft tutorial]]

&lt;!--T:12--&gt;
{{docnav|Image Module|Arch Module}}

&lt;!--T:13--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Draft Move</title>
    <ns>0</ns>
    <id>35</id>
    <revision>
      <id>89042</id>
      <parentid>71611</parentid>
      <timestamp>2014-05-31T17:11:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>t5txzy4k0rm34vjdd80hu8k3spqevkj</sha1>
      <text xml:space="preserve" bytes="3317">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Move|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Move|Shortcut=M V}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Move tool moves or copies the selected objects from one point to another on the current [[Draft SelectPlane|work plane]]. If no object is selected, you will be invited to select one.


[[Image:Draft_Move_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select objects you wish to move or copy
# Press the {{KEY|[[Image:Draft Move.png|16px]] [[Draft Move]]}} button, or press {{KEY|M}} then {{KEY|V}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click another point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Move tool will restart after you finish or close it, allowing you to move or copy the objects another time without pressing the Move button again.
* Pressing {{KEY|ALT}} or {{KEY|C}} or clicking the {{KEY|'''Copy'''}} button will make a copy of the objects, instead of moving them. If you keep {{KEY|ALT}} pressed after clicking the second point, you will be able to place more copies, until you release the {{KEY|ALT}} key.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Move tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 move (FreeCAD.Object or list, Vector, [copymode])
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
* Moves the given object or the objects contained in the given  list in the direction and distance indicated by the given vector. 
* If copymode is True, the actual objects are not moved,  but copies are created instead. Returns the object(s) (or their copies if copymode was True)
* A list of the moved object (or the copies) is returned

&lt;!--T:11--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.move(FreeCAD.ActiveDocument.ActiveObject,FreeCAD.Vector(2,2,0))
&lt;/syntaxhighlight&gt;

==Limitations== &lt;!--T:12--&gt;
* When moving (or changing Placement of) a document object (eg: Pad, Revolution, etc) which is based on a Sketch (from Sketcher/Part Design), you must move the original sketch.  If you move the derived object, it will just go back to the position defined by the sketch.

</text>
    </revision>
  </page>
  <page>
    <title>Draft Near</title>
    <ns>0</ns>
    <id>37874</id>
    <revision>
      <id>101119</id>
      <parentid>101118</parentid>
      <timestamp>2014-08-01T08:27:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rnvjobiwuqqrk1pkgy16hyh2e5joesf</sha1>
      <text xml:space="preserve" bytes="334">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Near|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Near|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft OCA</title>
    <ns>0</ns>
    <id>365</id>
    <revision>
      <id>69114</id>
      <parentid>69113</parentid>
      <timestamp>2014-02-17T21:30:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>cj3ie6clirapqk7zd6fngkt338dvpeq</sha1>
      <text xml:space="preserve" bytes="1037">
===Opening=== &lt;!--T:1--&gt;
This function imports OCA/GCAD files. The [http://groups.google.com/group/open_cad_format OCA file format] is community effort to create a free, simple and open CAD file format. OCA is largely based on the GCAD file format generated from [http://www.gcad3d.org/ gCAD3D]. Both formats can be imported in FreeCAD, and the OCA files exported by FreeCAD can be opened in gCAD3D.

&lt;!--T:2--&gt;
The following OCA objects get imported at the moment:
* Lines
* Arcs and Circles
* Closed areas

===Importing=== &lt;!--T:3--&gt;
Works the same way as opening but creates the objects in the active document instead of creating a new one.

===Exporting=== &lt;!--T:4--&gt;
Objects that can be exported at the moment:
* Lines and wires (polylines)
* Arcs and circles
* Faces

===Preferences=== &lt;!--T:5--&gt;
The following parameters can be specified in the [[Draft Preferences]] tab (menu Edit -&gt; Preferences -&gt; Draft): 
* Import closed areas or not

&lt;!--T:6--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Offset</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>89050</id>
      <parentid>66583</parentid>
      <timestamp>2014-05-31T17:12:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>t5nklph2d3mcwnm9cm17tg8c8ig4jcl</sha1>
      <text xml:space="preserve" bytes="2542">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Offset|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Offset|Shortcut=O S}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Offset tool offsets the selected object by a given distance on the current [[Draft SelectPlane|work plane]]. If no object is selected, you will be invited to select one.


[[Image:Draft_Offset_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select objects you wish to offset
# Press the {{KEY|[[Image:Draft Offset.png|16px]] [[Draft Offset]]}} button, or press {{KEY|O}} then {{KEY|S}} keys
# Click a point on the 3D view, or type a distance.

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Offset tool will restart after you finish or close it, allowing you to offset or copy the objects another time without pressing the Offset button again.
* Pressing {{KEY|ALT}} or {{KEY|C}} or clicking the {{KEY|'''Copy'''}} button will make a copy of the objects, instead of moving them. If you keep {{KEY|ALT}} pressed after clicking the second point, you will be able to place more copies, until you release the {{KEY|ALT}} key.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Pressing {{KEY|SHIFT}} will [[Draft_Constrain|constrain]] you to the current segment, instead of picking the closest one.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Offset tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 offset (object,Vector,[copymode],[bind],[sym])
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
* Offsets the given wire by applying the given Vector to its first vertex. 
* If copymode is True, another object is created, otherwise the same object gets offsetted. 
* If bind is True, and provided the wire is open, the original and the offsetted wires will be bound by their endpoints, forming a face. 
* If sym is True,  the offset is made on both sides, the total width being the length of the given vector. 
* Returns the offsetted object (or its copy if copymode as True).

&lt;!--T:11--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.offset(FreeCAD.ActiveDocument.ActiveObject,FreeCAD.Vector(2,2,0))
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Ortho</title>
    <ns>0</ns>
    <id>37887</id>
    <revision>
      <id>101135</id>
      <parentid>101134</parentid>
      <timestamp>2014-08-01T08:31:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fey2zqkyzhmc831u30hotytdwf3zibe</sha1>
      <text xml:space="preserve" bytes="336">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Ortho|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Ortho|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Parallel</title>
    <ns>0</ns>
    <id>37735</id>
    <revision>
      <id>105973</id>
      <parentid>100779</parentid>
      <timestamp>2014-08-23T11:54:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>qfa7rlkirvxkohdf1yie2rer5nop1ew</sha1>
      <text xml:space="preserve" bytes="300">
&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Parallel|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → Parallel|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft PathArray</title>
    <ns>0</ns>
    <id>11509</id>
    <revision>
      <id>96151</id>
      <parentid>79452</parentid>
      <timestamp>2014-07-20T19:53:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>l0nefig1e1b5w9nu4a92x0bc3k6r3c7</sha1>
      <text xml:space="preserve" bytes="2829">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft PathArray|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → PathArray|SeeAlso=[[Draft Array|Draft Array]] }}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The PathArray tool places copies of a selected shape along a selected path.  The path can be a Wire or one or more Edges. The shapes can optionally be aligned with the tangent of the path.  If required, a translation Vector can be specified to shift the shapes so the centroid is on the path. If no objects are selected, you will be invited to select them.


[[Image:Draft_PathArray_Example.png|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a shape object you wish to distribute.
# Select a path object along which the shapes will be distributed. -or-
# Select some edges of a path object.
# Press the {{KEY|[[Image:Draft_PathArray.png|16px]] [[Draft PathArray]]}} button.

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* The array starts with shape copies which are not aligned to the path, nor translated to a new position by default. You can then change the count, alignment and/or translation vector in the properties.

==Properties== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{PropertyData|Base}}: The shape object
* {{PropertyData|PathObj}}: The path object
* {{PropertyData|PathSubs}}: The subelements(edges) of path object to be used as the path
* {{PropertyData|Count}}: The number of time to copy the shape
* {{PropertyData|Xlate}}: The translation vector
* {{PropertyData|Align}}: True to align the shapes to the path, False to leave shapes in their default orientation.

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The PathArray tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makePathArray(shapeobject,pathobject,count,[translationvector],[alignment],[listofpathsubelements])
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
* Distribute count copies of a document shapeobject along a pathobject or subobjects of a pathobject. Optionally translates each copy by FreeCAD.Vector xlate direction and distance to adjust for difference in shape centre vs shape reference point. Optionally aligns baseobject to tangent/normal/binormal of path.

&lt;!--T:13--&gt;
Example: 

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.makePathArray(base,path,items,centretrans,orient,pathsubs) 
&lt;/syntaxhighlight&gt;


==Usage Notes== &lt;!--T:15--&gt;
* Align + Xlate: When Align is True, the Xlate vector is relative to the local (tangent/normal/binormal) coordinates.  When Align is False, the Xlate vector is relative to the global (XYZ) coordinates.  

==Limitations== &lt;!--T:14--&gt;
* This tool is not available before version 0.14
* The PathSubs Property does not yet appear in the properties list.


</text>
    </revision>
  </page>
  <page>
    <title>Draft Pattern</title>
    <ns>0</ns>
    <id>43983</id>
    <revision>
      <id>116373</id>
      <parentid>116352</parentid>
      <timestamp>2014-10-26T21:27:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>kbkwvs76qs59yn4hqg5zw2h8fmz0roi</sha1>
      <text xml:space="preserve" bytes="1143">
==Description== &lt;!--T:1--&gt;
All closable Draft objects, such as [[Draft Rectangle|rectangle]], [[Draft Circle|circle]], [[Draft Ellipse|ellipse]], [[Draft Wire|wire]] or [[Draft Polygon|polygon]], when closed and set to &quot;Flat Lines&quot; display mode, can display a hatch pattern, instead of the face color, by setting their &quot;Pattern&quot; property. 

&lt;!--T:2--&gt;
[[Image:DraftPatternSample.png]]

==How to use== &lt;!--T:3--&gt;
# Select the object 
# In Combo View -&gt; Data: set Make Face to true to make sure the object will have a face to set the pattern
# In Combo View -&gt; View -&gt; Pattern: specify a hatch pattern to fill the wire with
# In Combo View -&gt; View -&gt; Pattern Size: specify the size of the hatch pattern 

&lt;!--T:4--&gt;
Note: 

&lt;!--T:5--&gt;
* The pattern is not visible when the item is either selected or pre-selected.
* If you create a face with upgrade, the resulting object is not a Draft object anymore, and so patterns are not available
* The [[Draft Wire]] can be closed and turned into a face directly when created, by checking the &quot;Filled&quot; checkbox.

&lt;!--T:6--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Perpendicular</title>
    <ns>0</ns>
    <id>37709</id>
    <revision>
      <id>105976</id>
      <parentid>100745</parentid>
      <timestamp>2014-08-23T11:54:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>kznqnl08v9ge7vq0i47mgu6b9ly6bnj</sha1>
      <text xml:space="preserve" bytes="310">
&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft Perpendicular|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft_Snap|Snap]] → Perpendicular|Shortcut=|SeeAlso=}}

===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Point</title>
    <ns>0</ns>
    <id>2680</id>
    <revision>
      <id>89092</id>
      <parentid>66029</parentid>
      <timestamp>2014-05-31T17:19:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>5s6xkppk4f616ku69de97m79dfp4pbf</sha1>
      <text xml:space="preserve" bytes="1656">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Point|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Point|Shortcut=P T}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The Point tool creates a simple point in the current [[Draft SelectPlane|work plane]], handy to serve as reference for placing other objects later. It takes the [[Draft Linestyle|color]] previously set on the Tasks tab.

&lt;!--T:4--&gt;
[[Image:Draft_point_example.jpg|400px]]

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
# Press the {{KEY|[[Image:Draft Point.png|16px]] [[Draft Point]]}} button, or press {{KEY|P}} then {{KEY|T}} keys
# Click a point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.

==Properties== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
* {{PropertyData|X}}: The X coordinate of the point
* {{PropertyData|Y}}: The Y coordinate of the point
* {{PropertyData|Z}}: The Z coordinate of the point

==Scripting== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
The Point tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makePoint([x],[y],[z])
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
* makes a point at the given coordinates. If no X, Y and Z coordinates are given, the point is created at (0,0,0). Returns the newly created object.

&lt;!--T:14--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 Draft.makePoint(6,4,2)
&lt;/syntaxhighlight&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Polygon</title>
    <ns>0</ns>
    <id>1036</id>
    <revision>
      <id>116096</id>
      <parentid>116095</parentid>
      <timestamp>2014-10-24T20:58:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tjgyin13rt3pfkfg4n4blm3a8n0tnug</sha1>
      <text xml:space="preserve" bytes="3405">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Polygon|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Polygon|Shortcut=P G}}

==Description== &lt;!--T:2--&gt;
The polygon tool creates a regular polygon by picking two points, the center and a second point defining a radius. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. 

&lt;!--T:3--&gt;
[[Image:Draft_polygon_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Polygon.png|16px]] [[Draft Polygon]]}} button, or press {{KEY|P}} then {{KEY|G}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]] to indicate the center
# Adjust the desired number of sides in the options dialog, 
# Click another point on the 3D view, or type a radius value to define the polygon radius. The polygon will also be a face, even if it appears as wireframe.

==Options== &lt;!--T:5--&gt;
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Polygon tool will restart after you finish or close it, allowing you to draw another one without pressing the Polygon button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the polygon to appear as a face after it has been closed. This simply sets the View-&gt;Property of the Rectangle to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.
* Polygons, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property below.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Radius}}: The radius of the defining circle
* {{PropertyData|Draw Mode}}: Specifies if the polygon is inscribed or circumscribed around the defining circle
* {{PropertyData|Faces Number}}: The number of sides of the polygon
* {{PropertyData|Chamfer Size}}: Specifies the size of chamfered corners
* {{PropertyData|Fillet Radius}}: Specifies a curvature radius to give to the corners of the rectangle
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the wire with
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

&lt;!--T:10--&gt;
See also [[Draft Pattern|Draft Pattern]] page.

==Scripting== &lt;!--T:7--&gt;
The Polygon tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makePolygon(nfaces,[radius],[inscribed],[placement],[face])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a polygon object with the given number of faces and the radius. 
* If inscribed is False, the polygon is circumscribed around a circle with the given radius, otherwise it is inscribed. 
* If face is True, the resulting shape is displayed as a face, otherwise as a wireframe. 
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import Draft
 Draft.makePolygon(5,radius=3)
&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Polyline</title>
    <ns>0</ns>
    <id>37</id>
    <revision>
      <id>108076</id>
      <parentid>88992</parentid>
      <timestamp>2014-09-01T19:39:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft Preferences</title>
    <ns>0</ns>
    <id>405</id>
    <revision>
      <id>79771</id>
      <parentid>79770</parentid>
      <timestamp>2014-04-19T19:18:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jwqxitpfnqlkvr2x33lavrumka794xy</sha1>
      <text xml:space="preserve" bytes="950">
&lt;!--T:1--&gt;
The preferences screen of the Draft module are found in the [[Preferences Editor|Preferences window]] (Menu Edit -&gt; Preferences). 

&lt;!--T:2--&gt;
It has '''General settings''', where you can specify the color of the [[Draft Snap|snap]] symbols, the default width and color for new objects. By checking the &quot;Save current color and linewidth across sessions&quot; checkbox, any change you make on the draft '''command bar''' will be saved here, so you will start your next FreeCAD session with the color and width you were using on quit.


&lt;!--T:3--&gt;
[[Image:Draft Preferences.jpg]]


&lt;!--T:4--&gt;
The '''DXF settings''' configure how [[Draft DXF|DXF files]] must be imported.

&lt;!--T:5--&gt;
The '''SVG settings''' configure how [[Draft SVG|SVG files]] must be imported.

&lt;!--T:6--&gt;
The '''OCA settings''' configure how [[Draft OCA|OCA files]] must be imported.

&lt;!--T:7--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft PutOnSheet</title>
    <ns>0</ns>
    <id>1032</id>
    <revision>
      <id>108077</id>
      <parentid>88993</parentid>
      <timestamp>2014-09-01T19:39:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft Rectangle</title>
    <ns>0</ns>
    <id>38</id>
    <revision>
      <id>116028</id>
      <parentid>116027</parentid>
      <timestamp>2014-10-24T20:44:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>satwmziqmzaoyyp8f4k3eq7avlcjdtp</sha1>
      <text xml:space="preserve" bytes="3805">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Rectangle|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Rectangle|Shortcut=R E|SeeAlso=[[Part Box|Part Box]]}}

==Description== &lt;!--T:2--&gt;
The rectangle tool creates a rectangle by picking two opposite points. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. 

&lt;!--T:3--&gt;
[[Image:Draft_Rectangle_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Rectangle.png|16px]] [[Draft Rectangle]]}} button, or press {{KEY|R}} then {{KEY|E}} keys
# Click a first corner point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click another opposite point on the 3D view, or type a [[Draft_Coordinates|coordinate]]. The rectangle will also be a face, even if it appears as wireframe.

==Options== &lt;!--T:5--&gt;
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Rectangle tool will restart after you finish or close it, allowing you to draw another one without pressing the Rectangle button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the rectangle to appear as a face after it has been closed. This simply sets the View-&gt;Property of the Rectangle to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.
* Rectangles, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Length}}: Specifies the length of the rectangle
* {{PropertyData|Width}}: Specifies the width of the rectangle
* {{PropertyData|Chamfer Size}}: Specifies the size of chamfered corners
* {{PropertyData|Fillet Radius}}: Specifies a curvature radius to give to the corners of the rectangle
* {{PropertyView|Texture Image}}: Allows to give the path to an image file to be mapped on the rectangle. It is up to you to give the rectangle the same proportion as the image if you want to avoid distortions. Blanking this property will remove the image.
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the wire with.
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

&lt;!--T:10--&gt;
See also [[Draft Pattern|Draft Pattern]] page.

==Scripting== &lt;!--T:7--&gt;
The Rectangle tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makeRectangle (length, width, [placement], [facemode])
&lt;/syntaxhighlight&gt;


&lt;!--T:8--&gt;
* Creates a Rectangle object with length in X direction and height in Y direction. 
* If a placement is given, it is used. 
* If facemode is False, the rectangle is shown as a wireframe, otherwise as a face. 
* The current Draft linewidth and color will be used. 
* Returns the newly created object.

&lt;!--T:9--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.makeRectangle(10,4)
&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Rotate</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>89051</id>
      <parentid>66480</parentid>
      <timestamp>2014-05-31T17:13:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>p2i00mihc7mwxd2u26xmvww1ci6xk9b</sha1>
      <text xml:space="preserve" bytes="2879">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Rotate|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Rotate|Shortcut=R O}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool rotates or copies the selected objects by a given angle around a point on the current [[Draft SelectPlane|work plane]]. If no object is selected, you will be invited to select one.


[[Image:Draft_Rotate_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select objects you wish to rotate or copy
# Press the {{KEY|[[Image:Draft Rotate.png|16px]] [[Draft Rotate]]}} button, or press {{KEY|R}} then {{KEY|O}} keys
# Click a center point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click a second point on the 3D view, or give a reference angle
# Click a third point on the 3D view, or give a rotation angle

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Rotate tool will restart after you finish or close it, allowing you to rotate or copy the objects another time without pressing the Rotate button again.
* Pressing {{KEY|ALT}} or {{KEY|C}} or clicking the {{KEY|'''Copy'''}} button will make a copy of the objects, instead of rotating them. If you keep {{KEY|ALT}} pressed after clicking the third point, you will be able to place more copies, until you release the {{KEY|ALT}} key.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the rotation center.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Rotate tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 rotate (FreeCAD.Object or list, angle, [center], [axis] ,[copymode])
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
* Rotates the given object or the objects contained in the given list with the given angle around the given center if provided, using axis as a rotation axis. 
* If axis is omitted,  the rotation will be around the vertical Z axis. 
* If copymode is True, the actual objects are not moved, but copies are created  instead. 
* Returns the objects (or their copies is copymode was True).

&lt;!--T:11--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.rotate(FreeCAD.ActiveDocument.ActiveObject,45)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft SVG</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>68148</id>
      <parentid>68147</parentid>
      <timestamp>2014-02-14T21:29:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rtn6vx0u5doowzo9s60is9jehaf8ryv</sha1>
      <text xml:space="preserve" bytes="3397">
&lt;!--T:1--&gt;
[[Image:Screenshot inkscape.jpg]]

===Opening=== &lt;!--T:2--&gt;
This function imports SVG files as workable 2D objects, as opposed to the built-in drawing module which imports svg files as sheet drawings.
The following SVG objects get imported at the moment:
* PATH objects
* LINE objects
* RECT objects
* CIRCLE objects
* ELLIPSE objects
* POLYGON objects
* POLYLINE objects

===Importing=== &lt;!--T:3--&gt;
Works the same way as opening but creates the objects in the active document instead of creating a new one.

===Exporting=== &lt;!--T:4--&gt;
The following objects can be exported in an SVG file:
* Lines and wires (polylines)
* Arcs and circles
* Faces
* Texts
* Dimensions

&lt;!--T:5--&gt;
Keep in mind that SVG is a 2D format, so all Z information will be disregarded (all objects will be flattened).

===Preferences=== &lt;!--T:6--&gt;
The following parameters can be specified in the [[Draft Preferences]] tab (menu Edit -&gt; Preferences -&gt; Draft):
* Import/Export -&gt; Import style: This lets you choose the way objects from the svg file will be drawn in FreeCAD. You can choose between:
** None: this is the faster way, there is no conversion, all objects will be black with 2px width (FreeCAD default)
** Use default color and linewidth: All imported objects will take current linewidth/color from the draft command bar
** Original color and linewidth: Objects will keep the color and linewidth (if specified) they have in the svg file
* Import/Export -&gt; Export Style: 
** Translated: All elements are translated that their coordinates are positive. This should aid display and printing. The output coordinate system is NOT cosistent between individualy exported elements.
** Raw: The position of all elements preserved. This intended for CAM usage for example in PyCAM. Layers or Slices exported individualy will match.
* General settings -&gt; Internal precision level:
** This value is used to check if a bezier curve segement has to be considered a straight line. If you import detailed paths, like rendered text, you may want to increase this setting up to 6. If you are working with Inkscape please consider to raise the precision in the SVG file, well. (Inkscape Menu -&gt; File -&gt; Inkscape Preferences -&gt; SVG Output -&gt; Numeric Precision)

===Unit Handling=== &lt;!--T:7--&gt;
When exporting, a User Unit (px) equals one millimeter. 

&lt;!--T:8--&gt;
When importing, the width, height and viewBox attributes are respected. All elements are scaled to their size in millimeter, which is FreeCAD internal unit. If the SVG does not contain information on its physical size, it is assumed to have 90 DPI resolution.
Using absoulte units in attributes inside the SVG should be avoided. Relative units like em,ex and % are currently not supported.

&lt;!--T:9--&gt;
The SVG Editor Inkscape currently works only with 90 DPI documents. No matter which unit is selected in Inkscape. All the output has to be considered converted to 90 DPI and '''rounded''' to 6 decimal places. As FreeCAD (and the SVG standard) is agnostic to the precision of rounding done in Inkscape these values will not be rounded on input. And odd values in millimeter will remain.
If you need the SVG import not to be rounded, work on User Units (px) in Inkscape. Scaling can be done after the import to FreeCAD or by changing the width, height and viewbox attributes.

&lt;!--T:10--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Draft Scale</title>
    <ns>0</ns>
    <id>484</id>
    <revision>
      <id>92767</id>
      <parentid>71688</parentid>
      <timestamp>2014-06-19T10:45:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>179ki9xe9uilz4sf25r5k5482on4um8</sha1>
      <text xml:space="preserve" bytes="2896">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Scale|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → Scale|Shortcut=S C|SeeAlso=[[Draft Clone|Draft Clone]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool scales selected object(s) around a base point. If no object is selected, you will be invited to select one. It can also be used to mirror objects.


[[Image:Draft_Scale_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select objects you wish to scale
# Press the {{KEY|[[Image:Draft Scale.png|16px]] [[Draft Scale]]}} button, or press {{KEY|S}} then {{KEY|C}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click another point on the 3D view, or type a [[Draft_Coordinates|coordinate]]

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* The x, y and z components of the second point define the scale factor. For example, (1,1,1) would do nothing, (2,2,2) would scale 2x in all directions, (-1,1,1) would mirror in x direction.
* Pressing {{KEY|ALT}} or {{KEY|C}} or clicking the {{KEY|'''Copy'''}} button will make a copy of the objects, instead of scaling the original. If you keep {{KEY|ALT}} pressed after clicking the second point, you will be able to place more copies, until you release the {{KEY|ALT}} key.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Pressing {{KEY|SHIFT}} will lock x and y values together, so the shape is not deformed.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current command.
* The resulting object is a [[Draft Clone]], which allows you to change the scale values after it has been created.
* Mirroring objects works by inverting the sign of one of the directions. For example, (-1,1,1) mirrors horizontally (on the X axis), and (1,-1,1) vertically (on the Y axis).

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Scale tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 scale (objects,vector,[center,copy,legacy])
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
* Scales the objects contained in objects (that can be a list of objects or an object) of the given scale factors defined by the given vector (in X, Y and Z directions) around the given center.
* If legacy is True, direct (old) mode is used, otherwise a parametric copy is made. 
* If copy is True, the actual objects are not moved, but copies are created instead. 
* The objects (or their copies) are returned.

&lt;!--T:11--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.scale(FreeCAD.ActiveDocument.ActiveObject,FreeCAD.Vector(2,2,2))
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Select</title>
    <ns>0</ns>
    <id>2634</id>
    <revision>
      <id>129717</id>
      <parentid>129716</parentid>
      <timestamp>2014-12-07T13:56:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0dkmv1qeuvapomhbmvc7vwy4a1tkn83</sha1>
      <text xml:space="preserve" bytes="1863">
&lt;!--T:1--&gt;
Select any component in FreeCAD is easy, simply click on it.

&lt;!--T:2--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Draft_selection_01.png|Clicking once on a face you select the face.
Image:Draft_selection_02.png|By clicking a second time on a selected face you select the full form. In the case of a polygon, the first click selects the one hand and the next the whole figure.
&lt;/gallery&gt;

&lt;!--T:3--&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Draft_selection_03.png|To select additional objects, hold down {{KEY | CTRL}}, validating with the left mouse button. In this way it is possible, for example, select only some edges of a polygon.
&lt;/gallery&gt;

&lt;!--T:4--&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Draft_Selection_Menu.png|To select all objects in the 3D view, go to Edit → Select All.
Image:Draft_selection_04.png|All objects in the screen FreeCAD are selected. May possibly be modified with [[File:Draft_Apply.png|24px]] {{KEY/it|[[Draft_Apply/it|Apply to selected objects]]}}
&lt;/gallery&gt;
&lt;/center&gt;

===Options=== &lt;!--T:5--&gt;
To change the color preset (overflight of the mouse) and the selection of an object, go to: Edit → Preferences → Display → Colors.

&lt;!--T:6--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FreeCAD_Menu_Edition_Peferences.png|To change the color preset (overflight of the mouse) and the selection of an object, go to: Edit → Preferences → Display → Colors.
Image:Draft_Preferences_Selection_Couleurs.png|Then go to the View → Colors → Selection. Select: Enables highlighting preset to highlight objects flown over by the mouse, or: Activate the selection highlight to highlight objects already selected. You can change the colors of each option.
&lt;/gallery&gt;
&lt;/center&gt;

&lt;!--T:7--&gt;
[[Category:User Documentation]]
[[Category:Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft SelectGroup</title>
    <ns>0</ns>
    <id>24772</id>
    <revision>
      <id>70870</id>
      <parentid>70869</parentid>
      <timestamp>2014-02-21T21:32:33Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>p8vyb0u2ypqcvcchksniehddr36b5bq</sha1>
      <text xml:space="preserve" bytes="477">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft SelectGroup|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Select group}}

==Description== &lt;!--T:2--&gt;
This tool allows you to select the contents of one or more selected groups.

==How to use== &lt;!--T:3--&gt;
# Select one or more groups in the Tree view
# Press the {{KEY|[[Image:Draft_SelectGroup.png|16px]] [[Draft SelectGroup|Add to group]]}} button


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft SelectPlane</title>
    <ns>0</ns>
    <id>2805</id>
    <revision>
      <id>100307</id>
      <parentid>100304</parentid>
      <timestamp>2014-07-29T21:04:58Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>7obfr3b5o78qg6gdb82ne20vpqjrrc4</sha1>
      <text xml:space="preserve" bytes="2764">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft SelectPlane|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Select Plane}}

==Description== &lt;!--T:2--&gt;
The Draft module features a working plane system, that allows you to specify a custom plane in the 3D space on which next Draft command will occur. There are several methods to define the working plane:
* From a selected face
* From the current view
* From a preset: top, frontal or lateral
* None, in which case the working plane is adapted automatically to the current view when you start a command, or to a face if you start drawing on an existing face.

&lt;!--T:3--&gt;
[[Image:Workingplane_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft SelectPlane.png|16px]] [[Draft SelectPlane|SelectPlane]]}} button.  If your button doesn't look like this, see this [[Basic_modeling_tutorial#DraftPlaneButton|note]].

==Options== &lt;!--T:5--&gt;
* To set the workplane to an existing face: select a face of an existing object in the 3D view, then press the {{KEY|[[Image:Draft SelectPlane.png|16px]] [[Draft SelectPlane|SelectPlane]]}} button
* Pressing the {{KEY|'''VIEW'''}} button will set the working plane as the view plane, perpendicular to the camera axis and passing through the (0,0,0) origin point.
* Pressing the {{KEY|'''NONE'''}} will unset any current working plane. The next 2D operations will be view-dependent.
* You can also specify an offset value, which will set your working plane at a certain distance from the plane you select.

==Scripting== &lt;!--T:6--&gt;
Working plane objects can easily be created and manipulated in scripts and [[macros]]. You can create your own, and use them independently of the current Draft working plane.

&lt;!--T:7--&gt;
Example:

&lt;syntaxhighlight&gt;
 import WorkingPlane
 myPlane = WorkingPlane.plane()
&lt;/syntaxhighlight&gt;


&lt;!--T:8--&gt;
You can also access the current Draft working plane:

&lt;syntaxhighlight&gt;
 import FreeCAD
 draftPlane = FreeCAD.DraftWorkingPlane
&lt;/syntaxhighlight&gt;


&lt;!--T:9--&gt;
To move or rotate the Draft working plane (see the [http://www.freecadweb.org/api/DraftWorkingPlane.html WorkingPlane API] page for available methods):

&lt;syntaxhighlight&gt;
 import FreeCAD
 from FreeCAD import Vector
 FreeCAD.DraftWorkingPlane.alignToPointAndAxis(Vector(0,0,0), Vector(1,1,1).normalize(), 17)
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
(note: a Draft command must have been issued to make grid adopt changes)

&lt;!--T:10--&gt;
The working plane has a complete [http://www.freecadweb.org/api/DraftWorkingPlane.html scripting API] on its own, with convenience functions to position it and convert to/from placements.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft SendToDrawing</title>
    <ns>0</ns>
    <id>733</id>
    <revision>
      <id>108080</id>
      <parentid>88996</parentid>
      <timestamp>2014-09-01T19:40:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft Shape2DView</title>
    <ns>0</ns>
    <id>1709</id>
    <revision>
      <id>70715</id>
      <parentid>67746</parentid>
      <timestamp>2014-02-21T19:54:42Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>jqzsnd1e6b5hdxu8btv8trp10ur2upx</sha1>
      <text xml:space="preserve" bytes="2131">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Shape2DView|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Shape 2D View}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool places in the document a 2D object which is a flattened view of a selected [[Part Module|Shape]]-based object.


[[Image:Draft_Shape2DView_example.jpg]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select the object you want to extract a 2D view from
# Press the {{KEY|[[Image:Draft Shape2DView.png|16px]] [[Draft Shape2DView]]}} button

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* If the selected object is an [[Arch SectionPlane]], the 2D projection will be of the contents of the Section plane, and the projection vector will be taken from the section plane instead of the Projection property below.
* The normal operating mode is '''Solid''', which projects the whole shape, but, if you selected some faces of the base object when creating the 2D view, you can also set the '''Individual Faces''' mode, which will project only the faces that were selected.
* If the selected object is an [[Arch SectionPlane]], a '''cutlines''' projection mode is also available, which projects only the edges being cut by the section plane.

==Properties== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{PropertyData|Projection}}: The direction of the projection.
* {{PropertyData|Projection Mode}}: The mode of the projection: solid, individual faces, or cutlines.

==Scripting== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
The Draft Shape2DView tool can by used in [[macros]] and from the python console by using the following function:


&lt;syntaxhighlight&gt;
 makeShape2DView (object,[projection],[facenumbers])
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
* Adds a 2D shape to the document, which is a 2D projection of the given object. 
* A specific projection vector can also be given. 
* Returns the generated object. 
* You can also provide a list of face numbers to be considered.

&lt;!--T:13--&gt;
Example:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.makeShape2DView(FreeCAD.ActiveDocument.ActiveObject)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft ShapeString</title>
    <ns>0</ns>
    <id>7461</id>
    <revision>
      <id>99443</id>
      <parentid>72476</parentid>
      <timestamp>2014-07-28T13:51:22Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>20kiuz5eg8s7g609rfyctzuxfw1vhh1</sha1>
      <text xml:space="preserve" bytes="2879">

&lt;!--T:13--&gt;
{{GuiCommand|Name=Draft ShapeString|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; ShapeString|Shortcut=S S}}

==Description== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
The ShapeString tool inserts a compound shape representing a text string at a given point in the current document.  Text height, tracking and font can be specified.

&lt;!--T:14--&gt;
[[Image:Draft_ShapeString_Example400.png]]

==How to use== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft_ShapeString16.png]] [[Draft ShapeString]]}} button, or press {{KEY|S}} then {{KEY|S}} keys
# Click a point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Enter the desired text, press {{KEY|ENTER}} 
# Enter the desired size, press {{KEY|ENTER}}
# Enter the desired tracking, press {{KEY|ENTER}}
# Press {{KEY|ENTER}} to accept the displayed font file, or,
# Press {{KEY|...}} to select a font file. 

==Options== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Pressing {{KEY|ESC}} will cancel the operation.
* You can set a default font file in Draft/Prefences.

==Properties== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* {{PropertyData|Position}}: The base point of the compound shape
* {{PropertyData|String}}: The contents of the text string
* {{PropertyData|Size}}: The height of the letters in FC units
* {{PropertyData|Tracking}}: The inter-character spacing in FC units
* {{PropertyData|Font File}}: The font definition file used to draw the string

==Scripting== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
The ShapeString tool can by used in [[macros]] and from the python console by using the following function:


{{Code|code=
makeShapeString(String,FontFile,[Size],[Tracking])
}}

&lt;!--T:15--&gt;
* Turns a text string into a Compound Shape using a specified font. 

&lt;!--T:11--&gt;
Example: 
{{Code|code=
 import FreeCAD,Draft
 Draft.makeShapeString(&quot;This is a sample text&quot;,
                       &quot;/usr/share/fonts/truetype/msttcorefonts/Arial.ttf&quot;,
                       200.0,10)
}}
 
==Selecting A Font== &lt;!--T:16--&gt;
[[Image:SSFontSelect.png]]

&lt;!--T:17--&gt;
ShapeString uses the internal geometry of a font to make FreeCAD shapes.  To do this it must read the actual font file (*.tff, etc).  If the Font Selection box is empty, you must type the full path to the font file or use {{KEY|...}} to select a font file. 
 
 
==Limitations== &lt;!--T:12--&gt;
* This tool is not available in FreeCAD versions anterior to 0.14
* TrueType(*.ttf), OpenType(*.otf) and Type1(*.pfb) font files are supported. 
* Very small text heights may result in deformed character glyphs due to loss of detail in scaling.  
* The current version is limited to left-to-right layouts on a horizontal baseline. 



</text>
    </revision>
  </page>
  <page>
    <title>Draft ShowSnapBar</title>
    <ns>0</ns>
    <id>24791</id>
    <revision>
      <id>94051</id>
      <parentid>70893</parentid>
      <timestamp>2014-07-02T14:07:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>3onsfkhjlsy3zgz0fvfje5ndttzjozz</sha1>
      <text xml:space="preserve" bytes="299">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ShowSnapBar|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → Utilities → Show Snap Bar}}

==Description== &lt;!--T:2--&gt;
This command shows and hides the [[Draft Snap|snapping]] toolbar.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Snap</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>101182</id>
      <parentid>100721</parentid>
      <timestamp>2014-08-01T08:58:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>link to Guicommand</comment>
      <sha1>s46uy44l0iury3moruiju8rjniel07a</sha1>
      <text xml:space="preserve" bytes="3188">
&lt;!--T:1--&gt;
Snapping means &quot;gluing&quot; your next 3d point onto an existing point. Snapping is available with most [[Draft Module|Draft]] and [[Arch Module|Arch]] tools, and can be enabled and disabled globally with the [[Image:Snap_Lock.png|32px]] [[#Options|Draft ToggleSnap]] command. Each snap location below can also be enabled or disabled individually by clicking the corresponding button on the snap toolbar.

&lt;!--T:2--&gt;
[[Image:Draft_Snap_example.jpg]]

==Available snap locations== &lt;!--T:3--&gt;
* [[Image:Snap_Midpoint.png|32px]] [[Draft_Midpoint|Midpoint]]: the middle point of line and arc segments
* [[Image:Snap_Perpendicular.png|32px]] [[Draft_Perpendicular|Perpendicular]]: on line and arc segments, perpendicularly to the latest point
* [[Image:Snap_Grid.png|32px]] [[Draft_ToggleGrid|Grid]]: the nodes of the Draft grid, if visible.
* [[Image:Snap_Intersection.png|32px]] [[Draft_Intersection|Intersection]]: the intersection of 2 line or arc segments. Hover the mouse over the two desired bjects to activate their intersection snaps
* [[Image:Snap_Parallel.png|32px]] [[Draft_Parallel|Parallel]]: on an imaginary line parallel to a line segment. Hover the mouse over the desired object to activate its parallel snap
* [[Image:Snap_Endpoint.png|32px]] [[Draft_Endpoint|Endpoint]]: the endpoints of line, arc and spline segments
* [[Image:Snap_Angle.png|32px]] [[Draft_Angle|Angle]]: the special cardinal points of circles and arcs, at 45° and 90°
* [[Image:Snap_Center.png|32px]] [[Draft_Center|Center]]: the center point of arcs and circles
* [[Image:Snap_Extension.png|32px]] [[Draft_Extension|Extension]]: on an imaginary line that extends beyond the endpoints of line segments. Hover the mouse over the desired object to activate its extension snap
* [[Image:Snap_Near.png|32px]] [[Draft_Near|Near]]: the closest point on the nearest object
* [[Image:Snap_Ortho.png|32px]] [[Draft_Ortho|Ortho]]: on imaginary lines that cross the last point, and extend at 0°, 45° and 90°
* [[Image:Snap_Dimensions.png|32px]] [[Draft_Dimensions|Dimensions]]
* [[Image:Snap_WorkingPlane.png|32px]] [[Draft_WorkingPlane|Restrict to working plane]]: always places the snapped point on the current [[Draft SelectPlane|working plane]], even if you snap to a point outside that working plane.

==Options== &lt;!--T:4--&gt;
* [[Image:Snap_Lock.png|32px]] [[Draft ToggleSnap|Lock]]: turns snapping on/off globally
* Certain additional snap locations can be obtained by combining 2 snap locations, such as ortho + extension, that will give you a snap point at the intersection of their imaginary lines.
* Other, more complex snap locations can also be obtained by using [[Draft Constrain|constraining]] (by pressing {{KEY|SHIFT}} or {{KEY|X}} or {{KEY|Y}} or {{KEY|Z}} while drawing).
* Pressing {{KEY|L}} while drawing locks the current angle of the line segment being drawn.
* The maximum distance at which a point is snapped a snap location is specified in the [[Draft Preferences|preferences]], and can also be changed on-the-fly by pressing {{KEY|&lt;nowiki&gt;[&lt;/nowiki&gt;}} or {{KEY|&lt;nowiki&gt;]&lt;/nowiki&gt;}} keys.

&lt;!--T:5--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Text</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>70728</id>
      <parentid>66025</parentid>
      <timestamp>2014-02-21T19:59:37Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>d8v3kgnqnnqfdjn0q4r1sj4sqgja5k9</sha1>
      <text xml:space="preserve" bytes="3120">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Text|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Text|Shortcut=T E}}

==Description== &lt;!--T:2--&gt;
The Text tool inserts a piece of text at a given point in the current document. It takes the [[Draft Linestyle|text size and color]] previously set on the Tasks tab.

&lt;!--T:3--&gt;
[[Image:Draft_Text_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Text.png|16px]] [[Draft Text]]}} button, or press {{KEY|T}} then {{KEY|E}} keys
# Click a point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Enter the desired text, pressing {{KEY|ENTER}} between each line
# Press {{KEY|ENTER}} twice to finish the operation.

==Options== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* Pressing {{KEY|CTRL}} will [[Draft_Snap|snap]] your point to available snap locations.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Pressing {{KEY|ESC}} will cancel the operation.
* When editing the text, pressing {{KEY|ENTER}} or {{KEY|DOWN ARROW}} allow you to enter or edit a next line of text.
* Pressing {{KEY|UP ARROW}} allows you to edit a previous line of text.
* Pressing {{KEY|ENTER}} '''twice''' (thus leaving the last line empty) adds the text to the document and closes the editor.

==Properties== &lt;!--T:7--&gt;
* {{PropertyData|Position}}: The base point of the text block
* {{PropertyData|Label Text}}: The contents of the text block
* {{PropertyView|Display Mode}}: Specifies if the text is aligned to the scene axes or always faces the camera
* {{PropertyView|Font Size}}: The size of the letters
* {{PropertyView|Justification}}: Specifies if the text is aligned to the left, right or center of the base point.
* {{PropertyView|Line Spacing}}: Specifies the space between lines of text
* {{PropertyView|Rotation}}: Specifies a rotation to be applied to the text
* {{PropertyView|Rotation Axis}}: Specifies the axis to use for the rotation
* {{PropertyView|Font Name}}: The font to use to draw the text. It can be a font name, such as &quot;Arial&quot;, a default style such as &quot;sans&quot;, &quot;serif&quot; or &quot;mono&quot;, or a family such as &quot;Arial,Helvetica,sans&quot; or a name with a style such as &quot;Arial:Bold&quot;. If the given font is not found on the system, a generic one is used instead.

==Scripting== &lt;!--T:8--&gt;
The Text tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeText (string or list, [Vector], [screenmode])
&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
* Creates a Text object, at the given point if a vector is provided, containing the string or the strings given in the list, one string by line.
* The current Draft color and text height and font specified in preferences are used. 
* If screenmode is True, the text always faces the view direction, otherwise it lies on the XY plane. 
* Returns the newly created object.

&lt;!--T:10--&gt;
Example:

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 Draft.makeText(&quot;This is a sample text&quot;,FreeCAD.Vector(1,1,0))

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ToggleConstructionMode</title>
    <ns>0</ns>
    <id>2811</id>
    <revision>
      <id>68683</id>
      <parentid>68682</parentid>
      <timestamp>2014-02-16T17:05:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>eesm8yfc2g3fykbrulahipym801cu0j</sha1>
      <text xml:space="preserve" bytes="1171">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ToggleConstructionMode|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Toggle construction mode}}

==Description== &lt;!--T:2--&gt;
The Draft module features a construction mode, which allows to draw certain objects in a special group, with a defined color, so it is easy to separate them from the other objects and switch it off when you don't need it, or delete them after you don't need them anymore.

&lt;!--T:3--&gt;
[[Image:Draft construction mode example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft ToggleConstructionMode.png|16px]] [[Draft ToggleConstructionMode|Toggle construction mode]]}} button
# Draw some objects
# Press the {{KEY|[[Image:Draft ToggleConstructionMode.png|16px]] [[Draft ToggleConstructionMode|Toggle construction mode]]}} button again to go back to normal mode

==Options== &lt;!--T:5--&gt;
* The Construction Mode button is also present on the Task panel or Draft toolbar when the Draft workbench is active
* The color and the group name can be changed in the [[Draft_Preferences|preferences screen]].



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ToggleContinueMode</title>
    <ns>0</ns>
    <id>4591</id>
    <revision>
      <id>72283</id>
      <parentid>70856</parentid>
      <timestamp>2014-02-26T22:22:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>pdkjy5nxd7dlvl0i6x90gj18249t2e8</sha1>
      <text xml:space="preserve" bytes="898">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ToggleContinueMode|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Toggle continue mode}}

==Description== &lt;!--T:2--&gt;
Some tools of the Draft and Arch modules feature a Continue checkbox, which, when checked, restarts the command after you finish it, so you don't need to press the command button again, and you can quickly create several objects in a row, one after the other. This command switches on/off this checkbox for the next commands.

==How to use== &lt;!--T:3--&gt;
# Press the {{KEY|[[Image:Draft ToggleContinueMode.png|16px]] [[Draft ToggleContinueMode|Toggle continue mode]]}} button
# Start a command that has a Continue checkbox, such as [[Draft Line]] or [[Arch Wall]]
# Cancel the command or press {{KEY|ESC}} to leave both the command and the continue mode.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ToggleDisplayMode</title>
    <ns>0</ns>
    <id>1361</id>
    <revision>
      <id>70867</id>
      <parentid>68770</parentid>
      <timestamp>2014-02-21T21:29:32Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>t6fnn63j6on4oeut0bkzldvemyvvzvg</sha1>
      <text xml:space="preserve" bytes="705">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ToggleDisplayMode|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Toggle display mode|Shortcut=Shift + Space}}

==Description== &lt;!--T:2--&gt;
This tool switches the display of selected object(s) between Wireframe and Flat Lines

==How to use== &lt;!--T:3--&gt;
# Select object(s)
# Press the {{KEY|[[Image:Draft_ToggleDisplayMode.png|16px]] [[Draft ToggleDisplayMode|Toggle display mode]]}} button or press the {{KEY|SHIFT}} and {{KEY|SPACEBAR}} keys

==Options== &lt;!--T:4--&gt;
* This as the same effect as changing the Display Mode property of objects between &quot;Wireframe&quot; and &quot;Flat Lines&quot;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ToggleGrid</title>
    <ns>0</ns>
    <id>24785</id>
    <revision>
      <id>70886</id>
      <parentid>70885</parentid>
      <timestamp>2014-02-21T21:41:04Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mmqecf9ijxcufxr4baqq4ytcjbeif69</sha1>
      <text xml:space="preserve" bytes="444">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ToggleGrid|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Toggle grid}}

==Description== &lt;!--T:2--&gt;
This commands toggles the display of the Draft grid on/off.

==Options== &lt;!--T:3--&gt;
The aspect and spacing of the Draft grid can be adjusted in the Draft preferences (Edit -&gt; Preferences -&gt; Draft -&gt; Visual Settings)


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft ToggleSnap</title>
    <ns>0</ns>
    <id>24779</id>
    <revision>
      <id>70880</id>
      <parentid>70879</parentid>
      <timestamp>2014-02-21T21:38:11Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>c9ce7c392v9lbsajriiue6dssz9lxp7</sha1>
      <text xml:space="preserve" bytes="281">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft ToggleSnap|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Toggle snap}}

==Description== &lt;!--T:2--&gt;
This command toggles [[Draft Snap|snapping]] on/off.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Trimex</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>92403</id>
      <parentid>70723</parentid>
      <timestamp>2014-06-18T20:21:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>bvfoxy7rndk1wp0fh3soku4tgjcw3gb</sha1>
      <text xml:space="preserve" bytes="1405">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Trimex|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Trim/Extend|Shortcut=T R|SeeAlso=[[Part Extrude|Part Extrude]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool trims/cuts and extends lines and polylines, and extrudes faces.


[[Image:Draft trimex example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a wire you wish to trim or extend, or select a face you wish to extrude
# Press the {{KEY|[[Image:Draft Trimex.png|16px]] [[Draft Trimex]]}} button, or press {{KEY|T}} then {{KEY|R}} keys
# Click a point in the 3D view

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* trimming or extending is decided automatically from the position of your mouse
* if you move the mouse cursor over another object, the trim/extend operation will snap to that object or segment
* pressing {{KEY|SHIFT}} will [[Draft_Constrain|constrain]] you to the segment currently being trimmed or extended
* pressing {{KEY|ALT}} will invert the direction of the trimming
* When the selected object is a face, or a face is selected from an existing object, the trimex tool switches to extrude mode. In extrude mode, pressing {{KEY|SHIFT}} frees the extrusion from the face normal and allows to snap elsewhere.

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
Not available. See the [[Part Extrude]] tool.


</text>
    </revision>
  </page>
  <page>
    <title>Draft UndoLine</title>
    <ns>0</ns>
    <id>2809</id>
    <revision>
      <id>70852</id>
      <parentid>68390</parentid>
      <timestamp>2014-02-21T21:21:04Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>jko8mnbnk6c4k7uj8s07vwzxtgd1v2j</sha1>
      <text xml:space="preserve" bytes="583">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft UndoLine|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; Undo Line|Shortcut=Ctrl + Z||SeeAlso=[[Draft FinishLine|FinishLine]], [[Draft CloseLine|CloseLine]]}}

==Description== &lt;!--T:2--&gt;
This command undoes the last segment of a [[Draft Wire]] being drawn.

==How to use== &lt;!--T:3--&gt;
# Start drawing a [[Draft Wire]]
# Press the {{KEY|[[Image:Draft UndoLine.png|16px]] [[Draft UndoLine|Undo]]}} button or press the {{KEY|CTRL}} + {{KEY|Z}} keys

&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Draft Upgrade</title>
    <ns>0</ns>
    <id>44</id>
    <revision>
      <id>92328</id>
      <parentid>66699</parentid>
      <timestamp>2014-06-18T16:49:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>bdqq9syk9rmvwdcv2odokbhm936gggy</sha1>
      <text xml:space="preserve" bytes="2112">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Upgrade|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Upgrade|Shortcut=U P|SeeAlso=[[Draft Downgrade|Draft Downgrade]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool upgrades selected objects in different ways. If no object is selected, you will be invited to select one.


[[Image:Draft_Upgrade_example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select one or more objects you wish to upgrade
# Press the {{KEY|[[Image:Draft Upgrade.png|16px]] [[Draft Upgrade]]}} button or press {{KEY|U}} then {{KEY|P}} keys

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The selected objects are modified/upgraded according to the following conditions (in order):
* if there are more than one face in the selection, the faces are merged (union)
* if there is only one face in the selection, nothing is done
* if there is only one open wire in the selection, it gets closed
* if there are only edges in the selection, all edges are joined into a wire (closed if possible)
* if none of the above is possible, a compound object is created

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The upgrade tool can be used from python scripts and [[macros]] like this:


&lt;syntaxhighlight&gt;
 Draft.upgrade(objects, delete=False, force=None)
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
* Upgrades the given object(s) (can be an object or a list of objects). 
* If delete is True, old objects are deleted.
* The force attribute can be used to force a certain way of upgrading. It can be: makeCompound, closeGroupWires, makeSolid, closeWire, turnToParts, makeFusion, makeShell, makeFaces, draftify, joinFaces, makeSketchFace, makeWires
* Returns a dictionnary containing two lists, a list of new objects and a list of objects to be deleted

&lt;!--T:11--&gt;
Some of the operations of the Upgrade tool can also be made with the [[Part Fuse]] or [[Draft Wire]] tools.

&lt;!--T:12--&gt;
Example:


&lt;syntaxhighlight&gt;
import Draft
mycircle = Draft.makeCircle(2)
face1 = Draft.upgrade([mycircle],True)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft VisGroup</title>
    <ns>0</ns>
    <id>32399</id>
    <revision>
      <id>90740</id>
      <parentid>90608</parentid>
      <timestamp>2014-06-12T12:37:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>6nv2d35cnwsh67wmnqlhpt3vg0e9xvi</sha1>
      <text xml:space="preserve" bytes="1116">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft VisGroup|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft -&gt; Utilities -&gt; VisGroup}}

==Description== &lt;!--T:2--&gt;
This command creates a special kind of FreeCAD group, with additional features: It allows to control visual features of the objects placed inside the group, such as line width, line color, shape color and transparency. By changing these properties on the VisGroup, the changes are propagated to the objects contained in the group.

&lt;!--T:3--&gt;
The VisGroup can also be used on [[Drawing Workbench|Drawing]] pages. You can then use it to control the color and linewidth of some Drawing Views. In that case, though, not all options are available, since, at the moment, Drawing Views don't support shape color or transparency.

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft_VisGroup.png|16px]] [[Draft VisGroup|VisGroup]]}} button
# Drag and drop objects inside the VisGroup
# Change some visual properties of the VisGroup, such as Line Color, Line Width, Shape Color or Transparency.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Wire</title>
    <ns>0</ns>
    <id>670</id>
    <revision>
      <id>116047</id>
      <parentid>116046</parentid>
      <timestamp>2014-10-24T20:54:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>081afzqg9mmwe3pg48s5317e50ve3vl</sha1>
      <text xml:space="preserve" bytes="4728">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft Wire|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|Shortcut=W I|MenuLocation=Draft → Wire|SeeAlso=[[Draft Line|Draft Line]], [[Draft BSpline|Draft BSpline]]}}

==Description== &lt;!--T:2--&gt;
The Wire tool creates a polyline (sequence of lines made of several segments) in the current [[Draft SelectPlane|work plane]]. It takes the [[Draft Linestyle|linewidth and color]] previously set on the Tasks tab. The Wire tool behaves like the [[Draft Line]] tool, except that it doesn't stop after two points.

&lt;!--T:3--&gt;
[[Image:Draft_Polyline_example.jpg|400px]]

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|[[Image:Draft Wire.png|16px]] [[Draft Wire]]}} button, or press {{KEY|W}} then {{KEY|I}} keys
# Click a first point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Click additional point on the 3D view, or type a [[Draft_Coordinates|coordinate]]
# Press {{KEY|F}} or {{KEY|C}}, or double-click the last point, or click on the first point to finish or close the wire. If the wire is closed, it will also be a face, even if it appears as wireframe.

==Options== &lt;!--T:5--&gt;
* Press {{KEY|F}} or the {{KEY|[[Image:Draft FinishLine.png|12px]] '''[[Draft_FinishLine|Finish]]'''}} button to finish the wire, leaving it open
* Press {{KEY|C}} or the {{KEY|[[Image:Draft CloseLine.png|12px]] '''[[Draft_CloseLine|Close]]'''}} button or click on the first point to finish the wire, but making it closed by adding a last segment between the last point and the first one.
* Press {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} after a point to constrain the next point on the given axis.
* To enter coordinates manually, simply enter the numbers, then press {{KEY|ENTER}} between each X, Y and Z component.
* Press {{KEY|R}} or click the checkbox to check/uncheck the {{KEY|'''Relative'''}} button. If relative mode is on, the coordinates of the next point are relative to the last one. If not, they are absolute, taken from the (0,0,0) origin point.
* Press {{KEY|T}} or click the checkbox to check/uncheck the {{KEY|'''Continue'''}} button. If continue mode is on, the Wire tool will restart after you finish or close it, allowing you to draw another one without pressing the Wire button again.
* Press {{KEY|CTRL}} while drawing to force [[Draft_Snap|snapping]] your point to the nearest snap location, independently of the distance.
* Press {{KEY|SHIFT}} while drawing to [[Draft_Constrain|constrain]] your next point horizontally or vertically in relation to the last one.
* Press {{KEY|W}} or press the {{KEY|[[Image:Draft Wipe.png|12px]] '''Wipe'''}} button to remove the existing segments and start the wire from the last point.
* Press {{KEY|CTRL}}+{{KEY|Z}} or press the {{KEY|[[Image:Draft UndoLine.png|12px]] '''[[Draft_UndoLine|Undo]]'''}} button to undo the last point.
* Press {{KEY|I}} or the {{KEY|'''Filled'''}} button to have the wire to appear as a face after it has been closed. This simply sets the View-&gt;Property of the Wire to &quot;Flat lines&quot; or &quot;Wireframe&quot;, so it can easily be changed later.
* Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button to abort the current Line command.
* Closed wires, when in &quot;Flat Lines&quot; display mode, can display a hatch pattern, by setting their &quot;Pattern&quot; property below.

==Properties== &lt;!--T:6--&gt;
* {{PropertyData|Closed}}: Specifies if the wire is closed or not
* {{PropertyData|Chamfer Size}}: Specifies the size of chamfered corners
* {{PropertyData|Fillet Radius}}: Specifies a curvature radius to give to the nodes of the wire
* {{PropertyView|End Arrow}}: Shows an arrow symbol at the last point of the wire, so it can be used as an annotation leader line
* {{PropertyView|Pattern}}: Specifies a hatch pattern to fill the wire with (Closed Wire)
* {{PropertyView|Pattern Size}}: Specifies the size of the hatch pattern

&lt;!--T:10--&gt;
See also [[Draft Pattern|Draft Pattern]] page.

==Scripting== &lt;!--T:7--&gt;
The Wire tool can by used in [[macros]] and from the python console by using the following function:

&lt;syntaxhighlight&gt;
 makeWire (list or Part.Wire, [closed], [placement], [facemode])
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
* Creates a Wire object from the given list of vectors or from the given wire.
** If closed is True or if first and last points are identical, the wire is closed.
** If facemode is True (and the wire is closed), the wire will appear filled. 
* The current Draft linewidth and color will be used.
* Returns the newly created object.

&lt;!--T:9--&gt;
Example: 

&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 p1 = FreeCAD.Vector(0,0,0)
 p2 = FreeCAD.Vector(1,1,0)
 p3 = FreeCAD.Vector(2,0,0)
 Draft.makeWire([p1,p2,p3],closed=True)


&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft WireToBSpline</title>
    <ns>0</ns>
    <id>2766</id>
    <revision>
      <id>70718</id>
      <parentid>67845</parentid>
      <timestamp>2014-02-21T19:55:38Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>6z9vycs9vbf4c79ecouj3qtl1z7szyh</sha1>
      <text xml:space="preserve" bytes="1253">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Draft WireToBSpline|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Drafting -&gt; Wire to BSpline}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This tool converts [[Draft Wire|Wires]] to [[Draft BSpline|BSplines]], and vice-versa.


[[Image:Draft Wire2BSpline example.jpg|400px]]


==How to use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Select a [[Draft Wire|wire]] or a [[Draft BSpline|BSpline]]
# Press the {{KEY|[[Image:Draft WireToBSpline.png|16px]] [[Draft WireToBSpline]]}} button

==Options== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* The original object will not be deleted after the operation, you must delete it manually if you wish so.

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
Not available, but creating a new object with the points from another one is easy, for example:

&lt;!--T:10--&gt;
* If the active object is a wire:


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 points = FreeCAD.ActiveDocument.ActiveObject.Points
 Draft.makeBSpline(points)
&lt;/syntaxhighlight&gt;


&lt;!--T:11--&gt;
* if the active object is a bspline


&lt;syntaxhighlight&gt;
 import FreeCAD,Draft
 points = FreeCAD.ActiveDocument.ActiveObject.Points
 Draft.makeWire(points)
&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Draft Workbench</title>
    <ns>0</ns>
    <id>374</id>
    <redirect title="Draft Module" />
    <revision>
      <id>1962</id>
      <timestamp>2009-03-14T01:04:39Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirecting to [[Draft Module]]</comment>
      <sha1>2g2y5wlcx3fgwi50hdis3t2sbaml7z3</sha1>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Draft Module]]</text>
    </revision>
  </page>
  <page>
    <title>Draft WorkingPlane</title>
    <ns>0</ns>
    <id>37912</id>
    <revision>
      <id>105817</id>
      <parentid>105816</parentid>
      <timestamp>2014-08-22T20:38:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tpaslbojb5u93x2j9em5ov9fj3x5r8g</sha1>
      <text xml:space="preserve" bytes="350">
&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Draft WorkingPlane|Workbenches=[[Draft Module|Draft]], [[Arch Module|Arch]]|MenuLocation=Draft → [[Draft Snap|Snap]] → WorkingPlane|Shortcut=|SeeAlso=}}


===Description=== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft Workingplane</title>
    <ns>0</ns>
    <id>599</id>
    <revision>
      <id>108141</id>
      <parentid>89146</parentid>
      <timestamp>2014-09-01T20:29:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Draft mapping files</title>
    <ns>0</ns>
    <id>45</id>
    <revision>
      <id>100546</id>
      <parentid>100545</parentid>
      <timestamp>2014-07-30T19:49:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2s1ztkrnro0b2xzgf6b89a1fofwf0ym</sha1>
      <text xml:space="preserve" bytes="3926">
&lt;!--T:1--&gt;
The Draft module is able to import files created form any program capable of exporting DXF files. But since FreeCAD is very different from [http://en.wikipedia.org/wiki/Autocad AutoCAD] and other usual 2D CAD programs, you might want to translate automatically the way DXF entities appear in FreeCAD.

&lt;!--T:2--&gt;
For example 2D CAD programs often use a black background, so you make your drawing using bright colors, like yellow, green, etc. Then, when you want to print your drawing, those ugly colors will be mapped to nice black colors with different linewidths.

&lt;!--T:3--&gt;
Since FreeCAD is not an AutoCAD clone, we don't need to stick to those ugly colors. The concepts of colors, linewidth, or layers are actually very different in FreeCAD. So, we can take advantage of this new environment and work, for example, with black lines on white background. We can also use different linewidths, so our drawing will look on the screen pretty much the same way as it will be printed (note that printing your drawing from FreeCAD is still not supported at the moment, a little bit more patience!).

&lt;!--T:4--&gt;
To use a mapping file, simply navigate to Edit -&gt; Preferences -&gt; Draft -&gt; dxf settings and select those two options:
* Import style: Map colors to linewidths
* Mapping file: navigate to a .csv file (see below)

&lt;!--T:5--&gt;
These settings will then be your defaults next time you import a DXF file.

&lt;!--T:6--&gt;
The Draft module accepts two types of .csv (comma- or tab-separated file) as mapping file:

====converting from autocad plot styles==== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[http://en.wikipedia.org/wiki/Autocad AutoCAD] saves its plot styles as .CTB files. If you open your plot style manager from AutoCAD, you will actually open an explorer window showing the location where those files are saved. The DXF importer cannot use these files directly because, you will have guessed, they are encoded. Fortunately, there is a nice free [http://www.noliturbare.com/index.php CTB viewer &amp; converter] that can convert CTB files to TAB-separated CSV files.
The .csv files generated by this program can be used immediately,  they can also be edited with any spreadsheet application.

====making your own .csv files==== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Making your own mapping files is very easy too. It can be made in a spreadsheet application or in any text editor. The rule is simple: you need 3 columns separated by a tabulation (hit the TAB key). First column is the AutoCAD color, second column is the FreeCAD linecolor RGB value formatted like this: 255,255,255 and the third column is the FreeCAD linewidth in pixels. The first line won't be read. So, you can make one like this, for example:


{|
|-
| dxf color
| freecad color
| freecad linewidth
|-
| 1
| 0,0,0
| 1
|-
| 2
| 0,0,0
| 2
|-
| 3
| 0,0,0
| 3
|-
| 4
| 0,0,0
| 4
|-
| 5
| 0,0,0
| 5
|-
| 6
| 0,0,0
| 6
|-
| 7
| 0,0,0
| 1
|-
| 8
| 80,80,80
| 1
|-
| 9
| 160,160,160
| 1
|}


&lt;!--T:11--&gt;
The above table would convert color 1 (red) to black (0,0,0)/1 pixel, color 2 (yellow) to black/2 pixels, color 8 (darkgrey) to some dark shade of grey(80,80,80) and 1 pixel wide, etc, etc. You can specify only the colors that you need. What you didn't specify will receive default color/linewidth.

&lt;!--T:12--&gt;
Don't forget that the first line won't be used, so you can use it for writing column titles for example.
If you write a .csv file in a spreadsheet application (such as [http://en.wikipedia.org/wiki/Openoffice OpenOffice]), be careful that sometimes your spreadsheet will think that something written 100,100,100 is one number (hundred million one hundred thousand hundred) and will want to remove the commas. Also, when you save the file as .csv, be sure to specify that it must be TAB-separated and not COMMA-separated.


&lt;!--T:13--&gt;
[[Category:Documentation]]
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Draft tutorial</title>
    <ns>0</ns>
    <id>459</id>
    <revision>
      <id>90098</id>
      <parentid>84857</parentid>
      <timestamp>2014-06-04T17:21:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>p2wy2l0z3lprbmpfxscs7u021tjf7kz</sha1>
      <text xml:space="preserve" bytes="19369">
&lt;!--T:1--&gt;
{{VeryImportantMessage|'''The Draft module has changed a lot since this tutorial was written. Several concepts are now different and might not work the way they are described below.'''}}

&lt;!--T:2--&gt;
This tutorial will teach you how to use FreeCAD's [[Draft Module|2D drafting module]] (also called Draft module) to create a simple architecture drawing. For this purpose, we will be drawing a simple masonry cabin. Let's assume that we received a CAD drawing showing the location of the cabin, and we'll use it to draw our project on top of it. We'll draw a plan, a section and two elevations.

==Before you begin== &lt;!--T:3--&gt;
Keep in mind that FreeCAD is still in an early stage of development, so you might not be as productive as with another CAD application, and you will certainly encounter bugs, or experience crashes. FreeCAD now has the ability to save backup files. The number of those backup files can be specified in the preferences dialog. Don't hesitate to allow 2 or 3 backup files until you know well how to deal with FreeCAD. 

&lt;!--T:4--&gt;
Save your work often, from time to time save your work under a different name, so you have a &quot;safe&quot; copy to fall back to, and be prepared to the possibilty that some commands might not give you the expected results.

==Setting up your FreeCAD workspace== &lt;!--T:5--&gt;
FreeCAD is a 3D modeler, but in this tutorial we will use it only for working in 2D. So, we will be drawing on the ground plane, and everything we do will have a Z coordinate of zero. So first, let's put ourselves in top view by pressing the {{KEY|2}} and be sure we are in orthographic projection (key {{KEY|O}}) otherwise we might get fooled by some perspective effects.

&lt;!--T:6--&gt;
Another very important thing to do, is to give custom [[Interface Customization|hotkeys]] to your Draft commands. So you can do all the commands from the keyboard, which will drastically improve your speed. Basically you can do about everything from the keyboard, and will need the mouse only to draw points and select objects. Go to menu Customize -&gt; Keyboard -&gt; Category Python and select shortcuts as you like, a good idea is to make them easy to remember. For example, I use L for Line, W for Polyline (also called Wire in FreeCAD), A for Arc, C for Circle, M for Move, R for Rotate, F for Offset (O is already taken by Orthographic), D for Dimension, T for Text, etc...

&lt;!--T:7--&gt;
Now we are set up, we can begin to draw.

==Importing CAD drawings== &lt;!--T:8--&gt;
If you are going to import a 2D cad drawing, chances are high that they will be in a proprietary format such as .dwg (from AutoCAD) or .mcd (from VectorWorks). The specification of those file formats are being kept secret by their vendors, so it is extremely difficult or totally impossible for FreeCAD to support them. However, One file format that is fairly well documented is the DXF format, and the Draft module supports it partially.

&lt;!--T:9--&gt;
Almost all CAD applications can export to the DXF format, and you also have several free converters such as openDWG's [http://www.opendesign.com/guestfiles/tx_sdk &quot;Teigha file Converter&quot;] utility, that will allow you to convert your file to the DXF format. For example, [http://www.doublecad.com/ Doublecad] is a free, fully functional CAD program that allows you to export DXF files:

&lt;!--T:10--&gt;
[[Image:Doublecad.jpg]]

&lt;!--T:11--&gt;
Open your DXF file simply with the File -&gt; Open dialog. Several import settings can be configured in the [[Draft Preferences]] screen. For example, you can configure if you want the DXF file to be imported with original colors and linewidths, or converted to current Draft color, that you see at the right side of the Draft command bar. But in FreeCAD you won't need to attribute ugly colors to your objects to determine their linewidth. Objects all have independent color and linewidth attributes. So, you can very well forget about DXF colors, or convert everything to the colors of your choice.

&lt;!--T:12--&gt;
After importing your drawing in FreeCAD, it will look like this:

&lt;!--T:13--&gt;
[[Image:situation.jpg]]

&lt;!--T:14--&gt;
Let's begin with doing some cleaning. 

&lt;!--T:15--&gt;
[[Image:tutorial-treeview.jpg|100px|left]] In FreeCAD, there are no layers like in AutoCAD. We work with groups instead. Groups are another more flexible way to organize your drawing. You can create new groups with a right-click on the tree view, rearrange them, move them into other groups, or move objects to/from groups simply by dragging and dropping things in the tree view. You can also assign current line width and colors to all objects in a group, or turn them on or off by pressing {{KEY|SPACE}}.

&lt;!--T:16--&gt;
Let's put all our objects into one new group, and turn off everything we won't use, like vegetation and dimensions, to speed up our work.

==Drawing the plan view== &lt;!--T:17--&gt;
===Using the drawing tools===
The only thing we'll need at the moment is the area that is assigned to our cabin. It lies in a separate group named &quot;projection&quot;. So we can basically turn off everything else with the {{KEY|SPACE}} key, and start drawing on top of it. We will draw a small cabin with a guard room and a WC, in very simple structural masonry, so there won't be any need for special concretework in the plan itself. But we'll put a layer of plaster inside, and a layer of ceramics outside.

&lt;!--T:18--&gt;
So, let's begin with doing the general shape of our walls:

&lt;!--T:19--&gt;
[[Image:draft-tutorial-01.jpg]]

&lt;!--T:20--&gt;
Our DXF drawing was drawn in meters, so unless we have any reason to change that, we'll continue with the same units. FreeCAD currently does not have a friendly system to work with real-world units, so we simply assume that &quot;one&quot; means &quot;one meter&quot;. 

&lt;!--T:21--&gt;
Another good thing to remember is to construct temporary geometry whenever you need. You want a point that lies 2 meters away horizontally? Draw a vertical line, move it 2m away, pass a horizontal line through it, there is your point.

&lt;!--T:22--&gt;
* Create a [[Draft Rectangle|rectangle]]: Snap its cornerpoints with {{KEY|CTRL}} to the corners of the assigned area
* [[Draft Offset|Offset]] the rectangle: With the rectangle selected, press [[Draft Offset|Offset]], press {{KEY|C}} to turn on copy mode, move your mouse inside the first rectangle so offset knows in which direction to go, and type 0.20, Enter
* Turn them into a face: [[Draft Upgrade|Upgrade]] the first rectangle, upgrade the second rectangle, then select the outer rectangle, CTRL-select the inner rectangle and press [[Draft Downgrade|Downgrade]]
* Create the door opening: Make a 1.00 x 0.50 rectangle, [[Draft Move|move]] it to the upper corner of our main wall (press {{KEY|C}} to turn copy mode off).
* [[Draft Move|Move]] the door opening to the right position: Move it 0.10 to the left. We won't put our opening directly on the corner, because it would make the door difficult to open.
* Subtract the door opening: Select the wall, CTRL-select the door opening, and press [[Draft Downgrade|downgrade]].

===A note about upgrade &amp; downgrade=== &lt;!--T:23--&gt;
Now, you must be aware that the openCasCade kernel that FreeCAD is built upon, is a 3D kernel. It is made primarily for 3D operations. When it has to cut or unite planar faces, like we are doing now with upgrade/downgrade operations, it sometimes does strange things, and subsequent operations (like other upgrades/downgrades) sometimes don't give the expected results. Of course with time those behaviours will end up being corrected by the FreeCAD developers, but it is wise to know alternative ways to solve immediate problems.

&lt;!--T:24--&gt;
The best way to solve a face that isn't upgrading/downgrading/offsetting correctly, is simply to downgrade it until it is all exploded to single edges, then upgrade those edges together again up to a new face. In case that doesn't work either, simply redraw a new wire (polyline) on top of the problematic face, snapping to its endpoints, then delete the old face and upgrade the new wire. Usually a face that you draw yourself is in much better shape than a face that you obtained by upgrade/downgrade.

&lt;!--T:25--&gt;
Another thing to keep in mind is that when you subtract a shape from another, you can find yourself with one object containing several faces. This might difficult your further work (they don't offset correctly, etc), so a good thing in that case is always to separate them with the downgrade tool.

===Another note about snapping=== &lt;!--T:26--&gt;
There are two forms of snapping in the Draft module: passive snap, which occurs when you simply pass your mouse cursor over an object (an open circle symbol appears), and active snap, which is when you press {{KEY|CTRL}}. Active snapping allows you to snap to specific points on an object, like its endpoints, midpoints, centers, or intersections with other objects. If you press {{KEY|SHIFT}}, which is the key for constraining horizontally and vertically, you gain even more snapping points. But this has a cost, because FreeCAD must do many calculations in real time. If you have many objects, you'll begin to feel the difference. So a good trick to speedup your work is to take the habit of working as much as possible with {{KEY|SHIFT}} and passive snapping only. You will see quickly that you'll obtain accurate results and work much faster.

&lt;!--T:27--&gt;
So let's go back to work:

&lt;!--T:28--&gt;
* Create a 10cm-wide wall between the main room and the WC. Upgrade it, then upgrade it together with the main wall to unite them
* Create other rectangles for your other openings. I put a 60cm-wide window in what will become the WC, a 80cm door between the main room and the WC, and for the big window in the main room I simply left 40cm wall at the left and right side.
* Offset all the walls of 1cm, to make a cement/plaster layer, then downgrade the offsetted copies to turn them into simple wires
* Create a layer of ceramics on the exterior side, by offsetting our plaster line 2cm, then drawing a 2cm-thick shape between the two lines
* Delete the 2cm offset. that we don't need anymore, as well as all construction geometry. If you feel you might need them later, simply put them in a separate group and turn that group off with {{KEY|SPACE}}.

&lt;!--T:29--&gt;
This is where we are now (I kept construction geometry there, in blue, for you to see):

&lt;!--T:30--&gt;
[[Image:draft-tutorial-walls.jpg]]

=== Importing and building compound objects === &lt;!--T:31--&gt;
In FreeCAD, compound objects are objects made with the geometry of several other objects. In other softwares, it is called blocks, symbols or components. It is a very handy way to group geometry under one single object. Any of the objects created with the draft module can be grouped into a compound. The command to create a compound is the [[Draft Upgrade|Upgrade]] command. The use is simple, select everything you want to turn into a compound, and press Upgrade. If no other more intelligent shape can be created, they will be turned into a compound.

&lt;!--T:32--&gt;
Using compound geometry is specially useful to build a symbol library on your disk, so you can reuse them later. One cool use of this, coupled to the DXF import function, is that you can very easily use symbol libraries in DXF format (if your symbols are in dwg format, the free [http://www.opendesign.com/guestfiles/tx_sdk &quot;Teigha file Converter&quot;] application can batch-convert all your library at once).

&lt;!--T:33--&gt;
Once you have a library of DXF symbols, just drag one of them and drop it on top of your open FreeCAD window and it will be imported in the current document. It won't be imported as a compound, but all of the symbol geometry will be placed in a separate group, so it is easy to select it all and simply press &quot;Upgrade&quot;. Beware that AutoCAD users have the bad habit of drawing things very far from the origin point (0,0,0), your inserted symbol can then lie very far from your drawing zone.

&lt;!--T:34--&gt;
So, back to our drawing:
* Import a sanitary block if you have one, or pick one on the [http://cben.net/ Cad Exchange] site, and convert it to DXF with the [http://www.opendesign.com/guestfiles/tx_sdk &quot;Teigha file Converter&quot;]
* Create the geometry for a door, [[Draft Upgrade|upgrade]] it to a compound, [[Draft Move|copy]] it to the other door location, [[Draft Downgrade|downgrade]] it, adjust the elements to the new size, and upgrade it again
* Do the same for the windows

&lt;!--T:35--&gt;
[[Image:Draft-tutorial-blocks.jpg]]

=== Dimensions and annotations === &lt;!--T:36--&gt;
Now that our plan is more or less ready, we can add [[Draft Dimension|dimensions]] and [[Draft Text|texts]]. This is usually pretty straightforward, so there is probably no need to explain much. Just try to dimension everything, and as a convention, always start the dimension lines from the main wall line, not the finishing layer. One thing is good to know, sometimes you draw a text or a dimension over a filled area, and the filled area will cover your dimension. There is a simple way to fix that, it is by downgrading and upgrading again the filled area. It will then be displayed under the other elements.

&lt;!--T:37--&gt;
The dimension and text will by default have the same text height, which can be changed in the [[Draft Preferences]] page. You can then edit individually each text height.

&lt;!--T:38--&gt;
Unfortunately certain non-geometry objects like texts and dimension are still not selectable in the FreeCAD 3D view, you must therefore select them in the tree, and you won't be able to snap to them, but this will probably be solved in a near future. It is also not possible at the moment to choose a font style. To align dimensions, at the moment, you need to draw a line first, then snap your dimensions to that line.

&lt;!--T:39--&gt;
[[Image:Draft-tutorial-dims.jpg]]

===Organizing=== &lt;!--T:40--&gt;

&lt;!--T:41--&gt;
[[Image:Draft-tutorial-typical-tree.jpg|left]]
Finally, we can add a few things to finish our plan, like putting vegetation around the cabin. We can simply copy a few trees from our imported DXF drawing and scale them down with the [[Draft Scale|scale]] tool, to for example (0.5,0.5). We can also change the line thickness of a couple of objects, for example make the walls thicker, and change the color of some things. And we can organize all our elements in groups. 

&lt;!--T:42--&gt;
The ability to organize your work in nested groups is surely one of the big advantages of groups over traditional work with layers. In this tutorial, I grouped my objects by type, inside the Plan group. For example, instead of having one big layer with all dimensions of your drawing, each part of the drawing will contain their own dimensions group, making it extremely easy to organize your drawing.

&lt;!--T:43--&gt;
You might feel a loss at first if you come from a traditional drawing program like AutoCAD, but you'll quickly see the power that this method brings.

&lt;!--T:44--&gt;
For example, all our construction geometry can go in a separate group, that we'll turn off. Maybe later we'll need to make some changes, and it will be handy to have that geometry available.

&lt;!--T:45--&gt;
So, now we are ready to draw other parts...


==Drawing the elevations== &lt;!--T:46--&gt;

&lt;!--T:47--&gt;
[[Image:Draft-tutorial-elevation.jpg|left]]
Since in this exercise we are going to stay in pure 2D, we will draw our elevations and sections directly. In more advanced architecture environments (what FreeCAD will hopefully become in some future), we wouldn't need to draw the elevations. We would model the building in 3D and then generate the different views automatically. But for the sake of this exercise (and also because all the needed tools are still not implemented in FreeCAD), we'll do it by hand, like in the old times.

&lt;!--T:48--&gt;
We'll begin with the rear wall elevation, because the way our plan is oriented, it can be drawn directly below it, without the need to rotate the view. We will simply draw construction lines from the plan, set horizontal lines to the desired heights, I set the 0.00 level, the +0.15 level of the slab, then heights for the windows, and the roof slab at +2.50. We can then draw our geometry very quickly on top of it.

&lt;!--T:49--&gt;
We can then place a couple of annotations, dimensions, and upgrade some of the objects so they appear filled with a color. Finally, we can make a bit of cleaning by creating a &quot;South Elevation&quot; group, then subgroups for our construction geometry and annotations, and place all of our new objects in them.

&lt;!--T:50--&gt;
{{clear}}

===Rotating the view, and creating macros=== &lt;!--T:51--&gt;
Now, we need to draw other elevations of our little building. The simplest way would be to draw them directly under the plan view, as we did with the south elevation. For this, it would be handy to be able to rotate the view by 90°, so we can continue drawing our elevations &quot;on foot&quot;. Unfortunately, FreeCAD has at the moment no &quot;Rotate View&quot; tool. But, fortunately, it has tools for us to easily create our own tools, called Macros. So, this is a good opportunity for us to try something easy.

&lt;!--T:52--&gt;
Macros, as well as all scripting in FreeCAD, is done in a very simple programming language called [http://www.python.org python]. You can write very complex programs in FreeCAD in python, but you can also use it to perform very simple operations where there still isn't a proper FreeCAD toolbar icon, such as our Rotate The View tool. So, first thing to do, open the Report view, if you closed it, and select the python tab. In there, type (or copy/paste) the following code:

&lt;syntaxhighlight&gt;
 import math
 from pivy import coin
 cam = Gui.ActiveDocument.ActiveView.getCameraNode()
 rot = coin.SbRotation()
 rot.setValue(coin.SbVec3f(0,0,1),math.pi/2)
 cam.orientation = rot
&lt;/syntaxhighlight&gt;

&lt;!--T:53--&gt;
This small script will simply rotate the view by 90° (left). For rotating by -90° (right), you would simply change math.pi/2 by -math.pi/2. If you would like to learn more about python scripting in FreeCAD, there is an extensive [[Scripting]] section on this wiki.

&lt;!--T:54--&gt;
Now, we need to do one more step, which is save our piece of code in a macro, so we can reuse it later. So, instead of pasting our code in the python interpreter, let's open the macro manager (Tools -&gt; Macros), create a new macro, press the &quot;Edit&quot; button and paste our code in it. Close the macro editor tab, and the macro will be saved.

&lt;!--T:55--&gt;
The macros can behave like any other FreeCAD tool. With the Tools -&gt; Customize menu, we can add an icon to our macro, a keyboard shortcut, and add it to a toolbar.

===Drawing the rotated views=== &lt;!--T:56--&gt;

&lt;!--T:57--&gt;
[[Image:Draft-tutorial05.jpg|340px|left]]

&lt;!--T:58--&gt;
Now that we can rotate the view at will, we can draw our other elevations. The easiest way is to draw your elevation at the right place under the plan view, and use a &quot;mirror&quot; (a 45°-oriented line) to push the height lines from another elevation. This way, drawing goes pretty fast.

&lt;!--T:59--&gt;
{{clear}}

&lt;!--T:60--&gt;
Finally, we draw 2 others elevations, and since the fourth one is the same as the second one (but mirrored), we will skip it. We can then draw a cross section, and our drawing is complete:

&lt;!--T:61--&gt;
[[Image:Fctutorial-complete.jpg]]

&lt;!--T:62--&gt;
To be continued...



&lt;!--T:63--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Annotation</title>
    <ns>0</ns>
    <id>17791</id>
    <revision>
      <id>76114</id>
      <parentid>75954</parentid>
      <timestamp>2014-03-15T23:04:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>kag7i3kuuzd0smuqqr8nfourxtfsvxf</sha1>
      <text xml:space="preserve" bytes="873">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Annotation|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Annotation|Shortcut=none}}

== Description == &lt;!--T:2--&gt;

&lt;!--T:5--&gt;
This command allows you to place a block of text on a [[Drawing Landscape A3|Drawing page]].

== How to use == &lt;!--T:3--&gt;

&lt;!--T:6--&gt;
# Create a [[Drawing Landscape A3|Drawing page]]
# [[Std_Refresh|Refresh]] the view if a Drawing view wasn't opened
# Press the {{KEY|[[Image:Drawing Annotation.png|16px]] [[Drawing Annotation]]}} button
# Adjust the desired properties, such as text contents, font, size and position.

== Limitations == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* Texts spanned on multiple lines are not supported by the internal Qt-based Svg viewer, but the [[Drawing Openbrowser|Open Browser]] command shows these texts correctly.

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Clip</title>
    <ns>0</ns>
    <id>26961</id>
    <revision>
      <id>92533</id>
      <parentid>75966</parentid>
      <timestamp>2014-06-18T21:22:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>esv29efhlka8af2kqm2boaqp9y7imxe</sha1>
      <text xml:space="preserve" bytes="1136">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Clip|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Clip|Shortcut=none}}

== Description == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This command allows you to place a clipping rectangle on a [[Drawing Landscape A3|Drawing page]]. [[Drawing View]] objects can then be added to that clipping rectangle, and their display will be truncated by the borders of the rectangle.

== How to use == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Create a [[Drawing Landscape A3|Drawing page]]
# [[Std_Refresh|Refresh]] the view if a Drawing view wasn't opened
# Press the {{KEY|[[Image:Drawing Clip.png|16px]] [[Drawing Clip]]}} button
# Adjust the desired properties, such as size and position.
# Drag and Drop [[Drawing View]] objects on the Clip object in the Tree View

== Options == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* A property allows you to show or hide the clipping rectangle itself.

== Limitations == &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* Clipping objects are not displayed properly by the internal Qt-based Svg viewer, but the [[Drawing Openbrowser|Open Browser]] command shows them correctly.

</text>
    </revision>
  </page>
  <page>
    <title>Drawing Documentation</title>
    <ns>0</ns>
    <id>3983</id>
    <revision>
      <id>128121</id>
      <parentid>127174</parentid>
      <timestamp>2014-12-03T21:54:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>k5d96u02chdqr3a0zxv9q06eqznsup2</sha1>
      <text xml:space="preserve" bytes="6553">
&lt;!--T:1--&gt;
This page documents jcc242's understanding of the Drawing module. It includes files and features that he is currently working on and may not yet be in the master branch. The source for those files is on [https://github.com/jcc242/FreeCAD his Github], but be careful as that is very unstable!

== Base (Mod/Drawing) == &lt;!--T:2--&gt;

=== gdtsvg.py === &lt;!--T:3--&gt;
Python script that generates svg snippets for things such as gd&amp;t symbols, dimension symbols, and basic svg elements such as lines, circles, and paths.

&lt;!--T:4--&gt;
It has several support files that don't really do much. Run DrawingTest.py to create a bunch of svg icons in the icon directory that previews various icons in the gdtsvg.py file. settingslist.py and dimesettings, and convert.py are all deprecated from older settings methods and should probably be removed as the Drawing branch approaches merging into master. 

=== DrawingAlgos.py === &lt;!--T:5--&gt;
Creates svg lines from a list of vertices, supports both hidden and visible edges. Should probably be merged with gdtsvg.py as that file matures.
 
==== createSVG ====
Accepts part as an argument, projects the part into lines from the Drawing.project object and then draws creates the svg for each line.

== App == &lt;!--T:6--&gt;
Contains the backend side of the drawing module.

=== AppDrawing.cpp === &lt;!--T:7--&gt;
Initializes the various namespaces and modules and stuff used in the drawing module. Will throw an error if it cannot load the Part module.

=== DrawingExport.cpp === &lt;!--T:8--&gt;
Two classes: SVGOutput and DXFOutput. They both contain methods to put out the code in their respective language. Typically require an object of the appropriate typedef, and sometimes some additional identifier information.

=== FeatureClip.cpp === &lt;!--T:9--&gt;
Callback (?) methods for the feature clipping gui, so it would seem. Called alone it will create the clip path, if ShowFrame.getValue is TRUE set it will show the frame border as well.

=== FeaturePage.cpp === &lt;!--T:10--&gt;
Manages the views. 

&lt;!--T:11--&gt;
onChanged() for doing stuff when properties get changed. 

&lt;!--T:12--&gt;
execute() for recalculating a feature view, or so it claims. It seems to have stuff for checking for editable texts and saving drawings. Need to investigate further.

&lt;!--T:13--&gt;
getEditableTextsFromTemplate() for retrieving text that can be edited by FreeCAD from an SVG file.

=== FeatureProjection.cpp === &lt;!--T:14--&gt;
Flattens object to a 2D image?

=== FeatureView.cpp === &lt;!--T:15--&gt;
Defines the properties for views.

=== FeatureViewAnnotation.cpp === &lt;!--T:16--&gt;
Defines properties for annotations (right now just text), has an execute method to update the text if changed/moved.

=== FeatureViewPart.cpp === &lt;!--T:17--&gt;
Constructor to add properties. Gets appearance stuff for projected parts.

=== PageGroup.cpp === &lt;!--T:18--&gt;
Just adds a property for a list of pages, does not much else.

=== Precompiled.cppp === &lt;!--T:19--&gt;
Just #include &quot;PreCompiled.h&quot;

=== ProjectionAlgos.cpp === &lt;!--T:20--&gt;
The constructor just runs the execute() method to update it's stuff

&lt;!--T:21--&gt;
invertY: since SVG does its y-axis backwards to every other coordinate system in the world, we must invert it when converting from a FreeCAD part to an SVG projection for the Drawing view.

&lt;!--T:22--&gt;
getSVG: fetches the SVG code from the DrawingExport stuff. Formats depending on type of line (hidden or not and some other stuff I need to figure out).

&lt;!--T:23--&gt;
getDXF: same as getSVG except for DXF format.


== Gui == &lt;!--T:24--&gt;

=== AppDrawingGui.cpp === &lt;!--T:25--&gt;
Initializes the drawing gui.

=== AppDrawingGuiPy.cpp === &lt;!--T:26--&gt;
Provides opening, importing, and exporting interfaces? Looks like it is python accessible.

=== Command.cpp === &lt;!--T:27--&gt;
Handles commands (from the toolbar?) such as creating new drawings and stuff. It looks like this handles QT calls from clicking the button to whatever command it needs to go to e.g. clicking the CmdDrawingOrthoViews button will show the Ortho views gui in the task dialog spot.

=== DrawingView.cpp === &lt;!--T:28--&gt;
Does a bunch of qt gui stuff, need to read more on it.

=== TaskDialog.cpp === &lt;!--T:29--&gt;
Creates the task dialog thing on the side and probably switches to it from the tree view, as appropriate.

=== TaskOrthoViews.cpp === &lt;!--T:30--&gt;
Creates the task dialog for placing the orthographic views!

&lt;!--T:31--&gt;
Does a lot of the calculations for where to position stuff (automatic calculations as well, it seems).

&lt;!--T:32--&gt;
Takes the input from the TaskOrthoViews gui and does stuff with it. Uses the single inheritance method talked about [http://doc.qt.digia.com/qt/designer-using-a-ui-file.html on the qt website].

=== ViewProviderPage.cpp === &lt;!--T:33--&gt;
Constructor adds some properties for the view stuff.
Destructor does nothing.
Attaches something (attaches what? attaches the view to the page?) sets and gets display modes (what are display modes? what do they do and what are possible options?)
Does something about updating some kind of data has a context menu that says &quot;Show drawing&quot;, figure out what this means
Has a thing for double clicking to select the view (I think?)

&lt;!--T:34--&gt;
showDrawingView seems to do some work on settings things up: gets the current document, sets the window icon and title, adds it to the main window (of FreeCAD?)

=== ViewProviderView.cpp === &lt;!--T:35--&gt;
Doesn't seem to do much, though I am sure it is important.

=== Workbench.cpp === &lt;!--T:36--&gt;
Adds the icons to the toolbars and stuff.

= Workflow = &lt;!--T:37--&gt;

== Program Flow == &lt;!--T:38--&gt;
CanvasView is the actual QGraphicsScene object and DrawingView processes a list of FeatureView that are linked by reference in /App/FeatureViewPage. DrawingView then chooses the appropriate QGraphicsItem class (QGraphicsItemViewPart or QGraphicsItemViewDimension) and then calls a function in CanvasView to create this and add it to the scene.

== Adding commands to the Drawing Workbench == &lt;!--T:39--&gt;
4 simple steps:
# Add a class to Command.cpp. Follow the others for an example of the formatting.
# Add a title, icon, tooltip, etc., again, follow the existing classes in command.cpp
# Add your class to the bottom of Command.cpp
# Add your information to Workbench.cpp, this will tell FreeCAD/Drawing module where to place the icons defined in command.cpp  in the actual freecad interface (the toolbars, dropdowns, etc.)

&lt;!--T:40--&gt;
[[Category:Developer_Documentation]]
[[Category:Developer]]
[[Category:Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Icon</title>
    <ns>0</ns>
    <id>51416</id>
    <revision>
      <id>130181</id>
      <parentid>130180</parentid>
      <timestamp>2014-12-08T19:58:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>etzzzvwajtq0bto8jqm03swfs3w1yqb</sha1>
      <text xml:space="preserve" bytes="2324">
==[[Image:Drawing Open SVG.png|32px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Drawing Open SVG.png|32px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Open SVG]]
 &lt;nowiki&gt;[[Image:Drawing Open SVG.png|32px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Open SVG]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Drawing Landscape A3.png|32px|Drawing Landscape A3|link=Drawing Landscape A3]] [[Drawing Landscape A3|Drawing Landscape A3]]
 &lt;nowiki&gt;[[Image:Drawing Landscape A3.png|32px|Drawing Landscape A3|link=Drawing Landscape A3]] [[Drawing Landscape A3|Drawing Landscape A3]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Drawing View.png|32px|Drawing View|link=Drawing View]] [[Drawing View|Drawing View]]
 &lt;nowiki&gt;[[Image:Drawing View.png|32px|Drawing View|link=Drawing View]] [[Drawing View|Drawing View]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Drawing Orthoviews.png|32px|Drawing Orthoviews|link=Drawing Orthoviews]] [[Drawing Orthoviews|Drawing Orthoviews]]
 &lt;nowiki&gt;[[Image:Drawing Orthoviews.png|32px|Drawing Orthoviews|link=Drawing Orthoviews]] [[Drawing Orthoviews|Drawing Orthoviews]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Drawing Openbrowser.png|32px|Drawing Openbrowser|link=Drawing Openbrowser]] [[Drawing Openbrowser|Drawing Openbrowser]]
 &lt;nowiki&gt;[[Image:Drawing Openbrowser.png|32px|Drawing Openbrowser|link=Drawing Openbrowser]] [[Drawing Openbrowser|Drawing Openbrowser]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Drawing Annotation.png|32px|Drawing Annotation|link=Drawing Annotation]] [[Drawing Annotation|Drawing Annotation]]
 &lt;nowiki&gt;[[Image:Drawing Annotation.png|32px|Drawing Annotation|link=Drawing Annotation]] [[Drawing Annotation|Drawing Annotation]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Drawing Clip.png|32px|Drawing Clip|link=Drawing Clip]] [[Drawing Clip|Drawing Clip]]
 &lt;nowiki&gt;[[Image:Drawing Clip.png|32px|Drawing Clip|link=Drawing Clip]] [[Drawing Clip|Drawing Clip]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Drawing Save.png|32px|Drawing Save|link=Drawing Save]] [[Drawing Save|Drawing Save]]
 &lt;nowiki&gt;[[Image:Drawing Save.png|32px|Drawing Save|link=Drawing Save]] [[Drawing Save|Drawing Save]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Key</title>
    <ns>0</ns>
    <id>51438</id>
    <revision>
      <id>131441</id>
      <parentid>130861</parentid>
      <timestamp>2014-12-13T21:11:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>dkw8pyo6fyq5e0sp0do1rj9v7mb8708</sha1>
      <text xml:space="preserve" bytes="2457">
==[[File:Drawing Open SVG.png|32px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Drawing Open SVG.png|16px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Open SVG]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Open SVG.png|16px|Drawing Open SVG|link=Drawing Open SVG]] [[Drawing Open SVG|Drawing Open SVG]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Drawing Landscape A3.png|16px|Drawing Landscape A3|link=Drawing Landscape A3]] [[Drawing Landscape A3|Drawing Landscape A3]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Landscape A3.png|16px|Drawing Landscape A3|link=Drawing Landscape A3]] [[Drawing Landscape A3|Drawing Landscape A3]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Drawing View.png|16px|Drawing View|link=Drawing View]] [[Drawing View|Drawing View]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing View.png|16px|Drawing View|link=Drawing View]] [[Drawing View|Drawing View]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Drawing Orthoviews.png|16px|Drawing Orthoviews|link=Drawing Orthoviews]] [[Drawing Orthoviews|Drawing Orthoviews]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Orthoviews.png|16px|Drawing Orthoviews|link=Drawing Orthoviews]] [[Drawing Orthoviews|Drawing Orthoviews]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Drawing Openbrowser.png|16px|Drawing Openbrowser|link=Drawing Openbrowser]] [[Drawing Openbrowser|Drawing Openbrowser]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Openbrowser.png|16px|Drawing Openbrowser|link=Drawing Openbrowser]] [[Drawing Openbrowser|Drawing Openbrowser]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Drawing Annotation.png|16px|Drawing Annotation|link=Drawing Annotation]] [[Drawing Annotation|Drawing Annotation]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Annotation.png|16px|Drawing Annotation|link=Drawing Annotation]] [[Drawing Annotation|Drawing Annotation]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Drawing Clip.png|16px|Drawing Clip|link=Drawing Clip]] [[Drawing Clip|Drawing Clip]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Clip.png|16px|Drawing Clip|link=Drawing Clip]] [[Drawing Clip|Drawing Clip]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Drawing Save.png|16px|Drawing Save|link=Drawing Save]] [[Drawing Save|Drawing Save]]}}
 &lt;nowiki&gt;{{KEY|[[File:Drawing Save.png|16px|Drawing Save|link=Drawing Save]] [[Drawing Save|Drawing Save]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Drawing Landscape A3</title>
    <ns>0</ns>
    <id>1856</id>
    <revision>
      <id>55977</id>
      <parentid>55976</parentid>
      <timestamp>2013-12-19T20:23:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dmq90582dnq1trp67kscpvrz1ap1hbh</sha1>
      <text xml:space="preserve" bytes="1342">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Landscape A3|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Insert new drawing → A3 Landscape|Shortcut=none}}

&lt;!--T:2--&gt;
This tool creates a new drawing sheet from already installed templates. Currently, even though the menu and the toolbar allow for A0 to A4 landscape formats, only an A3 Landscape template is available.

&lt;!--T:3--&gt;
A '''Page''' object will be added to the Project tree, taking the form of a folder icon. Views that will be created afterward will be placed underneath this folder.

&lt;!--T:4--&gt;
To open the Drawing viewer to display the page, simply double-click on the '''Page''' object, or right-click → Show drawing. The page will be opened in a new tab. You can close the tab and open it again at any time the same way.

&lt;!--T:5--&gt;
If the page does not display, click on the [[File:view-refresh.png|16px]] refresh icon in the main toolbar, or go to ''Edit → Refresh'' menu, or shortcut {{KEY|CTRL+R}}.


&lt;!--T:6--&gt;
[[File:Drawing_Page.png|500px]]

=== Options === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* The template used by a Page can be changed through its Template property in Data view. Click on the value field, then on the &quot;...&quot; button and navigate to a [[Drawing templates|suitable template]]. Then refresh the view.


</text>
    </revision>
  </page>
  <page>
    <title>Drawing Module</title>
    <ns>0</ns>
    <id>46</id>
    <revision>
      <id>131809</id>
      <parentid>127156</parentid>
      <timestamp>2014-12-16T01:21:45Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Replaced &lt;syntaxhighlight&gt; tags with Code template, removed single indent before all code snippets</comment>
      <sha1>p1nmcnzdcnr7qc5362s2yfhr2w2j5j5</sha1>
      <text xml:space="preserve" bytes="12226">
&lt;!--T:1--&gt;
The Drawing module allows you to put your 3D work on paper. That is, to put views of your models in a 2D window and to insert that window in a drawing, for example a sheet with a border, a title and your logo and finally print that sheet. The Drawing module is currently under construction and more or less a technology preview! 

== GUI Tools == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
{{Drawing Tools}}


&lt;!--T:4--&gt;
'''Note'''
The [[Draft Module|Draft Module]] has its own [[Draft_Drawing|Draft Drawing]] tool to place Draft objects on paper. It has a couple of extra capabilities over the standard Drawing tools, and supports specific objects like [[Draft Dimension|Draft dimensions]].


&lt;!--T:5--&gt;
[[Image:Drawing_extraction.png|800px]]

&lt;!--T:6--&gt;
In the picture you see the main concepts of the Drawing module. The document contains a shape object (Schenkel) which we want to extract to a drawing. Therefore a &quot;Page&quot; is created. A page gets instantiated through a template, in this case the &quot;A3_Landscape&quot; template. The template is an SVG document which can hold your usual page frame, your logo or comply to your presentation standards. 

&lt;!--T:7--&gt;
In this page we can insert one or more views. Each view has a position on the page (Properties X,Y), a scale factor (Property scale) and additional properties. Every time the page or the view or the referenced object changes the page gets regenerated and the page display updated.

== Scripting == &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
At the moment the end user(GUI) workflow is very limited, so the scripting  API is more interesting. Here follow examples on how to use the scripting API of the drawing module.

&lt;!--T:10--&gt;
Here a script that can easily fill the [[Macro_CartoucheFC]] leaf FreeCAD A3_Landscape.

=== Simple example === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
First of all you need the Part and the Drawing module:

{{Code|code=
import FreeCAD, Part, Drawing
}}
 
&lt;!--T:13--&gt;
Create a small sample part

{{Code|code=
Part.show(Part.makeBox(100,100,100).cut(Part.makeCylinder(80,100)).cut(Part.makeBox(90,40,100)).cut(Part.makeBox(20,85,100)))
}}

&lt;!--T:14--&gt;
Direct projection. The G0 means hard edge, the G1 is tangent continuous.

{{Code|code=
Shape = App.ActiveDocument.Shape.Shape
[visibleG0,visibleG1,hiddenG0,hiddenG1] = Drawing.project(Shape)
print &quot;visible edges:&quot;, len(visibleG0.Edges)
print &quot;hidden edges:&quot;, len(hiddenG0.Edges)
}}

&lt;!--T:15--&gt;
Everything was projected on the Z-plane:

{{Code|code=
print &quot;Bnd Box shape: X=&quot;,Shape.BoundBox.XLength,&quot; Y=&quot;,Shape.BoundBox.YLength,&quot; Z=&quot;,Shape.BoundBox.ZLength
print &quot;Bnd Box project: X=&quot;,visibleG0.BoundBox.XLength,&quot; Y=&quot;,visibleG0.BoundBox.YLength,&quot; Z=&quot;,visibleG0.BoundBox.ZLength
}}

&lt;!--T:16--&gt;
Different projection vector

{{Code|code=
[visibleG0,visibleG1,hiddenG0,hiddenG1] = Drawing.project(Shape,App.Vector(1,1,1))
}}

&lt;!--T:17--&gt;
Project to SVG

{{Code|code=
resultSVG = Drawing.projectToSVG(Shape,App.Vector(1,1,1))
print resultSVG
}}

=== The parametric way === &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
Create the body

{{Code|code=
import FreeCAD
import Part
import Drawing

# Create three boxes and a cylinder
App.ActiveDocument.addObject(&quot;Part::Box&quot;,&quot;Box&quot;)
App.ActiveDocument.Box.Length=100.00
App.ActiveDocument.Box.Width=100.00
App.ActiveDocument.Box.Height=100.00

App.ActiveDocument.addObject(&quot;Part::Box&quot;,&quot;Box1&quot;)
App.ActiveDocument.Box1.Length=90.00
App.ActiveDocument.Box1.Width=40.00
App.ActiveDocument.Box1.Height=100.00

App.ActiveDocument.addObject(&quot;Part::Box&quot;,&quot;Box2&quot;)
App.ActiveDocument.Box2.Length=20.00
App.ActiveDocument.Box2.Width=85.00
App.ActiveDocument.Box2.Height=100.00

App.ActiveDocument.addObject(&quot;Part::Cylinder&quot;,&quot;Cylinder&quot;)
App.ActiveDocument.Cylinder.Radius=80.00
App.ActiveDocument.Cylinder.Height=100.00
App.ActiveDocument.Cylinder.Angle=360.00
# Fuse two boxes and the cylinder
App.ActiveDocument.addObject(&quot;Part::Fuse&quot;,&quot;Fusion&quot;)
App.ActiveDocument.Fusion.Base = App.ActiveDocument.Cylinder
App.ActiveDocument.Fusion.Tool = App.ActiveDocument.Box1

App.ActiveDocument.addObject(&quot;Part::Fuse&quot;,&quot;Fusion1&quot;)
App.ActiveDocument.Fusion1.Base = App.ActiveDocument.Box2
App.ActiveDocument.Fusion1.Tool = App.ActiveDocument.Fusion
# Cut the fused shapes from the first box
App.ActiveDocument.addObject(&quot;Part::Cut&quot;,&quot;Shape&quot;)
App.ActiveDocument.Shape.Base = App.ActiveDocument.Box 
App.ActiveDocument.Shape.Tool = App.ActiveDocument.Fusion1
# Hide all the intermediate shapes 
Gui.ActiveDocument.Box.Visibility=False
Gui.ActiveDocument.Box1.Visibility=False
Gui.ActiveDocument.Box2.Visibility=False
Gui.ActiveDocument.Cylinder.Visibility=False
Gui.ActiveDocument.Fusion.Visibility=False
Gui.ActiveDocument.Fusion1.Visibility=False
}}

&lt;!--T:20--&gt;
Insert a Page object and assign a template

{{Code|code=
App.ActiveDocument.addObject('Drawing::FeaturePage','Page')
App.ActiveDocument.Page.Template = App.getResourceDir()+'Mod/Drawing/Templates/A3_Landscape.svg'
}}

&lt;!--T:21--&gt;
Create a view on the &quot;Shape&quot; object, define the position and scale and assign it to a Page

{{Code|code=
App.ActiveDocument.addObject('Drawing::FeatureViewPart','View')
App.ActiveDocument.View.Source = App.ActiveDocument.Shape
App.ActiveDocument.View.Direction = (0.0,0.0,1.0)
App.ActiveDocument.View.X = 10.0
App.ActiveDocument.View.Y = 10.0
App.ActiveDocument.Page.addObject(App.ActiveDocument.View)
}}

&lt;!--T:22--&gt;
Create a second view on the same object but this time the view will be rotated by 90 degrees.

{{Code|code=
App.ActiveDocument.addObject('Drawing::FeatureViewPart','ViewRot')
App.ActiveDocument.ViewRot.Source = App.ActiveDocument.Shape
App.ActiveDocument.ViewRot.Direction = (0.0,0.0,1.0)
App.ActiveDocument.ViewRot.X = 290.0
App.ActiveDocument.ViewRot.Y = 30.0
App.ActiveDocument.ViewRot.Scale = 1.0
App.ActiveDocument.ViewRot.Rotation = 90.0
App.ActiveDocument.Page.addObject(App.ActiveDocument.ViewRot) 
}}

&lt;!--T:23--&gt;
Create a third view on the same object but with an isometric view direction. The hidden lines are activated too.

{{Code|code=
App.ActiveDocument.addObject('Drawing::FeatureViewPart','ViewIso')
App.ActiveDocument.ViewIso.Source = App.ActiveDocument.Shape
App.ActiveDocument.ViewIso.Direction = (1.0,1.0,1.0)
App.ActiveDocument.ViewIso.X = 335.0
App.ActiveDocument.ViewIso.Y = 140.0
App.ActiveDocument.ViewIso.ShowHiddenLines = True
App.ActiveDocument.Page.addObject(App.ActiveDocument.ViewIso) 
}}

&lt;!--T:24--&gt;
Change something and update. The update process changes the view and the page.

{{Code|code=
App.ActiveDocument.View.X = 30.0
App.ActiveDocument.View.Y = 30.0
App.ActiveDocument.View.Scale = 1.5
App.ActiveDocument.recompute()
}}

=== Accessing the bits and pieces === &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
Get the SVG fragment of a single view

{{Code|code=
ViewSVG = App.ActiveDocument.View.ViewResult
print ViewSVG
}}

&lt;!--T:27--&gt;
Get the whole result page (it's a file in the document's temporary directory, only read permission)

{{Code|code=
print &quot;Resulting SVG document: &quot;,App.ActiveDocument.Page.PageResult
file = open(App.ActiveDocument.Page.PageResult,&quot;r&quot;)
print &quot;Result page is &quot;,len(file.readlines()),&quot; lines long&quot;
}}

&lt;!--T:28--&gt;
Important: free the file!

{{Code|code=
del file
}}
 
&lt;!--T:29--&gt;
Insert a view with your own content:

{{Code|code=
App.ActiveDocument.addObject('Drawing::FeatureView','ViewSelf')
App.ActiveDocument.ViewSelf.ViewResult = &quot;&quot;&quot;&lt;g id=&quot;ViewSelf&quot;
  stroke=&quot;rgb(0, 0, 0)&quot;
  stroke-width=&quot;0.35&quot;
  stroke-linecap=&quot;butt&quot;
  stroke-linejoin=&quot;miter&quot;
  transform=&quot;translate(30,30)&quot;
  fill=&quot;#00cc00&quot;
  &gt;

  &lt;ellipse cx=&quot;40&quot; cy=&quot;40&quot; rx=&quot;30&quot; ry=&quot;15&quot;/&gt;
  &lt;/g&gt;&quot;&quot;&quot;
App.ActiveDocument.Page.addObject(App.ActiveDocument.ViewSelf)
App.ActiveDocument.recompute()

del ViewSVG
}}

&lt;!--T:30--&gt;
That leads to the following result:

&lt;!--T:31--&gt;
[[Image:DrawingScriptResult.jpg|800px]]

=== General Dimensioning and Tolerancing === &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
Drawing dimensions an tolerances are still under development but you can get some basic functionality with a bit of work.

&lt;!--T:34--&gt;
First you need to get the gdtsvg python module from here (WARNING: This could be broken at any time!): 

&lt;!--T:35--&gt;
https://github.com/jcc242/FreeCAD

&lt;!--T:36--&gt;
To get a feature control frame, try out the following:

{{Code|code=
import gdtsvg as g # Import the module, I like to give it an easy handle
ourFrame = g.ControlFrame(&quot;0&quot;,&quot;0&quot;, g.Perpendicularity(), &quot;.5&quot;, g.Diameter(), g.ModifyingSymbols(&quot;M&quot;), &quot;A&quot;,  
           g.ModifyingSymbols(&quot;F&quot;), &quot;B&quot;, g.ModifyingSymbols(&quot;L&quot;), &quot;C&quot;, g.ModifyingSymbols(&quot;I&quot;))
}}

&lt;!--T:37--&gt;
Here is a good breakdown of the contents of a feature control frame: http://www.cadblog.net/adding-geometric-tolerances.htm

&lt;!--T:38--&gt;
The parameters to pass to control frame are: 
#X-coordinate in SVG-coordinate system (type string)
#Y-coordinate in SVG-coordinate system (type string)
#The desired geometric characteristic symbol (tuple, svg string as first, width of symbol as second, height of symbol as third)
#The tolerance (type string)
#(optional) The diameter symbol (tuple, svg string as first, width of symbol as second, height of symbol as third)
#(optional) The condition modifying material (tuple, svg string as first, width of symbol as second, height of symbol as third)
#(optional) The first datum (type string)
#(optional) The first datum's modifying condition (tuple, svg string as first, width of symbol as second, height of symbol as third)
#(optional) The second datum (type string)
#(optional) The second datum's modifying condition (tuple, svg string as first, width of symbol as second, height of symbol as third)
#(optional) The third datum (type string)
#(optional) The third datum's material condition (tuple, svg string as first, width of symbol as second, height of symbol as third)

&lt;!--T:39--&gt;
The ControlFrame function returns a type containing (svg string, overall width of control frame, overall height of control frame)'''

&lt;!--T:40--&gt;
To get a dimension, try out the following:

{{Code|code=
import gdtsvg
ourDimension = linearDimension(point1, point2, textpoint, dimensiontext, linestyle=getStyle(&quot;visible&quot;), 
               arrowstyle=getStyle(&quot;filled&quot;), textstyle=getStyle(&quot;text&quot;)
}}

&lt;!--T:41--&gt;
Inputs for linear dimension are:
#point1, an (x,y) tuple with svg-coordinates, this is one of the points you would like to dimension between
#point2, an (x,y) tuple with svg-coordinates, this is the second point you would like to dimension between
#textpoint, an (x,y) tuple of svg-coordinates, this is where the text of your dimension will be
#dimensiontext, a string containing the text you want the dimension to say
#linestyle, a string containing svg (i.e. css) styles, using the getStyle function to retrieve a preset string, for styling the how the lines look
#arrowstyle, a string containing svg (i.e. css) styles, using the getStyle function to retrieve a preset string, for styling how the arrows look
#textstyle, a string containing svg (i.e. css) styles, using the getStyle function to retrieve a preset string, for styling how the text looks 

&lt;!--T:42--&gt;
With those two, you can proceed as above for displaying them on the drawing page. This module is very buggy and can be broken at any given moment, bug reports are welcome on the github page for now, or contact jcc242 on the forums if you post a bug somewhere else.

== Templates == &lt;!--T:43--&gt;

&lt;!--T:44--&gt;
FreeCAD comes bundled with a set of default templates, but you can find more on the [[Drawing templates]] page.

== Extending the Drawing Module == &lt;!--T:45--&gt;

&lt;!--T:46--&gt;
Some notes on the programming side of the drawing module will be added to the [[Drawing Documentation]] page. This is to help quickly understand how the drawing module works, enabling programmers to rapidly start programming for it.

&lt;!--T:47--&gt;
{{docnav|Part Module|Raytracing Module}}

&lt;!--T:48--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Drawing Open SVG</title>
    <ns>0</ns>
    <id>1865</id>
    <revision>
      <id>92674</id>
      <parentid>55949</parentid>
      <timestamp>2014-06-19T10:05:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>m1k7gpo0273zpmiu34ru7u3evjss7fu</sha1>
      <text xml:space="preserve" bytes="392">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Open SVG|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Open SVG...|Shortcut=none|SeeAlso=[[Drawing Save|Drawing Save]]}}

&lt;!--T:2--&gt;
This tool opens a drawing sheet previously saved as an SVG (scalable vector graphics) file. It can also be used to display any SVG.

&lt;!--T:3--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Drawing Openbrowser</title>
    <ns>0</ns>
    <id>26994</id>
    <revision>
      <id>76097</id>
      <parentid>76060</parentid>
      <timestamp>2014-03-15T22:45:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>po6pw51kdr7wedjh1hustya59cse3r8</sha1>
      <text xml:space="preserve" bytes="1378">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Openbrowser|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Open Browser|Shortcut=none}}

== Description == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This command allows you to display a selected [[Drawing Landscape A3|Drawing page]] using FreeCAD's internal web browser. The normal Drawing page viewer of FreeCAD is based on [http://qt-project.org/doc/qt-5.0/qtsvg/svgrendering.html Qt's built-in SVG rendering module], which only supports a tiny subset of the full SVG specification. As a result, some more advanced SVG features, such as pattern fills or multiline texts are not supported by this viewer. The FreeCAD internal web browser, however, is built on [http://en.wikipedia.org/wiki/WebKit webkit], which is one of the best SVG renderers available, and will correctly render your page with all its features.

== How to use == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Create a [[Drawing Landscape A3|Drawing page]]
# Add some [[Drawing View|views]] or other content to your page
# [[Std_Refresh|Refresh]] the view if a Drawing view wasn't opened
# Press the {{KEY|[[Image:Drawing Openbrowser.png|16px]] [[Drawing Openbrowser]]}} button

== Limitations == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* A page opened in the web browser will not refresh automatically on changes. You must use right-click -&gt; reload manually.


</text>
    </revision>
  </page>
  <page>
    <title>Drawing Orthoviews</title>
    <ns>0</ns>
    <id>28413</id>
    <revision>
      <id>92490</id>
      <parentid>79482</parentid>
      <timestamp>2014-06-18T21:07:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>o40vvr7in3urnobgm9gsr8gwreyw9x6</sha1>
      <text xml:space="preserve" bytes="417">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Orthoviews|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Insert orthographic views|Shortcut=none|SeeAlso=[[Drawing Landscape A3|Drawing Landscape A3]]}}


&lt;!--T:2--&gt;
This tool insert an orthographic projection of the selected object in the active drawing sheet.




=== How to use === &lt;!--T:3--&gt; 





{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing ProjectShape</title>
    <ns>0</ns>
    <id>32801</id>
    <revision>
      <id>105980</id>
      <parentid>105979</parentid>
      <timestamp>2014-08-23T11:57:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2huhiak23x540znetg1lq9pq50xtzbg</sha1>
      <text xml:space="preserve" bytes="310">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing ProjectShape|Workbenches=[[Drawing Module|Drawing]], Complet|MenuLocation=Drawing → Project shape|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
[[File:ProjectShape1_it.png]]




&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Save</title>
    <ns>0</ns>
    <id>1862</id>
    <revision>
      <id>92291</id>
      <parentid>56113</parentid>
      <timestamp>2014-06-18T16:37:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>i66a0bvb0toyholjdzv9nn85rihfwiu</sha1>
      <text xml:space="preserve" bytes="658">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Save|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Export page...|Shortcut=none|SeeAlso=[[Drawing Open SVG|Drawing Open SVG]]}}

&lt;!--T:2--&gt;
This tool saves the current Drawing sheet as an SVG (scalable vector graphics) file. Such a file can then be edited in a scalable vector graphics program such as [http://www.inkscape.org Inkscape].

&lt;!--T:3--&gt;
SVG files are common and can be viewed in most modern browsers and image viewers. It can be a useful way to share a design with people who don't have FreeCAD installed on their PC.

&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Drawing Symbol</title>
    <ns>0</ns>
    <id>27018</id>
    <revision>
      <id>76100</id>
      <parentid>76071</parentid>
      <timestamp>2014-03-15T22:47:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ckty24pp4e4hae7ycg9l0jksrjoghuj</sha1>
      <text xml:space="preserve" bytes="925">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing Symbol|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Symbol|Shortcut=none}}

== Description == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This command allows you to add the contents of a SVG image on a selected [[Drawing Landscape A3|Drawing page]]. These contents can then be moved and rescaled on the page. The contents of the SVG image are copied into the FreeCAD document, so it is independent from the original file, and will display the same way on another computer that doesn't have the original SVG file.

== How to use == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Create a [[Drawing Landscape A3|Drawing page]]
# [[Std_Refresh|Refresh]] the view if a Drawing viewer wasn't opened
# Press the {{KEY|[[Image:Drawing Symbol.png|16px]] [[Drawing Symbol]]}} button
# Select a SVG file
# Adjust the needed properties, like position and scale.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Drawing Template HowTo</title>
    <ns>0</ns>
    <id>20766</id>
    <revision>
      <id>115803</id>
      <parentid>115802</parentid>
      <timestamp>2014-10-18T11:15:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2ux0cctpvgp3d799xc6t7vtwbx9royz</sha1>
      <text xml:space="preserve" bytes="14603">
&lt;!--T:73--&gt;
{{TutorialInfo|Class=2D Drafting|Level=Intermediate|Author=Mark Stephen ([[User:Quick61|Quick61]])|Time=An hour or less|FCVersion=0.14.3700 or greater}}

== Introduction == &lt;!--T:1--&gt;
This tutorial will take you through the basic creation and modification of a SVG graphics file for use as a drawing template within FreeCAD's Drawing Workbench. As of FreeCAD version 0.14, revision 2995, the Drawing Workbench will project the selected part onto the drawing template following rules set within the SVG document. Those rules define the Working space, in X / Y coordinates, where FreeCAD may project the part and automatically avoid intrusions into the space occupied by the Title block.

&lt;!--T:2--&gt;
Anyone designing templates to be shared, all the basic guidelines laid out in this tutorial should be followed. Having the tags for “Working space” and “Title block” included in the template does not excluded it from being used in older versions of FreeCAD. While including these tags will make your template fully functional for current revisions.       

&lt;!--T:3--&gt;
This tutorial will begin with setting up a page in Inkscape and making a basic template drawing. Followed by adding some artwork to give that personal or professional touch to your work. Next, you will see how to edit your new template and what information it needs to contain for use with FreeCAD. 

&lt;!--T:4--&gt;
This tutorial assumes the reader to have basic knowledge of  Inkscape, and a text editor. 



==The Basics== &lt;!--T:5--&gt;

===Page Setup=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
Begin with a new document within Inkscape. Referring to the FreeCAD Wiki page on Drawing templates, one pixel = one millimeter. That means if you wish to create a Drawing template for an ANSI A sized page, (letter size), which is 216mm X 279mm, our template should be sized 216px X 279px. If you wish for the page to be landscape orientated, those numbers would be reversed. For the purposes of this tutorial, landscape orientation will be used. The page is defined as being 279px wide and 216px high.

&lt;!--T:8--&gt;
In Inkscape, pull down the File menu and select Document Properties You should now see the   Document Properties window. Edit the Width and Height as mentioned and insure that the Units is set to px. 

&lt;!--T:9--&gt;
[[Image:Inkscape_Template_tut_1.png|780px]]

&lt;!--T:10--&gt;
You should now have an Inkscape document that is 279px wide and 216px high. Now proceed to add a border.

===The Border=== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
Next,  make the border. While not necessary, for purposes of this tutorial, it will be referenced later on.  

&lt;!--T:13--&gt;
Using the “Draw Bezier curves and straight lines” tool, and selecting the Mode “Create a sequence of paraxial line segments”, make a rectangle within the borders of the document. Once this rectangle is closed, click on the Select and transform objects tool. The rectangle should now show it is selected. If not, use the tool and select it. 

&lt;!--T:14--&gt;
Using the Horizontal and Vertical coordinates of selection settings, along with the settings for Width and Height of selection, we will place the border 10 units, (px) in from the document edges. Enter the following. For X enter 10, for Y enter 10, for W enter 259, and for H enter 196. You will see that this set the lower left corner of the rectangle drawn for the border 10 up and 10 over from the lower left corner of the page. Entering the Width and Height sized the rectangle so it is now evenly spaced within the document boundaries.

&lt;!--T:15--&gt;
[[Image:Inkscape_Template_tut_2.png]]

===The Title Block=== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
Next you will make a Title Block. This is where the editable text about the Drawing will be entered when used with FreeCAD. This tutorial will use a simple example. The Title Block can be as simple, or complex as one wishes.

&lt;!--T:18--&gt;
This example Title Block will contain the following, Project Name, Date, Scale, and Author. It will then be placed in the lower right hand corner of the border. 

&lt;!--T:19--&gt;
First you start with making a rectangle somewhere within the borders of the document. Make it in the same manner as you did the border. Then divide it into 4 sections as you see fit. Once done, Select the box and the dividing lines, make them a group, and locate it at X =169, Y 10 and size it W=100, H=50, in the same manner done for the border.

&lt;!--T:20--&gt;
[[Image:Inkscape_Template_tut_3.png]]

===Fixed Text=== &lt;!--T:21--&gt;

&lt;!--T:22--&gt;
Next, you will add the text blocks that will be fixed within the Title Block. These will be Project Name, Date, Scale, and Author. To do this, select the text tool and click it somewhere in the document. Then simply type in the text, one block to each name. Click the text tool in the document and after selecting the appropriate font size, (size 6 works for this example), type in  Project Name. Then move the pointer to a new location and click again, starting a new text block and type in  Date. Do the same for  Scale, and Author. Now using the select tool the individual text blocks can be moved by dragging and / or the arrow keys to place them into the desired locations. 

&lt;!--T:23--&gt;
After the text blocks are placed they should all be selected, along with the title block and made a group. At this point the Title Block and the fixed text are joined together as one. 

&lt;!--T:24--&gt;
[[Image:Inkscape_Template_tut_4.png]]

===Editable Text=== &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
Now you will add the text blocks that we will want to be editable from within FreeCAD. In the same manner that the fixed text was done, the editable text will be made and placed in their respective locations, You will use the text as follows. NAME, DATE, SCALE, AUTHOR, and make them font size 8. Once the text is placed, select the 4 text fields you wish to be editable and make them a separate group. Do not include them into the same group as the Title Block or Border. For now you are done with the editable text. After the graphical part of the template is done, you will complete the process of making this text editable from within FreeCAD. For now, we will complete this part with adding a little artwork to your template. 

&lt;!--T:27--&gt;
[[Image:Inkscape_Template_tut_5.png]]


==Advanced== &lt;!--T:28--&gt;

===Adding Artwork=== &lt;!--T:29--&gt; 


&lt;!--T:30--&gt;
Now that the basic template is done, you can add a bit of artwork to it. This can be whatever you wish. A company or personal graphical logo, a picture or rendering of the project, etc.. For this tutorial the FreeCAD logo, found in the [[Artwork]] section of the FreeCAD Wiki will be used. You can simply right click on it and select save image. Once saved, import it into Inkscape. With the image imported into your template, it can be sized and placed where ever you may wish it to be. Adding artwork to your template is as easy as that.

&lt;!--T:31--&gt;
At this point, you can select File, then Save. In this tutorial, the file was simply named TemplateExample.svg but you may name it whatever you wish.

&lt;!--T:32--&gt;
[[Image:Inkscape_Template_tut_6.png]]

==Once Your Template Is Made== &lt;!--T:33--&gt;

===Opening The File With A Text Editor=== &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
Once your template is saved, open it with your favorite text editor. This can be something as basic as Windows Notepad or a more complete editor like Kate. In this tutorial, Kate will be used and all screenshots will be of that editor. 

&lt;!--T:36--&gt;
Opening the SVG file with your text editor you will see the following.

&lt;!--T:37--&gt;
[[Image:Kate1.png]]

===The “xmlns:freecad” Tag=== &lt;!--T:38--&gt;


&lt;!--T:39--&gt;
The first thing is to insert the following line into the document. This line is the SVG namespace declaration and must be provided so that all SVG elements are identified as belonging to the SVG namespace. 

 xmlns:freecad=&quot;http://www.freecadweb.org/wiki/index.php?title=Svg_Namespace&quot;

&lt;!--T:40--&gt;
This line is added immediately following the first &lt;svg tag, and in the same margin spacing as the other xmlns entries are placed.

&lt;!--T:41--&gt;
[[Image:Kate2.png]]

===Page Size=== &lt;!--T:72--&gt;
In order to allow a final drawing to be printed in the right scale, the template must contain it's dimensions in real world units. Otherwise the whole drawing page would be printed scaled down by a factor of 3.54 (90(px/in)/25.4(in/mm)).
Inside the the &lt;nowiki&gt;&lt;SVG&gt;&lt;/nowiki&gt;-Tag the unit &quot;mm&quot; is added to the width and height fields. And a viewBox Attribute has to be added.
The viewBox ranges from 0 0 to the width and height of the template. This way the SVG user unit (px) is redefined to be 1mm long. In consequence programs like Inkscape will be able to print a resulting drawing up to scale.
Current versions of Inkscape handle this information very badly. Inkscape effectively rescales the whole document to 90dpi. This is not much of a problem for a final drawing, but imposes difficulties for editing drawing templates. After editing a template in Inkscape, it would have the same real word size on its own but elements of the drawing would be scaled down by a factor of 3.54. (Because the template would be in 90dpi but FreeCAD assumes 1px/mm.)
Therefore it's recommended to remove the &quot;mm&quot; from the width and height attributes before opening an existing template in inkscape and recreate the units and viewBox attribute afterwards.
 
&lt;syntaxhighlight&gt;
width=&quot;279mm&quot;
height=&quot;216mm&quot;
viewBox=&quot;0 0 279 216&quot;
&lt;/syntaxhighlight&gt;

[[Image:Kate2a.png]]


===Working space and Title block Tags=== &lt;!--T:42--&gt;

&lt;!--T:43--&gt;
The next lines to add will be the Working space and Title block tag. These tags and their usage are defined on the Drawing Templates page. While these tags are not required, newer versions of the FreeCAD Drawing Workbench benefit from them and they will not affect older versions. 

&lt;!--T:44--&gt;
The Working space tag is used to define the space that FreeCAD may make projections into. This allows FreeCAD to make automatic projections on the drawing template and stay within the border that has be drawn, or withing any defined space on the page.

&lt;!--T:45--&gt;
The Title block tag is used to define where within the Working space it resides. This information is used by FreeCAD to avoid using that space within the Working space. This can be referred to as Title block avoidance.

&lt;!--T:46--&gt;
If both tags are used, the Working space tag must appear first and be immediately followed by the title block tag. Both tags must also appear before the first &lt;metadata tag. These tags can be placed either at the top, following the &lt;? xml tag or immediately before the &lt;metadata tag. For this tutorial we will place them at the top.

====The Working space Tag==== &lt;!--T:47--&gt;

&lt;!--T:48--&gt;
The first tag is the Working space tag and is formated as follows.
 
&lt;syntaxhighlight&gt;
&lt;!-- Working space X1 Y1 X2 Y2 --&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:49--&gt;
Where X1, Y1, X2, Y2 are defined as:
* X1 is the X axis distance from the left edge of the page to the left side of the Border.
* Y1 is the Y axis distance from the top edge of the page the the top of the Border.
* X2 is the X axis distance from the left edge of the page to the right side of the Border.
* Y2 is the Y axis distance from the top edge of the page the the bottom of the Border.

&lt;!--T:50--&gt;
So for this tutorial template, the Working space tag will be. 

&lt;syntaxhighlight&gt;
&lt;!-- Working space 10 10 259 196 --&gt;
&lt;/syntaxhighlight&gt;

====The Title block Tag==== &lt;!--T:51--&gt;


&lt;!--T:52--&gt;
The next tag will be the Title block tag and is formated as follows:

&lt;syntaxhighlight&gt;
&lt;!-- Title block X1a Y1a X2a Y2a --&gt;
&lt;/syntaxhighlight&gt; 

&lt;!--T:53--&gt;
Where X1a, Y1a, X2a, Y2a are defined as:
* X1a is the X axis distance from the left edge of the page to the left side of the Title block
* Y1a is the Y axis distance from the top edge of the page the the top of the Title block
* X2a is the X Axis distance from the left edge of the page to the right side of the Title block
* Y2a is the Y axis distance from the top edge of the page the the bottom of the Title block
* X1a &lt;= X1 or X2a &gt;= X2
* Y1a &lt;= Y1 or Y2a &gt;= Y2

&lt;!--T:54--&gt;
Again, referencing the template created with this tutorial, the title block tag will be as follows:

&lt;syntaxhighlight&gt;
&lt;!-- Title block 169 156 259 196 --&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:55--&gt;
Placing these two tags, in proper order at the top of the document looks like this:

&lt;!--T:56--&gt;
[[Image:Kate3.png]]

===The freecad:editable Tag=== &lt;!--T:57--&gt;

&lt;!--T:58--&gt;
Adding the  freecad:editable tags into the SVG document allows FreeCAD to access the defined text blocks for editing. For those blocks of text that you wish to be editable from within FreeCAD, do the following.

&lt;!--T:59--&gt;
Search down through the SVG document until you find the section that contains the text you wish to have editable. When making the template, you placed these in a group, and as a result, they should appear within the document as a group as well. Once this group of text elements is located, you will add the line freecad:editable=” “ to each text block where the text that you wish to make editable is contained within the quote marks. Place them as shown for all four lines of text to be editable.

&lt;!--T:60--&gt;
[[Image:Kate4.png]]

===The DrawingContent Tag=== &lt;!--T:61--&gt;

&lt;!--T:62--&gt;
The last tag that is needed in the Template is the DrawingContent tag. Without it, FreeCAD can not access the drawing template. This tag informs FreeCAD where within the document it may write it's projections and other attributes. It is the one tag that must be within the SVG document for the drawing template to work with FreeCAD.

&lt;!--T:63--&gt;
This tag is formated as follows and is inserted just before the last &lt;/svg&gt; tag.

&lt;syntaxhighlight&gt;
&lt;!-- DrawingContent --&gt;   
&lt;/syntaxhighlight&gt;


&lt;!--T:64--&gt;
[[Image:Kate5.png]]

&lt;!--T:65--&gt;
That's it. The SVG document can now be saved and used with FreeCAD.

==Complete Example Template== &lt;!--T:66--&gt;

&lt;!--T:67--&gt;
Below is the finished SVG template. Sense it is in SVG format, you can save and open it in your text editor for review as reference to this tutorial and the creation of your own templates.

&lt;!--T:68--&gt;
[[Image:TemplateExample.svg]]

==Tools== &lt;!--T:69--&gt;

&lt;!--T:70--&gt;
The two tools used in this tutorial were Inkscape and Kate. They can be found by following the links provided below.

&lt;!--T:71--&gt;
* [http://www.inkscape.org/ Inkscape]
* [http://kate-editor.org/ Kate]
[[Category:Tutorials]]


</text>
    </revision>
  </page>
  <page>
    <title>Drawing View</title>
    <ns>0</ns>
    <id>1861</id>
    <revision>
      <id>92794</id>
      <parentid>56042</parentid>
      <timestamp>2014-06-19T10:54:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>syk3l25s5mw56emm67a4h8pkt4zhr3l</sha1>
      <text xml:space="preserve" bytes="2734">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Drawing View|Workbenches=[[Drawing Workbench|Drawing]], Complete|MenuLocation=Drawing → Insert view in drawing|Shortcut=none|SeeAlso=[[Drawing Landscape A3|Drawing Landscape A3]]}}

&lt;!--T:2--&gt;
This tool creates a new view of the selected object in the active drawing sheet.


&lt;!--T:3--&gt;
[[File:Drawing_Views.png|500px|A drawing sheet with three views: front, top and isometric.]]

=== How to use === &lt;!--T:4--&gt;
Select an object either in the 3D view or the Project tree, then click on the Drawing View tool. By default, a top view scaled at 1:1 (real scale) will be placed at the top left of the page. It may not be visible if it's too small or too big for the page.

&lt;!--T:5--&gt;
A '''View''' object is added to the '''Page''' object in the Project tree. For subsequent views, a three-digit number will be appended to the name. Click on the arrow in front of the Page object to unfold it and display the views it contains.

=== Modify an existing view === &lt;!--T:6--&gt;
Unfold the Page object in the Project tree, and select the View. Its parameters can be edited in the Property View Data tab.

&lt;!--T:7--&gt;
[[File:Drawing_View_Properties.png‎]]
[[File:Drawing_View_Iso.png‎|150px|thumb|Isometric view with smooth lines visibility off]]
[[File:Drawing_View_Iso_SmoothLines.png‎‎|thumb|150px|Isometric view with smooth lines visibility on]]

&lt;!--T:8--&gt;
* '''Label''': changes the view's label in the Project tree. You can also click on the View in the tree and right-click → Rename, or press {{KEY|F2}}.
* '''Rotation''': rotates the view. For example, an isometric view will require a 60 degree rotation (see also Direction parameter below)
* '''Scale''': sets the view scale.
* '''X''': sets the view's horizontal position on the page in millimeters.
* '''Y''': sets the view's vertical position on the page in millimeters. Please note that coordinate (0,0) is located at the top left of the page, so the higher the number, the lower in the page the view will be.
* '''Direction''': changes the view direction. It is set by xyz values that define a vector normal to the page. Top view will be (0,0,1), and isometric will be (1,1,1). Values can be negative.
* '''Show Hidden Lines''': toggles the hidden lines visibility on or off by selecting ''True'' or ''False''.
* '''Show Smooth Lines''': toggles the smooth lines visibility on or off by selecting ''True'' or ''False''. Smooth lines are also called tangency edges. These edges indicate surface changes between tangent surfaces.


=== Drawing View Wizard === &lt;!--T:9--&gt;
To generate a drawing sheet with standard views automatically, use the [[Macro Automatic drawing|Automatic drawing Macro]].
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Drawing Workbench</title>
    <ns>0</ns>
    <id>391</id>
    <redirect title="Drawing Module" />
    <revision>
      <id>2047</id>
      <timestamp>2009-04-15T02:58:19Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirecting to [[Drawing Module]]</comment>
      <sha1>m1dqoske742o9k5kaa3te8rwdb5qgbm</sha1>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Drawing Module]]</text>
    </revision>
  </page>
  <page>
    <title>Drawing templates</title>
    <ns>0</ns>
    <id>665</id>
    <revision>
      <id>63659</id>
      <parentid>63658</parentid>
      <timestamp>2014-01-25T17:23:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>76w6zzz7v5h9jv1v4ra6o9p03zg35mg</sha1>
      <text xml:space="preserve" bytes="4957">
&lt;!--T:1--&gt;
Creating templates for the Drawing module is very easy. See also the tutorial [[Drawing_Template_HowTo]]. Templates are svg files, created with any application capable of exporting svg files, such as [http://www.inkscape.org Inkscape]. Only two rules must be followed:
* One pixel = one millimeter
* You must insert, somewhere inside your svg code, where you want the contents of the drawing to appear (for example at the end of the file, just before the last &lt;/svg&gt; tag), the following line:

&lt;syntaxhighlight&gt;
 &lt;!-- DrawingContent --&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:22--&gt;
In addition to these two rules, as of FreeCAD 0.14, Revision 2995, information about the Border and Title block can be added to the template for use by the orthographic projection tool. This information defines where FreeCAD can, and can not place the projections.

&lt;!--T:23--&gt;
To define the Border, the following line must appear before the &lt;metadata tag in the svg file.

&lt;syntaxhighlight&gt;
&lt;!-- Working space X1 Y1 X2 Y2 --&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:24--&gt;
Where X1, Y1, X2, Y2 are defined as:
* X1 is the X axis distance from the left edge of the page to the left side of the Border.
* Y1 is the Y axis distance from the top edge of the page the the top of the Border.
* X2 is the X axis distance from the left edge of the page to the right side of the Border.
* Y2 is the Y axis distance from the top edge of the page the the bottom of the Border.

[[File:XY_Working_v2.svg]]


&lt;!--T:25--&gt;
To define the Title block the following line must be inserted before the &lt;metadata tag and after the Working space tag.

&lt;syntaxhighlight&gt;
&lt;!-- Title block X1a Y1a X2a Y2a --&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:26--&gt;
Where X1a, Y1a, X2a, Y2a are defined as:
* X1a is the X axis distance from the left edge of the page to the left side of the Title block
* Y1a is the Y axis distance from the top edge of the page the the top of the Title block
* X2a is the X Axis distance from the left edge of the page to the right side of the Title block
* Y2a is the Y axis distance from the top edge of the page the the bottom of the Title block
* X1a &lt;= X1 or X2a &gt;= X2
* Y1a &lt;= Y1 or Y2a &gt;= Y2

[[File:XY_Title_v2.svg]]


&lt;!--T:27--&gt;
The following is an example of the code that defines the Working space and Title block areas that are to be inserted before the &lt;metadata tag. You needn't specify a title block, but if you do it must be defined on the next line immediately following the Working space:

&lt;syntaxhighlight&gt;
&lt;!-- Working space X1 Y1 X2 Y2 --&gt;
&lt;!-- Title block X1a Y1a X2a Y2a --&gt;
&lt;/syntaxhighlight&gt;


&lt;!--T:34--&gt;
In order to enable up to scale printing, the real word size has to be given in the width and height attributes of the SVG-Tag. The size of the document in user units, (px), has to be given in the viewBox attribute.

&lt;!--T:35--&gt;
The following is to be formatted like the example below where:
* xxx = pixel width
* yyy = pixel height

&lt;syntaxhighlight&gt;
width=&quot;xxxmm&quot;
height=&quot;yyymm&quot;
viewBox=&quot;0 0 xxx yyy&quot;
&lt;/syntaxhighlight&gt;


&lt;!--T:2--&gt;
* Several custom attributes can be placed in templates. The list of currently supported attributes is available on the [[Svg Namespace]] page.

==A3 templates == &lt;!--T:3--&gt;

=== A3 Classic: === &lt;!--T:4--&gt;
[[Image:A3_Classic.svg|800px]]

=== A3 Clean: === &lt;!--T:5--&gt;
[[Image:A3_Clean.svg|800px]]

=== A3 Modern: === &lt;!--T:6--&gt;
[[Image:A3_Modern.svg|800px]]

=== A3 Showcase: === &lt;!--T:7--&gt;
[[Image:A3_Showcase.svg|800px]]

=== A3 Landscape english: === &lt;!--T:8--&gt;
[[File:A3_Landscape_english.svg|800px]]

==A4 Templates == &lt;!--T:9--&gt;

=== A4 Landscape english: === &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[File:A4_Landscape_english.svg|800px]]

=== A4 Portrait 1 english:=== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
[[File:A4_Portrait_1_english.svg|400px]]

==US Letter Templates == &lt;!--T:14--&gt;

=== US Letter landscape: === &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
[[File:US_Letter_landscape.svg|800px]]


=== US Letter portrait: === &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
[[File:US_Letter_portrait.svg|400px]]

=== US Letter ds Landscape: === &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
[[File:US_Letter_ds_Landscape.svg|800px]]

=== US Legal ds Landscape: === &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
[[File:US_Legal_ds_Landscape.svg|800px]]

=== US Ledger ds Landscape: === &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
[[File:US_Ledger_ds_Landscape.svg|800px]]

==Other standards available== &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
* [[ANSI_templates|ANSI templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute ANSI] standard
* [[Arch_templates|Arch templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute Arch] standard 
* [[Misc_templates|Misc templates]]: mixed templates


&lt;!--T:21--&gt;
[[Category:Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Dxf Importer Install</title>
    <ns>0</ns>
    <id>53122</id>
    <revision>
      <id>133552</id>
      <parentid>133551</parentid>
      <timestamp>2014-12-27T10:12:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bhnpgcbumpkeajgfrnj9q9jxjglyry0</sha1>
      <text xml:space="preserve" bytes="5604">
&lt;!--T:1--&gt;
{{TutorialInfo|Class=SampleClass|Level=Medium user|Time=15 minutes|Author=[[User:Mario52|Mario52]]|FCVersion=All}}

===Description=== &lt;!--T:2--&gt;
This page explains step by step the margin to follow to install the package Draft-dxf-import yorikvanhavre for you to upload files in DXF format FreeCAD and import DWG files using the teighafileconverter utility.
This installation was made in the Windows Vista environment, but the principle of the system is the same for linux

===First step: === &lt;!--T:3--&gt;
identify the macros folder FreeCAD

&lt;!--T:4--&gt;
1 : open FreeCAD

&lt;!--T:5--&gt;
2 : click '''Menu &gt; Macro &gt; Macros''' or the click the bottom [[File:Std_DlgMacroExecuteDirect.svg|18px]] &quot;Open a dialog to let you execute a macro Recorded&quot;

&lt;!--T:6--&gt;
[[File:Dxf Importer Install 01.png|left|open FreeCAD]]
{{clear}}

&lt;!--T:7--&gt;
3 : one dialog box open

&lt;!--T:8--&gt;
4 : copy the address of &quot;Macro destination&quot; (here '''C:\Users\d\AppData\Roaming\FreeCAD\''')
In Ubuntu, this is normally '''/home/your_user_name/.FreeCAD''' 


&lt;!--T:9--&gt;
[[File:Dxf Importer Install 02.png|left|Open a dialog to let you execute a macro Recorded]]
{{clear}}

&lt;!--T:10--&gt;
5 : paste the address into your browser and confirm

&lt;!--T:11--&gt;
[[File:Dxf Importer Install 03.png|left|paste the address into your browser]]
{{clear}}

&lt;!--T:12--&gt;
6 : leave open the explorer

&lt;!--T:13--&gt;
[[File:Dxf Importer Install 04.png|left|]]
{{clear}}

&lt;!--T:14--&gt;
7 : Close FreeCAD

===Second step: === &lt;!--T:15--&gt;
Download the files

&lt;!--T:16--&gt;
8 : download files on the page https://github.com/yorikvanhavre/Draft-dxf-importer

&lt;!--T:17--&gt;
9 : and click the icon button {{KEY|Download ZIP}}

&lt;!--T:18--&gt;
[[File:Dxf Importer Install 05.png|left|download files]]
{{clear}}

&lt;!--T:19--&gt;
10 : you must extract the file to a temporary directory (here '''c:\tmp''')

&lt;!--T:20--&gt;
[[File:Dxf Importer Install 06.png|left|extract the file]]
{{clear}}

&lt;!--T:21--&gt;
11 : the decompresser creates a new folder named &quot;'''Draft-dxf-import-master'''&quot;

&lt;!--T:22--&gt;
[[File:Dxf Importer Install 07.png|left|decompresser creates a new folder]]
{{clear}}

&lt;!--T:23--&gt;
12 : the files are in this folder select all the files and &quot;Cut&quot;

&lt;!--T:24--&gt;
[[File:Dxf Importer Install 08.png|left|select all the files and Cut]]
{{clear}}

&lt;!--T:25--&gt;
13 : paste the files in the folder FreeCAD macros in the explorer open (step 6) ('''C:\Users\d\AppData\Roaming\FreeCAD\''')

&lt;!--T:26--&gt;
In Ubuntu, this is normally '''/home/your_user_name/.FreeCAD''' 

&lt;!--T:27--&gt;
[[File:Dxf Importer Install 09.png|left|paste the files in the folder]]
{{clear}}

&lt;!--T:28--&gt;
14 : Open FreeCAD click the button [[File:Std_DlgMacroExecuteDirect.svg|18px]] , the necessary files in DXF format are present, close the window &quot;Execute macro

&lt;!--T:29--&gt;
[[File:Dxf Importer Install 15.png|left|open FreeCAD]]
{{clear}}

&lt;!--T:30--&gt;
15 : load your DXF file

&lt;!--T:31--&gt;
[[File:Dxf Importer Install 10.png|left|load your DXF file]]
{{clear}}

&lt;!--T:32--&gt;
16 : DXF file can be used

&lt;!--T:33--&gt;
[[File:Dxf Importer Install 11.png|left|DXF file can be used]]
{{clear}}

===Third step: === &lt;!--T:34--&gt;
Download Teigha converter for use DWG files

&lt;!--T:35--&gt;
17 : teighafileconverter download on [http://www.opendesign.com/guestfiles/teighafileconverter teighafileconverter page]

&lt;!--T:36--&gt;
[[File:Dxf Importer Install 12.png|left|download Teigha]]
{{clear}}

&lt;!--T:37--&gt;
18 : choose the version that suits your Qt and OS

&lt;!--T:38--&gt;
[[File:Dxf Importer Install 13.png|left|choose the version]]
{{clear}}

&lt;!--T:39--&gt;
19 : and install it on your system
[[File:Dxf Importer Install 14.png|left|install it on your system]]
{{clear}}

&lt;!--T:40--&gt;
20 : open FreeCAD and click the button [[File:Std_DlgMacroExecuteDirect.svg|18px]] &quot;Open a dialog to let you execute a macro Recorded&quot;

&lt;!--T:41--&gt;
21 : close the macros window

&lt;!--T:42--&gt;
22 : and activate the Draft workbench

&lt;!--T:43--&gt;
[[File:Dxf Importer Install 16.png|left|activate the Draft workbebch]]
{{clear}}

&lt;!--T:44--&gt;
23 : now let's get into the options page DXF / DWG click &quot;Menu &gt; Edit &gt; Preferences&quot;

&lt;!--T:45--&gt;
[[File:Dxf Importer Install 17.png|left|Menu &gt; Preferences]]
{{clear}}

&lt;!--T:46--&gt;
24 : select &quot;Draft &gt; DXF / DWG options&quot; tab

&lt;!--T:47--&gt;
25 : In the DWG format option section, click the 3 points '''...''' 
[[File:Dxf Importer Install 18.png|left|Draft &gt; DXF / DWG options]]
{{clear}}

&lt;!--T:48--&gt;
26 : to give way Teigha converter that FreeCAD will use to convert DWG to DXF

&lt;!--T:49--&gt;
27 : enter in the directory here in Window here &quot;'''C:/Program Files/ODA/Teigha File Converter 4.00.1/'''&quot; and select TeighaFileConverter.exe and confirm

&lt;!--T:50--&gt;
[[File:Dxf Importer Install 19.png|left|DWG format option]]
{{clear}}

&lt;!--T:51--&gt;
28 : the operation is completed click the {{KEY|OK}} you can test a DWG file

&lt;!--T:52--&gt;
[[File:Dxf Importer Install 20.png|left|directory Teigha File Converter 4.00.1]]
{{clear}}

===Fourth step: === &lt;!--T:53--&gt;
Using Teigha. Teigha is a full program and you can use it without FreeCAD

&lt;!--T:54--&gt;
[[File:Dxf Importer Install 21.png|left|directory Teigha File Converter 4.00.1]]
{{clear}}

&lt;!--T:55--&gt;
1 : Imput folder: folder path or are the DXF or DWG files to convert

&lt;!--T:56--&gt;
2 : Output folder: path to the destination folder for the converted files

&lt;!--T:57--&gt;
3 : Recurse folder:

&lt;!--T:58--&gt;
4 : Audit:

&lt;!--T:59--&gt;
5 : Input files filter: filter for only DXF, DWG or DXF and DWG
 
6 : Output release: the file will be converted to the format and the selected version

&lt;!--T:60--&gt;
7 : Start: launches the process


</text>
    </revision>
  </page>
  <page>
    <title>Einführung in Python</title>
    <ns>0</ns>
    <id>1376</id>
    <revision>
      <id>107970</id>
      <parentid>88625</parentid>
      <timestamp>2014-09-01T12:13:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Embedding FreeCAD</title>
    <ns>0</ns>
    <id>430</id>
    <revision>
      <id>116906</id>
      <parentid>113912</parentid>
      <timestamp>2014-11-02T20:28:38Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>calling off space</comment>
      <sha1>je2vwiiollin2p0618i7chgwgceyz7p</sha1>
      <text xml:space="preserve" bytes="5501">
&lt;!--T:1--&gt;
FreeCAD has the amazing ability to be importable as a python module in other programs or in a standalone python console, together with all its modules and components. It's even possible to import the FreeCAD GUI as python module -- with some restrictions, however.

=== Using FreeCAD without GUI === &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
One first, direct, easy and useful application you can make of this is to import FreeCAD documents into your program. In the following example, we'll import the Part geometry of a FreeCAD document into [http://www.blender.org blender]. Here is the complete script. I hope you'll be impressed by its simplicity:
&lt;syntaxhighlight&gt;

FREECADPATH = '/opt/FreeCAD/lib' # path to your FreeCAD.so or FreeCAD.dll file
import Blender, sys
sys.path.append(FREECADPATH)
 
def import_fcstd(filename):
   try:
       import FreeCAD
   except ValueError:
       Blender.Draw.PupMenu('Error%t|FreeCAD library not found. Please check the FREECADPATH variable in the import script is correct')
   else:
       scene = Blender.Scene.GetCurrent()
       import Part
       doc = FreeCAD.open(filename)
       objects = doc.Objects
       for ob in objects:
           if ob.Type[:4] == 'Part':
               shape = ob.Shape
               if shape.Faces:
                   mesh = Blender.Mesh.New()
                   rawdata = shape.tessellate(1)
                   for v in rawdata[0]:
                       mesh.verts.append((v.x,v.y,v.z))
                   for f in rawdata[1]:
                       mesh.faces.append.append(f)
                   scene.objects.new(mesh,ob.Name)
       Blender.Redraw()

def main():
   Blender.Window.FileSelector(import_fcstd, 'IMPORT FCSTD', 
                        Blender.sys.makename(ext='.fcstd'))    
 
# This lets you import the script without running it
if __name__=='__main__':
   main()
&lt;/syntaxhighlight&gt;
&lt;!--T:4--&gt;
The first, important part is to make sure python will find our FreeCAD library. Once it finds it, all FreeCAD modules such as Part, that we'll use too, will be available automatically. So we simply take the sys.path variable, which is where python searches for modules, and we append the FreeCAD lib path. This modification is only temporary, and will be lost when we'll close our python interpreter. Another way could be making a link to your FreeCAD library in one of the python search paths. I kept the path in a constant (FREECADPATH) so it'll be easier for another user of the script to configure it to his own system.

&lt;!--T:5--&gt;
Once we are sure the library is loaded (the try/except sequence), we can now work with FreeCAD, the same way as we would inside FreeCAD's own python interpreter. We open the FreeCAD document that is passed to us by the main() function, and we make a list of its objects. Then, as we choosed only to care about Part geometry, we check if the Type property of each object contains &quot;Part&quot;, then we tesselate it.

&lt;!--T:6--&gt;
The tesselation produce a list of vertices and a list of faces defined by vertices indexes. This is perfect, since it is exactly the same way as blender defines meshes. So, our task is ridiculously simple, we just add both lists contents to the verts and faces of a blender mesh. When everything is done, we just redraw the screen, and that's it!

&lt;!--T:7--&gt;
Of course this script is very simple (in fact I made a more advanced [http://yorik.orgfree.com/scripts/import_freecad.py here]), you might want to extend it, for example importing mesh objects too, or importing Part geometry that has no faces, or import other file formats that FreeCAD can read. You might also want to export geometry to a FreeCAD document, which can be done the same way. You might also want to build a dialog, so the user can choose what to import, etc... The beauty of all this actually lies in the fact that you let FreeCAD do the ground work while presenting its results in the program of your choice.

=== Using FreeCAD with GUI === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
From version 4.2 on Qt has the intriguing ability to embed Qt-GUI-dependent plugins into non-Qt host applications and share the host's event loop.

&lt;!--T:10--&gt;
Especially, for FreeCAD this means that it can be imported from within another application with its whole user interface where the host application has full control over FreeCAD, then.

&lt;!--T:11--&gt;
The whole python code to achieve that has only two lines
&lt;syntaxhighlight&gt; 
import FreeCADGui 
FreeCADGui.showMainWindow()
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
If the host application is based on Qt then this solution should work on all platforms which Qt supports. However, the host should link the same Qt version as FreeCAD because otherwise you could run into unexpected runtime errors. 

&lt;!--T:13--&gt;
For non-Qt applications, however, there are a few limitations you must be aware of. This solution probably doesn't work together with all other toolkits.
For Windows it works as long as the host application is directly based on Win32 or any other toolkit that internally uses the Win32 API such as wxWidgets, MFC or WinForms. In order to get it working under X11 the host application must link the &quot;glib&quot; library.

&lt;!--T:14--&gt;
Note, for any console application this solution of course doesn't work because there is no event loop running.

&lt;!--T:15--&gt;
{{docnav|Scripted objects|Code snippets}}

&lt;!--T:16--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Embedding FreeCADGui</title>
    <ns>0</ns>
    <id>577</id>
    <revision>
      <id>111078</id>
      <parentid>111077</parentid>
      <timestamp>2014-09-23T20:19:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8nrvczrah1jjvedo3bgydlgdlggyb0r</sha1>
      <text xml:space="preserve" bytes="18803">
&lt;!--T:1--&gt;
You already know that you can [[Embedding FreeCAD|import the FreeCAD module]] into a python application, and use all its tools from the host application. But the FreeCAD User Interface (GUI) can also be imported as a python module. Normally you can only import the complete interface as a whole, not pieces of it. That is because the FreeCAD interface system is not only made of independent widgets and toolbars, but is a complex construction where several invisible components (such as the selection system, etc) are needed for the main 3D view to be able to function.

&lt;!--T:2--&gt;
But, with a bit of hacking, it is possible to import the whole FreeCAD interface, then move the 3D view from it to your own Qt application. We show here 3 different methods.

==Using the FreeCAD 3D view widget directly== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
Be aware that there are a lot of problems with this approach. The Qt event handling doesn't seem to work (no idea why) and if you use the 3d view's context-menu the application crashes. A better way could be to create your own 3d view SoQtExaminerViewer or SoQtViewer and &quot;push&quot; the content of FreeCAD's 3d view to your view, as shown in the other sections below.

&lt;!--T:5--&gt;
First, get the main window via PyQt:

&lt;syntaxhighlight&gt;
    from PyQt4 import QtGui
    from PyQt4 import QtCore
       
    def getMainWindow():
       toplevel = QtGui.qApp.topLevelWidgets()
       for i in toplevel:
          if i.metaObject().className() == &quot;Gui::MainWindow&quot;:
             return i
       raise Exception(&quot;No main window found&quot;)
 
    mw=getMainWindow()
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
Then get the View3DInventor view the same way:

&lt;syntaxhighlight&gt;
    def get3dview(mw):
          childs=mw.findChildren(QtGui.QMainWindow)
          for i in childs:
             if i.metaObject().className()==&quot;Gui::View3DInventor&quot;:
                return i
          return None
 
    v=get3dview(mw)
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
The following code is generated automatically, by [[Dialog_creation|creating a Ui-file with QtDesigner]], and converting it to python code with the pyuic tool:

&lt;syntaxhighlight&gt;
    # -*- coding: utf-8 -*-
 
    # Form implementation generated from reading ui file 'mainwindow.ui'
    #
    # Created: Sun Dec 27 11:18:56 2009
    #      by: PyQt4 UI code generator 4.6
    #
    # WARNING! All changes made in this file will be lost!
 
    from PyQt4 import QtCore, QtGui
 
    class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
            MainWindow.setObjectName(&quot;MainWindow&quot;)
            MainWindow.resize(508, 436)
            self.centralwidget = QtGui.QWidget(MainWindow)
            self.centralwidget.setObjectName(&quot;centralwidget&quot;)
            self.gridLayout = QtGui.QGridLayout(self.centralwidget)
            self.gridLayout.setObjectName(&quot;gridLayout&quot;)
            self.mdiArea = QtGui.QMdiArea(self.centralwidget)
            self.mdiArea.setViewMode(QtGui.QMdiArea.TabbedView)
            self.mdiArea.setTabPosition(QtGui.QTabWidget.South)
            self.mdiArea.setObjectName(&quot;mdiArea&quot;)
            self.gridLayout.addWidget(self.mdiArea, 0, 0, 1, 1)
            MainWindow.setCentralWidget(self.centralwidget)
            self.menubar = QtGui.QMenuBar(MainWindow)
            self.menubar.setGeometry(QtCore.QRect(0, 0, 508, 27))
            self.menubar.setObjectName(&quot;menubar&quot;)
            MainWindow.setMenuBar(self.menubar)
            self.statusbar = QtGui.QStatusBar(MainWindow)
            self.statusbar.setObjectName(&quot;statusbar&quot;)
            MainWindow.setStatusBar(self.statusbar)
 
            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)
 
        def retranslateUi(self, MainWindow):
            MainWindow.setWindowTitle(QtGui.QApplication.translate(&quot;MainWindow&quot;, &quot;MainWindow&quot;, None, QtGui.QApplication.UnicodeUTF8))
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
Then, create a main window that should be your application's main window, apply the UI setup above to it in order to add an MDI area and &quot;move&quot; our 3d view to it

&lt;syntaxhighlight&gt;
    ui=Ui_MainWindow()
    my_mw=QtGui.QMainWindow()
    ui.setupUi(my_mw)
    ui.mdiArea.addSubWindow(v)
    my_mw.show()
&lt;/syntaxhighlight&gt;

==Creating a soGui Examiner Viewer== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Alternatively, you can also use the FreeCADGui module to extract a coin/openInventor representation of the objects of your scene, then use that coin data in an external viewer (your application). Here is an easy way to get the 3d representation of an object:

&lt;syntaxhighlight&gt;
    FreeCAD.activeDocument().addObject(&quot;Part::Box&quot;,&quot;myBox&quot;)
    s=FreeCADGui.activeDocument().getObject(&quot;myBox&quot;).toString() # store as string
    from pivy import coin
    inp.setBuffer(s)
    myNode=coin.SoDB.readAll(inp) # restore from string
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
Then, create a standalone viewer with pivy:

&lt;syntaxhighlight&gt;
  from pivy.sogui import *
  from pivy.coin import *
  import sys
 
  def myViewer():
      # Initialize Coin. This returns a main window to use.
      # If unsuccessful, exit.
      myWindow = SoGui.init(sys.argv[0])
      if myWindow == None: sys.exit(1)
  
      # Make an empty scene and add our node to it
      scene = SoSeparator()
      scene.addChild(myNode)
 
      # Create a viewer in which to see our scene graph.
      viewer = SoGuiExaminerViewer(myWindow)
 
      # Put our scene into viewer, change the title
      viewer.setSceneGraph(scene)
      viewer.setTitle(&quot;FreeCAD Object Viewer&quot;)
      viewer.show()
 
      SoGui.show(myWindow) # Display main window
      SoGui.mainLoop()     # Main Coin event loop
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
Then you just need to run your viewer:

&lt;syntaxhighlight&gt;
      myViewer()
&lt;/syntaxhighlight&gt;

==Using the quarter module== &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
Instead of using the sogui viewer, you can also use the more modern quarter module. This is probably the best solution of the 3.

&lt;syntaxhighlight&gt;
    #!/usr/bin/env python
 
    ###
    # Copyright (c) 2002-2008 Kongsberg SIM
    #
    # Permission to use, copy, modify, and distribute this software for any
    # purpose with or without fee is hereby granted, provided that the above
    # copyright notice and this permission notice appear in all copies.
    #
    # THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    #
 
    import os
    import sys
 
    from PyQt4 import QtCore, QtGui
    from PyQt4.QtGui import QMainWindow, QWorkspace, QAction, QFileDialog, QApplication
 
    from pivy.coin import SoInput, SoDB
    from pivy.quarter import QuarterWidget
 
    import FreeCAD, FreeCADGui
 
    def getMainWindow():
       toplevel = QtGui.qApp.topLevelWidgets()
       for i in toplevel:
          if i.metaObject().className() == &quot;Gui::MainWindow&quot;:
             return i
       raise Exception(&quot;No main window found&quot;)
 
    class MdiQuarterWidget(QuarterWidget):
        def __init__(self, parent, sharewidget):
            QuarterWidget.__init__(self, parent=parent, sharewidget=sharewidget)
 
        def loadFile(self, filename):
            in_ = SoInput()
            if (in_.openFile(str(filename.toLatin1()))):
                root = SoDB.readAll(in_)
            if (root):
                self.setSceneGraph(root)
                self.currentfile = filename
                self.setWindowTitle(filename)
                return True
            return False
 
        def currentFile(self):
            return self.currentfile
 
        def minimumSizeHint(self):
            return QtCore.QSize(640, 480)
 
    class MdiMainWindow(QMainWindow):
        def __init__(self, qApp):
            QMainWindow.__init__(self)
            self._firstwidget = None
            self._workspace = QWorkspace()
            self.setCentralWidget(self._workspace)
            self.setAcceptDrops(True)
            self.setWindowTitle(&quot;Pivy Quarter MDI example&quot;)
 
            filemenu = self.menuBar().addMenu(&quot;&amp;File&quot;)
            windowmenu = self.menuBar().addMenu(&quot;&amp;Windows&quot;)
 
            fileopenaction = QAction(&quot;&amp;Create Box&quot;, self)
            fileexitaction = QAction(&quot;E&amp;xit&quot;, self)
            tileaction = QAction(&quot;Tile&quot;, self)
            cascadeaction = QAction(&quot;Cascade&quot;, self)
 
            filemenu.addAction(fileopenaction)
            filemenu.addAction(fileexitaction)
            windowmenu.addAction(tileaction)
            windowmenu.addAction(cascadeaction)
 
            self.connect(fileopenaction, QtCore.SIGNAL(&quot;triggered()&quot;), self.createBoxInFreeCAD)
            self.connect(fileexitaction, QtCore.SIGNAL(&quot;triggered()&quot;), QtGui.qApp.closeAllWindows)
            self.connect(tileaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.tile)
            self.connect(cascadeaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.cascade)
 
            windowmapper = QtCore.QSignalMapper(self)
            self.connect(windowmapper, QtCore.SIGNAL(&quot;mapped(QWidget *)&quot;), self._workspace.setActiveWindow)
 
            self.dirname = os.curdir       
 
        def dragEnterEvent(self, event):
            # just accept anything...
            event.acceptProposedAction()
 
        def dropEvent(self, event):
            mimedata = event.mimeData()
            if mimedata.hasUrls():
                path = mimedata.urls().takeFirst().path()
                self.open_path(path)
 
        def closeEvent(self, event):
            self._workspace.closeAllWindows()
 
        def open(self):
            self.open_path(QFileDialog.getOpenFileName(self, &quot;&quot;, self.dirname))
 
        def open_path(self, filename):
            self.dirname = os.path.dirname(str(filename.toLatin1()))
            if not filename.isEmpty():
                existing = self.findMdiChild(filename)
                if existing:
                    self._workspace.setActiveWindow(existing)
                    return
            child = self.createMdiChild()
            if (child.loadFile(filename)):
                self.statusBar().showMessage(&quot;File loaded&quot;, 2000)
                child.show()
            else:
                child.close()
 
        def findMdiChild(self, filename):
            canonicalpath = QtCore.QFileInfo(filename).canonicalFilePath()
            for window in self._workspace.windowList():
                mdiwidget = window
                if mdiwidget.currentFile() == canonicalpath:
                    return mdiwidget
            return 0;
 
        def createMdiChild(self):
            widget = MdiQuarterWidget(None, self._firstwidget)
            self._workspace.addWindow(widget)
            if not self._firstwidget:
                self._firstwidget = widget
            return widget
 
        def createBoxInFreeCAD(self):
            widget = MdiQuarterWidget(None, self._firstwidget)
            self._workspace.addWindow(widget)
            if not self._firstwidget:
                self._firstwidget = widget
            widget.show()
            doc = FreeCAD.newDocument()
            doc.addObject(&quot;Part::Box&quot;,&quot;myBox&quot;)
            iv_=FreeCADGui.getDocument(doc.Name).getObject(&quot;myBox&quot;).toString()
            in_ = SoInput()
            in_.setBuffer(iv_)
            root = SoDB.readAll(in_)
            if (root):
                widget.setSceneGraph(root)
 
    def main():
        app = QApplication(sys.argv)
 
        mdi = MdiMainWindow(app)   
        mdi.show()
        FreeCADGui.showMainWindow() # setup the GUI stuff of FreeCAD
        mw=getMainWindow()
        mw.hide() # hide all
        if len(sys.argv)==2:
            mdi.open_path(QtCore.QString(sys.argv[1]))
        sys.exit(app.exec_())
 
    def show():
        mdi = MdiMainWindow(QtGui.qApp)   
        mdi.show()
        mw=getMainWindow()
        #mw.hide() # hide all
 
    if __name__ == '__main__':
        main()
&lt;/syntaxhighlight&gt;

== Without even firing up the FreeCAD Gui == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
Starting from FreeCAD rev2760, it is now possible to obtain the coin representation of any FreeCAD object without opening the main window. This makes it extremely easy to implement your own viewer and transparently have FreeCAD updating it. After importing the FreeCADGui module, you need to fire it up with the setupWithoutGUI() method, after which you can use all of FreeCAD's view providers to obtain coin/openInventor nodes.

&lt;syntaxhighlight&gt;
    import os, sys, FreeCAD, FreeCADGui
    from PyQt4 import QtCore, QtGui
    from PyQt4.QtGui import QMainWindow, QWorkspace, QAction, QFileDialog, QApplication
    from pivy.coin import SoInput, SoDB, sogui
 
    class MdiMainWindow(QMainWindow):
        def __init__(self, qApp):
            QMainWindow.__init__(self)
            self._firstwidget = None
            self._workspace = QWorkspace()
            self.setCentralWidget(self._workspace)
            self.setAcceptDrops(True)
            self.setWindowTitle(&quot;Pivy Quarter MDI example&quot;)
            self.viewers=[]
 
            filemenu = self.menuBar().addMenu(&quot;&amp;File&quot;)
            windowmenu = self.menuBar().addMenu(&quot;&amp;Windows&quot;)
 
            fileopenaction = QAction(&quot;&amp;Create Box&quot;, self)
            fileexitaction = QAction(&quot;E&amp;xit&quot;, self)
            tileaction = QAction(&quot;Tile&quot;, self)
            cascadeaction = QAction(&quot;Cascade&quot;, self)
 
            filemenu.addAction(fileopenaction)
            filemenu.addAction(fileexitaction)
            windowmenu.addAction(tileaction)
            windowmenu.addAction(cascadeaction)
 
            self.connect(fileopenaction, QtCore.SIGNAL(&quot;triggered()&quot;), self.createBoxInFreeCAD)
            self.connect(fileexitaction, QtCore.SIGNAL(&quot;triggered()&quot;), QtGui.qApp.closeAllWindows)
            self.connect(tileaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.tile)
            self.connect(cascadeaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.cascade)
 
            windowmapper = QtCore.QSignalMapper(self)
            self.connect(windowmapper, QtCore.SIGNAL(&quot;mapped(QWidget *)&quot;), self._workspace.setActiveWindow)
 
        def closeEvent(self, event):
            self._workspace.closeAllWindows()
 
        def createBoxInFreeCAD(self):
            widget = QtGui.QWidget(self._firstwidget)
            viewer = sogui.SoGuiExaminerViewer(widget)
            self._workspace.addWindow(widget)
            if not self._firstwidget:
                self._firstwidget = widget
            widget.show()
            self.viewers.append(viewer)
            doc = FreeCAD.newDocument()
            obj=doc.addObject(&quot;Part::Box&quot;,&quot;myBox&quot;)
            doc.recompute()
            root=FreeCADGui.subgraphFromObject(obj)
            viewer.setSceneGraph(root)
 
    def main():
        app = QApplication(sys.argv)
        mdi = MdiMainWindow(app)   
        mdi.show()
        FreeCADGui.setupWithoutGUI()
        sys.exit(app.exec_())
 
    if __name__ == '__main__':
        main()
&lt;/syntaxhighlight&gt;

&lt;!--T:17--&gt;
Or, if using pivy's sogui module doesn't work for you (the sogui module is becoming obsoleted and the coin developers are now favoring the new quarter library, which has much better interaction with qt), this is the same script but with using quarter:

&lt;syntaxhighlight&gt;
    #!/usr/bin/env python
 
    import os
    import sys
 
    from PyQt4 import QtCore, QtGui
    from PyQt4.QtGui import QMainWindow, QWorkspace, QAction, QApplication
 
    from pivy.coin import SoInput, SoDB
    from pivy.quarter import QuarterWidget
    import FreeCADGui
 
 
    class MdiQuarterWidget(QuarterWidget):
        def __init__(self, parent, sharewidget):
            QuarterWidget.__init__(self, parent=parent, sharewidget=sharewidget)
 
        def minimumSizeHint(self):
            return QtCore.QSize(640, 480)
 
 
    class MdiMainWindow(QMainWindow):
        def __init__(self, qApp):
            QMainWindow.__init__(self)
            self._firstwidget = None
            self._workspace = QWorkspace()
            self.setCentralWidget(self._workspace)
            self.setAcceptDrops(True)
            self.setWindowTitle(&quot;Pivy Quarter MDI example&quot;)
 
            filemenu = self.menuBar().addMenu(&quot;&amp;File&quot;)
            windowmenu = self.menuBar().addMenu(&quot;&amp;Windows&quot;)
 
            fileopenaction = QAction(&quot;&amp;Create Box&quot;, self)
            fileexitaction = QAction(&quot;E&amp;xit&quot;, self)
            tileaction = QAction(&quot;Tile&quot;, self)
            cascadeaction = QAction(&quot;Cascade&quot;, self)
 
            filemenu.addAction(fileopenaction)
            filemenu.addAction(fileexitaction)
            windowmenu.addAction(tileaction)
            windowmenu.addAction(cascadeaction)
 
            self.connect(fileopenaction, QtCore.SIGNAL(&quot;triggered()&quot;), self.createBoxInFreeCAD)
            self.connect(fileexitaction, QtCore.SIGNAL(&quot;triggered()&quot;), QtGui.qApp.closeAllWindows)
            self.connect(tileaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.tile)
            self.connect(cascadeaction, QtCore.SIGNAL(&quot;triggered()&quot;), self._workspace.cascade)
 
            windowmapper = QtCore.QSignalMapper(self)
            self.connect(windowmapper, QtCore.SIGNAL(&quot;mapped(QWidget *)&quot;), self._workspace.setActiveWindow)
 
            self.dirname = os.curdir       
 
        def closeEvent(self, event):
            self._workspace.closeAllWindows()
 
        def createBoxInFreeCAD(self):
            d=FreeCAD.newDocument()
            o=d.addObject(&quot;Part::Box&quot;)
            d.recompute()
            s=FreeCADGui.subgraphFromObject(o)
            child = self.createMdiChild()
            child.show()
            child.setSceneGraph(s)
 
        def createMdiChild(self):
            widget = MdiQuarterWidget(None, self._firstwidget)
            self._workspace.addWindow(widget)
            if not self._firstwidget:
                self._firstwidget = widget
            return widget
 
 
    def main():
        FreeCADGui.setupWithoutGUI()
        app = QApplication(sys.argv)
        mdi = MdiMainWindow(app)   
        mdi.show()
        sys.exit(app.exec_())
 
 
    if __name__ == '__main__':
        main()

&lt;/syntaxhighlight&gt;


&lt;!--T:18--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Engine Block Tutorial</title>
    <ns>0</ns>
    <id>1320</id>
    <revision>
      <id>127770</id>
      <parentid>127769</parentid>
      <timestamp>2014-12-02T21:20:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>n5na3h4bf4torfg9dfqqsdlym1nwahb</sha1>
      <text xml:space="preserve" bytes="30273">
&lt;!--T:1--&gt;
[[Image:Engine Block Tutorial - Finished Engine Block.png|thumb|right|300px]]

&lt;!--T:2--&gt;
This is an introductory tutorial to modeling in FreeCAD.  The purposes of the tutorial are to introduce you to the primitive data types for parametric objects, boolean operations, 2D drafting, and the process of converting 2D drafts into 3D models.  As a working example we will be modeling the simple engine block and crankcase seen at the right.

== Getting Started == &lt;!--T:3--&gt;
To begin with, open FreeCAD, go to ''File-&gt;New'' to create a new document, and then ''File-&gt;Save'' to save it somewhere on your computer, I named my project 'Engine'.  You will notice that after you save the project, the ''tree view'' on the left side of the screen will show the name of the project you are working on.  You can have more than one project open at a time and each project will be shown as the root of a tree in the tree view.

== Roughing Out the Block == &lt;!--T:4--&gt;
Now to begin working on the actual model.  We will start by adding a Box for the overall outline of the engine block.  To do this we need to add a ''part'' to the model, go to View-&gt;Workbench-&gt;Part to select the [[Part Module]].  You will notice that after you select the workbench, you get a different set of toolbar buttons at the top.  Flip through a couple of the other workbenches to familiarize yourself with the workbench system and then return to the part module.

=== The Billet === &lt;!--T:5--&gt;
On the part module you will see a bunch of buttons for primitive objects like box, sphere, cone, etc.  Click the box button ([[Image:Part_Box.png|16px]]) to add a cube to the scene.  Each of the primitives listed has a default set of parameters that get set when the primitive is added.  If you want you can add one of each of the primitives to see what they all look like.  Primitives can be removed from the scene by selecting them and pressing the delete key.  There are two ways to select objects, you can either left-click on them in the 3D view, or you can left click on them in the tree view.  In either method, holding CTRL will let you select multiple items.  You can zoom the 3d view with the scroll wheel on your mouse.  To pan the view, middle click and drag.  To rotate the view you click and hold the middle mouse button and while holding it you ''also'' push and hold the left mouse button as well, then dragging the mouse will rotate the view.  You can also do a single middle click on some part of your 3D object to make the view rotate around that point in 3D space.  Also, the numbers 1-6 and the number 0 on the number pad will show you various views of the scene (top, left, axometric, etc).  Spend a minute or two getting comfortable with manipulating the 3D view.

&lt;!--T:6--&gt;
: ''Further reading: [[Mouse Model | Navigating in the 3D space]]''

&lt;!--T:7--&gt;
Once you have your cube and are comfortable with how the mouse works, we will begin setting up the dimensions of the CAD model.  Select the cube by clicking on it in the tree view and then click on the 'Data' tab of the ''Property View'' located below the tree view (go to ''View-&gt;Views-&gt;Property View'' if you have closed it).  In the data tab you can modify the properties of the object you have selected in the tree view.  Depending on what kind of object you select there will be different parameters for you to set in the data tab.  For a box we need a 3 vectors, one for its position in 3D space, another for its orientation, and a third to specify the dimensions of the box.  For a sphere you would be able to specify the central point, and the radius; cones have a radius, height, and position; and so on.  We are building a small 2-cylinder engine block so set the size and position of the box to the following values (make sure you set the XYZ under 'Position', the ones under 'Axis' set the axis of rotation and the default values are what we want):

&lt;!--T:8--&gt;
:{| class=wikitable border=1
|-
| X:  0.0 mm || Height: 110.0 mm
|-
| Y:  -40.0 mm || Length: 140.0 mm
|-
| Z:  0.0 mm || Width: 80.0 mm
|-
|}

&lt;!--T:9--&gt;
Now that you have your engine block dimensioned properly we should give it a more descriptive name.  Select it in the tree view and either right click to rename it or press the ''F2 key'' on your keyboard.  Name this part 'Billet'.

=== The First Cylinder === &lt;!--T:10--&gt;
Next we will carve out the first cylinder all the way through the engine block.  To do this we will add a cylinder to the model with the size we want to bore out and then do a Boolean operation to &quot;subtract&quot; the material away from the block.  Click the add cylinder button ([[Image:Part_Cylinder.png|16px]]) to create a new cylinder and then select it in the tree view and set its properties to the following:

&lt;!--T:11--&gt;
:{| class=wikitable border=1
|-
| X:  40.0 mm || Height: 110.0 mm
|-
| Y:  0.0 mm || Radius: 25.0 mm
|-
| Z:  0.0 mm || 
|-
|}

&lt;!--T:12--&gt;
Once the properties are set correctly you should see the circular ends of the cylinder on the top and bottom faces of the engine block.  Name this object ''Cylilnder 1'' by selecting it in the tree view.

=== The Second Cylinder === &lt;!--T:13--&gt;
We could make the second cylinder the same way we made the first, however it would be much easier to just copy the existing work we have done for the one as the only difference between the two is their X coordinate.  To do this, select ''Cylinder 1'' in the tree view and then go to ''Edit-&gt;Duplicate Selection''.  You will see the new cylinder appear in the tree view (name it ''Cylinder 2'' right away), but you will not see it in the 3D view as it is in the same place as the first cylinder.  Now select ''Cylinder 2'' in the tree view and then change it's X coordinate to 100 mm.  Notice that even as you are updating the numbers in the data field you should see the cylinder moving in the 3D view.  Once the second cylinder is properly positioned you can see what they look like by selecting the ''Billet'' in the tree view and then pressing ''Spacebar'' to hide it (notice that hidden objects are grayed out in the tree view).  Hide all three objects one by one and then show them all again.

===  Boring out the Cylinders === &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
[[Image: Engine Block Tutorial - Bored Block.png|thumb|right|300px]]

&lt;!--T:16--&gt;
Now that both cylinders are in place we want to use them to bore out the block to the appropriate dimensions.  To do this we will use ''boolean operations'' on our 3 primitives.  We will start by making a union out of the two cylinders so we can subtract them as a group from the block.  Select ''Cylinder 1'' in the tree view and then ''CTRL+LeftClick'' to select ''Cylinder 2'' as well.  Now press the Union button ([[Image:Part_Fuse.png|16px]]) to fuse the objects together.  You will notice that in the tree view, there is now a new object called ''Fusion''.  If you click the dropdown arrow next to Fusion you will see the two cylinders but they will be grayed out.  Instead of Fusion, lets rename that to ''Cylinders'' so it is easier to find later.  Now we bore out the engine block.  Select the ''Billet'' and ''then'' select the ''Cylinders'' and press the Make Cut button ([[Image:Part_Cut.png|16px]]).  The two selected objects will again be combined like they were for the union operation and the single resulting object will be named ''Cut'' (which you should rename to ''Bored Block'').  Press the ''2'' key on the number pad and you should now be able to look straight down through the cylinders out the other side of the engine block, then ''MiddleClick+LeftClick+Drag'' to look at your engine block.  To the right you will see what the finished product should look like, notice that I have expanded the tree view on the left to show the individual primitives and have selected ''Cylinder 2'' for examination in the ''Data'' tab of the ''Property View''.

=== The Key Advantage of Parametric Modeling === &lt;!--T:17--&gt;
Now that we have our cylinders bored out we will take a second to see one of the advantages of this system.  Suppose at some point in the development, we find out that we want the cylinders to be a bit bigger.  Since the union and intersection operations we performed were recorded as groupings in the tree view, we can change the cylinder size and FreeCAD will just re-run the union and intersection process and arrive at the new engine size.  Play around with the radius and position of the two cylinders a bit and then return them to the parameters quoted above, before continuing the tutorial.

== The Crankcase == &lt;!--T:18--&gt;

=== Billet and Bearing Caps === &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
Next we will work on a crankcase under the engine block.  Add a new box, rename it to ''Crankcase Billet'', and give it the following properties:

&lt;!--T:21--&gt;
:{| class=wikitable border=1
|-
| X:  0.0 mm || Height: 85.0 mm
|-
| Y:  -50.0 mm || Length: 140.0 mm
|-
| Z:  -85.0 mm || Width: 100.0 mm
|-
|}

&lt;!--T:22--&gt;
In order to tell the crankcase apart from the let's give one of them a different color.  You can change color by right clicking on the object to change in the tree view.  You can assign a color yourself or give the object a random color (choose random again if you don't like the color).  Add another box called ''Bearing carve'', give it the following properties, and then cut the ''Bearing carve'' away from the ''Crankcase Billet'' (i.e. select the billet first):

&lt;!--T:23--&gt;
:{| class=wikitable border=1
|-
| X:  0.0 mm || Height: 30.0 mm
|-
| Y:  -40.0 mm || Length: 140.0 mm
|-
| Z:  -85.0 mm || Width: 80.0 mm
|-
|}

&lt;!--T:24--&gt;
Rename the resulting ''Cut'' object to ''Carved crankcase''.

=== Carving out the journals === &lt;!--T:25--&gt;
Next we will cut out a semi-circular place for the crankshaft to sit and a space in the crankcase for it to spin.  We will start with a cylinder, but the orientation of the default cylinder is vertical, whereas we need a horizontal one.  This means we need to figure out how to rotate the cylinder to align it properly with our engine.  If you look at the guide axis in the bottom right corner of the 3D window you will see we want the crankshaft to lie along the positive x-axis.  This means that from its starting location we need to rotate 90 degrees around an axis parallel to the y-axis of the scene.  This tells us what we need to enter the parameters for the cylinder.  Create a cylinder called ''Cranshaft carve'' and give it these properties (notice that now we have to specify the orientation parameters, as well as the regular dimensions we did for the cylinder bores):

&lt;!--T:26--&gt;
:{| class=wikitable border=1
|-
| Axis X:  0.0 mm || Angle: 90.0 degrees
|-
| Axis Y:  1.0 mm || 
|-
| Axis Z:  0.0 mm ||
|-
| Position X:  0.0 mm || Height: 140.0 mm
|-
| Position Y:  0.0 mm || Radius: 20.0 mm
|-
| Position Z:  -55.0 mm ||
|-
|}

&lt;!--T:27--&gt;
Cut the crankshaft carve object away from the ''Carved crankcase'' and rename the resulting object ''Crankcase with journals''.

=== Finishing out the Crankcase === &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
[[Image: Engine Block Tutorial - Crankcase.png|thumb|right|300px]]

&lt;!--T:30--&gt;
Lastly we will cut out 2 final boxes so that the piston rods can reach from the crankcase up into the engine block.  Make two objects called ''Box carve 1'' and ''Box carve 2'' with the following properties, union them into an object called ''Box carvers'', and cut this object away from the ''Crankcase with journals'', calling the final result ''Crankcase''.  Remember, you can hide the ''Bored block'' by selecting it and pushing spacebar so you can see what you are doing; also, you can duplicate ''Box carve 1'' and just change the X coordinate to get the second carver.

&lt;!--T:31--&gt;
:{| class=wikitable border=1
|-
| X:  15.0 mm || Height: 55.0 mm
|-
| Y:  -25.0 mm || Length: 50.0 mm
|-
| Z:  -55.0 mm || Width: 50.0 mm
|-
|}

&lt;!--T:32--&gt;
:{| class=wikitable border=1
|-
| X:  75.0 mm || Height: 55.0 mm
|-
| Y:  -25.0 mm || Length: 50.0 mm
|-
| Z:  -55.0 mm || Width: 50.0 mm
|-
|}

&lt;!--T:33--&gt;
On the right you can see what the final result should look like.  I have fully expanded the tree view so you can see the hierarchy of the boolean operations used to build the device.  Remember that you can still dig down into this tree and change cylinder diameters, change the size or position of the crankshaft, etc, without having to rebuild the whole model from scratch.  We could continue to carve out the crankcase further but this will be enough for now.  Next we will look at using the 2D drafting mode to design the headbolt pattern and cut down on the weight of the engine block by removing much of the unnecessary steel billet that remains around the outside of the cylinders.

== 2D Drafting the Head Gasket Design == &lt;!--T:34--&gt;
For the head bolts and the shape of the engine block we will be using more boolean operations to &quot;carve&quot; away the parts of the block we don't want.  However, if we stop to think about it, every head bolt is going to look the same, it will cut all the way down into the crankcase, the only thing different will be where on the top of the head it is located.  This means we can simply &quot;draw&quot; the shape of the head gasket on the top of the engine, and then use that like a pattern to do the carving we want done.

=== Entering 2D Drafting Mode === &lt;!--T:35--&gt;
First we need to switch to the 2D Drafting workbench, to do this from part mode you can select ''2D Drafting'' from the dropdown box at the top that currently says ''Part''.  If you cannot find the dropdown box (not all workbenches show the dropdown) you can also select a workbench from the ''View-&gt;Workbench'' menu entry.  Even though we are doing 2d drawing, we will draw them in the 3D window by telling FreeCAD what plane we want the drawings projected into.  After you have selected the 2D Drafting workbench just above the top-right corner of the 3D view and click on the leftmost button which will say one of the following {none, top, front, size, or d(..., ..., ...)}.  Once you click that, the left side of the bar will have a text box for you to enter a plane offset, and 5 buttons: XY, XZ, YZ, View, and None.  The first three are the standard top, front, and side views, the ''View'' entry will use the plane perpendicular to the direction the camera is looking (the camera's viewplane), and the last will not project into a plane and let you fully define the XYZ coordinates for every point you draw.  We want to set a plane offset of 110 (type it in and press enter) and then click the XY button to project the drawing onto the XY plane, located 110 mm up the Z axis which corresponds to the top of the engine block.  Now that we have told FreeCAD what plane to draw in we are ready to start designing the head gasket.

&lt;!--T:36--&gt;
The last thing to do is set up the 3D view.  Even though all the drawings we produce will be projected into our defined 2D plane, we can look at the plane we are drawing on from any angle (including the other side of the plane so we draw &quot;backwards&quot;).  Since we have told it the plane is the one co-planar to the top of the engine block, we should probably have the 3D view looking at that, or at least roughly in that direction.  Press the 2 key on the number pad to look at the top view (notice that on the num pad, adjacent keys are opposite views so 1 and 4 are front-back, 2 and 5 are top-bottom, and 3 and 6 are front-back).  Once you are looking at the engine from the top down, you can center it by dragging the middle mouse button to pan the view.  Finally, the 2D drafting mode will allow us to snap parts of the drawing to the corners of the engine block, the center of the cylinders, etc, in order to make this work best we should hide the crankcase so the drawings snap only to the part we are working on (press spacebar to show/hide the selected object).

=== Laying Out the Head Bolts === &lt;!--T:37--&gt;
Now that the proper plane projection and view is set up we add 2d drawing elements in the same way we added primitives.  Click the ''Add Circle'' button ([[Image:Draft_Circle.png|16px]]) and move your mouse around in the 3D view.  You then need to tell FreeCAD the XY location for the center of the circle, and the radius, for both of these measurements you can either enter them with the mouse (following the instructions in the bottom left status bar), or you can type in the values in the text entry boxes that appear above the tree view.  Go ahead and add a couple random circles on the top of the engine, as well as a few not on the engine, i.e. just out in the empty space surrounding your view of the engine.  After you have done this, rotate the camera around the top of the engine block and look at the circles you drew, notice how they are &quot;flat&quot; in the plane we projected them into and this plane lines up with the top of the engine block; this will be important when we extrude the drawing to shape the engine.  Now that you see how to add 2D elements you can delete the test circles you added and we will start entering the actual head layout.  Note that if your circle disappears inside the engine block, your drawing projection plane is not properly set to XY mode, offset 110 mm.

&lt;!--T:38--&gt;
Adding drafting elements with the mouse is fast and easy, but it is not very precise.  For the actual bolt pattern we use the fact that moving the mouse will update the numbers in the text boxes just above the 3D view so we can see roughly the coordinates of where we want to place things.  Once we have these rough coordinates we can type in the real values we want for precise positioning.  Reset to the top view of the engine, click the ''Add circle'' button, and move your mouse around the top left corner of the engine block taking not of a good location for the head bolt.  It looks like X=10, Y=30, would be a good place for the circle (note the Z coordinate should be grayed out, if it is not you need to set the plane properly like in the previous section, pressing escape will cancel drawing the circle).

&lt;!--T:39--&gt;
Now that you see how to easily determine the coordinates of drawing elements you can easily design a bolt pattern or other 2 dimensional layout for a part such as fluid channels, circuit-board traces, etc.  For our 3 head bolts let's on this side of the engine, let's use the following coordinates.  Note that when you are typing in values to the boxes you can press enter to move on to the next box, and it is also a good idea to move your mouse out of the 3D view before you start typing in the coordinates as too much mouse movement will overwrite the numbers you have already entered in the text entry fields.  Also, on my system I had trouble with the typed in circles having their Z coordinates set to 12.5 for some reason, if this is a problem for you, you can set the drawing projection plane to ''None'' and then manually enter the Z coordinates for the circles to be 110.  Finally, when creating the circles, make sure to check the box labeled ''Filled'' otherwise when we extrude them later they will just create tubes like a toilet paper tube instead of a solid cylinder.

&lt;!--T:40--&gt;
:{| class=wikitable border=1
|-
| X1:  10 || Y1:  25 || Radius: 2.5 mm
|-
| X2:  70 || Y2:  25 || Radius: 2.5 mm
|-
| X3:  130 || Y3:  25 || Radius: 2.5 mm
|}

&lt;!--T:41--&gt;
Name these circles ''Bolt 1'' through ''Bolt 3''.

=== The Other Side of the Block === &lt;!--T:42--&gt;
Now that the first three head bolts are in place down one side of the engine we need three more mirrored on the other side, there are three ways we could do this:
*  We could just continue adding circles like we did for the first three and just negate the Y coordinates to put the bolts on the other side of the engine.
*  We could select the three we have added, go to ''Edit-&gt;Duplicate Selection'' and then negate the Y coordinates of the three new circles.
*  We could use the mirror functionality in the Part module.

&lt;!--T:43--&gt;
Since you should already know how to do the first and second way, we will choose the third way for this example model.  Each of the three methods has its own advantages and disadvantages, but a good operating rule is that simple models (like this one) probably should use the first or second methods, whereas models with lots of duplication and/or duplication of very complicated shapes/objects should probably use the third method.

&lt;!--T:44--&gt;
So even though it is a bit of overkill we will mirror these bolts as a demonstration.  Switch back to the part workbench (note that you can always switch to the ''Complete'' workbench to see all the tools at once if you would rather not switch back and forth) by going to ''View-&gt;Workbench''.  Select the three bolt circles in the tree view, and then press the mirror button ([[Image:Part_Mirror.png|16px]]).  Once you press the mirror button you should notice a new display called the ''Combo view'' pop up on in the pane underneath the Tree view.  Many of the tools need additional input before they can run and the Combo view lets you enter these parameters.  You can make the Combo view larger by dragging the divider line separating it from the Property view up or down.  Select ''Bolt 1'' from the list on the Combo view and set the ''mirror plane'' to XZ, then press OK (do the same for bolts 2 and 3).

&lt;!--T:45--&gt;
At this point you should have a basic engine block with the cylinders bored out and the headbolt locations marked.

=== Cutting Down the Excess Billet Material from the Block === &lt;!--T:46--&gt;
Now that we have holes marked out for headbolts (we could do the same thing for oil channels, water jackets, etc) we will want to &quot;trim&quot; the outside of the block billet down to a more suitable shape.  This will make the engine lighter, allow it to cool more easily, mean less steel must be used to cast the block.  Like the bolt pattern we will be laying out a 2 dimensional drawing outlining the shape we want on the finished product.  We could draw the spline curve directly with the mouse, or use the hybrid approach like we used for the circles where we used the mouse to find approximate coordinates and then typed in the true values we wanted.  A more interesting approach is to use the 2D drafting's ''construction mode'' to plot a few guide shapes to help us trace out a nice, symmetric, spline curve by snapping to our constructed guide shapes.

&lt;!--T:47--&gt;
As a guide we will draw two regular polygons for each cylinder, with the polygons concentric with the cylinder.  To begin, switch to the top view of the engine block, hide the crankcase, switch back to the 2D drafting workbench, select the reference plane offset to 110 mm and the XY plane mode (or the ''None'' mode if you prefer), and click the ''Construction mode'' button in the command bar (the construction mode button looks like a trowel and is located just above the top right corner of the 3D view).  Construction mode works just like the normal mode except any 2D drawing objects created while in construction mode get drawn in a different color and are automatically put into a separate group in the Tree view, this allows you to hide you guide drawings and leave behind only the real things like bolt hole markings by hiding the construction group, or to delete all of the guide objects by just deleting the group.

&lt;!--T:48--&gt;
: ''Further reading: [[Draft ToggleConstructionMode | Construction Mode]]''

&lt;!--T:49--&gt;
Now that your drawing plane is properly set up and you are in construction mode, click the ''Regular Polygon'' button ([[Image:Draft_Polygon.png|16px]]) and move your mouse along the edge of the left cylinder while holding down the CTRL button.  You should see that it is snapping a small black dot either to the edge of the cylinder, or to the center of the cylinder, depending on where your mouse is along the circumference.  Move so that the black dot snaps to the center of the cylinder and click the left mouse button.  This places the center of the polygon at the center of the cylinder, the program prompts us for the number of edges on the polygon and the radius it is inscribed in.  Investigating with the mouse a little bit looks like a radius of 30 is good (so type that in) and enter 14 for the number of side, but leave the ''Filled'' box unchecked this time.  If you can't get the snap to lock onto the center of the cylinder (I had trouble with mine) you can always enter the coordinates manually (X=40, Y=0, Z=110).  Add a second polygon, also centered on the left cylinder but this one should have 22 side and 45 mm radius.  Finally add the same two polygons over the right cylinder (centered at X=100, Y=0, Z=110).  When you are finished you should have two &quot;figure-8's&quot; surrounding the cylinders and head bolts.  (Note that currently the program does not actually prompt you for the number of edges so you will just have to set the center and radius and then change the number of faces in the Property view).

&lt;!--T:50--&gt;
[[Image: Engine Block Tutorial - Spline.png|thumb|right|300px]]

&lt;!--T:51--&gt;
Now that we have our guide polygons in place we are ready to draw in the spline curve defining the outside shape of the engine block.  Since this curve will be part of the final object you can turn off construction mode by clicking the same button you pressed to turn it on.  Now click the ''Add BSpline'' button ([[Image:Draft_BSpline.png|16px]]) and start drawing the BSpline by ''CTRL+left clicking'' on each place you want to add a control point for the spline curve.  You will want your first control point to be on the leftmost point of the inner guide polygon for the left cylinder.  Continue adding control points all along the spline curve until you click on the last point ''before'' the one you started drawing, then click the ''Close'' button up where you typed in the position and radius for the 2D circles we drew for the headbolts.  Clicking this close button finished drawing control points for the spline curve and joins the ends together to form a closed loop.  It is very important that you properly close loops like this if you plan to extrude them into solid objects like we will be with this one.  For open spline curves you can just click the ''Finish'' button instead of the Close button when you are finished drawing.  To the right you can see what you finished spline curve should look like just before you press the close button (notice I have drawn all but the last line segment and my mouse pointer is just about to click the ''Close'' button to finish the spline curve).  Also notice that I have checked the ''Filled'' box so the resulting spline curve will form a solid sheet, rather than just an empty ring, this must be done to extrude it into a solid shape that is capped on the ends.

&lt;!--T:52--&gt;
[[Image: Engine Block Tutorial - Spline Edit Mode.png|thumb|right|300px]]

&lt;!--T:53--&gt;
The control points are not shown in that picture so I have added a second screenshot showing the finished spline in edit mode (click the ''Edit mode'' button to turn editing on or off for the selected object, make sure to turn it off when you are done editing it or just skip over this step if you are satisfied with your engine block shape).  Also, note that there is a discontinuity on the leftmost edge of the spline curve, even though it is closed properly, this is a bug in the program behavior and is currently being fixed, as a result your spline curve may look slightly different if you are running a newer version of the software than is available at this time.

=== Extruding the 2D Head Design into our 3D Model to Finish the Design === &lt;!--T:54--&gt;

&lt;!--T:55--&gt;
Now we are closing in on the final design of the engine.  Return to the Part workbench and click the ''Extrude sketch'' button ([[Image:Part_Extrude.png|16px]]).  In the combo box that pops up, use ''CTRL+LeftClick'' to select the 6 head bolts and the spline curve for extrusion.  The default direction is the positive Z axis, we want the negative Z axis to extrude the head design &quot;down&quot; and into the engine block so set the direction to X=0, Y=0 and Z=-1, then type in 110 for the length (the height of the engine block).  After you get all the values entered and click OK the circles for the bolts will be extruded downward to for cylinders and the spline will be extruded downward to produce a sort of cylinder with &quot;rippled&quot; edges.  Select and hide the ''Bored block'' so you can see the extruded spline, then hide that object so you can see the 6 head bolt cylinders.  You see that very sophisticated 3D shapes can be made by starting with a 2D drawing and extruding parts of it downward.  We could even extrude different parts of the drawing by different amounts to do things like bore in bolt holes that just go part way through the block, but cut separate water jackets that go all the way through.  At this point all your extruded objects are just named &quot;Extrude001...&quot; so you will want to go through and name each of them so you can identify them in the next section (I will name mine ''Head bolt bore 1'' though ''6'' and name the spline ''Extruded spline'', I suggest using the same names in your model as well).  Now that you have your extruded shapes it is just a few boolean operations now to produce the final block design.  Go through and show the major components (the ''Bored block'' and the ''Crankcase''), and all your newly created extruded objects.

&lt;!--T:56--&gt;
[[Image:Engine Block Tutorial - Finished Engine Block.png|thumb|right|300px]]

&lt;!--T:57--&gt;
Now that we have 3D objects for the bore holes and the outer shape, we can use a few boolean operations to stitch the whole thing together.  Select your 6 extruded head bolts in the tree view and join them into a union (name the resulting object ''Head bolt boreholes'').  Then select the ''Bored block'' and the ''Head bolt boreholes'' in that order and perform a cut (like you did when you bored out the cylinders), name the resulting ''Cut'' object ''Block with headbolts''.  Finally, select the ''Block with headbolts'' and the ''Extruded spline'' and press the ''Make intersection'' button ([[Image:Part_Common.png|16px]]), and name the resulting object ''Engine block''.  Your final object should look like the picture on the right.

&lt;!--T:58--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Engine tutorial</title>
    <ns>0</ns>
    <id>1644</id>
    <revision>
      <id>127305</id>
      <parentid>127304</parentid>
      <timestamp>2014-12-01T21:51:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>m2ndjp4bjg13rmkoj9u6n1dju5fj7a6</sha1>
      <text xml:space="preserve" bytes="612">
&lt;!--T:1--&gt;
Modeling a complete engine (ongoing tutorial): 
* 1 - piston pin and pin ring : http://freecad-tutorial.blogspot.com/2011/09/engine-1-piston-pin-and-pin-ring.html
* 2 - cylinder liner : http://freecad-tutorial.blogspot.com/2011/09/engine-2-cylinder-liner.html
* 3 - cams : http://freecad-tutorial.blogspot.com/2011/09/engine-3-cams.html
* 4 - camshaft : http://freecad-tutorial.blogspot.com/2011/09/engine-4-camshaft.html
* 5 - camshaft gear : http://freecad-tutorial.blogspot.com/2011/10/engine-5-camshaft-gear.html

&lt;!--T:2--&gt;
[[Category:Tutorials]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Erste Schritte</title>
    <ns>0</ns>
    <id>1265</id>
    <revision>
      <id>107971</id>
      <parentid>95789</parentid>
      <timestamp>2014-09-01T12:13:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Esercitazioni</title>
    <ns>0</ns>
    <id>3797</id>
    <revision>
      <id>91359</id>
      <parentid>85457</parentid>
      <timestamp>2014-06-16T20:26:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <comment>/* Altro */</comment>
      <sha1>sbw4czm6w8elw7azi0tvf8xei3u797u</sha1>
      <text xml:space="preserve" bytes="2927">=Esercizi con FreeCAD=

{{VeryImportantMessage|This section is work in progress, for test. For now only in Italian.
There are no links that direct to this page.
Sezione in costruzione.}}

{{TOCright}}

In questo capitolo sono riuniti alcuni esempi di semplici lavori per familiarizzare con il sistema FreeCad, e in genere con i sistemi CAD,  nella rappresentazione degli oggetti.

Si tratta solo di pochi ulteriori passi rispetto agli esempi utilizzati nella descrizione dei singoli comandi.

In questa pagina viene proposto solo l'oggetto da realizzare, senza la guida, per consentire ai nuovi utenti di riflettere e ricercare da soli un processo di esecuzione.

La guida passo a passo è disponibile in una pagina separata, raggiungibile con il link '''Soluzione'''.

Spesso gli stessi oggetti sono realizzabili con procedure differenti. La soluzione proposta è solo un esempio, altre soluzioni possono essere anche più efficaci.

==Esercizi con Sketcher==
Link utili:[[Sketcher Workbench/it|Ambiente Sketcher]]
* Creare delle sagome 2D
[[Image:MagliaNonVincolata.png|256px|Maglia Non Vincolata]]&lt;br&gt;
[[Soluzione1|Soluzione]]&lt;br&gt;
* Creare delle sagome completamente vincolate.
[[Image:MagliaVincolata.png|256px|Maglia Vincolata]]&lt;br&gt;
[[Soluzione2|Soluzione]]&lt;br&gt;
==Esercizi con Part Design==
Link utili:[[PartDesign Workbench/it|Ambiente PartDesign]]
* Costruire delle forme sulle geometrie di base 2D.
[[Image:MagliaForata.png|256px|Maglia Forata]]&lt;br&gt;
[[Soluzione3|Soluzione]] da fare&lt;br&gt;
==Esercizi con Part==
Link utili:[[Part Module/it|Ambiente Parte ]]
* Creare degli oggetti solidi basati su forme o sagome.
[[Image:MaglieCatena.png|256px|MaglieCatena]]&lt;br&gt;
[[Soluzione4|Soluzione]] da fare&lt;br&gt;
==Esercizi con Sketcher, Part Design e Part==
Link utili:[[Sketcher Workbench/it|Ambiente Sketcher]] [[PartDesign Workbench/it|Ambiente PartDesign]] [[Part Module/it|Ambiente Parte ]]
* Creare oggetti utilizzando i tre ambienti maggiormente interconnessi.
[[Image:CatenaConPerni.png|256px|CatenaConPerni]]&lt;br&gt;
[[Soluzione5|Soluzione]] da fare&lt;br&gt;
[[Image:CatenaMontata.png|256px|CatenaMontata]]&lt;br&gt;
[[Soluzione6|Soluzione]] da fare&lt;br&gt;
** Approfondimento
[[Image:Gruppo.png|256px|Gruppo]]&lt;br&gt;

==Esercizi con Drawing==
Link utili:[[Drawing Module/it|Ambiente Drawing]]
* Mettere i lavori realizzati in Tavole di disegno tradizionale mediante la proiezione ortogonale o la proiezione della vista.
[[Image:ProiezioniMaglia.png|256px|ProiezioniMaglia]]&lt;br&gt;
[[Soluzione7|Soluzione]] da fare&lt;br&gt;


==Esercizi con .........==
Link utili:
* .
==Altro==
Pagina di prova per la descrizione del [[Part Module/it|Modulo Parte ]]:  [[Test_Ambiente_Parte ]]&lt;br&gt;
Pagina di prova per la descrizione del [[PartDesign_Workbench/it|Modulo PartDesign ]]:  [[Test_Ambiente_PartDesign ]]&lt;br&gt;
Pagina di discussione sull'aspetto grafico del wiki: [[WikiPages]]&lt;br&gt;


{{languages/it |  }}

[[Category:Documentation/it]]
[[Category:Tutorials/it]]</text>
    </revision>
  </page>
  <page>
    <title>Extra python modules</title>
    <ns>0</ns>
    <id>47</id>
    <revision>
      <id>133050</id>
      <parentid>131572</parentid>
      <timestamp>2014-12-22T22:07:31Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>replace &quot;syntaxhighlight&quot; to &quot;{{Code|code=&quot;</comment>
      <sha1>cx7t2vkzjg8wexuig7kyierpppizpie</sha1>
      <text xml:space="preserve" bytes="27067">
&lt;!--T:1--&gt;
This page lists several additional python modules or other pieces of software that can be downloaded freely from the internet, and add functionality to your FreeCAD installation.

== PySide (previously PyQt4) == &lt;!--T:2--&gt;
* homepage (PySide): [http://qt-project.org/wiki/PySide http://qt-project.org/wiki/PySide]
* license: LGPL  
* optional, but needed by several modules: Draft, Arch, Ship, Plot, OpenSCAD, Spreadsheet

&lt;!--T:3--&gt;
PySide (previously PyQt) is required by several modules of FreeCAD to access FreeCAD's Qt interface. It is already bundled in the windows verison of FreeCAD, and is usually installed automatically by FreeCAD on Linux, when installing from official repositories. If those modules (Draft, Arch, etc) are enabled after FreeCAD is installed, it means PySide (previously PyQt) is already there, and you don't need to do anything more.

&lt;!--T:4--&gt;
'''Note:''' FreeCAD progressively moved away from PyQt after version 0.13, in favour of [http://qt-project.org/wiki/PySide PySide], which does exactly the same job but has a license (LGPL) more compatible with FreeCAD.

=== Installation === &lt;!--T:5--&gt;

==== Linux ==== &lt;!--T:6--&gt;
The simplest way to install PySide is through your distribution's package manager. On Debian/Ubuntu systems, the package name is generally ''python-PySide'', while on RPM-based systems it is named ''pyside''. The necessary dependencies (Qt and SIP) will be taken care of automatically.

==== Windows ==== &lt;!--T:7--&gt;
The program can be downloaded from http://qt-project.org/wiki/Category:LanguageBindings::PySide::Downloads . You'll need to install the Qt and SIP libraries before installing PySide (to be documented).

==== MacOSX ==== &lt;!--T:8--&gt;
PyQt on Mac can be installed via homebrew or port. See [[CompileOnMac#Install_Dependencies]] for more information.  

=== Usage === &lt;!--T:9--&gt;
Once it is installed, you can check that everything is working by typing in FreeCAD python console:

{{Code|code=
import PySide
}}

&lt;!--T:10--&gt;
To access the FreeCAD interface, type :

{{Code|code=
from PySide import QtCore,QtGui
FreeCADWindow = FreeCADGui.getMainWindow()
}}

&lt;!--T:11--&gt;
Now you can start to explore the interface with the dir() command. You can add new elements, like a custom widget, with commands like :

{{Code|code=
FreeCADWindow.addDockWidget(QtCore.Qt.RghtDockWidgetArea,my_custom_widget)
}}

&lt;!--T:12--&gt;
Working with Unicode :

{{Code|code=
text = text.encode('utf-8')
}}

&lt;!--T:13--&gt;
Working with QFileDialog and OpenFileName :

{{Code|code=
path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
#path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, &quot;Read a txt file&quot;, path, &quot;*.txt&quot;)
}}

&lt;!--T:14--&gt;
Working with QFileDialog and SaveFileName :

{{Code|code=
path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
#path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
SaveName, Filter = PySide.QtGui.QFileDialog.getSaveFileName(None, &quot;Save a file txt&quot;, path, &quot;*.txt&quot;)
}}

===Example of transition from PyQt4 and PySide=== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
PS: these examples of errors were found in the transition PyQt4 to PySide and these corrections were made, other solutions are certainly available with the examples above

{{Code|code=
try:
    import PyQt4                                        # PyQt4
    from PyQt4 import QtGui ,QtCore                     # PyQt4
    from PyQt4.QtGui import QComboBox                   # PyQt4
    from PyQt4.QtGui import QMessageBox                 # PyQt4
    from PyQt4.QtGui import QTableWidget, QApplication  # PyQt4
    from PyQt4.QtGui import *                           # PyQt4
    from PyQt4.QtCore import *                          # PyQt4
except Exception:
    import PySide                                       # PySide
    from PySide import QtGui ,QtCore                    # PySide
    from PySide.QtGui import QComboBox                  # PySide
    from PySide.QtGui import QMessageBox                # PySide
    from PySide.QtGui import QTableWidget, QApplication # PySide
    from PySide.QtGui import *                          # PySide
    from PySide.QtCore import *                         # PySide
}}

&lt;!--T:17--&gt;
To access the FreeCAD interface, type :
You can add new elements, like a custom widget, with commands like :

{{Code|code=
myNewFreeCADWidget = QtGui.QDockWidget()          # create a new dockwidget
myNewFreeCADWidget.ui = Ui_MainWindow()           # myWidget_Ui()             # load the Ui script
myNewFreeCADWidget.ui.setupUi(myNewFreeCADWidget) # setup the ui
try:
    app = QtGui.qApp                              # PyQt4 # the active qt window, = the freecad window since we are inside it
    FCmw = app.activeWindow()                     # PyQt4 # the active qt window, = the freecad window since we are inside it
    FCmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,myNewFreeCADWidget) # add the widget to the main window
except Exception:
    FCmw = FreeCADGui.getMainWindow()             # PySide # the active qt window, = the freecad window since we are inside it 
    FCmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,myNewFreeCADWidget) # add the widget to the main window
}}

&lt;!--T:18--&gt;
Working with Unicode : 

{{Code|code=
try:
    text = unicode(text, 'ISO-8859-1').encode('UTF-8')  # PyQt4
except Exception:
    text = text.encode('utf-8')                         # PySide
}}

&lt;!--T:19--&gt;
Working with QFileDialog and OpenFileName :

{{Code|code=
OpenName = &quot;&quot;
try:
    OpenName = QFileDialog.getOpenFileName(None,QString.fromLocal8Bit(&quot;Lire un fichier FCInfo ou txt&quot;),path,&quot;*.FCInfo *.txt&quot;) # PyQt4
except Exception:
    OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, &quot;Lire un fichier FCInfo ou txt&quot;, path, &quot;*.FCInfo *.txt&quot;)#PySide
}}

&lt;!--T:20--&gt;
Working with QFileDialog and SaveFileName :

{{Code|code=
SaveName = &quot;&quot;
try:
    SaveName = QFileDialog.getSaveFileName(None,QString.fromLocal8Bit(&quot;Sauver un fichier FCInfo&quot;),path,&quot;*.FCInfo&quot;) # PyQt4
except Exception:
    SaveName, Filter = PySide.QtGui.QFileDialog.getSaveFileName(None, &quot;Sauver un fichier FCInfo&quot;, path, &quot;*.FCInfo&quot;)# PySide
}}

&lt;!--T:21--&gt;
The MessageBox:

{{Code|code=
def errorDialog(msg):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg )
    try:
        diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # PyQt4 # this function sets the window before
    except Exception:    
        diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)# PySide # this function sets the window before
#    diag.setWindowModality(QtCore.Qt.ApplicationModal)       # function has been disabled to promote &quot;WindowStaysOnTopHint&quot;
    diag.exec_()
}}

&lt;!--T:22--&gt;
Working with setProperty (PyQt4) and setValue (PySide)

{{Code|code=
self.doubleSpinBox.setProperty(&quot;value&quot;, 10.0)  # PyQt4
}}

&lt;!--T:23--&gt;
replace to :

{{Code|code=
self.doubleSpinBox.setValue(10.0)  # PySide
}}

&lt;!--T:24--&gt;
Working with setToolTip

{{Code|code=
self.doubleSpinBox.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Coordinate placement Axis Y&quot;, None))  # PyQt4
}}

&lt;!--T:25--&gt;
replace to :

{{Code|code=
self.doubleSpinBox.setToolTip(_fromUtf8(&quot;Coordinate placement Axis Y&quot;))  # PySide 
}}

&lt;!--T:26--&gt;
or :

{{Code|code=
self.doubleSpinBox.setToolTip(u&quot;Coordinate placement Axis Y.&quot;)# PySide
}}

=== Additional documentation === &lt;!--T:27--&gt;
Some pyQt4 tutorials (including how to build interfaces with Qt Designer to use with python):
* http://pyqt.sourceforge.net/Docs/PyQt4/classes.html - the PyQt4 API Reference on sourceforge
* http://www.rkblog.rk.edu.pl/w/p/introduction-pyqt4/ - a simple introduction
* http://www.zetcode.com/tutorials/pyqt4/ - very complete in-depth tutorial

== Pivy == &lt;!--T:28--&gt;
* homepage: [https://bitbucket.org/Coin3D/coin/wiki/Home https://bitbucket.org/Coin3D/coin/wiki/Home]
* license: BSD
* optional, but needed by several modules of FreeCAD: Draft, Arch

&lt;!--T:29--&gt;
Pivy is a needed by several modules to access the 3D view of FreeCAD. On windows, Pivy is already bundled inside the FreeCAD installer, and on Linux it is usually automatically installed when you install FreeCAD from an official repository. On MacOSX, unfortunately, you will need to compile pivy yourself.

=== Installation === &lt;!--T:30--&gt;

==== Prerequisites ==== &lt;!--T:31--&gt;
I believe before compiling Pivy you will want to have Coin and SoQt installed.

&lt;!--T:32--&gt;
I found for building on Mac it was sufficient to install the [http://www.coin3d.org/lib/plonesoftwarecenter_view Coin3 binary package].  Attempting to install coin from MacPorts was problematic: tried to add a lot of X Windows packages and ultimately crashed with a script error.

&lt;!--T:33--&gt;
For Fedora I found an RPM with Coin3.

&lt;!--T:34--&gt;
SoQt compiled from [http://www.coin3d.org/lib/soqt/releases/1.5.0 source] fine on Mac and Linux.

==== Debian &amp; Ubuntu ==== &lt;!--T:35--&gt;
Starting with Debian Squeeze and Ubuntu Lucid, pivy will be available directly from the official repositories, saving us a lot of hassle. In the meantime, you can either download one of the packages we made (for debian and ubuntu karmic) availables on the [[Download]] pages, or compile it yourself.

&lt;!--T:36--&gt;
The best way to compile pivy easily is to grab the debian source package for pivy and make a package with debuild. It is the same source code from the official pivy site, but the debian people made several bug-fixing additions. It also compiles fine on ubuntu karmic: http://packages.debian.org/squeeze/python-pivy download the .orig.gz and the .diff.gz file, then unzip both, then apply the .diff to the source: go to the unzipped pivy source folder, and apply the .diff patch:

{{Code|code=
patch -p1 &lt; ../pivy_0.5.0~svn765-2.diff
}}

&lt;!--T:37--&gt;
then

{{Code|code=
debuild
}}

&lt;!--T:38--&gt;
to have pivy properly built into an official installable package. Then, just install the package with gdebi.

==== Other linux distributions ==== &lt;!--T:39--&gt;
First get the latest sources from the [http://pivy.coin3d.org/mercurial/ project's repository]:

{{Code|code=
hg clone http://hg.sim.no/Pivy/default Pivy 
}}

&lt;!--T:40--&gt;
As of March 2012, the latest version is Pivy-0.5.

&lt;!--T:41--&gt;
Then you need a tool called SWIG to generate the C++ code for the Python bindings. Pivy-0.5 reports that it has only been tested with SWIG 1.3.31, 1.3.33, 1.3.35, and 1.3.40. So you can download a source tarball for one of these old versions from [http://www.swig.org http://www.swig.org]. Then unpack it and from a command line do (as root):

{{Code|code=
./configure
make
make install (or checkinstall if you use it)
}}

&lt;!--T:42--&gt;
It takes just a few seconds to build. 

&lt;!--T:43--&gt;
Alternatively, you can try building with a more recent SWIG.  As of March 2012, a typical repository version is 2.0.4.  Pivy has a minor compile problem with SWIG 2.0.4 on Mac OS (see below) but seems to build fine on Fedora Core 15.

&lt;!--T:44--&gt;
After that go to the pivy sources and call 

{{Code|code=
python setup.py build 
}}

&lt;!--T:45--&gt;
which creates the source files.  Note that build can produce thousands of warnings, but hopefully there will be no errors.

&lt;!--T:46--&gt;
This is probably obsolete, but you may run into a compiler error where a 'const char*' cannot be converted in a 'char*'. To fix that you just need to write a 'const' before in the appropriate lines. There are six lines to fix. 

&lt;!--T:47--&gt;
After that, install by issuing (as root):

{{Code|code=
python setup.py install (or checkinstall python setup.py install)
}}

&lt;!--T:48--&gt;
That's it, pivy is installed.

==== Mac OS ==== &lt;!--T:49--&gt;
These instructions may not be complete.  Something close to this worked for OS 10.7 as of March 2012.  I use MacPorts for repositories, but other options should also work.

&lt;!--T:50--&gt;
As for linux, get the latest source:

{{Code|code=
hg clone http://hg.sim.no/Pivy/default Pivy 
}}

&lt;!--T:51--&gt;
If you don't have hg, you can get it from MacPorts:

{{Code|code=
port install mercurial
}}

&lt;!--T:52--&gt;
Then, as above you need SWIG.  It should be a matter of:

{{Code|code=
port install swig
}}

&lt;!--T:53--&gt;
I found I needed also:

{{Code|code=
port install swig-python
}}

&lt;!--T:54--&gt;
As of March 2012, MacPorts SWIG is version 2.0.4.  As noted above for linux, you might be better off downloading an older version.  SWIG 2.0.4 seems to have a bug that stops Pivy building.  See first message in this digest: https://sourceforge.net/mailarchive/message.php?msg_id=28114815

&lt;!--T:55--&gt;
This can be corrected by editing the 2 source locations to add dereferences: *arg4, *arg5 in place of arg4, arg5.  Now Pivy should build:

{{Code|code=
python setup.py build
sudo python setup.py install
}}

==== Windows ==== &lt;!--T:56--&gt;
Assuming you are using Visual Studio 2005 or later you should open a command prompt with 'Visual Studio 2005 Command prompt' from the Tools menu.
If the Python interpreter is not yet in the system path do

{{Code|code=
set PATH=path_to_python_2.5;%PATH%
}}

&lt;!--T:57--&gt;
To get pivy working you should get the latest sources from the project's repository:

{{Code|code=
svn co https://svn.coin3d.org/repos/Pivy/trunk Pivy 
}}

&lt;!--T:58--&gt;
Then you need a tool called SWIG to generate the C++ code for the Python bindings. It is recommended to use version 1.3.25 of SWIG, not the latest version, because at the moment pivy will only function correctly with 1.3.25. Download the binaries for 1.3.25 from [http://www.swig.org http://www.swig.org]. Then unpack it and from the command line add it to the system path

{{Code|code=
set PATH=path_to_swig_1.3.25;%PATH%
}}

&lt;!--T:59--&gt;
and set COINDIR to the appropriate path

{{Code|code=
set COINDIR=path_to_coin
}}

&lt;!--T:60--&gt;
On Windows the pivy config file expects SoWin instead of SoQt as default. I didn't find an obvious way to build with SoQt, so I modified the file setup.py directly.
In line 200 just remove the part 'sowin' : ('gui._sowin', 'sowin-config', 'pivy.gui.') (do not remove the closing parenthesis).

&lt;!--T:61--&gt;
After that go to the pivy sources and call 

{{Code|code=
python setup.py build 
}}
 
&lt;!--T:62--&gt;
which creates the source files. You may run into a compiler error several header files couldn't be found. In this case adjust the INCLUDE variable

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_coin_include_dir
}}

&lt;!--T:63--&gt;
and if the SoQt headers are not in the same place as the Coin headers also

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_soqt_include_dir
}}

&lt;!--T:64--&gt;
and finally the Qt headers

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_qt4\include\Qt
}}

&lt;!--T:65--&gt;
If you are using the Express Edition of Visual Studio you may get a python keyerror exception.
In this case you have to modify a few things in msvccompiler.py located in your python installation.

&lt;!--T:66--&gt;
Go to line 122 and replace the line

{{Code|code=
vsbase = r&quot;Software\Microsoft\VisualStudio\%0.1f&quot; % version
}}

&lt;!--T:67--&gt;
with

{{Code|code=
vsbase = r&quot;Software\Microsoft\VCExpress\%0.1f&quot; % version
}}

&lt;!--T:68--&gt;
Then retry again.
If you get a second error like 

{{Code|code=
error: Python was built with Visual Studio 2003;...
}}

&lt;!--T:69--&gt;
you must also replace line 128

{{Code|code=
self.set_macro(&quot;FrameworkSDKDir&quot;, net, &quot;sdkinstallrootv1.1&quot;)
}}

&lt;!--T:70--&gt;
with

{{Code|code=
self.set_macro(&quot;FrameworkSDKDir&quot;, net, &quot;sdkinstallrootv2.0&quot;)
}}

&lt;!--T:71--&gt;
Retry once again. If you get again an error like

{{Code|code=
error: Python was built with Visual Studio version 8.0, and extensions need to be built with the same version of the compiler, but it isn't installed.
}}

&lt;!--T:72--&gt;
then you should check the environment variables DISTUTILS_USE_SDK and MSSDK with

{{Code|code=
echo %DISTUTILS_USE_SDK%
echo %MSSDK%
}}

&lt;!--T:73--&gt;
If not yet set then just set it e.g. to 1

{{Code|code=
set DISTUTILS_USE_SDK=1
set MSSDK=1
}}

&lt;!--T:74--&gt;
Now, you may run into a compiler error where a 'const char*' cannot be converted in a 'char*'. To fix that you just need to write a 'const' before in the appropriate lines. There are six lines to fix. 
After that copy the generated pivy directory to a place where the python interpreter in FreeCAD can find it.

=== Usage === &lt;!--T:75--&gt;
To check if Pivy is correctly installed:

{{Code|code=
import pivy
}}

&lt;!--T:76--&gt;
To have Pivy access the FreeCAD scenegraph do the following: 

{{Code|code=
from pivy import coin
App.newDocument() # Open a document and a view 
view = Gui.ActiveDocument.ActiveView 
FCSceneGraph = view.getSceneGraph() # returns a pivy Python object that holds a SoSeparator, the main &quot;container&quot; of the Coin scenegraph
FCSceneGraph.addChild(coin.SoCube()) # add a box to scene 
}}

&lt;!--T:77--&gt;
You can now explore the FCSceneGraph with the dir() command.

=== Additonal Documentation === &lt;!--T:78--&gt;
Unfortunately documentation about pivy is still almost inexistant on the net. But you might find Coin documentation useful, since pivy simply translate Coin functions, nodes and methods in python, everything keeps the same name and properties, keeping in mind the difference of syntax between C and python:

&lt;!--T:79--&gt;
* https://bitbucket.org/Coin3D/coin/wiki/Documentation - Coin3D API Reference
* http://www-evasion.imag.fr/~Francois.Faure/doc/inventorMentor/sgi_html/index.html - The Inventor Mentor - The &quot;bible&quot; of Inventor scene description language.

&lt;!--T:80--&gt;
You can also look at the Draft.py file in the FreeCAD Mod/Draft folder, since it makes big use of pivy.

== pyCollada == &lt;!--T:81--&gt;
* homepage: http://pycollada.github.com
* license: BSD
* optional, needed to enable import and export of Collada (.DAE) files

&lt;!--T:82--&gt;
pyCollada is a python library that allow programs to read and write [http://en.wikipedia.org/wiki/COLLADA Collada (*.DAE)] files. When pyCollada is installed on your system, FreeCAD will be able to handle importing and exporting in the Collada file format.

=== Installation === &lt;!--T:83--&gt;
Pycollada is usually not yet available in linux distributions repositories, but since it is made only of python files, it doesn't require compilation, and is easy to install. You have 2 ways, or directly from the official pycollada git repository, or with the easy_install tool.

==== Linux ==== &lt;!--T:84--&gt;
In either case, you'll need the following packages already installed on your system:

{{Code|code=
python-lxml 
python-numpy
python-dateutil
}}

===== From the git repository ===== &lt;!--T:85--&gt;

{{Code|code=
git clone git://github.com/pycollada/pycollada.git pycollada
cd pycollada
sudo python setup.py install
}}

===== With easy_install ===== &lt;!--T:86--&gt;
Assuming you have a complete python installation already, the easy_install utility should be present already:

{{Code|code=
easy_install pycollada
}}

&lt;!--T:87--&gt;
You can check if pycollada was correctly installed by issuing in a python console:

{{Code|code=
import collada
}}

&lt;!--T:88--&gt;
If it returns nothing (no error message), then all is OK

==== Windows ==== &lt;!--T:89--&gt;

&lt;!--T:90--&gt;
# Install Python. While FreeCAD and some other programs come with a bundled version of Python, having a fixed install will help with the next steps. You can get Python here: https://www.python.org/downloads/ . Of course you should pick the right version, in this case that would be 2.6.X, as FreeCAD currently uses 2.6.2 (Personally I went with 2.6.2, and by the way, you can check the version yourself by starting the Python.exe in the bin folder of FreeCAD). You'll also have to add the path of the installation directory into the path variable so you can access Python from the cmd. Now we can install the missing things, in total there are 3 things we need to install: numpy, setuptools, pycollada
# Fetch numpy here: http://sourceforge.net/projects/numpy/files/NumPy/ . Pick a version which fits to the version used by FreeCAD, there are multiple installers for different Python versions in every numpy version folder, the installer will put numpy into the folder of your Python installation, where FreeCAD can access it as well
# Fetch setuptools here: https://pypi.python.org/pypi/setuptools (We need to install the setuptools in order to install pycollada in the next step)
# Unzip the downloaded setuptools  file somewhere
# Start a cmd with admin permission
# Navigate to the unpacked setuptools folder
# Install the setuptools by tipping &quot;Python setup.py install&quot; into the cmd, this will not work when Python is not installed or when the path variable hasn't been configured
# Fetch pycollada here: https://pypi.python.org/pypi/pycollada/ (has already been posted above) and once again:
# Unzip the downloaded pycollada file somewhere
# Start a cmd with admin permission, or use the one you opened not long ago
# Navigate to the unpacked pycollada folder
# Install the setuptools by tipping &quot;Python setup.py install&quot; into the cmd

&lt;!--T:91--&gt;
* Another reference on how to use easy_install: http://jishus.org/?p=452

==== Mac OS ==== &lt;!--T:92--&gt;

&lt;!--T:93--&gt;
If you are using the Homebrew build of FreeCAD you can install pycollada into your system Python using pip.

&lt;!--T:94--&gt;
If you need to install pip:

{{Code|code=
$ sudo easy_install pip
}}

&lt;!--T:95--&gt;
Install pycollada:

{{Code|code=
$ sudo pip install pycollada
}}

&lt;!--T:96--&gt;
If you are using a binary version of FreeCAD, you can tell pip to install pycollada into the site-packages inside FreeCAD.app:

{{Code|code=
$ pip install --target=&quot;/Applications/FreeCAD.app/Contents/lib/python2.7/site-packages&quot; pycollada
}}

== IfcOpenShell == &lt;!--T:97--&gt;

&lt;!--T:98--&gt;
* homepage: http://www.ifcopenshell.org
* license: LGPL
* optional, needed to extend import abilities of IFC files

&lt;!--T:99--&gt;
IFCOpenShell is a library currently in development, that allows to import (and soon export) [http://en.wikipedia.org/wiki/Industry_Foundation_Classes Industry foundation Classes (*.IFC)] files. IFC is an extension to the STEP format, and is becoming the standard in [http://en.wikipedia.org/wiki/Building_information_modeling BIM] workflows. When ifcopenshell is correctly installed on your system, the FreeCAD [[Arch Module]] will detect it and use it to import IFC files, instead of its built-in rudimentary importer. Since ifcopenshell is based on OpenCasCade, like FreeCAD, the quality of the import is very high, producing high-quality solid geometry.

=== Installation === &lt;!--T:100--&gt;
Since ifcopenshell is pretty new, you'll likely need to compile it yourself.

==== Linux ==== &lt;!--T:101--&gt;
You will need a couple of development packages installed on your system in order to compile ifcopenshell:

{{Code|code=
liboce-*-dev
python-dev
swig
}}

&lt;!--T:102--&gt;
but since FreeCAD requires all of them too, if you can compile FreeCAD, you won't need any extra dependency to compile IfcOpenShell.

&lt;!--T:103--&gt;
Grab the latest source code from here:

{{Code|code=
svn co https://ifcopenshell.svn.sourceforge.net/svnroot/ifcopenshell ifcopenshell
}}

&lt;!--T:104--&gt;
The build process is very easy:

{{Code|code=
mkdir ifcopenshell-build
cd ifcopenshell-build
cmake ../ifcopenshell/cmake
}}

&lt;!--T:105--&gt;
or, if you are using oce instead of opencascade:

{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/oce ../ifcopenshell/cmake 
}}

&lt;!--T:106--&gt;
Since ifcopenshell is made primarily for Blender, it uses python3 by default. To use it inside FreeCAD, you need to compile it against the same version of python that is used by FreeCAD. So you might need to force the python version with additional cmake parameters (adjust the python version to yours): 

{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/oce -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/python2.7.so ../ifcopenshell/cmake
}}

&lt;!--T:107--&gt;
Then:

{{Code|code=
make
sudo make install
}}

&lt;!--T:108--&gt;
You can check that ifcopenshell was correctly installed by issuing in a python console:

{{Code|code=
import IfcImport
}}

&lt;!--T:109--&gt;
If it returns nothing (no error message), then all is OK

==== Windows ==== &lt;!--T:110--&gt;

&lt;!--T:111--&gt;
''Copied from the IfcOpenShell README file''

&lt;!--T:112--&gt;
Users are advised to use the Visual Studio .sln file in the win/ folder. For Windows users a prebuilt Open CASCADE version is available from the http://opencascade.org website. Download and install this version and provide the paths to the Open CASCADE header and library files to MS Visual Studio C++.

&lt;!--T:113--&gt;
For building the IfcPython wrapper, SWIG needs to be installed. Please download the latest swigwin version from http://www.swig.org/download.html . After extracting the .zip file, please add the extracted folder to the PATH environment variable. Python needs to be installed, please provide the include and library paths to Visual Studio.

== Teigha Converter == &lt;!--T:114--&gt;

&lt;!--T:115--&gt;
* homepage: http://www.opendesign.com/guestfiles/TeighaFileConverter
* license: freeware
* optional, used to enable import and export of DWG files

&lt;!--T:116--&gt;
The Teigha Converter is a small freely available utility that allows to convert between several versions of DWG and DXF files. FreeCAD can use it to offer DWG import and export, by converting DWG files to the DXF format under the hood,then using its standard DXF importer to import the file contents. The restrictions of the [[Draft_DXF|DXF importer]] apply.

=== Installation === &lt;!--T:117--&gt;
On all platforms, only by installing the appropriate package from http://www.opendesign.com/guestfiles/TeighaFileConverter . After installation, if the utility is not found automatically by FreeCAD, you might need to set the path to the converter executable manually, in the menu Edit -&gt; Preferences -&gt; Draft -&gt; Import/Export options.

&lt;!--T:118--&gt;
{{docnav|Localisation|Source documentation}}

&lt;!--T:119--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FAQ</title>
    <ns>0</ns>
    <id>582</id>
    <revision>
      <id>124937</id>
      <parentid>124936</parentid>
      <timestamp>2014-11-23T22:42:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gmi2ll93qqbwh1sseoblvmbpnxlixtz</sha1>
      <text xml:space="preserve" bytes="21807">
&lt;!--T:1--&gt;
This page attempts to answer the most common questions asked on the FreeCAD forums. If you have a problem or question regarding FreeCAD, check below first. Then, if you cannot find an answer for your specific question, head to the [http://forum.freecadweb.org/viewforum.php?f=3 FreeCAD forum]!

== Installation == &lt;!--T:2--&gt;

=== What is the easiest way to install FreeCAD on my system? === &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
If you are on Windows or Mac OS, the simplest way is to head to the [[Download]] page, where you'll find several ready-to-install packages. If you are on Debian, Fedora or Ubuntu and some other distributions, FreeCAD is already included in the standard software repositories and you can simply install it with the software manager. On Ubuntu, the FreeCAD team also maintains its own [[Download#Ubuntu_PPA_packages|PPA repositories]].
For further details about installation, refer to the [[Installing]] page.

=== What are the prerequisites for running FreeCAD? === &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
In contrast to most 3D CAD software, FreeCAD can run smoothly on the most modest computers - it's been known to run on Pentium IV and Intel Core2 Solo CPUs. If your computer is running a current operating system, chances are FreeCAD will run. The only prerequisite is that your graphics card or chipset must support [http://en.wikipedia.org/wiki/OpenGL OpenGL], preferably no older than v2.0. In case of problems, refer to the [[FAQ#Troubleshooting|Troubleshooting]] section of this FAQ.

==== Multithreading ==== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
FreeCAD's underlying geometric modeling kernel (which is a third-party library called [http://en.wikipedia.org/wiki/Open_Cascade_Technology Open CASCADE Technology], or OCC for short) does not support multithreading at this time.

==== For Mac users ==== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Only the MacIntel architecture is supported. There are no builds available for the PowerPC architecture.

=== What if I want to compile FreeCAD myself? === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
The source code of FreeCAD is always available in the project source code repository. Compiling FreeCAD yourself allows you to use the most recent features being developed, but requires a bit of computer knowledge, although the procedure is fairly simple. Access to the source code is explained [[CompileOnUnix#Getting_the_source|here]], and we have detailed instructions for compiling on [[CompileOnWindows|Windows]], [[CompileOnUnix|Linux]] and [[compileOnMac|Mac OSX]].

=== FreeCAD tells me some module or application is missing === &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
FreeCAD depends on a lot of things to offer all its functionality. All the main required components are usually bundled within your FreeCAD installation or provided by your package manager, so normally you have nothing to worry about. If you installed FreeCAD from unofficial sources, however, or compiled FreeCAD yourself, some piece might be missing, which is not critical to FreeCAD itself, but might cause some functionality to be unavailable. Some specific file formats such as Collada or DWG also require extra components, which cannot be bundled into FreeCAD, and must be installed by yourself separately. 

&lt;!--T:15--&gt;
All those components and the appropriate way to install them are listed on the [[Extra python modules]] page.

== Troubleshooting == &lt;!--T:16--&gt;

=== FreeCAD doesn't start at all === &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
There might be a lot of reasons for that, the most likely is that some library is missing. Try starting FreeCAD from a terminal (type ''freecad'' at a terminal prompt) to see if some error message appears. Also, read the rest of this FAQ as it can give you more clues to detect the cause of the problem. If nothing helps, tell about it on the [http://forum.freecadweb.org/ forum], there will surely be someone who can help.

&lt;!--T:19--&gt;
On some older Windows XP systems you may get an error message like this: ''The application can't start, because the side-by-side configuration is wrong. The reinstallation of the application may solve the problem.'' The reason for this problem is that on your system either the CRT runtime libraries are missing or the version installed is too old because FreeCAD was linked against a newer version. In this case you have to install the Microsoft Visual C++ Redistributable Package which you'll find at Microsoft. See also the corresponding [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=1298&amp;p=9961 forum message].

=== FreeCAD starts normally, but not all icons are displayed, some of them are replaced by a black 'X' === &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
Some parts of FreeCAD depend on an external Python module called Pivy. On Windows, pivy is included in the FreeCAD installation. On Debian/Ubuntu systems, the python-pivy package is part of standard software repositories. On other systems, at the moment, you might have to compile pivy yourself. Note that although some tools are not available without pivy, the rest of FreeCAD works normally.

=== I have display problems, the 3D view doesn't behave correctly, there is garbage when I move/rotate the view, etc... === &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
FreeCAD depends on OpenGL for displaying 3D contents, and therefore requires a working OpenGL environment. On some systems, OpenGL is not activated by default, and you might need to install or upgrade your graphics drivers. This problems happens most often on Linux systems or on virtual systems. If you are on a linux-based system, try the following steps:
* verify that your computer has a 3D-capable graphic board
* type '''glxinfo''' in a terminal window, and check in the output that Direct Rendering is set to &quot;yes&quot;, and that the OpenGL vendor/renderer/version matches your graphic card.
* install other OpenGl-based software ([[http://www.blender.org Blender]] for example) and check if it runs and displays correctly.

=== FreeCAD crashes on startup === &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
A crash might indicate a more serious bug, or some problem in your configuration. Most startup crashes occur because of one of the two following reasons:

==== OpenGL drivers are not installed, or not working properly ==== &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
This is a very common cause of problem. The symptoms are simply that FreeCAD crashes at startup, or whenever you open a 3D view (for example by creating a new document). Try to find out what your graphic chip is, then find out if it supports [http://en.wikipedia.org/wiki/OpenGL OpenGL] (most recent chips do), then find the correct driver and install it. A good way to doublecheck if OpenGL is available is to try to run another OpenGL application such as [http://www.blender.org blender].

&lt;!--T:28--&gt;
And as a general tip to get some more information about crashes with FreeCAD you can start it with the program parameter --write-log. This will create the file FreeCAD.log in $HOME/.FreeCAD on Linux and Mac OS X or %APPDATA\FreeCAD% on Windows systems.

&lt;!--T:29--&gt;
In some rare cases you may have a graphic driver installed that doesn't fit to your graphic card. We had a case where the user's laptop had an Intel on-board graphic but some ATI drivers were installed. [http://forum.freecadweb.org/viewtopic.php?f=13&amp;t=5160&amp;start=10#p41042]
After removing the files and re-installing the correct driver FreeCAD started to work.

==== Some library, needed by FreeCAD, is not present on your system, or wasn't found by FreeCAD ==== &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
There can be two declinations to this problem: either some library is simply missing, therefore FreeCAD will refuse to start, or the library is there, but it is an older version than the one FreeCAD expects, so a crash will occur when FreeCAD will try to use a missing feature from that library. A common example is when you have Qt3 and Qt4 installed on your system, FreeCAD might detect Qt4 but if your Qt installation is not properly configured, some pieces of Qt3 might still be used, provoking crashes.

&lt;!--T:32--&gt;
Please review the [[installing]] procedure, make sure you installed all the required libraries (on most linux systems this is done automatically), and check what is the minimum version number for each of the components.

&lt;!--T:33--&gt;
If everything seems correct, describe the problem on the [http://forum.freecadweb.org/ forum] or [[Tracker|submit a bug]]. If you are on a linux system, it is easy to do a debug backtrace, which provides very useful information about the crash to the developers:
* in a terminal, type: ''gdb freecad'' (assuming package gdb is installed)
* inside gdb, type ''run''
* after the crash, type ''bt'' to get the backtrace, that you can include in your bug report.

=== FreeCAD freezes after startup === &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
When starting FreeCAD the GUI appears almost immediately but the GUI is frozen and the cpu is about 99%. This can happen on the KDE desktop when using the Oxygen theme. That's a bug in the Oxygen theme and choosing another theme should fix this issue.

=== FreeCAD crashes on creating a new document or opening a file === &lt;!--T:36--&gt;

&lt;!--T:37--&gt;
If FreeCAD crashes when it creates a new 3D view, try launching FreeCAD from a terminal. If a message error appears when the crash occurs, mentioning &quot;Assertion Failed&quot; and a component name beginning with &quot;So&quot; (SoBase, SoFieldContainer, etc...), the chances are very high, especially if you are on linux, that FreeCAD tries to use two different versions of the coin library, which causes the crash.
To verify if that is indeed the problem, try the following:
* Locate the FreeCAD executable (usually in /usr/lib/FreeCAD/bin)
* Run the command 'ldd FreeCAD' from a terminal
* Note down the version of the libCoin.so library that FreeCAD is using (for example libCoin.so.60)
* Locate the libSoQt.so library (usually in /usr/lib)
* run 'ldd libSoQt.so' and check if it links to the same coin version as FreeCAD
If there is any difference, either FreeCAD or SoQt must be recompiled (better to recompile the one that uses the oldest Coin version). The normal behavior is to try to contact the persons responsible for packaging either SoQt or FreeCAD and kindly ask them to consider recompiling.
If you want to undertake that step for yourself, and it is not possible to recompile SoQt because it breaks other applications on your system, you can force FreeCAD to compile with the required Coin version with ./configure --with-coin=DIR. But you have to make sure that the correct devel package to this Coin version is installed.

=== FreeCAD crashes after Edit -&gt; Alignment === &lt;!--T:38--&gt;

&lt;!--T:39--&gt;
A segmentation fault happens at vbo_save_playback_vertex_list(). This means that the implementation of VBO of the graphic driver is bad. In order to avoid to cache OpenGL calls you can try to set the environment variable IV_SEPARATOR_MAX_CACHES=0 and restart FreeCAD.

=== I have trouble running FreeCAD on Mac OSX === &lt;!--T:40--&gt;

&lt;!--T:41--&gt;
The Mac platform is less easy to support than Windows or Linux, since none of the core developers owns one. The OSX packages are compiled by volunteering FreeCAD users, and they might sometimes not work correctly on your machine, depending on your system. Your best chance is probably to head to the forums, look for Mac OSX-related threads, and discuss your problem there or see if someone else encountered a solution.

=== I cannot change numeric values in FreeCAD's properties panels === &lt;!--T:42--&gt;

&lt;!--T:43--&gt;
[[File:Jj62l.png|480px|left|language options]]

&lt;!--T:44--&gt;
You most likely have bad windows regional settings set-up. Please check if you have same symbol for decimal separator and digit grouping symbol in your regional settings. If you do, [http://forum.freecadweb.org/viewtopic.php?f=4&amp;t=2655&amp;p=20046#p20041 adapt your system settings] to use the different character for digit grouping symbol and decimal separator. Note that it is not mandatory to have dot as decimal separator. It is mandatory to use different symbols in this two settings.
{{clear}}

=== FreeCAD was running normally, and suddenly it doesn't start anymore === &lt;!--T:79--&gt;

&lt;!--T:80--&gt;
This can also happen if you had an older version of FreeCAD installed, and you upgraded to a newer version. In that process, the configuration files of FreeCAD might have been corrupted for some reason, and now FreeCAD cannot read them anymore, and fails to start. The solution is simply to delete these configuration files, so FreeCAD will recreate them on first run.

&lt;!--T:81--&gt;
* On Windows: Open the file explorer, and write &quot;%APPDATA%\FreeCAD&quot; as the file path. Once there, delete the files user.cfg and system.cfg
* On Linux &amp; Mac: Navigate to &quot;/home/USERNAME/.FreeCAD&quot; and delete the files user.cfg and system.cfg

&lt;!--T:82--&gt;
FreeCAD should now start again normally with all its settings reset.

== Using FreeCAD == &lt;!--T:45--&gt;

=== Is FreeCAD really free? Even for commercial use? === &lt;!--T:46--&gt;

&lt;!--T:47--&gt;
FreeCAD is [http://en.wikipedia.org/wiki/Open-source_software open-source software], and is free not only to use, for yourself or for doing commercial work, but also to distribute, modify, or even use in a closed-source application. To review, you are free to do (almost) anything you want with it. See the [[Licence]] page for more details.

=== How do I rotate the 3D view? === &lt;!--T:48--&gt;

&lt;!--T:49--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;200&quot;&gt;
Image:Style_of_navigation.png|From the {{KEY|right button}} mouse
Image:Style of navigation menu.png|From the menu Edit → Préférences →
&lt;/gallery&gt;
&lt;/center&gt;
 {{clear}}
FreeCAD has four different [[Mouse Model|navigation modes]] available, that can be set in the preferences settings dialog or changed by right-clicking in the 3D view. For full details about the modes, see the [[Mouse Model]] page.  For the default mode (&quot;CAD Navigation&quot;), the commands are as follows,
{{clear}}
{{CAD Navigation}}


=== What can I do with FreeCAD? Where do I start? === &lt;!--T:50--&gt;

&lt;!--T:51--&gt;
Head to the [[Getting started]] page for a quick description of the tools you can use. There is also a new [[Tutorials]] section containing a few resources. The [[User hub]] section contains more detailed information about the different workbenches of FreeCAD. Note that since FreeCAD is relatively new, its user interface is still very bare and doesn't feature many tools. But much more advanced functionality is already available to you from [[Scripting|python scripting]].

=== Is there documentation for newcomers? How can I learn to use FreeCAD? === &lt;!--T:52--&gt;

&lt;!--T:53--&gt;
There is at the moment still little documentation for beginners, unfortunately, but the [[Tutorials]] section contains some pages to help you getting started.

=== I want to import/export data in format XYZ to/from FreeCAD. How to do that ? === &lt;!--T:83--&gt;

&lt;!--T:84--&gt;
Please refer to the page [[FreeCAD Howto Import Export|FreeCAD Howto Import Export]]. Maybe your questions are already answerded there.

== Working with Part geometry == &lt;!--T:54--&gt;

=== How do I extrude stuff into solids? I don't get the right result === &lt;!--T:55--&gt;

&lt;!--T:56--&gt;
The theory is simple: Lines (or wires), when extruded, form faces. Faces, when extruded, form solids.
If you extrude something and the result is not a solid, then the something was not a face. If you have lines and you want to extrude a solid from them, you must first select lines that form a closed perimeter (select several objects by pressing CTRL), join them into a wire (Upgrade tool), then make a face from that wire (Upgrade tool again). There you are, if all went well you can now extrude it to a solid.

&lt;!--T:57--&gt;
Now, there can be many little twists that make you obtain the wrong result. The best way to make sure is to check what's inside the object you are extruding. Objects contents can be easily explored with python. Assuming for example you have an object called &quot;Wire&quot;, you could type this into the python console:

&lt;syntaxhighlight&gt;
 obj = FreeCAD.ActiveDocument.Wire
 shp = obj.Shape
 print shp.Faces
 print shp.Wires
 if shp.Wires:
     for w in shp.Wires:
         print w.isClosed()
&lt;/syntaxhighlight&gt;


&lt;!--T:58--&gt;
The above code retrieves the shape from an object, shows the faces and wires your object has (if any), and, if there are wires, prints if those wires are closed. If you don't have any face, you won't get a solid. If there is no closed wire, it won't become a face. If you are interested, there is more info about what you can check with python on the [[Topological data scripting|part scripting]] page. If you cannot join several lines into a wire, the most probable cause is that their endpoints don't meet, there must be small gaps between (some of) them. There, I'm afraid, my experience tells me the quickest way would be to redraw a wire on top of them...

=== My boolean operations fail, or give weird results === &lt;!--T:59--&gt;

&lt;!--T:60--&gt;
The [http://en.wikipedia.org/wiki/Open_CASCADE_Technology Open CASCADE] geometric modeling kernel used in FreeCAD for Part geometry, although probably the best open-source geometry kernel available, has its flaws and limitations. Indeed the boolean operations (fusion, subtraction, intersection) are not its best features, and often give strange results. This is a current limitation we have no way to solve at once, so your best path is to try obtaining the desired result by modeling another way. For example, problems with primitives such as cylinder can often be solved by using an extruded circle instead. Coplanar surfaces between parts can cause trouble, as well as surface tangency. As a general rule, if a shape doesn't work, try remodeling it a different way. In 99% of the cases at the end you will manage to obtain the result you want.

== Contributing to FreeCAD == &lt;!--T:61--&gt;

=== FreeCAD is such a great program! How can I help? === &lt;!--T:62--&gt;

&lt;!--T:63--&gt;
There are a lot of different ways to help, even if you are not a programmer. Here are a couple of things you can do:
* Give some feedback to the FreeCAD developers: It is always useful to know what people think, what they found good, what they miss, etc. Drop a note on the [http://forum.freecadweb.org/ forum] giving your opinion or make a request on our [http://www.freecadweb.org/tracker/main_page.php issue tracker]!
* Help with writing documentation: The documentation we have here on this site is sometime very limited. If you discovered something that is not well documented, add your knowledge there!
* Help others newcomers: Hang around the forum, and help new people to solve basic questions, like how do I install, how do I add a cube, etc...
* [[Help FreeCAD#Translate the documentation|Translate the documentation]] in your own language
* [[Help FreeCAD#Translate FreeCAD |Translate FreeCAD]] in your own language
* Write [[Tutorials]], or record video tutorials: Tutorials are a very easy way for newcomers to learn a new software. If you did some nice stuff, why not show other people how to do it?
* Contribute with assets and examples: We still miss good example files in FreeCAD. If you created something good, share it with us!
* [[Tracker|Submit bugs]]: It is very important to have all the possible bugs fixed. If you find one, report it as clearly as possible, so we can understand exactly what's happening.
* Try to do some python coding: You never programmed before but you want to try? Python is easy. Read our [[introduction to Python]]... But beware, you might get addicted quickly!
* See the [[Help FreeCAD]] page for more details on how to contribute.

=== How can I get edit permission on the wiki? === &lt;!--T:64--&gt;

&lt;!--T:65--&gt;
See the [[Help FreeCAD#Work on the documentation|Work on the documentation]] page paragraph for more details on how to contribute.

=== Does FreeCAD participate to the Google Summer of Code? === &lt;!--T:66--&gt;

&lt;!--T:67--&gt;
No. We are too few developers at the moment, and it would take us way too much time to do the admin work and monitor the students, we prefer to spend that time writing code instead.

=== I want to start translating the wiki in my own language. What do I do? === &lt;!--T:68--&gt;

&lt;!--T:69--&gt;
This wiki is hosting a lot of contents. The most up-to-date and interesting material is gathered in the [[Online_Help_Toc|manual]]. 

&lt;!--T:70--&gt;
See the [[Help FreeCAD#Translate the documentation|Translate the documentation]] page paragraph for more details on how to translate the wiki.

== Licensing, copying and reuse == &lt;!--T:71--&gt;

=== Do I have to pay something to use FreeCAD? === &lt;!--T:72--&gt;

&lt;!--T:73--&gt;
No. FreeCAD is totally free to use, to download, to redistribute, or to modify. It is [http://en.wikipedia.org/wiki/Open_source open-source software], published under the terms of 2 free software licenses ([http://en.wikipedia.org/wiki/Gpl GPL] and [http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License LGPL]), which guarantee you those freedoms, and, even more important, guarantee you that these freedoms will never be taken from you.

=== Can I  reuse any part of the FreeCAD artwork or pieces of the website? === &lt;!--T:74--&gt;

&lt;!--T:75--&gt;
Sure. All the artwork (icons, banners, etc...) of FreeCAD is LGPL, same as the FreeCAD code. Help yourself on the [[Artwork]] page. The website is a standard mediawiki site, all graphic elements can freely be reused, and if you are curious about how to tweak the mediawiki software like we did, look for the special Common css and js pages.

=== Can I reuse pieces of FreeCAD in another application? === &lt;!--T:76--&gt;

&lt;!--T:77--&gt;
Yes, with a few minor considerations because some parts of the code are LGPL while others are GPL, and the fact that the third-parties used by FreeCAD may have other conditions as well. More details on the [[Licence]] page.

&lt;!--T:78--&gt;
[[Category:Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>FCTexture</title>
    <ns>0</ns>
    <id>24999</id>
    <revision>
      <id>88910</id>
      <parentid>71670</parentid>
      <timestamp>2014-05-31T09:41:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FEM Analysis</title>
    <ns>0</ns>
    <id>34767</id>
    <revision>
      <id>106650</id>
      <parentid>106649</parentid>
      <timestamp>2014-08-26T21:01:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>4atjaoki6m7f42lytephdgl3gd719x4</sha1>
      <text xml:space="preserve" bytes="2111">
&lt;!--T:7--&gt;
{{GuiCommand|Name=FEM Analysis|MenuLocation=FEM → New mechanical analysis‏‎||Workbenches=[[Fem Workbench|FEM]]|Shortcut=A|SeeAlso=}}


== Basic Analysis == &lt;!--T:1--&gt;
=== Units ===

{| class=&quot;wikitable&quot; style=&quot;color:green; background-color:#ffffcc;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
|+ '''Units'''
!Length !!Time !!Mass !!Force !!Pressure !!Velocity !!Density!! Energy !!Gravity
|-
|m || s ||kg ||kg m/s2 || N/m2  ||m/s || kg/m3 || kgm2/s2  || 9.81
|-
|m || s ||kg ||N || Pa || m/s || m kg/l  || J || 9.81
|-
|m || s ||g ||mN|| mPa || m/s || micro  kg/l || mJ || 9.81
|-
|m || s ||Mg (ton) ||kN ||  kPa || m/s || kg/l || kJ || 9.81
|-
|m || ms ||kg || MN || MPa || km/s || m  kg/l || MJ || 9.81e-6
|-
|m || ms ||g || kN || kPa || km/s || micro kg/l || kJ || 9.81e-6
|-
|m || ms ||Mg (ton) || GN || GPa || km/s || kg/l || GJ || 9.81e-6
|-
|mm || s || kg || mN || kPa || mm/s || M kg/l || micro J || 9.81e+3
|-
|mm|| s ||g || micro N || Pa || mm/s || g/mm3 || nJ || 9.81e+3
|-
|mm || s ||Mg (ton) || N || MPa || mm/s || Mg/mm3 ||  mJ || 9.81e+3
|-
|mm || ms|| kg || kN || GPa || m/s || M || kg/l J || 9.81e-3
|-
|mm || ms ||g || N || MPa || m/s || k kg/l || mJ || 9.81e-3
|-
|mm || ms|| Mg (ton) || MN || TPa || m/s || G  kg/l || kJ || 9.81e-3
|-
|cm || ms ||g || daN || 10^5 Pa (bar)  || dam/s || kg/l || dJ || 9.81e-4
|-
|cm || ms ||kg || 10^4 N (kdaN) || 10^8 Pa (kbar) || dam/s || k kg/l || hJ || 9.81e-4
|-
|cm || ms || Mg (ton) 10^7 || N(MdaN) ||10^11 Pa (Mbar) || dam/s || M kg/l ||10^5 J ||9.81e-4

|}



=== Procedure === &lt;!--T:2--&gt;
The following steps detail how to perform analysis on a basic cube.
==== Select Part Workbench ==== 
[[File:FEM_Analysis_(1).png|500px]]

==== Create a Cube ==== &lt;!--T:3--&gt;
[[File:FEM Analysis(2).png|500px]]

==== Highlight the Cube in the selection tree and select the data tab to check the dimensions ==== &lt;!--T:4--&gt;
[[File:FEM Analysis(3).png|500px]]

==== Switch to the FEM Workbench ==== &lt;!--T:5--&gt;
[[File:FEM Analysis(4).png|500px]]

&lt;!--T:6--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>FEM BearingConstraint</title>
    <ns>0</ns>
    <id>40070</id>
    <revision>
      <id>106712</id>
      <parentid>106711</parentid>
      <timestamp>2014-08-27T19:47:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ii1ds7r2bfqgpmyzssqdurgfo6vnbuk</sha1>
      <text xml:space="preserve" bytes="266">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM BearingConstraint|MenuLocation=FEM → Create FEM bearing constraint||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM Calculation</title>
    <ns>0</ns>
    <id>40043</id>
    <revision>
      <id>106683</id>
      <parentid>106682</parentid>
      <timestamp>2014-08-27T19:40:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bd3et1iyk80dbyr1b128gxfda3any9a</sha1>
      <text xml:space="preserve" bytes="248">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM Calculation|MenuLocation=FEM → Start calculation||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM Create</title>
    <ns>0</ns>
    <id>40027</id>
    <revision>
      <id>106669</id>
      <parentid>106668</parentid>
      <timestamp>2014-08-27T19:36:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>j6zxnq9s4qf6283d3hxkdg1nqmwhbb8</sha1>
      <text xml:space="preserve" bytes="241">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM Create|MenuLocation=FEM → Create FEM mesh||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM DefineNodes</title>
    <ns>0</ns>
    <id>40049</id>
    <revision>
      <id>106690</id>
      <parentid>106689</parentid>
      <timestamp>2014-08-27T19:42:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>eci6iep69ulsa6yzoqqh3c37pubezp3</sha1>
      <text xml:space="preserve" bytes="259">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM DefineNodes|MenuLocation=FEM → Define/create a nodes set...||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM FixedConstraint</title>
    <ns>0</ns>
    <id>40057</id>
    <revision>
      <id>106697</id>
      <parentid>106696</parentid>
      <timestamp>2014-08-27T19:43:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mk9ir5teg0g144irjjw4nxrx23oetge</sha1>
      <text xml:space="preserve" bytes="262">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM FixedConstraint|MenuLocation=FEM → Create FEM fixed constraint||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM ForceConstraint</title>
    <ns>0</ns>
    <id>40063</id>
    <revision>
      <id>106704</id>
      <parentid>106703</parentid>
      <timestamp>2014-08-27T19:44:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sdbnu1esa4ktgwl5u4px8b1adqzwcqp</sha1>
      <text xml:space="preserve" bytes="262">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM ForceConstraint|MenuLocation=FEM → Create FEM force constraint||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM GearConstraint</title>
    <ns>0</ns>
    <id>40077</id>
    <revision>
      <id>106719</id>
      <parentid>106718</parentid>
      <timestamp>2014-08-27T19:48:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ruz4uu9hrbgf8m6rm1v2avuum3qeldd</sha1>
      <text xml:space="preserve" bytes="260">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM GearConstraint|MenuLocation=FEM → Create FEM gear constraint||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM Icon</title>
    <ns>0</ns>
    <id>51429</id>
    <revision>
      <id>130199</id>
      <parentid>130198</parentid>
      <timestamp>2014-12-08T20:01:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1ab3fqlje6gylqc4u71r5ovag4ajoap</sha1>
      <text xml:space="preserve" bytes="175">
==Fem== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM Key</title>
    <ns>0</ns>
    <id>51439</id>
    <revision>
      <id>131443</id>
      <parentid>130875</parentid>
      <timestamp>2014-12-13T21:13:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>1f8hx6r0jva4gesz4uo3ghi9zcsdwvh</sha1>
      <text xml:space="preserve" bytes="197">
==Fem== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FEM Material</title>
    <ns>0</ns>
    <id>40035</id>
    <revision>
      <id>106676</id>
      <parentid>106675</parentid>
      <timestamp>2014-08-27T19:38:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>k899sezqce5x9t9w5ffajr5mjq0p30f</sha1>
      <text xml:space="preserve" bytes="250">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM Material|MenuLocation=FEM → Mechanical material...||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM PulleyConstraint</title>
    <ns>0</ns>
    <id>40083</id>
    <revision>
      <id>106726</id>
      <parentid>106725</parentid>
      <timestamp>2014-08-27T19:49:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>in193ew75llzdqq471ihdtobgca630l</sha1>
      <text xml:space="preserve" bytes="264">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM PulleyConstraint|MenuLocation=FEM → Create FEM pulley constraint||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM ShowResult</title>
    <ns>0</ns>
    <id>40092</id>
    <revision>
      <id>106733</id>
      <parentid>106732</parentid>
      <timestamp>2014-08-27T19:51:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mxs3ewxzzmumdz4idqsmjknbm3re8a5</sha1>
      <text xml:space="preserve" bytes="241">
&lt;!--T:1--&gt;
{{GuiCommand|Name=FEM ShowResult|MenuLocation=FEM → Show result||Workbenches=[[Fem Workbench|FEM]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FEM project</title>
    <ns>0</ns>
    <id>414</id>
    <revision>
      <id>60769</id>
      <parentid>60072</parentid>
      <timestamp>2014-01-10T12:18:33Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <sha1>51ftcc3gu1adzc0jp4uog7xz6z1m9fj</sha1>
      <text xml:space="preserve" bytes="2019">
&lt;!--T:1--&gt;
This is the project plan for the FreeCAD FEM integration as part of the [[Development roadmap]].


== Purpose and principles == &lt;!--T:2--&gt;

== Outcome == &lt;!--T:3--&gt;
Simple [[Fem_Workbench|FEM]] chain to start the matter. Which is capable of meshing a Part (automatic) and compute
some standard stuff like stiffnes and frequencies. 

&lt;!--T:4--&gt;
The framework should allow tetrahedral and hex meshes. Writing the output decks as python plugin to ease
use different solver. Simple post-processing with the ability to extend by python. 

== Brainstorming == &lt;!--T:5--&gt;

=== potential Meshers === &lt;!--T:6--&gt;
[[Image:Netgen.jpg|300px|right]]

&lt;!--T:7--&gt;
Some meshers out there
* [http://www.hpfem.jku.at/netgen/ Netgen] very good mesher, LGPL with some library suport
* [http://www.salome-platform.org/ Salome] complicated package, hard to get the code we need!?
* [http://www.pythonocc.org/ PythonOCC] python library wrapping Salome and Netgen meshers may be the quickest and most complete way to integrate meshers

=== potential Solvers === &lt;!--T:8--&gt;
some solver out there
* [http://www.calculix.de/ Calculix] 
* [http://www.code-aster.org Code-Aster] very broad solver with python bindings
* [http://www.pythonocc.org/ PythonOCC] python library that also offers a (currently) rough interface to Code_Aster which would also be a quick way to have a 1st working solution

=== calculix examples === &lt;!--T:9--&gt;
* [http://dip28p.web.fc2.com/calculix/netgen2calculix/index.html gut example with contact]

== Organizing == &lt;!--T:10--&gt;

=== Mesher === &lt;!--T:11--&gt;
* Testing the mesh generators by experts
* Analysing software structure and possible integration


== Next actions == &lt;!--T:12--&gt;
* Setting up [[Fem_Workbench]] (done)
* Starting optimized visuals for SALOME mesh (ongoing)
* Interface for adding post-processing information (color, displacement) to the Fem Visual. (done)
* Writing a valid CalculiX INP file.
* loading FRD (done)



&lt;!--T:13--&gt;
[[Category:Roadmap]]


</text>
    </revision>
  </page>
  <page>
    <title>Fcbt</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>107972</id>
      <parentid>89217</parentid>
      <timestamp>2014-09-01T12:14:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Fcstd file format</title>
    <ns>0</ns>
    <id>1373</id>
    <revision>
      <id>70758</id>
      <parentid>70757</parentid>
      <timestamp>2014-02-21T20:45:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>i7mrhd3qi0ytx0ua2j8arcuukwwh48y</sha1>
      <text xml:space="preserve" bytes="2310">
&lt;!--T:1--&gt;
The '''FreeCAD Standard file format''' (.fcstd) is FreeCAD's main file format. It is a compound format, supports compression and embedding of different kinds of data. 

&lt;!--T:2--&gt;
A .fcstd file is in truth nothing else than a .zip file containing .xml files and data files. The .xml files organize the structure of the saved document and how the other data files must be used. In fact, you can always rename a .fcstd file with the .zip extension and open it with any zip application.

&lt;!--T:3--&gt;
This is the [[File_Format_FCStd|structure of a typical fcstd]] file:

&lt;syntaxhighlight&gt;
 --File.fcstd
  |
  --Document.xml
  --GuiDocument.xml
   |
   --Thumbnails
    |
    --thumbnail.png
   |
   --Templates
    |
    --MyPage.svg
  --Shape1.brep
  --Shape2.brep
  --etc...
&lt;/syntaxhighlight&gt;



&lt;!--T:4--&gt;
[[Image:Splash013.jpg|500px|center]]

==Contents of a .fcstd file== &lt;!--T:5--&gt;
===Document.xml===
This is the main xml file describing all the objects inside a FreeCAD document, that is, only the geometric and parametric definition of the objects, not their visual representation. If FreeCAD is ran in console mode (without the GUI), only this xml document will be used.

===GuiDocument.xml=== &lt;!--T:6--&gt;
This is the GUI counterpart of the Document.xml file. For each object described in the Document.xml, there is one corresponding object in GuiDocument.xml, describing the visual representation of that object (color, linewidth, etc).

===Thumbnails/thumbnail.png=== &lt;!--T:7--&gt;
This is a 128x128 pixels thumbnail image of the document, which is a screenshot of the 3D view at save time. Thumbnails are generated only if the corresponding option is enabled in the FreeCAD preferences.

===Templates/*.svg=== &lt;!--T:8--&gt;
In the Templates folder are stored the template svg files used in [[Drawing Module|Drawing]] pages.

===*.brep=== &lt;!--T:9--&gt;
These are the .brep shapes of all objects that have a Part shape in the Document.xml. Each object, even if it is parametric, has its shape stored as an individual .brep file, so it can be accessed by components without the need to recalculate the shape.

==Other== &lt;!--T:10--&gt;
Here, a file Converter utility [[ImageConv|ImageConv]].


&lt;!--T:11--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Feature list</title>
    <ns>0</ns>
    <id>49</id>
    <revision>
      <id>129382</id>
      <parentid>104563</parentid>
      <timestamp>2014-12-06T21:02:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>bgb9o3afdylwqosqvfvycmhajttdfel</sha1>
      <text xml:space="preserve" bytes="10536">
&lt;!--T:1--&gt;
This is an extensive, hence not complete, list of features FreeCAD implements. If you want to look into the future see the [[Development roadmap]] for a quick overview of what's coming next. Also, the [[Screenshots]] are a nice place to go. 

== Release notes == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
* [[Release notes 011|Release 0.11]] - March 2011
* [[Release notes 012|Release 0.12]] - December 2011
* [[Release notes 013|Release 0.13]] - January 2013
* [[Release notes 014|Release 0.14]] - March 2014

== Key features == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* [[Image:Feature1.jpg|left]] A complete [http://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology]-based '''geometry kernel''' allowing complex 3D operations on complex shape types, with native support for concepts like brep, nurbs curves and surfaces, a wide range of geometric entities, boolean operations and fillets, and built-in support of STEP and IGES formats {{clear}}
* [[Image:Feature3.jpg|left]] A full '''parametric model'''. All FreeCAD objects are natively parametric, which means their shape can be based on [[Property|properties]] or even depend on other objects, all changes being recalculated on demand, and recorded by the undo/redo stack. New object types can be added easily, that can even be [[Scripted objects|fully programmed in Python]]{{clear}}
* [[Image:Feature4.jpg|left]] A '''modular architecture''' that allow plugins (modules) to add functionality to the core application. Those extensions can be as complex as whole new applications programmed in C++ or as simple as [[Power users hub|Python scripts]] or self-recorded [[macros]]. You have complete access from the '''Python''' built-in interpreter, macros or external scripts to almost any part of FreeCAD, being [[Topological data scripting|geometry creation and transformation]], the 2D or 3D representation of that geometry ([[scenegraph]]) or even the [[PyQt|FreeCAD interface]] {{clear}}
* [[Image:Feature5.jpg|left]] Import/export to '''standard formats''' such as [http://en.wikipedia.org/wiki/ISO_10303 STEP], [http://en.wikipedia.org/wiki/IGES IGES], [http://en.wikipedia.org/wiki/Obj OBJ], [http://en.wikipedia.org/wiki/STL_%28file_format%29 STL], [http://en.wikipedia.org/wiki/Dxf DXF], [http://en.wikipedia.org/wiki/Svg SVG], [http://en.wikipedia.org/wiki/STL_(file_format) STL], [http://en.wikipedia.org/wiki/COLLADA DAE], [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] or [http://people.sc.fsu.edu/~jburkardt/data/off/off.html OFF], [http://en.wikipedia.org/wiki/NASTRAN NASTRAN], [http://en.wikipedia.org/wiki/VRML VRML] in addition to FreeCAD's native [[Fcstd file format]]. The level of compatibility between FreeCAD and a given file format can vary, since it depends on the module that implements it.{{clear}}
* [[Image:Feature7.jpg|left]] A [[Sketcher Workbench|Sketcher]] with constraint-solver, allowing to sketch geometry-constrained 2D shapes. The sketcher currently allows you to build several types of constrained geomerty, and use them as a base to build other objects throughout FreeCAD.{{clear}}
* [[Image:Feature9.jpg|left]] A [[Robot Workbench|Robot simulation]] module that allows to study robot movements. The robot module already has an extended graphical interface allowing GUI-only workflow.{{clear}}
* [[Image:Feature8.jpg|left]] A [[Drawing Module|Drawing sheets]] module that permit to put 2D views of your 3D models on a sheet. This modules then produces ready-to-export SVG or PDF sheets. The module is still sparse but already features a powerful Python functionality.{{clear}}
* [[Image:Feature-raytracing.jpg|left]] A [[Raytracing Module|Rendering]] module that can export 3D objects for rendering with external renderers. Currently only supports [http://en.wikipedia.org/wiki/POV-Ray povray] and [http://en.wikipedia.org/wiki/LuxRender LuxRender], but is expected to be extended to other renderers in the future.{{clear}}
* [[Image:Feature-arch.jpg|left]] An [[Arch Module|Architecture]] module that allows [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM]-like workflow, with [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] compatibility. The making of the Arch module is heavily discussed by the community [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=821 here].{{clear}}

== General features == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
*'''FreeCAD is multi-platform'''. It runs and behaves exactly the same way on Windows Linux and Mac OSX platforms.

&lt;!--T:8--&gt;
* '''FreeCAD is a full GUI application'''. FreeCAD has a complete Graphical User Interface based on the famous [http://www.qtsoftware.com/ Qt] framework, with a 3D viewer based on [http://en.wikipedia.org/wiki/Open_Inventor Open Inventor], allowing fast rendering of 3D scenes and a very accessible scene graph representation.

&lt;!--T:9--&gt;
* '''FreeCAD also runs as a command line application''', with low memory footprint. In command line mode, FreeCAD runs without its interface, but with all its geometry tools. It can be, for example, used as server to produce content for other applications.

&lt;!--T:10--&gt;
* '''FreeCAD can be imported as a [[Embedding FreeCAD|Python module]]''', inside other applications that can run python scripts, or in a python console. Like in console mode, the interface part of FreeCAD is unavailable, but all geometry tools are accessible.

&lt;!--T:11--&gt;
* '''Workbench concept''': In the FreeCAD interface, tools are grouped by [[workbenches]]. This allows to display only the tools used to accomplish a certain task, keeping the workspace uncluttered and responsive, and the application fast to load.

&lt;!--T:12--&gt;
* '''Plugin/Module framework for late loading of features/data-types'''. FreeCAD is divided into a core application and modules, that are loaded only when needed. Almost all the tools and geometry types are stored in modules. Modules behave like plugins, and can be added or removed to an existing installation of FreeCAD.

&lt;!--T:13--&gt;
* '''Parametric associative document objects''': All objects in a FreeCAD document can be defined by parameters. Those parameters can be modified on the fly, and recomputed anytime. The relationship between objects is also stored, so modifying one object also modifies its dependent objects.

&lt;!--T:14--&gt;
* '''Parametric primitive creation''' (box, sphere, cylinder, etc)

&lt;!--T:15--&gt;
* Graphical '''modification operations''' like translation, rotation, scaling, mirroring, offset (trivial or after [http://www.ann.jussieu.fr/~frey/papers/meshing/Jung%20W.,%20Self-intersection%20removal%20in%20triangular%20mesh%20offsetting.pdf Jung/Shin/Choi]) or shape conversion, in any plane of the 3D space

&lt;!--T:16--&gt;
* '''[http://en.wikipedia.org/wiki/Constructive_solid_geometry Boolean operations]''' (union, difference, intersect)

&lt;!--T:17--&gt;
* Graphical creation of '''simple planar geometry''' like lines, wires, rectangles, arcs or circles in any plane of the 3D space

&lt;!--T:18--&gt;
* Modeling with straight or revolution '''extrusions''', '''sections''' and '''fillets'''.

&lt;!--T:19--&gt;
* Topological components like '''vertices, edges, wires''' and '''planes''' (via python scripting).

&lt;!--T:20--&gt;
* '''Testing and repairing''' tools for meshes: solid test, non-two-manifolds test, self-intersection test, hole filling and uniform orientation.

&lt;!--T:21--&gt;
* '''Annotations''' like texts or dimensions

&lt;!--T:22--&gt;
* '''Undo/Redo framework''': Everything is undo/redoable, with access to the undo stack, so multiple steps can be undone at a time.

&lt;!--T:23--&gt;
* '''Transaction management''': The undo/redo stack stores document transactions and not single actions, allowing each tool to define exactly what must be undone or redone.

&lt;!--T:24--&gt;
* '''Built-in [[Scripting|scripting]] framework''': FreeCAD features a built-in [http://www.python.org/ Python] interpreter, and an API that covers almost any part of the application, the interface, the geometry and the representation of this geometry in the 3D viewer. The interpreter can run single commands up to complex scripts, in fact entire modules can even be programmed completely in Python.

&lt;!--T:25--&gt;
* '''Built-in Python console''' with syntax highlighting, autocomplete and class browser: Python commands can be issued directly in FreeCAD and immediately return results, permitting scriptwriters to test functionality on the fly, explore the contents of the modules and easily learn about FreeCAD internals.

&lt;!--T:26--&gt;
* '''User interaction mirroring on the console''': Everything the user does in the FreeCAD interface executes python code, which can be printed on the console and recorded in macros.

&lt;!--T:27--&gt;
* '''Full macro recording &amp; editing''': The python commands issued when the user manipulates the interface can then be recorded, edited if needed, and saved to be reproduced later.

&lt;!--T:28--&gt;
* '''Compound (ZIP based) document save format''': FreeCAD documents saved with .[[fcstd file format|fcstd]] extension can contain many different types of information, such as geometry, scripts or thumbnail icons.  The .fcstd file is itself a zip container, so a saved FreeCAD file has already been compressed.

&lt;!--T:29--&gt;
* '''Fully customizable/scriptable Graphical User Interface'''. The [http://www.qtsoftware.com Qt]-based interface of FreeCAD is entirely accessible via the python interpreter. Aside from the simple functions that FreeCAD itself provides to workbenches, the whole Qt framework is accessible too, allowing any operation on the GUI, such as creating, adding, docking, modifying or removing widgets and toolbars.

&lt;!--T:30--&gt;
* '''Thumbnailer''' (Linux systems only at the moment): The FreeCAD document icons show the contents of the file in most file manager applications such as gnome's nautilus.

&lt;!--T:31--&gt;
* '''A modular MSI installer''' allows flexible installations on Windows systems. Packages for Ubuntu systems are also maintained.

==In development== &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
* [[Image:Feature-assembly.jpg|left]] An [[Assembly project|Assembly]] module that allows to work with multiple projects, multiple shapes, multiple documents, multiple files, multiple relationships...{{clear}}
* [[Image:Feature-CAM.jpg|left]] A [[Cam Module]] dedicated to mechanical machining like milling, and will be able to output, display and adjust [http://en.wikipedia.org/wiki/G-code G code]. This module is currently in planning state.{{clear}}

&lt;!--T:34--&gt;
{{docnav|About FreeCAD|Install on Windows}}

&lt;!--T:35--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Fem Workbench</title>
    <ns>0</ns>
    <id>4310</id>
    <revision>
      <id>109686</id>
      <parentid>106739</parentid>
      <timestamp>2014-09-18T18:53:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>b8928s8jcfhni0qbojj8g1nyqbo8tkl</sha1>
      <text xml:space="preserve" bytes="5437">
&lt;!--T:1--&gt;
The '''Fem Workbench''' offers data structures and commands to work with [http://en.wikipedia.org/wiki/Finite_element_method Fem meshes].

&lt;!--T:3--&gt;
[[Image:FemWorkbench.jpg]]&lt;br /&gt;


&lt;!--T:33--&gt;
[0.14] The FEM-Module is only available with the Windows-Versions of FreeCAD.

&lt;!--T:34--&gt;
Linux-Versions would need further work for implementation.&lt;br /&gt;


&lt;!--T:35--&gt;
The FEM-Module supports linear analysis of isotropic (uniformity in all directions) material.

&lt;!--T:36--&gt;
Mechanical analysis with calculation of resulting stress (v.-Mises) and displacement is supported.

&lt;!--T:37--&gt;
[0.14] The FEM-module supports analysis of single parts (solids). Multi-body analysis is not implemented yet.


&lt;br /&gt;
=== Creating or importing meshes/parts === &lt;!--T:7--&gt;

&lt;!--T:43--&gt;
[0.14] Only parts created within the [[Part Module|Part Module]] are suppported. Parts from Part Design-Workbench or imported parts
&lt;br /&gt;
or simple copies are not yet supported

=== GUI Tools === &lt;!--T:4--&gt;

&lt;!--T:44--&gt;
{{Template:FEM_Tools}}

== Import/Export == &lt;!--T:9--&gt;

== Python scripting == &lt;!--T:10--&gt;

=== Creating FEM-meshes &quot;by hand&quot; === &lt;!--T:11--&gt;

==== creation of FEM-meshes ==== &lt;!--T:12--&gt;
Creating a mesh with one Tet-10 Elements:

&lt;syntaxhighlight&gt;
import FreeCAD, Fem

# create a empty mesh
m = Fem.FemMesh()
#create the nodes
m.addNode(0,1,0)
m.addNode(0,0,1)
m.addNode(1,0,0)
m.addNode(0,0,0)
m.addNode(0,0.5,0.5)
m.addNode(0.5,0.03,.5)
m.addNode(0.5,0.5,0.03)
m.addNode(0,0.5,0)
m.addNode(0.03,0,0.5)
m.addNode(0.5,0,0)
# add the volume with the created nodes
m.addVolume([1,2,3,4,5,6,7,8,9,10])

Fem.show(m)
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
If you want to have predefined element and node numbering:

&lt;syntaxhighlight&gt;

m.addNode(0.0,1.0,0.0,1)

m.addVolume([1,2,3,4,5,6,7,8,9,10],1)

&lt;/syntaxhighlight&gt;

==== Visual handling ==== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
Highlight some nodes on the view:

&lt;syntaxhighlight&gt;
import FreeCAD, Fem

m = Fem.FemMesh()

m.addNode(0,1,0)
m.addNode(0,0,1)
m.addNode(1,0,0)
m.addNode(0,0,0)
m.addNode(0,0.5,0.5)
m.addNode(0.5,0.03,.5)
m.addNode(0.5,0.5,0.03)
m.addNode(0,0.5,0)
m.addNode(0.03,0,0.5)
m.addNode(0.5,0,0)
m.addVolume([1,2,3,4,5,6,7,8,9,10])

Fem.show(m)
Gui.ActiveDocument.ActiveObject.HighlightedNodes = [1,2,3]
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
Postprocessing colors and displacement:

&lt;!--T:17--&gt;
Highlight some nodes on the view:

&lt;syntaxhighlight&gt;
# set the volume 1 to red
Gui.ActiveDocument.ActiveObject.ElementColor= {1:(1,0,0)}
# set the node 1 and 2 to a certain Color and interpolate the survace
Gui.ActiveDocument.ActiveObject.NodeColor= {1:(1,0,0),2:(1,0,0)}
# set the node 1 and 2 to a certain displacement
Gui.ActiveDocument.ActiveObject.NodeDisplacement= {1:FreeCAD.Vector(1,0,0),2:FreeCAD.Vector(1,0,0)}
# double the factor of the displacement shown
Gui.ActiveDocument.ActiveObject.animate(2.0)

&lt;/syntaxhighlight&gt;

== Element Types == &lt;!--T:18--&gt;
This description is based on the MED format as described [https://hammi.extra.cea.fr/static/MED/web_med/logiciels/med-2.3.1/doc/html/modele_de_donnees.html#3. here].

=== Segment element === &lt;!--T:19--&gt;
[[Image:segments.gif]]

=== Triangle element === &lt;!--T:20--&gt;
[[Image:triangles.gif]]

=== Quadratic element === &lt;!--T:21--&gt;
[[Image:quadrangles.gif]]

=== Tetrahedron element === &lt;!--T:22--&gt;
[[Image:tetraedres.gif|right]]


&lt;!--T:23--&gt;
{| class=&quot;wikitable&quot; style=&quot;color:green; background-color:#ffffcc;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
|+ '''Tetrahedron with four or ten nodes'''
|-
! Edge !! Node 1 !! Node 2 !! Middle node
|-
| A1 || N1 || N2 || N5
|-
| A2 || N2 || N3 || N6
|-
| A3 || N3 || N1 || N7
|-
| A4 || N1 || N4 || N8
|-
| A5 || N2 || N4 || N9
|-
| A6 || N3 || N4 || N10
|}

&lt;!--T:24--&gt;
{| class=&quot;wikitable&quot; style=&quot;color:green; background-color:#ffffcc;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
|+ '''Tetrahedron Faces'''
|-
! Face 	!! Edge 1 !! Edge 2 !! Edge 3
|-
| F1 || A1 || A2 || A3
|-
| F2 || A4 ||-A5 ||-A1
|-
| F3 || A5 ||-A6 ||-A2
|-
| F4 || A6 ||-A4 ||-A3 
|}

=== Pyramid element === &lt;!--T:25--&gt;
[[Image:pyramides.gif]]

=== Hexahedron element === &lt;!--T:26--&gt;
[[Image:hexaedres.gif|right]]



&lt;!--T:27--&gt;
{| class=&quot;wikitable&quot; style=&quot;color:green; background-color:#ffffcc;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
|+ '''Hexahedron with eight or twenty nodes'''
|-
! Edge !! Node 1 !! Node 2 !! Middle node
|-
| A1 || N1 || N2 || N9
|-
| A2 || N2 || N3 || N10
|-
| A3 || N3 || N4 || N11
|-
| A4 || N4 || N1 || N12
|-
| A5 || N5 || N6 || N13
|-
| A6 || N6 || N7 || N14
|-
| A7 || N7 || N7 || N15
|-
| A8 || N8 || N5 || N16
|-
| A9 || N1 || N5 || N17
|-
| A10|| N2 || N6 || N18
|-
| A11|| N3 || N7 || N19
|-
| A12|| N4 || N8 || N20
|}

&lt;!--T:28--&gt;
{| class=&quot;wikitable&quot; style=&quot;color:green; background-color:#ffffcc;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
|+ '''Hexahedron faces'''
|-
! Face 	!! Edge 1 !! Edge 2 !! Edge 3 !! Edge 4
|-
| F1 || A1 || A2 || A3 || A4
|-
| F2 ||-A8 ||-A7 ||-A6 ||-A5
|-
| F3 || A9 || A5 ||-A10||-A1
|-
| F4 || A10|| A6 ||-A11||-A2 
|-
| F5 || A11|| A7 ||-A12||-A3 
|-
| F6 || A12|| A8 ||-A9 ||-A4 
|}

=== Pentahedron element === &lt;!--T:29--&gt;
[[Image:pentaedres.gif]]

== Example == &lt;!--T:32--&gt;
See [[FEM_Analysis|FEM Analysis]]
 

&lt;!--T:30--&gt;
{{docnav|Workbenches|Part Module}}


&lt;!--T:31--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>File Format FCStd</title>
    <ns>0</ns>
    <id>581</id>
    <revision>
      <id>90116</id>
      <parentid>90110</parentid>
      <timestamp>2014-06-04T17:30:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ol45kziglndm8xkzqq2gqi955oaia6b</sha1>
      <text xml:space="preserve" bytes="8690">
&lt;!--T:1--&gt;
A FreeCAD project is actually a normal zip file that always contains a Document.xml file and optionally several data files, a GuiDocument.xml and a thumbnail in PNG format, PartShape3.brp Points3 . . .

==Structure of Document.xml== &lt;!--T:2--&gt;

&lt;syntaxhighlight&gt;
 &lt;?xml version='1.0' encoding='utf-8'?&gt;
 &lt;!--
 FreeCAD Document, see http://free-cad.sourceforge.net for more informations...
 --&gt;
 &lt;Document SchemaVersion=&quot;4&quot;&gt;
    &lt;Properties Count=&quot;9&quot;&gt;
       &lt;Property name=&quot;Comment&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;Company&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;CreatedBy&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;CreationDate&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;Fri Jan 29 15:14:38 2010 &quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;FileName&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;/tmp/test.FCStd&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;Id&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;201b746f-a1ed-4297-bf3d-65d5ec11abe0&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;Label&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;names&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;LastModifiedBy&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;&quot;/&gt;
       &lt;/Property&gt;
       &lt;Property name=&quot;LastModifiedDate&quot; type=&quot;App::PropertyString&quot;&gt;
          &lt;String value=&quot;Fri Jan 29 15:15:21 2010 &quot;/&gt;
       &lt;/Property&gt;
    &lt;/Properties&gt;
    &lt;Objects Count=&quot;2&quot;&gt;
       &lt;Object type=&quot;Mesh::Cube&quot; name=&quot;Cube&quot; /&gt;
       &lt;Object type=&quot;Part::Box&quot; name=&quot;Box&quot; /&gt;
    &lt;/Objects&gt;
    &lt;ObjectData Count=&quot;2&quot;&gt;
       &lt;Object name=&quot;Cube&quot;&gt;
          &lt;Properties Count=&quot;7&quot;&gt;
             &lt;Property name=&quot;Height&quot; type=&quot;App::PropertyFloatConstraint&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Label&quot; type=&quot;App::PropertyString&quot;&gt;
                &lt;String value=&quot;Cube&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Length&quot; type=&quot;App::PropertyFloatConstraint&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Mesh&quot; type=&quot;Mesh::PropertyMeshKernel&quot;&gt;
                &lt;Mesh file=&quot;MeshKernel.bms&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Placement&quot; type=&quot;App::PropertyPlacement&quot;&gt;
                &lt;PropertyPlacement Px=&quot;0&quot; Py=&quot;0&quot; Pz=&quot;0&quot; Q0=&quot;0&quot; Q1=&quot;0&quot; Q2=&quot;0&quot; Q3=&quot;1&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Pos&quot; type=&quot;App::PropertyPlacementLink&quot;&gt;
                &lt;Link value=&quot;&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Width&quot; type=&quot;App::PropertyFloatConstraint&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
          &lt;/Properties&gt;
       &lt;/Object&gt;
       &lt;Object name=&quot;Box&quot;&gt;
          &lt;Properties Count=&quot;7&quot;&gt;
             &lt;Property name=&quot;Height&quot; type=&quot;App::PropertyLength&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Label&quot; type=&quot;App::PropertyString&quot;&gt;
                &lt;String value=&quot;Box2&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Length&quot; type=&quot;App::PropertyLength&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Placement&quot; type=&quot;App::PropertyPlacement&quot;&gt;
                &lt;PropertyPlacement Px=&quot;0&quot; Py=&quot;0&quot; Pz=&quot;0&quot; Q0=&quot;0&quot; Q1=&quot;0&quot; Q2=&quot;0&quot; Q3=&quot;1&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Pos&quot; type=&quot;App::PropertyPlacementLink&quot;&gt;
                &lt;Link value=&quot;&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Shape&quot; type=&quot;Part::PropertyPartShape&quot;&gt;
                &lt;Part file=&quot;PartShape.brp2&quot;/&gt;
             &lt;/Property&gt;
             &lt;Property name=&quot;Width&quot; type=&quot;App::PropertyLength&quot;&gt;
                &lt;Float value=&quot;10&quot;/&gt;
             &lt;/Property&gt;
          &lt;/Properties&gt;
       &lt;/Object&gt;
    &lt;/ObjectData&gt;
 &lt;/Document&gt;
&lt;/syntaxhighlight&gt;

==Change the source of the file .FCStd== &lt;!--T:3--&gt;
{{VeryImportantMessage|'''ATTENTION ALWAYS WORK ON A COPY OF YOUR PROJECT !'''}}

&lt;!--T:4--&gt;
It is possible to change the source of a file .FCStd but the procedure is not without risk it is for this reason that we need to work on a '''copy'''.

&lt;!--T:5--&gt;
After having made an '''copy''' of your project, follow these steps :

&lt;!--T:6--&gt;
Create a new directory and place your copy in that directory (there may be many files in your FCStd).

&lt;!--T:7--&gt;
* Go in '''Menu &gt; tools &gt; Project utility... Project utility''' 
[[File:Project utility en.png|240px]]
* Source : Give your copy to unpack path.
* Destination : Give the path to the unzipped files.
* Click {{KEY|Extract}}
* Go to your directory and open both files '''GuiDocument.xml''' andt '''Document.xml''' using [http://notepad-plus-plus.org/ Notepad++] (Windows) (Notepad++ to modify a word in all open documents).
*'''GuiDocument.xml''' : contains all your project information to the interface, display in the Combo view, the configuration of FreeCAD . . .
**Example with '''Text004'''

&lt;syntaxhighlight&gt;
		&lt;ViewProvider name=&quot;Text004&quot;&gt;
			&lt;Properties Count=&quot;9&quot;&gt;
				&lt;Property name=&quot;DisplayMode&quot; type=&quot;App::PropertyEnumeration&quot;&gt;
					&lt;Integer value=&quot;1&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;FontName&quot; type=&quot;App::PropertyString&quot;&gt;
					&lt;String value=&quot;Arial&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;FontSize&quot; type=&quot;App::PropertyFloat&quot;&gt;
					&lt;Float value=&quot;5.199999809265&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;Justification&quot; type=&quot;App::PropertyEnumeration&quot;&gt;
					&lt;Integer value=&quot;0&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;LineSpacing&quot; type=&quot;App::PropertyFloat&quot;&gt;
					&lt;Float value=&quot;0.600000023842&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;Rotation&quot; type=&quot;App::PropertyAngle&quot;&gt;
					&lt;Float value=&quot;0.000000000000&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;RotationAxis&quot; type=&quot;App::PropertyEnumeration&quot;&gt;
					&lt;Integer value=&quot;2&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;TextColor&quot; type=&quot;App::PropertyColor&quot;&gt;
					&lt;PropertyColor value=&quot;4294901760&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;Visibility&quot; type=&quot;App::PropertyBool&quot;&gt;
					&lt;Bool value=&quot;true&quot;/&gt;
				&lt;/Property&gt;
			&lt;/Properties&gt;
		&lt;/ViewProvider&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
*'''Document.xml''' : contains all information relating to the constituent objects your project.
**Example with '''Text004'''

&lt;syntaxhighlight&gt;
		&lt;Object type=&quot;App::Annotation&quot; name=&quot;Text004&quot; /&gt;
&lt;/syntaxhighlight&gt;


&lt;syntaxhighlight&gt;
		&lt;Object name=&quot;Text004&quot;&gt;
			&lt;Properties Count=&quot;3&quot;&gt;
				&lt;Property name=&quot;Label&quot; type=&quot;App::PropertyString&quot;&gt;
					&lt;String value=&quot;Text004&quot;/&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;LabelText&quot; type=&quot;App::PropertyStringList&quot;&gt;
					&lt;StringList count=&quot;1&quot;&gt;
						&lt;String value=&quot;135&quot;/&gt;
					&lt;/StringList&gt;
				&lt;/Property&gt;
				&lt;Property name=&quot;Position&quot; type=&quot;App::PropertyVector&quot;&gt;
					&lt;PropertyVector valueX=&quot;-30.000000000000&quot; valueY=&quot;26.000000000000&quot; valueZ=&quot;0.000000000000&quot;/&gt;
				&lt;/Property&gt;
			&lt;/Properties&gt;
		&lt;/Object&gt;

&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
* Information such as :

&lt;syntaxhighlight&gt;
&lt;VectorList file=&quot;Points1&quot;/&gt; 
&lt;ColorList file=&quot;DiffuseColor&quot;/&gt; 
&lt;Mesh file=&quot;MeshKernel.bms&quot;/&gt; 
&lt;Part file=&quot;PartShape.brp2&quot;/&gt;
. . . .
&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
* as well as other definitions containers '''file=''' relate has a file and if you change example &quot;'''DiffuseColor'''&quot; in '''&lt;ColorList file=&quot;DiffuseColor&quot;/&gt;''' You must also change the name of the file for correspondence.
* Once the Word change is identified, '''search''' (your Word) and '''Replace by''' (your new word) and click on {{KEY|Replace in all open documents}} and your change will be the same in both files '''GuiDocument.xml''' and '''Document.xml'''.
* When changes are complete, return to the tool '''Menu &gt; Tools &gt; Project utility... Create project'''
* Source : Give the path of the file that you just changed and that is to restore.
* Destination : Give the path of the FCStd file to restore.
* Click {{KEY|...}} In the new window click on {{KEY|Create a new folder}} (to avoid errors by rewriting the file) and you post. Click on {{KEY|Create}} you can check the &quot;Load project file after creation&quot;.
* If you have checked &quot;Load project file after creation&quot; your project will load in FreeCAD.
* '''PS :''' It is imperative that it have concordance GuiDocument.xml, Document.xml documents and files without which there will be errors in your .FCStd file. To do this should always work on a copy of your project.

==Other== &lt;!--T:10--&gt;
More information on the format [[Fcstd_file_format|Fcstd]].

&lt;!--T:11--&gt;
Here, a file Converter utility [[ImageConv|ImageConv]].

&lt;!--T:13--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Fonctionnalités</title>
    <ns>0</ns>
    <id>846</id>
    <revision>
      <id>107973</id>
      <parentid>90994</parentid>
      <timestamp>2014-09-01T12:14:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FreeCADGui API</title>
    <ns>0</ns>
    <id>739</id>
    <revision>
      <id>133201</id>
      <parentid>122935</parentid>
      <timestamp>2014-12-23T20:58:44Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>sqayn0hd2y797ohho2lh231e88lgy8p</sha1>
      <text xml:space="preserve" bytes="1900">
&lt;!--T:1--&gt;
This module is the counterpart of the FreeCAD module. It contains everything related to the User interface and the 3D views. Example:

{{Code|code=
import FreeCADGui
doc = FreeCADGui.activeDocument()
}}



&lt;!--T:2--&gt;
{{APIFunction|activateWorkbench|string|Activates a workbench by name|nothing}}
{{APIFunction|activeDocument| | |the active document or None if no one exists}}
{{APIFunction|activeWorkbench| | |the active workbench object}}
{{APIFunction|addCommand|string, object|Adds a FreeCAD command. String is the name of the command and object is a classname defining the command| }}
{{APIFunction|addIcon|string, string or list|Adds an icon as file name or in XPM format to the system| }}
{{APIFunction|addIconPath|string|Add a new path to the system where to find icon files| }}
{{APIFunction|addPreferencePage|string,string|Adds a UI form to the preferences dialog. The first argument specifies the file name and the second specifies the group name| }}
{{APIFunction|addWorkbench|string, object|Adds a workbench under a defined name. The string is the workbench name and the object is a classname defining the workbench| }}
{{APIFunction|createDialog|string|Opens a UI file| }}
{{APIFunction|getDocument|string|Gets a document by its name|the document}}
{{APIFunction|getWorkbench|string|Gets a workbench by its name|the workbench}}
{{APIFunction|insert|string|Open a macro, Inventor or VRML file|the document}}
{{APIFunction|listWorkbenches| |Shows a list of all workbenches|a list}}
{{APIFunction|open|string|Opens a macro, Inventor or VRML file|the openend document}}
{{APIFunction|removeWorkbench|string|Removes a workbench by name| }}
{{APIFunction|runCommand|string|Runs a FreeCAD command by name| }}
{{APIFunction|updateGui| |Updates the main window and all its windows| }}

&lt;!--T:3--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCADShip Workbench</title>
    <ns>0</ns>
    <id>3696</id>
    <revision>
      <id>77551</id>
      <parentid>77550</parentid>
      <timestamp>2014-03-21T20:24:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>160fk136681k7dkbubdndobs17wxku3</sha1>
      <text xml:space="preserve" bytes="939">
==FreeCADShip Workbench== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:FreeCAD-Ship-LoadIco.png|31px|Example ship geometries loader icon]] : Example ship geometries loader icon.

&lt;!--T:3--&gt;
[[Image:FreeCAD-Ship-Ico.png|32px|Ship creation tool]] : Ship creation tool icon.

&lt;!--T:4--&gt;
[[Image:FreeCAD-Ship-ShipInstance.png|32px|Ship instance icon]] : Ship instance icon.

&lt;!--T:5--&gt;
[[Image:FreeCAD-Ship-OutlineDrawIco.png|32px|Outline draw tool]] : Outline draw tool icon.

&lt;!--T:6--&gt;
[[Image:FreeCAD-Ship-AreaCurveIco.png|32px|Transversal areas curve tool icon]] : Transversal areas curve tool icon.

&lt;!--T:7--&gt;
[[Image:FreeCAD-Ship-HydrostaticsIco.png‎|32px|Hydrostatics tool icon]] : Hydrostatics tool icon.

==Tutorials== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
[[FreeCAD-Ship s60 tutorial ]]

&lt;!--T:10--&gt;
[[FreeCAD-Ship s60 tutorial (II)]] 

&lt;!--T:11--&gt;
{{Docnav| | }}


&lt;!--T:12--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD API</title>
    <ns>0</ns>
    <id>734</id>
    <revision>
      <id>133200</id>
      <parentid>122955</parentid>
      <timestamp>2014-12-23T20:57:08Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>012yltdjt6b2fgmicgt6qy3dmnscy05</sha1>
      <text xml:space="preserve" bytes="2749">
&lt;!--T:1--&gt;
This is the principal (root) module of FreeCAD. It can also be called by &quot;App&quot; from the FreeCAD interpreter. It contains everything that is needed to manipulate documents and their contents (objects).

&lt;!--T:2--&gt;
Example:

{{Code|code=
import FreeCAD
print FreeCAD.listDocuments()
mydoc = FreeCAD.activeDocument()
}}


       	  		
&lt;!--T:20--&gt;
{{APIFunction|ConfigDump| |Prints a dictionary containing all the FreeCAD configuration environment.| }}
{{APIFunction|ConfigGet|[string]|Returns the value of the given key. If no key is given, the complete configuration is returned|A string.}}
{{APIFunction|ConfigSet|string, string|Set the given key (first string) to the given value (second string).| }}
{{APIFunction|Version| |Prints the FreeCAD version.| }}
{{APIFunction|activeDocument| |Return the active document or None if there is no active document.|A FreeCAD Document.}}
{{APIFunction|addExportType|string, string|Adds a new export file type to FreeCAD. The first string must be formatted like this example: &quot;Word Document (*.doc)&quot;. The second string is the name of a python script/module containing an export() function.| }}
{{APIFunction|addImportType|string, string|Adds a new import file type to FreeCAD, works the same way as addExportType, the handling python module must contain an open() and/or an import() function.| }}
{{APIFunction|closeDocument|Document name|Closes the given document| }}
{{APIFunction|getDocument|Document name|Returns a document or raise an exception if there is no document with the given name.| }}
{{APIFunction|getExportType|string|Returns the name of the module that can export the specified filetype.| A string.}}
{{APIFunction|getImportType|string|Returns the name of the module that can import the specified filetype.|A string.}}
{{APIFunction|listDocuments| |Returns a dictionary of names and object pointers of all documents.|A dictionary of names and object pointers.}}
{{APIFunction|newDocument|[string]|Creates and returns a new document with a given name. The document name must be unique, which is checked automatically. If no name is supplied, the document will be named &quot;Untitled&quot;.|The newly created document.}}
{{APIFunction|open|string|See openDocument| }}
{{APIFunction|openDocument|filepath|Creates and returns a document and load a project file into the document. The string argument must point to an existing file. If the file doesn't exist or the file cannot be loaded an I/O exception is thrown. In this case the created document is kept, but will be empty.|The opened FreeCAD Document.}}
{{APIFunction|setActiveDocument|Document name|Set the active document by its name.| }}

&lt;!--T:19--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Build Tool</title>
    <ns>0</ns>
    <id>50</id>
    <revision>
      <id>114848</id>
      <parentid>114824</parentid>
      <timestamp>2014-10-16T17:32:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7u66bqgavhczk6898mk6zynjztmvigj</sha1>
      <text xml:space="preserve" bytes="2483">
&lt;!--T:1--&gt;
The '''FreeCAD build tool''' or '''fcbt''' is a python script located at

&lt;syntaxhighlight&gt;
 trunc/src/Tools/fcbt.py
&lt;/syntaxhighlight&gt;

&lt;!--T:2--&gt;
It can be used to simplify some frequent tasks in building, distributing and extending FreeCAD.

== Usage == &lt;!--T:3--&gt;
With [[wikipedia:Python (programming language)|Python]] correctly installed, ''fcbt'' can be invoked by the command

&lt;syntaxhighlight&gt;
 python fbct.py
&lt;/syntaxhighlight&gt;

&lt;!--T:4--&gt;
It displays a menu, where you can select the task you want to use it for:

 FreeCAD Build Tool
  Usage:
     fcbt &lt;command name&gt; [command parameter]
  possible commands are:
   - DistSrc         (DS)   Build a source Distr. of the current source tree
   - DistBin         (DB)   Build a binary Distr. of the current source tree
   - DistSetup       (DI)   Build a Setup Distr. of the current source tree
   - DistSetup       (DUI)  Build a User Setup Distr. of the current source tree
   - DistAll         (DA)   Run all three above modules
   - NextBuildNumber (NBN)  Increase the Build Number of this Version
   - CreateModule    (CM)   Insert a new FreeCAD Module in the module directory
 
  For help on the modules type:
    fcbt &lt;command name&gt; ?

&lt;!--T:5--&gt;
At the input promt enter the abbreviated command you want to call. For example type &quot;CM&quot; for [[Module Creation|creating a module]].

=== DistSrc === &lt;!--T:6--&gt;
The command &quot;DS&quot; [[Create Source Distribution|creates a source distribution]] of the current source tree.

=== DistBin === &lt;!--T:7--&gt;
The command &quot;DB&quot; [[Create Binary Distibution|creates a binary distribution]] of the current source tree.

=== DistSetup === &lt;!--T:8--&gt;
The command &quot;DI&quot; [[Create Setup Distribution|creates a setup distribution]] of the current source tree.

=== DistSetup === &lt;!--T:9--&gt;
The command &quot;DUI&quot; [[Create User Setup Distribution|creates a user setup distribution]] of the current source tree.

=== DistAll === &lt;!--T:10--&gt;
The command &quot;DA&quot; executes &quot;DS&quot;, &quot;DB&quot; and &quot;DI&quot; in sequence.

=== NextBuildNumber === &lt;!--T:11--&gt;
The &quot;NBN&quot; command [[Increment Build Number|increments the build number]] to create a new release version of FreeCAD.

=== CreateModule === &lt;!--T:12--&gt;
The &quot;CM&quot; command [[Module Creation|creates a new application module]].

&lt;!--T:13--&gt;
{{Docnav|Start up and Configuration|Module Creation}}

&lt;!--T:14--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Community Portal</title>
    <ns>0</ns>
    <id>48761</id>
    <revision>
      <id>125003</id>
      <timestamp>2014-11-24T20:58:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>replaces Free-cad:Community Portal</comment>
      <sha1>idgqjwxdqdussymrmrot0bc61py0y7x</sha1>
      <text xml:space="preserve" bytes="5068">
&lt;!--T:1--&gt;
This is the place to put all kind of FreeCAD-related stuff! If you work on something FreeCAD-related, please include it here!

== Places where FreeCAD appears on the net == &lt;!--T:2--&gt;
* [http://en.wikipedia.org/wiki/FreeCAD_(software) Wikipedia]
* [http://linux.softpedia.com/get/Multimedia/Graphics/FreeCAD-31097.shtml Softpedia]
* [http://directory.fsf.org/project/freecad/ Free Software Foundation]
* [http://linuxappfinder.com/package/freecad Linux Appfinder]
* [http://superdownloads.uol.com.br/download/168/freecad-linux/ Superdownloads (Brasil)]
* [http://www.programaslivres.net/2009/02/01/freecad/ Programas livres]
* [http://freshmeat.net/projects/freecad/ Freshmeat]
* [http://www.freshports.org/cad/freecad/ Freshports]
* [http://packman.links2linux.de/package/2776 Packman]
* [http://dev.forums.reprap.org/read.php?12,28611,28611 RepRap]
* [http://www.opennovation.org/ubuntu/ Opennovation Repository]

== FreeCAD-related projects == &lt;!--T:3--&gt;
* [http://yorik.orgfree.com/scripts/FreeCAD-repository.html FreeCAD repository] and [http://yorik.orgfree.com/scripts/FreeCAD-draft.html Draft module roadmap] on [http://yorik.orgfree.com Yorik]'s site. Yorik is working on the Draft module.
* [http://ja.orgfree.com/freecad.htm FreeCAD development page] on [http://ja.orgfree.com/ Jacques-Antoine]'s site. Jacques-Antoine is working on a new Fold module.
* [http://gitorious.org/freecad-ship FreeCAD Ship Design Module] by Jose Luis Cercós Pita
* [http://www.yanatchkov.com/dokuwiki/doku.php?id=projects:blender:freecad Blender:FreeCAD project] on [http://www.yanatchkov.com/web/index.php Milovann]'s site
* [http://www.pythonocc.org pythonOCC] is a python binding collection for openCasCade, the 3D modeling kernel used by FreeCAD. With pythonOCC, the full power of OpenCasCade can be accessed and used from within FreeCAD.
* [[David]] is a very low cost 3D scanning system that can work with FreeCAD
* [http://yorik.orgfree.com/guestblog.php?2009=40 Architecture workflow] : An example of how FreeCAD can begin to have its preliminary place in an architecture workflow...

== Scripting, math, vectors, 3d resource &amp; tutorials == &lt;!--T:4--&gt;
* Yorik's [http://delicious.com/yorik.vanhavre/freecad FreeCAD-related] bookmarks
* http://www.sloan-home.co.uk/FreeCAD/Info/Info.html  a user-friendly &quot;Info&quot; module. See http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4036

== Publicity == &lt;!--T:8--&gt; 

&lt;!--T:9--&gt;
(From [[Release_process|Release process]])

&lt;!--T:10--&gt;
This is a raw list of sites and blogs that have at some point mentioned FreeCAD. It is mostly harvested from http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=143 (until June 29th 2014).

&lt;!--T:11--&gt;
Feel free to add more pages or assign one or more pages to yourself to take care of notifying them about a new release of FreeCAD.

=== Social networks === &lt;!--T:12--&gt;


* http://plus.google.com/107660967460246172334/posts
* [[User:Yorik|yorik]] - http://www.facebook.com/FreeCAD (also updates http://twitter.com/FreeCADNews automatically)

=== News Sites === &lt;!--T:13--&gt; 


* http://makezine.com/
* http://www.webupd8.org/
* http://libregraphicsworld.org/
* http://www.techrepublic.com/
* http://www.linuxjournal.com/
* http://www.reddit.com/r/freecad (or http://www.reddit.com/r/cad/)
* http://hackaday.com/contact-hack-a-day/
* http://www.linuxformat.com/
* http://www.inside3dp.com/
* http://diy3dprinting.blogspot.com/

=== Other Sites === &lt;!--T:14--&gt;


* http://www.bld3r.com/
* http://forum.lulzbot.com/viewforum.php?f=30
* http://cad.about.com/
* http://en.wikipedia.org/wiki/FreeCAD
* http://forum.diigiit.com/

=== Spanish === &lt;!--T:15--&gt; 


* http://www.taringa.net/

=== Blogs === &lt;!--T:16--&gt;


* http://www.junauza.com/
* http://www.blender3darchitect.com/
* http://linuxaideddesign.blogspot.de/
* http://www.techdrivein.com/
* http://sliptonic.com/
* http://opensourcedesigntools.blogspot.de/
* [[User:Yorik|yorik]] - http://yorik.uncreated.net

=== French === &lt;!--T:17--&gt;


* http://www.linuxgraphic.org/
* http://betlibre.wood3dservices.fr/

=== Portugese === &lt;!--T:18--&gt;


* http://www.geosaber.com.br/ (not sure how appropriate/relevant)

=== Spanish === &lt;!--T:19--&gt;


* http://www.iearobotics.com/blog/

=== Italian === &lt;!--T:20--&gt; 


* http://ingegnerialibera.altervista.org/blog/doku.php

=== Polish === &lt;!--T:21--&gt;


* http://www.ubucentrum.net
* http://wkupiesila.blogspot.com
* http://cadblog.pl
* http://jakilinux.org/


=== Chinese === &lt;!--T:22--&gt;


* http://www.lirui.name/post/208.html


== Other resources == &lt;!--T:7--&gt;
* [[Interesting_links|Interesting links]] contains some maybe useful links to other FLOSS resources and project in this area.

== You too! == &lt;!--T:5--&gt;
* See what you can do to [[Help FreeCAD]]...

&lt;!--T:6--&gt;
[[Category:Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Hakkında</title>
    <ns>0</ns>
    <id>1656</id>
    <revision>
      <id>107975</id>
      <parentid>89218</parentid>
      <timestamp>2014-09-01T12:16:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Howto Import Export</title>
    <ns>0</ns>
    <id>47746</id>
    <revision>
      <id>132600</id>
      <parentid>127418</parentid>
      <timestamp>2014-12-20T09:44:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>link to Dxf_Importer_Install</comment>
      <sha1>gxx5j3ujpjng4mbr9irqo6cqz1rk2o1</sha1>
      <text xml:space="preserve" bytes="5628">&lt;!--T:1--&gt;
{{VeryImportantMessage|'''This page is WIP. Please do not translate yet. Thank you. R-Frank'''}}
&lt;!--T:2--&gt;
This page attempts to answer the most common questions asked on the FreeCAD forums on import and export of data to/from other programs. If you have a problem or question regarding FreeCAD, check below first.

Then, if you cannot find an answer for your specific question, head to the FreeCAD [http://forum.freecadweb.org/ forum]!

== Import 2D/3D Data ==&lt;!--T:3--&gt;

=== Autodesk DWG ===&lt;!--T:4--&gt;
Please refer to the Page [[FreeCAD and DWG Import|FreeCAD and DWG-Import]]

=== Autodesk DXF ===&lt;!--T:5--&gt;
Please refer to the Page [[FreeCAD and DXF Import|FreeCAD and DXF Import]]

Tutorial: [[Dxf_Importer_Install|DXF Importer Install]]

=== BREP Format ===&lt;!--T:6--&gt;
Todo

=== Calculix Result  ===&lt;!--T:7--&gt;
Todo

=== Collada  ===&lt;!--T:8--&gt;
Importing Collada files requires an external Python module to be installed on your system. This can be easily added by following the directions found on the [[Extra python modules|Extra python modules]] page under [http://www.freecadweb.org/wiki/index.php?title=Extra_python_modules#pyCollada pyCollada] in this Wiki. Once the pyCollada Python module is installed, importing Collada files is the same as any standard file import.

See also: [[Importing From Sketchup|Importing From Sketchup]]

=== Common Airfoil Data  ===&lt;!--T:9--&gt;
Please refer to the Page [[Common Airfoil Data Import|Common Airfoil Data Import]]

=== Drawing ===&lt;!--T:10--&gt;
Todo

=== FEM Formats ===&lt;!--T:11--&gt;
Todo

=== FreeCAD Material Cards ===&lt;!--T:12--&gt;
Is intended to import Material Cards for use in FreeCAD itself and in the [[Fem Workbench|FEM-Workbench]].

'''Not functional at the moment.'''

=== IDF emn file ===&lt;!--T:13--&gt;
Todo

=== IGES ===&lt;!--T:14--&gt;
Currently there is no support for text or annotation import with the IGES format due to lack of support with FreeCAD's geometric CAD kernel.

=== Image Formats ===&lt;!--T:15--&gt;
Todo

=== Industry Foundation Classes ===&lt;!--T:16--&gt;
Todo

=== Inventor V2.1 ===&lt;!--T:17--&gt;
Todo

=== Mesh Formats ===&lt;!--T:18--&gt;
Please refer to the Page [[FreeCAD and Mesh Import|FreeCAD and Mesh Import]]

=== Open CAD Format ===&lt;!--T:19--&gt;
Todo

=== OpenSCAD CSG Format ===&lt;!--T:20--&gt;
Todo

=== OpenSCAD Format ===&lt;!--T:21--&gt;
Todo

=== Point Formats  ===&lt;!--T:22--&gt;
Todo

=== POVRay Format  ===&lt;!--T:23--&gt;
Todo

=== Python ===&lt;!--T:24--&gt;
Todo

=== Step with Colors  ===&lt;!--T:25--&gt;
Currently there is no support for text or annotation import with the STEP format due to lack of support with FreeCAD's geometric CAD kernel.

=== SVG as geometry  ===&lt;!--T:26--&gt;
Todo

=== Spreadsheet  ===&lt;!--T:27--&gt;
Todo

=== VRML 2.0  ===&lt;!--T:28--&gt;
Todo

== Export 2D/3D Data ==&lt;!--T:29--&gt;

=== 3D View (SVG)  ===&lt;!--T:30--&gt;
Todo

=== Autodesk DWG  ===&lt;!--T:31--&gt;
Todo

=== Autodesk DXF  ===&lt;!--T:32--&gt;
Todo

=== BREP Format  ===&lt;!--T:33--&gt;
Todo

=== Collada  ===&lt;!--T:34--&gt;
Todo

=== Drawing ===&lt;!--T:35--&gt;
Todo

=== FEM Formats  ===&lt;!--T:36--&gt;
Todo

=== Flattened SVG ===&lt;!--T:37--&gt;
Todo

=== IGES Format  ===&lt;!--T:38--&gt;
* From the 3D-View simply select (in the tree-view) the solid(s) to export and select &quot;File -&gt; Export&quot;.
* Then select your file type (IGES). No need to type in the file extension. FreeCAD will append a &quot;.iges&quot; automatically
'''Tip'''&lt;br /&gt;
Pressing CTRL-A will select ALL solids in the tree view, even the invisible ones.&lt;br /&gt;
Make sure to manually select all the solids you want to export.&lt;br /&gt;
&lt;br /&gt;
Currently there is no support for text or annotation export with the IGES format due to lack of support with FreeCAD's geometric CAD kernel.

=== Industry Foundation Classes ===&lt;!--T:39--&gt;
Todo

=== Inventor V2.1 ===&lt;!--T:40--&gt;
Todo

=== Mesh Formats ===&lt;!--T:41--&gt;
* From the 3D-View simply select (in the tree-view) the solid(s) to export and select &quot;File -&gt; Export&quot;.
* Then select your file type. Be sure to type in also the file extension. Since these formats are mesh formats, the solids will be exported with a &quot;standard&quot; mesh quality.
* Use the [[Mesh Module]] to adjust the quality of the mesh if needed.
'''Tip'''&lt;br /&gt;
Pressing CTRL-A will select ALL solids in the tree view, even the invisible ones.&lt;br /&gt;
Make sure to manually select all the solids you want to export.&lt;br /&gt;

=== Open CAD Format ===&lt;!--T:42--&gt;
Todo

=== OpenSCAD CSG Format ===&lt;!--T:43--&gt;
Todo

=== OpenSCAD Format ===&lt;!--T:44--&gt;
Todo

=== Portable Document Format ===&lt;!--T:45--&gt;
Todo

=== Step with Colors ===&lt;!--T:40--&gt;
From the 3D-View simply select (in the tree-view) the solid(s) to export and select &quot;File -&gt; Export&quot;.

In FreeCAD 0.15 and above, by selecting &quot;Edit -&gt; Preferences&quot; and then &quot;Import-Export&quot; in the left column you should have access to Step-Options such as units, scheme and Header Information. Be aware that Step AP203 does not support assembly structures, while Step AP 214 does.

Currently there is no support for text or annotation export with the STEP format due to lack of support with FreeCAD's geometric CAD kernel.

=== Spreadsheet ===&lt;!--T:41--&gt;
Todo

=== TetGen File ===&lt;!--T:42--&gt;
Todo

=== VRML 2.0 ===&lt;!--T:43--&gt;
Todo

=== Wavefront OBJ - Arch Module ===&lt;!--T:44--&gt;
Todo

=== WebGL File ===&lt;!--T:45--&gt;
Todo

== Export Data from third-party programs for import into FreeCAD ==&lt;!--T:46&gt;

&lt;!--T:47--&gt;
Tips and Tricks with using Third-Party Software

=== Inkscape ===&lt;!--T:48--&gt;
When exporting SVG-Data from Inkscape to FreeCAD be sure to use the file type &quot;plain svg&quot;.

=== Sketchup ===&lt;!--T:49--&gt;
Please refer to the Page [[Importing From Sketchup|Importing From Sketchup]]


[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Scripting Basics</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>117331</id>
      <parentid>117330</parentid>
      <timestamp>2014-11-03T20:49:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ltyk2kjcg6qtyqmartp8nr5vhnb3v29</sha1>
      <text xml:space="preserve" bytes="12912">
== Python scripting in FreeCAD == &lt;!--T:1--&gt;
FreeCAD is built from scratch to be totally controlled by Python scripts. Almost all parts of FreeCAD, such as the interface, the scene contents, and even the representation of this content in the 3D views, are accessible from the built-in Python interpreter or from your own scripts. As a result, FreeCAD is probably one of the most deeply customizable engineering applications available today.

&lt;!--T:2--&gt;
In its current state however, FreeCAD has very few 'native' commands to interact with your 3D objects, mainly because it is still in the early stages of development, but also because the philosophy behind it is more to provide a platform for CAD development than a specific use application. But the ease of Python scripting inside FreeCAD is a quick way to see new functionality being developed by 'power users', typically users who know a bit of Python programming.  Python is one of the most popular interpreted languages, and because it is generally regarded as easy to learn, you too can soon be making your own FreeCAD 'power user' scripts.

&lt;!--T:3--&gt;
If you are not familiar with Python, we recommend you search for tutorials on the internet and have a quick look at its structure. Python is a very easy language to learn, especially because it can be run inside an interpreter, where simple commands, right up to complete programs, can be executed on the fly without the need to compile anything. FreeCAD has a built-in Python interpreter. If you don't see the window labeled 'Python console' as shown below, you can activate it under the View -&gt; Views -&gt; Python console to bring-up the interpreter.

===The interpreter=== &lt;!--T:4--&gt;
From the interpreter, you can access all your system-installed Python modules, as well as the built-in FreeCAD modules, and all additional FreeCAD modules you installed later. The screenshot below shows the Python interpreter:

&lt;!--T:5--&gt;
[[Image:screenshot_pythoninterpreter.jpg|The FreeCAD Python interpreter]]

&lt;!--T:6--&gt;
From the interpreter, you can execute Python code and browse through the available classes and functions. FreeCAD provides a very handy class browser for exploration of your new FreeCAD world: When you type the name of a known class followed by a period (meaning you want to add something from that class), a class browser window opens, where you can navigate between available subclasses and methods. When you select something, an associated help text (if it exists) is displayed:

&lt;!--T:7--&gt;
[[Image:screenshot_classbrowser.jpg|The FreeCAD class browser]]

&lt;!--T:8--&gt;
So, start here by typing '''App.''' or '''Gui.''' and see what happens. Another more generic Python way of exploring the content of modules and classes is to use the 'print dir()' command. For example, typing '''print dir()''' will list all modules currently loaded in FreeCAD. '''print dir(App)''' will show you everything inside the App module, etc.

&lt;!--T:9--&gt;
Another useful feature of the interpreter is the possibility to go back through the command history and retrieve a line of code that you already typed earlier. To navigate through the command history, just use CTRL+UP or CTRL+DOWN.

&lt;!--T:10--&gt;
By right-clicking in the interpreter window, you also have several other options, such as copy the entire history (useful when you want to experiment with things before making a full script of them), or insert a filename with complete path.

===Python Help=== &lt;!--T:11--&gt;
In the FreeCAD Help menu, you'll find an entry labeled 'Python help', which will open a browser window containing a complete, realtime-generated documentation of all Python modules available to the FreeCAD interpreter, including Python and FreeCAD built-in modules, system-installed modules, and FreeCAD additional modules. The documentation available there depends on how much effort each module developer put into documenting his code, but usually Python modules have a reputation for being fairly well documented. Your FreeCAD window must stay open for this documentation system to work.

==Built-in modules== &lt;!--T:12--&gt;
Since FreeCAD is designed to be run without a Graphical User Interface (GUI), almost all its functionality is separated into two groups: Core functionality, named 'App', and GUI functionality, named 'Gui'. So, our two main FreeCAD built-in modules are called App and Gui. These two modules can also be accessed from scripts outside of the interpreter, by the names 'FreeCAD' and 'FreeCADGui' respectively.

&lt;!--T:13--&gt;
* In the '''App module''', you'll find everything related to the application itself, like methods for opening or closing files, and to the documents, like  setting the active document or listing their contents.

&lt;!--T:14--&gt;
* In the '''Gui module''', you'll find tools for accessing and managing Gui elements, like the workbenches and their toolbars, and, more interestingly, the graphical representation of all FreeCAD content. 

&lt;!--T:15--&gt;
Listing all the content of those modules is a bit counter-productive task, since they grow quite fast with FreeCAD development. But the two browsing tools provided (the class browser and the Python help) should give you, at any moment, complete and up-to-date documentation of these modules.

===The App and Gui objects=== &lt;!--T:16--&gt;
As we said, in FreeCAD, everything is separated between core and representation. This includes the 3D objects too. You can access defining properties of objects (called features in FreeCAD) via the App module, and change the way they are represented on screen via the Gui module. For example, a cube has properties that define it, (like width, length, height) that are stored in an App object, and representation properties, (like faces color, drawing mode) that are stored in a corresponding Gui object.

&lt;!--T:17--&gt;
This way of doing things allows a very wide range of uses, like having algorithms work only on the definition part of features, without the need to care about any visual part, or even redirect the content of the document to non-graphical application, such as lists, spreadsheets, or element analysis.

&lt;!--T:18--&gt;
For every App object in your document, there exists a corresponding Gui object. Infact the document itself has both App and a Gui objects. This, of course, is only valid when you run FreeCAD with its full interface. In the command-line version no GUI exists, so only App objects are availible. Note that the Gui part of objects is re-generated every time an App object is marked as 'to be recomputed' (for example when one of its parameters changes), so changes you might have made directly to the Gui object may be lost.

&lt;!--T:19--&gt;
To access the App part of something, you type:

&lt;syntaxhighlight&gt;
 myObject = App.ActiveDocument.getObject(&quot;ObjectName&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
where &quot;ObjectName&quot; is the name of your object. You can also type:

&lt;syntaxhighlight&gt;
 myObject = App.ActiveDocument.ObjectName
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
To access the Gui part of the same object, you type:

&lt;syntaxhighlight&gt;
 myViewObject = Gui.ActiveDocument.getObject(&quot;ObjectName&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:22--&gt;
where &quot;ObjectName&quot; is the name of your object. You can also type:

&lt;syntaxhighlight&gt;
 myViewObject = App.ActiveDocument.ObjectName.ViewObject
&lt;/syntaxhighlight&gt;

&lt;!--T:23--&gt;
If we have no GUI (for example we are in command-line mode), the last line will return 'None'.

=== The Document objects === &lt;!--T:24--&gt;
In FreeCAD all your work resides inside Documents. A document contains your geometry and can be saved to a file. Several documents can be opened at the same time. The document, like the geometry contained inside, has App and Gui objects. App object contains your actual geometry definitions, while the Gui object contains the different views of your document. You can open several windows, each one viewing your work with a different zoom factor or point of view. These views are all part of your document's Gui object.

&lt;!--T:25--&gt;
To access the App part the currently open (active) document, you type:

&lt;syntaxhighlight&gt;
 myDocument = App.ActiveDocument
&lt;/syntaxhighlight&gt;

&lt;!--T:26--&gt;
To create a new document, type:

&lt;syntaxhighlight&gt;
 myDocument = App.newDocument(&quot;Document Name&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:27--&gt;
To access the Gui part the currently open (active) document, you type:

&lt;syntaxhighlight&gt;
 myGuiDocument = Gui.ActiveDocument
&lt;/syntaxhighlight&gt;

&lt;!--T:28--&gt;
To access the current view, you type:

&lt;syntaxhighlight&gt;
 myView = Gui.ActiveDocument.ActiveView
&lt;/syntaxhighlight&gt;

== Using additional modules == &lt;!--T:29--&gt;
The FreeCAD and FreeCADGui modules are solely responsibles for creating and managing objects in the FreeCAD document. They don't actually do anything such as creating or modifying geometry. That is because that geometry can be of several types, and so it is managed by additional modules, each responsible for managing a certain geometry type. For example, the [[Part Module]] uses the OpenCascade kernel, and therefore is able to create and manipulate [http://en.wikipedia.org/wiki/Boundary_representation B-rep] type geometry, which is what OpenCascade is built for. The [[Mesh Module]] is able to build and modify mesh objects. That way, FreeCAD is able to handle a wide variety of object types, that can all coexist in the same document, and new types could be added easily in the future.

=== Creating objects === &lt;!--T:30--&gt;
Each module has its own way to treat its geometry, but one thing they usually all can do is create objects in the document. But the FreeCAD document is also aware of the available object types provided by the modules:

&lt;syntaxhighlight&gt;
 FreeCAD.ActiveDocument.supportedTypes()
&lt;/syntaxhighlight&gt;

&lt;!--T:31--&gt;
will list you all the possible objects you can create. For example, let's create a mesh (treated by the mesh module) and a part (treated by the part module):

&lt;syntaxhighlight&gt;
 myMesh = FreeCAD.ActiveDocument.addObject(&quot;Mesh::Feature&quot;,&quot;myMeshName&quot;)
 myPart = FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,&quot;myPartName&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:32--&gt;
The first argument is the object type, the second the name of the object. Our two objects look almost the same: They don't contain any geometry yet, and most of their properties are the same when you inspect them with dir(myMesh) and dir(myPart). Except for one, myMesh has a &quot;Mesh&quot; property and &quot;Part&quot; has a &quot;Shape&quot; property. That is where the Mesh and Part data are stored. For example, let's create a Part cube and store it in our myPart object:

&lt;syntaxhighlight&gt;
 import Part
 cube = Part.makeBox(2,2,2)
 myPart.Shape = cube
&lt;/syntaxhighlight&gt;

&lt;!--T:33--&gt;
You could try storing the cube inside the Mesh property of the myMesh object, it will return an error complaining of the wrong type. That is because those properties are made to store only a certain type. In the myMesh's Mesh property, you can only save stuff created with the Mesh module. Note that most modules also have a shortcut to add their geometry to the document:

&lt;syntaxhighlight&gt;
 import Part
 cube = Part.makeBox(2,2,2)
 Part.show(cube)
&lt;/syntaxhighlight&gt;

=== Modifying objects === &lt;!--T:34--&gt;
Modifying an object is done the same way:

&lt;syntaxhighlight&gt;
 import Part
 cube = Part.makeBox(2,2,2)
 myPart.Shape = cube
&lt;/syntaxhighlight&gt;

&lt;!--T:35--&gt;
Now let's change the shape by a bigger one:

&lt;syntaxhighlight&gt;
 biggercube = Part.makeBox(5,5,5)
 myPart.Shape = biggercube
&lt;/syntaxhighlight&gt;

=== Querying objects === &lt;!--T:36--&gt;
You can always look at the type of an object like this:

&lt;syntaxhighlight&gt;
 myObj = FreeCAD.ActiveDocument.getObject(&quot;myObjectName&quot;)
 print myObj.Type
&lt;/syntaxhighlight&gt;

&lt;!--T:37--&gt;
or know if an object is derived from one of the basic ones (Part Feature, Mesh Feature, etc):

&lt;syntaxhighlight&gt;
  print myObj.isDerivedFrom(&quot;Part::Feature&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:38--&gt;
Now you can really start playing with FreeCAD! To look at what you can do with the [[Part Module]], read the [[Topological data scripting|Part scripting]] page, or the [[Mesh Scripting]] page for working with the [[Mesh Module]]. Note that, although the Part and Mesh modules are the most complete and widely used, other modules such as the [[Draft Module]] also have [[Draft API|scripting]] APIs that can be useful to you. For a complete list of each modules and their available tools, visit the [[:Category:API]] section.

&lt;!--T:39--&gt;
{{docnav|Python scripting tutorial|Mesh Scripting}}

&lt;!--T:40--&gt;
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD Skripting Grundkenntnisse</title>
    <ns>0</ns>
    <id>2261</id>
    <revision>
      <id>107976</id>
      <parentid>95790</parentid>
      <timestamp>2014-09-01T12:17:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD and DWG Import</title>
    <ns>0</ns>
    <id>46597</id>
    <revision>
      <id>125120</id>
      <parentid>124710</parentid>
      <timestamp>2014-11-25T20:44:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>div2frdxldjseafyqj461eoxtudbchf</sha1>
      <text xml:space="preserve" bytes="3950">
== Why Can't I Import DWG Files into FreeCAD? == &lt;!--T:1--&gt;
The DWG format is a closed source binary file format that is not directly supported by FreeCAD. It requires an external 3rd party file converter to first convert then import the conversion into FreeCAD for use.

== What Do I Need To Be Able To Import DWG Files? == &lt;!--T:2--&gt;

===Teigha Converter=== &lt;!--T:3--&gt;
* homepage: http://www.opendesign.com/guestfiles/TeighaFileConverter
* license: freeware
* optional, used to enable import and export of DWG files

&lt;!--T:4--&gt;
The Teigha Converter is a small freely available utility that allows to convert between several versions of DWG and DXF files. FreeCAD can use it to offer DWG import and export, by converting DWG files to the DXF format under the hood,then using its standard DXF importer to import the file contents. The restrictions of the [[Draft_DXF|DXF importer]] apply.

====Installation==== &lt;!--T:5--&gt;
On all platforms, only by installing the appropriate package from http://www.opendesign.com/guestfiles/TeighaFileConverter . After installation, if the utility is not found automatically by FreeCAD, you might need to set the path to the converter executable manually, in the menu Edit -&gt; Preferences -&gt; Draft -&gt; Import/Export options.

====Usage==== &lt;!--T:14--&gt;
The program may  be used with the command line interface or the graphical interface.
Be sure to convert the dwg-files to an ASCII-Format.

&lt;!--T:15--&gt;
Command Line Format is:
# Quoted Input Folder
# Quoted Output Folder
# Output_version {&quot;ACAD9&quot;,&quot;ACAD10&quot;,&quot;ACAD12&quot;, &quot;ACAD13&quot;,&quot;ACAD14&quot;, &quot;ACAD2000&quot;,&quot;ACAD2004&quot;, &quot;ACAD2007&quot;,&quot;ACAD2010&quot;}
# Output File type {&quot;DWG&quot;,&quot;DXF&quot;,&quot;DXB&quot;}
# Recurse Input Folder {&quot;0&quot;,&quot;1&quot;}
# Audit each file {&quot;0&quot;,&quot;1&quot;}
# [optional] Input file filter (default:&quot;*.DWG;*.DXF&quot;)

&lt;!--T:16--&gt;
'''Example for Linux'''&lt;br /&gt;
TeighaFileConverter &quot;/home/dwg-data&quot; &quot;/home/dxf-data&quot; &quot;ACAD2010&quot; &quot;DXF&quot; &quot;0&quot; &quot;1&quot; &quot;test.dwg&quot;
The second number (audit) needs to be 1 otherwise it fails 

&lt;!--T:17--&gt;
'''Example for Windows'''&lt;br /&gt;
&quot;C:\Program Files\ODA\Teigha File Converter 3.08.2\TeighaFileConverter.exe&quot; &quot;Path-To-Input-Directory&quot; &quot;Path-To-Output-Directory&quot; &quot;ACAD2010&quot; &quot;DXF&quot; &quot;0&quot; &quot;1&quot; &quot;Name-Of-A-Test-File.dwg&quot;

== What Are The Alternatives? == &lt;!--T:6--&gt;

===DraftSight=== &lt;!--T:7--&gt;
There is a free commercial program called Draft Sight (http://www.3ds.com/products-services/draftsight/overview/) that can import most DWG files and can save and export in formats that are friendly to FreeCAD.
Draftsight runs on
* Windows 32 bit
* Windows 64 bit
* Mac OS X
* Linux Fedora
* Linux Ubuntu
A free registration is required for activation of the program.

===DoubleCAD XT=== &lt;!--T:13--&gt;
There is also DoubleCAD XT (http://www.doublecad.com/DoubleCAD/DoubleCAD-XT-v5) .
The program is free for personal and commercial use.
It requires a free sign-up to receive an activation code via E-Mail.
This Program is windows-only.

===Export Your AutoCAD files in Friendly Format=== &lt;!--T:8--&gt;
Exporting your AutoCAD files in a more FreeCAD friendly format, like DXF R12 or R14, SVG, and if version supports it, IGES. All are better alternatives to the DWG format when using FreeCAD. 

&lt;!--T:9--&gt;
It is important to know that, contrarily to popular belief, there is no difference between the contents of a file saved in DWG or DXF formats, provided it is the same version (ex. DWG 2014 vs. DXF 2014). Both formats are maintained by Autodesk, and they both support exactly the same features. The difference is that DWG is closed (machine-encoded) while DXF is open.

==What Can I Do To Help? == &lt;!--T:10--&gt;

===Promote the use of alternative formats=== &lt;!--T:11--&gt;
Simply put, stop accepting work done in DWG format. In practice, this is often easier said than done. Still, it would not be bad practice for users and supporters of FreeCAD to avoid and reject the DWG format whenever possible.


&lt;!--T:12--&gt;
[[Category:User Documentation]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD and DXF Import</title>
    <ns>0</ns>
    <id>47779</id>
    <revision>
      <id>133445</id>
      <parentid>133444</parentid>
      <timestamp>2014-12-25T21:57:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2jkk8r00easybkm3vd66aa52qp1kh7a</sha1>
      <text xml:space="preserve" bytes="2221">
== Legal Notice == &lt;!--T:1--&gt;
To be able to import DXF-Files you have to manually install several files. Why this? These libraries are published with another license than FreeCAD, so the developers of FreeCAD would not have them being bundled with the FreeCAD-Application.

== How to install == &lt;!--T:2--&gt;
To install Draft-dxf-importer:
# Go to [https://github.com/yorikvanhavre/Draft-dxf-importer Yorik's Github account] and download these files (on the right side you can choose &quot;download as ZIP&quot;).
# Put the files in your macro folder.
* In Ubuntu, this is normally 
 /home/your_user_name/.FreeCAD 
The directory is hidden. You may need to unhide it to make it visible.
* In Windows, your (standard) macro directory is 
 C:\Users\your_user_name\AppData\Roaming\FreeCAD

&lt;!--T:6--&gt;
If you are unsure of where your macro-directory is, 
# open FreeCAD and go to &quot;Edit &gt; Preferences&quot;,
# select &quot;General&quot; in the left column and select category &quot;Macro&quot; on the top right corner of the preferences-window. There sould be a field named &quot;Macro Path&quot;.

&lt;!--T:8--&gt;
Tutorial: [[Dxf_Importer_Install|Dxf Importer Install]]

== Setting Options == &lt;!--T:3--&gt;
You can set several import options for DWG/DXF. Depending on your version you have to use a different method.
* '''FreeCAD 0.14 and older'''
# Open FreeCAD.
# Switch to the Draft Workbench. (Otherwise you won't see the options)
# Go to &quot;Edit &gt; Preferences&quot; and select &quot;Draft&quot; in the left column.
# Select &quot;DXF / DWG-Options&quot; in the top right corner of the preferences-window.
* '''FreeCAD 0.15 and above'''
# Open FreeCAD.
# Switch to the Draft Workbench. (Otherwise you won't see the options)
# Go to &quot;Edit &gt; Preferences&quot;.
# Now you shoould see an icon labeled &quot;Import-Export&quot; in the left column. Select that.

== Tips and Tricks == &lt;!--T:4--&gt;
Sometimes DXF Files don't seem to import although they open up in 2D-DXF-CAD-Programs. In this case untick the option &quot;join geometry&quot; and try again. Often this solves the problem.
But remember that maybe now you won't have coincident end-of-line-points. You will have to make them coincident yourself.

&lt;!--T:7--&gt;
Good luck on importing.

&lt;!--T:5--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD and Mesh Import</title>
    <ns>0</ns>
    <id>48157</id>
    <revision>
      <id>124472</id>
      <parentid>123836</parentid>
      <timestamp>2014-11-19T22:17:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>nadbyyr4eq6cuqeuf3zo3hndxl9pk9k</sha1>
      <text xml:space="preserve" bytes="1516">
== Operations after Import == &lt;!--T:1--&gt;
After import the model is (for FreeCAD) just an assembly of faces. You might want to convert the model into a shape FreeCAD can recognize and that could be altered in FreeCAD.

&lt;!--T:5--&gt;
To do this:
* Switch to the Part workbench
* Select the mesh, and go to the Part menu --&gt; Create shape from mesh
* Click OK to the dialog
* Select the newly created shape
* Go to Part --&gt; Convert to solid
* Select the newly created solid
* Go to Part --&gt; Refine shape

&lt;!--T:6--&gt;
The last step is not necessary, but it will clean the solid of most of its residual edges on planar and cylindrical surfaces.

== I get the error message &quot;cannot convert because shape is not a shell&quot; ! What now ? == &lt;!--T:2--&gt;
Well, your shell seems to have errors, maybe it is not closed (has holes). Since the capabilities of the mesh workbench in FreeCAD are a little limited at the moment, you might want to try examining and repairing of your model with third-party software. After doing that, you may try importing and converting of your model again.

== Which programs can I use for examining/repairing of my mesh model ?== &lt;!--T:3--&gt;
* [http://meshlab.sourceforge.net/ Meshlab]
** License: Open Source (GPL V2)
** Runs on Windows 32/64 bit, Linux and Mac OS X

&lt;!--T:7--&gt;
* [http://www.netfabb.com/downloadcenter.php?basic=1 netFabb basic]
** License: Freeware
** Runs on Windows XP/7/8, Linux and Mac OS X

&lt;!--T:4--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD development model</title>
    <ns>0</ns>
    <id>1740</id>
    <revision>
      <id>129917</id>
      <parentid>129916</parentid>
      <timestamp>2014-12-07T17:46:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ftqs82itbceyylupq9zk6hd2uhhq5te</sha1>
      <text xml:space="preserve" bytes="142">
&lt;!--T:1--&gt;
This is the documentation of the FreeCAD development model.

&lt;!--T:2--&gt;
[[Category:Roadmap]]


</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD development model project</title>
    <ns>0</ns>
    <id>1739</id>
    <revision>
      <id>122797</id>
      <parentid>121474</parentid>
      <timestamp>2014-11-15T17:52:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>70afc5qqanu1zljsrbmqecf2o4m9wgx</sha1>
      <text xml:space="preserve" bytes="2711">
&lt;!--T:1--&gt;
This page is toward the transition of the FreeCAD code in a GIT repository and a more capable development model. It follows the rules of the [http://en.wikipedia.org/wiki/GTD#GTD_methodology| Getting things done] process. The projects are collected in the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This project aims to define a new development and governance model for FreeCAD.
We come to point where one SVN repository is hard to govern. Working with patches 
is annoying and complicated for people willing to contribute code. 
To give everyone write access to the SVN repo dangerous. People can
unintentional break something in the base system or force tasty decisions. 

&lt;!--T:3--&gt;
So I look at the Linux development process, which is maybe at the moment 
too big for our shoes, but never the less! Which means Git as distributed 
version control system (DVCS), mailing lists and submaintainers (lieutenants).

== Outcome == &lt;!--T:4--&gt;


== Brainstorming == &lt;!--T:5--&gt;

=== Git === &lt;!--T:6--&gt;
* Using Git as new version control system
* Keeping SVN (at least for while) 
** use it as some kind of release repository to keep the ppa work flows and the nice revision numbers
** restrict SVN writes to Werner, Yorik and Jurgen (official tree)
** all other things, like development, branches, experiments go into Git!
** '''Option:''' switch completely to Git
*** would give some collaterals in version numbering and ppa builds.... 
* give write rights (push) to everyone interested in

=== Development mailing list === &lt;!--T:7--&gt;
The forum has its limitation, I would use the one or more mailing lists to
manage branches and pull requests. That has advantages:
* can work off-line
* use powerful search of the mail client
* no restrictions in attachments and sizes 

=== Clarify responsibilities === &lt;!--T:8--&gt;
We will soon become more and more developers and user will have conflicting feature requests.
We have to have structure and responsibilities to filter and decide such requests and incoming
code.

==== Step ups ==== &lt;!--T:9--&gt;

 &lt;!--T:10--&gt;
Adrian Przekwas:
 Publicity - G+, Youtube,
 Tutorials - http://freecad-tutorial.blogspot.com
 Translation (unsure) - Polish (Wiki, Crowdin)

 &lt;!--T:11--&gt;
Yorik van Havre:
 Software: arch module, draft module, artwork
 Documentation: general wiki organization and design
 Translation: french, dutch, brazilian portuguese
 Publicity: articles on http://yorik.uncreated.net/guestblog.php, G+, facebook

== Organizing == &lt;!--T:12--&gt;
Decided rules and information goes to the [[FreeCAD development model]] document.

== Next actions == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD testen</title>
    <ns>0</ns>
    <id>3825</id>
    <revision>
      <id>107977</id>
      <parentid>95791</parentid>
      <timestamp>2014-09-01T12:17:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>FreeCAD vector math library</title>
    <ns>0</ns>
    <id>52</id>
    <revision>
      <id>126918</id>
      <parentid>126917</parentid>
      <timestamp>2014-11-30T18:17:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tq5mr08xku7zi1s9gspl4ond0h8z9r3</sha1>
      <text xml:space="preserve" bytes="3533">
&lt;!--T:1--&gt;
This is a python file containing a couple of useful functions to manipulate freecad vectors. Just paste the following code in a python file, and import that file in your python script in order to use them. This library is included in the [[Draft Module]] and can be accessed like this from the python interpreter:

 from draftlibs import fcvec

&lt;!--T:2--&gt;
Vectors are the building bricks of almost all 3D geometric operations, so it is useful to know a bit about them to understand how these functions can be useful to you. A couple of good pages to learn the basics of vector math:
* http://en.wikipedia.org/wiki/Vector_space
* http://maths-wiki.wikispaces.com/Vectors
* http://darksleep.com/player/opengl_coordinate_system_and_matrix_math.html

&lt;pre&gt;
 &quot;Vector math library for FreeCAD&quot;

 import math,FreeCAD
 
 def add(first, other):
 	&quot;add(Vector,Vector) - adds two vectors&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return FreeCAD.Vector(first.x+other.x, first.y+other.y, first.z+other.z)
 
 def sub(first, other): 
 	&quot;sub(Vector,Vector) - subtracts second vector from first one&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return FreeCAD.Vector(first.x-other.x, first.y-other.y, first.z-other.z)
 
 def scale(first,scalar):
 	&quot;scale(Vector,Float) - scales (multiplies) a vector by a factor&quot;
 	if isinstance(first,FreeCAD.Vector):
 		return FreeCAD.Vector(first.x*scalar, first.y*scalar, first.z*scalar)
 
 def length(first):
 	&quot;lengh(Vector) - gives vector length&quot;
 	if isinstance(first,FreeCAD.Vector):
 		return math.sqrt(first.x*first.x + first.y*first.y + first.z*first.z)
 
 def dist(first, other):
 	&quot;dist(Vector,Vector) - returns the distance between both points/vectors&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return length(sub(first,other))
 
 def normalized(first):
 	&quot;normalized(Vector) - returns a unit vector&quot;
 	if isinstance(first,FreeCAD.Vector):
 		l=length(first)
 		return FreeCAD.Vector(first.x/l, first.y/l, first.z/l)
 
 def dotproduct(first, other):
 	&quot;dotproduct(Vector,Vector) - returns the dot product of both vectors&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return (first.x*other.x + first.y*other.y + first.z*other.z)
 
 def crossproduct(first, other=FreeCAD.Vector(0,0,1)):
 	&quot;crossproduct(Vector,Vector) - returns the cross product of both vectors. 
 	If only one is specified, cross product is made with vertical axis, thus returning its perpendicular in XY plane&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return FreeCAD.Vector(first.y*other.z - first.z*other.y, first.z*other.x - first.x*other.z, first.x*other.y - first.y*other.x)
 
 def angle(first, other=FreeCAD.Vector(1,0,0)):
 	&quot;angle(Vector,Vector) - returns the angle in radians between the two vectors. 
 	If only one is given, angle is between the vector and the horizontal East direction&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return math.acos(dotproduct(normalized(first),normalized(other)))
 
 def project(first, other):
 	&quot;project(Vector,Vector): projects the first vector onto the second one&quot;
 	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
 		return scale(other, dotproduct(first,other)/dotproduct(other,other))
&lt;/pre&gt;

&lt;!--T:3--&gt;
[[Category:Poweruser_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Funcionalidades</title>
    <ns>0</ns>
    <id>3502</id>
    <revision>
      <id>107978</id>
      <parentid>89223</parentid>
      <timestamp>2014-09-01T12:18:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Funktionalitäten</title>
    <ns>0</ns>
    <id>1260</id>
    <revision>
      <id>107979</id>
      <parentid>95792</parentid>
      <timestamp>2014-09-01T12:18:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Getting started</title>
    <ns>0</ns>
    <id>53</id>
    <revision>
      <id>108090</id>
      <parentid>104564</parentid>
      <timestamp>2014-09-01T19:50:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>FreeCADShip Workbench</comment>
      <sha1>t81k3pn1mp0rhf4krs4egdlylv4perp</sha1>
      <text xml:space="preserve" bytes="11273">
==What's new== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
* [[Release notes 011|Version 0.11 Release notes]] : Check what's new in the 0.11 release of FreeCAD
* [[Release notes 012|Version 0.12 Release notes]] : Check what's new in the 0.12 release of FreeCAD
* [[Release notes 013|Version 0.13 Release notes]] : Check what's new in the 0.13 release of FreeCAD
* [[Release notes 014|Version 0.14 Release notes]] : Check what's new in the 0.14 release of FreeCAD

==Foreword== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
FreeCAD is a 3D CAD/CAE [[About FreeCAD|parametric modeling application]]. It is primarily made for mechanical design, but also serves all other uses where you need to model 3D objects with precision and control over modeling history.

&lt;!--T:5--&gt;
FreeCAD is still in the early stages of development, so, although it already offers you a large (and growing) list of [[Feature_list|features]], much is still missing, specially comparing it to commercial solutions, and you might not find it developed enough yet for use in production environment. Still, there is a fast-growing [http://forum.freecadweb.org/index.php community] of enthusiastic users, and you can already find [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=1222 many examples] of quality projects developed with FreeCAD.

&lt;!--T:6--&gt;
Like all open-source projects, the FreeCAD project is not a one-way work delivered to you by its developers. It depends much on its community to grow, gain features, and stabilize (get bugs fixed). So don't forget this when starting to use FreeCAD, if you like it, you can directly influence and [[Help FreeCAD|help]] the project!

==Installing== &lt;!--T:7--&gt; 

&lt;!--T:8--&gt;
First of all (if not done already) download and install FreeCAD. See the [[Download]] page for information about current versions and updates, and the [[Installing]] page for information about how to install FreeCAD. There are install packages ready for Windows (.msi), Ubuntu &amp; Debian (.deb) openSUSE (.rpm) and Mac OSX. As FreeCAD is open-source, if you are adventurous, but want to have a look at the brand-new features being developed right now, you can also grab the source code and [[Compiling|compile]] FreeCAD yourself.

==Exploring FreeCAD== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
[[Image:Freecad-interface.jpg|1024px|center]]


&lt;!--T:11--&gt;
# The 3D view, showing the contents of your document
# The tree view, which shows the hierarchy and construction history of all the objects in your document
# The [[Property|properties editor]], which allows you to view and modify properties of the selected object(s)
# The output window, which is where FreeCAD prints messages, warnings and errors
# The python console, where all the commands executed by FreeCAD are printed, and where you can enter python code
# The [[Workbenches|workbench selector]], where you select the active workbench


&lt;!--T:12--&gt;
The main concept behind the FreeCAD interface is that it is separated into [[workbenches]]. A workbench is a collection of tools suited for a specific task, such as working with [[Mesh Module|meshes]], or drawing [[Draft Module|2D objects]], or [[Sketcher Module|constrained sketches]]. You can switch the current workbench with the workbench selector (6). You can [[Interface Customization|customize]] the tools included in each workbench, add tools from other workbenches or even self-created tools, that we call [[macros]]. There is also a generic workbench which gathers the most commonly used tools from other workbenches, called the '''complete workbench'''.

&lt;!--T:13--&gt;
When you start FreeCAD for the first time, you are presented with the start center:


&lt;!--T:14--&gt;
[[Image:Startcenter.jpg|1024px|center]]


&lt;!--T:15--&gt;
The Start Center allows you to quickly jump to one of the most common workbenches, open one of the recent files, or see the latest news from the FreeCAD world. You can change the default workbench in the [[Preferences Editor|preferences]].

== Navigating in the 3D space == &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
FreeCAD has four different [[Mouse Model|navigation modes]] available, that change the way you use your mouse to interact with the objects in the 3D view and the view itself. One of them is specifically made for [[Mouse Model#Touchpad Navigation|touchpads]], where the middle mouse button is not used. The following table describes the default mode, called '''CAD Navigation''' (You can quickly change the current navigation mode by right-clicking on an empty area of the 3D view): 


&lt;!--T:18--&gt;
{{CAD Navigation}}


&lt;!--T:19--&gt;
You also have several view presets (top view, front view, etc) available in the View menu and on the View toolbar, and by numeric shortcuts ({{KEY|1}}, {{KEY|2}}, etc...), and by right-clicking on an object or on an empty area of the 3D view, you have quick access to some common operations, such as setting a particular view, or locating an object in the Tree view.

==First steps with FreeCAD== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
FreeCAD's focus is to allow you to make high-precision 3D models, to keep tight control over those models (being able to go back into modelling history and change parameters), and eventually to build those models (via 3D printing, CNC machining or even construction worksite). It is therefore very different from some other 3D applications made for other purposes, such as animation film or gaming. Its learning curve can be steep, specially if this is your first contact with 3D modeling. If you are struck at some point, don't forget that the friendly community of users on the [http://forum.freecadweb.org/index.php FreeCAD forum] might be able to get you out in no time.

&lt;!--T:22--&gt;
The workbench you will start using in FreeCAD depends on the type of job you need to do: If you are going to work on mechanical models, or more generally any small-scale objects, you'll probably want to try the [[PartDesign Workbench]]. If you will work in 2D, then switch to the [[Draft Workbench]], or the [[Sketcher Workbench]] if you need constraints. If you want to do BIM, launch the [[Arch Workbench]]. If you are working with ship design, there is a special [[FreeCADShip Workbench|Ship Workbench]] for you. And if you come from the OpenSCAD world, try the [[OpenSCAD Workbench]].

&lt;!--T:23--&gt;
You can switch workbenches at any time, and also [[Interface Customization|customize]] your favorite workbench to add tools from other workbenches.

==Working with the PartDesign and Sketcher workbenches== &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
The [[PartDesign Workbench]] is specially made to build complex objects, starting from simple shapes, and adding or removing pieces (that we call &quot;features&quot;), until you get to your final object. All the features you applied during the modelling process are stored in a separate view called the [[Document structure|tree view]], which also contains the other objects in your document. You can think of a PartDesign object as a succession of operations, each one applied to the result of the preceding one, forming one big chain. In the tree view, you see your final object, but you can expand it and retrieve all preceding states, and change any of their parameter, which automatically updates the final object.

&lt;!--T:26--&gt;
The PartDesign workbench makes heavy use of another workbench, the [[Sketcher Workbench]]. The sketcher allows you to draw 2D shapes, which are defined by applying Constraints to the 2D shape.  For example, you might draw a rectangle and set the size of a side by applying a length constraint to one of the sides. That side then cannot be resized anymore (unless the constraint is changed).

&lt;!--T:27--&gt;
Those 2D shapes made with the sketcher are used a lot in the PartDesign workbench, for example to create 3D volumes, or to draw areas on the faces of your object that will then be hollowed from its main volume. This is a typical PartDesign workflow:

&lt;!--T:28--&gt;
# Create a new sketch
# Draw a closed shape (make sure all points are joined)
# Close the sketch
# Expand the sketch into a 3D solid by using the pad tool
# Select one face of the solid
# Create a second sketch (this time it will be drawn on the selected face)
# Draw a closed shape
# Close the sketch
# Create a pocket from the second sketch, on the first object

&lt;!--T:29--&gt;
Which gives you an object like this:

&lt;!--T:30--&gt;
[[Image:Partdesign example.jpg|1024px|center]]

&lt;!--T:31--&gt;
At any moment, you can select the original sketches and modify them, or change the extrusion parameters of the pad or pocket operations, which will update the final object.

==Working with the Draft and Arch workbenches== &lt;!--T:37--&gt;

&lt;!--T:38--&gt;
The [[Draft Workbench]] and [[Arch Module|Arch Workbench]] behave a bit differently than the other workbenches above, although they follow the same rules, which are common to all of FreeCAD. In short, while the Sketcher and PartDesign are made primarily to design single pieces, Draft and Arch are made to ease your work when working with several, simpler objects.

&lt;!--T:39--&gt;
The [[Draft Workbench]] offers you 2D tools a bit similar to what you can find in traditional 2D CAD applications such as [https://en.wikipedia.org/wiki/AutoCAD AutoCAD]. However, 2D drafting being far away from the scope of FreeCAD, don't expect to find there the full array of tools that these dedicated applications offer. Most of the Draft tools work not only in a 2D plane but also in the full 3D space, and benefit from special helper systems such as [[Draft SelectPlane|Work planes]] and [[Draft_Snap|object snapping]].

&lt;!--T:40--&gt;
The [[Arch Module|Arch Workbench]] adds [http://en.wikipedia.org/wiki/Building_Information_Modeling BIM] tools to FreeCAD, allowing you to build architectural models with parametric objects. The Arch workbench relies much on other modules such as Draft and Sketcher. All the Draft tools are also present in the Arch workbench, and most Arch tools make use of the Draft helper systems.

&lt;!--T:41--&gt;
A typical workflow with Arch and Draft workbenches might be:

&lt;!--T:42--&gt;
# Draw a couple of lines with the Draft Line tool
# Select each line and press the Wall tool to build a wall on each of them
# Join the walls by selecting them and pressing the Arch Add tool
# Create a floor object, and move your walls in it from the Tree view
# Create a building object, and move your floor in it from the Tree view
# Create a window by clicking the Window tool, select a preset in its panel, then click on a face of a wall
# Add dimensions by first setting the working plane if necessary, then using the Draft Dimension tool

&lt;!--T:43--&gt;
Which will give you this:

&lt;!--T:44--&gt;
[[Image:Arch workflow example.jpg|1024px]]

&lt;!--T:32--&gt;
More on the [[Tutorials]] page.

==Scripting== &lt;!--T:33--&gt;

&lt;!--T:34--&gt;
And finally, one of the most powerful features of FreeCAD is the [[scripting]] environment. From the integrated python console (or from any other external Python script), you can gain access to almost any part of FreeCAD, create or modify geometry, modify the representation of those objects in the 3D scene or access and modify the FreeCAD interface. Python scripting can also be used in [[macros]], which provide an easy method to create custom commands.


&lt;!--T:35--&gt;
{{docnav|Install on Mac|Mouse Model}}

&lt;!--T:36--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Glossary</title>
    <ns>0</ns>
    <id>27129</id>
    <revision>
      <id>110022</id>
      <parentid>109741</parentid>
      <timestamp>2014-09-21T03:26:49Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Changed QT for Qt, second letter should not be uppercase.</comment>
      <sha1>c83eocuqlj5726isqcfbfcs723ycw05</sha1>
      <text xml:space="preserve" bytes="17486">
&lt;!--T:1--&gt;
This page is a glossary of common FreeCAD terms and definitions. 
{{CompactTOC|center=yes}}

==A== &lt;!--T:2--&gt;
{{gloss}}
{{term|term=Arc}}
{{defn|defn=A portion or segment of a circle.}}
{{term|term=Arch|content=[[Arch_Module|Arch]]}}
{{defn|defn=A [[#Workbench|workbench]] used primarily for modeling buildings and structures.  Closely related to the [[#Draft|Draft]] Workbench.}}
{{term|term=Assembly}}
{{defn|no=1|defn=A set of [[#Part|parts]] that have defined positions in relation to each other.}}
{{defn|no=2|defn=A [[#Workbench|workbench]] which aims to facilitate the creation of assemblies. It is currently in development and not yet part of FreeCAD.}}
{{term|term=Axis}}
{{defn|defn=An imaginary line through the origin of the workspace. There are 3 normal axes. They have the classic names of X, Y and Z. X is side to side. Y is up and down. Z is in and out of the page/screen.}}
{{glossend}}

==B== &lt;!--T:17--&gt;
{{gloss}}
{{term|term=Bezier Curve}}
{{defn|defn=[http://en.wikipedia.org/wiki/B%C3%A9zier_curve Bezier Curve]}}
{{term|term=Blueprint}}
{{defn|defn=Old term used for [[#Drawing|drawing]], and coined for its original [http://en.wikipedia.org/wiki/Blueprint reproduction process].}}
{{term|term=brep}}
{{defn|defn=Native file format for [[#Open CASCADE|Open CASCADE]] and shared by a few applications. FreeCAD can save in *.brep format.}}
{{term|term=B-rep}}
{{defn|defn=Stands for [http://en.wikipedia.org/wiki/B-rep boundary representation], which is one of two types of 3D models that FreeCAD supports (the other being [[#Mesh|mesh]]).}}
{{term|term=Boolean Logic}}
{{defn|defn=A method of data manipulation by using of the operands: And, Or, Not.}}
{{term|term=Boolean Operation}}
{{defn|defn=A method of manipulating objects by using Boolean Logic. In FreeCAD, the Boolean Operations are: Union ([[#Fuse|Fuse]]), Difference ([[#Cut|Cut]]), Intersection, and Section.}}
{{term|term=BSpline}}
{{defn|defn=[http://en.wikipedia.org/wiki/Spline_%28mathematics%29 BSpline]}}
{{glossend}}

==C== &lt;!--T:3--&gt;
{{gloss}}
{{term|Callout}}
{{defn|defn=String of text connected to a line pointing to an object in a [[#Drawing|drawing]].}}
{{term|Chamfer}}
{{defn|defn=The cutting off of an edge, at an angle, to get rid of its sharpness; a beveled edge.}}
{{term|1=Clipping Plane}}
{{defn|1=The clipping plane is used to cut away at the model in the 3D view. It is just a visual aid and does not actually cut the model.}}
{{term|term=Clone}}
{{defn|defn=A copy of an object whereby the copy remains parametric.  When the original object is changed the Clone(s) also change to show modifications made to the original object.}}
{{term|term=Coin}}
{{defn|defn=Also called Coin3D. Third-party software library used for 3D representation by FreeCAD.}}
{{term|term=COLLADA}}
{{defn|defn=An interchange file format for [[#Mesh|mesh]] models. File extension is *.dae.}}
{{term|term=Compound}}
{{defn|defn=Groups objects together without fusing them like a [[#Boolean Operation|boolean union]] would.}}
{{term|1=Constraint}}
{{defn|1=A restriction on the geometric relationship between primitives in a [[#Sketch|Sketch]].  Constraints may be Dimensional or Geometrical.}}
{{term|term=Constructive Solid Geometry|content=[http://en.wikipedia.org/wiki/Constructive_solid_geometry Constructive Solid Geometry]}}
{{defn|defn=A solid modeling method for creating shapes by using [[#Boolean Operation|boolean operations]] on [[#Primitive|primitives]].}}
{{term|term=Coordinate}}
{{defn|defn=A number which defines the position of an object in space in reference to a [http://en.wikipedia.org/wiki/Cartesian_coordinate_system coordinate system].}}
{{term|term=Coplanar}}
{{defn|defn=Existing on the same plane.}}
{{term|term=CSG}}
{{defn|defn=Short for [[#Constructive Solid Geometry|Constructive Solid Geometry]].}}
{{term|term=Cut}}
{{defn|defn=Applying a [[#Boolean Operation|boolean difference]] between shapes.}}
{{glossend}}

==D== &lt;!--T:4--&gt;
{{gloss}}
{{term|term=Difference}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Draft}}
{{defn|no=1|defn=A [[Draft_Module|FreeCAD Workbench]] used primarily for 2 dimensional work.}}
{{defn|no=2|defn=A relief angle on a mold to allow removal of the finished product. See [[PartDesign Draft]].}}
{{term|term=Drawing}}
{{defn|no=1|defn=A [[Drawing_Module|FreeCAD Workbench]] used to generate 2D representations of a model, also called drawings.}}
{{defn|no=2|defn=Describes a representation of geometry through the use of two-dimensional views. Also called plan.}}
{{glossend}}

==E== &lt;!--T:18--&gt;
{{gloss}}
{{term|term=Edge}}
{{defn|no=1|defn=A segment joining two [[#Vertex|vertices]]. This segment can be a straight line or a curve.}}
{{defn|no=2|defn=The joining line between two faces. It can be curved or straight.}}
{{term|1=Extrude}}
{{defn|1=A general term for extending a 2D object into 3D along 1 direction. See also [[#Pad|Pad]].}}
{{glossend}}

==F== &lt;!--T:19--&gt;
{{gloss}}
{{term|1=Face}}
{{defn|1=A 2 dimensional topological construct.  For example, a cube has 6 Faces.}}
{{term|term=Facet}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=FC}}
{{defn|defn=Short for FreeCAD.}}
{{term|term=FCStd}}
{{defn|defn=FreeCAD native file format. File extension *.fcstd, *.FCStd}}
{{term|1=Feature}}
{{defn|1=A step in a 3d part's evolution in the [[PartDesign_Workbench|Part Design Workbench]] workflow. Examples are [[#Pad|Pad]], [[#Pocket|Pocket]], [[#Groove|Groove]], [[#Fillet|Fillet]], etc.}}
{{term|term=Fillet}}
{{defn|defn=A rounded relief or cut at an edge added for a finished appearance and to break sharp edges. See [[Part Fillet]] and [[PartDesign Fillet]].}}
{{term|term=Fork}}
{{defn|defn=See Forked Model.}}
{{term|term=Forked Model}}
{{defn|defn=A modeling method, usually accidental and incorrect in FreeCAD, that creates two or more versions of a model from a previous item.  (Not to be confused with intentional operations like Array, Clone, PolarPattern, etc.)}}
{{term|term=Frenet}}
{{defn|defn=When Sweeping a profile along a 3D path, the Frenet parameter controls the orientation of the profile as it travels along the path. If Frenet is true, the profiles are oriented using the Frenet Frame (tangent,binormal,normal) of the path. If Frenet is false the profile's rotation is not restricted. [http://en.wikipedia.org/wiki/Frenet_Frame]}}
{{term|term=Freetype|content=[http://www.freetype.org FreeType]}}
{{defn|defn=A freely available software library used to extract information from font definition files.}}
{{term|term=Frustum|content=[http://en.wikipedia.org/wiki/Frustum Frustum]}}
{{defn|defn=The portion of a solid that lies between two parallel planes cutting it. Used in computer graphics to describe the three-dimensional region which is visible on the screen, the [http://en.wikipedia.org/wiki/Viewing_frustum &quot;viewing frustum&quot;]}}
{{term|term=Fuse}}
{{defn|defn=Term commonly used in FreeCAD to refer to a [[#Boolean Operation|boolean union]] of shapes.}}
{{glossend}}

==G== &lt;!--T:5--&gt;
{{gloss}}
{{term|term=Geometric modeling kernel}}
{{defn|defn=Also called CAD kernel. A set of complex software libraries responsible for the creation of 3D shapes. All operations on objects (extrude, boolean operations, chamfer, fillet) rely on the geometric modeling kernel.}}
{{term|term=Git}}
{{defn|defn=[http://en.wikipedia.org/wiki/Distributed_revision_control Distributed revision control system] used by FreeCAD to host and manage its code base.}}
{{term|term=Group}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=GUI}}
{{defn|defn='''G'''raphical '''U'''ser '''I'''nterface. Allows users to interact with FreeCAD through graphical icons and the mouse pointer.}}
{{glossend}}

==H== &lt;!--T:20--&gt;
{{gloss}}
{{term|term=Half_Space|content=[http://en.wikipedia.org/wiki/Half-space_%28geometry%29 Half Space]}}
{{defn|defn=When a plane completely divides a 3D Euclidian space, the plane forms two half spaces.}}
{{glossend}}

==I== &lt;!--T:6--&gt;
{{gloss}}
{{term|term=IGES}}
{{defn|defn=A file format for the exchange of product data models. Files extensions are *.iges, *.igs. See also [[#STEP|STEP]].}}
{{term|term=Intersection|content=[http://en.wikipedia.org/wiki/Intersection Intersection]}}
{{defn|defn=That portion of two or more geometric entities that is common to all.  For example, the intersection of two lines is a point.}}
{{glossend}}

==J== &lt;!--T:7--&gt;
{{gloss}}
{{term|term=JT}}
{{defn|defn=A proprietary 3D data format developed by Siemens PLM Software.  FreeCAD has no support for JT at this time.}}
{{glossend}}

==K== &lt;!--T:8--&gt;
{{gloss}}
{{term|term=KML}}
{{defn|defn=Keyhole Markup Language -  an XML-based geospatial 3D data definition file used by Google Earth.  FreeCAD has no support for KML at this time.}}
{{glossend}}

==L== &lt;!--T:9--&gt;
{{gloss}}
{{term|term=Line}}
{{defn|defn=A straight path between two [[#Point|points]].}}
{{term|term=Lock}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Loft|content=[http://en.wikipedia.org/wiki/Loft_%283D%29 Loft]}}
{{defn|defn=OA topological form created by linking consequetive profiles with a surface.  Similar to the process used to make fabric covered aeroplanes or boats. Also the FreeCAD function for creating such a form.}}
{{glossend}}

==M== &lt;!--T:10--&gt;
{{gloss}}
{{term|term=Macro}}
{{defn|defn=A saved sequence of FreeCAD instructions, often written by end users.}}
{{term|term=Mantis}}
{{defn|defn=[[#Tracker|Bug tracking system]] used by the FreeCAD project.}}
{{term|term=Mesh}}
{{defn|defn=[http://en.wikipedia.org/wiki/Polygon_mesh Polygon mesh]}}
{{term|term=Model}}
{{defn|defn=Also called 3D model. Computer representation of a three-dimensional [[#Part|part]] or [[#Assembly|assembly]].}}
{{term|term=MultiTransform|content=[[PartDesign_MultiTransform|MultiTransform]]}}
{{defn|defn=&lt;To be added.&gt;}}
{{glossend}}

==N== &lt;!--T:11--&gt;
{{gloss}}
{{term|term=Name}}
{{defn|defn=An unique identifer for a FreeCAD document object. Once assigned by the program, the Name can not be easily changed.  Contrast with [[#Label|Label]].}}
{{term|term=Null Shape}}
{{defn|defn=A [[#Shape|Shape]] property that has not been initialized by a program/macro.  Usually an error condition.}}
{{glossend}}

==O== &lt;!--T:12--&gt;
{{gloss}}
{{term|term=OCE}}
{{defn|defn='''O'''pen CASCADE '''C'''ommunity '''E'''dition. It provides patches, improvements and experiments contributed by users over the official [[#Open CASCADE|Open CASCADE]] library. FreeCAD is known to work on either OCC or OCE.}}
{{term|term=Open CASCADE|content=[http://www.opencascade.org Open CASCADE]}}
{{defn|The [[#Geometric modeling kernel|geometric modeling kernel]] (software library) underlying FreeCAD. Also called OCC or OCCT. See also [[#OCE|OCE]].}}
{{term|OpenSCAD}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Origin}}
{{defn|defn=The center of the coordinate system. Everything goes out from here in either the positive or negative directions. As is our view of the universe with Earth being the “origin”.}}
{{term|Orthographic}}
{{defn|defn=[http://en.wikipedia.org/wiki/Orthographic_projection Orthographic projection] and [http://en.wikipedia.org/wiki/Multiview_orthographic_projection Multiview orthographic projection]}}
{{glossend}}

==P== &lt;!--T:21--&gt;
{{gloss}}
{{term|1=Pad}}
{{defn|1=An extension of a [[#Sketch|Sketch]] in a direction perpendicular to the plane of the Sketch. See also [[#Extrude|Extrude]].}}
{{term|Part}}
{{defn|no=1|A [[Part_Workbench|FreeCAD Workbench]] primarily used for a [http://en.wikipedia.org/wiki/Constructive_solid_geometry Constructive Solid Geometry] workflow.}}
{{defn|no=2|A unibody solid. The lowest level component in an assembly.}}
{{term|Perspective}}
{{defn|defn=[http://en.wikipedia.org/wiki/Graphical_projection#Perspective projection Perspective projection]}}
{{term|term=Pivy|content=[http://pypi.python.org/pypi/Pivy Pivy]}}
{{defn|defn=A software library that allows Python to use Coin.}}
{{term|term=Placement}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Planar}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|Plane}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|Plot}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|1=Pocket}}
{{defn|1=A [[#Feature|Feature]] that removes material from a solid based on a [[#Sketch|Sketch]].}}
{{term|1=Point}}
{{defn|1=An item used to reference a single area in the 3D workspace. A “point” is dimensionless. It has a dimension on the screen, usually represented by a “dot” only so we can see where it is. See also [[#Vertex|Vertex]].}}
{{term|Polygon mesh}}
{{defn|defn=See [http://en.wikipedia.org/wiki/Polygonal_mesh]}}
{{term|Polyline}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|POV-Ray}}
{{defn|defn=[http://en.wikipedia.org/wiki/POV-Ray POV-Ray]}}
{{term|Primitive}}
{{defn|defn=A basic shape used in the construction of models. Some 2D primitives are: point, line, polygon, circle, ellipse, spiral, helix. 3D primitives are: box, cylinder, cone, torus, sphere, ellipsoid, prism.}}
{{term|term=PySide|content=[http://www.pyside.org PySide]}}
{{defn|defn=A freely available software library that allows Python to use QT.}}
{{term|term=Python|content=[http://www.python.org Python]}}
{{defn|defn=A programming language used in the development of FreeCAD as well as in user-written [[#Macro|macros]] or scripts.}}
{{glossend}}

==Q== &lt;!--T:13--&gt;
{{gloss}}
{{term|term=Qt|content=[http://qt-project.org Qt]}}
{{defn|1=A cross-platform application and user interface framework. Also Qt4.}}
{{glossend}}

==R== &lt;!--T:22--&gt;
{{gloss}}
{{term|Raytracing}}
{{defn|defn=[http://en.wikipedia.org/wiki/Ray_tracing_%28graphics%29 Ray tracing]}}
{{term|Revolve}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|Robot}}
{{defn|defn=[http://en.wikipedia.org/wiki/Industrial_robot Industrial robot]}}
{{term|Rotate}}
{{defn|defn=&lt;To be added.&gt;}}
{{glossend}}

==S== &lt;!--T:14--&gt;
{{gloss}}
{{term|Section}}
{{defn|defn=[http://en.wikipedia.org/wiki/Cross_section_%28geometry%29 Cross section (geometry)]}}
{{term|Self Intersection}}
{{defn|defn=A condition where a curve crosses over itself (ex.'8','&amp;'). This confuses geometric kernel algorithms and generally produces an error condition.}}
{{term|Shape}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|1=Sketch}}
{{defn|1=A constrained 2D depiction of an object fixed to a plane or a [[#Face|Face]].  In FreeCAD a Sketch is always a 2-dimensional object somewhere in the 3D space.}}
{{term|Sketcher|content=[[Sketcher_Module|Sketcher]]}}
{{defn|A [[#Workbench|workbench]] used to create 2D geometry by use of [[#Constraint|constraints]].}}
{{term|Sketcher Solver}}
{{defn|defn=The internal FreeCAD mechanism that calculates interdependencies and effects of adding, deleting, and modifying geometry and associated constraints in each Sketch.  Sketcher Solver also calculates the arrangement of all geometry in each Sketch so it can be displayed correctly.}}
{{term|Solver}}
{{defn|defn=See Sketcher Solver}}
{{term|1=Stable}}
{{defn|1=A nickname for the last general release version of the FreeCAD software.  This is typically the version available from sources other than the FreeCAD project.  Compare with [[#Unstable|Unstable]].}}
{{term|STL}}
{{defn|''STereoLithography'', also known as ''Standard Tessellation Language.'' A [[#Mesh|mesh]] file format defining only the surface of a 3D object. File extensions is *.stl}}
{{term|term=STEP}}
{{defn|defn=An ISO standard (ISO 10303) for the exchange of 3D data and product manufacturing information. It replaces [[#IGES|IGES]]. File extensions are *.step, *.stp.}}
{{term|SVG}}
{{defn|'''Scalable''' '''V'''ector '''G'''raphics. A vector graphics file format.}}
{{term|term=Sweep}}
{{defn|defn=[http://en.wikipedia.org/wiki/Solid_modeling#Sweeping Solid modeling]}}
{{glossend}}

==T== &lt;!--T:15--&gt;
{{gloss}}
{{term|term=Task panel}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Thickness}}
{{defn|no=1|defn=A measure of how thick a shape is.}}
{{defn|no=2|A [[Part Workbench]] tool to hollow out a solid and leave a defined uniform thickness.}}
{{term|Toggle}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|Torus}}
{{defn|A primitive shape.}}
{{term|term=Tracker}}
{{defn|defn=Short for bug tracker, the online software application used to keep track of reported bugs or feature requests. See also [[#Mantis|Mantis]].}}
{{glossend}}

==U== &lt;!--T:23--&gt;
{{gloss}}
{{term|Union}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|1=Unstable}}
{{defn|1=A nickname for a very recent version of the FreeCAD software. This version will contain many changes recently implemented by the developers.  It does not typically fail or produce wrong results, but it has not completed testing.}}
{{term|Upgrade}}
{{defn|defn=&lt;To be added.&gt;}}
{{glossend}}

==V== &lt;!--T:24--&gt;
{{gloss}}
{{term|term=Vector}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Vertex}}
{{defn|defn=A lone [[#Point|point]] in space, or the corner of a shape where [[#Edge|edges]] meet.}}
{{glossend}}

==W== &lt;!--T:25--&gt;
{{gloss}}
{{term|term=WB}}
{{defn|defn=Short for [[#Workbenches|workbench]]}}
{{term|term=Wire}}
{{defn|defn=&lt;To be added.&gt;}}
{{term|term=Workbench}}
{{defn|defn=Also called module, the [[#Workbenches|workbench]] groups a set of tools dedicated for a specific task.}}
{{glossend}}

==X== &lt;!--T:16--&gt;
{{gloss}}
{{term|X}}
{{defn|Commonly refers to the X [[#Axis|axis]].}}
{{glossend}}

==Y== &lt;!--T:26--&gt;
{{gloss}}
{{term|Y}}
{{defn|Commonly refers to the Y [[#Axis|axis]].}}
{{glossend}}

==Z== &lt;!--T:27--&gt;
{{gloss}}
{{term|term=Z}}
{{defn|Commonly refers to the Z [[#Axis|axis]].}}
{{glossend}}


&lt;!--T:28--&gt;
{{clear}}
[[Category:User Documentation]]
[[Category:Wiki]]

</text>
    </revision>
  </page>
  <page>
    <title>GuiCommand model</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>106056</id>
      <parentid>106055</parentid>
      <timestamp>2014-08-23T18:39:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>l76b48jptksbjodh8qmreou8ce4shxi</sha1>
      <text xml:space="preserve" bytes="1441">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Base ExampleCommandModel|MenuLocation=Sample -&gt; Command|Workbenches=Wb1,Wb2}}

==Description== &lt;!--T:2--&gt;

Description
&lt;br&gt;&lt;br&gt;
[[image:FreeCAD05.png]]   image
&lt;br&gt;&lt;br&gt;
==How to use== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
# How to use
# How to use

==Options== &lt;!--T:5--&gt;
{{TitleTasks|[[Image:Part_Box.png|24px]] Create Geometry }}
 &lt;nowiki&gt;{{TitleTasks|[[Image:Icon.png|24]] + Text}}&lt;/nowiki&gt; (Code for the main title Tasks)
* {{PropertyTasks|Tasks}} : Tasks
 &lt;nowiki&gt;{{PropertyTasks|Tasks}}&lt;/nowiki&gt; (Code of title Tasks)
* Options

==Properties== &lt;!--T:6--&gt;
{{TitleProperty|Base}}
 &lt;nowiki&gt;{{TitleProperty|Base}}&lt;/nowiki&gt;  (Code for the main title Properties)
* {{PropertyData|Properties}}: Properties
 &lt;nowiki&gt;{{PropertyData|Properties}}&lt;/nowiki&gt; (Code of title Data)
* {{PropertyView|Properties}}: Properties
 &lt;nowiki&gt;{{PropertyView|Properties}}&lt;/nowiki&gt; (Code of title View)

==Example== &lt;!--T:7--&gt;
Optional

==Scripting== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The ExampleCommandModel tool can by used in [[macros]] and from the python console by using the following function:

 '''makeExampleCommandModel (Data, Data)'''

&lt;!--T:10--&gt;
* Creates a CommandModel using Data.
* Returns the newly created object.

&lt;!--T:11--&gt;
Example:

 import FreeCAD, Base
 Base.makeExampleCommandModel(FreeCAD.Data,FreeCAD.Data)

==Other== &lt;!--T:12--&gt;
Optional


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Gui Command</title>
    <ns>0</ns>
    <id>55</id>
    <revision>
      <id>78537</id>
      <parentid>78536</parentid>
      <timestamp>2014-03-30T09:41:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6ne1jo52l9a2u005ovak42c9gox34wu</sha1>
      <text xml:space="preserve" bytes="2901">
&lt;!--T:1--&gt;
The GuiCommand is one of the most important functions of FreeCAD 
in the main interaction point of the user. Every time the user
selects a menu item or presses a toolbar button it activates a
GuiCommand. Some of the attributes of a GuiCommand are:
* Defines a name
* Contains an icon
* Defines the scope for an undo/redo
* Has a help page
* Opens and controls dialogs
* Macro recording
* and so forth...

=== Naming === &lt;!--T:2--&gt;
The GuiCommand is named in a certain way: ''ModuleName_CommandName''
e.g &quot;Base_Open&quot; this is the Open Gui Command in the Base system. 
The GuiCommand in a certain module is named with the module name 
in front e.g. &quot;Part_Cylinder&quot;. 

&lt;!--T:3--&gt;
If the docu is not finished use [[Template:UnfinishedDocu]]

=== Help page === &lt;!--T:4--&gt;
Every GuiCommand has to have a help page. The help page is hosted on the 
FreeCAD docu wiki. The article has the same name as the GuiCommand, e.g. [[Draft ShapeString]].

&lt;!--T:5--&gt;
To create your own help pages you can use the template:
[[GuiCommand model]]

&lt;!--T:6--&gt;
Example:
* [[Draft ShapeString]]
* [[Draft Line]]

=== Icons === &lt;!--T:7--&gt;
[[Image:Tango-Palette.png|400px|right]]

&lt;!--T:8--&gt;
Every GuiCommand has to have an icon. We use the [http://tango.freedesktop.org/Tango_Desktop_Project| Tango icon set] and its guidelines. On the right side you see
the tango color palette. 

&lt;!--T:9--&gt;
Preferable all Icons are drafted with SVG with e.g. [http://inkscape.org Inkscape]. 
This makes it easier to apply changes and derive
additional Icons in the same application space.

&lt;!--T:10--&gt;
'''icons color coding chart'''

&lt;!--T:11--&gt;
[[Image:Colorchart.png|200px]]

&lt;!--T:12--&gt;
We try as much as possible to respect this chart, so the color of the icons has a direct meaning.

=== Quality requirements === &lt;!--T:13--&gt;
There are a lot of GuiCommands (Features) in FreeCAD which are experimental
or used shortly for implementation purposes. These GuiCommands are mostly in
the dedicated workbenches like Part, Mesh or Cam. 
To ensure a good user experience the workbench ''Complete'' was created. This 
is the default start workbench of FreeCAD and incorporates all GuiCommands 
which meet certain '''Quality requirements''' which are described here:

&lt;!--T:14--&gt;
* The Command/Feature has to be '''finished'''. No work in progress!
* Has to have a '''help page''' like [[Draft ShapeString]]
** All the fields in [[Template:GuiCommand]] have to filled in
** A picture of the dialogs the command eventually yield
** detailed description of the command and all its parameters and settings
** Description of the related python interfaces and classes with example code
* Set up a proper Icon and menu position

&lt;!--T:15--&gt;
Hopefully this becomes true for all GuiCommands in the [[List of Commands]].

&lt;!--T:16--&gt;
[[Category:User Documentation]]
[[Category:Command_Reference]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Helki</title>
    <ns>0</ns>
    <id>35334</id>
    <revision>
      <id>96341</id>
      <parentid>96340</parentid>
      <timestamp>2014-07-21T01:30:47Z</timestamp>
      <contributor>
        <username>Ian.rees</username>
        <id>3313</id>
      </contributor>
      <comment>/* Example edited Helki wiki page */</comment>
      <sha1>22c08jscdfjdg68vpihkk28gdmxyzi0</sha1>
      <text xml:space="preserve" bytes="4427">This page describes a proposal for a new system to link error messages in the GUI with our wiki.  This has not been implemented or even decided to be implemented, please feel free to add your thoughts.

=== Motivation ===
* Get feedback on the frequency of errors for real users
* Provide troubleshooting information to users in a very direct and easily accessible format.
* Crowdsource the generation of that troubleshooting information.

=== User's Perspective ===

Whenever an error message appears, a Helki link is included.  Errors with links could be due to internal problems, or because the user broke a rule.  This link does not replace the error message, and should be obvious but reasonably unobtrusive.  The link points at an existing page in the product's wiki, which is specific to the particular error message.  Permissions of the wiki page allow for any registered user to edit the page.  If no user has edited the page so far, a template is provided with links to general troubleshooting information, the product's bug tracker, and user manuals.  The template includes some guidance on the type of content that would be useful to add to the page.  In some instances, the wiki page might be replaced with a redirect to another part of the wiki, or a bug tracker ticket.

[[File:Example_helki_dialog.png]]

==== Example Helki Wiki Page Template ====
This page is an automatically generated part of the FreeCAD wiki, please feel free to change it.  Our [[User hub|user's manual]] and [http://forum.freecadweb.org Forum] are excellent resources, or if you've found a bug our [[Help_FreeCAD#Report_bugs_and_ask_for_interesting_features|issue tracker]] is at [http://freecadweb.org/tracker http://freecadweb.org/tracker].  Contact one of the administrators for more information on getting an account and editing our wiki.

Once you've resolved your issue, please come back here (don't forget to bookmark this page) and update with any information that might be helpful for the next person.  Thanks!  --The FreeCAD Community

==== Example edited Helki wiki page ====
This dialog indicates that a 2-D drawing like the ones created by the Sketcher workbench must be selected in the before a revolution can be generated based on that drawing.  See [[PartDesign Bearingholder Tutorial I]] for an example.

=== Developer's Perspective ===

Each time a new error message is created, insert a HELKI_URL or HELKI_LINK into the source code for displaying error, as appropriate.  The Helki script will replace these with dummy URLs or HTML links, or with valid ones including a unique ID for each message when the code is ready for publishing.  When the unique ID is generated, a template page with the corresponding ID will be created on the wiki.

  developer@somecomputer src/$ helki --dummy
  Creating dummy links, don't forget to re-run with --publish before pushing to the public!
  Using configuration file helki.cfg
  Processed 3 new URLs and 2 new links in Mod/Example/Gui/someFile.cpp
  Processed 1 new links in Mod/Example/Gui/someOtherFile.py
  Done!
  ...
  Bit more coding
  ...
  developer@somecomputer src/$ helki --publish
  Using configuration file helki.cfg
  Processed 3 dummy URLs and 2 dummy links in Mod/Example/Gui/someFile.cpp
  Processed 1 new URLs 1 dummy links in Mod/Example/Gui/someOtherFile.py
  Links have IDs
  s76dhw892k
  r93jeld9fn
  asl238ekd1
  qud84htkf9
  fl489tjd8c
  ed93nmflo2
  leior03mjf
  Pushing new IDs to the wiki........Success!
  
If the creation of wiki pages fails, the program will support re-trying, and there will also be a manual Helki page creation option.

=== Wiki Maintainer's Perspective ===
Helki pages will be generated based on settings in a configuration file that's included in the project's source code.  Wiki access will need to be easy for users to setup.  A script for changing all Helki template pages will need to be developed.

=== Points to Consider ===
* If the ID is based on the generation time, then we don't need to worry about IDs clashing.
* Developers might be interested to know how many hits particular Heki pages have gotten, so a report generation tool might need to be developed.
* Helki links could incorporate the user's FreeCAD language settings, to point to a wiki page in the appropriate language.  The ID should be tied just to the error message, so that a multilingual user could find the Helki page for an error, in other languages.</text>
    </revision>
  </page>
  <page>
    <title>Help</title>
    <ns>0</ns>
    <id>57</id>
    <revision>
      <id>101883</id>
      <parentid>101882</parentid>
      <timestamp>2014-08-02T14:28:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dxwk3cx0rgsdaosbof9oxxfki6brgea</sha1>
      <text xml:space="preserve" bytes="794">
&lt;!--T:1--&gt;
There are two main forums where you can get help and support from FreeCAD developers and users: The [http://forum.freecadweb.org/ help forum], where you can ask for help and read through the questions that have already been made and/or solved, and the [http://forum.freecadweb.org/ discussion forum], where you can discuss other subjects, give your impressions of FreeCAD, ideas, etc. Those forums are both very active and you should get a reply very quickly. 

&lt;!--T:2--&gt;
If you need help or have questions related to a particular page of this wiki documentation, you can always leave ideas or comments on the &quot;discussion&quot; tab of each page.

&lt;!--T:3--&gt;
There is also a IRC #freecad chat room on freenode

&lt;!--T:4--&gt;
[[Category:Help]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Help FreeCAD</title>
    <ns>0</ns>
    <id>390</id>
    <revision>
      <id>110171</id>
      <parentid>109292</parentid>
      <timestamp>2014-09-21T21:10:35Z</timestamp>
      <contributor>
        <username>Drei</username>
        <id>3319</id>
      </contributor>
      <minor/>
      <comment>Added missing word : &quot;look&quot;</comment>
      <sha1>8yfe8mrcgucdywtybs2lqjw29io52zb</sha1>
      <text xml:space="preserve" bytes="8307">
&lt;!--T:1--&gt;
If you like FreeCAD and would like to help in its development, there are many things you can do, even if you are not a programmer. Actually, there are things to do for everyone: users, power users and developers:

=== Work on the documentation === &lt;!--T:2--&gt;
Help us to build, correct and extend this documentation. Correct mistakes, extend or correct pages that are unclear, create new pages if a topic is missing, etc. Contributing to FreeCAD Wiki is easy, at [[WikiPages]] you can find the FreeCAD Wiki rules and the help needed to to get you started. To edit the wiki, you will need a FreeCAD Wiki account (the wiki is write-protected to avoid spamming). You can ask for an account [http://forum.freecadweb.org/viewtopic.php?f=21&amp;t=6830 on the forum] or on the [irc://irc.freenode.net/freecad irc channel].

&lt;!--T:3--&gt;
A couple of areas that would welcome your work:
* The [[:Category:Command_Reference]] page list and documents all of the FreeCAD commands. Most of them have few or no information at all. Please refer to [[WikiPages]] for good examples of what command documentation pages should look like.
* The [[Tutorials]] section is still very poor. If you developed something cool with FreeCAD, why not write there how you did it?

=== Share your FreeCAD knowledge === &lt;!--T:4--&gt;
The users community around FreeCAD is still small, but already includes several advanced users who do a very important job in showing to newcomers how to use the software. If you begin to feel comfortable with FreeCAD, your knowledge could be very valuable to others, and you might
contribute with important assets, like:
* Showing the work you do with FreeCAD on the [http://forum.freecadweb.org/viewforum.php?f=24 Users Showcase forum]. You can post screenshots, and, even better, attach the FreeCAD files so other people can examine it and understand how you did it.
* Recording [http://www.youtube.com/user/FreeCADNews videos] showing how you did something interesting in FreeCAD. These videos usually do a great job in showing new features.
* Write [http://freecad-tutorial.blogspot.com/ tutorials] describing or teaching something interesting. You can write tutorials on your own blog, directly on our wiki, or even on the forum.
* Post on the [https://plus.google.com/communities/103183769032333474646 FreeCAD Google Plus] community.

=== Translate FreeCAD === &lt;!--T:5--&gt;
Translate FreeCAD in your own language. All text of the FreeCAD interface can be easily translated in other languages. All we need is someone who know that other language and is willing to help! All the translations are done online on [http://crowdin.net/project/freecad crowdin].

&lt;!--T:6--&gt;
For details on translation, see FreeCAD Wiki Translation Process under [[Localisation]].

=== Translate the documentation === &lt;!--T:7--&gt;
Translate the documentation. Translating is easy, the FreeCAD wiki supports a Translation plugin which allows to manage translations between pages.

&lt;!--T:8--&gt;
For details on translation, see FreeCAD Wiki Translation Process under [[Localisation]].

&lt;!--T:9--&gt;
Please be sure to be familiar with the [[WikiPages]] style guide, which includes rules for good translations.

&lt;!--T:15--&gt;
The [[Help:Editing|Help Editing]] page provides some information on editing.

=== Help others to know FreeCAD === &lt;!--T:10--&gt;
* Talk about FreeCAD to other people who might be interested
* Find interesting uses for FreeCAD, and document it, for example with screenshots. FreeCAD is very young, and not many people see what they can do with it. If you are a FreeCAD fan already, you surely know some cool thing FreeCAD can do. Help us to show that to others!
* Hang on the forum, and help newcomers to solve basic questions
* Write tutorials, record videos, etc... showing what you do with FreeCAD
* Contribute with files, drawings, etc... We still lack good example files of what can be done with FreeCAD

=== Report bugs and ask for interesting features === &lt;!--T:11--&gt;
The place to report bugs and suggest new features is the '''[http://www.freecadweb.org/tracker FreeCAD Tracker]'''. In order to save developers time (triaging and handling hard to understand bugs can be very time consuming), and avoid frustrations because your issue was not handled the way you would like, please read the following:
* Bugs and features requests are handled in the same tracker. Just mark your issue as &quot;bug&quot; (something that doesn't work as it should) or &quot;feature&quot; (something that is not there but you think it would be good to have)
* Although you can submit issues anonymously, please use your sourceforge account (create one if needed), so you can be notified when someone adds notes to the issue. In many cases, the person who will handle the bug will need more information from you.
* When reporting a bug, the most important point is to allow developers to reproduce it. Be sure to include the exact steps needed to make the bug happen, so another person can do the same and see the bug happen on his machine too. If the developer cannot see the bug, he cannot solve it either.
* Also include information that can help developers to situate the problem, like the operating system you are running FreeCAD on, the version of FreeCAD (for example 0.11) and the revision number (for example 4955). Both those numbers are available on the Help -&gt; about FreeCAD dialog.
* If you are not sure whether what you found is a bug or not, the best way is to head to the [http://forum.freecadweb.org/index.php forum] and discuss it there first.
* Before submitting a feature request, it might also be a good idea to discuss it with other users on the [http://forum.freecadweb.org/index.php forum], so you might end up with a more solid proposal, with more chances to interest a developer to implement it.
* Remember that FreeCAD is developed by volunteers who use their free time to work on it. Although everyone tries his best to make the best possible application, your bug report might be treated with low priority, or canceled if you cannot give sufficient information, and your feature request might be postponed or even refused if no developer has interest in implement it or if that would request unrealistic amount of work.

=== Design artwork === &lt;!--T:12--&gt;
See the [[Artwork]] page for guidelines about designing icons for FreeCAD.

=== Program! === &lt;!--T:13--&gt;
Writing code for FreeCAD is not hard, and you don't need any permission, you can start right now to work on something you want, then [http://www.freecadweb.org/tracker submit a patch] or request a merge from a git branch. But to avoid some headache you should meet the following prerequisites first:
* FreeCAD goes at its own pace, and has a very small team of developers. We have not as much time as we would like to dedicate to FreeCAD, and things are not planned ahead, they are done when some developer sees it fit and when he finds time to do it. So we don't maintain a list of tasks to be done. It is up to you to find something you would like to do, for example a defect you would like to correct, or a small feature you think is missing. The [http://www.freecadweb.org/tracker tracker] also contains some items that are not yet assigned to anybody.
* Before you start to code for FreeCAD, you must know well how FreeCAD works. This seems obvious, but if you don't know how it is supposed to work you won't know what to do internally or how to do it.
* Almost everything can be done either in python or C++. The internals work almost the same in both languages. We suggest you read through the [[Power users hub]] pages, even if you're going to code in C++, since it will give you a good overview of the internals.
* If you are going to work in C++, make sure you can compile FreeCAD without problems first.
* Present yourself to other developers. FreeCAD is before anything a social project, we discuss a lot of things on the [http://forum.freecadweb.org forum] before implementing it, and it's always best to discuss your ideas and tell people what you are planning to do before actually doing it. We also have an [irc://chat.freenode.net/freecad IRC channel], but the forum is the one and only place where you can meet all the developers.

&lt;!--T:14--&gt;
[[Category:Documentation]]
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>History</title>
    <ns>0</ns>
    <id>40956</id>
    <revision>
      <id>130666</id>
      <parentid>130665</parentid>
      <timestamp>2014-12-09T18:04:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7esyr04bfq6y2y5r1h0y1svw7iznhz0</sha1>
      <text xml:space="preserve" bytes="8632">__FORCETOC__

== History == &lt;!--T:1--&gt;
[[File:Screenshot mesh.jpg|thumb|300px|Early FreeCAD version unknown]]
[[File:Part BooleanOperations.png|thumb|300px|FreeCAD version 0.7 from 2009]]

&lt;!--T:2--&gt;
FreeCAD history began in January 2001, when [[User:Jriegel|Jürgen Riegel]] started working on the project that would later officialy become FreeCAD. CAS.CADE, a commercial software development framework including a [[Glossary#Geometric_modeling_kernel|geometric modeling kernel]] (or CAD kernel), had been released under an open source license in 2000 and renamed [[Glossary#Open_CASCADE|Open Cascade]]. This made the realisation of an open source 3D CAD program possible, as having to program a CAD kernel from scratch would have required a huge amount of work.

&lt;!--T:3--&gt;
In Jürgen's owns words:

&lt;!--T:4--&gt;
{{Quote|text=Start January 2001 by me as so called GOM (Graphical Object Modeler), with the Idea in mind to use Qt, Python and
Cas.CADE, an commercial CAD-Kernel I used in projects in Daimler this time. CasCade gone open source shortly before so
the time seams right to try a move in the (at this time) empty space of open source cad.
I had a two year experience with OpenCascade in a project called QSpect and was at the end the main
software designer. I learned a lot in the field of 3D and CAD programming. I was also influenced by Catia
V5 and its very special User and programming interface.... sf.net registration 2002-03-17 19:42 as FreeCAD. I couldn't think of an better name. Im very bad on names.... April 2003 Werner Meyer was one of the colleges in the QSpect project switched to company called Imetric.
So the contact to Imetric was very promising since they searched for a new 3D software platform for
their 3D sensors. So 2005 Imetric donated most of the Mesh module to FreeCAD and OpenSource and use since then FreeCAD
as basis for their sensor system software. And Werner is since then a very active part of FreeCAD.
2005 after one year of struggle I decided to rip of the OpenCascade document framework and replace it with
an own implementation. So at the end we use only the CAD kernel of OpenCascade and not the rest of the Framework.
2007 was another interesting milestone. We switched to QT4 and has there fore the LGPL and a lot of work (which did mostly Werner)
|sign=[[User:Jriegel|Jürgen Riegel]]|source=''[http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=295 Who is behind FreeCad?]''}}

&lt;!--T:5--&gt;
The project was announced to the general public on the [http://www.opencascade.org/org/forum OpenCascade Forum] in 2003. Again, in Jürgen's words:

&lt;!--T:6--&gt;
{{Quote|text=Hi together,
my name is Juergen Riegel and I want today announce a OpenCasCade project, FreeCAD.
FreeCAD is an Open Source CAx RAD based on OpenCasCade, QT and Python. It features some key concepts like Macro recording, Workbenches, ability to run as a server and dynamically loadable Application extensions and its designed to be platform independent...
Although its in a early stage and not usable for users and developers (first user release plant for end 2003) I would like to get some feedback on the direction and design of FreeCAD. The GUI is nearly finished and now we (Me and my co developer Werner Mayer) starting to add the first CAD functions (Part design).
FreeCAD can be seen as a general purpos mecanical CAD system but the first audience, I think, will be developers in the CAx area which need ground work for own development.
|sign=[[User:Jriegel|Jürgen Riegel]]|source=''[http://www.opencascade.org/org/forum/thread_6572/?forum=11 Announcing FreeCAD Project]''}}


&lt;!--T:7--&gt;
Eventually, the project gained traction, and saw the addition of new key contributors in the community.

&lt;!--T:8--&gt;
[[User:Yorik|Yorik van Havre]] joined the project in 2008 and started work on the [[Draft Module]]. Before that point, there was no way to create 2D geometry through the [[Glossary#GUI|GUI]]. This module was programmed entirely in Python rather than in C++, the core programming language used in FreeCAD. This proved that Python integration was a success and could be used to extend or customize FreeCAD's capabilities. In addition to his work on the Draft module, Yorik worked on expanding the FreeCAD documentation, and became FreeCAD's ''de facto'' &quot;Art director&quot;, creating many icons for FreeCAD's GUI and [[Artwork|defining its style]].

&lt;!--T:9--&gt;
Version 0.7 of FreeCAD released in April 2009 was the first to include the Draft module. The Part module provided a simple [[Glossary#Constructive Solid Geometry|CSG]] workflow with creation of primitive shapes and boolean operations accessible through the Part menu. Extrusion of 2D profiles and filleting was also possible.

&lt;!--T:10--&gt;
Version 0.8 released in July 2009 saw some more work in the Draft module, including a new Dimension tool. The Part module benefited from a new toolbar along with new tools, Revolve and Section.

&lt;!--T:11--&gt;
By the end of 2009, FreeCAD was accepted as a Debian package in the Debian repositories. FreeCAD was added to the Ubuntu 10.04 repositories in 2010.

&lt;!--T:12--&gt;
Version 0.10 released on July 2010 introduced the [[Sketcher Workbench]], based on Sketchsolve, a constraint-based solver to create 2D geometry. The first version was limited to creation of rectangles and lines.

&lt;!--T:13--&gt;
In early 2011, taking the opportunity given by the [https://launchpad.net Launchpad] online platform, the [https://launchpad.net/~freecad-maintainers FreeCAD Maintainers team] was created to provide fresh stable releases along with daily build packages of FreeCAD to users of the Ubuntu operating system.

&lt;!--T:14--&gt;
Version 0.11 released in May 2011 introduced the new Part Design workbench which included tools such as Pad, Pocket, Fillet and Chamfer. The Draft workbench received enhancements and new tools, like BSpline. The Robot workbench featured more GUI tools.

&lt;!--T:15--&gt;
Version 0.12 released in January 2012 featured a more complete Sketcher workbench. It included a totally rewritten solver, FreeGCS. It was the result of months of work by the main FreeCAD developers along with newcomers logari81 (who programmed the solver) and mrlukeparry. More tools were added to the PartDesign workbench.

== Release history == &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
{| class=&quot;wikitable&quot; style=&quot;margin: 0.4em 0 0.5em;&quot;
|-
! style=&quot;background-color: #cccccc;&quot;| Version
! style=&quot;background-color: #cccccc; white-space: nowrap;&quot;| Release date
! class=&quot;unsortable&quot; style=&quot;background-color: #cccccc;&quot;| Informations
|-
| style=&quot;background-color: #C1E6F5;&quot;| 0.15
| 
| Current Developer Release
|-
| style=&quot;background-color: #D4F4B4;&quot;| 0.14
| 2014-07-01
| [[Release notes 014]]
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.13
| 2013-01-29
| [[Release notes 013]]
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.12
| 2011-12-20
| [[Release notes 012]]
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.11
| 2011-05-03
| [[Release notes 011]]
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.10
| 2010-07-24
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.9
| 2010-01-16
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.8
| 2009-07-10
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.7
| 2009-04-24
|
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.6
| 2007-02-27
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.5
| 2006-10-05
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.4
| 2006-01-15
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.3
| 2005-10-31
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.2
| 2005-08-09
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.1
| 2003-01-27
| 
|-
| style=&quot;background-color: #FDB3AB;&quot;| 0.0.1
| 2002-10-29
| Initial Upload --&gt; The birth of FreeCAD
|-
|}


&lt;!--T:18--&gt;
* Legend

&lt;!--T:19--&gt;
{| class=&quot;wikitable&quot; style=&quot;margin: 0.4em 0 0.5em;&quot;
|-
! style=&quot;background-color: #cccccc;&quot;| Color
! style=&quot;background-color: #cccccc;&quot;| Version Type
|-
| style=&quot;background-color: #C1E6F5;&quot;| 
| Future release
|-
| style=&quot;background-color: #FED1A0;&quot;| 
| Latest preview version
|-
| style=&quot;background-color: #D4F4B4;&quot;| 
| '''Latest version'''
|-
| style=&quot;background-color: #FEF8C6;&quot;| 
| Older version, still supported
|-
| style=&quot;background-color: #FDB3AB;&quot;| 
| Old version
|-
|}

== Links == &lt;!--T:20--&gt;
* [http://sourceforge.net/projects/free-cad/files/ SourceForge Files section] 
* [http://sourceforge.net/projects/free-cad/files/OldFiles/ SourceForge Old Files section]
* [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=295 Who is behind FreeCad?] topic on the FreeCAD forum
* [http://www.opencascade.org/org/forum/thread_6572/?forum=11 Announcing FreeCAD Project] on the OpenCascade forum

&lt;!--T:21--&gt;
[[Category:News]]


</text>
    </revision>
  </page>
  <page>
    <title>ImageConv</title>
    <ns>0</ns>
    <id>59</id>
    <revision>
      <id>73428</id>
      <parentid>73427</parentid>
      <timestamp>2014-03-02T21:30:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1eoahrrm5rcj1ujod25y11o0bdyq7jk</sha1>
      <text xml:space="preserve" bytes="538">
&lt;!--T:1--&gt;
'''ImageConv''' is a program used to convert images from various formats to the XPM-format, that can be compiled into FreeCAD.

== Building == &lt;!--T:2--&gt;
ImageConv is located in the source tree of FreeCAD:

&lt;syntaxhighlight&gt;
 /trunk/src/Tools/ImageTools/ImageConv
&lt;/syntaxhighlight&gt;

&lt;!--T:3--&gt;
Building is easy with the ''Makefile'' or the VisualStudio-Project.

== Usage == &lt;!--T:4--&gt;
ImageConv is a command line tool.

&lt;!--T:5--&gt;
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Image Icon</title>
    <ns>0</ns>
    <id>51431</id>
    <revision>
      <id>130226</id>
      <parentid>130225</parentid>
      <timestamp>2014-12-08T20:09:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a1ac0cyn8izn293a7fq6fgbsj0wkgva</sha1>
      <text xml:space="preserve" bytes="279">
==[[Image:Workbench_Image.png|32px|Workbench_Image|link=Image Workbench]] [[Image Workbench|Image Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Image Key</title>
    <ns>0</ns>
    <id>51440</id>
    <revision>
      <id>131447</id>
      <parentid>130893</parentid>
      <timestamp>2014-12-13T21:16:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>6aqtbonon0k1f4oanbspdijrfisby5x</sha1>
      <text xml:space="preserve" bytes="300">
==[[File:Workbench_Image.png|32px|Workbench_Image|link=Image Workbench]] [[Image Workbench|Image Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Image Module</title>
    <ns>0</ns>
    <id>383</id>
    <revision>
      <id>88242</id>
      <parentid>76913</parentid>
      <timestamp>2014-05-29T18:49:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7ypiwc1yyweblp6vua43ytfe6y5bkwt</sha1>
      <text xml:space="preserve" bytes="808">
&lt;!--T:1--&gt;
The image module manages different types of [http://en.wikipedia.org/wiki/Raster_graphics bitmap images], and lets you open them in FreeCAD. Currently, the modules lets you open .bmp, .jpg, .png and .xpm file formats in a separate viewer window.

&lt;!--T:2--&gt;
The image workbenches also allow to open an image on a plane in the 3D-space of FreeCAD. This function is available via the second button of the image workbench. [[File:Image-import.svg]]

&lt;!--T:3--&gt;
The plane can be moved in 3D-space by editing the placement in the [[Property editor]]. The major use is tracing over the image, in order to generate a new part at using the image as template.

&lt;!--T:4--&gt;
{{docnav|Raytracing Module|Draft Module}}

&lt;!--T:5--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Image Workbench</title>
    <ns>0</ns>
    <id>381</id>
    <redirect title="Image Module" />
    <revision>
      <id>2005</id>
      <timestamp>2009-04-13T01:24:42Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirecting to [[Image Module]]</comment>
      <sha1>02oovbnzhskfm9g00if8odenbb8wovs</sha1>
      <text xml:space="preserve" bytes="26">#Redirect [[Image_Module]]</text>
    </revision>
  </page>
  <page>
    <title>Importing From Sketchup</title>
    <ns>0</ns>
    <id>47747</id>
    <revision>
      <id>123339</id>
      <parentid>123250</parentid>
      <timestamp>2014-11-17T17:13:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mqetej3f2binghhqqlz6aqop9fqjv7e</sha1>
      <text xml:space="preserve" bytes="1696">
== Best Method == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
From experience, currently the best method to import a file from Sketchup is to use the Collada (*.dae) format. FreeCAD does not natively support the Collada format. To have this functionality in FreeCAD, the user needs to install a Python module for importing and exporting the format. It's a relatively easy task to perform and instructions can be found on the [[Extra python modules|Extra python modules]] page. The direct link to the instructions is - [http://www.freecadweb.org/wiki/index.php?title=Extra_python_modules#pyCollada Extra python modules: pyCollada].

== Importing Collada (*.dae) files == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
Providing the pyCollada module has been installed, you can  open or import Collada files just like any other. Select the File menu and then pick either Open or Import. Select your Collada file and click Open. You can filter the file type by selecting the Files of type pull down in the Open or Import dialog and select Collada (*.dae) from the list.

== Alternatives == &lt;!--T:5--&gt; 

&lt;!--T:6--&gt;
Using a Sketchup STL export plugin, you may also chose to use that format that FreeCAD supports natively. There are a number of these plugins available for Sketchup and some work better than others. Some research my be requires of the user to determine which one will best serve their needs. 

== Notes == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
Both Collada (*.dae) and STL are mesh formats. To use these files within FreeCAD, which works primarily with solids, additional work to the objects imported using these formats will in most cases be required.

&lt;!--T:9--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>InputField</title>
    <ns>0</ns>
    <id>17537</id>
    <revision>
      <id>101941</id>
      <parentid>101940</parentid>
      <timestamp>2014-08-02T15:13:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ehhno0oi05hotsvvltlsxz34xc1l322</sha1>
      <text xml:space="preserve" bytes="327">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
This is the documentation of the FreeCAD 'InputField' widgets, which get used in most of the dialogs handling parameter with units.

&lt;!--T:3--&gt;
ToDo...

&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

&lt;!--T:5--&gt;
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Instalação</title>
    <ns>0</ns>
    <id>3626</id>
    <revision>
      <id>107981</id>
      <parentid>14787</parentid>
      <timestamp>2014-09-01T12:20:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Instalação em Linux</title>
    <ns>0</ns>
    <id>3606</id>
    <revision>
      <id>107982</id>
      <parentid>89239</parentid>
      <timestamp>2014-09-01T12:20:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Instalação em Mac</title>
    <ns>0</ns>
    <id>3624</id>
    <revision>
      <id>107983</id>
      <parentid>89242</parentid>
      <timestamp>2014-09-01T12:21:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Instalação em Windows</title>
    <ns>0</ns>
    <id>3603</id>
    <revision>
      <id>107984</id>
      <parentid>89243</parentid>
      <timestamp>2014-09-01T12:21:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Install on Mac</title>
    <ns>0</ns>
    <id>454</id>
    <revision>
      <id>45285</id>
      <parentid>45277</parentid>
      <timestamp>2013-11-29T21:54:15Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>p4er8lt0yoiek393icmzqi2l2hup0i8</sha1>
      <text xml:space="preserve" bytes="1734">
&lt;!--T:1--&gt;
FreeCAD can be installed on Mac OS X in one step using the Installer. &lt;br&gt;
{{DownloadMacStable}}&lt;br&gt;
This page describes the usage and features of the FreeCAD installer. It also includes uninstallation instructions.
Once installed, you can [[Getting started |get started]]!

=== Simple Installation === &lt;!--T:2--&gt;
The FreeCAD installer is provided as a Installer package (.mpkg) enclosed in a disk image file.

&lt;!--T:3--&gt;
You can download the latest installer from the [[Download]] page. After downloading the file, just mount the disk image, then run the '''Install FreeCAD''' package.

&lt;!--T:4--&gt;
[[File:mac_installer_1.png]]

&lt;!--T:5--&gt;
The installer will present you with a '''Customize Installation''' screen that lists the packages that will be installed. If you know that you already have any of these packages, you can deselect them using the checkboxes. If you're not sure, just leave all items checked.

&lt;!--T:6--&gt;
[[File:mac_installer_2.png]]

=== Uninstallation === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
There currently isn't an uninstaller for FreeCAD. To completely remove FreeCAD and all installed components, drag the following  files and folders to the Trash:

&lt;!--T:9--&gt;
*In /Applications:
**FreeCAD

&lt;!--T:10--&gt;
*in /Library/Frameworks/
**SoQt.framework
**Inventor.framework

&lt;!--T:11--&gt;
Then, from the terminal, run:

 sudo /Developer/Tools/uninstall-qt.py
 sudo rm -R /usr/local/lib/OCC
 sudo rm -R /usr/local/include/OCC

&lt;!--T:12--&gt;
That's it. Eventually, FreeCAD will be available as a self-contained application bundle so all this hassle will go away.

&lt;!--T:13--&gt;
{{docnav|Install on Unix|Getting started}}

&lt;!--T:14--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Install on Unix</title>
    <ns>0</ns>
    <id>60</id>
    <revision>
      <id>95028</id>
      <parentid>90133</parentid>
      <timestamp>2014-07-09T03:45:24Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Removed Pyside installation from Ubunut section (not required anymore)</comment>
      <sha1>crxa63gz0ojmdwmd9crbnq3w38qd3pj</sha1>
      <text xml:space="preserve" bytes="4899">
&lt;!--T:1--&gt;
The installation of FreeCAD on the most well-known linux systems has been now endorsed by the community, and FreeCAD should be directly available via the package manager available on your distribution. The FreeCAD team also provides a couple of &quot;official&quot; packages when new releases are made, and a couple of experimental PPA repositories for testing bleeding-edge features.

&lt;!--T:2--&gt;
Once you've got FreeCAD installed, it's time to [[Getting started|get started]]!

==Ubuntu and Ubuntu-based systems== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
Many Linux distributions are based on Ubuntu and share its repositories. Besides official variants (Kubuntu, Lubuntu and Xubuntu), there are non official distros such as Linux Mint, Voyager and others. The installation options below should be compatible to these systems.

=== Official Ubuntu repository === &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
FreeCAD is available from Ubuntu repositories and can be installed via the Software Center or with this command in a terminal:
 sudo apt-get install freecad
But chances are this version will be outdated, and not have the latest features.

=== Latest Stable Release from the PPA === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
The FreeCAD community provides a [https://launchpad.net/~freecad-maintainers/+archive/freecad-stable PPA repository on Launchpad] with the latest stable FreeCAD version.

==== Installing from the GUI ==== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Add to your system's Software Sources the following PPA (read [http://askubuntu.com/questions/4983/what-are-ppas-and-how-do-i-use-them/5102#5102%29 What are PPAs and how do I use them?] if you don't know how):

 ppa:freecad-maintainers/freecad-stable

&lt;!--T:11--&gt;
When a dialog window asks you to refresh your software sources, click OK.

&lt;!--T:12--&gt;
Now you can install FreeCAD and FreeCAD documentation through the Ubuntu Software Center, or your package manager of choice.

==== Installing from the console ==== &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
Type (or copy-paste) these commands in a console to add the PPA and install FreeCAD along with the documentation:

 sudo add-apt-repository ppa:freecad-maintainers/freecad-stable

&lt;!--T:15--&gt;
Then:

 sudo apt-get update
 sudo apt-get upgrade
 sudo apt-get install freecad freecad-doc

=== Unstable version of FreeCAD === &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
If you want to be on the bleeding edge of FreeCAD development, there is a different PPA repository providing [http://www.freecadweb.org/wiki/index.php?title=Download#Ubuntu_PPA_packages daily builds].

==Debian and other debian-based systems== &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
Since Debian Lenny, FreeCAD is available directly from the Debian software repositories and can be installed via synaptic or simply with:

 sudo apt-get install freecad

==OpenSUSE== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
FreeCAD is typically installed with:

 zypper install FreeCAD

==Gentoo== &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
FreeCAD can be built/installed simply by issuing:

 emerge freecad

==Other== &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
If you find out that your system features FreeCAD but is not documented in this page, please tell us on the [http://forum.freecadweb.org/viewforum.php?f=21 forum]!

&lt;!--T:26--&gt;
Many alternative, non-official FreeCAD packages are available on the net, for example for systems like slackware or fedora. A search on the net can quickly give you some results.

===Manual install on .deb based systems=== &lt;!--T:27--&gt;

&lt;!--T:28--&gt;
If for some reason you cannot use one of the above methods, you can always download one of the .deb packages available on the [[Download]] page. &lt;br /&gt;
{{DownloadUnixStable}} 

&lt;!--T:29--&gt;
Once you downloaded the .deb corresponding to your system version, if you have the [[wikipedia:Gdebi|Gdebi]] package installed (usually it is), you just need to navigate to where you downloaded the file, and double-click on it. The necessary dependencies will be taken care of automatically by your system package manager.
Alternatively you can also install it from the terminal, navigating to where you downloaded the file, and type:

 sudo dpkg -i Name_of_your_FreeCAD_package.deb

&lt;!--T:30--&gt;
changing Name_of_your_FreeCAD_package.deb by the name of the file you downloaded.

&lt;!--T:31--&gt;
After you installed FreeCAD, a startup icon will be added in the &quot;Graphic&quot; section of your Start Menu.

===Installing on other Linux/Unix systems=== &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
Unfortnately, at the moment, no precompiled package is available for other Linux/Unix systems,so you will need to [[CompileOnUnix|compile FreeCAD yourself]].

===Installing Windows Version on Linux=== &lt;!--T:34--&gt;
See the [[Install on Windows]] page.

&lt;!--T:35--&gt;
{{docnav|Install on Windows|Install on Mac}}

&lt;!--T:36--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Install on Windows</title>
    <ns>0</ns>
    <id>61</id>
    <revision>
      <id>45156</id>
      <parentid>45155</parentid>
      <timestamp>2013-11-29T21:43:10Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fweslfnxbopr10no1sejf39kcw6s1jq</sha1>
      <text xml:space="preserve" bytes="7234">
&lt;!--T:1--&gt;
The easiest way to install FreeCAD on Windows is to download the installer below. &lt;br&gt;
{{DownloadWindowsStable}}

&lt;!--T:2--&gt;
After downloading the .msi (Microsoft Installer) file, just double-click on it to start the installation process.

&lt;!--T:3--&gt;
Below is more information about technical options.  If it looks daunting, don't worry! Most Windows users will not need anything more than the .msi to install FreeCAD and '''[[Getting started | Get started]]'''!


=== Simple Microsoft Installer Installation === &lt;!--T:4--&gt;
The easiest way to '''install FreeCAD on Windows''' is by using the installer above. This page describes the usage and the features of the ''Microsoft Installer'' for more installation options.

&lt;!--T:5--&gt;
If you would like to download either a 64 bit or unstable development version, see the [[Download]] page.


=== Command Line Installation === &lt;!--T:6--&gt;
With the ''msiexec.exe'' command line utility, additional features are available, like non-interactive installation and administrative installation.

==== Non-interactive Installation ==== &lt;!--T:7--&gt;
With the command line

  msiexec /i FreeCAD&lt;version&gt;.msi

&lt;!--T:8--&gt;
installation can be initiated programmatically. Additional parameters can be passed at the end of this command line, like

  msiexec /i FreeCAD-2.5.msi TARGETDIR=r:\FreeCAD25

==== Limited user interface ==== &lt;!--T:9--&gt;
The amount of user interface that installer displays can be controlled with /q options, in particular:

&lt;!--T:10--&gt;
* /qn - No interface
* /qb - Basic interface - just a small progress dialog
* /qb! - Like /qb, but hide the Cancel button
* /qr - Reduced interface - display all dialogs that don't require user interaction (skip all modal dialogs)
* /qn+ - Like /qn, but display &quot;Completed&quot; dialog at the end
* /qb+ - Like /qb, but display &quot;Completed&quot; dialog at the end 

==== Target directory ==== &lt;!--T:11--&gt;
The property TARGETDIR determines the root directory of the FreeCAD installation. For example, a different installation drive can be specified with

 TARGETDIR=R:\FreeCAD25

&lt;!--T:12--&gt;
The default TARGETDIR is [WindowsVolume\Programm Files\]FreeCAD&lt;version&gt;.

==== Installation for All Users ==== &lt;!--T:13--&gt;
Adding

  ALLUSERS=1

&lt;!--T:14--&gt;
causes an installation for all users. By default, the non-interactive installation install the package just for the current user, and the interactive installation offers a dialog which defaults to &quot;all users&quot; if the user is sufficiently privileged.

==== Feature Selection ==== &lt;!--T:15--&gt;
A number of properties allow selection of features to be installed, reinstalled, or removed. The set of features for the FreeCAD installer is

&lt;!--T:16--&gt;
* DefaultFeature - install the software proper, plus the core libraries
* Documentation - install documentation
* Source code - install the sources 
* ... ToDo

&lt;!--T:17--&gt;
In addition, ALL specifies all features. All features depend on DefaultFeature, so installing any feature automatically installs the default feature as well. The following properties control features to be installed or removed

&lt;!--T:18--&gt;
* ADDLOCAL - list of feature to be installed on the local machine
* REMOVE - list of features to be removed
* ADDDEFAULT - list of features added in their default configuration (which is local for all FreeCAD features)
* REINSTALL - list of features to be reinstalled/repaired
* ADVERTISE - list of feature for which to perform an advertise installation 

&lt;!--T:19--&gt;
There are a few additional properties available; see the MSDN documentation for details.

&lt;!--T:20--&gt;
With these options, adding

  ADDLOCAL=Extensions

&lt;!--T:21--&gt;
installs the interpreter itself and registers the extensions, but does not install anything else.

=== Uninstallation === &lt;!--T:22--&gt;
With

  msiexec /x FreeCAD&lt;version&gt;.msi

&lt;!--T:23--&gt;
FreeCAD can be uninstalled. It is not necessary to have the MSI file available for uninstallation; alternatively, the package or product code can also be specified. You can find the product code by looking at the properties of the Uninstall shortcut that FreeCAD installs in the start menu.

=== Administrative installation === &lt;!--T:24--&gt;
With

  msiexec /a FreeCAD&lt;version&gt;.msi

&lt;!--T:25--&gt;
an &quot;administrative&quot; (network) installation can be initiated. The files get unpacked into the target directory (which should be a network directory), but no other modification is made to the local system. In addition, another (smaller) msi file is generated in the target directory, which clients can then use to perform a local installation (future versions may also offer to keep some features on the network drive altogether).

&lt;!--T:26--&gt;
Currently, there is no user interface for administrative installations, so the target directory must be passed on the command line.

&lt;!--T:27--&gt;
There is no specific uninstall procedure for an administrative install - just delete the target directory if no client uses it anymore.

=== Advertisement === &lt;!--T:28--&gt;
With

  msiexec /jm FreeCAD&lt;version&gt;.msi

&lt;!--T:29--&gt;
it would be possible, in principle, to &quot;advertise&quot; FreeCAD to a machine (with /ju to a user). This would cause the icons to appear in the start menu, and the extensions to become registered, without the software actually being installed. The first usage of a feature would cause that feature to be installed.

&lt;!--T:30--&gt;
The FreeCAD installer currently supports just advertisement of start menu entries, but no advertisement of shortcuts.

=== Automatic Installation on a Group of Machines === &lt;!--T:31--&gt;
With Windows Group Policy, it is possible to automatically install FreeCAD an a group of machines. To do so, perform the following steps:
#Log on to the domain controller
#Copy the MSI file into a folder that is shared with access granted to all target machines.
#Open the MMC snapin &quot;Active Directory users and computers&quot;
#Navigate to the group of computers that need FreeCAD
#Open Properties
#Open Group Policies
#Add a new policy, and edit it
#In Computer Configuration/Software Installation, choose New/Package
#Select the MSI file through the network path
#Optionally, select that you want the FreeCAD to be deinstalled if the computer leaves the scope of the policy. 

&lt;!--T:32--&gt;
Group policy propagation typically takes some time - to reliably deploy the package, all machines should be rebooted.

=== Installation on Linux using Crossover Office === &lt;!--T:33--&gt;

&lt;!--T:34--&gt;
You can install the windows version of FreeCAD on a Linux system using ''CXOffice 5.0.1''.  Run ''msiexec'' from the CXOffice command line, assuming that the install package is placed in the &quot;software&quot; directory which is mapped to the drive letter &quot;Y:&quot;:
 msiexec /i Y:\\software\\FreeCAD&lt;version&gt;.msi
FreeCAD is running, but it has been reported that the OpenGL display does not work, like with other programs running under [[wikipedia:Wine (software)|Wine]] i.e. Google [[wikipedia:SketchUp|SketchUp]].

&lt;!--T:35--&gt;
{{docnav|Feature list|Install on Unix}}

&lt;!--T:36--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Installation sous Mac</title>
    <ns>0</ns>
    <id>853</id>
    <revision>
      <id>107986</id>
      <parentid>90996</parentid>
      <timestamp>2014-09-01T12:22:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Installation sous Windows</title>
    <ns>0</ns>
    <id>849</id>
    <revision>
      <id>107987</id>
      <parentid>90997</parentid>
      <timestamp>2014-09-01T12:22:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Installieren auf Mac</title>
    <ns>0</ns>
    <id>1267</id>
    <revision>
      <id>107989</id>
      <parentid>95794</parentid>
      <timestamp>2014-09-01T12:23:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Installieren auf Windows</title>
    <ns>0</ns>
    <id>1269</id>
    <revision>
      <id>107990</id>
      <parentid>95795</parentid>
      <timestamp>2014-09-01T12:24:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Installing</title>
    <ns>0</ns>
    <id>627</id>
    <revision>
      <id>83996</id>
      <parentid>83995</parentid>
      <timestamp>2014-05-16T22:50:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a7c8xzixo6htm5qf3bhde5662hhzytd</sha1>
      <text xml:space="preserve" bytes="959">
==Choose Your Operating System== &lt;!--T:1--&gt;
FreeCAD is a truly multi-platform application, developed with the world-renowned [http://en.wikipedia.org/wiki/Qt_(framework) Qt] framework.  What that means is that FreeCAD looks and acts the same on Windows, Linux and Mac.  However, the installation procedure is a little different for each Operating system.  Choose your Operating system below for more details about how to install FreeCAD.
{| align='center' width=50%
|align=center|[[Image:Windows.png | alt='Windows' | link= Install on Windows]]
|align=center|[[Image:Linux.png   | alt='Linux' | link= Install on Unix]]
|align=center|[[Image:Mac.png     | alt='Mac' | link= Install on Mac]] 
|-
|align=center|[[Install on Windows]]
|align=center|[[Install on Unix | Install on Linux/Unix]]
|align=center|[[Install on Mac]]
|}

&lt;!--T:2--&gt;
{{Docnav|About FreeCAD|Getting started}}

&lt;!--T:3--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Installing more workbenches</title>
    <ns>0</ns>
    <id>62</id>
    <revision>
      <id>129339</id>
      <parentid>129338</parentid>
      <timestamp>2014-12-06T20:39:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>cm3e9wx6a0gepwpfyf72fblqkiqz163</sha1>
      <text xml:space="preserve" bytes="2303">
&lt;!--T:1--&gt;
Outside the standard workbenches that are bundled with every FreeCAD installation, it is very easy to add other workbenches that extend FreeCAD functionality. At the moment, since FreeCAD is very young, there is almost no other workbench availible. But FreeCAD has been made extensible right from the start, so adding new workbenches is very easy, and in the future several new workbench should appear.

&lt;!--T:2--&gt;
Extra workbenches are delivered in a folder, that must simply be copied into one of FreeCAD's '''Mod''' directory. The Mod directories are scanned everytime FreeCAD is started and the availible workbenches automatically added. There are two ways of installing:

===Installing system-wide=== &lt;!--T:3--&gt;
Extra workbenches, or modules, can be installed inside your FreeCAD installation directory, so they will be availible to all users. Depending on your system, you might need administrator or superuser privileges to access the FreeCAD installation directory.

&lt;!--T:4--&gt;
Copy or move the folder containing your workbench to the &quot;Mod&quot; directory that lies inside your FreeCAD installation directory. On Windows, it will probably be something like '''C:\Program Files\FreeCAD\Mod''', on Debian-based systems something like '''/usr/lib/FreeCAD/Mod'''

===Installing user-wide=== &lt;!--T:5--&gt;
Workbenches installed that way will be availible only to you, and not to the other users of your system. But it will not require any administrator or superuser privileges.

&lt;!--T:6--&gt;
Copy or move the folder containing your workbench to the &quot;Mod&quot; directory that lies inside your FreeCAD user directory. On Windows, it will be something like '''C:\Users\your_user_name\Application Data\FreeCAD\Mod''', on Linux systems it will be '''~/.FreeCAD/Mod''' where ~ is your user's home directory. On Mac OSX the &quot;Mod&quot; directory should be '''~/Library/Preferences/FreeCAD/Mod'''.  One way to get to the FreeCAD preferences directory on Mac is to use the Finder menu item Go-&gt;Go to Folder... and then enter &quot;~/Library/Preferences/FreeCAD&quot;.



&lt;!--T:7--&gt;
Extra information about how to create a custom workbench can be found on the [[Developer hub]] and on the [[Power users hub]].

&lt;!--T:8--&gt;
[[Category:Developer]]
[[Category:Poweruser_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Interesting links</title>
    <ns>0</ns>
    <id>63</id>
    <revision>
      <id>124966</id>
      <parentid>85399</parentid>
      <timestamp>2014-11-24T20:48:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>m1n0pykq4745s9kr8mjfwf4r4ofq42s</sha1>
      <text xml:space="preserve" bytes="4716">
&lt;!--T:1--&gt;
This page contains some maybe useful links to other FLOSS resources and project in this area.

== FreeCAD on the net == &lt;!--T:2--&gt;

=== Specific platform pages related to FreeCAD === &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
* [http://sourceforge.net/projects/free-cad SourceForge] The FreeCAD project page on SourceForge
* [http://www.ohloh.net/p/freecad Ohloh] Ohloh statistics for the FreeCAD project
* [http://cia.vc/stats/project/free-cad Cia] CIA activity tracking for FreeCAD
* [http://packages.debian.org/freecad Debian] Debian package info
* [http://packages.ubuntu.com/freecad Ubuntu] Ubuntu package info
* [http://slackbuilds.org/repository/13.1/graphics/FreeCAD/ Slackware] Slackware package info
* [http://gpo.zugaina.org/media-gfx/freecad Gentoo] Gentoo package info
* [http://packman.links2linux.org/package/FreeCAD OpenSuse/Fedora] Packman package info
* [irc://chat.freenode.net/#freecad Freenode] The official #freecad IRC channel on Freenode
* [http://www.facebook.com/FreeCAD Facebook] The official FreeCAD facebook page
* [https://svn.pardus.org.tr/pardus/playground/kaan.aksit/2011/freecad/actions.py Pardus Linux build script]

=== Other CAD Projects === &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* [http://openplm.org/ OpenPLM] An open-source, web-based PLM collaborative platform
* [http://brlcad.org/ BRL CAD] Big Open Source package, a bit old fashion
* [https://github.com/Heeks Heekscad] a CAD/CAM application based on OpenCasCade and WxWidgets
* [http://narocad.com/ Narocad] another OpenCasCade-based project, windows-only
* [http://www.salome-platform.org/ Salome] more a FEM system but have also a modeling part
* [http://www.pythonocc.org/ PythonOCC] complete python bindings for OpenCasCade, with own GUI builder
* [http://pythoncad.sourceforge.net/dokuwiki/doku.php PythonCAD] a simple 2D CAD application programmed in python
* [http://librecad.org/cms/home.html LibreCAD] a 2D CAD project based on [http://www.qcad.org QCad]

== Tutorials == &lt;!--T:7--&gt;

=== Written tutorials === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* [[Image:Flag-pl.jpg|Article is written in Polish]] [http://wkupiesila.blogspot.com/2009/12/rozgryzamy-freecad-krok-po-kroku.html#googtrans/pl/en Introduction to FreeCAD]
* [[Image:Flag-pl.jpg|Article is written in Polish]] [http://wkupiesila.blogspot.com/2009/12/freecad-poznajemy-klawisz-f5.html#googtrans/pl/en Parametric modeling at work]
* [[Image:Flag-pl.jpg|Article is written in Polish]] [http://wkupiesila.blogspot.com/2010/05/freecad-i-python-od-linii-polecen-do.html#googletrans/pl/en Python scripting in FreeCAD]

=== Video tutorials === &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
* [http://www.youtube.com/watch?v=Q7cG-LQK8Ps FreeCAD's Draft module tutorial]
* [http://www.youtube.com/watch?v=LOAxc1StGW8 FreeCAD parametric modeling]
* [http://www.youtube.com/watch?v=GFuyF78QLGc Making a 2D drawing from a 3D model]
* [http://www.youtube.com/watch?v=hyBlOL_MFlY Creating a &quot;mushroom&quot;]
* [http://www.youtube.com/watch?v=xnlEVKAtFYw Creating arrays with python]
* [http://www.youtube.com/watch?v=SanPyZhLq6w Using FreeCAD with OpenPLM]

=== Other articles about FreeCAD === &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* [http://yorik.uncreated.net/guestblog.php?2010=120 A peek at what's coming in 0.11 version]
* [http://yorik.uncreated.net/guestblog.php?2010=122 Working like Generative Components in FreeCAD]
* [http://yorik.uncreated.net/guestblog.php?2010=125 The Draft module's new SVG output capabilities]

== Advanced == &lt;!--T:14--&gt;

=== Research === &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
* [http://www.plasm.net/ PLaSM] &quot;Functional language for computing with geometry&quot;

=== FEM === &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
* [http://www.calculix.de/ Calculix] our favorite for FEM in FreeCAD
* [http://www.salome-platform.org/ Salome] FEM system with complicated design
* [http://z88.uni-bayreuth.de/english.html Z88] is a fast, powerful and compact Finite Elements Analysis Program especially designed for PCs running LINUX, workstations and large computers with UNIX and PCs with Windows XP/95. Z88 is a work of Prof. Dr.-Ing. Frank Rieg of University of Bayreuth. License: GPL

=== Math === &lt;!--T:19--&gt;

==== Python ==== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
* [http://numpy.scipy.org/ NumPy] Scientific computing with Python (basic commands very similar to MATLAB)
* [http://matplotlib.sourceforge.net/ matplotlib] Python 2D plotting library (usually used in conjunction with [http://numpy.scipy.org/ NumPy])

====Other==== &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
* [http://www.gnu.org/software/octave/ Octave] powerful MATLAB clone

== FreeCAD-related stuff! == &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
Another page that contains interesting links is [[FreeCAD Community Portal|Community Portal]]

&lt;!--T:26--&gt;
[[Category:Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Interface Customization</title>
    <ns>0</ns>
    <id>386</id>
    <revision>
      <id>131609</id>
      <parentid>131499</parentid>
      <timestamp>2014-12-14T21:28:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3ikp8stb433zr3nwuturnde9ypw1zn2</sha1>
      <text xml:space="preserve" bytes="1284">
&lt;!--T:1--&gt;
Since FreeCAD interface is based on the modern [http://en.wikipedia.org/wiki/Qt_(toolkit) Qt] toolkit, it has a state-of-the-art organization. Widgets, menus, toolbars and other tools can be modified, moved, shared between workbenches, keyboard shortcuts can be set, modified, and macros can be recorded and played. The customization window is accessed from the '''Tools -&gt; Customize''' menu:

&lt;!--T:2--&gt;
[[Image:Screenshot-customize.jpg]]

&lt;!--T:3--&gt;
The '''Commands''' tab lets you browse all available FreeCAD commands, organized by their category. 

&lt;!--T:4--&gt;
In '''Keyboard''', you can see the keyboard shortcuts associated with every FreeCAD command, and if you want, modify or assign new shortcut to any command. This is where to come if you use a particular workbench often, and would like to speed up its use by using the keyboard. 

&lt;!--T:5--&gt;
The '''Toolbars''' and '''Toolbox bars''' tabs let you modify existing toolbars, or create your own custom toolbars.

&lt;!--T:6--&gt;
The '''Macros''' tab lets you manage your saved [[Macros]].

&lt;!--T:9--&gt;
Create your ToolBars for your macro [[Customize_ToolsBar|Customize ToolsBar]]

&lt;!--T:7--&gt;
{{docnav|Preferences Editor|Property editor}}

&lt;!--T:8--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Introduction to Python</title>
    <ns>0</ns>
    <id>458</id>
    <revision>
      <id>133619</id>
      <parentid>133465</parentid>
      <timestamp>2014-12-27T10:22:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rh8o3sk9ta6muopp40fmzfyf6fclhse</sha1>
      <text xml:space="preserve" bytes="25005">
&lt;!--T:87--&gt;
This is a short tutorial made for who is totally new to Python. [http://en.wikipedia.org/wiki/Python_%28programming_language%29 Python] is an open-source, multiplatform [http://en.wikipedia.org/wiki/Programming_language programming language]. Python has several features that make it very different than other common programming languages, and very accessible to new users like yourself: 

&lt;!--T:88--&gt;
*It has been designed specially to be easy to read by human beings, and so it is very easy to learn and understand.
*It is interpreted, that is, unlike compiled languages like C, your program doesn't need to be compiled before it is executed. The code you write can be immediately executed, line by line if you want so. This makes it extremely easy to learn and to find errors in your code, because you go slowly, step-by-step.
*It can be embedded in other programs to be used as scripting language. FreeCAD has an embedded Python interpreter, so you can write Python code in FreeCAD, that will manipulate parts of FreeCAD, for example to create geometry. This is extremely powerful, because instead of just clicking a button labeled &quot;create sphere&quot;, that a programmer has placed there for you, you have the freedom to create easily your own tool to create exactly the geometry you want.
*It is extensible, you can easily plug new modules in your Python installation and extend its functionality. For example, you have modules that allow Python to read and write jpg images, to communicate with twitter, to schedule tasks to be performed by your operating system, etc.

&lt;!--T:89--&gt;
So, hands on! Be aware that what will come next is a very simple introduction, by no means a complete tutorial. But my hope is that after that you'll get enough basics to explore deeper into the FreeCAD mechanisms.

==The interpreter== &lt;!--T:90--&gt;

&lt;!--T:91--&gt;
Usually, when writing computer programs, you simply open a text editor or your special programming environment which is in most case a text editor with several tools around it, write your program, then compile it and execute it. Most of the time you made errors while writing, so your program won't work, and you will get an error message telling you what went wrong. Then you go back to your text editor, correct the mistakes, run again, and so on until your program works fine.

&lt;!--T:92--&gt;
That whole process, in Python, can be done transparently inside the Python interpreter. The interpreter is a Python window with a command prompt, where you can simply type Python code. If you install Python on your computer (download it from the [http://www.python.org Python website] if you are on Windows or Mac, install it from your package repository if you are on GNU/Linux), you will have a Python interpreter in your start menu. But FreeCAD also has a Python interpreter in its bottom part:

&lt;!--T:93--&gt;
[[Image:Screenshot_pythoninterpreter.jpg]]

&lt;!--T:94--&gt;
(If you don't have it, click on View ? Views ? Python console.)

&lt;!--T:95--&gt;
The interpreter shows the Python version, then a &gt;&gt;&gt; symbol, which is the command prompt, that is, where you enter Python code. Writing code in the interpreter is simple: one line is one instruction. When you press Enter, your line of code will be executed (after being instantly and invisibly compiled). For example, try writing this:

{{Code|code=
print &quot;hello&quot;
}}

&lt;!--T:96--&gt;
&lt;code&gt;print&lt;/code&gt; is a special Python keyword that means, obviously, to print something on the screen. When you press Enter, the operation is executed, and the message &quot;hello&quot; is printed. If you make an error, for example let's write:

{{Code|code=
print hello
}}

&lt;!--T:97--&gt;
Python will tell us that it doesn't know what hello is. The &quot; characters specify that the content is a string, which is simply, in programming jargon, a piece of text. Without the &quot;, the print command believed hello was not a piece of text but a special Python keyword. The important thing is, you immediately get notified that you made an error. By pressing the up arrow (or, in the FreeCAD interpreter, CTRL+up arrow), you can go back to the last command you wrote and correct it.

&lt;!--T:98--&gt;
The Python interpreter also has a built-in help system. Try typing:

{{Code|code=
help
}}

&lt;!--T:99--&gt;
or, for example, let's say we don't understand what went wrong with our print hello command above, we want specific information about the &quot;print&quot; command:

{{Code|code=
help(&quot;print&quot;)
}}

&lt;!--T:100--&gt;
You'll get a long and complete description of everything the print command can do.

&lt;!--T:101--&gt;
Now we dominate totally our interpreter, we can begin with serious stuff.

==Variables== &lt;!--T:102--&gt;

&lt;!--T:103--&gt;
Of course, printing &quot;hello&quot; is not very interesting. More interesting is printing stuff you don't know before, or let Python find for you. That's where the concept of variable comes in. A variable is simply a value that you store under a name. For example, type this:

{{Code|code=
a = &quot;hello&quot;
print a
}}

&lt;!--T:104--&gt;
I guess you understood what happened, we &quot;saved&quot; the string &quot;hello&quot; under the name a. Now, a is not an unknown name anymore! We can use it anywhere, for example in the print command. We can use any name we want, just respecting simple rules, like not using spaces or punctuation. For example, we could very well write:

{{Code|code=
hello = &quot;my own version of hello&quot;
print hello
}}

&lt;!--T:105--&gt;
See? now hello is not an undefined word anymore. What if, by terrible bad luck, we choosed a name that already exists in Python? Let's say we want to store our string under the name &quot;print&quot;:

{{Code|code=
print = &quot;hello&quot;
}}

&lt;!--T:106--&gt;
Python is very intelligent and will tell us that this is not possible. It has some &quot;reserved&quot; keywords that cannot be modified. But our own variables can be modified anytime, that's exactly why they are called variables, the contents can vary. For example:

{{Code|code=
myVariable = &quot;hello&quot;
print myVariable
myVariable = &quot;good bye&quot;
print myVariable
}}

&lt;!--T:107--&gt;
We changed the value of myVariable. We can also copy variables:

{{Code|code=
var1 = &quot;hello&quot;
var2 = var1
print var2
}}

&lt;!--T:108--&gt;
Note that it is interesting to give good names to your variables, because when you'll write long programs, after a while you won't remember what your variable named &quot;a&quot; is for. But if you named it for example myWelcomeMessage, you'll remember easily what it is used for when you'll see it.

==Numbers== &lt;!--T:109--&gt;

&lt;!--T:110--&gt;
Of course you must know that programming is useful to treat all kind of data, and especially numbers, not only text strings. One thing is important, Python must know what kind of data it is dealing with. We saw in our print hello example, that the print command recognized our &quot;hello&quot; string. That is because by using the &quot;, we told specifically the print command that what it would come next is a text string.

&lt;!--T:111--&gt;
We can always check what data type is the contents of a variable with the special Python keyword type:

{{Code|code=
myVar = &quot;hello&quot;
type(myVar)
}}

&lt;!--T:112--&gt;
It will tell us the contents of myVar is 'str', or string in Python jargon. We have also other basic types of data, such as integer and float numbers:

{{Code|code=
firstNumber = 10
secondNumber = 20
print firstNumber + secondNumber
type(firstNumber)
}}

&lt;!--T:113--&gt;
This is already much more interesting, isn't it? Now we already have a powerful calculator! Look well at how it worked, Python knows that 10 and 20 are integer numbers. So they are stored as &quot;int&quot;, and Python can do with them everything it can do with integers. Look at the results of this:

{{Code|code=
firstNumber = &quot;10&quot;
secondNumber = &quot;20&quot;
print firstNumber + secondNumber
}}

&lt;!--T:114--&gt;
See? We forced Python to consider that our two variables are not numbers but mere pieces of text. Python can add two pieces of text together, but it won't try to find out any sum. But we were talking about integer numbers. There are also float numbers. The difference is that integer numbers don't have decimal part, while foat numbers can have a decimal part:

{{Code|code=
var1 = 13
var2 = 15.65
print &quot;var1 is of type &quot;, type(var1)
print &quot;var2 is of type &quot;, type(var2)
}}

&lt;!--T:115--&gt;
Int and Floats can be mixed together without problem:

{{Code|code=
total = var1 + var2
print total
print type(total)
}}

&lt;!--T:116--&gt;
Of course the total has decimals, right? Then Python automatically decided that the result is a float. In several cases such as this one, Python automatically decides what type to give to something. In other cases it doesn't. For example:

{{Code|code=
varA = &quot;hello 123&quot;
varB = 456
print varA + varB
}}

&lt;!--T:117--&gt;
This will give us an error, varA is a string and varB is an int, and Python doesn't know what to do. But we can force Python to convert between types:

{{Code|code=
varA = &quot;hello&quot;
varB = 123
print varA + str(varB)
}}

&lt;!--T:118--&gt;
Now both are strings, the operation works! Note that we &quot;stringified&quot; varB at the time of printing, but we didn't change varB itself. If we wanted to turn varB permanently into a string, we would need to do this:

{{Code|code=
varB = str(varB)
}}

&lt;!--T:119--&gt;
We can also use int() and float() to convert to int and float if we want:

{{Code|code=
varA = &quot;123&quot;
print int(varA)
print float(varA)
}}

&lt;!--T:120--&gt;
'''Note on Python commands'''

&lt;!--T:121--&gt;
You must have noticed that in this section we used the print command in several ways. We printed variables, sums, several things separated by commas, and even the result of other Python command such as type(). Maybe you also saw that doing those two commands:

{{Code|code=
type(varA)
print type(varA)
}}

&lt;!--T:122--&gt;
have exactly the same result. That is because we are in the interpreter, and everything is automatically printed on screen. When we'll write more complex programs that run outside the interpreter, they won't print automatically everything on screen, so we'll need to use the print command. But from now on, let's stop using it here, it'll go faster. So we can simply write:

{{Code|code=
myVar = &quot;hello friends&quot;
myVar
}}

&lt;!--T:123--&gt;
You must also have seen that most of the Python commands (or keywords) we already know have parenthesis used to tell them on what contents the command must work: type(), int(), str(), etc. Only exception is the print command, which in fact is not an exception, it also works normally like this: print(&quot;hello&quot;), but, since it is used often, the Python programmers made a simplified version.

==Lists== &lt;!--T:124--&gt;

&lt;!--T:125--&gt;
Another interesting data type is lists. A list is simply a list of other data. The same way as we define a text string by using &quot; &quot;, we define lists by using [ ]:

{{Code|code=
myList = [1,2,3]
type(myList)
myOtherList = [&quot;Bart&quot;, &quot;Frank&quot;, &quot;Bob&quot;]
myMixedList = [&quot;hello&quot;, 345, 34.567]
}}

&lt;!--T:126--&gt;
You see that it can contain any type of data. Lists are very useful because you can group variables together. You can then do all kind of things within that groups, for example counting them:

{{Code|code=
len(myOtherList)
}}

&lt;!--T:127--&gt;
or retrieving one item of a list:

{{Code|code=
myName = myOtherList[0]
myFriendsName = myOtherList[1]
}}

&lt;!--T:128--&gt;
You see that while the len() command returns the total number of items in a list, their &quot;position&quot; in the list begins with 0. The first item in a list is always at position 0, so in our myOtherList, &quot;Bob&quot; will be at position 2. We can do much more stuff with lists such as you can read [http://www.diveintopython.net/native_data_types/lists.html here], such as sorting contents, removing or adding elements.

&lt;!--T:129--&gt;
A funny and interesting thing for you: a text string is very similar to a list of characters! Try doing this:

{{Code|code=
myvar = &quot;hello&quot;
len(myvar)
myvar[2]
}}

&lt;!--T:130--&gt;
Usually all you can do with lists can also be done with strings. In fact both lists and strings are sequences.

&lt;!--T:131--&gt;
Outside strings, ints, floats and lists, there are more built-in data types, such as [http://www.diveintopython.net/native_data_types/index.html#d0e5174 dictionnaries], or you can even create your own data types with [http://www.freenetpages.co.uk/hp/alan.gauld/tutclass.htm classes].

==Indentation== &lt;!--T:132--&gt;

&lt;!--T:133--&gt;
One big cool use of lists is also browsing through them and do something with each item. For example look at this:

{{Code|code=
alldaltons = [&quot;Joe&quot;, &quot;William&quot;, &quot;Jack&quot;, &quot;Averell&quot;]
for dalton in alldaltons:
   print dalton + &quot; Dalton&quot;
}}

&lt;!--T:134--&gt;
We iterated (programming jargon again!) through our list with the &quot;for ... in ...&quot; command and did something with each of the items. Note the special syntax: the for command terminates with : which indicates that what will comes after will be a block of one of more commands. Immediately after you enter the command line ending with :, the command prompt will change to ... which means Python knows that a :-ended line has happened and that what will come next will be part of it. 

&lt;!--T:135--&gt;
How will Python know how many of the next lines will be to be executed inside the for...in operation? For that, Python uses indentation. That is, your next lines won't begin immediately. You will begin them with a blank space, or several blank spaces, or a tab, or several tabs. Other programming languages use other methods, like putting everythin inside parenthesis, etc.
As long as you write your next lines with the '''same''' indentation, they will be considered part of the for-in block. If you begin one line with 2 spaces and the next one with 4, there will be an error.
When you finished, just write another line without indentation, or simply press Enter to come back from the for-in block

&lt;!--T:136--&gt;
Indentation is cool because if you make big ones (for example use tabs instead of spaces because it's larger), when you write a big program you'll have a clear view of what is executed inside what. We'll see that many other commands than for-in can have indented blocks of code too.

&lt;!--T:137--&gt;
For-in commands can be used for many things that must be done more than once. It can for example be combined with the range() command:

{{Code|code=
serie = range(1,11)
total = 0
print &quot;sum&quot;
for number in serie:
   print number
   total = total + number
print &quot;----&quot;
print total
}}

&lt;!--T:138--&gt;
Or more complex things like this:

{{Code|code=
alldaltons = [&quot;Joe&quot;, &quot;William&quot;, &quot;Jack&quot;, &quot;Averell&quot;]
for n in range(4):
   print alldaltons[n], &quot; is Dalton number &quot;, n
}}

&lt;!--T:139--&gt;
You see that the range() command also has that strange particularity that it begins with 0 (if you don't specify the starting number) and that its last number will be one less than the ending number you specify. That is, of course, so it works well with other Python commands. For example:

{{Code|code=
alldaltons = [&quot;Joe&quot;, &quot;William&quot;, &quot;Jack&quot;, &quot;Averell&quot;]
total = len(alldaltons)
for n in range(total):
   print alldaltons[n]
}}

&lt;!--T:140--&gt;
Another interesting use of indented blocks is with the if command. If executes a code block only if a certain condition is met, for example:

{{Code|code=
alldaltons = [&quot;Joe&quot;, &quot;William&quot;, &quot;Jack&quot;, &quot;Averell&quot;]
if &quot;Joe&quot; in alldaltons:
   print &quot;We found that Dalton!!!&quot;
}}

&lt;!--T:141--&gt;
Of course this will always print the first sentence, but try replacing the second line by:

{{Code|code=
if &quot;Lucky&quot; in alldaltons:
}}

&lt;!--T:142--&gt;
Then nothing is printed. We can also specify an else: statement:

{{Code|code=
alldaltons = [&quot;Joe&quot;, &quot;William&quot;, &quot;Jack&quot;, &quot;Averell&quot;]
if &quot;Lucky&quot; in alldaltons:
   print &quot;We found that Dalton!!!&quot;
else:
   print &quot;Such Dalton doesn't exist!&quot;
}}

==Functions== &lt;!--T:143--&gt;

&lt;!--T:144--&gt;
The [http://docs.python.org/reference/lexical_analysis.html#identifiers standard Python commands] are not many. In current version of Python there are about 30, and we already know several of them. But imagine if we could invent our own commands? Well, we can, and it's extremely easy. In fact, most the additional modules that you can plug into your Python installation do just that, they add commands that you can use. A custom command in Python is called a function and is made like this:

{{Code|code=
def printsqm(myValue):
   print str(myValue)+&quot; square meters&quot;
 
printsqm(45)
}}

&lt;!--T:145--&gt;
Extremely simple: the def() command defines a new function. You give it a name, and inside the parenthesis you define arguments that we'll use in our function. Arguments are data that will be passed to the function. For example, look at the len() command. If you just write len() alone, Python will tell you it needs an argument. That is, you want len() of something, right? Then, for example, you'll write len(myList) and you'll get the length of myList. Well, myList is an argument that you pass to the len() function. The len() function is defined in such a way that it knows what to do with what is passed to it. Same as we did here.

&lt;!--T:146--&gt;
The &quot;myValue&quot; name can be anything, and it will be used only inside the function. It is just a name you give to the argument so you can do something with it, but it also serves so the function knows how many arguments to expect. For example, if you do this:

{{Code|code=
printsqm(45,34)
}}

&lt;!--T:147--&gt;
There will be an error. Our function was programmed to receive just one argument, but it received two, 45 and 34. We could instead do something like this:

{{Code|code=
def sum(val1,val2):
   total = val1 + val2
   return total

sum(45,34)
myTotal = sum(45,34)
}}

&lt;!--T:148--&gt;
We made a function that receives two arguments, sums them, and returns that value. Returning something is very useful, because we can do something with the result, such as store it in the myTotal variable. Of course, since we are in the interpreter and everything is printed, doing:

{{Code|code=
sum(45,34)
}}

&lt;!--T:149--&gt;
will print the result on the screen, but outside the interpreter, since there is no more print command inside the function, nothing would appear on the screen. You would need to do:

{{Code|code=
print sum(45,34)
}}

&lt;!--T:150--&gt;
to have something printed. Read more about functions [http://www.diveintopython.net/getting_to_know_python/declaring_functions.html here].

==Modules== &lt;!--T:151--&gt;

&lt;!--T:152--&gt;
Now that we have a good idea of how Python works, we'll need one last thing: How to work with files and modules.

&lt;!--T:153--&gt;
Until now, we wrote Python instructions line by line in the interpreter, right? What if we could write several lines together, and have them executed all at once? It would certainly be handier for doing more complex things. And we could save our work too. Well, that too, is extremely easy. Simply open a text editor (such as the windows notepad), and write all your Python lines, the same way as you write them in the interpreter, with indentations, etc. Then, save that file somewhere, preferably with a .py extension. That's it, you have a complete Python program. Of course, there are much better editors than notepad, but it is just to show you that a Python program is nothing else than a text file.

&lt;!--T:154--&gt;
To make Python execute that program, there are hundreds of ways. In windows, simply right-click your file, open it with Python, and execute it. But you can also execute it from the Python interpreter itself. For this, the interpreter must know where your .py program is. In FreeCAD, the easiest way is to place your program in a place that FreeCAD's Python interpreter knows by default, such as FreeCAD's bin folder, or any of the Mod folders. Suppose we write a file like this:

{{Code|code=
def sum(a,b):
    return a + b

print &quot;test.py succesfully loaded&quot;
}}


&lt;!--T:155--&gt;
and we save it as test.py in our FreeCAD/bin directory. Now, let's start FreeCAD, and in the interpreter window, write:

{{Code|code=
import test
}}

&lt;!--T:156--&gt;
without the .py extension. This will simply execute the contents of the file, line by line, just as if we had written it in the interpreter. The sum function will be created, and the message will be printed. There is one big difference: the import command is made not only to execute programs written in files, like ours, but also to load the functions inside, so they become available in the interpreter. Files containing functions, like ours, are called modules.

&lt;!--T:157--&gt;
Normally when we write a sum() function in the interpreter, we execute it simply like that:

{{Code|code=
sum(14,45)
}}

&lt;!--T:158--&gt;
Like we did earlier. When we import a module containing our sum() function, the syntax is a bit different. We do:

{{Code|code=
test.sum(14,45)
}}

&lt;!--T:159--&gt;
That is, the module is imported as a &quot;container&quot;, and all its functions are inside. This is extremely useful, because we can import a lot of modules, and keep everything well organized. So, basically, everywhere you see something.somethingElse, with a dot in between, that means somethingElse is inside something.

&lt;!--T:160--&gt;
We can also throw out the test part, and import our sum() function directly into the main interpreter space, like this:

{{Code|code=
from test import *
sum(12,54)
}}

&lt;!--T:161--&gt;
Basically all modules behave like that. You import a module, then you can use its functions like that: module.function(argument). Almost all modules do that: they define functions, new data types and classes that you can use in the interpreter or in your own Python modules, because nothing prevents you to import modules inside your module!

&lt;!--T:162--&gt;
One last extremely useful thing. How do we know what modules we have, what functions are inside and how to use them (that is, what kind of arguments they need)? We saw already that Python has a help() function. Doing:

{{Code|code=
help()
modules
}}

&lt;!--T:163--&gt;
Will give us a list of all available modules. We can now type q to get out of the interactive help, and import any of them. We can even browse their content with the dir() command

{{Code|code=
import math
dir(math)
}}

&lt;!--T:164--&gt;
We'll see all the functions contained in the math module, as well as strange stuff named __doc__, __file__, __name__. The __doc__ is extremely useful, it is a documentation text. Every function of (well-made) modules has a __doc__ that explains how to use it. For example, we see that there is a sin function in side the math module. Want to know how to use it?

{{Code|code=
print math.sin.__doc__
}}

&lt;!--T:165--&gt;
And finally one last little goodie: When we work on programming a new module, we often want to test it. So once we wrote a little piece of module, in a python interpreter, we do something like this, to test our new code:

{{Code|code=
import myModule
myModule.myTestFunction()
}}

&lt;!--T:166--&gt;
But what if we see that myTestFunction() doesn't work correctly? We go back to our editor and modifiy it. Then, instead of closing and reopening the python interpreter, we can simply update the module like this:

{{Code|code=
reload(myModule)
}}

==Starting with FreeCAD== &lt;!--T:167--&gt;

&lt;!--T:168--&gt;
Well, I think you must know have a good idea of how Python works, and you can start exploring what FreeCAD has to offer. FreeCAD's Python functions are all well organized in different modules. Some of them are already loaded (imported) when you start FreeCAD. So, just do

{{Code|code=
dir()
}}

&lt;!--T:169--&gt;
and read on to [[FreeCAD Scripting Basics]]...

&lt;!--T:170--&gt;
Of course, we saw here only a very small part of the Python world. There are many important concepts that we didn't mention here. There are three very important Python reference documents on the net:
* the [http://docs.python.org/3/tutorial/index.html official Python tutorial with way more information than this one]
* the [http://docs.python.org/reference/ official Python reference]
* the [http://www.diveintopython.net Dive into Python] wikibook/ book.
Be sure to bookmark them!


&lt;!--T:171--&gt;
{{docnav|Macros|Python scripting tutorial}}

&lt;!--T:172--&gt;
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Introduction to python</title>
    <ns>0</ns>
    <id>1214</id>
    <revision>
      <id>108146</id>
      <parentid>89247</parentid>
      <timestamp>2014-09-01T20:32:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Italian Translation</title>
    <ns>0</ns>
    <id>10890</id>
    <revision>
      <id>87417</id>
      <parentid>41781</parentid>
      <timestamp>2014-05-26T20:24:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>c2r5ab5tywuta3woxh8dicb0c29g0ai</sha1>
      <text xml:space="preserve" bytes="1160">'''This page is to talk about the translation, in the mother tongue. Better terms, etc..'''

Questa pagina serve per discutere in lingua madre i problemi relativi alla traduzione, termini migliori, ecc.

Ad esempio: per tradurre workbenches è meglio usare banchi di lavoro oppure ambienti di lavoro?
Dall'inglese sembra più fedele banco, ma la traduzione francese usa laboratorio/officina cioè un ambiente. Banco è un pò restrittivo o riduttivo. Ambiente mi pare migliore perchè più descrittivo.


Lato mio perferisco, per questi termini tecnici, mantenere l'inglesismo. So che si rischia di scivolare verso l'incomprensione, ma un uso moderato, purchè ci sia una pagina di spiegazione di cosa sia un workbench, è ormai prassi in Italiano. Altrimenti (visto che non sono io a tradurre..) la mia preferenza è per banchi di lavoro. Ambienti è troppo generico. [[User:Ediloren|Ediloren]] ([[User talk:Ediloren|talk]]) 18:30, 30 September 2013 (CEST)

Ho utilizzato Ambiente perchè questo termine è utilizzato spesso anche dai software commerciali, quindi è già familiare a molti nuovi utenti di FreeCAD, ma tutto si può cambiare.
[[Category:Wiki]]</text>
    </revision>
  </page>
  <page>
    <title>Kompilieren unter Unix</title>
    <ns>0</ns>
    <id>1370</id>
    <revision>
      <id>107991</id>
      <parentid>95796</parentid>
      <timestamp>2014-09-01T12:24:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Land Survey Workbench Blueprint</title>
    <ns>0</ns>
    <id>4229</id>
    <revision>
      <id>121279</id>
      <parentid>121278</parentid>
      <timestamp>2014-11-12T21:43:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gs696oqxg79f6xuok9r8t4xtuhpi5lz</sha1>
      <text xml:space="preserve" bytes="2467">
&lt;!--T:1--&gt;
This page lists the requirements and implementation for a new workbench usable in the field of [http://en.wikipedia.org/wiki/Land_survey Land Survey].
&lt;!-- Note to editors: please place implementation details in &lt;blockquote&gt;&lt;/blockquote&gt; to be clearly separated --&gt;


==Rectangle selection== &lt;!--T:2--&gt;
&lt;blockquote&gt;
A new mouse mode may be required:
* left-click on an object selects the object
* left-click in empty space - begin selection action; click again - end selection action, add to selection set
** CTRL - exclude from already selected set
* press and hold middle button to pan
* contextual menu on right click
* wheel up/down - zoom
&lt;/blockquote&gt;


==Layers== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
* Object properties such as color, line weight, visibility, print-ability can be set on a per-object basis or may be inherited from the parent layer.
* Each object has a parent layer / an object may be part of a layer or not.

==Blocks== &lt;!--T:5--&gt;
Blocks are objects that behave in most circumstances as a single object. The objects do not loose their individuality inside the block.
&lt;blockquote&gt;
Since there is a Upgrade/Downgrade, this functionality may already be present.
&lt;/blockquote&gt;

===Dynamic attributes=== &lt;!--T:6--&gt;
Variables. Components of the block that may be changed without changing the definition of the block. Position inside the block is one such attribute.
&lt;blockquote&gt;
This feature will integrate well if expressed as properties.
&lt;/blockquote&gt;

==Points== &lt;!--T:7--&gt;
In land survey the points are usually associated with numbers, description and other characteristics.
&lt;blockquote&gt;
The blocks with dynamic properties should do it.
&lt;/blockquote&gt;

==Querry tools for 2 and a half system== &lt;!--T:8--&gt;
The planar position is usually decoupled (especially in cadastre applications) from the height. When you want to know the distance between two points you actually want to know the distance in horizontal projection. The horizontal plane is XY, with Y pointing toward north. Z points upward (positive altitude).

==Rich text; Tables== &lt;!--T:9--&gt;
General support for rich text.


&lt;!--T:10--&gt;
Note: the information in this page is based on a shallow understanding of FreeCAD's internals. Once it deepens the requirements and implementation may be adjusted. Contributions are welcomed! --[[User:Xtnickx|Xtnickx]] 11:00, 26 January 2013 (UTC)

&lt;!--T:11--&gt;
[[Category:Roadmap]]
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Latest release notes</title>
    <ns>0</ns>
    <id>1353</id>
    <revision>
      <id>108084</id>
      <parentid>89264</parentid>
      <timestamp>2014-09-01T19:44:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Le document FreeCAD</title>
    <ns>0</ns>
    <id>857</id>
    <revision>
      <id>107994</id>
      <parentid>91002</parentid>
      <timestamp>2014-09-01T12:26:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>LibPack</title>
    <ns>0</ns>
    <id>64</id>
    <revision>
      <id>108175</id>
      <parentid>624</parentid>
      <timestamp>2014-09-01T20:50:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Licence</title>
    <ns>0</ns>
    <id>65</id>
    <revision>
      <id>118712</id>
      <parentid>118711</parentid>
      <timestamp>2014-11-05T21:46:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>9adntuhgq1p20yi65fxr791h38t6b67</sha1>
      <text xml:space="preserve" bytes="6821">
=== Statement of the maintainer === &lt;!--T:1--&gt;
I know that the discussion on the ''&quot;right&quot;'' licence for open source occupied a significant portion of internet bandwidth and so is here the reason why, in my opinion, FreeCAD should have this one.

&lt;!--T:2--&gt;
I chose the [http://en.wikipedia.org/wiki/LGPL LGPL]  for the project and I know the pro and cons about the LGPL and will give you some reasons for that decision.

&lt;!--T:3--&gt;
FreeCAD is a mixture of a library and an application, so the GPL would be a little bit strong for that. It would prevent writing commercial modules for FreeCAD because it would prevent linking with the FreeCAD base libs. You may ask why commercial modules at all? Therefore Linux is good example. Would Linux be so successful when the GNU C Library would be GPL and therefore prevent linking against non-GPL applications? And although I love the freedom of Linux, I also want to be able to use the very good NVIDIA 3D graphic driver. I understand and accept the reason NVIDIA does not wish to give away driver code. We all work for companies and need payment or at least food. So for me, a coexistence of open source and closed source software is not a bad thing, when it obeys the rules of the LGPL. I would like to see someone writing a Catia import/export processor for FreeCAD and distribute it for free or for some money. I don't like to force him to give away more than he wants to. That wouldn't be good neither for him nor for FreeCAD.

&lt;!--T:4--&gt;
Nevertheless this decision is made only for the core system of FreeCAD. Every writer of an application module may make his own decision.

=== Used Licences === &lt;!--T:5--&gt;
Here the two licences under which FreeCAD is published:

&lt;!--T:6--&gt;
;[[wikipedia:LGPL|Lesser General Public Licence (LGPL2+)]]: For the core libs as stated in the .h and .cpp files in src/App src/Gui src/Base and most [[Workbenches|modules]] in src/Mod and for the executable as stated in the .h and .cpp files in src/main. The icons and other graphic parts are also LGPL.
;[[wikipedia:Open Publication License|Open Publication Licence]]: For the documentation on http://free-cad.sourceforge.net/ as not marked differently by the author 


&lt;!--T:7--&gt;
See FreeCAD's [http://free-cad.git.sourceforge.net/git/gitweb.cgi?p=free-cad/free-cad;a=blob;f=package/debian/copyright;h=a97cf019d020edba596f2d0f614c9b09ce546b0f;hb=HEAD debian copyright file] for more details about the licenses used in FreeCAD

=== License side effects === &lt;!--T:8--&gt;
Up to Version 0.13 FreeCAD is delivered as GPL2+, although the source itself is under LGPL2+. Thats because of linkage of Coin3D (GPL2) and PyQt(GPL). Starting with 0.14 we will be completely GPL free. PyQt will be replaced by PySide, and Coin3D was re-licensed under BSD. One problem, we still have to face, license-wise, the [http://www.opencascade.org/getocc/license/ OCTPL (Open CASCADE Technology Public License)]. Its a License mostly LGPL similar, with certain changes. On of the originators, Roman Lygin, elaborated on the License on his [http://opencascade.blogspot.de/2008/12/license-to-kill-license-to-use.html Blog]. The home-brew OCTPL license leads to all kind of side effects for FreeCAD, which where widely discussed on different forums and mailing lists, e.g. on [http://www.opencascade.org/org/forum/thread_15859/?forum=3 OpenCasCade forum itself]. I will link here some articles for the biggest problems.

  
==== GPL2/GPL3/OCTLP incompatibility ==== &lt;!--T:9--&gt;
We first discovered the problem by a discussion on the [http://www.fsf.org/ FSF] high priority project [https://groups.google.com/forum/#!topic/polignu/XRergtwsm80 discussion list]. It was about a library we look at, which was licensed with GPL3. Since we linked back then with Coin3D, with GPL2 only, we was not able to adopt that lib. Also the 
OCTPL is considered [http://www.opencascade.org/occt/faq/ GPL incompatible]. This Libre Graphics World article [http://libregraphicsworld.org/blog/entry/libredwg-drama-the-end-or-the-new-beginning &quot;LibreDWG drama: the end or the new beginning?&quot;] shows up the drama of LibreDWG project not acceptably in FreeCAD or LibreCAD. 

==== Debian ==== &lt;!--T:10--&gt;
The incompatibility of the OCTPL [http://lists.debian.org/debian-legal/2009/10/msg00000.html was discussed on the debian legal list] and lead to a [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=617613 bug report on the FreeCAD package] which prevent (ignor-tag) the transition from debian-testing to the main distribution. But its also mentioned thats a FreeCAD, which is free of GPL code and libs, would be acceptably. With a re-licensed Coin3D V4 and a substituted PyQt we will hopefully reach GPL free with the 0.14 release. 

==== Fedora/RedHat non-free ==== &lt;!--T:11--&gt;
In the Fedora project OpenCasCade is listed &quot;non-free&quot;. This means basically it won't make it into Fedora or RedHat. This means also FreeCAD won't make it into Fedora/RedHat until OCC is changing its license. Here the links to the license evaluation:
* [http://lists.fedoraproject.org/pipermail/legal/2011-September/001713.html Discussion on the Fedora-legal-list]
* [https://bugzilla.redhat.com/show_bug.cgi?id=458974#c10 License review entry in the RedHat bug tracker]
The main problem they have AFIK is that the OCC license demand non discriminatory support fees if you want to do paid support. It has nothing to do with &quot;free&quot; or OpenSource, its all about RedHat's business model!

=== Impact of the licences === &lt;!--T:12--&gt;

==== Private users ==== &lt;!--T:13--&gt;
Private users can use FreeCAD free of charge and can do basically whatever they want to do with it....

==== Professional users ==== &lt;!--T:14--&gt;
Can use FreeCAD freely, for any kind of private or professional work. They can customize the application as they wish. They can write open or closed source extensions to FreeCAD. They are always master of their data, they are not forced to update FreeCAD, change their usage of FreeCAD. Using FreeCAD doesn't bind them to any kind of contract or obligation.

==== Open Source developers ==== &lt;!--T:15--&gt;
Can use FreeCAD as the groundwork for own extension modules for special purposes. They can choose either the GPL or the LGPL to allow the use of their work in proprietary software or not.

==== Commercial developers ==== &lt;!--T:16--&gt;
Commercial developers can use FreeCAD as the groundwork for their own extension modules for special purposes and are not forced to make their modules open source. They can use all modules which use the LGPL. They are allowed to distribute FreeCAD along with their proprietary software. They will get the support of the author(s) as long as it is not a one way street.

&lt;!--T:17--&gt;
{{docnav|Dialog creation|Tracker}}

&lt;!--T:18--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>License</title>
    <ns>0</ns>
    <id>389</id>
    <revision>
      <id>108192</id>
      <parentid>89266</parentid>
      <timestamp>2014-09-01T20:54:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Line drawing function</title>
    <ns>0</ns>
    <id>66</id>
    <revision>
      <id>117819</id>
      <parentid>117818</parentid>
      <timestamp>2014-11-04T19:47:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bsp262c1gzdr26cr66ez5fd92h1u0o1</sha1>
      <text xml:space="preserve" bytes="13704">
&lt;!--T:1--&gt;
This page shows how advanced functionality can easily be built in Python. In this exercise, we will be building a new tool that draws a line. This tool can then be linked to a FreeCAD command, and that command can be called by any element of the interface, like a menu item or a toolbar button.

==The main script== &lt;!--T:2--&gt;
First we will write a script containing all our functionality. Then, we will save this in a file, and import it in FreeCAD, so all classes and functions we write will be availible to FreeCAD. So, launch your favorite text editor, and type the following lines:

&lt;syntaxhighlight&gt;
 import FreeCADGui, Part
 from pivy.coin import *
 
 class line:
     &quot;this class will create a line after the user clicked 2 points on the screen&quot;
     def __init__(self):
         self.view = FreeCADGui.ActiveDocument.ActiveView
         self.stack = []
         self.callback = self.view.addEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.getpoint)  
 
     def getpoint(self,event_cb):
         event = event_cb.getEvent()
         if event.getState() == SoMouseButtonEvent.DOWN:
             pos = event.getPosition()
             point = self.view.getPoint(pos[0],pos[1])
             self.stack.append(point)
             if len(self.stack) == 2:
                 l = Part.Line(self.stack[0],self.stack[1])
                 shape = l.toShape()
                 Part.show(shape)
                 self.view.removeEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.callback)
&lt;/syntaxhighlight&gt;

==Detailed explanation== &lt;!--T:3--&gt;

&lt;syntaxhighlight&gt;
 import Part, FreeCADGui
 from pivy.coin import *
&lt;/syntaxhighlight&gt;

&lt;!--T:4--&gt;
In Python, when you want to use functions from another module, you need to import it. In our case, we will need functions from the [[Part Module]], for creating the line, and from the Gui module (FreeCADGui), for accessing the 3D view. We also need the complete contents of the coin library, so we can use directly all coin objects like SoMouseButtonEvent, etc...

&lt;syntaxhighlight&gt;
 class line:
&lt;/syntaxhighlight&gt;

&lt;!--T:5--&gt;
Here we define our main class. Why do we use a class and not a function? The reason is that we need our tool to stay &quot;alive&quot; while we are waiting for the user to click on the screen. A function ends when its task has been done, but an object (a class defines an object) stays alive until it is destroyed.

&lt;syntaxhighlight&gt;
 &quot;this class will create a line after the user clicked 2 points on the screen&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
In Python, every class or function can have a description string. This is particularly useful in FreeCAD, because when you'll call that class in the interpreter, the description string will be displayed as a tooltip.

&lt;syntaxhighlight&gt;
 def __init__(self):
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
Python classes can always contain an __init__ function, which is executed when the class is called to create an object. So, we will put here everything we want to happen when our line tool begins.

&lt;syntaxhighlight&gt;
 self.view = FreeCADGui.ActiveDocument.ActiveView
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
In a class, you usually want to append ''self.'' before a variable name, so it will be easily accessible to all functions inside and outside that class. Here, we will use self.view to access and manipulate the active 3D view.

&lt;syntaxhighlight&gt;
 self.stack = []
&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
Here we create an empty list that will contain the 3D points sent by the getpoint function.

&lt;syntaxhighlight&gt;
 self.callback = self.view.addEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.getpoint)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
This is the important part: Since it is actually a [http://www.coin3d.org/ coin3D] scene, the FreeCAD uses coin callback mechanism, that allows a function to be called everytime a certain scene event happens. In our case, we are creating a callback for [http://doc.coin3d.org/Coin/group__events.html SoMouseButtonEvent] events, and we bind it to the getpoint function. Now, everytime a mouse button is pressed or released, the getpoint function will be executed.

&lt;!--T:11--&gt;
Note that there is also an alternative to addEventCallbackPivy() called addEventCallback() which dispenses the use of pivy. But since pivy is a very efficient and natural way to access any part of the coin scene, it is much better to use it as much as you can!

&lt;syntaxhighlight&gt;
 def getpoint(self,event_cb):
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
Now we define the getpoint function, that will be executed when a mouse button is pressed in a 3D view. This function will receive an argument, that we will call event_cb. From this event callback we can access the event object, which contains several pieces of information (mode info [[Code_snippets#Observing_mouse_events_in_the_3D_viewer_via_Python|here]]).

&lt;syntaxhighlight&gt;
 if event.getState() == SoMouseButtonEvent.DOWN:
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
The getpoint function will be called when a mouse button is pressed or released. But we want to pick a 3D point only when pressed (otherwise we would get two 3D points very close to each other). So we must check for that here.

&lt;syntaxhighlight&gt;
 pos = event.getPosition()
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
Here we get the screen coordinates of the mouse cursor

&lt;syntaxhighlight&gt;
 point = self.view.getPoint(pos[0],pos[1])
&lt;/syntaxhighlight&gt;

&lt;!--T:15--&gt;
This function gives us a FreeCAD vector (x,y,z) containing the 3D point that lies on the focal plane, just under our mouse cursor. If you are in camera view, imagine a ray coming from the camera, passing through the mouse cursor, and hitting the focal plane. There is our 3D point. If we are in orthogonal view, the ray is parallel to the view direction.

&lt;syntaxhighlight&gt;
 self.stack.append(point)
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
We add our new point to the stack

&lt;syntaxhighlight&gt;
 if len(self.stack) == 2:
&lt;/syntaxhighlight&gt;

&lt;!--T:17--&gt;
Do we have enough points already? if yes, then let's draw the line!

&lt;syntaxhighlight&gt;
 l = Part.Line(self.stack[0],self.stack[1])
&lt;/syntaxhighlight&gt;

&lt;!--T:18--&gt;
Here we use the function Line() from the [[Part Module]] that creates a line from two FreeCAD vectors. Everything we create and modify inside the Part module, stays in the Part module. So, until now, we created a Line Part. It is not bound to any object of our active document, so nothing appears on the screen.

&lt;syntaxhighlight&gt;
 shape = l.toShape()
&lt;/syntaxhighlight&gt;

&lt;!--T:19--&gt;
The FreeCAD document can only accept shapes from the Part module. Shapes are the most generic type of the Part module. So, we must convert our line to a shape before adding it to the document.

&lt;syntaxhighlight&gt;
 Part.show(shape)
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
The Part module has a very handy show() function that creates a new object in the document and binds a shape to it. We could also have created a new object in the document first, then bound the shape to it manually.

&lt;syntaxhighlight&gt;
 self.view.removeEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.callback)
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
Since we are done with our line, let's remove the callback mechanism, that consumes precious CPU cycles.

==Testing &amp; Using the script== &lt;!--T:22--&gt;
Now, let's save our script to some place where the FreeCAD python interpreter will find it. When importing modules, the interpreter will look in the following places: the python installation paths, the FreeCAD bin directory, and all FreeCAD modules directories. So, the best solution is to create a new directory in one of the FreeCAD [[Installing_more_workbenches|Mod directories]], and to save our script in it. For example, let's make a &quot;MyScripts&quot; directory, and save our script as &quot;exercise.py&quot;.

&lt;!--T:23--&gt;
Now, everything is ready, let's start FreeCAD, create a new document, and, in the python interpreter, issue:

&lt;syntaxhighlight&gt;
 import exercise
&lt;/syntaxhighlight&gt;

&lt;!--T:24--&gt;
If no error message appear, that means our exercise script has been loaded. We can now check its contents with:

&lt;syntaxhighlight&gt;
 dir(exercise)
&lt;/syntaxhighlight&gt;

&lt;!--T:25--&gt;
The command dir() is a built-in python command that lists the contents of a module. We can see that our line() class is there, waiting for us. Now let's test it:

&lt;syntaxhighlight&gt;
 exercise.line()
&lt;/syntaxhighlight&gt;

&lt;!--T:26--&gt;
Then, click two times in the 3D view, and bingo, here is our line! To do it again, just type exercise.line() again, and again, and again... Feels great, no?

==Registering the script in the FreeCAD interface== &lt;!--T:27--&gt;
Now, for our new line tool to be really cool, it should have a button on the interface, so we don't need to type all that stuff everytime. The easiest way is to transform our new MyScripts directory into a full FreeCAD workbench. It is easy, all that is needed is to put a file called '''InitGui.py''' inside your MyScripts directory. The InitGui.py will contain the instructions to create a new workbench, and add our new tool to it. Besides that we will also need to transform a bit our exercise code, so the line() tool is recognized as an official FreeCAD command. Let's start by making an InitGui.py file, and write the following code in it:

&lt;syntaxhighlight&gt;
 class MyWorkbench (Workbench): 
    MenuText = &quot;MyScripts&quot;
    def Initialize(self):
        import exercise
        commandslist = [&quot;line&quot;]
        self.appendToolbar(&quot;My Scripts&quot;,commandslist)
 Gui.addWorkbench(MyWorkbench())
&lt;/syntaxhighlight&gt;

&lt;!--T:28--&gt;
By now, you should already understand the above script by yourself, I think: We create a new class that we call MyWorkbench, we give it a title (MenuText), and we define an Initialize() function that will be executed when the workbench is loaded into FreeCAD. In that function, we load in the contents of our exercise file, and append the FreeCAD commands found inside to a command list. Then, we make a toolbar called &quot;My Scripts&quot; and we assign our commands list to it. Currently, of course, we have only one tool, so our command list contains only one element. Then, once our workbench is ready, we add it to the main interface.

&lt;!--T:29--&gt;
But this still won't work, because a FreeCAD command must be formatted in a certain way to work. So we will need to transform a bit our line() tool. Our new exercise.py script will now look like this:

&lt;syntaxhighlight&gt;
 import FreeCADGui, Part
 from pivy.coin import *
 class line:
  &quot;this class will create a line after the user clicked 2 points on the screen&quot;
  def Activated(self):
    self.view = FreeCADGui.ActiveDocument.ActiveView
    self.stack = []
    self.callback = self.view.addEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.getpoint) 
  def getpoint(self,event_cb):
    event = event_cb.getEvent()
    if event.getState() == SoMouseButtonEvent.DOWN:
      pos = event.getPosition()
      point = self.view.getPoint(pos[0],pos[1])
      self.stack.append(point)
      if len(self.stack) == 2:
        l = Part.Line(self.stack[0],self.stack[1])
        shape = l.toShape()
        Part.show(shape)
        self.view.removeEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.callback)
  def GetResources(self): 
      return {'Pixmap' : 'path_to_an_icon/line_icon.png', 'MenuText': 'Line', 'ToolTip': 'Creates a line by clicking 2 points on the screen'} 
 FreeCADGui.addCommand('line', line())
&lt;/syntaxhighlight&gt;

&lt;!--T:30--&gt;
What we did here is transform our __init__() function into an Activated() function, because when FreeCAD commands are run, they automatically execute the Activated() function. We also added a GetResources() function, that informs FreeCAD where it can find an icon for the tool, and what will be the name and tooltip of our tool. Any jpg, png or svg image will work as an icon, it can be any size, but it is best to use a size that is close to the final aspect, like 16x16, 24x24 or 32x32.
Then, we add the line() class as an official FreeCAD command with the addCommand() method.

&lt;!--T:31--&gt;
That's it, we now just need to restart FreeCAD and we'll have a nice new workbench with our brand new line tool!

==So you want more?== &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
If you liked this exercise, why not try to improve this little tool? There are many things that can be done, like for example:
* Add user feedback: until now we did a very bare tool, the user might be a bit lost when using it. So we could add some feedback, telling him what to do next. For example, you could issue messages to the FreeCAD console. Have a look in the FreeCAD.Console module
* Add a possibility to type the 3D points coordinates manually. Look at the python input() function, for example
* Add the possibility to add more than 2 points
* Add events for other things: Now we just check for Mouse button events, what if we would also do something when the mouse is moved, like displaying current coordinates?
* Give a name to the created object
Don't hesitate to write your questions or ideas on the [[Talk:Line_drawing_function|talk page]]!

&lt;!--T:34--&gt;
{{docnav|Code snippets|Dialog creation}}

&lt;!--T:35--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>List of Commands</title>
    <ns>0</ns>
    <id>67</id>
    <redirect title="Category:Command Reference" />
    <revision>
      <id>2364</id>
      <parentid>1982</parentid>
      <timestamp>2009-07-09T18:19:22Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirecting to [[Category:Command Reference]]</comment>
      <sha1>kab6we8icdhw43sle2yxlnq8i22z8dv</sha1>
      <text xml:space="preserve" bytes="41">#REDIRECT [[:Category:Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Lizenz</title>
    <ns>0</ns>
    <id>1673</id>
    <revision>
      <id>107997</id>
      <parentid>89271</parentid>
      <timestamp>2014-09-01T12:28:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Localisation</title>
    <ns>0</ns>
    <id>68</id>
    <revision>
      <id>120055</id>
      <parentid>110670</parentid>
      <timestamp>2014-11-08T21:05:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>syntaxhighlight -&gt; pre</comment>
      <sha1>28o2rjciushjlgz5rojbnjdky6hrbjs</sha1>
      <text xml:space="preserve" bytes="15136">
&lt;!--T:59--&gt;
'''Localisation''' is in general the process of providing a Software with a multiple language user interface. In FreeCAD you can set the language of the user interface under ''Edit→Preferences→Application''. FreeCAD uses [[wikipedia:Qt (toolkit)|Qt]] to enable multiple language support. On Unix/Linux systems, FreeCAD uses the current locale settings of your system by default.

== Helping to translate FreeCAD == &lt;!--T:60--&gt;

&lt;!--T:61--&gt;
One of the very important things you can do for FreeCAD if you are not a programmer, is to help to translate the program in your language. To do so is now easier than ever, with the use of the [http://crowdin.net Crowdin] collaborative on-line translation system.

=== How to Translate === &lt;!--T:62--&gt;

&lt;!--T:63--&gt;
* Go to the [http://crowdin.net/project/freecad FreeCAD translation project page on Crowdin];
* Login by creating a new profile, or using a third-party account like your GMail address;
* Click on the language you wish to work on;
* Start translating by clicking on the Translate button next to one of the files. For example, ''FreeCAD.ts'' contains the text strings for the FreeCAD main GUI.
* You can vote for existing translations, or you can create your own.

 &lt;!--T:64--&gt;
'''Note''': If you are actively taking part in translating FreeCAD and want to be 
 informed before next release is ready to be launched, 
 so there is time to review your translation, please subscribe 
 to this issue: http://www.freecadweb.org/tracker/view.php?id=137


=== Translating with Qt-Linguist (old way) === &lt;!--T:65--&gt;

&lt;!--T:66--&gt;
The following information doesn't need to be used anymore and will likely become obsolete. It is being kept here so that programmers may familiarize themselves with how it works.

&lt;!--T:67--&gt;
* Open all of the language folders of FreeCAD shown below
* Verify that a .ts file with your language code doesn't exist (&quot;fr&quot; for french, &quot;de&quot; for german, etc...)
* If it exists, you can download that file, if you want to modify/review/better the translation (click the file, then download)
* If it doesn't exist, download the .ts file without language code (or any other .ts available, it will work too)
* Rename that file with your language code
* Open it with the Qt-Linguist program
* Start translating (Qt Linguist is very easy to use)
* Once it's completely done, save your file
* [http://www.freecadweb.org/tracker/main_page.php send the files to us] so we can include them in the freecad source code so they benefit other users too.

==== Available translation files ==== &lt;!--T:68--&gt;

&lt;!--T:69--&gt;
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Gui/Language/ FreeCAD main GUI]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Complete/Gui/Resources/translations/ Complete Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Drawing/Gui/Resources/translations/ Drawing Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Draft/Languages/ Draft Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/ReverseEngineering/Gui/Resources/translations/ Reverse Engineering Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Fem/Gui/Resources/translations/ FEM Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Robot/Gui/Resources/translations/ Robot Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Image/Gui/Resources/translations/ Image Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Sketcher/Gui/Resources/translations/ Sketcher Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Mesh/Gui/Resources/translations/ Mesh Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Test/Gui/Resources/translations/ Test Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Points/Gui/Resources/translations/ Points Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Raytracing/Gui/Resources/translations/ Raytracing Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Part/Gui/Resources/translations/ Part Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/PartDesign/Gui/Resources/translations/ PartDesign Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Assembly/Gui/Resources/translations/ Assembly Workbench]
* [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/MeshPart/Gui/Resources/translations/ MeshPart Workbench]

== Preparing your own modules/applications for translation == &lt;!--T:70--&gt;

=== Prerequisites === &lt;!--T:71--&gt;

&lt;!--T:72--&gt;
To localise your application module your need to helpers that come with ''Qt''. You can download them from the [http://www.trolltech.com/products/qt/downloads Trolltech-Website], but they are also contained in the [[Third Party Libraries|LibPack]]:
;qmake: Generates project files
;lupdate: Extracts or updates the original texts in your project by scanning the source code
;Qt-Linguist: The ''Qt-Linguist'' is very easy to use and helps you translating with nice features like a phrase book for common sentences.

=== Project Setup === &lt;!--T:73--&gt;

&lt;!--T:74--&gt;
To start the localisation of your project go to the GUI-Part of you module and type on the command line:

&lt;pre&gt;
qmake -project
&lt;/pre&gt;

&lt;!--T:75--&gt;
This scans your project directory for files containing text strings and creates a project file like the following example:

&lt;pre&gt;
 ######################################################################
 # Automatically generated by qmake (1.06c) Do 2. Nov 14:44:21 2006
 ######################################################################
 
 TEMPLATE = app
 DEPENDPATH += .\Icons
 INCLUDEPATH += .
 
 # Input
 HEADERS += ViewProvider.h Workbench.h
 SOURCES += AppMyModGui.cpp \
            Command.cpp \
            ViewProvider.cpp \
            Workbench.cpp
 TRANSLATIONS += MyMod_de.ts
&lt;/pre&gt;


&lt;!--T:76--&gt;
You can manually add files here. The section &lt;tt&gt;TRANSLATIONS&lt;/tt&gt; contains a list of files with the translation for each language. In the above example ''MyMod_de.ts'' is the german translation.

&lt;!--T:77--&gt;
Now you need to run &lt;tt&gt;lupdate&lt;/tt&gt; to extract all string literals in your GUI. Running &lt;tt&gt;lupdate&lt;/tt&gt; after changes in the source code is allways safe since it never deletes strings from your translations files. It only adds new strings.

&lt;!--T:78--&gt;
Now you need to add the &lt;tt&gt;.ts&lt;/tt&gt;-files to your VisualStudio project. Specifiy the following custom build method for them:

&lt;syntaxhighlight&gt;
 python ..\..\..\Tools\qembed.py &quot;$(InputDir)\$(InputName).ts&quot;
                 &quot;$(InputDir)\$(InputName).h&quot; &quot;$(InputName)&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:79--&gt;
Note: Enter this in one command line, the line break is only for layout purpose. 

&lt;!--T:80--&gt;
By compiling the &lt;tt&gt;.ts&lt;/tt&gt;-file of the above example, a header file ''MyMod_de.h'' is created. The best place to include this is in ''App&lt;Modul&gt;Gui.cpp''. In our example this would be ''AppMyModGui.cpp''. There you add the line

&lt;syntaxhighlight&gt;
new Gui::LanguageProducer(&quot;Deutsch&quot;, &lt;Modul&gt;_de_h_data, &lt;Modul&gt;_de_h_len);
&lt;/syntaxhighlight&gt;

&lt;!--T:81--&gt;
to publish your translation in the application.

=== Setting up python files for translation === &lt;!--T:82--&gt;

&lt;!--T:83--&gt;
To ease localization for the py files you can use the tool &quot;pylupdate4&quot; which accepts one or more py files. With the -ts option you can prepare/update one or more .ts files. For instance to prepare a .ts file for French simply enter into the command line:

&lt;pre&gt;
pylupdate4 *.py -ts YourModule_fr.ts 
&lt;/pre&gt;

&lt;!--T:84--&gt;
the pylupdate tool will scan your .py files for translate() or tr() functions and create a YourModule_fr.ts file. That file can the be translated with QLinguist and a YourModule_fr.qm file produced from QLinguist or with the command

&lt;pre&gt;
lrelease YourModule_fr.ts
&lt;/pre&gt;

&lt;!--T:85--&gt;
Beware that the pylupdate4 tool is not very good at recognizing translate() functions, they need to be formatted very specifically ( see the Draft module files for examples). Inside your file, you can then setup a translator like this (after loading your QApplication but BEFORE creating any qt widget):

&lt;pre&gt;
translator = QtCore.QTranslator()
translator.load(&quot;YourModule_&quot;+languages[ln])
QtGui.QApplication.installTranslator(translator)
&lt;/pre&gt;
 
&lt;!--T:86--&gt;
Optionally, you can also create the file XML Draft.qrc with this content:

&lt;pre&gt;  
&lt;RCC&gt;
&lt;qresource prefix=&quot;/translations&quot; &gt; 
&lt;file&gt;Draft_fr.qm&lt;/file&gt; 
&lt;/qresource&gt; 
&lt;/RCC&gt; 
&lt;/pre&gt;

&lt;!--T:87--&gt;
and running pyrcc4 Draft.qrc -o qrc_Draft.py creates a big Python containing all resources. BTW this approach also works to put icon files in one resource file

== Translating the wiki == &lt;!--T:88--&gt;

&lt;!--T:89--&gt;
This wiki is hosting a lot of contents, the majority of which build up the manual. You can browse the documentation starting from the [[Main Page]], or have a look at the User's manual [[Online Help Toc]]. 

===Translation plugin=== &lt;!--T:90--&gt;

&lt;!--T:91--&gt;
When the Wiki moved away from SourceForge, [[User:Yorik|Yorik]] installed a [http://www.mediawiki.org/wiki/Help:Extension:Translate Translation plugin] which allows to ease translations between pages. For example, the page title can now be translated. Other advantages of the Translation plugin are that it keeps track of translations, notifies if the original page has been updated, and maintains translations in sync with the original English page.

&lt;!--T:92--&gt;
The tool is documented in [http://www.mediawiki.org/wiki/Help:Extension:Translate Extension:Translate], and is part of a [http://www.mediawiki.org/wiki/MediaWiki_Language_Extension_Bundle Language Extension Bundle].

&lt;!--T:93--&gt;
To quickly get started on preparing a page for translation and activating the plugin, please read the [http://www.mediawiki.org/wiki/Help:Extension:Translate/Page_translation_example Page translation example].

&lt;!--T:94--&gt;
To see an example of how the Translation tool works once the translation plugin is activated on a page, you can visit the [[Main Page]]. You will see a new language menu bar at the bottom. It is automatically generated. Click for instance on the German link, it will get you to [[Main Page/de]]. Right under the title, you can read &quot;This page is a '''translated version''' of a page Main Page and the translation is xx% complete.&quot; (xx being the actual percentage of translation). Click on the &quot;translated version&quot; link to start translation, or to update or correct the existing translation.

&lt;!--T:95--&gt;
You will notice that you cannot directly edit a page anymore once it's been marked as a translation. You have to go through the translation utility.

&lt;!--T:96--&gt;
When adding new content, the English page should be created first, then translated into another language. If someone wants to change/add content in a page, he should do the English one first.

&lt;!--T:97--&gt;
'''REMARK: The first time you switch a page to the new translation system, it looses all its old 'manual' translations. To recover the translation, you need to open an earlier version from the history, and copy/paste manually the paragraphs to the new translation system.'''

&lt;!--T:98--&gt;
Remark: to be able to translate in the wiki, you must of course [[FAQ#How_can_I_get_edit_permission_on_the_wiki.3F|gain wiki edit permission]].

===Old translation instructions=== &lt;!--T:99--&gt;
These instructions are for historical background only, while the pages are being passed to the new translation plugin.

&lt;!--T:100--&gt;
So the first step is to '''check if the manual translation has already been started for your language''' (look in the left sidebar, under &quot;manual&quot;).

&lt;!--T:101--&gt;
If not, head to the [http://forum.freecadweb.org/ forum] and say that you want to start a new translation, we'll create the basic setup for the language you want to work on.

&lt;!--T:102--&gt;
You must then [[FAQ#How_can_I_get_edit_permission_on_the_wiki.3F|gain wiki edit permission]].

&lt;!--T:103--&gt;
If your language is already listed, see what pages are still missing a translation (they will be listed in red). The technique is simple: '''go into a red page, and copy/paste the contents of the corresponding English page, and start translating'''.

&lt;!--T:104--&gt;
Do not forget to include all the tags and templates from the original English page. Some of those templates will have an equivalent in your language (for example, there is a French Docnav template called Docnav/fr). You should use '''a slash and your language code''' in almost all the links. Look at other already translated pages to see how they did it.

&lt;!--T:105--&gt;
Add a slash and your language code in the categories, like &lt;nowiki&gt;[[Category:Developer Documentation/fr]]&lt;/nowiki&gt; 

&lt;!--T:106--&gt;
And if you are unsure, head to the forums and ask people to check what you did and tell you if it's right or not.

&lt;!--T:107--&gt;
Four templates are commonly used in manual pages. These 4 templates have localized versions (Template:Docnav/fr, Template:fr, etc...)
* [[Template:GuiCommand]] : is the Gui Command information block in upper-right of command documentation.
* [[Template:Docnav]] : it is the navigation bar at the bottom of the pages, showing previous and next pages.

====Page Naming Convention==== &lt;!--T:108--&gt;

&lt;!--T:109--&gt;
Please take note that, due to limitations in the Sourceforge implementation of the MediaWiki engine, we require that your pages all keep their original English counterpart's name, appending a slash and your language code. For example, the translated page for About FreeCAD should be About Freecad/es for Spanish, About FreeCAD/pl for polish, etc. The reason is simple: so that if translators go away, the wiki's administrators, who do not speak all languages, will know what these pages are for. This will facilitate maintenance and avoid lost pages.

&lt;!--T:110--&gt;
If you want the Docnav template to show linked pages in your language, you can use '''redirect pages'''. They are basically shortcut links to the actual page. Here is an example with the French page for About FreeCAD.

&lt;!--T:111--&gt;
* The page About FreeCAD/fr is the page with content
* The page À propos de FreeCAD contains this code:
 #REDIRECT &lt;nowiki&gt;[[About FreeCAD/fr]]&lt;/nowiki&gt;
* In the About FreeCAD/fr page, the Docnav code will look like this:
 &lt;nowiki&gt;{{docnav/fr|Bienvenue sur l'aide en ligne|Fonctionnalités}}&lt;/nowiki&gt;
The page &quot;Bienvenue sur l'aide en ligne&quot; redirects to Online Help Startpage/fr, and the page &quot;Fonctionnalités&quot; redirects to Feature list/fr.

&lt;!--T:112--&gt;
If you are unsure how to proceed, don't hesitate to ask for help in the [http://forum.freecadweb.org/ forum].

&lt;!--T:113--&gt;
{{docnav|Branding|Extra python modules}}

&lt;!--T:114--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>MIBA</title>
    <ns>0</ns>
    <id>69</id>
    <revision>
      <id>88413</id>
      <parentid>84030</parentid>
      <timestamp>2014-05-29T22:54:12Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>oewgzz8h4fcc93zaxgg1q0fmm86rntu</sha1>
      <text xml:space="preserve" bytes="1945">
== Introduction == &lt;!--T:1--&gt;
Miba is a way to embed information about the 3D space into a 2D image. This makes it often possible to use the 2D picture instead of a 3D viewer. By the Miba information you're able to calculate the position of a 3D location in the 2D image. That allows you to decorate the image later with arbitrary 3D information. You can take the picture in an early state (design) and use it later (e.g. Production). You do not need to know the kind of 3D data or the positions when you take the picture. So the picture is completely separated from the 3D data.

&lt;!--T:2--&gt;
A detailed specification you can find here: http://miba.juergen-riegel.net/

== Miba in FreeCAD == &lt;!--T:3--&gt;
If you choose a file format which has an comment ability ( JPG and PNG) you can choose to write a comment or insert the MIBA information in the comment fileds (default):

&lt;!--T:4--&gt;
[[Image:Save_picture.png]]

== Making Miba pictures by script == &lt;!--T:5--&gt;

&lt;syntaxhighlight&gt;

 import Part,PartGui
 # loading test part
 Part.open(&quot;C:/Documents and Settings/jriegel/My Documents/Projects/FreeCAD/data/Blade.stp&quot;)
 OutDir = 'c:/temp/'
 Gui.ActiveDocument.ActiveView.setAnimationEnabled(False)
 
 # creating images with different Views, Cameras and sizes
 for p in [&quot;PerspectiveCamera&quot;,&quot;OrthographicCamera&quot;]:
   Gui.SendMsgToActiveView(p)
   for f in [&quot;ViewAxo&quot;,&quot;ViewFront&quot;,&quot;ViewTop&quot;]:
     Gui.SendMsgToActiveView(f)
     for x,y in [[500,500],[1000,3000],[3000,1000],[3000,3000],[8000,8000]]:
       Gui.ActiveDocument.ActiveView.saveImage(OutDir + &quot;Blade_&quot; + p +&quot;_&quot; + f + &quot;_&quot; + `x` + &quot;_&quot; + `y` + &quot;.jpg&quot;,x,y,&quot;White&quot;)
       Gui.ActiveDocument.ActiveView.saveImage(OutDir + &quot;Blade_&quot; + p +&quot;_&quot; + f + &quot;_&quot; + `x` + &quot;_&quot; + `y` + &quot;.png&quot;,x,y,&quot;Transparent&quot;)
 
 # close active document
 App.closeDocument(App.ActiveDocument.Name)

&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
[[Category:User_Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Macro 3D Parametric Curve</title>
    <ns>0</ns>
    <id>23644</id>
    <revision>
      <id>81799</id>
      <parentid>81798</parentid>
      <timestamp>2014-05-06T19:39:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7j1c1jnz8ykfyf1ejbiw8ckxhj19iry</sha1>
      <text xml:space="preserve" bytes="5004">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro 3D Parametric Curve|Description=Draw a function described by parametric equations x(t), y(t) and z(t) With the possibility to choose between b-spline and polyline for the type of line between points.|Author=Lucio Gomez (psicofil)}}

&lt;!--T:6--&gt;
This macro creates a curve described by parametric equations x(t), y(t) and z(t). With the possibility to choose between b-spline and polyline for the type of line between points.


&lt;!--T:3--&gt;
[[File:Macro_3D_Parametric_Curve.png|600px|Example Epicycloid curve‎]]


===Script=== &lt;!--T:5--&gt;

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# Create a 3D parametric Curve.
# Author: Gomez Lucio

import FreeCAD
from PyQt4 import QtGui,QtCore
import Part
import Draft
from math import *

class ParamCurv(QtGui.QWidget):
    def __init__(self):
        super(ParamCurv, self).__init__()
        self.initUI()
    def initUI(self):
        self.t0 = QtGui.QLabel(&quot;Equation :&quot;,self)
        self.t1 = QtGui.QLabel(&quot;    X(t) &quot;,self)
        self.l1 = QtGui.QLineEdit(self)
        self.l1.setText(&quot;cos(t)&quot;)
        self.t2 = QtGui.QLabel(&quot;    Y(t) &quot;,self)
        self.l2 = QtGui.QLineEdit(self)
        self.l2.setText(&quot;sin(t)&quot;)
        self.t3 = QtGui.QLabel(&quot;    Z(t) &quot;,self)
        self.l3 = QtGui.QLineEdit(self)
        self.l3.setText(&quot;0&quot;)
        self.t31 = QtGui.QLabel(&quot;Parameters :&quot;,self)
        self.t4 = QtGui.QLabel(&quot;    Min t &quot;,self)
        self.l4 = QtGui.QLineEdit(self)
        self.l4.setText(&quot;0&quot;)
        self.t5 = QtGui.QLabel(&quot;    Max t &quot;,self)
        self.l5 = QtGui.QLineEdit(self)
        self.l5.setText(&quot;6.29&quot;)
        self.t6 = QtGui.QLabel(&quot;    Interval &quot;,self)
        self.l6 = QtGui.QLineEdit(self)
        self.l6.setText(&quot;0.1&quot;)
        self.t7 = QtGui.QLabel(&quot;Type of Line :&quot;,self)
        self.op1 = QtGui.QCheckBox(&quot;    Polyline&quot;,self)
        self.poly = False
        self.op1.stateChanged.connect(self.polyState)
        self.op1.setCheckState(QtCore.Qt.Checked)
        self.op2 = QtGui.QCheckBox(&quot;    Bspline&quot;,self)
        self.bsline = False
        self.op2.stateChanged.connect(self.bsplineState)
        self.t8 = QtGui.QLabel(&quot;    Closed Curve&quot;,self)
        self.op3 = QtGui.QCheckBox(&quot;&quot;,self)
        self.cclose = False
        self.op3.stateChanged.connect(self.ccloseState)
        self.createbutt = QtGui.QPushButton(&quot;Create Curve&quot;,self)
        self.exitbutt = QtGui.QPushButton(&quot;Close&quot;,self)
        layout = QtGui.QGridLayout()
        self.resize(240, 380)
        self.setWindowTitle(&quot;Parametric Curve &quot;)
        layout.addWidget(self.t0, 0, 0)
        layout.addWidget(self.t1, 1, 0)
        layout.addWidget(self.l1, 1, 1)
        layout.addWidget(self.t2, 2, 0)
        layout.addWidget(self.l2, 2, 1)
        layout.addWidget(self.t3, 3, 0)
        layout.addWidget(self.l3, 3, 1)
        layout.addWidget(self.t31, 4, 0)
        layout.addWidget(self.t4, 5, 0)
        layout.addWidget(self.l4, 5, 1)
        layout.addWidget(self.t5, 6, 0)
        layout.addWidget(self.l5, 6, 1)
        layout.addWidget(self.t6, 7, 0)
        layout.addWidget(self.l6, 7, 1)
        layout.addWidget(self.t8, 8, 0)
        layout.addWidget(self.op3, 8, 1)
        layout.addWidget(self.t7, 9, 0)
        layout.addWidget(self.op1, 10, 0)
        layout.addWidget(self.op2, 10, 1)
        layout.addWidget(self.createbutt, 11, 0)
        layout.addWidget(self.exitbutt, 11, 1)
        self.setLayout(layout)
        self.show()
        QtCore.QObject.connect(self.createbutt, QtCore.SIGNAL(&quot;pressed()&quot;),self.draw)
        QtCore.QObject.connect(self.exitbutt, QtCore.SIGNAL(&quot;pressed()&quot;),self.close)
    def ccloseState(self, state):
        if state == QtCore.Qt.Checked:
            self.cclose = True
        else:
            self.cclose = False
    def bsplineState(self, state):
        if state == QtCore.Qt.Checked:
            self.bsline = True
            self.op1.setCheckState(QtCore.Qt.Unchecked)
        else:
            self.bsline = False
    def polyState(self, state):
        if state == QtCore.Qt.Checked:
            self.poly = True
            self.op2.setCheckState(QtCore.Qt.Unchecked)
        else:
            self.poly = False
    def draw(self):
        fx = str(self.l1.text())
        fy = str(self.l2.text())
        fz = str(self.l3.text())
        t = float(str(self.l4.text()))
        tf = float(self.l5.text())
        intv = float(str(self.l6.text()))
        d=(tf-t)/intv
        matriz = []
        for i in range(int(d)):
            fxx=eval(fx)
            fyy=eval(fy)
            fzz=eval(fz)
            matriz.append(FreeCAD.Vector(fxx,fyy,fzz))
            t+=intv
        curva = Part.makePolygon(matriz)
        if self.bsline == True:
            Draft.makeBSpline(curva,closed=self.cclose,face=False)
        if self.poly == True:
            Draft.makeWire(curva,closed=self.cclose,face=False)
    def close(self):
        self.hide()

ParamCurv()

&lt;/syntaxhighlight&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro 3d Printer Slicer</title>
    <ns>0</ns>
    <id>11023</id>
    <revision>
      <id>133488</id>
      <parentid>133482</parentid>
      <timestamp>2014-12-26T21:47:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>tbh083x3x6vnfy1rogtunj5fy4em9pn</sha1>
      <text xml:space="preserve" bytes="3181">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_3d_Printer_Slicer|Description=Export to slicing software for 3D printers. Exports stl file in the same directory as original design file, then opens it in slicing software.|Author=cae2100}}

&lt;!--T:2--&gt;
This code, when run, will export the currently open design to STL file, and open it in the slicing software that you use. This example is for '''[http://kisslicer.com/ KISSlicer]''', but can be modified to use '''[http://slic3r.org/ Slic3r]''', '''[http://wiki.ultimaker.com/Cura Cura]''', or any other 3d printer software. It can also be modified slightly to open up CAM software for CNC machines. 

&lt;!--T:3--&gt;
It is best used by creating a link to the macro on the toolbar, and when your ready to slice the object, just click it and your object, as it appears on the screen in FreeCAD will appear on your slicing software's interface, ready to slice. It will also create an STL file with the same filename as the design file in the same directory as the design file as a backup.


&lt;!--T:4--&gt;
[[File:Macro_3d_Printer_Slicer_00.png|480px]]
{{clear}}

===Script=== &lt;!--T:5--&gt;
The SLICER variable can be changed to any slicing software of your choosing, just make sure to set it before you try running it or it'll flag an error with the script.


'''Macro_3d_Printer_Slicer.py'''
{{Code|code=
import FreeCAD
import Mesh
import sys
import math
import os
import subprocess
# some fuctions
def getPlacement(quat,vect,obj):
  if quat[3] &gt; -1  and quat[3] &lt; 1:
    delta = math.acos(quat[3])*2.0
    scale = math.sin(delta/2)
    rx = quat[0]/scale
    ry = quat[1]/scale
    rz = quat[2]/scale
  else:
    delta = 0
    rx = 0
    ry = 0
    rz = 1
  info0 = &quot;translation &quot;+str(vect.x)+&quot; &quot;+str(vect.y)+&quot; &quot;+str(vect.z)
  info1 = &quot;rotation &quot;+str(rx)+&quot; &quot;+str(ry)+&quot; &quot;+str(rz)+&quot; &quot;+str(delta)
  return info0+&quot; &quot;+info1
# some definitions
placement = App.Placement(App.Vector(0,0,0),App.Rotation(0,0,0,1))
# user need to set this directory where slicing software is located
OutDir = FreeCAD.ActiveDocument.FileName.replace(FreeCAD.ActiveDocument.Label + &quot;.fcstd&quot;, &quot;&quot;)
visible_objs = []
SLICER = &quot;/kisslicer location/&quot;                          # Put your Slicer program location here
os.chdir(SLICER)
# Get Objects in document
doc = App.ActiveDocument
objs = doc.Objects
# hide all
for obj in objs:
   if obj.ViewObject.isVisible():
      visible_objs.append(obj)
for obj in visible_objs:
  # get volume
  volume = obj.Shape.Volume
  # get Rotation and translation of volume
  quat = obj.Placement.Rotation.Q
  vect = obj.Placement.Base
  pinfo = getPlacement(quat,vect,obj)
  # reset placement, export it and set at original placement
  oldPlacement = obj.Placement
  obj.Placement = placement
  obj.Placement = oldPlacement   
stlFile = OutDir+str(doc.Label)+&quot;.stl&quot;
Mesh.export(visible_objs,stlFile)
subprocess.Popen([SLICER + &quot;KISSlicer&quot;, stlFile])
}}

=== Credits === &lt;!--T:6--&gt;
Thanks to [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=4686 Wmayer] for his help in writing this script.&lt;br /&gt;
Original forum topic: http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=4686

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Align View to Face</title>
    <ns>0</ns>
    <id>26747</id>
    <revision>
      <id>81714</id>
      <parentid>75447</parentid>
      <timestamp>2014-05-06T11:47:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>identation</comment>
      <sha1>oi9cc43wvean8wxvh5i709mgw287g0t</sha1>
      <text xml:space="preserve" bytes="1373">
&lt;!--T:1--&gt;
{{Macro|Name=Macro Align View to Face|Description=This macro aligns the current view to a selected face|Author=Rockn}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This macro rotates the current view to point perpendicularly at a selected face of an existing object.

==How to use== &lt;!--T:4--&gt;
# Select a face on an object
# Run the macro

==Script== &lt;!--T:5--&gt;


&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
# Set the current view perpendicular to the selected face
# Place la vue perpendiculairement à la face selectionnee
# 2013 Jonathan Wiedemann

from pivy import coin
s=Gui.Selection.getSelectionEx()
obj=s[0]
faceSel = obj.SubObjects[0]
dir = faceSel.normalAt(0,0)
cam = FreeCADGui.ActiveDocument.ActiveView.getCameraNode()
camValues = cam.position.getValue()
pos = FreeCAD.Vector( (camValues[0], camValues[1], camValues[2],) )
p = pos.add(dir.negative())
print(p.x,p.y,p.z)
if dir.z == 1 :
   cam.pointAt( coin.SbVec3f(p.x,p.y,p.z), coin.SbVec3f(0.0,1.0,0.0))
   print(&quot;normal = 1&quot;)
elif dir.z == -1 :
   cam.pointAt( coin.SbVec3f(p.x,p.y,p.z), coin.SbVec3f(0.0,1.0,0.0))
   print(&quot;normal = -1&quot;)
else :
   cam.pointAt( coin.SbVec3f(p.x,p.y,p.z), coin.SbVec3f(0.0,0.0,1.0))
   print(&quot;normal normale&quot;)
Gui.SendMsgToActiveView(&quot;ViewSelection&quot;)

&lt;/syntaxhighlight&gt;


&lt;!--T:6--&gt;
[[Category:Python Code]]


</text>
    </revision>
  </page>
  <page>
    <title>Macro Apothem Based Prism GUI</title>
    <ns>0</ns>
    <id>43982</id>
    <revision>
      <id>133479</id>
      <parentid>116233</parentid>
      <timestamp>2014-12-26T21:05:40Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>total absence of indentation ?? i corrected</comment>
      <sha1>a1m531dzc2cc0qd8bscsa8lg4l7xfu8</sha1>
      <text xml:space="preserve" bytes="4767">
&lt;!--T:1--&gt;
{{Macro|Icon=Part Prism Apothem|Name=Apothem Based Prism|Description=A GUI dialog that creates an Apothem, (inradius) Based Prism from user input.|Author=Quick61}}

== [[Image:Part Prism Apothem.svg]]Apothem Based Prism ==

=== About === &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This macro will present the user with a dialog to provide the distance between centers, the number of sides, and height and will create a prism based on the apothem, or inradius of a polygon. This can be extremely handy when one only knows the distance between flats. An example of this would be hexagonal stock of plastics or metal provided by vendors. Most vendors define such stock by the distance between flats.  If one is using such stock in their projects, this Macro can be a real time saver. 

== How To Use == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Copy the Macro into your FreeCAD Macro directory. Then either run the macro from the Execute Macro dialog or create a shortcut to use from your custom toolbar.  

&lt;!--T:6--&gt;
When run, the Macro wil present the user with a dialog like seen below. First enter the desired distance between flats. This can be any number and can include a decimal value, it will not take fractional input. Next enter the number of sides. This number is a whole number and should be an even number as well for proper results. Lastly enter the height you wish the prism to be. Again, this can be any number and can include a decimal value. Click OK and the prism will be created in your document. 

[[Image:ABP Screenshot.png|center]]

== The Macro == &lt;!--T:7--&gt;

&lt;syntaxhighlight&gt;
# # # # # # # # # # #
#
# Apothem Based Prism
#
# This script will take the input of the distance between flats, (apothem, aka inradius), 
# and the number of sidesfor a regular polygon along with a height and produce a 
# correctly sized prism derived from the circumradius.
#
# # # # # # # # # # #
 
import FreeCAD, FreeCADGui, Part, PartGui, math
from FreeCAD import Base
from PySide import QtGui, QtCore
from math import cos, radians
App = FreeCAD
Gui = FreeCADGui
 
class p():
 
 
    def priSm(self):
 
        try:
            dbf = float(self.d1.text())
            nos = int(self.d2.text())
            hth = float(self.d3.text())
            aR = dbf / 2
            op1 = 180/float(nos)
            coS = cos(math.radians(op1))
            cR = aR / coS
            prism=App.ActiveDocument.addObject(&quot;Part::Prism&quot;,&quot;Prism&quot;)
            prism.Polygon=nos
            prism.Circumradius=cR
            prism.Height=hth
            prism.Placement=Base.Placement(Base.Vector(0.00,0.00,0.00),Base.Rotation(0.00,0.00,0.00,1.00))
            prism.Label='Prism'
            App.ActiveDocument.recompute()
            Gui.SendMsgToActiveView(&quot;ViewFit&quot;)
        except:
            FreeCAD.Console.PrintError(&quot;Unable to complete task&quot;)
 
            self.close()
 
    def close(self):
        self.dialog.hide()
 
 
#
# Make dialog box and get input for distance between flats, number of sides, and height
#
 
    def __init__(self):
        self.dialog = None
 
        self.dialog = QtGui.QDialog()
        self.dialog.resize(280,110)
 
        self.dialog.setWindowTitle(&quot;Apothem Based Prism&quot;)
        la = QtGui.QVBoxLayout(self.dialog)
 
        iN1 = QtGui.QLabel(&quot;Distance Between Flats&quot;)
        la.addWidget(iN1)
        self.d1 = QtGui.QLineEdit()
        la.addWidget(self.d1)
 
        iN2 = QtGui.QLabel(&quot;Number Of Sides (Best results - use even numbers)&quot;)
        la.addWidget(iN2)
        self.d2 = QtGui.QLineEdit()
        la.addWidget(self.d2)
 
        iN3 = QtGui.QLabel(&quot;Prism Height&quot;)
        la.addWidget(iN3)
        self.d3 = QtGui.QLineEdit()
        la.addWidget(self.d3)
 
        okbox = QtGui.QDialogButtonBox(self.dialog)
        okbox.setOrientation(QtCore.Qt.Horizontal)
        okbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        la.addWidget(okbox)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;accepted()&quot;), self.priSm)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;rejected()&quot;), self.close)
        QtCore.QMetaObject.connectSlotsByName(self.dialog)
        self.dialog.show()
        self.dialog.exec_()
 
p()
&lt;/syntaxhighlight&gt;

== Additions == &lt;!--T:8--&gt;
SVG icon for use in custom toolbar shortcut.
 

[[Image:Part Prism Apothem.svg|128px]]
 
== Acknowledgements == &lt;!--T:9--&gt;
A thanks to FreeCAD main developer [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=765 shoogen] and FreeCAD programmer [http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=1375 wandererfan] for their invaluable help and advice in constructing this Macro.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro ArchAxisSystemRepartition</title>
    <ns>0</ns>
    <id>53126</id>
    <revision>
      <id>132780</id>
      <parentid>132607</parentid>
      <timestamp>2014-12-22T17:52:35Z</timestamp>
      <contributor>
        <username>Rockn</username>
        <id>1317</id>
      </contributor>
      <comment>fix github link, fix the code</comment>
      <sha1>4k1ln8z4wbv43e5smv7tesfoatass2u</sha1>
      <text xml:space="preserve" bytes="10859">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=ArchAxisSystemRepartition|Description=Make an Arch Axis system along a line.|Author=rockn}}

&lt;!--T:8--&gt;
[[File:ArchAxisSystemRepartition.png|480px|ArchAxisSystemRepartition]]
{{clear}}

===Description=== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This macro help you to create an Arch Axis System along a line with a set of parameters. You can even create a Structural System directly from the FreeCAD-Library.

===Use=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
*Launch the macro with or without selected line.
*A Gui TaskPanel set up in the task widget.
*Set the lenght : if a line is selected, setting length actualize and forced to the line length ; if there is nothing selected the length can be changed.
*Set the desired regular spacing ; the number of divide and left spacing are automatically calculating.
*Or set the desired number of divide quantity ; this make an equal divide with no left spacing.
*Choose if you want the left spacing to be at the beginning of the repartition or at the end or each side equal.
*Check if you want a piece at the begging of the line, you can set an offset (end line direction).
*Check if you want a piece at the begging of the line, you can set an offset (start line direction).
*To validate clic on Ok button :
*If a line is selected the Arch Axis System take the placement of the line else the placement is 0.0.0.
*If you have the FreeCAD-Library gui open, the FCStd or Step file selected is imported and a Structural System is made. 

===Script=== &lt;!--T:6--&gt;

Repartition.FCMacro
&lt;syntaxhighlight&gt;
#!/usr/bin/env python
# -*- coding: utf-8 -*-

#***************************************************************************
#*                                                                         *
#*   Copyright (c) 2014 Jonathan Wiedemann &lt;wood.galaxy@gmail.com          *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU Lesser General Public License (LGPL)    *
#*   as published by the Free Software Foundation; either version 2 of     *
#*   the License, or (at your option) any later version.                   *
#*   for detail see the LICENCE text file.                                 *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU Library General Public License for more details.                  *
#*                                                                         *
#*   You should have received a copy of the GNU Library General Public     *
#*   License along with this program; if not, write to the Free Software   *
#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
#*   USA                                                                   *
#*                                                                         *
#***************************************************************************

__title__=&quot;Repartition&quot;
__author__ = &quot;Jonathan Wiedemann&quot;
__url__ = &quot;http://www.freecad-france.com&quot;

import FreeCAD, FreeCADGui, DraftGeomUtils, DraftVecUtils
import Arch
import Part
import math
from PySide import QtCore, QtGui

class _RepartitionTaskPanel:
	def __init__(self):
		self.title = QtGui.QLabel('Repartition')
		self.grid = QtGui.QGridLayout()
		self.grid.addWidget(self.title, 1, 0)

		self.longueurLabel = QtGui.QLabel('Longueur')

		self.dSBLongueur = QtGui.QDoubleSpinBox()
		self.dSBLongueur.setRange(0., 9999999.)
		self.sel = FreeCADGui.Selection.getSelection()
		if self.sel:
			self.longueur = self.sel[0].Shape.Length
			self.dSBLongueur.setValue(self.longueur)
		else:
			self.dSBLongueur.setValue(5000.)

		self.grid.addWidget(self.longueurLabel, 2, 0)
		self.grid.addWidget(self.dSBLongueur, 2, 1)

		self.ecartementLabel = QtGui.QLabel('Ecartement')
		self.ecartementDSB = QtGui.QDoubleSpinBox()
		self.ecartementDSB.setRange(0., 9999999.)
		self.ecartementDSB.setValue(500.)
		self.grid.addWidget(self.ecartementLabel, 3, 0)
		self.grid.addWidget(self.ecartementDSB, 3, 1)

		self.qteLabel = QtGui.QLabel('Quantite')
		self.qteSB = QtGui.QSpinBox()
		self.qteSB.setRange(0,99999)
		self.grid.addWidget(self.qteLabel, 4, 0)
		self.grid.addWidget(self.qteSB, 4, 1)

		self.infoText = QtGui.QLabel('Espace restant = ')
		self.grid.addWidget(self.infoText, 5, 0)
		self.combobox = QtGui.QComboBox()
		items = [&quot;Debut&quot;,&quot;Fin&quot;,&quot;Divise&quot;]
		self.combobox.addItems(items)
		self.combobox.setCurrentIndex(items.index(&quot;Fin&quot;))
		self.grid.addWidget(self.combobox, 5, 1)

		self.debutLabel = QtGui.QLabel('Debut')
		self.grid.addWidget(self.debutLabel, 6, 0)

		self.debutRepartitionCB = QtGui.QCheckBox()
		self.debutRepartitionCB.setCheckState(QtCore.Qt.CheckState.Checked)
		self.grid.addWidget(self.debutRepartitionCB, 6, 1)

		self.decalageDebutLabel = QtGui.QLabel('Decalage')
		self.grid.addWidget(self.decalageDebutLabel, 7, 0)

		self.decalageDebutDSB = QtGui.QDoubleSpinBox()
		self.decalageDebutDSB.setRange(0., 9999999.)
		self.grid.addWidget(self.decalageDebutDSB, 7, 1)

		self.finLabel = QtGui.QLabel('Fin')
		self.grid.addWidget(self.finLabel, 8, 0)

		self.finRepartitionCB = QtGui.QCheckBox()
		self.finRepartitionCB.setCheckState(QtCore.Qt.CheckState.Checked)
		self.grid.addWidget(self.finRepartitionCB, 8, 1)

		self.decalageFinLabel = QtGui.QLabel('Decalage')
		self.grid.addWidget(self.decalageFinLabel, 9, 0)

		self.decalageFinDSB = QtGui.QDoubleSpinBox()
		self.decalageFinDSB.setRange(0., 9999999.)
		self.grid.addWidget(self.decalageFinDSB, 9, 1)

		groupBox = QtGui.QGroupBox()
		groupBox.setLayout(self.grid)
		self.form = groupBox

		QtCore.QObject.connect(self.dSBLongueur,QtCore.SIGNAL(&quot;valueChanged(double)&quot;),self.changerLongueur)
		QtCore.QObject.connect(self.ecartementDSB,QtCore.SIGNAL(&quot;valueChanged(double)&quot;),self.changerEcartement)
		QtCore.QObject.connect(self.qteSB,QtCore.SIGNAL(&quot;valueChanged(int)&quot;),self.changerQte)
		QtCore.QObject.connect(self.combobox,QtCore.SIGNAL(&quot;currentIndexChanged(int)&quot;),self.afficherResultats)
		self.changerLongueur()

	def recupererDonnees(self):
		self.sel = FreeCADGui.Selection.getSelection()
		if self.sel:
			self.longueur = self.sel[0].Shape.Length
		else:
			self.longueur = self.dSBLongueur.value()
		self.ecartementRegulier = self.ecartementDSB.value()
		self.qteEcartement = self.qteSB.value()

		self.objetDebut =  self.debutRepartitionCB.isChecked()
		self.decalageDebut = self.decalageDebutDSB.value()
		self.plEspaceRestant = self.combobox.currentIndex()
		self.objetFin = self.finRepartitionCB.isChecked()
		self.decalageFin = self.decalageFinDSB.value()

	def changerLongueur(self):
		self.recupererDonnees()
		self.qteEcartement = int(math.ceil(self.longueur/self.ecartementRegulier))
		self.afficherResultats()

	def changerEcartement(self):
		self.recupererDonnees()
		self.qteEcartement = int(math.ceil(self.longueur/self.ecartementRegulier))
		self.afficherResultats()

	def changerQte(self):
		self.recupererDonnees()
		self.ecartementRegulier = self.longueur/self.qteEcartement
		self.afficherResultats()

	def afficherResultats(self):
		self.dSBLongueur.blockSignals(True)
		self.dSBLongueur.setValue(self.longueur)
		self.dSBLongueur.blockSignals(False)

		self.ecartementDSB.blockSignals(True)
		self.ecartementDSB.setValue(self.ecartementRegulier)
		self.ecartementDSB.blockSignals(False)


		self.qteSB.blockSignals(True)
		self.qteSB.setValue(self.qteEcartement)
		self.qteSB.blockSignals(False)

		self.espaceRestant = self.longueur - (self.qteEcartement-1) * self.ecartementRegulier
		if round(self.espaceRestant,2) == round(self.ecartementRegulier,2):
			self.espaceRestant = 0.
		if self.combobox.currentIndex() == 2:
			self.infoText.setText( str('Espace restant = 2 x ') + str(round(self.espaceRestant/2,2)) + str(' mm') )
		else:
			self.infoText.setText( str('Espace restant = ') + str(round(self.espaceRestant,2)) + str(' mm') )

	def accept(self):
		self.recupererDonnees()
		distancesListe = []
		if self.objetDebut:
			distancesListe.append(self.decalageDebut)
		if self.plEspaceRestant == 0:
			distancesListe.append(self.espaceRestant)
		if self.plEspaceRestant == 1:
			distancesListe.append(self.ecartementRegulier-self.decalageDebut)
		if self.plEspaceRestant == 2:
			distancesListe.append(self.espaceRestant/2-self.decalageDebut)
		for i in range(self.qteEcartement-2):
			distancesListe.append(self.ecartementRegulier)
		if self.objetFin:
			if self.plEspaceRestant == 0:
				distancesListe.append(self.ecartementRegulier-self.decalageFin-self.decalageDebut)
			if self.plEspaceRestant == 1:
				distancesListe.append(self.espaceRestant-self.decalageFin)
			if self.plEspaceRestant == 2:
				distancesListe.append(self.ecartementRegulier)
				distancesListe.append((self.espaceRestant/2)-self.decalageFin)
		repartition = Arch.makeAxis(num=len(distancesListe), name=&quot;Repartition&quot;)
		repartition.Length = 1000.00
		repartition.Distances= distancesListe

		self.sel = FreeCADGui.Selection.getSelection()
		if self.sel:
			edges = DraftGeomUtils.sortEdges(self.sel[0].Shape.Wires[0].Edges)
			vec1 = edges[0].Vertexes[-1].Point.sub(edges[0].Vertexes[0].Point)
			point1 = edges[0].Vertexes[0].Point
			rot = math.degrees(DraftVecUtils.angle(vec1))*-1
			repartition.Placement = App.Placement(App.Vector(point1),App.Rotation(App.Vector(0.0,0.0,1.0),rot))
			FreeCAD.ActiveDocument.recompute()
		else:
			repartition.Placement = App.Placement(App.Vector(0.0,0.0,0.0),App.Rotation(App.Vector(0.0,0.0,1.0),0))

		m = FreeCADGui.getMainWindow()
		w = m.findChild(QtGui.QDockWidget,&quot;PartsLibrary&quot;)
		if w:
			if w.isVisible():
				index = w.folder_view.selectedIndexes()[0]
				path = w.dirmodel.filePath(index)
				if path.lower().endswith(&quot;.stp&quot;) or path.lower().endswith(&quot;.step&quot;) or path.lower().endswith(&quot;.brep&quot;):
					objetRepartit = Part.show(Part.read(path))
				else:
					objetRepartit = FreeCADGui.ActiveDocument.mergeProject(path)
				repartitionStructurel = Arch.makeStructuralSystem([FreeCAD.ActiveDocument.Objects[-1],],[repartition,], name=&quot;RepartitionStructurelle&quot;)
		return True

	def reject(self):
		return True

	def getStandardButtons(self):
		return int(QtGui.QDialogButtonBox.Ok|QtGui.QDialogButtonBox.Cancel)


panel=_RepartitionTaskPanel()
FreeCADGui.Control.showDialog(panel)
&lt;/syntaxhighlight&gt;


===Links=== &lt;!--T:7--&gt;
*Video [https://www.youtube.com/watch?v=jfDTkH9-I5Q Macro in action]
*[[Macro_PartsLibrary|Macro_PartsLibrary]] FreeCAD Library 
*Github [https://github.com/wood-galaxy/FreeCAD-scripts Macro wood galaxy]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro ArrayCopy</title>
    <ns>0</ns>
    <id>1399</id>
    <revision>
      <id>81609</id>
      <parentid>57832</parentid>
      <timestamp>2014-05-04T21:09:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>solved indentation error</comment>
      <sha1>oj1kegclvc9d3v0g6kcdn8b5enxe8nv</sha1>
      <text xml:space="preserve" bytes="2282">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=ArrayCopy|Description=This macro copies the selected object several times, on an array grid|Author=Yorik}}

&lt;!--T:2--&gt;
This macro copies the selected object several times, on an array grid. You can define the number of rows and columns and the distance between them. You need [http://en.wikipedia.org/wiki/PyQt pyqt] installed.



&lt;syntaxhighlight&gt;

import FreeCAD, FreeCADGui, Part
from PyQt4 import QtGui,QtCore
 
def proceed():
    try:
        u = (int(l1.text()),float(l2.text()))   
        v = (int(l3.text()),float(l4.text()))
    except:
        FreeCAD.Console.PrintError(&quot;Wrong input! Only numbers allowed...\n&quot;)
    sel = FreeCADGui.Selection.getSelection()
    if sel:
        sel = sel[0]
        name = sel.Name   
        shape = sel.Shape
        for column in range(u[0]):
            for row in range(v[0]):
                if (column != 0) or (row != 0):
                    delta = FreeCAD.Vector(column*u[1],row*v[1],0)   
                    newshape = sel.Shape.copy()
                    newshape.translate(delta)
                    newobject = FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,name)
                    newobject.Shape = newshape
    else:
        FreeCAD.Console.PrintError(&quot;Error: One object must be selected&quot;)
    hide()
 
def hide():
    dialog.hide()
 
dialog = QtGui.QDialog()
dialog.resize(200,300)
dialog.setWindowTitle(&quot;Array&quot;)
la = QtGui.QVBoxLayout(dialog)
t1 = QtGui.QLabel(&quot;number of columns&quot;)
la.addWidget(t1)
l1 = QtGui.QLineEdit()
la.addWidget(l1)
t2 = QtGui.QLabel(&quot;distance between columns&quot;)
la.addWidget(t2)
l2 = QtGui.QLineEdit()
la.addWidget(l2)
t3 = QtGui.QLabel(&quot;number of rows&quot;)
la.addWidget(t3)
l3 = QtGui.QLineEdit()
la.addWidget(l3)
t4 = QtGui.QLabel(&quot;distance between rows&quot;)   
la.addWidget(t4)
l4 = QtGui.QLineEdit()
la.addWidget(l4)
okbox = QtGui.QDialogButtonBox(dialog)
okbox.setOrientation(QtCore.Qt.Horizontal)
okbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
la.addWidget(okbox)
QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;accepted()&quot;), proceed)
QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;rejected()&quot;), hide)
QtCore.QMetaObject.connectSlotsByName(dialog)
dialog.show()

&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Macro Assembly</title>
    <ns>0</ns>
    <id>41805</id>
    <revision>
      <id>111797</id>
      <parentid>111697</parentid>
      <timestamp>2014-09-30T19:39:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>+ simul</comment>
      <sha1>nvkx2wio89txuzniu8jrx8fgz2s8vud</sha1>
      <text xml:space="preserve" bytes="11509">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Assy Simul|Description=FreeCad Python assembly animation.|Author=ralvejd}}

&lt;!--T:2--&gt;
Simulate assembly .

&lt;!--T:3--&gt;
[[File:Assy.gif|left]]{{clear}}

===Uses=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Download the files in FreeCAD and run the macro

===The File=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[http://forum.freecadweb.org/download/file.php?id=6740 Assy.fcstd]

===Script=== &lt;!--T:8--&gt;


&lt;syntaxhighlight&gt;
#******************************************************************************
#
# Assembly animation by Joakim Isaksson 20140803
#
#******************************************************************************

import FreeCAD, FreeCADGui, Draft, Part
from FreeCAD import Gui
import math
from pivy import coin
from PySide import QtCore, QtGui
from time import sleep

# + + + + + + BEGIN Animation configuration  + + + + + +

doc_name = &quot;Assy&quot;      # The document name of the FreeCAD model
ani_startwait = 3000   # Milliseconds before the animation starting
ani_partwait   = 50   # Milliseconds before the part begin to move
ani_bitrate = 10      # Milliseconds between part moves
ani_dist = 5         # Distance part moves each time
ani_offset_dist = 200   # Distance part is moved before the animation starts

# Tuples for all parts label
#  *  First item in Tuples is the animation view angle
#  *  The remaining items are label on parts to be assembled in list sequence
ani_1  = ( &quot;z-&quot; , &quot;ChassieBack_001&quot; , &quot;ChassieWall_001&quot; , &quot;ChassieWall_002&quot; ,
           &quot;ChassieWall_003&quot; , &quot;ChassieWall_004&quot; , &quot;ChassieWall_005&quot; ,
           &quot;ChassieFront_001&quot; ) ;
ani_2  = ( &quot;z-&quot; , &quot;ISO4762_M4x12_001&quot; , &quot;ISO4762_M4x12_002&quot; ,
           &quot;ISO4762_M4x12_003&quot; , &quot;ISO4762_M4x12_004&quot; , &quot;ISO4762_M4x12_005&quot; ,
           &quot;ISO4762_M4x12_006&quot; , &quot;ISO4762_M4x12_007&quot; , &quot;ISO4762_M4x12_008&quot; ,
           &quot;ISO4762_M4x12_009&quot; , &quot;ISO4762_M4x12_010&quot; ) ;
ani_3  = ( &quot;z+&quot; , &quot;ISO4762_M4x12_011&quot; , &quot;ISO4762_M4x12_012&quot; ,
           &quot;ISO4762_M4x12_013&quot; , &quot;ISO4762_M4x12_014&quot; , &quot;ISO4762_M4x12_015&quot; ,
           &quot;ISO4762_M4x12_016&quot; , &quot;ISO4762_M4x12_017&quot; , &quot;ISO4762_M4x12_018&quot; ,
           &quot;ISO4762_M4x12_019&quot; , &quot;ISO4762_M4x12_020&quot; ) ;
ani_4  = ( &quot;z+&quot; , &quot;EuroCard_001&quot; , &quot;EuroCard_002&quot; , &quot;EuroCard_003&quot; ,
           &quot;EuroCard_004&quot; ) ;
ani_5  = ( &quot;z+&quot; , &quot;Panel_005&quot; ,  &quot;Panel_006&quot; , &quot;Panel_007&quot; , &quot;Panel_008&quot; ) ;
ani_6  = ( &quot;z+&quot; , &quot;ISO7380_M3x8_&quot; , &quot;ISO7380_M3x8_001&quot; , &quot;ISO7380_M3x8_002&quot; ,
           &quot;ISO7380_M3x8_003&quot; , &quot;ISO7380_M3x8_004&quot; , &quot;ISO7380_M3x8_005&quot; ,
           &quot;ISO7380_M3x8_006&quot; , &quot;ISO7380_M3x8_007&quot; , &quot;ISO7380_M3x8_008&quot; ,
           &quot;ISO7380_M3x8_009&quot; ) ;
ani_7  = ( &quot;z-&quot; , &quot;Panel_001&quot; , &quot;Panel_002&quot; , &quot;Panel_003&quot; , &quot;Panel_004&quot; ) ;
ani_8  = ( &quot;z-&quot; , &quot;ISO7380_M3x8_010&quot; , &quot;ISO7380_M3x8_011&quot; ,
           &quot;ISO7380_M3x8_012&quot; , &quot;ISO7380_M3x8_013&quot; , &quot;ISO7380_M3x8_014&quot; ,
           &quot;ISO7380_M3x8_015&quot; , &quot;ISO7380_M3x8_016&quot; , &quot;ISO7380_M3x8_017&quot; ,
           &quot;ISO7380_M3x8_018&quot; , &quot;ISO7380_M3x8_019&quot; ) ;
ani_9  = ( &quot;y-&quot; , &quot;LidBottom_001&quot; ) ;
ani_10 = ( &quot;y-&quot; , &quot;ISO10642_M3x8_&quot; , &quot;ISO10642_M3x8_001&quot; ,
           &quot;ISO10642_M3x8_002&quot; , &quot;ISO10642_M3x8_003&quot; , &quot;ISO10642_M3x8_004&quot; ,
           &quot;ISO10642_M3x8_005&quot; , &quot;ISO10642_M3x8_006&quot; , &quot;ISO10642_M3x8_007&quot; ,
           &quot;ISO10642_M3x8_008&quot; , &quot;ISO10642_M3x8_009&quot; ) ;
ani_11 = ( &quot;y+&quot; , &quot;LidTop_001&quot; ) ;
ani_12 = ( &quot;y+&quot; , &quot;ISO10642_M3x8_010&quot; , &quot;ISO10642_M3x8_011&quot; ,
           &quot;ISO10642_M3x8_012&quot; , &quot;ISO10642_M3x8_013&quot; , &quot;ISO10642_M3x8_014&quot; ,
           &quot;ISO10642_M3x8_015&quot; , &quot;ISO10642_M3x8_016&quot; , &quot;ISO10642_M3x8_017&quot; ,
           &quot;ISO10642_M3x8_018&quot; , &quot;ISO10642_M3x8_019&quot; ) ;

# Set the animation end view
ani_end = &quot;z-&quot;

# Camera oriantations
#  *  Edit this tuples to your need
rear_view_pos    = ( -400 , -80 , 480 ) ;
rear_view_ang    = ( 0 , 1 , 0  ) ;
front_view_pos    = ( -400 , 80 , 480 ) ;
front_view_ang    = ( 0 , -1 , 0  ) ;
top_view_pos    = ( -400 , -80 , 480  ) ;
top_view_ang    = ( -1 , 0 , 0 ) ;
bottom_view_pos = ( -400 , 80 , -480 );
bottom_view_ang = ( 1 , 0 , 0 ) ;

# + + + + + + END Animation configuration  + + + + + +

# + + + + + + Function  + + + + + +

def pulse(milliseconds):
   for i in range(milliseconds/10  ):
      Gui.updateGui( )
      sleep(0.01)

def setView(axis_vector, rotation_vector):
   r=App.Rotation(App.Vector(axis_vector),App.Vector(rotation_vector))
   Gui.ActiveDocument.ActiveView.setCameraOrientation(r.Q)

def getPartName(label):
   for i in App.ActiveDocument.Objects:
      if str(i.Label) == label:
         #App.Console.PrintMessage(str(i.Name) + &quot;  &lt;-&gt;  &quot; + i.Label + &quot;\n&quot;)
         return str(i.Name)

def animate(aniList):
   total = len(aniList)
   for n in range(1,total):
      direction = aniList[0]
      #App.Console.PrintMessage(str(aniList) + &quot; : &quot; + str(direction) + &quot;\n&quot;)
      part_name = getPartName(aniList[n])
      tmpX = App.getDocument(doc_name).getObject(part_name).Placement.Base[0]
      tmpY = App.getDocument(doc_name).getObject(part_name).Placement.Base[1]
      tmpZ = App.getDocument(doc_name).getObject(part_name).Placement.Base[2]
      tmpRotation=App.ActiveDocument.getObject(part_name).Placement.Rotation
      #Show the part
      if direction == &quot;x+&quot;:   #TODO not tested
         setView(rear_view_pos , rear_view_ang)
         tmpDist = tmpX + ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpDist,tmpZ), App.Rotation(tmpRotation),\
                App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist - ani_dist
            App.ActiveDocument.getObject(part_name).Placement=\
                   App.Placement(App.Vector(tmpX,tmpDist,tmpZ),\
                   App.Rotation(tmpRotation), App.Vector(0,0,0))
            pulse(ani_bitrate)

      elif direction == &quot;x-&quot;:   #TODO not tested
         setView(front_view_pos , front_view_ang)
         tmpDist = tmpX - ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpDist,tmpZ),\
               App.Rotation(tmpRotation), App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist + ani_dist
            App.ActiveDocument.getObject(part_name).Placement=App.\
                   Placement(App.Vector(tmpX,tmpDist,tmpZ),\
                   App.Rotation(tmpRotation), App.Vector(0,0,0))
            pulse(ani_bitrate)

      elif direction == &quot;y+&quot;:
         setView(rear_view_pos , rear_view_ang)
         tmpDist = tmpY + ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpDist,tmpZ), App.Rotation(tmpRotation),\
               App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist - ani_dist
            App.ActiveDocument.getObject(part_name).Placement=App.\
                   Placement(App.Vector(tmpX,tmpDist,tmpZ),\
                   App.Rotation(tmpRotation),App.Vector(0,0,0))
            pulse(ani_bitrate)

      elif direction == &quot;y-&quot;:
         setView(front_view_pos , front_view_ang)
         tmpDist = tmpY - ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpDist,tmpZ), App.Rotation(tmpRotation),\
               App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist + ani_dist
            App.ActiveDocument.getObject(part_name).Placement=App.\
                   Placement(App.Vector(tmpX,tmpDist,tmpZ),\
                   App.Rotation(tmpRotation), App.Vector(0,0,0))
            pulse(ani_bitrate)

      elif direction == &quot;z+&quot;:
         setView(top_view_pos , top_view_ang)
         tmpDist = tmpZ +ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpY,tmpDist), App.Rotation(tmpRotation),\
               App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist - ani_dist
            App.ActiveDocument.getObject(part_name).Placement=App.\
                   Placement(App.Vector(tmpX,tmpY,tmpDist),\
                   App.Rotation(tmpRotation), App.Vector(0,0,0))
            pulse(ani_bitrate)

      elif direction == &quot;z-&quot;:
         setView(bottom_view_pos , bottom_view_ang)
         tmpDist = tmpZ - ani_offset_dist
         sel = FreeCADGui.Selection.clearSelection (doc_name )
         App.ActiveDocument.getObject(part_name).Placement=App.Placement\
               (App.Vector(tmpX,tmpY,tmpDist), App.Rotation(tmpRotation),\
               App.Vector(0,0,0))
         Gui.getDocument(doc_name).getObject(part_name).Visibility=True
         pulse(ani_partwait)
         
         for i in range(0,ani_step):
            tmpDist = tmpDist + ani_dist
            App.ActiveDocument.getObject(part_name).Placement=App.\
                   Placement(App.Vector(tmpX,tmpY,tmpDist),\
                   App.Rotation(tmpRotation), App.Vector(0,0,0))
            pulse(ani_bitrate)

def theend(direction):
   if direction == &quot;x+&quot;:
      setView(rear_view_pos , rear_view_ang)
   elif direction == &quot;x-&quot;:
      setView(front_view_pos , front_view_ang)
   elif direction == &quot;y+&quot;:
      setView(rear_view_pos , rear_view_ang)
   elif direction == &quot;y-&quot;:
      setView(front_view_pos , front_view_ang)
   elif direction == &quot;z+&quot;:
      setView(top_view_pos , top_view_ang)
   elif direction == &quot;z-&quot;:
      setView(bottom_view_pos , bottom_view_ang)

def startAnimation():
 # Animation sequence
   animate(ani_1)
   animate(ani_2)
   animate(ani_3)
   animate(ani_4)
   animate(ani_5)
   animate(ani_6)
   animate(ani_7)
   animate(ani_8)
   animate(ani_9)
   animate(ani_10)
   animate(ani_11)
   animate(ani_12)
   theend(ani_end)
   Gui.ActiveDocument.ActiveView.startAnimating(0,1,0,0.2) #TODO fixit

# + + + + + + Main + + + + + +
# Set full screen
App.setActiveDocument(doc_name)
App.ActiveDocument=App.getDocument(doc_name)
ActiveDocument=Gui.getDocument(doc_name)
Gui.updateGui ( )
mw=QtGui.qApp.activeWindow()
ev=QtGui.QKeyEvent(QtCore.QEvent.KeyPress,\
   QtCore.Qt.Key_F11,QtCore.Qt.NoModifier)
QtGui.qApp.sendEvent(mw,ev)

# A short break for the GUI to catch up
pulse(ani_startwait)

# Adjust ani_offset if Modulus != 0
ani_offset_dist = ani_offset_dist - ani_offset_dist % ani_dist

# Calculate the required number of steps for the animation
ani_step = ani_offset_dist / ani_dist

startAnimation()
&lt;/syntaxhighlight&gt;

===Link=== &lt;!--T:9--&gt;
The page discussion [http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=7256 FreeCad Python assembly animation]

&lt;!--T:10--&gt;
[http://youtu.be/5Ik2Bh4wXYg See the animation on YouTube.]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Automatic drawing</title>
    <ns>0</ns>
    <id>1404</id>
    <revision>
      <id>58031</id>
      <parentid>58030</parentid>
      <timestamp>2013-12-25T17:39:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>19kfz4d1u3b2jyo5tbnww38sd98wbzl</sha1>
      <text xml:space="preserve" bytes="3983">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Automatic drawing|Description=This code allow the user to get the view of his object in a drawing with 4 different position(front,top,iso,right). Needs some modification to be perfectly effective.|Author=unknown}}

&lt;!--T:2--&gt;
This code generates a [[Drawing Module|Drawing]] page with three orthographic views (front, top and right) aligned to each other, and an isometric view placed at the top right of the page. It calculates the scale based on the model size and space available on the sheet. The iso view is scaled to 2/3 of the ortho views.&lt;br /&gt;
It uses the [http://en.wikipedia.org/wiki/Multiview_orthographic_projection#First-angle_projection first-angle projection].

==== How to use ==== &lt;!--T:3--&gt;
An object needs to be selected before launching the macro.

==== Limitations ==== &lt;!--T:4--&gt;
* Scale is not standard. You may need to change the views manually to a standard scale.
* It only works with a single object (this is a limitation from the Drawing Workbench)
* Needs to be modified to work for [http://en.wikipedia.org/wiki/Multiview_orthographic_projection#Third-angle_projection third-angle projection] used in the US and Canada.

==== The script ==== &lt;!--T:5--&gt;



&lt;syntaxhighlight&gt;

import FreeCAD, Part, Drawing
if len(Gui.Selection.getSelectionEx())&gt;1:
   App.Console.PrintError(&quot;Warning: Only the first item is generate&quot;)
if len(Gui.Selection.getSelectionEx())==0:
   App.Console.PrintError(&quot;Warning: Need to select one item&quot;)
Piece=Gui.Selection.getSelectionEx()[0]
App.activeDocument().addObject('Drawing::FeaturePage','AutoDrawing')
App.activeDocument().AutoDrawing.Template = App.getResourceDir()+'Mod/Drawing/Templates/A3_Landscape.svg'
DH=20
DL=30
L=Piece.Object.Shape.BoundBox.XMax
H=Piece.Object.Shape.BoundBox.ZMax
P=Piece.Object.Shape.BoundBox.YMax
Sc=(400-3*DL)/(L+H)
Sc2=(250-3*DH)/(P+H)
if Sc&gt;Sc2 : 
   Sc=Sc2
TopX=DL+Sc*L
FrontX=DL+Sc*L
RightX=2*DL+Sc*L
IsoX=2*DL+Sc*(L)
TopY=DH+Sc*P
RightY=DH+P*Sc
FrontY=2*DH+Sc*(P+H)
IsoY=2*DH+Sc*P

print TopX,RightX,TopY,FrontY

#Create topView
App.activeDocument().addObject('Drawing::FeatureViewPart','topView')
App.activeDocument().topView.Source =Piece.Object
App.activeDocument().topView.Direction = (0,0,1)
App.activeDocument().topView.Rotation=180
App.activeDocument().topView.X = TopX
App.activeDocument().topView.Y = TopY
App.activeDocument().topView.ShowHiddenLines=True
App.activeDocument().AutoDrawing.addObject(App.activeDocument().topView)
App.activeDocument().topView.Scale = Sc
#Create FrontView
App.activeDocument().addObject('Drawing::FeatureViewPart','FrontView')
App.activeDocument().FrontView.Source =Piece.Object
App.activeDocument().FrontView.Direction = (0,-1,0)
App.activeDocument().FrontView.Rotation=90
App.activeDocument().FrontView.Scale = Sc
App.activeDocument().FrontView.X = FrontX
App.activeDocument().FrontView.Y = FrontY
App.activeDocument().FrontView.ShowHiddenLines=True
App.activeDocument().AutoDrawing.addObject(App.activeDocument().FrontView)
#Create RightView
App.activeDocument().addObject('Drawing::FeatureViewPart','RightView')
App.activeDocument().RightView.Source =Piece.Object
App.activeDocument().RightView.Direction = (1,0,0)
App.activeDocument().RightView.Scale = Sc
App.activeDocument().RightView.X = RightX
App.activeDocument().RightView.Y = RightY
App.activeDocument().RightView.ShowHiddenLines=True
App.activeDocument().AutoDrawing.addObject(App.activeDocument().RightView)
#Create IsotView
App.activeDocument().addObject('Drawing::FeatureViewPart','IsoView')
App.activeDocument().IsoView.Source =Piece.Object
App.activeDocument().IsoView.Direction = (1,1,1)
App.activeDocument().IsoView.Rotation=60
App.activeDocument().IsoView.Scale = Sc*.6
App.activeDocument().IsoView.X = IsoX
App.activeDocument().IsoView.Y = IsoY
App.activeDocument().IsoView.ShowHiddenLines=True
App.activeDocument().AutoDrawing.addObject(App.activeDocument().IsoView)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro BOLTS</title>
    <ns>0</ns>
    <id>11300</id>
    <revision>
      <id>108263</id>
      <parentid>58934</parentid>
      <timestamp>2014-09-02T15:27:28Z</timestamp>
      <contributor>
        <username>Jreinhardt</username>
        <id>3298</id>
      </contributor>
      <comment>Updated BOLTS webpage URL</comment>
      <sha1>i0g56qtttymd0evs79ftnsbc78xia4i</sha1>
      <text xml:space="preserve" bytes="1646">
&lt;!--T:1--&gt;
{{Macro|Icon=Macro_BOLTS|Name=BOLTS|Description=BOLTS tries to provide a library of common and standard parts for FreeCAD|Author=jreinhardt}}

&lt;!--T:2--&gt;
The aim of BOLTS is to build a free and open-source standard parts library for CAD applications. It does so by providing a common database that can be utilized by many different CAD applications, and leveraging the parametric power of FreeCAD to create many different variatiants and sizes of a part.

&lt;!--T:3--&gt;
BOLTS for FreeCAD provides a widget that allows to insert parts into the active document. Sizes and variants of a part can be selected in the widget, and the part is given a descriptive label.

&lt;!--T:4--&gt;
[[File:freecad-bearing.png|480px|thumb|left|The BOLTS widget and a bearing from BOLTS]]
{{clear}}

&lt;!--T:5--&gt;
More information about BOLTS can be found on its [http://www.bolts-library.org webpage].

&lt;!--T:6--&gt;
The webpage also provides a [http://www.bolts-library.org/en/parts/index.html list of all the parts] that BOLTS currently includes, including drawings and tables with dimensions.

=== How to use === &lt;!--T:7--&gt;
There are detailed instruction in the [http://www.bolts-library.org/en/docs/index.html Documentation section] of the webpage:
* How to install BOLTS for FreeCAD
* How to setup a toolbar button for BOLTS
* How to use BOLTS for FreeCAD

=== Contribute === &lt;!--T:8--&gt;
A library of parts that is useful for a broad range of people can only be realised as a community effort. There are many possibilities to [http://www.bolts-library.org/en/contribute.html contribute] to BOLTS in a number of different ways.


</text>
    </revision>
  </page>
  <page>
    <title>Macro BoundingBox Tracing</title>
    <ns>0</ns>
    <id>28582</id>
    <revision>
      <id>81818</id>
      <parentid>81817</parentid>
      <timestamp>2014-05-06T19:47:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>i2s025afmq321cvfudoxxnksu4ssztu</sha1>
      <text xml:space="preserve" bytes="4488">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro BoundingBox Tracing|Description=This macro red trace (editable) around the BoundingBox with 6 rectangles.|Author=Mario52}}

==Description== &lt;!--T:2--&gt;
This macro red trace (editable) around the BoundingBox 6 Faces with 6 rectangles.

&lt;!--T:5--&gt;
[[File:Macro BoundingBox_Tracing_00.png|480px|CenterFace]]
{{clear}}

==Use== &lt;!--T:3--&gt;
Select the object and launch the macro. 6 rectangles are colored red (can be changed)

&lt;!--T:6--&gt;
To change the color of the dot change the lines 42, 43, 44

&lt;!--T:7--&gt;
&lt;syntaxhighlight&gt;
    red   = 1.0  # 1 = 255
    green = 0.0  #
    blue  = 0.0  #
&lt;/syntaxhighlight&gt;

==Macro== &lt;!--T:4--&gt;


'''Macro_BoundingBox_Tracing.FCMacro'''

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# cette macro trace en rouge (modifiable) le tour du boundingbox avec 6 rectangles
# this macro red trace (editable) around the BoundingBox with 6 rectangles
# To change the color of the dot change the lines 42, 43, 44
# red   = 1.0  # 1 = 255
# green = 0.0  #
# blue  = 0.0  #
# Macro_BoundingBox_Tracing
# ver 0.2
# Mario52
#
#OS: Windows Vista
#Platform: 32-bit
#Version: 0.14.3389
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1

import FreeCAD, FreeCADGui, Draft, Part

selEx = FreeCADGui.Selection.getSelectionEx()
objs = [selobj.Object for selobj in selEx]
if len(objs) &gt;= 1:
    s = objs[0].Shape

    # boundBox
    boundBox_ = s.BoundBox
    boundBoxLX = boundBox_.XLength
    boundBoxLY = boundBox_.YLength
    boundBoxLZ = boundBox_.ZLength

    a = str(boundBox_)
    a,b = a.split('(')
    c = b.split(',')
    oripl_X = float(c[0])
    oripl_Y = float(c[1])
    oripl_Z = float(c[2])

    App.Console.PrintMessage(str(boundBox_)+&quot;\r\n&quot;)
    App.Console.PrintMessage(&quot;Rectangle : &quot;+str(boundBox_.XLength)+&quot; x &quot;+str(boundBox_.YLength)+&quot; x &quot;+str(boundBox_.ZLength)+&quot;\r\n&quot;)
    App.Console.PrintMessage(&quot;_____________________&quot;+&quot;\r\n&quot;)

    # LineColor
    red   = 1.0  # 1 = 255
    green = 0.0  #
    blue  = 0.0  #

    #####
    try:
        pl_0 = App.Placement(App.Vector(oripl_X,oripl_Y,oripl_Z), App.Rotation(0.0,0.0,0.0))
        double = Draft.makeRectangle(length=boundBox_.XLength,height=boundBox_.YLength,placement=pl_0,face=False,support=None) #OK
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 0&quot;+&quot;\n&quot;)
    try:
        pl_1 = App.Placement(App.Vector(oripl_X,oripl_Y,oripl_Z+boundBoxLZ), App.Rotation(0.0,0.0,0.0))
        double = Draft.makeRectangle(length=boundBox_.XLength,height=boundBox_.YLength,placement=pl_1,face=False,support=None) #Ok
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 1&quot;+&quot;\n&quot;)
    try:
        pl_2 = App.Placement(App.Vector(oripl_X,oripl_Y,oripl_Z), App.Rotation(0.0,0.0,90))
        double = Draft.makeRectangle(length=boundBox_.XLength,height=boundBox_.ZLength,placement=pl_2,face=False,support=None) #Ok
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 2&quot;+&quot;\n&quot;)
    try:
        pl_3 = App.Placement(App.Vector(oripl_X,oripl_Y+boundBoxLY,oripl_Z), App.Rotation(0.0,0.0,90))
        double = Draft.makeRectangle(length=boundBox_.XLength,height=boundBox_.ZLength,placement=pl_3,face=False,support=None) #Ok
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 3&quot;+&quot;\n&quot;)
    try:
        pl_4 = App.Placement(App.Vector(oripl_X,oripl_Y,oripl_Z), App.Rotation(90,0.0,90))
        double = Draft.makeRectangle(length=boundBoxLY,height=boundBox_.ZLength,placement=pl_4,face=False,support=None) #Ok
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 4&quot;+&quot;\n&quot;)
    try:
        pl_5 = App.Placement(App.Vector(oripl_X+boundBoxLX,oripl_Y,oripl_Z), App.Rotation(90,0.0,90))
        double = Draft.makeRectangle(length=boundBoxLY,height=boundBoxLZ,placement=pl_5,face=False,support=None) #Ok
        FreeCADGui.activeDocument().activeObject().LineColor = (red, green, blue)
    except:
        App.Console.PrintError(&quot;not done 5&quot;+&quot;\n&quot;)
    #####
    App.ActiveDocument.recompute()
else:
    App.Console.PrintMessage(&quot;Select an object !&quot;+&quot;\n&quot;)


&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Macro CartoucheFC</title>
    <ns>0</ns>
    <id>9581</id>
    <revision>
      <id>102492</id>
      <parentid>102429</parentid>
      <timestamp>2014-08-02T21:06:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rpzshyzz6cymtnm3ybyz36rerroec79</sha1>
      <text xml:space="preserve" bytes="44900">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro CartoucheFC|Description=This macro is a complete application, it allows to fill the cartridge of the drawing sheet delivered with FreeCAD.|Author=Mario52}}

&lt;!--T:2--&gt;
This macro is a complete application, it allows to fill simply all the fields of the cartridge of the drawing sheet delivered with FreeCAD.

&lt;!--T:9--&gt;
The date and time fields are separated by a &quot;space negative space&quot; &quot; - &quot; and constitute a single line textedit. 

&lt;!--T:3--&gt;
[[File:CartoucheFC.png|480px|CartoucheFC]]


&lt;!--T:10--&gt;
Fields in red are the '''&quot;freecad:editable&quot;''' fields, fields in green are annotations inserted in the template.&lt;br /&gt;
[[Macro_CartoucheFC_Full|Here]] the version for the new sheet with all the editable text fields.

===Use=== &lt;!--T:4--&gt;
'''Changing the map in Inkscape can at the moment cause operation problems in the program (where you remove the symbol on the worksheet, same problem with FreeCAD), work on a copy of A3_Landscape.svg.'''&lt;br /&gt;
'''PS: Some characters such as &amp; $ are not accepted (and possibly other special characters).'''

&lt;!--T:5--&gt;
If you have any questions or want to add a function, you can address you on the french forum [http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=2049 Remplir cartouche]&lt;br /&gt;
*The window remains above other Windows, thereby controlling the cartridge without leaving the program.
*Copy the code into a file named '''Macro_CartoucheFC.FCMacro''' and place it in your usual macros directory.
*After you have created your drawing sheet using the Drawing of FreeCAD module, run the macro '''Macro_CartoucheFC'''.
*At the opening, the program will register in memory all data already present in the cartridge of the sheet (if they are filled), all these data will be automatically returned to using the button {{KEY| Memo}} and kept in memory until the closure of the programme.
*Date button {{KEY| D.}} and time {{KEY| H.}} displayed the date and time of the system.
:*The date format depends on the selected symbol '''EU''' or '''US''' which determines the regional format. Change does not happen automatically (for the case or you have entered a date manually) you must again click buttons dates if you change the symbol (check before printing).
*The field '''A3''' is not functional (this program is based on the the A3 of FreeCAD sheet cartridge).
*Button {{KEY|Symbole EU}} or US change the meaning of the symbol of projection &quot;Select your Symbol&quot; is displayed by default, and then the active symbol appears. Click on the button and check the leaf symbol, click a second time to modify the symbol.
:*The choice of this symbol, affects the date format '''EU = dd/MM/yyyy''' and '''US = MM/dd/yyyy'''.
:*'''Attention''': this command does not pass through the button {{KEY|Apply}} and immediately changes the symbol to each presses on the key, always check if you have the appropriate symbol on your worksheet.
*Button {{KEY|Clean}} Clears all fields in the cartridge. You can revert to the original data using the button {{KEY|Memo}}.
*Button {{KEY|Apply}} saves all fields of the cartridge in the sheet. You can revert to the original data using the button {{KEY|Memo}} (except for the regional symbol that works in independent and is effective immediately).

===Code=== &lt;!--T:6--&gt;
Macro_CartoucheFC.FCMacro



&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# Macro_CartoucheFC.py
# Remplir les zones du cartouche de la feuille originale de FreeCAD
# http://www.freecadweb.org/wiki/index.php?title=Macro_CartoucheFC/fr
# il faut que la page (drawing viewer) s'appelle &quot; Page &quot; qui est le nom par défaut du module Drawing
# Fill the area of the cartridge
# http://www.freecadweb.org/wiki/index.php?title=Macro_CartoucheFC
# It is necessary that the page (drawing viewer) is called &quot;Page&quot;, which is the default name of the Drawing module
# ver 0.3
# Created: 02/07/2014
# Created:  by mario52
# PyQt and PySide 

#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1

try:
    import PyQt4
    from PyQt4 import QtCore, QtGui
except Exception:
    import PySide
    from PySide import QtCore, QtGui

import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base

global  path

path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)

def heure():
    return QtCore.QTime().currentTime().toString('hh:mm:ss')
def dateEu():
    return QtCore.QDate().currentDate().toString('dd/MM/yyyy') # forme euro
def dateUs():
    return QtCore.QDate().currentDate().toString('MM/dd/yyyy') # forme us
def dateComp():
    return QtCore.QDate().currentDate().toString('dddd d MMMM yyyy') # Retourne &quot;dimanche 20 Juillet 69&quot;

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
    try:
        diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)  #PyQt4 cette fonction met la fenêtre en avant
    except Exception:
        diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) #PySide cette fonction met la fenêtre en avant
    #diag.setWindowModality(QtCore.Qt.ApplicationModal) # la fonction a été désactivée pour favoriser &quot;WindowStaysOnTopHint&quot;
    diag.exec_()

def symbol_EU(depx,depy):    #symbol_EU
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
    except:
        None
    App.activeDocument().addObject('Sketcher::SketchObject','Symbol_EU')
    App.activeDocument().Symbol_EU.Placement = App.Placement(App.Vector(0.0,0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(-7.5,0.0,0.0),App.Vector(20.0,0.0,0.0)))

    App.ActiveDocument.Symbol_EU.Placement = App.Placement(App.Vector(0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(12.50,-7.5,0),App.Vector(12.50,7.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Circle(App.Vector(12.50,0.0,0),App.Vector(0,0,1),2.5))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Circle(App.Vector(12.50,0.0,0),App.Vector(0,0,1),5.0))

    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,5.0,0.0),App.Vector(-5.0,2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(-5.0,-2.5,0.0),App.Vector(-5.0,2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,-5.0,0.0),App.Vector(-5.0,-2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,-5.0,0.0),App.Vector(5.0,5.0,0.0)))
    Gui.getDocument(App.ActiveDocument.Name).resetEdit()
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).LineColor = (0.00,0.00,0.00)
    App.ActiveDocument.recompute()

    App.activeDocument().addObject('Drawing::FeatureViewPart','SymbolEU')
    App.activeDocument().SymbolEU.Source = App.activeDocument().Symbol_EU
    App.activeDocument().SymbolEU.Direction = (0.0,0.0,1.0)
    App.activeDocument().SymbolEU.X = depx
    App.activeDocument().SymbolEU.Y = depy
    App.activeDocument().SymbolEU.Scale = 0.8
    App.activeDocument().Page.addObject(App.activeDocument().SymbolEU)
    App.ActiveDocument.recompute()
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).Visibility = False

def symbol_US(depx,depy):    #symbol_US
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
    except:
        None
    App.activeDocument().addObject('Sketcher::SketchObject','Symbol_US')
    App.activeDocument().Symbol_US.Placement = App.Placement(App.Vector(0.0,0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(-7.5,0.0,0.0),App.Vector(20.0,0.0,0.0)))

    App.ActiveDocument.Symbol_US.Placement = App.Placement(App.Vector(0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(0.0,-7.5,0.0),App.Vector(0.0,7.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Circle(App.Vector(0.0,0.0,0.0),App.Vector(0,0,1),2.5))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Circle(App.Vector(0.0,0.0,0.0),App.Vector(0,0,1),5.0))

    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,5.0,0.0),App.Vector(7.5,2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(7.5,-2.5,0.0),App.Vector(7.5,2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,-5.0,0.0),App.Vector(7.5,-2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,-5.0,0.0),App.Vector(17.5,5.0,0.0)))
    Gui.getDocument(App.ActiveDocument.Name).resetEdit()
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).LineColor = (0.00,0.00,0.00)
    App.ActiveDocument.recompute()

    App.activeDocument().addObject('Drawing::FeatureViewPart','SymbolUS')
    App.activeDocument().SymbolUS.Source = App.activeDocument().Symbol_US
    App.activeDocument().SymbolUS.Direction = (0.0,0.0,1.0)
    App.activeDocument().SymbolUS.X = depx
    App.activeDocument().SymbolUS.Y = depy
    App.activeDocument().SymbolUS.Scale = 0.8
    App.activeDocument().Page.addObject(App.activeDocument().SymbolUS)
    App.ActiveDocument.recompute()
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).Visibility = False

try:
    DESIGNED_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[0] #lineEdit01 DESIGNED_BY
    CREATION_DATE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[1] #lineEdit02 CREATION_DATE date
    CREA_DATE = CREATION_DATE[0:10] # lineEdit02h date
    CREA_TIME = CREATION_DATE[13:21] # lineEdit02h heure
    CHECKED_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[2] # lineEdit03
    CHECK_DATE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[3] # lineEdit04 date
    CHEC_DATE = CHECK_DATE[0:10] # lineEdit04 date
    CHEC_TIME = CHECK_DATE[13:21] # lineEdit04h heure
    SIZE = &quot;A3&quot;  # lineEdit05
    SCALE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[4] # lineEdit06
    WEIGHT = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[5] # lineEdit07
    DRAWING_NUMBER = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[6] # lineEdit08
    SHEET = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[7] # lineEdit09
    TITLE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[8] # textEdit_01
    DESCRIPTION = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[9] # textEdit_02

except:
    errorDialog(&quot;erreur cartouche&quot;)
try:
    try:
        lineEdit18 = App.activeDocument().getObject(&quot;Note_I&quot;).Text[0] 
    except:
        lineEdit18 = &quot;&quot;
    try:
        lineEdit17 = App.activeDocument().getObject(&quot;Note_H&quot;).Text[0] 
    except:
        lineEdit17 = &quot;&quot;
    try:
        lineEdit16 = App.activeDocument().getObject(&quot;Note_G&quot;).Text[0] 
    except:
        lineEdit16 = &quot;&quot;
    try:
        lineEdit15 = App.activeDocument().getObject(&quot;Note_F&quot;).Text[0] 
    except:
        lineEdit15 = &quot;&quot;
    try:
        lineEdit14 = App.activeDocument().getObject(&quot;Note_E&quot;).Text[0] 
    except:
        lineEdit14 = &quot;&quot;
    try:
        lineEdit13 = App.activeDocument().getObject(&quot;Note_D&quot;).Text[0] 
    except:
        lineEdit13 = &quot;&quot;
    try:
        lineEdit12 = App.activeDocument().getObject(&quot;Note_C&quot;).Text[0] 
    except:
        lineEdit12 = &quot;&quot;
    try:
        lineEdit11 = App.activeDocument().getObject(&quot;Note_B&quot;).Text[0] 
    except:
        lineEdit11 = &quot;&quot;
    try:
        lineEdit10 = App.activeDocument().getObject(&quot;Note_A&quot;).Text[0] 
    except:
        lineEdit10 = &quot;&quot;
    try:
        lineEdit20 = App.activeDocument().getObject(&quot;CopyRight&quot;).Text[0] 
    except:
        lineEdit20 = &quot;&quot;
except:
    errorDialog(&quot;erreur note&quot;)

class Ui_MainWindow(object):

    def __init__(self, MainWindow):
        self.window = MainWindow
#___________________________________________________________________________________

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(810, 440)
        MainWindow.setMaximumSize(QtCore.QSize(810, 480))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

#        self.pushButton01 = QtGui.QPushButton(self.centralWidget)
#        self.pushButton01.setGeometry(QtCore.QRect(115, 360, 93, 28))
#        self.pushButton01.setObjectName(_fromUtf8(&quot;pushButton01&quot;))
#        self.pushButton01.clicked.connect(self.on_pushButton01_clicked) #connection pushButton01

        self.pushButton02 = QtGui.QPushButton(self.centralWidget)
        self.pushButton02.setGeometry(QtCore.QRect(225, 360, 93, 28))
        self.pushButton02.setObjectName(_fromUtf8(&quot;pushButton02&quot;))
        self.pushButton02.clicked.connect(self.on_pushButton02_clicked) #connection pushButton02

        self.pushButton03 = QtGui.QPushButton(self.centralWidget)
        self.pushButton03.setGeometry(QtCore.QRect(335, 360, 93, 28))
        self.pushButton03.setObjectName(_fromUtf8(&quot;pushButton03&quot;))
        self.pushButton03.clicked.connect(self.on_pushButton03_clicked) #connection pushButton03

        self.pushButton04 = QtGui.QPushButton(self.centralWidget)
        self.pushButton04.setGeometry(QtCore.QRect(445, 360, 93, 28))
        self.pushButton04.setObjectName(_fromUtf8(&quot;pushButton04&quot;))
        self.pushButton04.clicked.connect(self.on_pushButton04_clicked) #connection pushButton04

        self.pushButton05 = QtGui.QPushButton(self.centralWidget)
        self.pushButton05.setGeometry(QtCore.QRect(555, 360, 93, 28))
        self.pushButton05.setObjectName(_fromUtf8(&quot;pushButton05&quot;))
        self.pushButton05.clicked.connect(self.on_pushButton05_clicked) #connection pushButton05

        self.pushButton06 = QtGui.QPushButton(self.centralWidget)
        self.pushButton06.setGeometry(QtCore.QRect(170, 56, 20, 20))
        self.pushButton06.setObjectName(_fromUtf8(&quot;pushButton06&quot;))
        self.pushButton06.clicked.connect(self.on_pushButton06_clicked) #connection pushButton06

        self.pushButton07 = QtGui.QPushButton(self.centralWidget)
        self.pushButton07.setGeometry(QtCore.QRect(190, 56, 20, 20))
        self.pushButton07.setObjectName(_fromUtf8(&quot;pushButton07&quot;))
        self.pushButton07.clicked.connect(self.on_pushButton07_clicked) #connection pushButton07

        self.pushButton08 = QtGui.QPushButton(self.centralWidget)
        self.pushButton08.setGeometry(QtCore.QRect(170, 136, 20, 20))
        self.pushButton08.setObjectName(_fromUtf8(&quot;pushButton08&quot;))
        self.pushButton08.clicked.connect(self.on_pushButton08_clicked) #connection pushButton08

        self.pushButton09 = QtGui.QPushButton(self.centralWidget)
        self.pushButton09.setGeometry(QtCore.QRect(190, 136, 20, 20))
        self.pushButton09.setObjectName(_fromUtf8(&quot;pushButton09&quot;))
        self.pushButton09.clicked.connect(self.on_pushButton09_clicked) #connection pushButton09

        self.pushButton10 = QtGui.QPushButton(self.centralWidget)
        self.pushButton10.setGeometry(QtCore.QRect(100, 220, 101, 20))
        self.pushButton10.setObjectName(_fromUtf8(&quot;pushButton10&quot;))
        self.pushButton10.clicked.connect(self.on_pushButton10_clicked) #connection pushButton10

        self.lineEdit_01 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_01.setGeometry(QtCore.QRect(20, 20, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_01.setFont(font)
        self.lineEdit_01.setObjectName(_fromUtf8(&quot;lineEdit_01&quot;))
        self.lineEdit_01.setText(DESIGNED_BY)

        self.lineEdit_02 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_02.setGeometry(QtCore.QRect(20, 60, 82, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_02.setFont(font)
        self.lineEdit_02.setObjectName(_fromUtf8(&quot;lineEdit_02&quot;))
        self.lineEdit_02.setText(CREA_DATE)

        self.lineEdit_02h = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_02h.setGeometry(QtCore.QRect(98, 60, 72, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_02h.setFont(font)
        self.lineEdit_02h.setObjectName(_fromUtf8(&quot;lineEdit_02h&quot;))
        self.lineEdit_02h.setText(CREA_TIME)

        self.lineEdit_03 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_03.setGeometry(QtCore.QRect(20, 100, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_03.setFont(font)
        self.lineEdit_03.setObjectName(_fromUtf8(&quot;lineEdit_03&quot;))
        self.lineEdit_03.setText(CHECKED_BY)

        self.lineEdit_04 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_04.setGeometry(QtCore.QRect(20, 140, 82, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_04.setFont(font)
        self.lineEdit_04.setObjectName(_fromUtf8(&quot;lineEdit_04&quot;))
        self.lineEdit_04.setText(CHEC_DATE)

        self.lineEdit_04h = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_04h.setGeometry(QtCore.QRect(98, 140, 72, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_04h.setFont(font)
        self.lineEdit_04h.setObjectName(_fromUtf8(&quot;lineEdit_04h&quot;))
        self.lineEdit_04h.setText(CHEC_TIME)

        self.lineEdit_05 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_05.setGeometry(QtCore.QRect(20, 180, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_05.setFont(font)
        self.lineEdit_05.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_05.setObjectName(_fromUtf8(&quot;lineEdit_05&quot;))
        self.lineEdit_05.setText(SIZE)

        self.lineEdit_06 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_06.setGeometry(QtCore.QRect(20, 280, 61, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_06.setFont(font)
        self.lineEdit_06.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_06.setObjectName(_fromUtf8(&quot;lineEdit_06&quot;))
        self.lineEdit_06.setText(SCALE)

        self.lineEdit_07 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_07.setGeometry(QtCore.QRect(100, 280, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_07.setFont(font)
        self.lineEdit_07.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_07.setObjectName(_fromUtf8(&quot;lineEdit_07&quot;))
        self.lineEdit_07.setText(WEIGHT)

        self.lineEdit_08 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_08.setGeometry(QtCore.QRect(220, 280, 341, 41))
        self.lineEdit_08.setObjectName(_fromUtf8(&quot;lineEdit_08&quot;))
        self.lineEdit_08.setText(DRAWING_NUMBER)

        self.lineEdit_09 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_09.setGeometry(QtCore.QRect(570, 280, 81, 41))
        self.lineEdit_09.setObjectName(_fromUtf8(&quot;lineEdit_09&quot;))
        self.lineEdit_09.setText(SHEET)

        self.lineEdit_10 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_10.setGeometry(QtCore.QRect(690, 290, 101, 30))
        self.lineEdit_10.setObjectName(_fromUtf8(&quot;lineEdit_10&quot;))
        self.lineEdit_10.setText(lineEdit10)

        self.lineEdit_11 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_11.setGeometry(QtCore.QRect(690, 260, 101, 30))
        self.lineEdit_11.setObjectName(_fromUtf8(&quot;lineEdit_11&quot;))
        self.lineEdit_11.setText(lineEdit11)

        self.lineEdit_12 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_12.setGeometry(QtCore.QRect(690, 230, 101, 30))
        self.lineEdit_12.setObjectName(_fromUtf8(&quot;lineEdit_12&quot;))
        self.lineEdit_12.setText(lineEdit12)

        self.lineEdit_13 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_13.setGeometry(QtCore.QRect(690, 200, 101, 30))
        self.lineEdit_13.setObjectName(_fromUtf8(&quot;lineEdit_13&quot;))
        self.lineEdit_13.setText(lineEdit13)

        self.lineEdit_14 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_14.setGeometry(QtCore.QRect(690, 170, 101, 30))
        self.lineEdit_14.setObjectName(_fromUtf8(&quot;lineEdit_14&quot;))
        self.lineEdit_14.setText(lineEdit14)

        self.lineEdit_15 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_15.setGeometry(QtCore.QRect(690, 140, 101, 30))
        self.lineEdit_15.setObjectName(_fromUtf8(&quot;lineEdit_15&quot;))
        self.lineEdit_15.setText(lineEdit15)

        self.lineEdit_16 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_16.setGeometry(QtCore.QRect(690, 110, 101, 30))
        self.lineEdit_16.setObjectName(_fromUtf8(&quot;lineEdit_16&quot;))
        self.lineEdit_16.setText(lineEdit16)

        self.lineEdit_17 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_17.setGeometry(QtCore.QRect(690, 80, 101, 30))
        self.lineEdit_17.setObjectName(_fromUtf8(&quot;lineEdit_17&quot;))
        self.lineEdit_17.setText(lineEdit17)

        self.lineEdit_18 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_18.setGeometry(QtCore.QRect(690, 50, 101, 30))
        self.lineEdit_18.setObjectName(_fromUtf8(&quot;lineEdit_18&quot;))
        self.lineEdit_18.setText(lineEdit18)

        self.lineEdit_20 = QtGui.QLineEdit(self.centralWidget) # Copyright
        self.lineEdit_20.setGeometry(QtCore.QRect(20, 330, 771, 22))
        self.lineEdit_20.setObjectName(_fromUtf8(&quot;lineEdit_20&quot;))
        self.lineEdit_20.setText(lineEdit20)

        self.textEdit_01 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_01.setGeometry(QtCore.QRect(220, 20, 431,60 ))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.textEdit_01.setFont(font)
        self.textEdit_01.setObjectName(_fromUtf8(&quot;textEdit_01&quot;))
        self.textEdit_01.setText(TITLE)

        self.textEdit_02 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_02.setGeometry(QtCore.QRect(220, 90, 431, 60))
        self.textEdit_02.setObjectName(_fromUtf8(&quot;textEdit_02&quot;))
        self.textEdit_02.setText(DESCRIPTION)

#        self.graphicsView_01 = QtGui.QGraphicsView(self.centralWidget)
#        self.graphicsView_01.setGeometry(QtCore.QRect(100, 160, 101, 81))
#        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
#        brush.setStyle(QtCore.Qt.NoBrush)
#        self.graphicsView_01.setBackgroundBrush(brush)
#        self.graphicsView_01.setObjectName(_fromUtf8(&quot;graphicsView_01&quot;))

        self.textEdit_03 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_03.setGeometry(QtCore.QRect(100, 160, 101, 55))
        self.textEdit_03.setAlignment(QtCore.Qt.AlignCenter)
        self.textEdit_03.setObjectName(_fromUtf8(&quot;textEdit_03&quot;))
        self.textEdit_03.setText(&quot;Select your Symbol&quot;)

        self.graphicsView_02 = QtGui.QGraphicsView(self.centralWidget)
        self.graphicsView_02.setGeometry(QtCore.QRect(220, 160, 431, 81))#570, 160, 81, 81
        self.graphicsView_02.setObjectName(_fromUtf8(&quot;graphicsView_02&quot;))

        self.label_01 = QtGui.QLabel(self.centralWidget)
        self.label_01.setGeometry(QtCore.QRect(20, 0, 91, 16))
        self.label_01.setObjectName(_fromUtf8(&quot;label_01&quot;))

        self.label_02 = QtGui.QLabel(self.centralWidget)
        self.label_02.setGeometry(QtCore.QRect(20, 40, 53, 16))
        self.label_02.setObjectName(_fromUtf8(&quot;label_02&quot;))

        self.label_03 = QtGui.QLabel(self.centralWidget)
        self.label_03.setGeometry(QtCore.QRect(20, 80, 101, 16))
        self.label_03.setObjectName(_fromUtf8(&quot;label_03&quot;))

        self.label_04 = QtGui.QLabel(self.centralWidget)
        self.label_04.setGeometry(QtCore.QRect(20, 120, 91, 16))
        self.label_04.setObjectName(_fromUtf8(&quot;label_04&quot;))

        self.label_05 = QtGui.QLabel(self.centralWidget)
        self.label_05.setGeometry(QtCore.QRect(20, 160, 53, 16))
        self.label_05.setObjectName(_fromUtf8(&quot;label_05&quot;))

        self.label_06 = QtGui.QLabel(self.centralWidget)
        self.label_06.setGeometry(QtCore.QRect(20, 260, 53, 16))
        self.label_06.setObjectName(_fromUtf8(&quot;label_06&quot;))

        self.label_07 = QtGui.QLabel(self.centralWidget)
        self.label_07.setGeometry(QtCore.QRect(100, 260, 101, 16))
        self.label_07.setObjectName(_fromUtf8(&quot;label_07&quot;))

        self.label_08 = QtGui.QLabel(self.centralWidget)
        self.label_08.setGeometry(QtCore.QRect(220, 260, 121, 16))
        self.label_08.setObjectName(_fromUtf8(&quot;label_08&quot;))

        self.label_09 = QtGui.QLabel(self.centralWidget)
        self.label_09.setGeometry(QtCore.QRect(570, 260, 53, 16))
        self.label_09.setObjectName(_fromUtf8(&quot;label_09&quot;))

        self.label_10 = QtGui.QLabel(self.centralWidget)
        self.label_10.setGeometry(QtCore.QRect(670, 290, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName(_fromUtf8(&quot;label_10&quot;))

        self.label_11 = QtGui.QLabel(self.centralWidget)
        self.label_11.setGeometry(QtCore.QRect(670, 260, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName(_fromUtf8(&quot;label_11&quot;))

        self.label_12 = QtGui.QLabel(self.centralWidget)
        self.label_12.setGeometry(QtCore.QRect(670, 230, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName(_fromUtf8(&quot;label_12&quot;))

        self.label_13 = QtGui.QLabel(self.centralWidget)
        self.label_13.setGeometry(QtCore.QRect(670, 200, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName(_fromUtf8(&quot;label_13&quot;))

        self.label_14 = QtGui.QLabel(self.centralWidget)
        self.label_14.setGeometry(QtCore.QRect(670, 170, 15, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName(_fromUtf8(&quot;label_14&quot;))

        self.label_15 = QtGui.QLabel(self.centralWidget)
        self.label_15.setGeometry(QtCore.QRect(670, 140, 14, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName(_fromUtf8(&quot;label_15&quot;))

        self.label_16 = QtGui.QLabel(self.centralWidget)
        self.label_16.setGeometry(QtCore.QRect(670, 110, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName(_fromUtf8(&quot;label_16&quot;))

        self.label_17 = QtGui.QLabel(self.centralWidget)
        self.label_17.setGeometry(QtCore.QRect(670, 80, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName(_fromUtf8(&quot;label_17&quot;))

        self.label_18 = QtGui.QLabel(self.centralWidget)
        self.label_18.setGeometry(QtCore.QRect(670, 50, 10, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName(_fromUtf8(&quot;label_18&quot;))

        self.label_19 = QtGui.QLabel(self.centralWidget)
        self.label_19.setGeometry(QtCore.QRect(720, 15, 100, 33))
        self.label_19.setObjectName(_fromUtf8(&quot;label_19&quot;))

        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 810, 26))
        self.menuBar.setObjectName(_fromUtf8(&quot;menuBar&quot;))
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8(&quot;statusBar&quot;))
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)  # PyQt4 cette fonction met la fenêtre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide cette fonction met la fenêtre en avant

        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;Cartouche&quot;, None))
#        self.pushButton01.setText(_translate(&quot;MainWindow&quot;, &quot;Position&quot;, None))
        self.pushButton02.setText(_translate(&quot;MainWindow&quot;, &quot;Quitter&quot;, None))
        self.pushButton03.setText(_translate(&quot;MainWindow&quot;, &quot;Memo&quot;, None))
        self.pushButton04.setText(_translate(&quot;MainWindow&quot;, &quot;Nettoyer&quot;, None))
        self.pushButton05.setText(_translate(&quot;MainWindow&quot;, &quot;Appliquer&quot;, None))
        self.pushButton06.setText(_translate(&quot;MainWindow&quot;, &quot;D.&quot;, None))
        self.pushButton07.setText(_translate(&quot;MainWindow&quot;, &quot;H.&quot;, None))
        self.pushButton08.setText(_translate(&quot;MainWindow&quot;, &quot;D.&quot;, None))
        self.pushButton09.setText(_translate(&quot;MainWindow&quot;, &quot;H.&quot;, None))
        self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole EU&quot;, None))


        self.label_01.setText(_translate(&quot;MainWindow&quot;, &quot;Designed by :&quot;, None))
        self.label_02.setText(_translate(&quot;MainWindow&quot;, &quot;Date :&quot;, None))
        self.label_03.setText(_translate(&quot;MainWindow&quot;, &quot;Checked by :&quot;, None))
        self.label_04.setText(_translate(&quot;MainWindow&quot;, &quot;Date :&quot;, None))
        self.label_05.setText(_translate(&quot;MainWindow&quot;, &quot;Size :&quot;, None))
        self.label_06.setText(_translate(&quot;MainWindow&quot;, &quot;Scale :&quot;, None))
        self.label_07.setText(_translate(&quot;MainWindow&quot;, &quot;Weight (Kg) :&quot;, None))
        self.label_08.setText(_translate(&quot;MainWindow&quot;, &quot;Drawing number :&quot;, None))
        self.label_09.setText(_translate(&quot;MainWindow&quot;, &quot;Sheet :&quot;, None))
        self.label_10.setText(_translate(&quot;MainWindow&quot;, &quot;A&quot;, None))
        self.label_11.setText(_translate(&quot;MainWindow&quot;, &quot;B&quot;, None))
        self.label_12.setText(_translate(&quot;MainWindow&quot;, &quot;C&quot;, None))
        self.label_13.setText(_translate(&quot;MainWindow&quot;, &quot;D&quot;, None))
        self.label_14.setText(_translate(&quot;MainWindow&quot;, &quot;E&quot;, None))
        self.label_15.setText(_translate(&quot;MainWindow&quot;, &quot;F&quot;, None))
        self.label_16.setText(_translate(&quot;MainWindow&quot;, &quot;G&quot;, None))
        self.label_17.setText(_translate(&quot;MainWindow&quot;, &quot;H&quot;, None))
        self.label_18.setText(_translate(&quot;MainWindow&quot;, &quot;I&quot;, None))
        self.label_19.setText(_translate(&quot;MainWindow&quot;, &quot;Notes&quot;, None))
#______________________________________________________________________________________
    # Boutons
    def on_pushButton10_clicked(self):    # Bouton /Symbole
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole US&quot;, None))
            self.textEdit_03.setText(&quot;Symbole EU&quot;)
            symbol_EU(247.5,263.5) #(247.5,263.5)
        else:
            self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole EU&quot;, None))
            self.textEdit_03.setText(&quot;Symbole US&quot;)
            symbol_US(247.5,263.5) #(247.5,263.5)
    def on_pushButton09_clicked(self):    # Bouton /heure document
        self.lineEdit_04h.setText(str(heure()))
    def on_pushButton08_clicked(self):    # Bouton date/ document
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.lineEdit_04.setText(str(dateUs()))
        else:
            self.lineEdit_04.setText(str(dateEu()))
    def on_pushButton07_clicked(self):    # Bouton /heure checked
        self.lineEdit_02h.setText(str(heure()))
    def on_pushButton06_clicked(self):    # Bouton date/ checked
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.lineEdit_02.setText(str(dateUs()))
        else:
            self.lineEdit_02.setText(str(dateEu()))
    def on_pushButton05_clicked(self):    # Bouton Appliquer
        DESIGNED_BY = self.lineEdit_01.text()     
        CREATION_DATE = self.lineEdit_02.text()+&quot; - &quot;+self.lineEdit_02h.text()
        CHECKED_BY = self.lineEdit_03.text()
        CHECK_DATE = self.lineEdit_04.text()+&quot; - &quot;+self.lineEdit_04h.text()
        SIZE  = &quot;A3&quot; # self.lineEdit_05.text()
        SCALE = self.lineEdit_06.text()
        WEIGHT = self.lineEdit_07.text()
        DRAWING_NUMBER = self.lineEdit_08.text()
        SHEET = self.lineEdit_09.text()
        TITLE = self.textEdit_01.toPlainText()
        DESCRIPTION = self.textEdit_02.toPlainText()
        SYMBOL = self.textEdit_03.toPlainText()
        try:
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts = [unicode(DESIGNED_BY, 'utf-8'), unicode(CREATION_DATE, 'utf-8'), unicode(CHECKED_BY, 'utf-8'), unicode(CHECK_DATE, 'utf-8'), unicode(SCALE, 'utf-8'), unicode(WEIGHT, 'utf-8'), unicode(DRAWING_NUMBER, 'utf-8'), unicode(SHEET, 'utf-8'), unicode(TITLE, 'utf-8'), unicode(DESCRIPTION, 'utf-8'),]
        except Exception:
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts = [DESIGNED_BY.encode('utf-8'), CREATION_DATE.encode('utf-8'), CHECKED_BY.encode('utf-8'), CHECK_DATE.encode('utf-8'), SCALE.encode('utf-8'), WEIGHT.encode('utf-8'), DRAWING_NUMBER.encode('utf-8'), SHEET.encode('utf-8'), TITLE.encode('utf-8'), DESCRIPTION.encode('utf-8'),]

        #print App.ActiveDocument.Name
        try:
            App.activeDocument().removeObject('Note_I')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_H')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_G')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_F')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_E')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_D')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_C')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_B')
        except:
            None
        try:
            App.activeDocument().removeObject('Note_A')
        except:
            None
        try:
            App.activeDocument().removeObject('CopyRight')
        except:
            None
        if self.lineEdit_18.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_I')
            App.activeDocument().Note_I.X = 391.0
            App.activeDocument().Note_I.Y = 232
            App.activeDocument().Note_I.Scale = 3.0
            App.activeDocument().Note_I.Text = str(self.lineEdit_18.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_I)
        if self.lineEdit_17.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_H')
            App.activeDocument().Note_H.X = 391.0
            App.activeDocument().Note_H.Y = 238.8
            App.activeDocument().Note_H.Scale = 3.0
            App.activeDocument().Note_H.Text = str(self.lineEdit_17.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_H)
        if self.lineEdit_16.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_G')
            App.activeDocument().Note_G.X = 391.0
            App.activeDocument().Note_G.Y = 245.4
            App.activeDocument().Note_G.Scale = 3.0
            App.activeDocument().Note_G.Text = str(self.lineEdit_16.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_G)
        if self.lineEdit_15.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_F')
            App.activeDocument().Note_F.X = 391.0
            App.activeDocument().Note_F.Y = 252
            App.activeDocument().Note_F.Scale = 3.0
            App.activeDocument().Note_F.Text = str(self.lineEdit_15.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_F)
        if self.lineEdit_14.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_E')
            App.activeDocument().Note_E.X = 391.0
            App.activeDocument().Note_E.Y = 258.6
            App.activeDocument().Note_E.Scale = 3.0
            App.activeDocument().Note_E.Text = str(self.lineEdit_14.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_E)
        if self.lineEdit_13.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_D')
            App.activeDocument().Note_D.X = 391.0
            App.activeDocument().Note_D.Y = 265.2
            App.activeDocument().Note_D.Scale = 3.0
            App.activeDocument().Note_D.Text = str(self.lineEdit_13.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_D)
        if self.lineEdit_12.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_C')
            App.activeDocument().Note_C.X = 391.0
            App.activeDocument().Note_C.Y = 271.8
            App.activeDocument().Note_C.Scale = 3.0
            App.activeDocument().Note_C.Text =  str(self.lineEdit_12.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_C)
        if self.lineEdit_11.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_B')
            App.activeDocument().Note_B.X = 391.0
            App.activeDocument().Note_B.Y = 278.4
            App.activeDocument().Note_B.Scale = 3.0
            App.activeDocument().Note_B.Text = str(self.lineEdit_11.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_B)
        if self.lineEdit_10.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','Note_A')
            App.activeDocument().Note_A.X = 391.0
            App.activeDocument().Note_A.Y = 285.0
            App.activeDocument().Note_A.Scale = 3.0
            App.activeDocument().Note_A.Text = str(self.lineEdit_10.text())
            App.activeDocument().Page.addObject(App.activeDocument().Note_A)
        if self.lineEdit_20.text() != &quot;&quot;:
            App.activeDocument().addObject('Drawing::FeatureViewAnnotation','CopyRight')
            App.activeDocument().CopyRight.X = 221
            App.activeDocument().CopyRight.Y = 286
            App.activeDocument().CopyRight.Scale = 3.0
            App.activeDocument().CopyRight.Text = str(self.lineEdit_20.text())
            App.activeDocument().Page.addObject(App.activeDocument().CopyRight)

        App.ActiveDocument.recompute()

    def on_pushButton04_clicked(self):    # Bouton nettoyer
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
        except:
            None
        DESIGNED_BY = &quot;&quot;    ;self.lineEdit_01.setText(&quot;&quot;)
        CREATION_DATE = &quot;&quot;  ;self.lineEdit_02.setText(&quot;&quot;)
        self.lineEdit_02h.setText(&quot;&quot;)
        CHECKED_BY = &quot;&quot;     ;self.lineEdit_03.setText(&quot;&quot;)
        CHECK_DATE = &quot;&quot;     ;self.lineEdit_04.setText(&quot;&quot;)
        self.lineEdit_04h.setText(&quot;&quot;)
        SIZE  = &quot;A3&quot;        ;self.lineEdit_05.setText(&quot;A3&quot;)
        SCALE = &quot;&quot;          ;self.lineEdit_06.setText(&quot;&quot;)
        WEIGHT = &quot;&quot;         ;self.lineEdit_07.setText(&quot;&quot;)
        DRAWING_NUMBER = &quot;&quot; ;self.lineEdit_08.setText(&quot;&quot;)
        SHEET = &quot;&quot;          ;self.lineEdit_09.setText(&quot;&quot;)
        TITLE = &quot;&quot;          ;self.textEdit_01.setText(&quot;&quot;)
        DESCRIPTION = &quot;&quot;    ;self.textEdit_02.setText(&quot;&quot;)
        
        self.lineEdit_10.setText(&quot;&quot;)
        self.lineEdit_11.setText(&quot;&quot;)
        self.lineEdit_12.setText(&quot;&quot;)
        self.lineEdit_13.setText(&quot;&quot;)
        self.lineEdit_14.setText(&quot;&quot;)
        self.lineEdit_15.setText(&quot;&quot;)
        self.lineEdit_16.setText(&quot;&quot;)
        self.lineEdit_17.setText(&quot;&quot;)
        self.lineEdit_18.setText(&quot;&quot;)
        self.lineEdit_20.setText(&quot;&quot;)

    def on_pushButton03_clicked(self):    # Bouton Memo
        self.lineEdit_01.setText(DESIGNED_BY)
        self.lineEdit_02.setText(CREA_DATE)
        self.lineEdit_02h.setText(CREA_TIME)
        self.lineEdit_03.setText(CHECKED_BY)
        self.lineEdit_04.setText(CHEC_DATE)
        self.lineEdit_04h.setText(CHEC_TIME)
        self.lineEdit_05.setText(SIZE)
        self.lineEdit_06.setText(SCALE)
        self.lineEdit_07.setText(WEIGHT)
        self.lineEdit_08.setText(DRAWING_NUMBER)
        self.lineEdit_09.setText(SHEET)
        self.textEdit_01.setText(TITLE)
        self.textEdit_02.setText(DESCRIPTION)

        self.lineEdit_18.setText(lineEdit18)
        self.lineEdit_17.setText(lineEdit17)
        self.lineEdit_16.setText(lineEdit16)
        self.lineEdit_15.setText(lineEdit15)
        self.lineEdit_14.setText(lineEdit14)
        self.lineEdit_13.setText(lineEdit13)
        self.lineEdit_12.setText(lineEdit12)
        self.lineEdit_11.setText(lineEdit11)
        self.lineEdit_10.setText(lineEdit10)
        self.lineEdit_20.setText(lineEdit20)

    def on_pushButton02_clicked(self):    # Bouton Quitter
        App.Console.PrintMessage(&quot;Terminé\r\n&quot;)
        self.window.hide()
#    def on_pushButton01_clicked(self):    # Bouton appel de Position
#        MainWindow.resize(210, 480)
#        executer()
#        MainWindow.resize(810, 480)
#______________________________________________________________________________________

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()

&lt;/syntaxhighlight&gt;


===Other=== &lt;!--T:7--&gt;
The fields have no length limit, check your cartouche.&lt;br /&gt;
This program creates a drawing representing the regional projection symbol on your project, do not touch it is registered therefore hidden form invisible.&lt;br /&gt;
If you want it to be cleared uncomment the commented lines and vice versa


&lt;syntaxhighlight&gt;

#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).Visibility = False
et
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).Visibility = False
&lt;/syntaxhighlight&gt;



(I had some times an error in execution when the symbol was erased)&lt;br /&gt;
This module works with the drawing sheet included in FreeCAD this sheet is called '''Page''', do not change the name of this sheet!
===Revision=== &lt;!--T:8--&gt;
ver 0.3 02/07/2014 converted to PyQt4 and PySide


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro CartoucheFC 2</title>
    <ns>0</ns>
    <id>21062</id>
    <revision>
      <id>103561</id>
      <parentid>98268</parentid>
      <timestamp>2014-08-08T16:38:13Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>ver 5 08/08/2014 PyQt and PySide</comment>
      <sha1>5boi332n9dm2adzd3k2lqgw7usov7nf</sha1>
      <text xml:space="preserve" bytes="39442">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro CartoucheFC 2|Description=This macro is a complete application, it allows to fill the cartridge of the drawing sheet with full editabletext.|Author=Mario52}}

&lt;!--T:2--&gt;
This macro is a complete application, it allows to fill simply all the fields of the cartridge [[Drawing_templates|A3 Landscape english]]

&lt;!--T:3--&gt;
[[File:Macro_CartoucheFC_Modele_02.png|680px|Macro CartoucheFC Modele 2]]

&lt;!--T:4--&gt;
The picture represents the hierarchy of filling the fields occupied in the &quot;textEditable&quot; window in FreeCAD

===Utilisation=== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
Usage is very easy, run the macro and modify the fields.
* The {{KEY|Quit}} button to exit the application.
* The {{KEY|Memo}} button renders the contents of the cartridge at the opening of the macro.
* The {{KEY|Clear}} button clean all the fields in the macro (fields are rendered by pressing on the {{KEY|Memo}}).
* The {{KEY|Apply}} button applies the changes to the template.

&lt;!--T:7--&gt;
The window stays above all windows to visualize the changes (this function can be unpleasant if you decide to open a new window and remains unavailable)



&lt;!--T:8--&gt;
'''PS: Some characters such as &amp; $ are not accepted (and possibly other special characters).'''

&lt;!--T:9--&gt;
If you have any questions or want to add a function, you can address you on the french forum [http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=2049 Remplir cartouche]

===Code=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
Macro_CartoucheFC_2.FcMacro

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
&quot;&quot;&quot;
***************************************************************************
*   Copyright (c) 2014 &lt;mario52&gt;                                          *
*                                                                         *
*   This file is a supplement to the FreeCAD CAD development system.      *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU Lesser General Public License (LGPL)    *
*   as published by the Free Software Foundation; either version 2 of     *
*   the License, or (at your option) any later version.                   *
*   for detail see the LICENCE text file.                                 *
*                                                                         *
*   This software is distributed in the hope that it will be useful,      *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Library General Public License for more details.                  *
*                                                                         *
*   You should have received a copy of the GNU Library General Public     *
*   License along with this macro; if not, write to the Free Software     *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
*   USA                                                                   *
***************************************************************************
*           WARNING! All changes in this file will be lost and            *  
*                  may cause malfunction of the program                   *
***************************************************************************
&quot;&quot;&quot;
# Macro_CartoucheFC_2.FcMacro
# 
# il faut que la page (drawing viewer) s'appelle &quot; Page &quot; qui est le nom par défaut du module Drawing
# cette macro fonctionne avec la feuille A3_Landscape_ qui possede tous les champs EditableTexts
# 
# http://www.freecadweb.org/wiki/index.php?title=Drawing_templates
# Fill the area of the cartridge
# It is necessary that the page (drawing viewer) is called &quot;Page&quot;, which is the default name of the Drawing module
# Python 2.6
# 08/08/2014 ver 5.0 (pour cartouche modèle 2 (A3 Landscape english)) # PyQt and PySide 
# Created:  by mario52
# PyQt and PySide 

#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1

try:
    import PyQt4                        # PyQt4
    from PyQt4 import QtCore, QtGui     # PyQt4
except Exception:
    import PySide                       # PySide
    from PySide import QtCore, QtGui    # PySide

import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base

def utf8(unio):
    return unicode(unio).encode('UTF8')

global path
global Drawn_by               ; Drawn_by       = &quot;&quot;   # lineEdit_001
global DRAWN_BY               ; DRAWN_BY       = &quot;&quot;   # lineEdit_002
global Controlled_by          ; Controlled_by  = &quot;&quot;   # lineEdit_003
global CONTROLLED_BY          ; CONTROLLED_BY  = &quot;&quot;   # lineEdit_004
global Date                   ; Date           = &quot;&quot;   # lineEdit_005
global DATE                   ; DATE           = &quot;&quot;   # lineEdit_006
global Controlled_2           ; Controlled_2   = &quot;&quot;   # lineEdit_007
global CONTROLLED_2           ; CONTROLLED_2   = &quot;&quot;   # lineEdit_008
global Controlled_3           ; Controlled_3   = &quot;&quot;   # lineEdit_009
global CONTROLLED_3           ; CONTROLLED_3   = &quot;&quot;   # lineEdit_010
global SCALE                  ; SCALE          = &quot;&quot;   # lineEdit_011
global MOD                    ; MOD            = &quot;&quot;   # lineEdit_012
global COMPANY                ; COMPANY        = &quot;&quot;   # lineEdit_013
global ADRESS                 ; ADRESS         = &quot;&quot;   # lineEdit_014
global COUNTRY                ; COUNTRY        = &quot;&quot;   # lineEdit_015
global PART_NAME              ; PART_NAME      = &quot;&quot;   # lineEdit_016
global Project_number         ; Project_number = &quot;&quot;   # lineEdit_017
global A_                     ; A_             = &quot;&quot;   # lineEdit_018
global A__                    ; A__            = &quot;&quot;   # lineEdit_019
global B_                     ; B_             = &quot;&quot;   # lineEdit_020
global B__                    ; B__            = &quot;&quot;   # lineEdit_021
global C_                     ; C_             = &quot;&quot;   # lineEdit_022
global C__                    ; C__            = &quot;&quot;   # lineEdit_023
global D_                     ; D_             = &quot;&quot;   # lineEdit_024
global D__                    ; D__            = &quot;&quot;   # lineEdit_025
global E_                     ; E_             = &quot;&quot;   # lineEdit_026
global E__                    ; E__            = &quot;&quot;   # lineEdit_027
global Quantity               ; Quantity       = &quot;&quot;   # lineEdit_028
global Part_ID_number         ; Part_ID_number = &quot;&quot;   # lineEdit_029
global Fabrication_tolerances ; Fabrication_tolerance = &quot;&quot; #lineEdit_030
global Material               ; Material       = &quot;&quot;   # lineEdit_031
global _01                    ; _01            = &quot;&quot;   # lineEdit_032
global _001_001               ; _001_001       = &quot;&quot;   # lineEdit_033
global ISO2768_fh             ; ISO2768_fh     = &quot;&quot;   # lineEdit_034
global IRON                   ; IRON           = &quot;&quot;   # lineEdit_035

path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
    try:
        diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)  # PyQt4 cette fonction met la fenêtre en avant
    except Exception:
        diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide cette fonction met la fenêtre en avant
    #diag.setWindowModality(QtCore.Qt.ApplicationModal) # la fonction a été désactivée pour favoriser &quot;WindowStaysOnTopHint&quot;
    diag.exec_()

try:
    Drawn_by = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[0]          # lineEdit_001
    DRAWN_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[1]          # lineEdit_002
    Controlled_by = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[2]     # lineEdit_003
    CONTROLLED_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[3]     # lineEdit_004
    Date = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[4]              # lineEdit_005
    DATE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[5]              # lineEdit_006
    Controlled_2 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[6]      # lineEdit_007
    CONTROLLED_2 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[7]      # lineEdit_008
    Controlled_3 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[8]      # lineEdit_009
    CONTROLLED_3 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[9]      # lineEdit_010
    SCALE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[10]            # lineEdit_011
    MOD = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[11]              # lineEdit_012
    COMPANY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[12]          # lineEdit_013
    ADRESS = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[13]           # lineEdit_014
    COUNTRY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[14]          # lineEdit_015
    PART_NAME = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[15]        # lineEdit_016
    Project_number = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[16]   # lineEdit_017
    A_ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[17]               # lineEdit_018
    A__ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[18]              # lineEdit_019
    B_ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[19]               # lineEdit_020
    B__ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[20]              # lineEdit_021
    C_ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[21]               # lineEdit_022
    C__ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[22]              # lineEdit_023
    D_ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[23]               # lineEdit_024
    D__ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[24]              # lineEdit_025
    E_ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[25]               # lineEdit_026
    E__ = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[26]              # lineEdit_027
    Quantity= App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[27]          # lineEdit_028
    Part_ID_number = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[28]   # lineEdit_029
    Fabrication_tolerance = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[29] #lineEdit_030
    Material = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[30]         # lineEdit_031
    _01 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[31]              # lineEdit_032
    _001_001 = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[32]         # lineEdit_033
    ISO2768_fh = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[33]       # lineEdit_034
    IRON = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[34]             # lineEdit_035

except:
    errorDialog(&quot;Error read cartridge&quot;)

class Ui_MainWindow(object):

    def __init__(self, MainWindow):
        self.window = MainWindow

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(849, 462)
        MainWindow.setMaximumSize(QtCore.QSize(849, 462))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

        self.pushButton02 = QtGui.QPushButton(self.centralWidget)
        self.pushButton02.setGeometry(QtCore.QRect(210, 420, 93, 28))
        self.pushButton02.setObjectName(_fromUtf8(&quot;pushButton_2&quot;))
        self.pushButton02.clicked.connect(self.on_pushButton02_clicked) # Bouton Quitter # Quit

        self.pushButton03 = QtGui.QPushButton(self.centralWidget)
        self.pushButton03.setGeometry(QtCore.QRect(320, 420, 93, 28))
        self.pushButton03.setObjectName(_fromUtf8(&quot;pushButton_3&quot;))
        self.pushButton03.clicked.connect(self.on_pushButton03_clicked) # Bouton Memo # Memo

        self.pushButton04 = QtGui.QPushButton(self.centralWidget)
        self.pushButton04.setGeometry(QtCore.QRect(430, 420, 93, 28))
        self.pushButton04.setObjectName(_fromUtf8(&quot;pushButton_4&quot;))
        self.pushButton04.clicked.connect(self.on_pushButton04_clicked) # Bouton nettoyer # Clear

        self.pushButton01 = QtGui.QPushButton(self.centralWidget)
        self.pushButton01.setGeometry(QtCore.QRect(540, 420, 93, 28))
        self.pushButton01.setObjectName(_fromUtf8(&quot;pushButton&quot;))
        self.pushButton01.clicked.connect(self.on_pushButton01_clicked) # Bouton Appliquer # Apply

        self.lineEdit_001 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_001.setGeometry(QtCore.QRect(540, 100, 101, 22))
        self.lineEdit_001.setObjectName(_fromUtf8(&quot;lineEdit_001&quot;))
        self.lineEdit_001.setText(Drawn_by)

        self.lineEdit_002 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_002.setGeometry(QtCore.QRect(650, 100, 121, 22))
        self.lineEdit_002.setObjectName(_fromUtf8(&quot;lineEdit_002&quot;))
        self.lineEdit_002.setText(DRAWN_BY)

        self.lineEdit_003 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_003.setGeometry(QtCore.QRect(540, 140, 101, 22))
        self.lineEdit_003.setObjectName(_fromUtf8(&quot;lineEdit_003&quot;))
        self.lineEdit_003.setText(Controlled_by)

        self.lineEdit_004 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_004.setGeometry(QtCore.QRect(650, 140, 121, 22))
        self.lineEdit_004.setObjectName(_fromUtf8(&quot;lineEdit_004&quot;))
        self.lineEdit_004.setText(CONTROLLED_BY)

        self.lineEdit_005 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_005.setGeometry(QtCore.QRect(540, 180, 101, 22))
        self.lineEdit_005.setObjectName(_fromUtf8(&quot;lineEdit_005&quot;))
        self.lineEdit_005.setText(Date)

        self.lineEdit_006 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_006.setGeometry(QtCore.QRect(650, 180, 121, 22))
        self.lineEdit_006.setObjectName(_fromUtf8(&quot;lineEdit_006&quot;))
        self.lineEdit_006.setText(DATE)

        self.lineEdit_007 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_007.setGeometry(QtCore.QRect(540, 220, 101, 22))
        self.lineEdit_007.setObjectName(_fromUtf8(&quot;lineEdit_007&quot;))
        self.lineEdit_007.setText(Controlled_2)

        self.lineEdit_008 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_008.setGeometry(QtCore.QRect(650, 220, 121, 22))
        self.lineEdit_008.setObjectName(_fromUtf8(&quot;lineEdit_008&quot;))
        self.lineEdit_008.setText(CONTROLLED_2)

        self.lineEdit_009 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_009.setGeometry(QtCore.QRect(540, 260, 101, 22))
        self.lineEdit_009.setObjectName(_fromUtf8(&quot;lineEdit_009&quot;))
        self.lineEdit_009.setText(Controlled_3)

        self.lineEdit_010 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_010.setGeometry(QtCore.QRect(650, 260, 121, 22))
        self.lineEdit_010.setObjectName(_fromUtf8(&quot;lineEdit_010&quot;))
        self.lineEdit_010.setText(CONTROLLED_3)

        self.lineEdit_011 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_011.setGeometry(QtCore.QRect(780, 100, 61, 61))
        self.lineEdit_011.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_011.setObjectName(_fromUtf8(&quot;lineEdit_011&quot;))
        self.lineEdit_011.setText(SCALE)

        self.lineEdit_012 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_012.setGeometry(QtCore.QRect(10, 100, 131, 181))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lineEdit_012.setFont(font)
        self.lineEdit_012.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_012.setObjectName(_fromUtf8(&quot;lineEdit_012&quot;))
        self.lineEdit_012.setText(MOD)

        self.lineEdit_013 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_013.setGeometry(QtCore.QRect(10, 300, 261, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_013.setFont(font)
        self.lineEdit_013.setObjectName(_fromUtf8(&quot;lineEdit_013&quot;))
        self.lineEdit_013.setText(COMPANY)

        self.lineEdit_014 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_014.setGeometry(QtCore.QRect(10, 340, 261, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_014.setFont(font)
        self.lineEdit_014.setObjectName(_fromUtf8(&quot;lineEdit_014&quot;))
        self.lineEdit_014.setText(ADRESS)

        self.lineEdit_015 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_015.setGeometry(QtCore.QRect(10, 380, 261, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_015.setFont(font)
        self.lineEdit_015.setObjectName(_fromUtf8(&quot;lineEdit_015&quot;))
        self.lineEdit_015.setText(COUNTRY)

        self.lineEdit_016 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_016.setGeometry(QtCore.QRect(280, 300, 301, 101))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lineEdit_016.setFont(font)
        self.lineEdit_016.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_016.setObjectName(_fromUtf8(&quot;lineEdit_016&quot;))
        self.lineEdit_016.setText(PART_NAME)

        self.lineEdit_017 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_017.setGeometry(QtCore.QRect(590, 300, 251, 101))
        self.lineEdit_017.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.lineEdit_017.setFont(font)
        self.lineEdit_017.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_017.setObjectName(_fromUtf8(&quot;lineEdit_017&quot;))
        self.lineEdit_017.setText(Project_number)

        self.lineEdit_018 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_018.setGeometry(QtCore.QRect(150, 260, 71, 22))
        self.lineEdit_018.setObjectName(_fromUtf8(&quot;lineEdit_018&quot;))
        self.lineEdit_018.setText(A_)

        self.lineEdit_019 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_019.setGeometry(QtCore.QRect(230, 260, 301, 22))
        self.lineEdit_019.setObjectName(_fromUtf8(&quot;lineEdit_019&quot;))
        self.lineEdit_019.setText(A__)

        self.lineEdit_020 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_020.setGeometry(QtCore.QRect(150, 220, 71, 22))
        self.lineEdit_020.setObjectName(_fromUtf8(&quot;lineEdit_020&quot;))
        self.lineEdit_020.setText(B_)

        self.lineEdit_021 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_021.setGeometry(QtCore.QRect(230, 220, 301, 22))
        self.lineEdit_021.setObjectName(_fromUtf8(&quot;lineEdit_021&quot;))
        self.lineEdit_021.setText(B__)

        self.lineEdit_022 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_022.setGeometry(QtCore.QRect(150, 180, 71, 22))
        self.lineEdit_022.setObjectName(_fromUtf8(&quot;lineEdit_022&quot;))
        self.lineEdit_022.setText(C_)

        self.lineEdit_023 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_023.setGeometry(QtCore.QRect(230, 180, 301, 22))
        self.lineEdit_023.setObjectName(_fromUtf8(&quot;lineEdit_023&quot;))
        self.lineEdit_023.setText(C__)

        self.lineEdit_024 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_024.setGeometry(QtCore.QRect(150, 140, 71, 22))
        self.lineEdit_024.setObjectName(_fromUtf8(&quot;lineEdit_024&quot;))
        self.lineEdit_024.setText(D_)

        self.lineEdit_025 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_025.setGeometry(QtCore.QRect(230, 140, 301, 22))
        self.lineEdit_025.setObjectName(_fromUtf8(&quot;lineEdit_025&quot;))
        self.lineEdit_025.setText(D__)

        self.lineEdit_026 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_026.setGeometry(QtCore.QRect(150, 100, 71, 22))
        self.lineEdit_026.setObjectName(_fromUtf8(&quot;lineEdit_026&quot;))
        self.lineEdit_026.setText(E_)

        self.lineEdit_027 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_027.setGeometry(QtCore.QRect(230, 100, 301, 22))
        self.lineEdit_027.setObjectName(_fromUtf8(&quot;lineEdit_027&quot;))
        self.lineEdit_027.setText(E__)

        self.lineEdit_028 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_028.setGeometry(QtCore.QRect(10, 60, 101, 22))
        self.lineEdit_028.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_028.setObjectName(_fromUtf8(&quot;lineEdit_028&quot;))
        self.lineEdit_028.setText(Quantity)

        self.lineEdit_029 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_029.setGeometry(QtCore.QRect(120, 60, 131, 22))
        self.lineEdit_029.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_029.setObjectName(_fromUtf8(&quot;lineEdit_029&quot;))
        self.lineEdit_029.setText(Part_ID_number)

        self.lineEdit_030 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_030.setGeometry(QtCore.QRect(260, 60, 381, 22))
        self.lineEdit_030.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_030.setObjectName(_fromUtf8(&quot;lineEdit_030&quot;))
        self.lineEdit_030.setText(Fabrication_tolerance)

        self.lineEdit_031 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_031.setGeometry(QtCore.QRect(650, 60, 191, 22))
        self.lineEdit_031.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_031.setObjectName(_fromUtf8(&quot;lineEdit_031&quot;))
        self.lineEdit_031.setText(Material)

        self.lineEdit_032 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_032.setGeometry(QtCore.QRect(10, 20, 101, 22))
        self.lineEdit_032.setObjectName(_fromUtf8(&quot;lineEdit_032&quot;))
        self.lineEdit_032.setText(_01)

        self.lineEdit_033 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_033.setGeometry(QtCore.QRect(120, 20, 131, 22))
        self.lineEdit_033.setObjectName(_fromUtf8(&quot;lineEdit_033&quot;))
        self.lineEdit_033.setText(_001_001)

        self.lineEdit_034 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_034.setGeometry(QtCore.QRect(260, 20, 381, 22))
        self.lineEdit_034.setObjectName(_fromUtf8(&quot;lineEdit_034&quot;))
        self.lineEdit_034.setText(ISO2768_fh)

        self.lineEdit_035 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_035.setGeometry(QtCore.QRect(650, 20, 191, 22))
        self.lineEdit_035.setObjectName(_fromUtf8(&quot;lineEdit_035&quot;))
        self.lineEdit_035.setText(IRON)

        self.label_1 = QtGui.QLabel(self.centralWidget)
        self.label_1.setGeometry(QtCore.QRect(790, 85, 41, 16))
        self.label_1.setObjectName(_fromUtf8(&quot;label&quot;))
        self.label_2 = QtGui.QLabel(self.centralWidget)
        self.label_2.setGeometry(QtCore.QRect(10, 325, 53, 16))
        self.label_2.setObjectName(_fromUtf8(&quot;label_2&quot;))
        self.label_3 = QtGui.QLabel(self.centralWidget)
        self.label_3.setGeometry(QtCore.QRect(10, 365, 53, 16))
        self.label_3.setObjectName(_fromUtf8(&quot;label_3&quot;))
        self.label_4 = QtGui.QLabel(self.centralWidget)
        self.label_4.setGeometry(QtCore.QRect(10, 285, 161, 16))
        self.label_4.setObjectName(_fromUtf8(&quot;label_4&quot;))
        self.label_5 = QtGui.QLabel(self.centralWidget)
        self.label_5.setGeometry(QtCore.QRect(280, 285, 151, 16))
        self.label_5.setObjectName(_fromUtf8(&quot;label_5&quot;))
        self.label_6 = QtGui.QLabel(self.centralWidget)
        self.label_6.setGeometry(QtCore.QRect(590, 285, 191, 16))
        self.label_6.setObjectName(_fromUtf8(&quot;label_6&quot;))
        self.label_7 = QtGui.QLabel(self.centralWidget)
        self.label_7.setGeometry(QtCore.QRect(10, 85, 53, 16))
        self.label_7.setObjectName(_fromUtf8(&quot;label_7&quot;))
        self.label_8 = QtGui.QLabel(self.centralWidget)
        self.label_8.setGeometry(QtCore.QRect(150, 85, 53, 16))
        self.label_8.setObjectName(_fromUtf8(&quot;label_8&quot;))
        self.label_9 = QtGui.QLabel(self.centralWidget)
        self.label_9.setGeometry(QtCore.QRect(540, 85, 61, 16))
        self.label_9.setObjectName(_fromUtf8(&quot;label_9&quot;))
        self.label_10 = QtGui.QLabel(self.centralWidget)
        self.label_10.setGeometry(QtCore.QRect(540, 125, 101, 16))
        self.label_10.setObjectName(_fromUtf8(&quot;label_10&quot;))
        self.label_11 = QtGui.QLabel(self.centralWidget)
        self.label_11.setGeometry(QtCore.QRect(540, 165, 53, 16))
        self.label_11.setObjectName(_fromUtf8(&quot;label_11&quot;))
        self.label_12 = QtGui.QLabel(self.centralWidget)
        self.label_12.setGeometry(QtCore.QRect(540, 205, 81, 16))
        self.label_12.setObjectName(_fromUtf8(&quot;label_12&quot;))
        self.label_13 = QtGui.QLabel(self.centralWidget)
        self.label_13.setGeometry(QtCore.QRect(540, 245, 81, 16))
        self.label_13.setObjectName(_fromUtf8(&quot;label_13&quot;))
        self.label_14 = QtGui.QLabel(self.centralWidget)
        self.label_14.setGeometry(QtCore.QRect(10, 45, 71, 16))
        self.label_14.setObjectName(_fromUtf8(&quot;label_14&quot;))
        self.label_15 = QtGui.QLabel(self.centralWidget)
        self.label_15.setGeometry(QtCore.QRect(120, 45, 121, 16))
        self.label_15.setObjectName(_fromUtf8(&quot;label_15&quot;))
        self.label_16 = QtGui.QLabel(self.centralWidget)
        self.label_16.setGeometry(QtCore.QRect(260, 45, 141, 16))
        self.label_16.setObjectName(_fromUtf8(&quot;label_16&quot;))
        self.label_17 = QtGui.QLabel(self.centralWidget)
        self.label_17.setGeometry(QtCore.QRect(650, 45, 71, 16))
        self.label_17.setObjectName(_fromUtf8(&quot;label_17&quot;))

        self.graphicsView = QtGui.QGraphicsView(self.centralWidget)     # Fenêtre pour logo # Logo windows
        self.graphicsView.setGeometry(QtCore.QRect(780, 220, 61, 61))
        self.graphicsView.setObjectName(_fromUtf8(&quot;graphicsView&quot;))
        self.label_18 = QtGui.QLabel(self.centralWidget)
        self.label_18.setGeometry(QtCore.QRect(790, 205, 41, 16))
        self.label_18.setObjectName(_fromUtf8(&quot;label_18&quot;))
        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)  # PyQt4
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide

        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;Cartouche mod 2&quot;, None))

        self.pushButton01.setText(_translate(&quot;MainWindow&quot;, &quot;Apply&quot;, None))
        self.pushButton02.setText(_translate(&quot;MainWindow&quot;, &quot;Quit&quot;, None))
        self.pushButton03.setText(_translate(&quot;MainWindow&quot;, &quot;Memo&quot;, None))
        self.pushButton04.setText(_translate(&quot;MainWindow&quot;, &quot;Clear&quot;, None))

        self.lineEdit_001.setText(_translate(&quot;MainWindow&quot;, &quot;Drawn_by&quot;, None))
        self.lineEdit_002.setText(_translate(&quot;MainWindow&quot;, &quot;DRAWN_BY&quot;, None))
        self.lineEdit_003.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled_by&quot;, None))
        self.lineEdit_004.setText(_translate(&quot;MainWindow&quot;, &quot;CONTROLLED_BY&quot;, None))
        self.lineEdit_005.setText(_translate(&quot;MainWindow&quot;, &quot;Date&quot;, None))
        self.lineEdit_006.setText(_translate(&quot;MainWindow&quot;, &quot;DATE&quot;, None))
        self.lineEdit_007.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled_2&quot;, None))
        self.lineEdit_008.setText(_translate(&quot;MainWindow&quot;, &quot;CONTROLLED_2&quot;, None))
        self.lineEdit_009.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled_3&quot;, None))
        self.lineEdit_010.setText(_translate(&quot;MainWindow&quot;, &quot;CONTROLLED_3&quot;, None))
        self.lineEdit_011.setText(_translate(&quot;MainWindow&quot;, &quot;SCALE&quot;, None))
        self.lineEdit_012.setText(_translate(&quot;MainWindow&quot;, &quot;MOD&quot;, None))
        self.lineEdit_013.setText(_translate(&quot;MainWindow&quot;, &quot;COMPANY&quot;, None))
        self.lineEdit_014.setText(_translate(&quot;MainWindow&quot;, &quot;ADRESS&quot;, None))
        self.lineEdit_015.setText(_translate(&quot;MainWindow&quot;, &quot;COUNTRY&quot;, None))
        self.lineEdit_016.setText(_translate(&quot;MainWindow&quot;, &quot;PART_NAME&quot;, None))
        self.lineEdit_017.setText(_translate(&quot;MainWindow&quot;, &quot;Project_number&quot;, None))
        self.lineEdit_018.setText(_translate(&quot;MainWindow&quot;, &quot;A_&quot;, None))
        self.lineEdit_019.setText(_translate(&quot;MainWindow&quot;, &quot;A__&quot;, None))
        self.lineEdit_020.setText(_translate(&quot;MainWindow&quot;, &quot;B_&quot;, None))
        self.lineEdit_021.setText(_translate(&quot;MainWindow&quot;, &quot;B__&quot;, None))
        self.lineEdit_022.setText(_translate(&quot;MainWindow&quot;, &quot;C_&quot;, None))
        self.lineEdit_023.setText(_translate(&quot;MainWindow&quot;, &quot;C__&quot;, None))
        self.lineEdit_024.setText(_translate(&quot;MainWindow&quot;, &quot;D_&quot;, None))
        self.lineEdit_025.setText(_translate(&quot;MainWindow&quot;, &quot;D__&quot;, None))
        self.lineEdit_026.setText(_translate(&quot;MainWindow&quot;, &quot;E_&quot;, None))
        self.lineEdit_027.setText(_translate(&quot;MainWindow&quot;, &quot;E__&quot;, None))
        self.lineEdit_028.setText(_translate(&quot;MainWindow&quot;, &quot;Quantity&quot;, None))
        self.lineEdit_029.setText(_translate(&quot;MainWindow&quot;, &quot;Part_ID_number&quot;, None))
        self.lineEdit_030.setText(_translate(&quot;MainWindow&quot;, &quot;Fabrication_tolerance&quot;, None))
        self.lineEdit_031.setText(_translate(&quot;MainWindow&quot;, &quot;Material&quot;, None))
        self.lineEdit_032.setText(_translate(&quot;MainWindow&quot;, &quot;_01&quot;, None))
        self.lineEdit_033.setText(_translate(&quot;MainWindow&quot;, &quot;_001_001&quot;, None))
        self.lineEdit_034.setText(_translate(&quot;MainWindow&quot;, &quot;ISO2768_fh&quot;, None))
        self.lineEdit_035.setText(_translate(&quot;MainWindow&quot;, &quot;IRON&quot;, None))

        self.label_1.setText(_translate(&quot;MainWindow&quot;, &quot;Scale :&quot;, None))
        self.label_2.setText(_translate(&quot;MainWindow&quot;, &quot;Address :&quot;, None))
        self.label_3.setText(_translate(&quot;MainWindow&quot;, &quot;Country :&quot;, None))
        self.label_4.setText(_translate(&quot;MainWindow&quot;, &quot;Company name :&quot;, None))
        self.label_5.setText(_translate(&quot;MainWindow&quot;, &quot;Part name :&quot;, None))
        self.label_6.setText(_translate(&quot;MainWindow&quot;, &quot;Project number / id :&quot;, None))
        self.label_7.setText(_translate(&quot;MainWindow&quot;, &quot;Size :&quot;, None))
        self.label_8.setText(_translate(&quot;MainWindow&quot;, &quot;Notes :&quot;, None))
        self.label_9.setText(_translate(&quot;MainWindow&quot;, &quot;Draw by :&quot;, None))
        self.label_10.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled by :&quot;, None))
        self.label_11.setText(_translate(&quot;MainWindow&quot;, &quot;Date :&quot;, None))
        self.label_12.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled 2 :&quot;, None))
        self.label_13.setText(_translate(&quot;MainWindow&quot;, &quot;Controlled 3 :&quot;, None))
        self.label_14.setText(_translate(&quot;MainWindow&quot;, &quot;Quantity :&quot;, None))
        self.label_15.setText(_translate(&quot;MainWindow&quot;, &quot;Part ID / Number :&quot;, None))
        self.label_16.setText(_translate(&quot;MainWindow&quot;, &quot;Fabrication tolerance :&quot;, None))
        self.label_17.setText(_translate(&quot;MainWindow&quot;, &quot;Material :&quot;, None))
        self.label_18.setText(_translate(&quot;MainWindow&quot;, &quot;Logo :&quot;, None))

    def on_pushButton01_clicked(self):    # Bouton Appliquer # Appli buttom
        Drawn_by = utf8(self.lineEdit_001.text())
        DRAWN_BY = utf8(self.lineEdit_002.text())
        Controlled_by = utf8(self.lineEdit_003.text())
        CONTROLLED_BY = utf8(self.lineEdit_004.text())
        Date = utf8(self.lineEdit_005.text())
        DATE = utf8(self.lineEdit_006.text())
        Controlled_2 = utf8(self.lineEdit_007.text())
        CONTROLLED_2 = utf8(self.lineEdit_008.text())
        Controlled_3 = utf8(self.lineEdit_009.text())
        CONTROLLED_3 = utf8(self.lineEdit_010.text())
        SCALE = utf8(self.lineEdit_011.text())
        MOD = utf8(self.lineEdit_012.text())
        COMPANY = utf8(self.lineEdit_013.text())
        ADRESS = utf8(self.lineEdit_014.text())
        COUNTRY = utf8(self.lineEdit_015.text())
        PART_NAME = utf8(self.lineEdit_016.text())
        Project_number = utf8(self.lineEdit_017.text())
        A_ = utf8(self.lineEdit_018.text())
        A__ = utf8(self.lineEdit_019.text())
        B_ = utf8(self.lineEdit_020.text())
        B__ = utf8(self.lineEdit_021.text())
        C_ = utf8(self.lineEdit_022.text())
        C__ = utf8(self.lineEdit_023.text())
        D_ = utf8(self.lineEdit_024.text())
        D__ = utf8(self.lineEdit_025.text())
        E_ = utf8(self.lineEdit_026.text())
        E__ = utf8(self.lineEdit_027.text())
        Quantity = utf8(self.lineEdit_028.text())
        Part_ID_number = utf8(self.lineEdit_029.text())
        Fabrication_tolerance = utf8(self.lineEdit_030.text())
        Material = utf8(self.lineEdit_031.text())
        _01 = utf8(self.lineEdit_032.text())
        _001_001 = utf8(self.lineEdit_033.text())
        ISO2768_fh = utf8(self.lineEdit_034.text())
        IRON = utf8(self.lineEdit_035.text())

        try:
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts =[unicode(Drawn_by,'utf-8'), unicode(DRAWN_BY,'utf-8'), unicode(Controlled_by,'utf-8'), unicode(CONTROLLED_BY,'utf-8'), unicode(Date,'utf-8'), unicode(DATE,'utf-8'), unicode(Controlled_2, 'utf-8'), unicode(CONTROLLED_2,'utf-8'), unicode(Controlled_3,'utf-8'), unicode(CONTROLLED_3,'utf-8'), unicode(SCALE,'utf-8'), unicode(MOD,'utf-8'), unicode(COMPANY,'utf-8'), unicode(ADRESS,'utf-8'), unicode(COUNTRY, 'utf-8'), unicode(PART_NAME,'utf-8'), unicode(Project_number,'utf-8'), unicode(A_,'utf-8'), unicode(A__,'utf-8'), unicode(B_,'utf-8'), unicode(B__,'utf-8'), unicode(C_,'utf-8'), unicode(C__,'utf-8'), unicode(D_,'utf-8'), unicode(D__,'utf-8'), unicode(E_,'utf-8'), unicode(E__,'utf-8'), unicode(Quantity,'utf-8'), unicode(Part_ID_number,'utf-8'), unicode(Fabrication_tolerance,'utf-8'), unicode(Material,'utf-8'), unicode(_01,'utf-8'), unicode(_001_001,'utf-8'), unicode(ISO2768_fh,'utf-8'), unicode(IRON,'utf-8'),]  # PyQt4
            App.ActiveDocument.recompute()
        except Exception:#
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts =[Drawn_by.encode('utf-8'), DRAWN_BY.encode('utf-8'), Controlled_by.encode('utf-8'), CONTROLLED_BY.encode('utf-8'), Date.encode('utf-8'), DATE.encode('utf-8'), Controlled_2.encode('utf-8'), CONTROLLED_2.encode('utf-8'), Controlled_3.encode('utf-8'), CONTROLLED_3.encode('utf-8'), SCALE.encode('utf-8'), MOD.encode('utf-8'), COMPANY.encode('utf-8'), ADRESS.encode('utf-8'), COUNTRY.encode('utf-8'), PART_NAME.encode('utf-8'), Project_number.encode('utf-8'), A_.encode('utf-8'), A__.encode('utf-8'), B_.encode('utf-8'), B__.encode('utf-8'), C_.encode('utf-8'), C__.encode('utf-8'), D_.encode('utf-8'), D__.encode('utf-8'), E_.encode('utf-8'), E__.encode('utf-8'), Quantity.encode('utf-8'), Part_ID_number.encode('utf-8'), Fabrication_tolerance.encode('utf-8'), Material.encode('utf-8'), _01.encode('utf-8'), _001_001.encode('utf-8'), ISO2768_fh.encode('utf-8'), IRON.encode('utf-8'),]                                       # PySide
            App.ActiveDocument.recompute()

    def on_pushButton04_clicked(self):    # Bouton nettoyer # Clear buttom

        Drawn_by = &quot;&quot;             ;self.lineEdit_001.setText(&quot;&quot;)
        DRAWN_BY = &quot;&quot;             ;self.lineEdit_002.setText(&quot;&quot;)
        Controlled_by = &quot;&quot;        ;self.lineEdit_003.setText(&quot;&quot;)
        CONTROLLED_BY = &quot;&quot;        ;self.lineEdit_004.setText(&quot;&quot;)
        Date  = &quot;&quot;                ;self.lineEdit_005.setText(&quot;&quot;)
        DATE = &quot;&quot;                 ;self.lineEdit_006.setText(&quot;&quot;)
        Controlled_2 = &quot;&quot;         ;self.lineEdit_007.setText(&quot;&quot;)
        CONTROLLED_2 = &quot;&quot;         ;self.lineEdit_008.setText(&quot;&quot;)
        Controlled_3 = &quot;&quot;         ;self.lineEdit_009.setText(&quot;&quot;)
        CONTROLLED_3 = &quot;&quot;         ;self.lineEdit_010.setText(&quot;&quot;)
        SCALE = &quot;&quot;                ;self.lineEdit_011.setText(&quot;&quot;)
        MOD = &quot;&quot;                  ;self.lineEdit_012.setText(&quot;&quot;)
        COMPANY = &quot;&quot;              ;self.lineEdit_013.setText(&quot;&quot;)
        ADRESS = &quot;&quot;               ;self.lineEdit_014.setText(&quot;&quot;)
        COUNTRY = &quot;&quot;              ;self.lineEdit_015.setText(&quot;&quot;)
        PART_NAME = &quot;&quot;            ;self.lineEdit_016.setText(&quot;&quot;)
        Project_number = &quot;&quot;       ;self.lineEdit_017.setText(&quot;&quot;)
        A_ = &quot;&quot;                   ;self.lineEdit_018.setText(&quot;&quot;)
        A__ = &quot;&quot;                  ;self.lineEdit_019.setText(&quot;&quot;)
        B_ = &quot;&quot;                   ;self.lineEdit_020.setText(&quot;&quot;)
        B__ = &quot;&quot;                  ;self.lineEdit_021.setText(&quot;&quot;)
        C_ = &quot;&quot;                   ;self.lineEdit_022.setText(&quot;&quot;)
        C__ = &quot;&quot;                  ;self.lineEdit_023.setText(&quot;&quot;)
        D_ = &quot;&quot;                   ;self.lineEdit_024.setText(&quot;&quot;)
        D__ = &quot;&quot;                  ;self.lineEdit_025.setText(&quot;&quot;)
        E_ = &quot;&quot;                   ;self.lineEdit_026.setText(&quot;&quot;)
        E__ = &quot;&quot;                  ;self.lineEdit_027.setText(&quot;&quot;)
        Quantity = &quot;&quot;             ;self.lineEdit_028.setText(&quot;&quot;)
        Part_ID_number = &quot;&quot;       ;self.lineEdit_029.setText(&quot;&quot;)
        Fabrication_tolerance = &quot;&quot;;self.lineEdit_030.setText(&quot;&quot;)
        Material = &quot;&quot;             ;self.lineEdit_031.setText(&quot;&quot;)
        _01 = &quot;&quot;                  ;self.lineEdit_032.setText(&quot;&quot;)
        _001_001 = &quot;&quot;             ;self.lineEdit_033.setText(&quot;&quot;)
        ISO2768_fh = &quot;&quot;           ;self.lineEdit_034.setText(&quot;&quot;)
        IRON = &quot;&quot;                 ;self.lineEdit_035.setText(&quot;&quot;)

    def on_pushButton03_clicked(self):    # Bouton Memo # Memo buttom
        self.lineEdit_001.setText(Drawn_by)
        self.lineEdit_002.setText(DRAWN_BY)
        self.lineEdit_003.setText(Controlled_by)
        self.lineEdit_004.setText(CONTROLLED_BY)
        self.lineEdit_005.setText(Date)
        self.lineEdit_006.setText(DATE)
        self.lineEdit_007.setText(Controlled_2)
        self.lineEdit_008.setText(CONTROLLED_2)
        self.lineEdit_009.setText(Controlled_3)
        self.lineEdit_010.setText(CONTROLLED_3)
        self.lineEdit_011.setText(SCALE)
        self.lineEdit_012.setText(MOD)
        self.lineEdit_013.setText(COMPANY)
        self.lineEdit_014.setText(ADRESS)
        self.lineEdit_015.setText(COUNTRY)
        self.lineEdit_016.setText(PART_NAME)
        self.lineEdit_017.setText(Project_number)
        self.lineEdit_018.setText(A_)
        self.lineEdit_019.setText(A__)
        self.lineEdit_020.setText(B_)
        self.lineEdit_021.setText(B__)
        self.lineEdit_022.setText(C_)
        self.lineEdit_023.setText(C__)
        self.lineEdit_024.setText(D_)
        self.lineEdit_025.setText(D__)
        self.lineEdit_026.setText(E_)
        self.lineEdit_027.setText(E__)
        self.lineEdit_028.setText(Quantity)
        self.lineEdit_029.setText(Part_ID_number)
        self.lineEdit_030.setText(Fabrication_tolerance)
        self.lineEdit_031.setText(Material)
        self.lineEdit_032.setText(_01)
        self.lineEdit_033.setText(_001_001)
        self.lineEdit_034.setText(ISO2768_fh)
        self.lineEdit_035.setText(IRON)

    def on_pushButton02_clicked(self):    # Bouton Quitter # Quit buttom
        App.Console.PrintMessage(&quot;End cartridge mod 2\r\n&quot;)
        self.window.hide()

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()

&lt;/syntaxhighlight&gt;


</text>
    </revision>
  </page>
  <page>
    <title>Macro CartoucheFC Full</title>
    <ns>0</ns>
    <id>20454</id>
    <revision>
      <id>103598</id>
      <parentid>103560</parentid>
      <timestamp>2014-08-08T19:48:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6lh8wa1gs03s5uvwnbzkgyrfc747p6s</sha1>
      <text xml:space="preserve" bytes="45168">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_CartoucheFC_Full|Description=This macro is a complete application, it allows to fill the cartridge of the drawing sheet with full editabletext.|Author=Mario52}}

&lt;!--T:2--&gt;
This macro is a complete application, it allows to fill simply all the fields of the cartridge [[Misc_templates#A3_Landscape_US_Text_Complet_Without_Convention| A3_Landscape_US_Text_Complet_Without_Convention]]

&lt;!--T:3--&gt;
Here the order of filling in the line FreeCAD texteditable. The date and time fields are separated by a '''&quot;space negative space&quot; &quot; - &quot;''' and constitute a single line textedit.

&lt;!--T:4--&gt;
[[File:Macro_CartoucheFC_Full.png|680px|CartoucheFC_Full]]

===Use=== &lt;!--T:5--&gt; 

&lt;!--T:6--&gt;
'''PS: Some characters such as &amp; $ are not accepted (and possibly other special characters).'''

&lt;!--T:7--&gt;
If you have any questions or want to add a function, you can address you on the french forum [http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=2049 Remplir cartouche]

&lt;!--T:8--&gt;
*The window remains above other Windows, thereby controlling the cartridge without leaving the program.
*Copy the code into a file named '''Macro_CartoucheFC_Full.FCMacro''' and place it in your usual macros directory.
*After you have created your drawing sheet using the Drawing of FreeCAD module, run the macro '''Macro_CartoucheFC_Full'''.
*At the opening, the program will register in memory all data already present in the cartridge of the sheet (if they are filled), all these data will be automatically returned to using the button {{KEY| Memo}} and kept in memory until the closure of the programme.
*Date button {{KEY| D.}} and time {{KEY| H.}} displayed the date and time of the system.
:*The date format depends on the selected symbol '''EU''' or '''US''' which determines the regional format. Change does not happen automatically (for the case or you have entered a date manually) you must again click buttons dates if you change the symbol (check before printing).
*Button {{KEY|Symbole EU}} or US change the meaning of the symbol of projection &quot;Select your Symbol&quot; is displayed by default, and then the active symbol appears. Click on the button and check the leaf symbol, click a second time to modify the symbol.
:*The choice of this symbol, affects the date format '''EU = dd/MM/yyyy''' and '''US = MM/dd/yyyy'''.
:*'''Attention''': this command does not pass through the button {{KEY|Apply}} and immediately changes the symbol to each presses on the key, always check if you have the appropriate symbol on your worksheet.
*Button {{KEY|Clean}} Clears all fields in the cartridge. You can revert to the original data using the button {{KEY|Memo}}.
*Button {{KEY|Apply}} saves all fields of the cartridge in the sheet. You can revert to the original data using the button {{KEY|Memo}} (except for the regional symbol that works in independent and is effective immediately).

===Code=== &lt;!--T:9--&gt;
Macro_CartoucheFC_Full.FCMacro


&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
&quot;&quot;&quot;
***************************************************************************
*   Copyright (c) 2014 &lt;mario52&gt;                                          *
*                                                                         *
*   This file is a supplement to the FreeCAD CAx development system.      *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU Lesser General Public License (LGPL)    *
*   as published by the Free Software Foundation; either version 2 of     *
*   the License, or (at your option) any later version.                   *
*   for detail see the LICENCE text file.                                 *
*                                                                         *
*   This software is distributed in the hope that it will be useful,      *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Library General Public License for more details.                  *
*                                                                         *
*   You should have received a copy of the GNU Library General Public     *
*   License along with this macro; if not, write to the Free Software     *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
*   USA                                                                   *
***************************************************************************
*           WARNING! All changes in this file will be lost and            *  
*                  may cause malfunction of the program                   *
***************************************************************************
&quot;&quot;&quot;
# Macro_CartoucheFC_Full.FcMacro
# Remplir les zones du cartouche + dates + symbole de convention EU ou US
# il faut que la page (drawing viewer) s'appelle &quot; Page &quot; qui est le nom par défaut du module Drawing
# cette macro fonctionne avec la feuille A3_Landscape_ qui possede tous les champs EditableTexts et
# le symbole de convention absent &quot;A3_Landscape_US_Text_Complet_Without_Convention.svg&quot;
# http://www.freecadweb.org/wiki/index.php?title=Misc_templates#A3_Landscape_US_Text_Complet_Without_Convention
# DESIGNED_BY, CREATION_DATE, CHECKED_BY, CHECK_DATE, SIZE, SCALE, WEIGHT, DRAWING_NUMBER, SHEET, 
# TITLE, DESCRIPTION, COMPANY, COPYRIGHT, Note_A, Note_B, Note_C, Note_D, Note_E, Note_F, Note_G, Note_H, Note_I
# Fill the area of the cartridge
# It is necessary that the page (drawing viewer) is called &quot;Page&quot;, which is the default name of the Drawing module
# Python 2.6 Windows Vista Sp2
# ver 5 : 08/08/2014 # PyQt4 and PySide
# Created:  by mario52

try:
    import PyQt4
    from PyQt4 import QtCore, QtGui
except Exception:
    import PySide
    from PySide import QtCore, QtGui

import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base

def utf8(unio):
    return unicode(unio).encode('UTF8')

global path
global DESIGNED_BY    ;DESIGNED_BY = &quot;&quot;     # lineEdit01 DESIGNED_BY
global CREATION_DATE  ;CREATION_DATE = &quot;&quot;   # lineEdit02 CREATION_DATE date
global CREA_DATE      ;CREA_DATE = &quot;&quot;       # lineEdit02h date
global CREA_TIME      ;CREA_TIME = &quot;&quot;       # lineEdit02h heure
global CHECKED_BY     ;CHECKED_BY = &quot;&quot;      # lineEdit03
global CHECK_DATE     ;CHECK_DATE = &quot;&quot;      # lineEdit04 date
global CHEC_DATE      ;CHEC_DATE = &quot;&quot;       # lineEdit04 date
global CHEC_TIME      ;CHEC_TIME = &quot;&quot;       # lineEdit04h heure
global SIZE           ;SIZE = &quot;&quot;            # lineEdit05
global SCALE          ;SCALE =  &quot;&quot;          # lineEdit06
global WEIGHT         ;WEIGHT =  &quot;&quot;         # lineEdit07
global DRAWING_NUMBER ;DRAWING_NUMBER =  &quot;&quot; # lineEdit08
global SHEET          ;SHEET =  &quot;&quot;          # lineEdit09
global TITLE          ;TITLE =  &quot;&quot;          # textEdit_01
global DESCRIPTION    ;DESCRIPTION =  &quot;&quot;    # textEdit_02
global COMPANY        ;COMPANY = &quot;&quot;         # textEdit_02b
global COPYRIGHT      ; COPYRIGHT = &quot;&quot;      # lineEdit_20
global Note_A         ; Note_A = &quot;&quot;         # lineEdit_10
global Note_B         ; Note_B = &quot;&quot;         # lineEdit_11
global Note_C         ; Note_C = &quot;&quot;         # lineEdit_12
global Note_D         ; Note_D = &quot;&quot;         # lineEdit_13
global Note_E         ; Note_E = &quot;&quot;         # lineEdit_14
global Note_F         ; Note_F = &quot;&quot;         # lineEdit_15
global Note_G         ; Note_G = &quot;&quot;         # lineEdit_16
global Note_H         ; Note_H = &quot;&quot;         # lineEdit_17
global Note_I         ; Note_I = &quot;&quot;         # lineEdit_18

path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)

def heure():
    return QtCore.QTime().currentTime().toString('hh:mm:ss')
def dateEu():
    return QtCore.QDate().currentDate().toString('dd/MM/yyyy') # forme euro
def dateUK():
    return QtCore.QDate().currentDate().toString('yyyy/MM/dd') # forme UK
def dateUs():
    return QtCore.QDate().currentDate().toString('MM/dd/yyyy') # forme US
def dateComp():
    return QtCore.QDate().currentDate().toString('dddd d MMMM yyyy') # Retourne &quot;dimanche 20 Juillet 77&quot;

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
    try:
        diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # cette fonction met la fenêtre en avant
    except Exception:
        diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # cette fonction met la fenêtre en avant
    #diag.setWindowModality(QtCore.Qt.ApplicationModal) # la fonction a été désactivée pour favoriser &quot;WindowStaysOnTopHint&quot;
    diag.exec_()

def symbol_EU(depx,depy):    #symbol_EU =O
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
    except:
        None
    App.activeDocument().addObject('Sketcher::SketchObject','Symbol_EU')
    App.activeDocument().Symbol_EU.Placement = App.Placement(App.Vector(0.0,0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(-7.5,0.0,0.0),App.Vector(20.0,0.0,0.0)))

    App.ActiveDocument.Symbol_EU.Placement = App.Placement(App.Vector(0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(12.50,-7.5,0),App.Vector(12.50,7.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Circle(App.Vector(12.50,0.0,0),App.Vector(0,0,1),2.5))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Circle(App.Vector(12.50,0.0,0),App.Vector(0,0,1),5.0))

    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,5.0,0.0),App.Vector(-5.0,2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(-5.0,-2.5,0.0),App.Vector(-5.0,2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,-5.0,0.0),App.Vector(-5.0,-2.5,0.0)))
    App.ActiveDocument.Symbol_EU.addGeometry(Part.Line(App.Vector(5.0,-5.0,0.0),App.Vector(5.0,5.0,0.0)))
    Gui.getDocument(App.ActiveDocument.Name).resetEdit()
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).LineColor = (0.00,0.00,0.00)
    App.ActiveDocument.recompute()

    App.activeDocument().addObject('Drawing::FeatureViewPart','SymbolEU')
    App.activeDocument().SymbolEU.Source = App.activeDocument().Symbol_EU
    App.activeDocument().SymbolEU.Direction = (0.0,0.0,1.0)
    App.activeDocument().SymbolEU.X = depx
    App.activeDocument().SymbolEU.Y = depy
    App.activeDocument().SymbolEU.Scale = 0.8
    App.activeDocument().Page.addObject(App.activeDocument().SymbolEU)
    App.ActiveDocument.recompute()
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).Visibility = False

def symbol_US(depx,depy):    #symbol_US O=
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
    except:
        None
    try:
        App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
    except:
        None
    App.activeDocument().addObject('Sketcher::SketchObject','Symbol_US')
    App.activeDocument().Symbol_US.Placement = App.Placement(App.Vector(0.0,0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(-7.5,0.0,0.0),App.Vector(20.0,0.0,0.0)))

    App.ActiveDocument.Symbol_US.Placement = App.Placement(App.Vector(0.0,0.0),App.Rotation(0.000000,0.000000,0.000000,1.000000))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(0.0,-7.5,0.0),App.Vector(0.0,7.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Circle(App.Vector(0.0,0.0,0.0),App.Vector(0,0,1),2.5))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Circle(App.Vector(0.0,0.0,0.0),App.Vector(0,0,1),5.0))

    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,5.0,0.0),App.Vector(7.5,2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(7.5,-2.5,0.0),App.Vector(7.5,2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,-5.0,0.0),App.Vector(7.5,-2.5,0.0)))
    App.ActiveDocument.Symbol_US.addGeometry(Part.Line(App.Vector(17.5,-5.0,0.0),App.Vector(17.5,5.0,0.0)))
    Gui.getDocument(App.ActiveDocument.Name).resetEdit()
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).LineColor = (0.00,0.00,0.00)
    App.ActiveDocument.recompute()

    App.activeDocument().addObject('Drawing::FeatureViewPart','SymbolUS')
    App.activeDocument().SymbolUS.Source = App.activeDocument().Symbol_US
    App.activeDocument().SymbolUS.Direction = (0.0,0.0,1.0)
    App.activeDocument().SymbolUS.X = depx
    App.activeDocument().SymbolUS.Y = depy
    App.activeDocument().SymbolUS.Scale = 0.8
    App.activeDocument().Page.addObject(App.activeDocument().SymbolUS)
    App.ActiveDocument.recompute()
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).Visibility = False

try:
    DESIGNED_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[0]    # lineEdit01 DESIGNED_BY
    CREATION_DATE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[1]  # lineEdit02 CREATION_DATE date
    try:
        CREA_DATE = CREATION_DATE.split(&quot; - &quot;)[0]                            # lineEdit02h date
    except:
        CREA_DATE = CREATION_DATE
    try:
        CREA_TIME = CREATION_DATE.split(&quot; - &quot;)[1]                            # lineEdit02h heure
    except: None    
    CHECKED_BY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[2]     # lineEdit03
    CHECK_DATE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[3]     # lineEdit04 date
    try:
        CHEC_DATE = CHECK_DATE.split(&quot; - &quot;)[0]                               # lineEdit04 date
    except:
        CHEC_DATE = CHECK_DATE
    try:
        CHEC_TIME = CHECK_DATE.split(&quot; - &quot;)[1]                               # lineEdit04h heure
    except: None    
    SIZE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[4]           # lineEdit05
    SCALE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[5]          # lineEdit06
    WEIGHT = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[6]         # lineEdit07
    DRAWING_NUMBER = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[7] # lineEdit08
    SHEET = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[8]          # lineEdit09
    TITLE = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[9]          # textEdit_01
    DESCRIPTION = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[10]   # textEdit_02
    COMPANY = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[11]       # textEdit_02b
    COPYRIGHT = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[12]     # lineEdit_20
    Note_A = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[13]        # lineEdit_10
    Note_B = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[14]        # lineEdit_11
    Note_C = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[15]        # lineEdit_12
    Note_D = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[16]        # lineEdit_13
    Note_E = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[17]        # lineEdit_14
    Note_F = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[18]        # lineEdit_15
    Note_G = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[19]        # lineEdit_16
    Note_H = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[20]        # lineEdit_17
    Note_I = App.activeDocument().getObject(&quot;Page&quot;).EditableTexts[21]        # lineEdit_18

except:
    errorDialog(&quot;erreur cartouche&quot;)

class Ui_MainWindow(object):

    def __init__(self, MainWindow):
        self.window = MainWindow
#___________________________________________________________________________________

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(810, 440)
        MainWindow.setMaximumSize(QtCore.QSize(810, 480))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

#        self.pushButton01 = QtGui.QPushButton(self.centralWidget)
#        self.pushButton01.setGeometry(QtCore.QRect(115, 360, 93, 28))
#        self.pushButton01.setObjectName(_fromUtf8(&quot;pushButton01&quot;))
#        self.pushButton01.clicked.connect(self.on_pushButton01_clicked) #connection pushButton01

        self.pushButton02 = QtGui.QPushButton(self.centralWidget)
        self.pushButton02.setGeometry(QtCore.QRect(225, 360, 93, 28))
        self.pushButton02.setObjectName(_fromUtf8(&quot;pushButton02&quot;))
        self.pushButton02.clicked.connect(self.on_pushButton02_clicked) #connection pushButton02

        self.pushButton03 = QtGui.QPushButton(self.centralWidget)
        self.pushButton03.setGeometry(QtCore.QRect(335, 360, 93, 28))
        self.pushButton03.setObjectName(_fromUtf8(&quot;pushButton03&quot;))
        self.pushButton03.clicked.connect(self.on_pushButton03_clicked) #connection pushButton03

        self.pushButton04 = QtGui.QPushButton(self.centralWidget)
        self.pushButton04.setGeometry(QtCore.QRect(445, 360, 93, 28))
        self.pushButton04.setObjectName(_fromUtf8(&quot;pushButton04&quot;))
        self.pushButton04.clicked.connect(self.on_pushButton04_clicked) #connection pushButton04

        self.pushButton05 = QtGui.QPushButton(self.centralWidget)
        self.pushButton05.setGeometry(QtCore.QRect(555, 360, 93, 28))
        self.pushButton05.setObjectName(_fromUtf8(&quot;pushButton05&quot;))
        self.pushButton05.clicked.connect(self.on_pushButton05_clicked) #connection pushButton05

        self.pushButton06 = QtGui.QPushButton(self.centralWidget)
        self.pushButton06.setGeometry(QtCore.QRect(170, 56, 20, 20))
        self.pushButton06.setObjectName(_fromUtf8(&quot;pushButton06&quot;))
        self.pushButton06.clicked.connect(self.on_pushButton06_clicked) #connection pushButton06

        self.pushButton07 = QtGui.QPushButton(self.centralWidget)
        self.pushButton07.setGeometry(QtCore.QRect(190, 56, 20, 20))
        self.pushButton07.setObjectName(_fromUtf8(&quot;pushButton07&quot;))
        self.pushButton07.clicked.connect(self.on_pushButton07_clicked) #connection pushButton07

        self.pushButton08 = QtGui.QPushButton(self.centralWidget)
        self.pushButton08.setGeometry(QtCore.QRect(170, 136, 20, 20))
        self.pushButton08.setObjectName(_fromUtf8(&quot;pushButton08&quot;))
        self.pushButton08.clicked.connect(self.on_pushButton08_clicked) #connection pushButton08

        self.pushButton09 = QtGui.QPushButton(self.centralWidget)
        self.pushButton09.setGeometry(QtCore.QRect(190, 136, 20, 20))
        self.pushButton09.setObjectName(_fromUtf8(&quot;pushButton09&quot;))
        self.pushButton09.clicked.connect(self.on_pushButton09_clicked) #connection pushButton09

        self.pushButton10 = QtGui.QPushButton(self.centralWidget)
        self.pushButton10.setGeometry(QtCore.QRect(100, 220, 101, 20))
        self.pushButton10.setObjectName(_fromUtf8(&quot;pushButton10&quot;))
        self.pushButton10.clicked.connect(self.on_pushButton10_clicked) #connection pushButton10

        self.lineEdit_01 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_01.setGeometry(QtCore.QRect(20, 20, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_01.setFont(font)
        self.lineEdit_01.setObjectName(_fromUtf8(&quot;lineEdit_01&quot;))
        self.lineEdit_01.setText(DESIGNED_BY)

        self.lineEdit_02 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_02.setGeometry(QtCore.QRect(20, 60, 82, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_02.setFont(font)
        self.lineEdit_02.setObjectName(_fromUtf8(&quot;lineEdit_02&quot;))
        self.lineEdit_02.setText(CREA_DATE)

        self.lineEdit_02h = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_02h.setGeometry(QtCore.QRect(98, 60, 72, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_02h.setFont(font)
        self.lineEdit_02h.setObjectName(_fromUtf8(&quot;lineEdit_02h&quot;))
        self.lineEdit_02h.setText(CREA_TIME)

        self.lineEdit_03 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_03.setGeometry(QtCore.QRect(20, 100, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_03.setFont(font)
        self.lineEdit_03.setObjectName(_fromUtf8(&quot;lineEdit_03&quot;))
        self.lineEdit_03.setText(CHECKED_BY)

        self.lineEdit_04 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_04.setGeometry(QtCore.QRect(20, 140, 82, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_04.setFont(font)
        self.lineEdit_04.setObjectName(_fromUtf8(&quot;lineEdit_04&quot;))
        self.lineEdit_04.setText(CHEC_DATE)

        self.lineEdit_04h = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_04h.setGeometry(QtCore.QRect(98, 140, 72, 16))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_04h.setFont(font)
        self.lineEdit_04h.setObjectName(_fromUtf8(&quot;lineEdit_04h&quot;))
        self.lineEdit_04h.setText(CHEC_TIME)

        self.lineEdit_05 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_05.setGeometry(QtCore.QRect(20, 180, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_05.setFont(font)
        self.lineEdit_05.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_05.setObjectName(_fromUtf8(&quot;lineEdit_05&quot;))
        self.lineEdit_05.setText(SIZE)

        self.lineEdit_06 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_06.setGeometry(QtCore.QRect(20, 280, 61, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_06.setFont(font)
        self.lineEdit_06.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_06.setObjectName(_fromUtf8(&quot;lineEdit_06&quot;))
        self.lineEdit_06.setText(SCALE)

        self.lineEdit_07 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_07.setGeometry(QtCore.QRect(100, 280, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_07.setFont(font)
        self.lineEdit_07.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_07.setObjectName(_fromUtf8(&quot;lineEdit_07&quot;))
        self.lineEdit_07.setText(WEIGHT)

        self.lineEdit_08 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_08.setGeometry(QtCore.QRect(220, 280, 341, 41))
        self.lineEdit_08.setObjectName(_fromUtf8(&quot;lineEdit_08&quot;))
        self.lineEdit_08.setText(DRAWING_NUMBER)

        self.lineEdit_09 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_09.setGeometry(QtCore.QRect(570, 280, 81, 41))
        self.lineEdit_09.setObjectName(_fromUtf8(&quot;lineEdit_09&quot;))
        self.lineEdit_09.setText(SHEET)

        self.lineEdit_20 = QtGui.QLineEdit(self.centralWidget) # Copyright
        self.lineEdit_20.setGeometry(QtCore.QRect(20, 330, 771, 22))
        self.lineEdit_20.setObjectName(_fromUtf8(&quot;lineEdit_20&quot;))
        self.lineEdit_20.setText(COPYRIGHT)

        self.lineEdit_10 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_10.setGeometry(QtCore.QRect(690, 290, 101, 30))
        self.lineEdit_10.setObjectName(_fromUtf8(&quot;lineEdit_10&quot;))
        self.lineEdit_10.setText(Note_A)

        self.lineEdit_11 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_11.setGeometry(QtCore.QRect(690, 260, 101, 30))
        self.lineEdit_11.setObjectName(_fromUtf8(&quot;lineEdit_11&quot;))
        self.lineEdit_11.setText(Note_B)

        self.lineEdit_12 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_12.setGeometry(QtCore.QRect(690, 230, 101, 30))
        self.lineEdit_12.setObjectName(_fromUtf8(&quot;lineEdit_12&quot;))
        self.lineEdit_12.setText(Note_C)

        self.lineEdit_13 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_13.setGeometry(QtCore.QRect(690, 200, 101, 30))
        self.lineEdit_13.setObjectName(_fromUtf8(&quot;lineEdit_13&quot;))
        self.lineEdit_13.setText(Note_D)

        self.lineEdit_14 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_14.setGeometry(QtCore.QRect(690, 170, 101, 30))
        self.lineEdit_14.setObjectName(_fromUtf8(&quot;lineEdit_14&quot;))
        self.lineEdit_14.setText(Note_E)

        self.lineEdit_15 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_15.setGeometry(QtCore.QRect(690, 140, 101, 30))
        self.lineEdit_15.setObjectName(_fromUtf8(&quot;lineEdit_15&quot;))
        self.lineEdit_15.setText(Note_F)

        self.lineEdit_16 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_16.setGeometry(QtCore.QRect(690, 110, 101, 30))
        self.lineEdit_16.setObjectName(_fromUtf8(&quot;lineEdit_16&quot;))
        self.lineEdit_16.setText(Note_G)

        self.lineEdit_17 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_17.setGeometry(QtCore.QRect(690, 80, 101, 30))
        self.lineEdit_17.setObjectName(_fromUtf8(&quot;lineEdit_17&quot;))
        self.lineEdit_17.setText(Note_H)

        self.lineEdit_18 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_18.setGeometry(QtCore.QRect(690, 50, 101, 30))
        self.lineEdit_18.setObjectName(_fromUtf8(&quot;lineEdit_18&quot;))
        self.lineEdit_18.setText(Note_I)

        self.label_01T = QtGui.QLabel(self.centralWidget)
        self.label_01T.setGeometry(QtCore.QRect(220, 0, 91, 16))
        self.label_01T.setObjectName(_fromUtf8(&quot;label_01T&quot;))

        self.textEdit_01 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_01.setGeometry(QtCore.QRect(220, 20, 431,55 ))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.textEdit_01.setFont(font)
        self.textEdit_01.setObjectName(_fromUtf8(&quot;textEdit_01&quot;))
        self.textEdit_01.setText(TITLE)

        self.label_02T = QtGui.QLabel(self.centralWidget)
        self.label_02T.setGeometry(QtCore.QRect(220, 80, 101, 16))
        self.label_02T.setObjectName(_fromUtf8(&quot;label_02T&quot;))

        self.textEdit_02 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_02.setGeometry(QtCore.QRect(220, 100, 431, 55))
        self.textEdit_02.setObjectName(_fromUtf8(&quot;textEdit_02&quot;))
        self.textEdit_02.setText(DESCRIPTION)

        self.label_02bT = QtGui.QLabel(self.centralWidget)
        self.label_02bT.setGeometry(QtCore.QRect(220, 160, 90, 16))
        self.label_02bT.setObjectName(_fromUtf8(&quot;label_02bT&quot;))

        self.textEdit_02b = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_02b.setGeometry(QtCore.QRect(220, 180, 340, 60))
        self.textEdit_02b.setObjectName(_fromUtf8(&quot;textEdit_02b&quot;))
        self.textEdit_02b.setText(COMPANY)

        self.textEdit_03 = QtGui.QTextEdit(self.centralWidget)
        self.textEdit_03.setGeometry(QtCore.QRect(100, 170, 101, 45))
        self.textEdit_03.setAlignment(QtCore.Qt.AlignCenter)
        self.textEdit_03.setObjectName(_fromUtf8(&quot;textEdit_03&quot;))
        self.textEdit_03.setText(&quot;Select your Symbol&quot;)

        self.label_01 = QtGui.QLabel(self.centralWidget)
        self.label_01.setGeometry(QtCore.QRect(20, 0, 91, 16))
        self.label_01.setObjectName(_fromUtf8(&quot;label_01&quot;))

        self.label_02 = QtGui.QLabel(self.centralWidget)
        self.label_02.setGeometry(QtCore.QRect(20, 40, 53, 16))
        self.label_02.setObjectName(_fromUtf8(&quot;label_02&quot;))

        self.label_03 = QtGui.QLabel(self.centralWidget)
        self.label_03.setGeometry(QtCore.QRect(20, 80, 101, 16))
        self.label_03.setObjectName(_fromUtf8(&quot;label_03&quot;))

        self.label_04 = QtGui.QLabel(self.centralWidget)
        self.label_04.setGeometry(QtCore.QRect(20, 120, 91, 16))
        self.label_04.setObjectName(_fromUtf8(&quot;label_04&quot;))

        self.label_05 = QtGui.QLabel(self.centralWidget)
        self.label_05.setGeometry(QtCore.QRect(20, 160, 53, 16))
        self.label_05.setObjectName(_fromUtf8(&quot;label_05&quot;))

        self.label_06 = QtGui.QLabel(self.centralWidget)
        self.label_06.setGeometry(QtCore.QRect(20, 260, 53, 16))
        self.label_06.setObjectName(_fromUtf8(&quot;label_06&quot;))

        self.label_07 = QtGui.QLabel(self.centralWidget)
        self.label_07.setGeometry(QtCore.QRect(100, 260, 101, 16))
        self.label_07.setObjectName(_fromUtf8(&quot;label_07&quot;))

        self.label_08 = QtGui.QLabel(self.centralWidget)
        self.label_08.setGeometry(QtCore.QRect(220, 260, 121, 16))
        self.label_08.setObjectName(_fromUtf8(&quot;label_08&quot;))

        self.label_09 = QtGui.QLabel(self.centralWidget)
        self.label_09.setGeometry(QtCore.QRect(570, 260, 53, 16))
        self.label_09.setObjectName(_fromUtf8(&quot;label_09&quot;))

        self.label_10 = QtGui.QLabel(self.centralWidget)
        self.label_10.setGeometry(QtCore.QRect(670, 290, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName(_fromUtf8(&quot;label_10&quot;))

        self.label_11 = QtGui.QLabel(self.centralWidget)
        self.label_11.setGeometry(QtCore.QRect(670, 260, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName(_fromUtf8(&quot;label_11&quot;))

        self.label_12 = QtGui.QLabel(self.centralWidget)
        self.label_12.setGeometry(QtCore.QRect(670, 230, 16, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName(_fromUtf8(&quot;label_12&quot;))

        self.label_13 = QtGui.QLabel(self.centralWidget)
        self.label_13.setGeometry(QtCore.QRect(670, 200, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName(_fromUtf8(&quot;label_13&quot;))

        self.label_14 = QtGui.QLabel(self.centralWidget)
        self.label_14.setGeometry(QtCore.QRect(670, 170, 15, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName(_fromUtf8(&quot;label_14&quot;))

        self.label_15 = QtGui.QLabel(self.centralWidget)
        self.label_15.setGeometry(QtCore.QRect(670, 140, 14, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName(_fromUtf8(&quot;label_15&quot;))

        self.label_16 = QtGui.QLabel(self.centralWidget)
        self.label_16.setGeometry(QtCore.QRect(670, 110, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName(_fromUtf8(&quot;label_16&quot;))

        self.label_17 = QtGui.QLabel(self.centralWidget)
        self.label_17.setGeometry(QtCore.QRect(670, 80, 18, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName(_fromUtf8(&quot;label_17&quot;))

        self.label_18 = QtGui.QLabel(self.centralWidget)
        self.label_18.setGeometry(QtCore.QRect(670, 50, 10, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName(_fromUtf8(&quot;label_18&quot;))

        self.label_19 = QtGui.QLabel(self.centralWidget)
        self.label_19.setGeometry(QtCore.QRect(720, 15, 100, 33))
        self.label_19.setObjectName(_fromUtf8(&quot;label_19&quot;))

        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 810, 26))
        self.menuBar.setObjectName(_fromUtf8(&quot;menuBar&quot;))
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8(&quot;statusBar&quot;))
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # cette fonction met la fenêtre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # cette fonction met la fenêtre en avant
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;Cartouche&quot;, None))
#        self.pushButton01.setText(_translate(&quot;MainWindow&quot;, &quot;Position&quot;, None))
        self.pushButton02.setText(_translate(&quot;MainWindow&quot;, &quot;Quitter&quot;, None))
        self.pushButton03.setText(_translate(&quot;MainWindow&quot;, &quot;Memo&quot;, None))
        self.pushButton04.setText(_translate(&quot;MainWindow&quot;, &quot;Nettoyer&quot;, None))
        self.pushButton05.setText(_translate(&quot;MainWindow&quot;, &quot;Appliquer&quot;, None))
        self.pushButton06.setText(_translate(&quot;MainWindow&quot;, &quot;D.&quot;, None))
        self.pushButton07.setText(_translate(&quot;MainWindow&quot;, &quot;H.&quot;, None))
        self.pushButton08.setText(_translate(&quot;MainWindow&quot;, &quot;D.&quot;, None))
        self.pushButton09.setText(_translate(&quot;MainWindow&quot;, &quot;H.&quot;, None))
        self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole EU&quot;, None))

        self.label_01.setText(_translate(&quot;MainWindow&quot;, &quot;Designed by :&quot;, None))
        self.label_02.setText(_translate(&quot;MainWindow&quot;, &quot;Date :&quot;, None))
        self.label_03.setText(_translate(&quot;MainWindow&quot;, &quot;Checked by :&quot;, None))
        self.label_04.setText(_translate(&quot;MainWindow&quot;, &quot;Date :&quot;, None))
        self.label_05.setText(_translate(&quot;MainWindow&quot;, &quot;Size :&quot;, None))
        self.label_06.setText(_translate(&quot;MainWindow&quot;, &quot;Scale :&quot;, None))
        self.label_07.setText(_translate(&quot;MainWindow&quot;, &quot;Weight (Kg) :&quot;, None))
        self.label_08.setText(_translate(&quot;MainWindow&quot;, &quot;Drawing number :&quot;, None))
        self.label_01T.setText(_translate(&quot;MainWindow&quot;, &quot;Title :&quot;, None))
        self.label_02T.setText(_translate(&quot;MainWindow&quot;, &quot;Description :&quot;, None))
        self.label_02bT.setText(_translate(&quot;MainWindow&quot;, &quot;Company :&quot;, None))
        self.label_09.setText(_translate(&quot;MainWindow&quot;, &quot;Sheet :&quot;, None))
        self.label_10.setText(_translate(&quot;MainWindow&quot;, &quot;A&quot;, None))
        self.label_11.setText(_translate(&quot;MainWindow&quot;, &quot;B&quot;, None))
        self.label_12.setText(_translate(&quot;MainWindow&quot;, &quot;C&quot;, None))
        self.label_13.setText(_translate(&quot;MainWindow&quot;, &quot;D&quot;, None))
        self.label_14.setText(_translate(&quot;MainWindow&quot;, &quot;E&quot;, None))
        self.label_15.setText(_translate(&quot;MainWindow&quot;, &quot;F&quot;, None))
        self.label_16.setText(_translate(&quot;MainWindow&quot;, &quot;G&quot;, None))
        self.label_17.setText(_translate(&quot;MainWindow&quot;, &quot;H&quot;, None))
        self.label_18.setText(_translate(&quot;MainWindow&quot;, &quot;I&quot;, None))
        self.label_19.setText(_translate(&quot;MainWindow&quot;, &quot;Notes&quot;, None))
#______________________________________________________________________________________
    # Boutons
    def on_pushButton10_clicked(self):    # Bouton /Symbole
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole US&quot;, None))
            self.textEdit_03.setText(&quot;Symbole EU&quot;)
            symbol_EU(247.5,263.5)
        else:
            self.pushButton10.setText(_translate(&quot;MainWindow&quot;, &quot;Symbole EU&quot;, None))
            self.textEdit_03.setText(&quot;Symbole US&quot;)
            symbol_US(247.5,263.5)
    def on_pushButton09_clicked(self):    # Bouton /heure document
        self.lineEdit_04h.setText(str(heure()))
    def on_pushButton08_clicked(self):    # Bouton date/ document
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.lineEdit_04.setText(str(dateUs()))
        else:
            self.lineEdit_04.setText(str(dateEu()))
    def on_pushButton07_clicked(self):    # Bouton /heure checked
        self.lineEdit_02h.setText(str(heure()))
    def on_pushButton06_clicked(self):    # Bouton date/ checked
        if self.textEdit_03.toPlainText()==&quot;Symbole US&quot;:
            self.lineEdit_02.setText(str(dateUs()))
        else:
            self.lineEdit_02.setText(str(dateEu()))
    def on_pushButton05_clicked(self):    # Bouton Appliquer
        DESIGNED_BY = utf8(self.lineEdit_01.text())
        CREATION_DATE = utf8(self.lineEdit_02.text())+&quot; - &quot;+utf8(self.lineEdit_02h.text())
        CHECKED_BY = utf8(self.lineEdit_03.text())
        CHECK_DATE = utf8(self.lineEdit_04.text())+&quot; - &quot;+utf8(self.lineEdit_04h.text())
        SIZE = utf8(self.lineEdit_05.text())
        SYMBOL = utf8(self.textEdit_03.toPlainText())
        SCALE = utf8(self.lineEdit_06.text())
        WEIGHT = utf8(self.lineEdit_07.text())
        DRAWING_NUMBER = utf8(self.lineEdit_08.text())
        SHEET = utf8(self.lineEdit_09.text())
        TITLE = utf8(self.textEdit_01.toPlainText())
        DESCRIPTION = utf8(self.textEdit_02.toPlainText())
        COMPANY = utf8(self.textEdit_02b.toPlainText())
        COPYRIGHT = utf8(self.lineEdit_20.text())
        Note_A = utf8(self.lineEdit_10.text())
        Note_B = utf8(self.lineEdit_11.text())
        Note_C = utf8(self.lineEdit_12.text())
        Note_D = utf8(self.lineEdit_13.text())
        Note_E = utf8(self.lineEdit_14.text())
        Note_F = utf8(self.lineEdit_15.text())
        Note_G = utf8(self.lineEdit_16.text())
        Note_H = utf8(self.lineEdit_17.text())
        Note_I = utf8(self.lineEdit_18.text())

        try:
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts = [unicode(DESIGNED_BY, 'utf-8'),unicode(CREATION_DATE, 'utf-8'),unicode(CHECKED_BY, 'utf-8'),       unicode(CHECK_DATE, 'utf-8'),  unicode(SIZE, 'utf-8'),  unicode(SCALE, 'utf-8'),  unicode(WEIGHT, 'utf-8'),  unicode(DRAWING_NUMBER, 'utf-8'),  unicode(SHEET, 'utf-8'),  unicode(TITLE, 'utf-8'),  unicode(DESCRIPTION, 'utf-8'),  unicode(COMPANY, 'utf-8'),  unicode(COPYRIGHT, 'utf-8'),  unicode(Note_A, 'utf-8'),  unicode(Note_B, 'utf-8'),  unicode(Note_C, 'utf-8'),  unicode(Note_D, 'utf-8'),  unicode(Note_E, 'utf-8'),  unicode(Note_F, 'utf-8'),  unicode(Note_G, 'utf-8'),  unicode(Note_H, 'utf-8'),  unicode(Note_I, 'utf-8'),]
            App.ActiveDocument.recompute()
        except:
            FreeCAD.getDocument (App.ActiveDocument.Name).getObject(&quot;Page&quot;).EditableTexts = [DESIGNED_BY.encode('utf-8'), CREATION_DATE.encode('utf-8'), CHECKED_BY.encode('utf-8'), CHECK_DATE.encode('utf-8'), SIZE.encode('utf-8'), SCALE.encode('utf-8'), WEIGHT.encode('utf-8'), DRAWING_NUMBER.encode('utf-8'), SHEET.encode('utf-8'), TITLE.encode('utf-8'), DESCRIPTION.encode('utf-8'), COMPANY.encode('utf-8'), COPYRIGHT.encode('utf-8'), Note_A.encode('utf-8'), Note_B.encode('utf-8'), Note_C.encode('utf-8'), Note_D.encode('utf-8'), Note_E.encode('utf-8'), Note_F.encode('utf-8'), Note_G.encode('utf-8'), Note_H.encode('utf-8'), Note_I.encode('utf-8'), ]
            App.ActiveDocument.recompute()
            
        #print App.ActiveDocument.Name

#        App.ActiveDocument.recompute()

    def on_pushButton04_clicked(self):    # Bouton nettoyer
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolUS&quot;)
        except:
            None
        try:
            App.getDocument(App.ActiveDocument.Name).removeObject(&quot;SymbolEU&quot;)
        except:
            None
        DESIGNED_BY = &quot;&quot;    ;self.lineEdit_01.setText(&quot;&quot;)
        CREATION_DATE = &quot;&quot;  ;self.lineEdit_02.setText(&quot;&quot;)
        self.lineEdit_02h.setText(&quot;&quot;)
        CHECKED_BY = &quot;&quot;     ;self.lineEdit_03.setText(&quot;&quot;)
        CHECK_DATE = &quot;&quot;     ;self.lineEdit_04.setText(&quot;&quot;)
        self.lineEdit_04h.setText(&quot;&quot;)
        SIZE  = &quot;&quot;          ;self.lineEdit_05.setText(&quot;&quot;)
        SCALE = &quot;&quot;          ;self.lineEdit_06.setText(&quot;&quot;)
        WEIGHT = &quot;&quot;         ;self.lineEdit_07.setText(&quot;&quot;)
        DRAWING_NUMBER = &quot;&quot; ;self.lineEdit_08.setText(&quot;&quot;)
        SHEET = &quot;&quot;          ;self.lineEdit_09.setText(&quot;&quot;)
        TITLE = &quot;&quot;          ;self.textEdit_01.setText(&quot;&quot;)
        DESCRIPTION = &quot;&quot;    ;self.textEdit_02.setText(&quot;&quot;)
        COMPANY = &quot;&quot;        ;self.textEdit_02b.setText(&quot;&quot;)
        COPYRIGHT = &quot;&quot;      ;self.lineEdit_20.setText(&quot;&quot;)
        Note_A = &quot;&quot;         ;self.lineEdit_10.setText(&quot;&quot;)
        Note_B = &quot;&quot;         ;self.lineEdit_11.setText(&quot;&quot;)
        Note_C = &quot;&quot;         ;self.lineEdit_12.setText(&quot;&quot;)
        Note_D = &quot;&quot;         ;self.lineEdit_13.setText(&quot;&quot;)
        Note_E = &quot;&quot;         ;self.lineEdit_14.setText(&quot;&quot;)
        Note_F = &quot;&quot;         ;self.lineEdit_15.setText(&quot;&quot;)
        Note_G = &quot;&quot;         ;self.lineEdit_16.setText(&quot;&quot;)
        Note_H = &quot;&quot;         ;self.lineEdit_17.setText(&quot;&quot;)
        Note_I = &quot;&quot;         ;self.lineEdit_18.setText(&quot;&quot;)

    def on_pushButton03_clicked(self):    # Bouton Memo
        self.lineEdit_01.setText(DESIGNED_BY)
        self.lineEdit_02.setText(CREA_DATE)
        self.lineEdit_02h.setText(CREA_TIME)
        self.lineEdit_03.setText(CHECKED_BY)
        self.lineEdit_04.setText(CHEC_DATE)
        self.lineEdit_04h.setText(CHEC_TIME)
        self.lineEdit_05.setText(SIZE)
        self.lineEdit_06.setText(SCALE)
        self.lineEdit_07.setText(WEIGHT)
        self.lineEdit_08.setText(DRAWING_NUMBER)
        self.lineEdit_09.setText(SHEET)
        self.textEdit_01.setText(TITLE)
        self.textEdit_02.setText(DESCRIPTION)
        self.textEdit_02b.setText(COMPANY)
        self.lineEdit_20.setText(COPYRIGHT)
        self.lineEdit_10.setText(Note_A)
        self.lineEdit_11.setText(Note_B)
        self.lineEdit_12.setText(Note_C)
        self.lineEdit_13.setText(Note_D)
        self.lineEdit_14.setText(Note_E)
        self.lineEdit_15.setText(Note_F)
        self.lineEdit_16.setText(Note_G)
        self.lineEdit_17.setText(Note_H)
        self.lineEdit_18.setText(Note_I)

    def on_pushButton02_clicked(self):    # Bouton Quitter
        App.Console.PrintMessage(&quot;Terminé\r\n&quot;)
        self.window.hide()
#    def on_pushButton01_clicked(self):    # Bouton appel de Position
#        MainWindow.resize(210, 480)
#        executer()
#        MainWindow.resize(810, 480)
#______________________________________________________________________________________

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()

&lt;/syntaxhighlight&gt;

===Other=== &lt;!--T:10--&gt;
The fields have no length limit, check your cartouche.

&lt;!--T:11--&gt;
This program creates a drawing representing the regional projection symbol on your project, do not touch it is registered therefore hidden form invisible.

&lt;!--T:12--&gt;
If you want it to be cleared uncomment the commented lines and vice versa


&lt;syntaxhighlight&gt;

#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_EU&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_EU&quot;).Visibility = False
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
et

&lt;syntaxhighlight&gt;
#    App.getDocument(App.ActiveDocument.Name).removeObject(&quot;Symbol_US&quot;)
    FreeCADGui.getDocument(App.ActiveDocument.Name).getObject(&quot;Symbol_US&quot;).Visibility = False
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
(I had some times an error in execution when the symbol was erased)

&lt;!--T:15--&gt;
This module works with the drawing sheet included in FreeCAD this sheet is called '''Page''', do not change the name of this sheet!

===Revision=== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
ver 5 : 08/08/2014 PyQt4 and PySide


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro CenterFace</title>
    <ns>0</ns>
    <id>29462</id>
    <revision>
      <id>81828</id>
      <parentid>81827</parentid>
      <timestamp>2014-05-06T19:54:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jzkdibz449pf3i3xwl6vf050ipgmgqv</sha1>
      <text xml:space="preserve" bytes="3355">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro CenterFace|Description=This macro red trace (editable) the center face (mass) with 1 point and print the coordinates.|Author=Mario52}}

==Description==  &lt;!--T:2--&gt;
This macro red trace (editable) the center face (mass) with 1 point and print the coordinates.


&lt;!--T:3--&gt;
[[File:Macro_CenterFace_00.png|480px|CenterFace]]
{{clear}}

==Use==  &lt;!--T:4--&gt;
Select one face and launch the macro. 1 point to face are colored red (can be changed).

&lt;!--T:5--&gt;
To change the color of the dot change the lines 36, 37, 38

&lt;syntaxhighlight&gt;
    red   = 1.0  # 1 = 255
    green = 0.0  #
    blue  = 0.0  #
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
The center of the face (mass) surface and the XYZ coordinates of the face are displayed in the report view.

==Macro== &lt;!--T:7--&gt; 

'''Macro_CenterFace.FCMacro'''

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# 29/04/2014
# select a face launch and list the center coordinate XYZ of face
# To change the color of the dot change the lines 36, 37, 38
# red   = 1.0  # 1 = 255
# green = 0.0  #
# blue  = 0.0  #
# Macro_CenterFace
# Mario52

#OS: Windows Vista
#Platform: 32-bit
#Version: 0.14.3389
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1

import FreeCAD, FreeCADGui, Draft, Part

try:
    sel = FreeCADGui.Selection.getSelection()             # get the selection
    sh = sel[0].Shape                                     # seletion of the first element

    App.Console.PrintMessage(&quot;Label : &quot;+ str(sel[0].Label)+&quot;\n&quot;)     # extract the Label
    App.Console.PrintMessage(&quot;Name  : &quot;+ str(sel[0].Name) +&quot;\n&quot;)     # extract the Name
except:
    App.Console.PrintError( &quot;select a face&quot;+&quot;\n&quot;)


try:
    SubElement = FreeCADGui.Selection.getSelectionEx()# &quot;getSelectionEx&quot; Used for selecting subobjects
    element_ = SubElement[0].SubElementNames[0]       # seletion of the first element

#    print element_
#    print sh.Faces

    # LineColor
    red   = 1.0  # 1 = 255
    green = 0.0  #
    blue  = 0.0  #

    for i in range(len(sh.Faces)):                    # list and extract the data
        App.Console.PrintMessage( &quot;Center Face &quot;+str(i)+&quot; &quot;+str(sh.Faces[i].CenterOfMass)+&quot;\n&quot;) # Vector center mass to face
#        print &quot;X : &quot;,sh.Faces[i].CenterOfMass.x                                                # Coord. X center mass to face
#        print &quot;Y : &quot;,sh.Faces[i].CenterOfMass.y                                                # Coord. Y center mass to face
#        print &quot;Z : &quot;,sh.Faces[i].CenterOfMass.z                                                # Coord. Z center mass to face
        Draft.makePoint(sh.Faces[i].CenterOfMass.x,sh.Faces[i].CenterOfMass.y,sh.Faces[i].CenterOfMass.z) # create a point
        FreeCADGui.activeDocument().activeObject().PointColor = (red, green, blue)

        App.Console.PrintMessage( &quot;       Surface   : &quot;+str(sel[0].Shape.Faces[i-1].Area)+&quot;\n&quot;)
        fco = 0
        for f0 in sel[0].Shape.Faces[i].Vertexes:      # Vertexes faces
            fco += 1
            App.Console.PrintMessage(&quot;       Vertexe X&quot;+str(fco)+&quot;: &quot;+str(f0.Point.x)+&quot; Y&quot;+str(fco)+&quot;: &quot;+str(f0.Point.y)+&quot; Z&quot;+str(fco)+&quot;: &quot;+str(f0.Point.z)+&quot;\n&quot;)

except:
    App.Console.PrintError( &quot;select a face *&quot;+&quot;\n&quot;)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro CloneConvert</title>
    <ns>0</ns>
    <id>28158</id>
    <revision>
      <id>104257</id>
      <parentid>102658</parentid>
      <timestamp>2014-08-11T09:28:05Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>replace &quot;AttributeError&quot; to &quot;Exception&quot;</comment>
      <sha1>4vqg2hmb152at4xowye33gsyds639t3</sha1>
      <text xml:space="preserve" bytes="32454">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro CloneConvert|Description=Creates a clone of the object and the converted in the chosen position and size (inch, mm, m, µm...).|Author=mario52}}

==Description== &lt;!--T:2--&gt;
Creates a clone or copy of the object and the converted in the chosen position and size (inch, mm, m, µm...) or free. The base object is recognized in mm (FreeCAd base)

==Uses== &lt;!--T:3--&gt;
Run the macro, the XYZ settings, choose &quot;Clone&quot; or &quot;Copy&quot; a unit or one value of choice select your object, and click {{KEY|Ok}} button.

&lt;!--T:9--&gt;
If no value is entered a copy or clone will be created without modification. If no object is selected the {{KEY|Ok}} button will be colored in red.

&lt;!--T:10--&gt;
The value of the '''BoundingBox''', '''Volume''' and '''Surface''' is diplayed in the Report view, in the case of '''Copy''' multiple object, the display will show BoundingBox 0.0.


&lt;!--T:4--&gt;
The base is the mm example with a '''1 mm''' cube of side :

&lt;!--T:5--&gt;
Select in the comboBox '''inch''', '''1 inch = 25.4 mm''' , the fields '''&quot;Scale free&quot;''' automatically adjusts to 25.4 (the values ​​in '''&quot;Scale-free&quot;''' can be changed separately). Click {{KEY|Ok}} button, the clone created will have '''25,4 mm x 25,4 mm x 25,4 mm''' 

&lt;!--T:11--&gt;
'''150%''' = '''1,50''' in the '''&quot;Scale free&quot;''' fields 

&lt;!--T:12--&gt;
'''104%''' = '''1,04''' in the '''&quot;Scale free&quot;''' fields 

&lt;!--T:13--&gt;
Inverse operation :

&lt;!--T:14--&gt;
If you want to reduce an object ex: a cube 25.4 mm (1 inch) in cube 1 mm sides, use the following formula, '''1 / 25.4 = 0.0393700''' and enter the value '''0,0393700''' (with comma) in the Scale field XY and Z.

&lt;!--T:15--&gt;
In a cube of 5 mm, made​​ '''5 / 25.4 = 0.1968503''' and enter the value '''0,1968503''' (with comma) in the Scale field XY and Z.

&lt;!--T:16--&gt;
'''50%''' = '''0,50''' in the '''&quot;Scale free&quot;''' fields 

&lt;!--T:17--&gt;
''' 4%''' = '''0,04''' in the '''&quot;Scale free&quot;''' fields 

&lt;!--T:6--&gt;
&lt;br /&gt;
Predefined units are :

&lt;!--T:7--&gt;
km, hm, dam, m, dm, cm, '''mm''', µm, nm, inch, link, foot, yard, perch, chain, furlong, mile, league, nautique.
&lt;br /&gt;&lt;br /&gt;
[[File:Macro CloneConvert_01.png|220px|left|CloneConvert]]
* '''Mode'''
* '''Clone :''' One clone of the objet(s) is create
* '''Copy  :''' One copy of the objet(s) is create
*
* '''Coordinate X :''' Move the copy to the Coordinate X selected
* '''Coordinate Y :''' Move the copy to the Coordinate Y selected
* '''Coordinate Z :''' Move the copy to the Coordinate Z selected
*
* '''Scale predefined'''
* '''Scale predefined :''' predefined scales in units, km, hm, dam, m, dm, cm, '''mm''', µm, nm, inch, link, foot, yard, perch, chain, furlong, mile, league, nautique&lt;br /&gt;or choose a free value in the Scale free field.
*
* '''Scale free'''
* '''Scale X :''' free scale , if the value is negative '''( -10)''' , the object is scaled '''x 10''' and will be reversed in the X axis, to reduce the shape give a decimal value '''(0,5)'''
* '''{{KEY|...}} :''' This button align the YZ values on the value of X to have the same values ​​XYZ (or manually)
* '''Scale Y :''' free scale , if the value is negative '''( -10)''' , the object is scaled '''x 10''' and will be reversed in the Y axis, to reduce the shape give a decimal value '''(0,5)'''
* '''Scale Z :''' free scale , if the value is negative '''( -10)''' , the object is scaled '''x 10''' and will be reversed in the Z axis, to reduce the shape give a decimal value '''(0,5)'''
* 
* '''{{KEY|Ok}} :''' the OK button validates and launches the command, if no object is selected the {{KEY|Ok}} button will be colored in red
* '''{{KEY|Reset}} :''' the Reset button puts all the values to zero
* '''{{KEY|Quit}} :''' the Quit button exit the macro
{{clear}}

==Script== &lt;!--T:8--&gt;
Macro_CloneConvert.FCMacro

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# CloneConvert.py
# Cree un clone ou une copie de l'objet ou des objets selectionne(s) et le met e l'echelle de la grandeur choisie
# utilisation : lancer CloneConvert selectionnez un objet choisissez la grandeur et cliquez sur OK
# 
# Creates a clone of one copy the selected object and updates the selected size range
# use: start CloneConvert select an object choose the size and click OK
#
#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1
#
# ver 0.3 31/07/2014 PyQt4 + PySide

__title__ = &quot;CloneConvert&quot;
__author__ = &quot;mario52&quot;

try:
    import PyQt4                     # PyQt4
    from PyQt4 import QtCore, QtGui  # PyQt4
except Exception:
    import PySide                    # PySide
    from PySide import QtCore, QtGui # PySide
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base
from decimal import *
from Draft import *
from FreeCAD import Vector, Rotation, Placement, Console

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

global surface     ; surface     = 0.0
global volume_     ; volume_     = 0.0
global boundBox_   ; boundBox_   = 0.0
global boundBoxLX  ; boundBoxLX  = 0.0
global boundBoxLY  ; boundBoxLY  = 0.0
global boundBoxLZ  ; boundBoxLZ  = 0.0
global boundBox_S  ; boundBox_S  = &quot;&quot;
global uniteM_X    ; uniteM_X    = 1.0
global uniteM_Y    ; uniteM_Y    = 1.0
global uniteM_Z    ; uniteM_Z    = 1.0
global uniteM      ; uniteM      = 1.0
global uniteMs     ; uniteMs     = &quot;mm&quot;   # default mm
global placement_X ; placement_X = 0.0
global placement_Y ; placement_Y = 0.0
global placement_Z ; placement_Z = 0.0
global oripl_X     ; oripl_X     = 0.0
global oripl_Y     ; oripl_Y     = 0.0
global oripl_Z     ; oripl_Z     = 0.0
global sel         ; sel         = &quot;&quot;
global cloneCopy   ; cloneCopy   = 1

class Ui_MainWindow(object):

    def __init__(self, MainWindow):
#        path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)

        global uniteMs

        self.window = MainWindow
        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(230, 379)
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))
        self.label = QtGui.QLabel(self.centralWidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 191, 16))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName(_fromUtf8(&quot;label&quot;))

        self.groupBox = QtGui.QGroupBox(self.centralWidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 30, 211, 141))
        self.groupBox.setObjectName(_fromUtf8(&quot;groupBox&quot;))

        self.doubleSpinBox = QtGui.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox.setGeometry(QtCore.QRect(100, 50, 101, 22))
        self.doubleSpinBox.setDecimals(7)
        self.doubleSpinBox.setMinimum(-10000000.0)
        self.doubleSpinBox.setMaximum(10000000.0)
        self.doubleSpinBox.setSingleStep(1.0)
        self.doubleSpinBox.setProperty(&quot;value&quot;, 0.0)
        self.doubleSpinBox.setObjectName(_fromUtf8(&quot;doubleSpinBox&quot;))
        self.doubleSpinBox.valueChanged.connect(self.on_doubleSpinBox_valueChanged) #connection doubleSpinBox

        self.label_2 = QtGui.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 91, 16))
        self.label_2.setObjectName(_fromUtf8(&quot;label_2&quot;))

        self.label_3 = QtGui.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(10, 80, 91, 16))
        self.label_3.setObjectName(_fromUtf8(&quot;label_3&quot;))

        self.doubleSpinBox_2 = QtGui.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(100, 80, 101, 22))
        self.doubleSpinBox_2.setDecimals(7)
        self.doubleSpinBox_2.setMinimum(-10000000.0)
        self.doubleSpinBox_2.setMaximum(10000000.0)
        self.doubleSpinBox_2.setSingleStep(1.0)
        self.doubleSpinBox_2.setProperty(&quot;value&quot;, 0.0)
        self.doubleSpinBox_2.setObjectName(_fromUtf8(&quot;doubleSpinBox_2&quot;))
        self.doubleSpinBox_2.valueChanged.connect(self.on_doubleSpinBox_2_valueChanged) #connection doubleSpinBox_2

        self.doubleSpinBox_3 = QtGui.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_3.setGeometry(QtCore.QRect(100, 110, 101, 22))
        self.doubleSpinBox_3.setDecimals(7)
        self.doubleSpinBox_3.setMinimum(-10000000.0)
        self.doubleSpinBox_3.setMaximum(10000000.0)
        self.doubleSpinBox_3.setSingleStep(1.0)
        self.doubleSpinBox_3.setProperty(&quot;value&quot;, 0.0)
        self.doubleSpinBox_3.setObjectName(_fromUtf8(&quot;doubleSpinBox_3&quot;))
        self.doubleSpinBox_3.valueChanged.connect(self.on_doubleSpinBox_3_valueChanged) #connection doubleSpinBox_3

        self.label_4 = QtGui.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(10, 110, 91, 16))
        self.label_4.setObjectName(_fromUtf8(&quot;label_4&quot;))

        self.radioButton = QtGui.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(10, 20, 71, 20))
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName(_fromUtf8(&quot;radioButton&quot;))
        self.radioButton.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create a clone of the object(s)&quot;, None))
        self.radioButton.clicked.connect(self.on_radioButton_clicked)     #connection radioButton mode clone

        self.radioButton_2 = QtGui.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(100, 20, 71, 20))
        self.radioButton_2.setObjectName(_fromUtf8(&quot;radioButton_2&quot;))
        self.radioButton_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Create a copy of the object(s)&quot;, None))
        self.radioButton_2.clicked.connect(self.on_radioButton_2_clicked) #connection radioButton_2 mode copy

        self.groupBox_2 = QtGui.QGroupBox(self.centralWidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 170, 211, 51))
        self.groupBox_2.setObjectName(_fromUtf8(&quot;groupBox_2&quot;))

        self.comboBox = QtGui.QComboBox(self.groupBox_2)
        self.comboBox.setGeometry(QtCore.QRect(10, 20, 191, 22))
        self.comboBox.setMinimumContentsLength(0)
        self.comboBox.setObjectName(_fromUtf8(&quot;comboBox&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.addItem(_fromUtf8(&quot;&quot;))
        self.comboBox.setToolTip(_translate(&quot;MainWindow&quot;,u&quot;Select unit. . .&quot;, None))
        QtCore.QObject.connect(self.comboBox, QtCore.SIGNAL(&quot;currentIndexChanged(QString)&quot;), self.SIGNAL_comboBox_Changed)

        self.groupBox_3 = QtGui.QGroupBox(self.centralWidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 220, 211, 111))
        self.groupBox_3.setObjectName(_fromUtf8(&quot;groupBox_3&quot;))

        self.doubleSpinBox_4 = QtGui.QDoubleSpinBox(self.groupBox_3)
        self.doubleSpinBox_4.setGeometry(QtCore.QRect(100, 20, 101, 22))
        self.doubleSpinBox_4.setDecimals(7)
        self.doubleSpinBox_4.setMinimum(-1000000)
        self.doubleSpinBox_4.setMaximum(1000000.0)
        self.doubleSpinBox_4.setSingleStep(1.0)
        self.doubleSpinBox_4.setProperty(&quot;value&quot;, 1.0)
        self.doubleSpinBox_4.setObjectName(_fromUtf8(&quot;doubleSpinBox_4&quot;))
        self.doubleSpinBox_4.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Scale free X multiplied by ...&quot;, None))
        self.doubleSpinBox_4.valueChanged.connect(self.on_doubleSpinBox_4_valueChanged) #connection doubleSpinBox_4

        self.doubleSpinBox_5 = QtGui.QDoubleSpinBox(self.groupBox_3)
        self.doubleSpinBox_5.setGeometry(QtCore.QRect(100, 50, 101, 22))
        self.doubleSpinBox_5.setDecimals(7)
        self.doubleSpinBox_5.setMinimum(-1000000)
        self.doubleSpinBox_5.setMaximum(1000000.0)
        self.doubleSpinBox_5.setSingleStep(1.0)
        self.doubleSpinBox_5.setProperty(&quot;value&quot;, 1.0)
        self.doubleSpinBox_5.setObjectName(_fromUtf8(&quot;doubleSpinBox_5&quot;))
        self.doubleSpinBox_5.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Scale free Y multiplied by ...&quot;, None))
        self.doubleSpinBox_5.valueChanged.connect(self.on_doubleSpinBox_5_valueChanged) #connection doubleSpinBox_5

        self.doubleSpinBox_6 = QtGui.QDoubleSpinBox(self.groupBox_3)
        self.doubleSpinBox_6.setGeometry(QtCore.QRect(100, 80, 101, 22))
        self.doubleSpinBox_6.setDecimals(7)
        self.doubleSpinBox_6.setMinimum(-1000000)
        self.doubleSpinBox_6.setMaximum(1000000.0)
        self.doubleSpinBox_6.setSingleStep(1.0)
        self.doubleSpinBox_6.setProperty(&quot;value&quot;, 1.0)
        self.doubleSpinBox_6.setObjectName(_fromUtf8(&quot;doubleSpinBox_6&quot;))
        self.doubleSpinBox_6.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Scale free Z multiplied by ...&quot;, None))
        self.doubleSpinBox_6.valueChanged.connect(self.on_doubleSpinBox_6_valueChanged) #connection doubleSpinBox_6

        self.label_5 = QtGui.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(10, 20, 53, 16))
        self.label_5.setObjectName(_fromUtf8(&quot;label_5&quot;))

        self.label_6 = QtGui.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(10, 50, 53, 16))
        self.label_6.setObjectName(_fromUtf8(&quot;label_6&quot;))

        self.label_7 = QtGui.QLabel(self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(10, 80, 53, 16))
        self.label_7.setObjectName(_fromUtf8(&quot;label_7&quot;))

        self.pushButton_3 = QtGui.QPushButton(self.groupBox_3)
        self.pushButton_3.setGeometry(QtCore.QRect(70, 20, 21, 21))
        self.pushButton_3.setToolTip(_fromUtf8(&quot;Align the Scale YZ to X&quot;))
        self.pushButton_3.setObjectName(_fromUtf8(&quot;pushButton_3&quot;))
        self.pushButton_3.clicked.connect(self.on_pushButton03_clicked) #connection pushButton03 &quot;...&quot; align YZ to X

        self.pushButton_2 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_2.setGeometry(QtCore.QRect(152, 340, 71, 28))
        self.pushButton_2.setObjectName(_fromUtf8(&quot;pushButton_2&quot;))
        self.pushButton_2.clicked.connect(self.on_pushButton02_clicked) #connection pushButton02 &quot;Quitter&quot;

        self.pushButton_1 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_1.setGeometry(QtCore.QRect(10, 340, 71, 28))
        self.pushButton_1.setObjectName(_fromUtf8(&quot;pushButton_1&quot;))
        self.pushButton_1.setStyleSheet(&quot;background-color: Base&quot;)
        self.pushButton_1.clicked.connect(self.on_pushButton01_clicked) #connection pushButton01 &quot;OK&quot;

        self.pushButton = QtGui.QPushButton(self.centralWidget)
        self.pushButton.setGeometry(QtCore.QRect(90, 340, 51, 28))
        self.pushButton.setObjectName(_fromUtf8(&quot;pushButton&quot;))
        self.pushButton.clicked.connect(self.on_pushButton00_clicked)   #connection pushButton00 &quot;Reset&quot;

        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;CloneConvert&quot;, None))
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)  # cette fonction met la fenetre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)  # cette fonction met la fenetre en avant
        self.label.setText(_translate(&quot;MainWindow&quot;, &quot;Object converter&quot;, None))
        self.groupBox.setTitle(_translate(&quot;MainWindow&quot;, &quot;Mode&quot;, None))
        self.radioButton.setText(_translate(&quot;MainWindow&quot;, &quot;Clone&quot;, None))
        self.radioButton_2.setText(_translate(&quot;MainWindow&quot;, &quot;Copy&quot;, None))
        self.doubleSpinBox.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Place the new object to the X coordinate &quot;, None))
        self.label_2.setText(_translate(&quot;MainWindow&quot;, &quot;Coordinate X&quot;, None))
        self.label_3.setText(_translate(&quot;MainWindow&quot;, &quot;Coordinate Y&quot;, None))
        self.doubleSpinBox_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Place the new object to the Y coordinate&quot;, None))
        self.doubleSpinBox_3.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Place the new object to the Z coordinate&quot;, None))
        self.label_4.setText(_translate(&quot;MainWindow&quot;, &quot;Coordinate Z&quot;, None))
        self.groupBox_2.setTitle(_translate(&quot;MainWindow&quot;, &quot;Scale predefined&quot;, None))
        self.comboBox.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Convert your object to . . .&quot;, None))
        self.comboBox.setCurrentIndex(6)
        self.comboBox.setItemText(0, _translate(&quot;MainWindow&quot;, &quot;km&quot;, None))         #km #        = 1000000
        self.comboBox.setItemText(1, _translate(&quot;MainWindow&quot;, &quot;hm&quot;, None))         #hm #        = 100000
        self.comboBox.setItemText(2, _translate(&quot;MainWindow&quot;, &quot;dam&quot;, None))        #dam#        = 10000
        self.comboBox.setItemText(3, _translate(&quot;MainWindow&quot;, &quot;m&quot;, None))          #m  #        = 1000
        self.comboBox.setItemText(4, _translate(&quot;MainWindow&quot;, &quot;dm&quot;, None))         #dm #        = 100
        self.comboBox.setItemText(5, _translate(&quot;MainWindow&quot;, &quot;cm&quot;, None))         #cm #        = 10
        self.comboBox.setItemText(6, _translate(&quot;MainWindow&quot;, &quot;mm&quot;, None))         #mm #        = 1        #####
        self.comboBox.setItemText(7, _translate(&quot;MainWindow&quot;, &quot;µm&quot;, None))         #µm # micro  = 0.001
        self.comboBox.setItemText(8, _translate(&quot;MainWindow&quot;, &quot;nm&quot;, None))         #nm # nano   = 0.000001
        self.comboBox.setItemText(9, _translate(&quot;MainWindow&quot;, &quot;inch&quot;, None))       #in # inch  pouce    = 25.400
        self.comboBox.setItemText(10, _translate(&quot;MainWindow&quot;, &quot;link&quot;, None))      #lk # link  chainon  = 201.168
        self.comboBox.setItemText(11, _translate(&quot;MainWindow&quot;, &quot;foot&quot;, None))      #ft # foot  pied     = 304.800
        self.comboBox.setItemText(12, _translate(&quot;MainWindow&quot;, &quot;yard&quot;, None))      #yd # yard  verge    = 914.400
        self.comboBox.setItemText(13, _translate(&quot;MainWindow&quot;, &quot;perch&quot;, None))     #rd # rod ou perch   perche   = 5029.200
        self.comboBox.setItemText(14, _translate(&quot;MainWindow&quot;, &quot;chain&quot;, None))     #ch # chain chaine   = 20116.800
        self.comboBox.setItemText(15, _translate(&quot;MainWindow&quot;, &quot;furlong&quot;, None))   #fur# furlong        = 201168
        self.comboBox.setItemText(16, _translate(&quot;MainWindow&quot;, &quot;mile&quot;, None))      #mi # mile           = 1609344
        self.comboBox.setItemText(17, _translate(&quot;MainWindow&quot;, &quot;league&quot;, None))    #lea# league lieue   = 4828032
        self.comboBox.setItemText(18, _translate(&quot;MainWindow&quot;, &quot;nautique&quot;, None))  #nmi# mile nautique  = 1852000
        self.groupBox_3.setTitle(_translate(&quot;MainWindow&quot;, &quot;Scale free&quot;, None))
        self.label_5.setText(_translate(&quot;MainWindow&quot;, &quot;Scale X&quot;, None))
        self.label_6.setText(_translate(&quot;MainWindow&quot;, &quot;Scale Y&quot;, None))
        self.label_7.setText(_translate(&quot;MainWindow&quot;, &quot;Scale Z&quot;, None))
        self.pushButton_3.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Align the YZ scale values to X scale value &quot;, None))
        self.pushButton_3.setText(_translate(&quot;MainWindow&quot;, &quot;...&quot;, None))
        self.pushButton_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Quit the macro&quot;, None))
        self.pushButton_2.setText(_translate(&quot;MainWindow&quot;, &quot;Quit&quot;, None))
        self.pushButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Ok for Convert or copy&quot;, None))
        self.pushButton_1.setText(_translate(&quot;MainWindow&quot;, &quot;Ok&quot;, None))
        self.pushButton.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Reset&quot;, None))
        self.pushButton.setText(_translate(&quot;MainWindow&quot;, &quot;Reset&quot;, None))

    def SIGNAL_comboBox_Changed(self,text):
        global uniteM_X
        global uniteM_Y
        global uniteM_Z
        global uniteM
        global uniteMs

        try:
            text = unicode(text, 'ISO-8859-1').encode('UTF-8')  # PyQt4
        except Exception:
            text = text.encode('utf-8')                         # PySide

        if text == &quot;km&quot;:        #        = 1000000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1000000.0
            uniteMs= &quot;km&quot;
        elif text == &quot;hm&quot;:      #        = 100000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 100000.0
            uniteMs= &quot;hm&quot;
        elif text == &quot;dam&quot;:     #        = 10000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 10000.0
            uniteMs= &quot;dam&quot;
        elif text == &quot;m&quot;:       #        = 1000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1000.0
            uniteMs= &quot;m&quot;
        elif text == &quot;dm&quot;:      #        = 100
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 100.0
            uniteMs= &quot;dm&quot;
        elif text == &quot;cm&quot;:      #        = 10
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 10.0
            uniteMs= &quot;cm&quot;
        elif text == &quot;mm&quot;:      #        = 1  ###############################
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1.0
            uniteMs= &quot;mm&quot;
        elif text == &quot;µm&quot;:      #        = 1000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1.0/1000.0
            uniteMs= u&quot;µm&quot;
        elif text == &quot;nm&quot;:      #        = 1000000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1.0/1000000.0
            uniteMs= u&quot;nm&quot;
        elif text == &quot;inch&quot;:    # inch   = 25.400
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 25.400
            uniteMs= &quot;in&quot;
        elif text == &quot;link&quot;:    # link   = 201.168
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 201.168
            uniteMs= &quot;lk&quot;
        elif text == &quot;foot&quot;:    # foot   = 304.800
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 304.800
            uniteMs= &quot;ft&quot;
        elif text == &quot;yard&quot;:    # yard   = 914.400
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 914.400
            uniteMs= &quot;yd&quot;
        elif text == &quot;perch&quot;:   #rd # rod   perche    = 5029.200
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 5029.200
            uniteMs= &quot;rd&quot;
        elif text == &quot;chain&quot;:   # chain  = 20116.800
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 20116.800
            uniteMs= &quot;ch&quot;
        elif text == &quot;furlong&quot;: # furlong= 201168
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 201168
            uniteMs= &quot;fur&quot;
        elif text == &quot;mile&quot;:     # mile   = 1609344
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1609344
            uniteMs= &quot;mi&quot;
        elif text == &quot;league&quot;:   # league = 4828032
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 4828032
            uniteMs= &quot;lea&quot;
        elif text == &quot;nautique&quot;: # nautique = 1852000
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1852000
            uniteMs= &quot;nmi&quot;
        else:                    # mm = 1
            uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1.0 
            uniteMs= &quot;mm&quot;
            
        self.doubleSpinBox_4.setProperty(&quot;value&quot;, uniteM_X)
        self.doubleSpinBox_5.setProperty(&quot;value&quot;, uniteM_Y)
        self.doubleSpinBox_6.setProperty(&quot;value&quot;, uniteM_Z)

    def on_radioButton_clicked(self):                    # if checked then mode clone
        global cloneCopy
        cloneCopy = 1

    def on_radioButton_2_clicked(self):                  # if checked then mode copy
        global cloneCopy
        cloneCopy = 0

    def on_doubleSpinBox_valueChanged(self,value):       # doubleSpinbox X
        global placement_X
        placement_X = value

    def on_doubleSpinBox_2_valueChanged(self,value):     # doubleSpinbox Y 
        global placement_Y
        placement_Y = value

    def on_doubleSpinBox_3_valueChanged(self,value):     #  doubleSpinbox Z
        global placement_Z
        placement_Z = value

    def on_doubleSpinBox_4_valueChanged(self,value):     # doubleSpinbox free X
        global uniteM_X
        uniteM_X = value
        if uniteM_X == 0:
            uniteM_X = 1

    def on_doubleSpinBox_5_valueChanged(self,value):     # doubleSpinbox free Y 
        global uniteM_Y
        uniteM_Y = value
        if uniteM_Y == 0:
            uniteM_Y = 1

    def on_doubleSpinBox_6_valueChanged(self,value):     #  doubleSpinbox free Z
        global uniteM_Z
        uniteM_Z = value
        if uniteM_Z == 0:
            uniteM_Z = 1

    def on_pushButton03_clicked(self):                   # Bouton ... (align)
        global uniteM_X
        global uniteM_Y
        global uniteM_Z
        global uniteM
        global uniteMs
        uniteM_Y = uniteM_Z = uniteM_X
        self.doubleSpinBox_5.setProperty(&quot;value&quot;, uniteM_X)
        self.doubleSpinBox_6.setProperty(&quot;value&quot;, uniteM_X)

    def on_pushButton00_clicked(self):                   # Bouton Reset
        global uniteM_X
        global uniteM_Y
        global uniteM_Z
        global uniteM
        global uniteMs
        global placement_X
        global placement_Y
        global placement_Z
        global oripl_X
        global oripl_Y
        global oripl_Z
        global cloneCopy

        oripl_X = oripl_Y = oripl_Z = 0.0

        self.pushButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Ok for Convert or copy&quot;, None))
        self.pushButton_1.setStyleSheet(&quot;background-color: Base&quot;)

        self.radioButton.setChecked(True)
        cloneCopy = 1

        self.comboBox.setCurrentIndex(6)
        self.doubleSpinBox.setProperty(&quot;value&quot;,   0.0)
        self.doubleSpinBox_2.setProperty(&quot;value&quot;, 0.0)
        self.doubleSpinBox_3.setProperty(&quot;value&quot;, 0.0)

        placement_X = placement_Y = placement_Z = 0.0

        self.doubleSpinBox_4.setProperty(&quot;value&quot;, 1.0)
        self.doubleSpinBox_5.setProperty(&quot;value&quot;, 1.0)
        self.doubleSpinBox_6.setProperty(&quot;value&quot;, 1.0)

        uniteM = uniteM_X = uniteM_Y = uniteM_Z = 1.0
        uniteMs= &quot;mm&quot;
        uniteM = 1

    def on_pushButton01_clicked(self):                   # Bouton OK
        global surface
        global volume_
        global boundBox
        global boundBoxLX
        global boundBoxLY
        global boundBoxLZ
        global boundBox_S
        global uniteM_X
        global uniteM_Y
        global uniteM_Z
        global uniteM
        global uniteMs
        global placement_X
        global placement_Y
        global placement_Z
        global oripl_X
        global oripl_Y
        global oripl_Z
        global sel

        sel = FreeCADGui.Selection.getSelection()   

        if len(sel) != 0:

            self.pushButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Ok for Convert or copy&quot;, None))
            self.pushButton_1.setStyleSheet(&quot;background-color: Base&quot;)

             # boundinbox (dimensions hors tout)
            try:
                boundBox_ = sel[0].Shape.BoundBox # pour 1 seul objet, (le premier)
                boundBoxLX = boundBox_.XLength
                boundBoxLY = boundBox_.YLength
                boundBoxLZ = boundBox_.ZLength
            except:
                boundBox_  = 0.0
                boundBoxLX = 0.0
                boundBoxLY = 0.0
                boundBoxLZ = 0.0
                boundBox_S = &quot;&quot;

             # volume de tous les objets
            volume_ = 0.0
            try:
                for i in range(len(sel)):
                    volume_ += sel[i].Shape.Volume
            except:
                volume_ = 0.0

             # surface de tous les objets
            surface = 0.0
            try:
                for i in range(len(sel)):
                    surface += sel[i].Shape.Area
            except:
                surface = 0.0

            boundBox_S = &quot;[X: &quot;+str(boundBoxLX)+&quot; mm] x [Y: &quot;+str(boundBoxLY)+&quot; mm] x [Z:&quot;+str(boundBoxLZ)+&quot; mm]&quot;
            App.Console.PrintMessage(&quot;Original boundBox : &quot;+boundBox_S+&quot;\r\n&quot;)
            App.Console.PrintMessage(&quot;Original volume_  : &quot;+str(volume_)+&quot; mm3 (&quot;+str(len(sel))+&quot; element(s))&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(&quot;Original surface  : &quot;+str(surface)+&quot; mm2 (&quot;+str(len(sel))+&quot; element(s))&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(&quot;- - - - - - - - - -&quot;+&quot;\r\n&quot;)

            oripl_X = sel[0].Placement.Base[0]
            oripl_Y = sel[0].Placement.Base[1]
            oripl_Z = sel[0].Placement.Base[2]

            obj = &quot;&quot;
            if cloneCopy == 1:       # clone ok
                obj=Draft.clone(sel)
                mess = &quot;Clone&quot;
                ###
                if len(sel) &gt; 1:     # one object
                    obj.Placement=App.Placement(App.Vector(placement_X,placement_Y,placement_Z), App.Rotation(App.Vector(0,0,1),0), App.Vector(0,0,0))
                else:                # many objects
                    obj.Placement=App.Placement(App.Vector(oripl_X + placement_X,oripl_Y + placement_Y,oripl_Z + placement_Z), App.Rotation(sel[0].Placement.Rotation), App.Vector(0,0,0))
                obj.Scale = (uniteM_X, uniteM_Y, uniteM_Z)
                ###
            else:                     # copy ok
                mess = &quot;Copy &quot;
                obj = Draft.scale(sel,delta=App.Vector(uniteM_X, uniteM_Y, uniteM_Z),center=App.Vector(0,0,0),copy=True,legacy=True)
                mydistance = FreeCAD.Vector(oripl_X + placement_X,oripl_Y + placement_Y,oripl_Z + placement_Z)
                move(obj,mydistance)

            FreeCAD.ActiveDocument.recompute()
            ####

             # boundinbox (dimensions hors tout)
            try:
                boundBox_ = obj.Shape.BoundBox
                boundBoxLX = boundBox_.XLength
                boundBoxLY = boundBox_.YLength
                boundBoxLZ = boundBox_.ZLength
            except:
                boundBox_  = 0.0
                boundBoxLX = 0.0
                boundBoxLY = 0.0
                boundBoxLZ = 0.0

             # volume
            volume_ = 0.0
            try:
                volume_ = obj.Shape.Volume
            except:
                for i in range(len(obj)):
                    volume_ += obj[i].Shape.Volume

             # surface
            surface = 0.0
            try:
                surface = obj.Shape.Area
            except:
                for i in range(len(obj)):
                    surface += obj[i].Shape.Area

            App.Console.PrintMessage(&quot;Convert mm in ' &quot;+uniteMs+&quot; ' (1 &quot;+uniteMs+&quot; = &quot;+str(uniteM)+&quot; mm)&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(mess + &quot; boundBox_X  : &quot;+str(boundBoxLX)+&quot; mm&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(mess + &quot; boundBox_Y  : &quot;+str(boundBoxLY)+&quot; mm&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(mess + &quot; boundBox_Z  : &quot;+str(boundBoxLZ)+&quot; mm&quot;+&quot;\r\n&quot;)
            App.Console.PrintMessage(mess + &quot; volume      : &quot;+str(volume_)+&quot; mm3 (&quot;+str(len(sel))+&quot; element(s))&quot;+&quot;\r\n&quot;)#
            App.Console.PrintMessage(mess + &quot; surface     : &quot;+str(surface)+&quot; mm2 (&quot;+str(len(sel))+&quot; element(s))&quot;+&quot;\r\n&quot;)#
            App.Console.PrintMessage(&quot;___________________&quot;+&quot;\r\n&quot;)
            self.pushButton_1.setStyleSheet(&quot;background-color: green&quot;)

        else:
            self.pushButton_1.setStyleSheet(&quot;background-color: red&quot;)#red
            self.pushButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Not object selected for Convert or copy&quot;, None))
            FreeCAD.Console.PrintError(&quot;Select an object&quot;+&quot;\r\n&quot;)   #App.Console.PrintMessage
            sel = &quot;&quot;

    def on_pushButton02_clicked(self):                   # Bouton Quitter
        App.Console.PrintMessage(&quot;End CloneConvert\r\n&quot;)
        self.window.hide()

sel = FreeCADGui.Selection.getSelection()   

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()


&lt;/syntaxhighlight&gt;

==Revision==
11/08/2014 replace &quot;AttributeError&quot; to &quot;Exception&quot;

02/07/2014 ver. 0.3 = modified to operate PyQt4 and PySide

09/05/2014 ver. 0.2 = adding function &quot;Copy&quot;

</text>
    </revision>
  </page>
  <page>
    <title>Macro Corner shapes wizard</title>
    <ns>0</ns>
    <id>1405</id>
    <revision>
      <id>82533</id>
      <parentid>81728</parentid>
      <timestamp>2014-05-12T21:26:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>m83rb9nxwpwxjasgf214ue7p3vmg8vc</sha1>
      <text xml:space="preserve" bytes="5412">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Corner shapes wizard|Description=This macro is a complete application, it pops up a dialog asking for the dimensions of your corner piece, then creates the object in the document and creates a page view with top, front and lateral views of the piece.|Author=Nicotuf}}

&lt;!--T:2--&gt;
This macro is a complete application, it pops up a dialog asking for the dimensions of your corner piece, then creates the object in the document and creates a page view with top, front and lateral views of the piece.&lt;br /&gt;
There is a [[Macro_Corner_shapes_wizard/update|modified version]]  with changes GUI.

&lt;!--T:3--&gt;
[[File:CornerShape1.png]]



&lt;syntaxhighlight&gt;

# -*- coding:utf-8 -*-
 
#####################################
# Importation de fonctions externes :
 
#from os import *
import FreeCAD, FreeCADGui, Part, Draft, math, MeshPart, Mesh, Drawing
from PyQt4 import QtGui,QtCore
from FreeCAD import Base
App=FreeCAD
Gui=FreeCADGui
 
##################################
# Défnition Class :
 
class Corniere:
   def __init__(self, obj):
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;L1&quot;,&quot;Corniere&quot;,&quot;Largeur 1&quot;).L1=20.0
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;L2&quot;,&quot;Corniere&quot;,&quot;Largeur 2&quot;).L2=20.0
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;e1&quot;,&quot;Corniere&quot;,&quot;Epaisseur 1&quot;).e1=2.0
      #obj.addProperty(&quot;App::PropertyLength&quot;,&quot;e2&quot;,&quot;Corniere&quot;,&quot;Epaisseur 2&quot;).e2=2.0
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Longueur&quot;,&quot;Corniere&quot;,&quot;Longueur&quot;).Longueur=200.0
      obj.Proxy = self
 
   def execute(self, fp):
      P1=Base.Vector(fp.e1,fp.e1,0)
      S1=Part.makeBox(fp.L1,fp.L2,fp.Longueur)
      S2=Part.makeBox(fp.L1-fp.e1,fp.L2-fp.e1,fp.Longueur,P1)
      fp.Shape=S1.cut(S2)   
 
##################################
# Défnition locale de fonctions :
 
 
def proceed():
   QtGui.qApp.setOverrideCursor(QtCore.Qt.WaitCursor)
 
   if FreeCAD.ActiveDocument==None:
      FreeCAD.newDocument(&quot;Corniere&quot;)
 
   oldDocumentObjects=App.ActiveDocument.Objects
 
   try:
      QL1 = float(l1.text())   
      QL2 = float(l2.text())
      Qe = float(l3.text())
      QLongueur = float(l4.text())
   except:
      FreeCAD.Console.PrintError(&quot;Wrong input! Only numbers allowed...\n&quot;)
 
   Cor=FreeCAD.ActiveDocument.addObject(&quot;Part::FeaturePython&quot;,&quot;Corniere&quot;)
   Corniere(Cor)
   Cor.ViewObject.Proxy=0
   Cor.L1=QL1
   Cor.L2=QL2
   Cor.e1=Qe
   Cor.Longueur=QLongueur
 
   App.ActiveDocument.recompute()
   Gui.SendMsgToActiveView(&quot;ViewFit&quot;)
 
   QtGui.qApp.restoreOverrideCursor()
 
   Plan(Cor)
 
   dialog.hide()
 
def hide():
 
   dialog.hide()
 
def Plan(obj):
 
   ObjetProjete=obj.Shape
 
   TailleX=ObjetProjete.BoundBox.XLength
   TailleY=ObjetProjete.BoundBox.YLength
   TailleZ=ObjetProjete.BoundBox.ZLength
 
   page = App.activeDocument().addObject('Drawing::FeaturePage','Page')
   page.Template = App.getResourceDir()+'Mod/Drawing/Templates/A3_Landscape.svg'   
   vueprofil = App.activeDocument().addObject('Drawing::FeatureViewPart','VueProfil')
   vueprofil.Source = obj
   vueprofil.Direction = (0.0,0.0,1.0)
   vueprofil.Scale = 1.0
   vueprofil.X = 50.0
   vueprofil.Y = 50.0
   page.addObject(vueprofil)
 
   vuegauche = App.activeDocument().addObject('Drawing::FeatureViewPart','Vuegauche')
   vuegauche.Source = obj
   vuegauche.Direction = (-1.0,0.0,0.0)
   vuegauche.ShowHiddenLines = True
   vuegauche.Scale = 1.0
   vuegauche.Rotation = 180.0
   vuegauche.X = 50.0+TailleX/2+TailleX
   vuegauche.Y = 50.0
   page.addObject(vuegauche)
 
   vuedessus = App.activeDocument().addObject('Drawing::FeatureViewPart','Vuedessus')
   vuedessus.Source = obj
   vuedessus.Direction = (0.0,-1.0,0.0)
   vuedessus.ShowHiddenLines = True
   vuedessus.Scale = 1.0
   vuedessus.Rotation = 180.0
   vuedessus.X = 50.0+TailleX/2+TailleX
   vuedessus.Y = 50.0+TailleX/2+TailleY+TailleX
   page.addObject(vuedessus)
 
   vueiso = App.activeDocument().addObject('Drawing::FeatureViewPart','VueIso')
   vueiso.Source = obj
   vueiso.Direction = (-1.0,-1.0,0.5)
   vueiso.Scale = 1.0
   vueiso.ShowSmoothLines = True
   vueiso.X = TailleZ+TailleX/2
   vueiso.Y = 7*TailleZ+3*TailleY
   page.addObject(vueiso)
 
 
   App.activeDocument().recompute()
 
   PageFile = open(page.PageResult,'r')
   OutFile = open('temp.svg','w')
   OutFile.write(PageFile.read())
   del OutFile,PageFile
 
 
dialog = QtGui.QDialog()
dialog.resize(200,200)
dialog.setWindowTitle(&quot;Corniere&quot;)
la = QtGui.QVBoxLayout(dialog)
 
e1 = QtGui.QLabel(&quot;Dimensions de la corniere&quot;)
commentFont=QtGui.QFont(&quot;Arial&quot;,10,True)
e1.setFont(commentFont)
la.addWidget(e1)
 
t1 = QtGui.QLabel(&quot;L1&quot;)
la.addWidget(t1)
l1 = QtGui.QLineEdit()
l1.setText(&quot;20&quot;)
la.addWidget(l1)
 
t2 = QtGui.QLabel(&quot;L2&quot;)
la.addWidget(t2)
l2 = QtGui.QLineEdit()
l2.setText(&quot;20&quot;)
la.addWidget(l2)
 
t3 = QtGui.QLabel(&quot;e&quot;)
la.addWidget(t3)
l3 = QtGui.QLineEdit()
l3.setText(&quot;2&quot;)
la.addWidget(l3)
 
t4 = QtGui.QLabel(&quot;Longueur&quot;)
la.addWidget(t4)
l4 = QtGui.QLineEdit()
l4.setText(&quot;300&quot;)
la.addWidget(l4)
 
okbox = QtGui.QDialogButtonBox(dialog)
okbox.setOrientation(QtCore.Qt.Horizontal)
okbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
la.addWidget(okbox)
QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;accepted()&quot;), proceed)
QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;rejected()&quot;), hide)
QtCore.QMetaObject.connectSlotsByName(dialog)
dialog.show()

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Creating faces from a DXF file</title>
    <ns>0</ns>
    <id>44117</id>
    <revision>
      <id>134324</id>
      <parentid>116920</parentid>
      <timestamp>2014-12-27T19:07:03Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>add &quot;There must be groups in the file.&quot;</comment>
      <sha1>ld14bsj7nkjnjv8gc5mdw80jce85u5p</sha1>
      <text xml:space="preserve" bytes="1461">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Creating faces from a DXF file|Description=This macro create face from a DXF file.|Author=shoogen}}

==Description== &lt;!--T:2--&gt;
This macro create face from a DXF file, the &quot;Layer&quot; are recognized separate and trained in groups.

There must be groups in the file.

==Uses== &lt;!--T:3--&gt;
Launch the macro all objects are analyzed and transformed into faces.

&lt;!--T:4--&gt;
Note: an unclosed object return an error

==Script== &lt;!--T:5--&gt;
Macro Creating faces from a DXF file.FCMacro

&lt;syntaxhighlight&gt;
import FreeCAD,Part,OpenSCAD2Dgeom
doc = App.ActiveDocument
for group in doc.findObjects('App::DocumentObjectGroup'):
    try:
        edges=sum((obj.Shape.Edges for obj in group.Group \
                if hasattr(obj,'Shape')),[])
        face = OpenSCAD2Dgeom.edgestofaces(edges)
        faceobj = doc.addObject('Part::Feature','face_%s' % group.Name)
        faceobj.Label = 'face_%s' % group.Label
        faceobj.Shape = face
    except Part.OCCError: # Exception: # 
        FreeCAD.Console.PrintError('Error in Group %s (%s)' % (group.Name,group.Label)+&quot;\n&quot;)


&lt;/syntaxhighlight&gt;

==Link== &lt;!--T:6--&gt;
Forum [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=8144 Creating faces from a DXF file]

&lt;!--T:7--&gt;
Here an example [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=8280&amp;p=67863#p67840 Generate 3D solid from intersection of three imported 2D]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Delta xyz</title>
    <ns>0</ns>
    <id>12080</id>
    <revision>
      <id>82093</id>
      <parentid>82092</parentid>
      <timestamp>2014-05-10T11:58:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3mxbh10y28w50zt3rxhxdsns52o1doi</sha1>
      <text xml:space="preserve" bytes="3394">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro Delta xyz|Description=Gives the Delta values and distance between 2 points.|Author=Mario52}}

&lt;!--T:2--&gt;
Gives the Delta values and distance between 2 points.

===How to use=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
# Start the macro
# Select the first point in 3D view
# Select the second point in 3D view
# Click in ComboView to quit


&lt;!--T:6--&gt;
[[File:DeltaXYZ.png|left]]
{{clear}}

===Script=== &lt;!--T:3--&gt;
Macro_Delta_xyz.py


&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
#Delta x y z Click in ComboView to quit
import Draft, Part
import math,FreeCAD
from FreeCAD import Base

global positionX1 ;positionX1 = 0.0
global positionY1 ;positionY1 = 0.0
global positionZ1 ;positionZ1 = 0.0
global positionX2 ;positionX2 = 0.0
global positionY2 ;positionY2 = 0.0
global positionZ2 ;positionZ2 = 0.0
global pas        ;pas        = 0

def sub(first, other): 
	&quot;sub(Vector,Vector) - subtracts second vector from first one&quot;
	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
		return FreeCAD.Vector(first.x-other.x, first.y-other.y, first.z-other.z)
def length(first):
	&quot;lengh(Vector) - gives vector length&quot;
	if isinstance(first,FreeCAD.Vector):
		return math.sqrt(first.x*first.x + first.y*first.y + first.z*first.z)
def dist(first, other):
	&quot;dist(Vector,Vector) - returns the distance between both points/vectors&quot;
	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
		return length(sub(first,other))

class SelObserver:
    def addSelection(self,document, object, element, position):  # Sélection
        global pas
        global positionX1
        global positionY1
        global positionZ1
        global positionX2
        global positionY2
        global positionZ2
        pas+=1
        if pas==1:
            positionX1 = position[0]
            positionY1 = position[1]
            positionZ1 = position[2]
            App.Console.PrintMessage(&quot;Begin    : X1 &quot;+str(positionX1)+&quot; Y1: &quot;+str(positionY1)+&quot; Z1: &quot;+str(positionZ1)+&quot;\n&quot;)    
        else:
            positionX2 = position[0]
            positionY2 = position[1]
            positionZ2 = position[2]
            App.Console.PrintMessage(&quot;End      : X2 &quot;+str(positionX2)+&quot; Y2: &quot;+str(positionY2)+&quot; Z2: &quot;+str(positionZ2)+&quot;\n&quot;)    
            App.Console.PrintMessage(&quot;Delta X  : &quot;+str(abs(positionX1-positionX2))+&quot;\n&quot;)    
            App.Console.PrintMessage(&quot;Delta Y  : &quot;+str(abs(positionY1-positionY2))+&quot;\n&quot;)    
            App.Console.PrintMessage(&quot;Delta Z  : &quot;+str(abs(positionZ1-positionZ2))+&quot;\n&quot;)    
            v1=FreeCAD.Vector(positionX1,positionY1,positionZ1)
            v2=FreeCAD.Vector(positionX2,positionY2,positionZ2)
            App.Console.PrintMessage(&quot;Distance : &quot;+str(dist(v1,v2))+&quot;\n&quot;)
            App.Console.PrintMessage(&quot;------------------------&quot;+&quot;\n&quot;)    
            pas=0

    def removeSelection(self,document, object, element): # Delete the selected object
        App.Console.PrintMessage(&quot;removeSelection&quot;+&quot;\n&quot;)
    def setSelection(self,document):                     # Selection in ComboView
        FreeCADGui.Selection.removeObserver(s)           # Uninstalls the resident function
        App.Console.PrintMessage(&quot;removeObserver&quot;+&quot;\n&quot;)

pas = 0
s=SelObserver()
FreeCADGui.Selection.addObserver(s)          # install the function mode resident

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Draft Circle 3 Points</title>
    <ns>0</ns>
    <id>4334</id>
    <revision>
      <id>81775</id>
      <parentid>57794</parentid>
      <timestamp>2014-05-06T18:43:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>j15tqenrevf3xhaxate9cgxabcmvsad</sha1>
      <text xml:space="preserve" bytes="10471">
&lt;!--T:1--&gt;
{{Macro|Icon=Macro_Draft_Circle_3_Points|Name=Macro Draft Circle 3 Points|Description=Creates a circle from 3 selected points.|Author=Mario52}}

==Description== &lt;!--T:2--&gt;
This macro creates a circle on 3 selected points. The points can be objects such as cubes, cylinder, then selected coordinates will be the centre of these forms.
 
[[File:Macro Draft Circle 3 Points01.png|480px|Circle built on 3 selected points]]
{{clear}}

==Use== &lt;!--T:3--&gt;
Select 3 points, or forms in the 3D view and run the macro.&lt;br /&gt;
If the shape is a line, the coordinate will be the center of the line.

==Options== &lt;!--T:4--&gt;
If the selected objects are on different planes, (xy '''Z10''', xy '''Z2''', xy '''Z5''') the circle will be built on the map x,y '''Z=0'''.&lt;br /&gt;
If all of the selected objects have their equal Z coordinates (xy '''Z5''', xy '''Z5''', xy '''Z5'''), circle will be built to the plan x,y '''Z=5'''.

==Script== &lt;!--T:5--&gt;
Draft_Circle_3_Points.FCMacro


&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# créer un cercle à partir de 3 points sélectionnés sur le plan X,Y
# 04/03/2013
# la formule provient de
# http://www-obs.univ-lyon1.fr/labo/fc/Ateliers_archives/ateliers_2005-06/cercle_3pts.pdf
# lire la note dans le pdf, sur l'ordre de sélection des points,
# si la formule renvoie une erreur (exemple les 3 points dans le même alignement)
#
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos
from FreeCAD import Base

# prendre les objets sélectionnés
sel = FreeCADGui.Selection.getSelection()
i=0
centreX=0
centreY=0
rayon=0
# S'il y a 3 points sélectionnés alors..
if len(sel)==3 :
	i=0
	ta=[0,0,0,0,0,0,0,0,0]
	for obj in sel:
		x=(obj.Shape.BoundBox.Center)
		ta[i+0]=(x.x)
		ta[i+1]=(x.y)
		ta[i+2]=(x.z)
		i=i+3
# Affectation des variables
	x_point_1=ta[0]
	y_point_1=ta[1]
	z_point_1=ta[2]
	
	x_point_2=ta[3]
	y_point_2=ta[4]
	z_point_2=ta[5]
	
	x_point_3=ta[6]
	y_point_3=ta[7]
	z_point_3=ta[8]
# Calcul des coordonnées du centre du cercle	
	centreX =((x_point_3**2-x_point_2**2+y_point_3**2-y_point_2**2)/(2*(y_point_3-y_point_2))-(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1)))/((x_point_3-x_point_2)/(y_point_3-y_point_2)-(x_point_2-x_point_1)/(y_point_2-y_point_1))
	centreY =-(x_point_2-x_point_1)/(y_point_2-y_point_1)*centreX+(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1))
	rayon =sqrt((x_point_1-centreX)**2+(y_point_1-centreY)**2)
# Définition de la coordonnée Z
# Si toutes les coordonnées Z sont égales le centreZ s'aligne à la coordonnée Z
	if z_point_1==z_point_2 and z_point_2==z_point_3:
		centreZ=z_point_1
	else:
# Si une coordonnée est différente alors Z=0
		centreZ=0
# Création du cercle
	pl=FreeCAD.Placement()
	pl.Rotation.Q=(0.0,-0.0,-0.0,1.0)
	pl.Base=FreeCAD.Vector(centreX,centreY,centreZ)
	Draft.makeCircle((rayon),placement=pl,face=False,support=None)
# Affiche le résultat dans la Vue rapport de FreeCAD
	FreeCAD.Console.PrintMessage(&quot;Coordonnée X : &quot;+str(centreX)+&quot;\r\n&quot;)
	FreeCAD.Console.PrintMessage(&quot;Coordonnée Y : &quot;+str(centreY)+&quot;\r\n&quot;)
	FreeCAD.Console.PrintMessage(&quot;Coordonnée Z : &quot;+str(centreZ)+&quot;\r\n&quot;)
	FreeCAD.Console.PrintMessage(&quot;Rayon        : &quot;+str(rayon  )+&quot;\r\n&quot;)
else:
# Si la condition n'est pas remplie, recommencer
	FreeCAD.Console.PrintError(&quot;Sélectionnez 3 points et recommencez\r\n&quot;)

&lt;/syntaxhighlight&gt;


==Improved version== &lt;!--T:6--&gt;
In addition to the previous features, this example is used to align an orthogonal circle on each shape in the selection, and the plan &quot;'XY, YZ, XZ ' ' chosen.&lt;br /&gt;
The circle takes the color of the axis dedicated regardless of current color, and the center point of the circle is drawn (option O/N).

&lt;!--T:7--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;100&quot;&gt;
File:Macro Draft Circle 3 Points02.png|Cercle circonscrit sur 3 formes,
File:Macro Draft Circle 3 Points03.png|de manière orthogonale sur la forme choisie
File:Macro Draft Circle 3 Points04.png|
File:Macro Draft Circle 3 Points05.png|
&lt;/gallery&gt;
&lt;/center&gt;
 
{{clear}}
The settings to change.


&lt;syntaxhighlight&gt;
# Change the values here below
			# mode by default vueChoix = 0 and alignerSur = 0
	vueChoix=0	# choice of the top view = 1 XY, view Front = 2 ZX, Right view = 3 ZY
	alignerSur=0	# Aligns the circle shaped the choice (1,2 or 3) or Z = 0
	afficherPoint=1	# Displays the center point of the circle
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# créer un cercle à partir de 3 points séléctionnés
# avec comme options le cercle peut être construit sur un plans au choix
# à la coordonnée d'une des trois formes sélectionnées au choix
# et création du point central O/N
# 04/03/2013
# la formule provient de
# http://www-obs.univ-lyon1.fr/labo/fc/Ateliers_archives/ateliers_2005-06/cercle_3pts.pdf
# lire la note dans le pdf, sur l'ordre de sélection des points,
# si la formule renvoie une erreur (exemple les 3 points dans le même alignement)
#
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos
from FreeCAD import Base
from PyQt4 import QtCore, QtGui

def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
	diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
	diag.setWindowModality(QtCore.Qt.ApplicationModal)
	diag.exec_()

def affiche(x,y,z,rayon,r,v,b,afficherPoint):
	pl.Base=FreeCAD.Vector(x,y,z)
	Draft.makeCircle((rayon),placement=pl,face=False,support=None)
	FreeCADGui.activeDocument().activeObject().LineColor = (r,v,b)
	if afficherPoint==1:
		Draft.makePoint(x,y,z)
	diag = QtGui.QMessageBox(QtGui.QMessageBox.Information,u&quot;Coordinates&quot;,u&quot;Coordinates X : &quot;+str(x)+&quot;\r\n&quot;+u&quot;Coordinates Y : &quot;+str(y)+&quot;\n&quot;+u&quot;Coordinates Z : &quot;+str(z)+&quot;\nRayon\t     : &quot;+str(rayon))
	diag.setWindowModality(QtCore.Qt.ApplicationModal)
	diag.exec_()

# prendre les objets selectionnes
sel = FreeCADGui.Selection.getSelection()
i=0
centreX=0;centreY=0;rayon=0

# S'il y a 3 points sélectionnés alors..
if len(sel)==3 :
	i=0
	ta=[0,0,0,0,0,0,0,0,0]
	for obj in sel:
		x=(obj.Shape.BoundBox.Center)
		ta[i+0]=(x.x)
		ta[i+1]=(x.y)
		ta[i+2]=(x.z)
		i=i+3
# Change the values here below
			# mode by default vueChoix = 0 and alignerSur = 0
	vueChoix=0	# choice of the top view = 1 XY, view Front = 2 ZX, Right view = 3 ZY
	alignerSur=0	# Aligns the circle shaped the choice (1,2 or 3) or Z = 0
	afficherPoint=1	# Displays the center point of the circle

    # Affectation des variables
	if vueChoix==3:		# View of right ZY (Red)
 	  	z_point_1=ta[0]
		x_point_1=ta[1]
		y_point_1=ta[2]
	
		z_point_2=ta[3]
		x_point_2=ta[4]
		y_point_2=ta[5]
	
		z_point_3=ta[6]
		x_point_3=ta[7]
		y_point_3=ta[8]

	elif vueChoix==2:	# Front view ZX (Green)
 	  	y_point_1=ta[0]
		z_point_1=ta[1]
		x_point_1=ta[2]
	
		y_point_2=ta[3]
		z_point_2=ta[4]
		x_point_2=ta[5]
	
		y_point_3=ta[6]
		z_point_3=ta[7]
		x_point_3=ta[8]

	else:			# Top view XY (blue)
 	  	x_point_1=ta[0]
		y_point_1=ta[1]
		z_point_1=ta[2]
	
		x_point_2=ta[3]
		y_point_2=ta[4]
		z_point_2=ta[5]
	
		x_point_3=ta[6]
		y_point_3=ta[7]
		z_point_3=ta[8]

    # Calculation of coordinates of the center of the circle	
	try:
		centreX =((x_point_3**2-x_point_2**2+y_point_3**2-y_point_2**2)/(2*(y_point_3-y_point_2))-(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1)))/((x_point_3-x_point_2)/(y_point_3-y_point_2)-(x_point_2-x_point_1)/(y_point_2-y_point_1))
		centreY =-(x_point_2-x_point_1)/(y_point_2-y_point_1)*centreX+(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1))
		rayon =sqrt((x_point_1-centreX)**2+(y_point_1-centreY)**2)
	except:
		errorDialog(u&quot;Impossible calculation too aligned elements&quot;)
	else:
	#finally: sera TOUJOURS exécuté
	   # Definition of the coordinate Z
		centreZ=0
	    # Création du cercle
		pl=FreeCAD.Placement()
		if vueChoix==1:	# Plan XY Dessus
			pl.Rotation.Q=(0,0,0,1.0)
			if alignerSur==1:	
				affiche(centreX,centreY,z_point_1,rayon,0.0,0.0,1.0,afficherPoint)
			elif alignerSur==2:
				affiche(centreX,centreY,z_point_2,rayon,0.0,0.0,1.0,afficherPoint)
			elif alignerSur==3:
				affiche(centreX,centreY,z_point_3,rayon,0.0,0.0,1.0,afficherPoint)
		elif vueChoix==2: # Plan XZ Face
			pl.Rotation.Q=(1,0,0,1.0)
			if alignerSur==1:	
				affiche(centreY,z_point_1,centreX,rayon,0.0,1.0,0.0,afficherPoint)
			elif alignerSur==2:
				affiche(centreY,z_point_2,centreX,rayon,0.0,1.0,0.0,afficherPoint)
			elif alignerSur==3:
				affiche(centreY,z_point_3,centreX,rayon,0.0,1.0,0.0,afficherPoint)
		elif vueChoix==3: # Plan YZ Droite
			pl.Rotation.Q=(0,1,0,1.0)
			if alignerSur==1:	
				affiche(z_point_1,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint)
			elif alignerSur==2:
				affiche(z_point_2,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint)
			elif alignerSur==3:
				affiche(z_point_3,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint)
		else:	# modifier pour avoir XYZ
			# si les coordonnées Z sont égales alors le cercle s'aligne à Z
			if z_point_1==z_point_2 and z_point_2==z_point_3:
				centreZ=z_point_1
				affiche(centreX,centreY,z_point_1,rayon,0.0,0.0,0.0,afficherPoint)
			else:
	        	# Si une coordonnée est différente alors Z=0
				affiche(centreX,centreY,0,rayon,0.0,0.0,0.0,afficherPoint)

else:
    # Si la condition n'est pas remplie, recommencer
	errorDialog(u&quot;Select 3 points and repeat&quot;)
	#FreeCAD.Console.PrintError(&quot;Select 3 points and repeatr\n&quot;)

&lt;/syntaxhighlight&gt;


==Anaglyphe== &lt;!--T:8--&gt;
Here an Anaglyph view that allows you to see two different positions of the view by using glasses with filters red and Cyan [[Image:Anaglyph_Tango.png|24px]].&lt;br /&gt;
Watch alternately with the left eye and the right eye to see the views separately. 
 
&lt;center&gt;
[[File:Cercle3Points2D_anaglyphe.png|480px|Anaglyphe]]
&lt;/center&gt;
{{clear}}

==Credits== &lt;!--T:9--&gt;
The genesis of the macro '''Draft Circle 3 Points''' [http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=3696&amp;sid=17886f953113e162dc9a4a843e1fce94 on the forum (PYTHON) coordonnées d'un point] helped flachyjoe thanks.&lt;br /&gt;
The formula comes from [http://www-obs.univ-lyon1.fr/labo/fc/Ateliers_archives/ateliers_2005-06/cercle_3pts.pdf cercle_3pts.pdf] and used with the kind permission of its author.


</text>
    </revision>
  </page>
  <page>
    <title>Macro Draft Circle 3 Points 3D</title>
    <ns>0</ns>
    <id>4338</id>
    <revision>
      <id>103556</id>
      <parentid>81782</parentid>
      <timestamp>2014-08-08T12:09:00Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Pyqt4 and PySide</comment>
      <sha1>hemqk66ceolgftqioczs601hr1ah22v</sha1>
      <text xml:space="preserve" bytes="4360">
&lt;!--T:1--&gt;
{{Macro|Icon=Macro_Draft_Circle_3_Points|Name=Macro Draft Circle 3 Points 3D|Description=Creates a circle from 3 selected points in the space.|Author=galou_breizh}}

&lt;!--T:2--&gt;
This macro creates a circle on 3 selected points in the space. The points can be objects such as cubes, cylinder, then selected coordinates will be the centre of these forms.

 
&lt;!--T:3--&gt;
[[File:Macro_Draft_Circle_3_Points_3D.png|480px]]
{{clear}}

===Use=== &lt;!--T:4--&gt;
Select 3 points, or forms in the 3D view and run the macro.&lt;br /&gt;
If the shape is a line, the coordinate will be the center of the line.

===Limits=== &lt;!--T:5--&gt;
The order of selection of fear forms influencing the '''AXIS''' angle and reverse the inclination of the circle. In this case, reverse or change the order of selection of the shapes.&lt;br /&gt;
The coordinates '''X, Y, Z''' of value '''0''' or alignment not allowing not calculating, can return a division by zero error, and translated as &quot;The three points are aligned&quot;

===Script=== &lt;!--T:6--&gt;


&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# Create a circle from 3 points selected on the X, Y, Z map
# 04/03/2013
# From http://en.wikipedia.org/wiki/Circumscribed_circle

# 08/08/2014 PyQt4 and PySide

#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1

try:
    import PyQt4
    from PyQt4 import QtCore, QtGui
except Exception:
    import PySide
    from PySide import QtCore, QtGui
from math import pi, asin
import Draft, FreeCAD, FreeCADGui
from FreeCAD import Base

def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
    diag.setWindowModality(QtCore.Qt.ApplicationModal)
    diag.exec_()

def affiche(x,y,z,r,angle):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Information,u&quot;Coordinates&quot;,u&quot;Coordinate X : &quot;+str(x)+&quot;\r\n&quot;+u&quot;Coordinate Y : &quot;+str(y)+&quot;\n&quot;+u&quot;Coordinate Z : &quot;+str(z)+&quot;\nRadius\t   : &quot;+str(r)+&quot;\nAngle\t   : &quot;+str(angle))
    diag.setWindowModality(QtCore.Qt.ApplicationModal)
    diag.setWindowModality(QtCore.Qt.NonModal)
    diag.exec_()

# objects selected
sel = FreeCADGui.Selection.getSelection()
# If there are 3 selected points so...
if len(sel)==3 :
    # Assignment of variables
    P1 = sel[0].Shape.BoundBox.Center
    P2 = sel[1].Shape.BoundBox.Center
    P3 = sel[2].Shape.BoundBox.Center

    P1P2 = (P2 - P1).Length
    P2P3 = (P3 - P2).Length
    P3P1 = (P1 - P3).Length

    # Circle radius.
    l = ((P1 - P2).cross(P2 - P3)).Length
    try:
        #if l &lt; 1e-8:
        #    errorDialog(&quot;The three points are aligned&quot;)
        r = P1P2 * P2P3 * P3P1 / 2 / l
    except:
        errorDialog(&quot;The three points are aligned&quot;)
    else:
        # Sphere center.
        a = P2P3**2 * (P1 - P2).dot(P1 - P3) / 2 / l**2
        b = P3P1**2 * (P2 - P1).dot(P2 - P3) / 2 / l**2
        c = P1P2**2 * (P3 - P1).dot(P3 - P2) / 2 / l**2
        P1.multiply(a)
        P2.multiply(b)
        P3.multiply(c)
        PC = P1 + P2 + P3

        # Creation of a circle
        pl = Base.Placement()
        v = (P1 - P2).cross(P3 - P2)
        v.normalize()
        axis = Base.Vector(0, 0, 1).cross(v)
        angle = asin(axis.Length) * 180 / pi
        axis.normalize()
        pl = Base.Placement(PC, axis, angle)
        Draft.makeCircle(r, placement=pl, face=False, support=None)
        # Displays the result in the windows
        affiche((PC.x),(PC.y),(PC.z),r,angle)
        # Displays the result in the FreeCAD report view
        #FreeCAD.Console.PrintMessage(&quot;Coordinate X : &quot;+str(PC.x)+&quot;\n&quot;)
        #FreeCAD.Console.PrintMessage(&quot;Coordinate Y : &quot;+str(PC.y)+&quot;\n&quot;)
        #FreeCAD.Console.PrintMessage(&quot;Coordinate Z : &quot;+str(PC.z)+&quot;\n&quot;)
        #FreeCAD.Console.PrintMessage(&quot;Radius       : &quot;+str(r)+&quot;\n&quot;)
        #FreeCAD.Console.PrintMessage(&quot;Angle        : &quot;+str(angle)+&quot;\n&quot;)
else:
    # If the condition is not met, repeat
    #FreeCAD.Console.PrintError(&quot;Select 3 points and repeat\n&quot;)
    errorDialog(&quot;Select 3 points and repeat\n&quot;)

&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Macro EdgesToArc</title>
    <ns>0</ns>
    <id>19224</id>
    <revision>
      <id>59246</id>
      <parentid>59075</parentid>
      <timestamp>2014-01-03T10:02:10Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>link internal</comment>
      <sha1>e2lpf4ff4x941gevck2dm5atw7qlvxq</sha1>
      <text xml:space="preserve" bytes="3221">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=EdgesToArc|Description=Replaces the selected Edges by a circular Arc if possible. Useful for restoring discretized arcs.|Author=Jreinhardt}}

&lt;!--T:2--&gt;
Sometimes one encounters wires that contain arcs that are made up of small straight segments. This often happens when working with files from other programs. This macro makes it relatively easy to convert these discretized arcs back to circular arcs. This reduces the file size and makes the file more manageable.

&lt;!--T:3--&gt;
To use this macro, you have to break down the wire into individual edges using the {{KEY|[[Image:Draft Downgrade.png|16px]] [[Draft Downgrade]]}} function. Then just select the segments that you want to replace by an circular arc and execute the macro. You need at least two segments.

&lt;!--T:4--&gt;
The macro will check whether the segments all lie on a common circle and will abort if this is not the case. Otherwise it will create the arc and remove the segments.

&lt;!--T:5--&gt;
Because of small inaccuracies in the calculations, the {{KEY|[[Image:Draft Upgrade.png|16px]] [[Draft Upgrade]]}} function can sometimes fail to recombine the other edges and the arcs back into a wire. In this case the [[Macro_SuperWire]] provides a more robust way to do this.



&lt;syntaxhighlight&gt;
import Draft
import FreeCADGui, FreeCAD
from FreeCAD import Base, Console
from math import atan2, pi, fabs

#This macro replaces a number of edges approximating a circular arc by a proper circular arc.
#It might be necessary to use the superwire macro to recombine the edges back to a wire, because of small errors in the calculations.

sel = FreeCADGui.Selection.getSelection()
if len(sel) &lt; 2:
    Console.PrintError(&quot;Too few edges are selected\n&quot;)
edges = [s.Shape for s in sel]

start_vertices = []
end_vertices = []
for edge in edges:
    start_vertices.append(edge.Vertexes[0].Point)
    end_vertices.append(edge.Vertexes[1].Point)
vertices = start_vertices + end_vertices

start,end,middle = None,None,None

#find start and end points
for edge in edges:
    is_start = True
    is_end = True
    for point in end_vertices:
        if edge.Vertexes[0].Point.distanceToPoint(point) &lt; 1e-8:
            is_start = False

    for point in start_vertices:
        if edge.Vertexes[1].Point.distanceToPoint(point) &lt; 1e-8:
            is_end = False
    if is_start:
        start = edge.Vertexes[0].Point
    if is_end:
        end = edge.Vertexes[1].Point

#find middle point, at least not too far away from the middle

for v in vertices:
    ratio = v.distanceToPoint(start)/v.distanceToPoint(end)
    if ratio &gt; 0.5 and ratio &lt; 2.:
        middle = v
        break

if middle is None:
    Console.PrintError(&quot;Could not find suitable middle point\n&quot;)

arc = Part.ArcOfCircle(start,middle,end)

#Check circularity
circular = True
for v in vertices:
    if fabs(v.distanceToPoint(arc.Center) - arc.Radius) &gt; 1e-6:
        Console.PrintError(&quot;Edges do not approximate a circular arc\n&quot;)
        circular = False
        break

if circular:
        Part.show(arc.toShape())
        for shape in sel:
            FreeCAD.ActiveDocument.removeObject(shape.Name)
&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FCCircularText</title>
    <ns>0</ns>
    <id>39549</id>
    <revision>
      <id>128039</id>
      <parentid>128038</parentid>
      <timestamp>2014-12-03T13:16:38Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>/* Example */  &quot;Writing on a path&quot;</comment>
      <sha1>s2o3yuuk9ytkebw5v789b77mq9ck195</sha1>
      <text xml:space="preserve" bytes="10181">{{Macro|Icon=Text-x-python|Name=Macro FCCircularText|Description=This macro create a text around a cylinder.|Author=Mario52}}

==Description==

This macro Written text circumferential standing or not flat and a propeller in the manner of [http://en.wikipedia.org/wiki/Trajan%27s_Column Trajan Column] and to create a clock with Arabic numerals '''1 2 3 ...''' and Roman '''I II III ...''' (inspired to [http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=5013&amp;hilit=Clock Macro to Create Clock Face])
 
[[File:FCCircularText 01.png|400px|texte 360 degrees]]
{{clear}}

==Utilisation==

Principle: The options that are not useful for the selected function are dimmed so inaccessible.

A function can gray out options if they are not for him.

Launch the macro folder '''FcString''' for created characters and a file '''FcClock''' for created clocks.

All the characters are and remain independent. When creating extrusions nothing is deleted,. If Compount is created with {{KEY|Run Comp.}} is copied out of the folder.

The options :
* '''Extrude Char.'''
* '''Placement.'''
* '''SP. inclination.'''

are shaded by default and are active in all functions if they are checked.

Except for one Clock Service Placement box '''Z''' is activated and moves the text in the direction '''Z''' to place the text on the support surface.

=== Presentation ===

Overview

[[File:FCCircularText 06.png|GUI]]
{{clear}}

==First section==

[[File:FCCircularText 07.png|center]]
{{clear}}

* TextEdit window that lets you copy the text to display (click on the {{KEY|Reset}} allows to know the number of the input string that is displayed in the window title)
* The {{KEY|New Font}} to select a new font to use
** Default ARIAL.TTF to change the path and the default font change the line No. 69

&lt;syntaxhighlight&gt;
global PolicePath       ;PolicePath      = &quot;C:/Windows/Fonts/ARIAL.TTF&quot; # path font
&lt;/syntaxhighlight&gt;

== Second Section ==

Configuring characters in FCCircularText

[[File:FCCircularText 08.png|center]]
{{clear}}
===Première zone===

Your choice :

[[File:FCCircularText 09.png|left]]
&lt;center&gt;
&lt;gallery widths=&quot;100&quot; heights=&quot;120&quot;&gt;
Image:FCCircularText 20.png|'''Outdoor'''
Image:FCCircularText 21.png|'''Indoor'''
Image:FCCircularText 22.png|'''Helix'''
Image:FCCircularText 23.png|'''Clock'''
&lt;/gallery&gt;
&lt;/center&gt;
{{clear}}
&lt;br /&gt;
[[File:FCCircularText 24.png|left]]
* {{KEY|Mode Stand}} or {{KEY|Mode Flat}} : The text will be placed standing or flat (same as clock) options '''Outdoor''' andt '''Indoor''' are reversed.
{{clear}}

&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
Image:FCCircularText 01.png|'''Mode Stand''' '''Outdoor''' The text will be written up.
Image:FCCircularText_40.png|'''Mode Flat''' '''Outdoor''' The text will be placed flat.
&lt;/gallery&gt;
&lt;/center&gt;

&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
Image:FCCircularText 39.png|'''Mode Flat''' '''Indoor''' The text will be placed flat.
Image:FCCircularText_03.png|'''Mode Stand''' '''Indoor''' The text will stand registered (same as clock).
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

=== Second area ===

This section allows you to configure the overall behavior of characters in all the choices available but with some variation.

If the command is not used in the option chosen, it will be grayed out.&lt;br /&gt;

[[File:FCCircularText 10.png| left]]
* '''Radius of circle''' : Radius of the circle. (Default 10)
* '''Size character'''   : Character height. (Default 2)
* '''Begin angle'''      : Starting angle of the first character in the circle. (Default 0 °)
* '''End angle'''        : Angle end of the last character of the text. (Default 360)
* '''Correction angle''' : Character correction angle to make it tangent to the circle. (Default 10 °)
* '''Correction radius''': Fixed the radius of the circle characters (optional). (Default 0.15)
*
* '''Extrude Char'''     : Checkbox extrusion characters. (Inactive Default)
* '''Placement'''        : Text placement in the 3D view. (Inactive Default)
* '''Sp. inclination'''  : Inclination of characters in three axes X, Y and Z (example to cover such a cone). (Inactive Default)

{{clear}}

===Outdoor===

Default mode. The text is written on the outer circumference of the circle.

&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
Image:FCCircularText 20.png|'''Outdoor'''
Image:FCCircularText 25.png|
Image:FCCircularText 30.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

===Indoor===

The text is written on the inner circumference of the circle

&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
File:FCCircularText 21.png|'''Indoor'''
Image:FCCircularText 03.png|
Image:FCCircularText 27.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

===Helix===

Le texte s'inscrit sur la circonférence externe d'une hélice.
&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
Image:FCCircularText 22.png| '''Helix'''
Image:FCCircularText 33.png|
Image:FCCircularText 34.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;


[[File:FCCircularText 11.png|left]]
* The area of the propeller is grayed out by default.
{{clear}}
[[File:FCCircularText 14.png|left]]
* All characters configuration options are available.
* '''Step of helix''' which corresponds to the pitch of the propeller turns and displays 2 (character height) by default.
* '''Char. per turn '''activates and displays 10 by default, which corresponds to 10 characters per helical turn.
{{clear}}
[[File:FCCircularText 15.png|left]]
* If '''Step of helix''' (propeller pitch) is zero, Spinboxes '''Base Helix''' and '''End Helix''' are activated.
* '''Base Helix''' provides the basis for starting the propeller (even Placement Z). If '' 'Placement Z' '' is different from zero, the starting point is added to Z. Placement
* '''End Helix''' End of the helix pitch of the helix will be calculated relative to the height and the number of characters per helical turn.
{{clear}}

===Clock===

The figures are part of a circle with Arabic numerals or Romans.

&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;180&quot;&gt;
Image:FCCircularText 23.png|'''Clock'''
Image:FCCircularText 35.png|'''Axial'''
Image:FCCircularText 36.png|'''Redress'''
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
[[File:FCCircularText 12.png|left]]
* By default, the section is grayed.
{{clear}}
[[File:FCCircularText 16.png|left]]
* When the selection is made, the following functions are unusable and get drunk.
*# Begin angle.
*# End angle.
*# Correction angle.
*# Correction radius.
*# The buttom {{KEY|Mode Stand}} or {{KEY|Mode Flat}}.
* The area '''Clock''' is activated.
{{clear}}

[[File:FCCircularText 19.png|left]]
* '''Radius of support''' : If a value is given, support will be created (default 0).
* If '''Support number face''' is different from zero a support is created. (If '''Extrude support '''= zero then a face is created).
** 1 = A circle is created (circle appears).
** 2 = A rectangle is created (length = (Radius of media * 1.5) width = Radius of support) (Rectangle appears).
** 3 = A triangle is created (circumscribed) (Triangle appears).
** 4 = a square is created (Radius of support) (Square appears).
** 5 = and A polygon with the number of faces displayed (circumscribed) (Polygon appears).
* '''Extrude support''' is activated and an extrusion dimension can be given.
{{clear}}

[[File:FCCircularText 17.png|left]][[File:FCCircularText_38.png|200px]]
{{clear}}
[[File:FCCircularText 18.png|left]][[File:FCCircularText_37.png|200px]]

* If '''Support number face''' is equal to zero there is no support.
* {{KEY|Mode Roman}} : The writing will be in Roman figures '''I II III IIII V VI VII VIII IX X XI XII'''
* {{KEY|Axial}}   : The figures will be written axially.
{{clear}}

===Commandes===

[[File:FCCircularText 13.png]]
{{clear}}
{{KEY|Exit}}    : Leaves the macro.

{{KEY|Reset}}   : Reset all values and displays the number of characters displayed in the window.

{{KEY|Run Comp}} : Launche the macro and creates a Compunt object of all characters.

{{KEY|Run}}     : Launche the macro

Launch the macro folder '''FcString''' for created characters and a file '''FcClock''' for created clocks.

==Script== 

'''PS: false zip delete the .zip and copy the macro Macro_FCCircularText.FCMacro in your path FCMacro of FreeCAD
'''


Download the script here [http://forum.freecadweb.org/download/file.php?id=9575 Macro FCCircularText.FCMacro.zip]

==Example==

&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FCCircularText 02.png|Text beginning at 180 degrees ('''Begin angle''') end at 360 degrees ('''End angle''') external curve.
Image:FCCircularText 03.png|Text set in an inner curve.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FCCircularText 04.png|Text circular on internal and external curve.
Image:FCCircularText 05.png|Circular text on a flat onbjet.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FCCircularText 26.png|External curve.
Image:FCCircularText 28.png|Internal curve.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FCCircularText 29.png|Internal curve extrusion material designated and subtraction.
Image:FCCircularText 31.png|External curve.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:FCCircularText 32.png|Internal curve with subtraction.
Image:FCCircularText 41.png|Extrusion on a cone with '''Sp. Inclination '''45° axis Z.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

(not fully developed)

Planned  :

Writing on a path

circular text of position object selected.

'''(PS : it is possible that an error is made between version 2 Please wait for the next or return to the previous version thank you)'''

==Currently:==
* ver 0.6 23/11/2014 corrected &quot;texte = unicode(self.textEdit.toPlainText())&quot; now accept &quot;'éèà@...&quot;
* ver 0.5 19/11/2014 Gui 
* ver 0.4 10/10/2014 add variable &quot;rotation&quot; in the loop ('''for i in range(0,rotation,(rotation/nombre)): # 360 a parametrer''')
* ver 0.4 27/08/2014 correction error of de radius (exterieur=0, debout=1)
* ver 0.3 26/08/2014 add creation text of flat curve
* ver 0.2 26/08/2014 add creation text of internal curve
* ver 0.1

(83+498+537)

=== Links ===

To comment on the [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=7384 Extrude from curved surface of cylinder]</text>
    </revision>
  </page>
  <page>
    <title>Macro FCInfo</title>
    <ns>0</ns>
    <id>10892</id>
    <revision>
      <id>109363</id>
      <parentid>109362</parentid>
      <timestamp>2014-09-13T20:35:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>47ubwvw6zd7h3phbqs4njhrqqw1tdkp</sha1>
      <text xml:space="preserve" bytes="11343">
&lt;!--T:1--&gt;
{{Macro|Icon=FCInfo|Name=Macro FCInfo|Description=Gives a series of information on the form.|Author=Mario52}}

&lt;!--T:2--&gt;
Gives a series of informations about the selected shape and can display a conversion of length, inclination (degrees, radians, grades, pourcent) shape, surface, volume and the weight of the form in the density selected in different units of quantities international and Anglo-Saxon.


&lt;!--T:3--&gt;
[[File:Macro_FCInfo_00_en.png|480px|FCInfo]]

===Utilisation=== &lt;!--T:4--&gt;
Select an object or launch the application and select an object, and a series of informations appear.
His calculations based on unity of FreeCAD, which is the '''mm''' to each new selection, the length unit always comes back on '''mm''' and angle on '''decimal degrees'''.
[[File:Macro FCInfo 06.png|200px|left|upper window]][[File:Macro FCInfo 07.png|200px|lower window]]

&lt;!--T:5--&gt;
{{clear}}
'''Sector 1'''
*Document name
*Label of the object
*Internal Name of the object
*Sub element name of the object
*Type of the object

&lt;!--T:20--&gt;
'''Sector 2'''
*Coordinates X,Y and Z click to mouse

&lt;!--T:21--&gt;
'''Sector 3'''
*Length of the object if the object is a face perimeter is displayed unit size can be selected :&lt;br /&gt;km, hm, dam, m, dm, cm, '''mm''', µm, nm, pm, fm, inch, link, foot, yard, perch, chain, furlong, mile, league, nautique.
*Perimeter of the shape

&lt;!--T:22--&gt;
'''Sector 4'''
*Vertexes and details of the shape (compt_Edge), (compt_Faces), (compt_Vector of the Face) &lt;br /&gt;max 200 lines in the table, if there are more than 200 lines it appears (!+ 200) and the number of lines&lt;br /&gt;(full details can save be the {{KEY|Save}} button in a file in CSV format and can be viewed the file in spreadsheet with the {{KEY|Read}} or by an external spreadsheet as [https://www.libreoffice.org/ LibreOffice] [http://openoffice.apache.org/downloads.html OpenOffice] or other)

&lt;!--T:23--&gt;
'''Sector 5'''
*Inclinations of the object can be displayed in:
*'''decimal degree''', ex: 174.831872611°
*'''degree minute seconde''', ex:&lt;nowiki&gt; 174° 49' 54.741401''&lt;/nowiki&gt;
*'''radian''', ex: 3.05139181449 rad
*'''grade''', ex: 194.257636235 gon
*'''pourcent''' ex: 30° = 57.74%
*Inclinations in planes XY, YZ, ZX and their coordinates

&lt;!--T:24--&gt;
'''Sector 6'''
*Surface of the form displayed unit size can be selected
*Surface of the face displayed unit size can be selected

&lt;!--T:25--&gt;
'''Sector 7'''
*Volume of the form displayed unit size can be selected
*The {{KEY|gram}} buttom unit mass can be chosen :&lt;br /&gt; ton,quintal, kg, hg, dag, '''gram''', dg, cg, mg, µg, ng, pg, fg, gr (grain), dr (drachm), oz (once), oz t (once troy),&lt;br /&gt;lb t (livre troy), lb (livre av), st (stone), qtr (quarter), cwt (hundredweight), tonneau fr, ct
*weight of the form  displayed unit mass can be selected
*density of the material in '''kg by dm3'''&lt;br /&gt;(the &quot;spinBox&quot; is set to '''7,5''' kg, average density of steel. If you want a different default value, change the value of the density, line 206)

&lt;!--T:26--&gt;
'''Sector 8'''
*Center of the shape and these coordinates XYZ
*Center of mass and these coordinates XYZ
*BoundBox extreme dimensions of the shape

&lt;!--T:27--&gt;
'''Sector 9'''
*Moment of inertia and these coordinates

&lt;!--T:28--&gt;
'''Buttons'''
*{{KEY|Read}} : Open a file '''.FCInfo'''
*{{KEY|Save}} : Save a file '''.FCInfo'''
*{{KEY|Exit}} : Exit the macro and delete it from memory
*{{KEY|Ref}}  : Refresh the display of data in report view


&lt;!--T:29--&gt;
Once launched macro, the macro remains active and the window remains visible. To exit the macro by pressing {{KEY|Exit}}. If you leave by the cross, the macro remains in memory and the data appears in the &quot;report view&quot; of FreeCAD.

&lt;!--T:11--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Macro_FCInfo_04.png|Docked to rigth,
Image:Macro FCInfo 05.png|or left with Combo view and reachable by a tab, or not docked to the choice.
&lt;/gallery&gt;
&lt;/center&gt;
{{clear}}

===Options=== &lt;!--T:6--&gt;
====The unit used====
=====Length unit:=====
km, hm, dam, m, dm, cm, '''mm''', µm, nm, pm, fm, inch, link, foot, yard, perch, chain, furlong, mile, league, nautique.

=====Angle degrees :===== &lt;!--T:12--&gt;
#'''decimal degree''', ex: 174.831872611°
#degree minute seconde, ex:&lt;nowiki&gt; 174° 49' 54.741401''&lt;/nowiki&gt;
#radian, ex: 3.05139181449 rad
#grade, ex: 194.257636235 gon
#pourcent ex: 30° = 57.74%

&lt;!--T:13--&gt;
Understanding of angles in FCInfo display.
 
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Macro FCInfo 02.png|Understanding of angles in FCInfo display
Image:Macro FCInfo 03.gif|Understanding of angles in poucent in FCInfo display &lt;br /&gt; click twice to see the animation (the image must be in full screen)
&lt;/gallery&gt;
&lt;/center&gt;
{{clear}}

=====Weight unit :===== &lt;!--T:14--&gt;
ton, quintal, kg, hg, dag, '''gram''', dg, cg, mg, µg, ng, pg, fg, gr (grain), dr (drachm), oz (once), oz t (once troy),&lt;br /&gt;
lb t (livre troy), lb (livre av), st (stone), qtr (quarter), cwt (hundredweight), tonneau fr, ct &lt;br /&gt; &lt;br /&gt;
the &quot;spinBox&quot; is set to '''7,5''' kg, average density of steel. If you want a different default value, change the value of the density, line 206


&lt;syntaxhighlight&gt;
 global densite       ; densite       = 7.5  # (steel = 7.5 kg par dm3)
&lt;/syntaxhighlight&gt;


&lt;!--T:15--&gt;
A file can be created by the button {{KEY|Save}}. The file is written as a file [https://fr.wikipedia.org/wiki/Comma-separated_values csv] in this way, the data can be studied in a spreadsheet in FreeCAD or Openoffice, LibreOffice...

===Script=== &lt;!--T:7--&gt;
Copy the contents of the macro in a file named &quot;FCInfo.FCMacro&quot; (for Windows) in &quot;C:\Program Files\your version&quot;.&lt;br /&gt;
Or, directly in the interface of FreeCAD &lt;br /&gt;
The icon must be in the same directory as the macro for Windows &quot;C:\Program Files\FreeCAD0.13&quot;.&lt;br /&gt;
Download image positioning on the icon [[File:FCInfo.png|64px]]  [[File:FCInfoSpreadsheet.png|64px]] and then drag the mouse right click &quot;save as&quot; (do not change the name)&lt;br /&gt;


&lt;!--T:16--&gt;
'''PS: too long to be contained in the wiki page (for the time being the wiki pages accept only 64 KB) the macro code has been placed in the forum'''&lt;br /&gt;&lt;br /&gt;
There are two versions available, they are identical but one is '''docked''' and the other is '''not docked''' in the case of a malfunction of the docked version.&lt;br /&gt;

&lt;!--T:18--&gt;
There is also a [http://www.freecadweb.org/wiki/index.php?title=Macro_FCInfo_Alternate_Linux Macro_FCInfo_Alternate_Linux] here the code is changed (due to the character display error : '''² ³ ° μ''' ordinal not in range (128)&quot;) which posed problems in certain configurations the functions are the same &lt;br /&gt;
Example : 
&lt;syntaxhighlight&gt;
global uniteSs       ; uniteSs       = u&quot;mm²&quot;
global uniteVs       ; uniteVs       = u&quot;mm³&quot;
global uniteAs       ; uniteAs       = u&quot;°&quot;
&lt;/syntaxhighlight&gt;
remplacés par
&lt;syntaxhighlight&gt;
global uniteSs       ; uniteSs       = &quot;mm&quot;+iso8859(unichr(178))
global uniteVs       ; uniteVs       = &quot;mm&quot;+iso8859(unichr(179))
global uniteAs       ; uniteAs       = iso8859(unichr(176))
&lt;/syntaxhighlight&gt;
Files saved with this version is incompatible with the other version (docked or not) &lt;br /&gt;&lt;br /&gt;

&lt;!--T:19--&gt;
'''(PS: this is a false zip to clear the &quot;.zip&quot; extension that is there than to allow attachment to the forum)''' &lt;br /&gt;&lt;br /&gt;
Dwnload the file '''docked to right''' [http://forum.freecadweb.org/download/file.php?id=6736  FCInfo_en_Ver_1-14_Docked.FCMacro.zip]. PyQt4 and PySide&lt;br /&gt;&lt;br /&gt;
Dwnload the file '''not docked''' [http://forum.freecadweb.org/download/file.php?id=4364 FCInfo_en_Ver_1-12_No_Docked.FCMacro.zip].&lt;br /&gt;&lt;br /&gt;
(Or '''[http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3185&amp;p=47748#p47748 On the forum.]''' )&lt;br /&gt;&lt;br /&gt;
'''PS:''' this macro uses '''getSelection()''' and the list of object begin to 1 ex: for a box '''Edge1 to Edge12'''
and the code in the console start at 0 ex: for a box '''Edge[0] to Edge[11]'''&lt;br /&gt;
This is normal the counting on arrays/lists inside OpenCascade always starts at '''1 and not at 0'''


===Limitations=== &lt;!--T:8--&gt;
Always leave the button {{KEY|Exit}}. If one exits the program without going through the button {{KEY|Exit}} the program remains in memory and continues to run and the display will remain in the &quot;view report&quot;. You must leave FreeCAD to erase it from memory.&lt;br /&gt;
Only the first 200 elements of the object are visible in the table if there are more than 200 items in the object a signal will be displayed by &quot;'(! +200)&quot; '. The complete list of data is visible in the file saved by the button {{KEY|Save}}.&lt;br /&gt;

&lt;!--T:9--&gt;
project:&lt;br /&gt;
&lt;strike&gt;read the file directly in a table.&lt;/strike&gt; done&lt;br /&gt;
&lt;strike&gt;matches the &quot;Edges&quot; and their coordinates&lt;/strike&gt; done&lt;br /&gt;
Association of a substance to its density&lt;br /&gt;
&lt;strike&gt;inclination on the element rather than the global object&lt;/strike&gt; done&lt;br /&gt;
&lt;strike&gt;inlay right in the interface of FreeCAD&lt;/strike&gt; done&lt;br /&gt;

&lt;!--T:10--&gt;
currently:&lt;br /&gt;
ver 1.14 , 04/08/2014 replace PyQt4 and PySide and correct tooltip not displayed cause on PySide and add fg&lt;br /&gt;
ver 1.13 , 27/07/2014 replace FCInfo_en_Ver_1-12_Docked.FCMacro to FCInfo_en_Ver_1-13_Docked.FCMacro accept PyQt4 and PySide&lt;br /&gt;
ver 1.12 , 10/03/2014 adding tooltip&lt;br /&gt;
ver 1.11 , 04/03/2014 adding µm, nm, pm, fm, µg, ng, pg, pourcent, fixed of grandeur carat &lt;strike&gt;&quot;cd&quot;&lt;/strike&gt; in '''&quot;ct&quot;''',  display of the label and internal name, fixed calculation of angles XY YZ ZX could give an error on a compound shape,  window dockable in FreeCAD&lt;br /&gt;
ver 1.10.b , 19/11/2013 buttons outside the scrollbar and the dimensions of the window blocking&lt;br /&gt;
(ver 1.10 , 18/11/2013 create scrollbar)&lt;br /&gt;
ver 1.08.b , 10/11/2013 translation units in English, error correction to display the area of the faces listed in the table and replacement of the&quot;'''print'''&quot; by &quot;'''App.Console.PrintMessage'''&quot;&lt;br /&gt;
&lt;strike&gt;ver 1.09 , 04/11/2013 works perfectly on Windows and Linux (cause of errors on Linux the characters : ² ³ ° &quot;ordinal not in range(128)&quot;) &lt;/strike&gt;&lt;br /&gt;
In a Linux distribution and in the case of an error of '''&quot;ordinal not in range (128)&quot;''' an alternative version exists on this page [[Macro_FCInfo_Alternate_Linux|Macro_FCInfo_Alternate_Linux]]&lt;br /&gt;
ver 1.08 , 24/10/2013 correction of high top &quot;Faces&quot; and &quot;Edges&quot; displaying 100 objects (in the saved file)&lt;br /&gt;
ver 1.07 , 11/10/2013 matches the &quot;Faces&quot; and their coordinates.&lt;br /&gt;
ver 1.06 , 22/09/2013 matches the &quot;Edges&quot; and their coordinates, inclination on the element rather than the global object&lt;br /&gt;
ver 1.05 , 17/09/2013 added an icon for the spreadsheet, conversion barrel fr, affichage des dimensions overall instead of coordinates.&lt;br /&gt;
ver 1.04 , 11/09/2013: read the file directly in a table.&lt;br /&gt;
ver 1.03 , 09/09/2013: clearer display in view report and replacement by &quot;typeObject = sel[0].Shape.ShapeType&quot;&lt;br /&gt;
ver 1.02 , 7/09/2013 : small updates&lt;br /&gt;
ver 1.00 , 6/09/2013&lt;br /&gt;

===Links=== &lt;!--T:17--&gt;
You can share your comments on the forum [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3185 Info Workbench - Help with icons please.]&lt;br /&gt;
Here another post of [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=6005 FCInfo Macro]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FCInfo Alternate Linux</title>
    <ns>0</ns>
    <id>11307</id>
    <revision>
      <id>84668</id>
      <parentid>84326</parentid>
      <timestamp>2014-05-19T20:11:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>l4q8m63il3erwqth4hu9nxrh5iycj56</sha1>
      <text xml:space="preserve" bytes="1884">

&lt;!--T:1--&gt;
{{Macro|Icon=FCInfo|Name=Macro FCInfo Alternate Linux|Description=Gives a series of information on the form.|Author=Mario52}}


&lt;!--T:2--&gt;
Gives a series of informations about the selected shape and can display a conversion of length, inclination (degrees, radians, grades, pourcent) shape, surface, volume and the weight of the form in the density selected in different units of quantities international and Anglo-Saxon.


&lt;!--T:3--&gt;
The server does not accept for the moment of the more pages of 64 KB and it was impossible to update and restore this page to me.

&lt;!--T:4--&gt;
Download the file here :

&lt;!--T:5--&gt;
[http://forum.freecadweb.org/download/file.php?id=4453  FCInfo_en_Ver_1-12_No_Docked_Ubuntu.FCMacro.zip]

&lt;!--T:6--&gt;
[http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3185&amp;p=48579#p48579 Or on the forum]

&lt;!--T:7--&gt;
The difference between the regular version and the version &quot;Ubuntu&quot; in another type of encoding of the characters above + 128 with the procedure &lt;br /&gt;
PS: this version is derived from the original version, the difference is located at the level of encoding '''² ³ ° µ''' characters that can cause the error &quot;ordinal not in range (128)&quot; on some configurations ?

&lt;!--T:8--&gt;
Example : 

&lt;syntaxhighlight&gt;
global uniteSs       ; uniteSs       = u&quot;mm²&quot;
global uniteVs       ; uniteVs       = u&quot;mm³&quot;
global uniteAs       ; uniteAs       = u&quot;°&quot;
&lt;/syntaxhighlight&gt;
replace to :
&lt;syntaxhighlight&gt;
global uniteSs       ; uniteSs       = &quot;mm&quot;+iso8859(unichr(178))
global uniteVs       ; uniteVs       = &quot;mm&quot;+iso8859(unichr(179))
global uniteAs       ; uniteAs       = iso8859(unichr(176))
&lt;/syntaxhighlight&gt;


&lt;!--T:9--&gt;
Files saved with this macro are incompatible with the files of the other versions.

&lt;!--T:10--&gt;
Both versions can operate independently of the OS used.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FCSpring Helix Variable</title>
    <ns>0</ns>
    <id>48184</id>
    <revision>
      <id>131496</id>
      <parentid>130767</parentid>
      <timestamp>2014-12-13T22:49:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>r4jdclblnsi8rhl9c73afi9n52v7xqx</sha1>
      <text xml:space="preserve" bytes="44278">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro FCSpring Helix Variable|Description=Creates a spring with helix variable.|Author=Mario52}}

===Description=== &lt;!--T:2--&gt;
This macro creates a spring with customizable, any turn may change the spring configuration can be saved in a file with the extension '''.FCSpring'''


[[File:TruncateSpring00.png]]
{{clear}}

===Use=== &lt;!--T:3--&gt;
This section is used to configuration the spring

&lt;!--T:4--&gt;
Schematic detail of spring configuration 


[[File:Macro TruncateSpring 01.png]]
{{clear}}

=== '''Gui''' === &lt;!--T:5--&gt;

[[File:Macro FCSpring Helix Variable 01.png]]
{{clear}}

=== '''First section, spring configuration''' === &lt;!--T:6--&gt;
* '''Number of coil''' : Total of coil to spring. Default = 10
* '''Radius of spring''' : Radius of spring. Default = 20.0
* '''Pitch of spring''' : Pitch of spring general. Default = 15.0
* '''Precision of turn''' : Precision of turn the precision correspond the number of point for 1 turn the coil and is calculate : precision (number points) = (pitch / (360/precision)). Default = 5 (72 points)
* '''Begin''' : Begin angle of the spring first coil.
* '''End''' : End angle of the spring last coil.
* '''Ch.''' : Check box choice for activate the function Begin and End angle of the coil unchecked by default.&lt;br /&gt; If the function is checked The accuracy is automatically set to 1 (360 points per turn 1 point = 1 degrees)


[[File:Macro FCSpring Helix Variable 02.png]]
{{clear}}

=== '''Second section, type line''' === &lt;!--T:7--&gt;
* '''BSpline''' : Type line BSpline.
* '''Wire''' : Type line Wire.
* '''Points''' : Check box point if the check box is activate one point is create of on each point.


[[File:Macro FCSpring Helix Variable 03.png]]
{{clear}}

=== Third section, coil special length === &lt;!--T:8--&gt;
* '''Numbering of coil''' : Numbering of coil to modify. (Defaut : none)
* '''Pitch of coil''' : Pitch of coil to modify. (Defaut : none) 
* {{KEY|Accept the value modified}} : Button to accept the modification after select the numbering of coil and modify the pitch of coil.
* '''Radius of coil''' : Radius of coil to modify.  (Defaut : none)
* '''Text edit''' : This window displayed all coil modified. 


[[File:Macro FCSpring Helix Variable 04.png]]
{{clear}}

=== Commands === &lt;!--T:9--&gt;
* {{KEY|Read}} : The Read button open a dialogue box to read a file '''.FCSpring'''.
* {{KEY|Save}} : The Save button open a dialogue box to save a file '''.FCSpring''' with configuration spring modify or not.
* {{KEY|Quit}} : Quit the macro.
* {{KEY|Reset}} : Reset the macro to default configuration.
* {{KEY|Launch}} : Launch the macro and create the spring configured.


[[File:Macro FCSpring Helix Variable 05.png]]
{{clear}}

=== Report view === &lt;!--T:10--&gt;
The window report view displayed all value modified.


[[File:Macro FCSpring Helix Variable 06.png]]
{{clear}}

=== Example spring === &lt;!--T:11--&gt;
Example to spring modified


[[File:Macro FCSpring Helix Variable 07.png]]
{{clear}}

=== Example Report view === &lt;!--T:12--&gt;
When the macro is launched full list of turns is displayed in tabular form.

&lt;!--T:13--&gt;
Here the data of the spring above and displayed in the Report view


[[File:Macro FCSpring Helix Variable 08.png]]
{{clear}}

===Script=== &lt;!--T:14--&gt;
Macro_FCSpring_Helix_Variable.FCMacro

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
&quot;&quot;&quot;
***************************************************************************
*   Copyright (c) 2014 &lt;mario52&gt;                                          *
*                                                                         *
*   This file is a supplement to the FreeCAD CAx development system.      *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU Lesser General Public License (LGPL)    *
*   as published by the Free Software Foundation; either version 2 of     *
*   the License, or (at your option) any later version.                   *
*   for detail see the LICENCE text file.                                 *
*                                                                         *
*   This software is distributed in the hope that it will be useful,      *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Library General Public License for more details.                  *
*                                                                         *
*   You should have received a copy of the GNU Library General Public     *
*   License along with this macro; if not, write to the Free Software     *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
*   USA                                                                   *
***************************************************************************
*           WARNING! All changes in this file will be lost and            *  
*                  may cause malfunction of the program                   *
***************************************************************************
&quot;&quot;&quot;
#
#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1

#

__title__   = &quot;Spring_Helix_Variable&quot;
__author__  = &quot;Mario52&quot;
__url__     = &quot;http://www.freecadweb.org/index-fr.html&quot;
__version__ = &quot;01.03&quot;
__date__    = &quot;07/12/2014&quot;

try:
    import PyQt4
    from PyQt4 import QtGui ,QtCore
    from PyQt4.QtGui import *
    from PyQt4.QtCore import *
except Exception:
    import PySide
    from PySide import QtGui ,QtCore
    from PySide.QtGui import *
    from PySide.QtCore import *
 
import os, time, sys
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui, FreeCAD
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base

global path
path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
#path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)

global numberSpires        ;numberSpires         = 10     # number Spires of spring
global rayon               ;rayon                = 20.0   # radius of spring
global pas                 ;pas                  = 15.0   # &quot; ! float &quot; (pas) pitch of spire
global precision           ;precision            = 5.0    # &quot; ! float &quot; 360/precision number points for 1 turn
global typeLine            ;typeLine             = 0      # typeLine 0=BSpline or 1=Wire
global helixS              ;helixS               = 0.0    # tableau
global numberSpiresModified;numberSpiresModified = 1      # number (pas) pitch to modify
global pasSpire            ;pasSpire             = 0 #pas    # (pas) pitch of spire to modify
global radiusS             ;radiusS              = 0.0    # tableau radius to modify
global rayonSpire          ;rayonSpire           = 0 #rayon  # new radius
global affPoint            ;affPoint             = 0      # aff points
global debutAngle          ;debutAngle           = 0      # begin angle rotation
global finAngle            ;finAngle             = 360    # end angle rotation
global modifyAngle         ;modifyAngle          = 0      # interrupteur angle

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

def errorDialog(msg):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg )
    try:
        diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # PyQt4 # cette fonction met la fenêtre en avant
    except Exception:    
        diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide #cette fonction met la fenêtre en avant
#    diag.setWindowModality(QtCore.Qt.ApplicationModal)       # la fonction a été désactivée pour favoriser &quot;WindowStaysOnTopHint&quot;
    diag.exec_()

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        global path
        global numberSpires
        global rayon
        global pas
        global precision
        global typeLine
        global helixS
        global pasSpire
        global radiusS

        self.window = MainWindow

        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(270, 560)
        MainWindow.setMinimumSize(QtCore.QSize(270, 560))
        MainWindow.setMaximumSize(QtCore.QSize(270, 560))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))

        self.groupBox = QtGui.QGroupBox(self.centralWidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 40, 251, 231))
        self.groupBox.setToolTip(_fromUtf8(&quot;&quot;))
        self.groupBox.setFlat(False)
        self.groupBox.setObjectName(_fromUtf8(&quot;groupBox&quot;))

        self.DS_Numb_Spires = QtGui.QSpinBox(self.groupBox)
        self.DS_Numb_Spires.setGeometry(QtCore.QRect(20, 20, 91, 22))
        self.DS_Numb_Spires.setToolTip(_fromUtf8(&quot;Number total of coil of the spring&quot;))
        self.DS_Numb_Spires.setMinimum(1)
        self.DS_Numb_Spires.setMaximum(9999999)
        self.DS_Numb_Spires.setValue(numberSpires)
        self.DS_Numb_Spires.setObjectName(_fromUtf8(&quot;DS_Numb_Spires&quot;))
        self.DS_Numb_Spires.valueChanged.connect(self.on_DS_Numb_Spires) #connection doubleSpinBox

        self.DS_Radius_Sping = QtGui.QDoubleSpinBox(self.groupBox)
        self.DS_Radius_Sping.setGeometry(QtCore.QRect(20, 80, 91, 22))
        self.DS_Radius_Sping.setToolTip(_fromUtf8(&quot;Radius of spring&quot;))
        self.DS_Radius_Sping.setDecimals(3)
#        self.DS_Radius_Sping.setMinimum(0.001)
        self.DS_Radius_Sping.setMaximum(9999999.99)
        self.DS_Radius_Sping.setValue(rayon)
        self.DS_Radius_Sping.setObjectName(_fromUtf8(&quot;DS_Radius_Sping&quot;))
        self.DS_Radius_Sping.valueChanged.connect(self.on_DS_Radius_Sping) #connection doubleSpinBox

        self.DS_Pas_Spring = QtGui.QDoubleSpinBox(self.groupBox)
        self.DS_Pas_Spring.setGeometry(QtCore.QRect(20, 50, 91, 22))
        self.DS_Pas_Spring.setToolTip(_fromUtf8(&quot;Pitch of spring (distance between two vertices)&quot;))
        self.DS_Pas_Spring.setDecimals(3)
#        self.DS_Pas_Spring.setMinimum(0.001)
        self.DS_Pas_Spring.setMaximum(9999999.99)
        self.DS_Pas_Spring.setValue(pas)
        self.DS_Pas_Spring.setObjectName(_fromUtf8(&quot;DS_Pas_Spring&quot;))
        self.DS_Pas_Spring.valueChanged.connect(self.on_DS_Pas_Spring) #connection doubleSpinBox

        self.DS_Precision_Turn = QtGui.QSpinBox(self.groupBox)
        self.DS_Precision_Turn.setGeometry(QtCore.QRect(20, 110, 91, 22))
        self.DS_Precision_Turn.setToolTip(_fromUtf8(&quot;Precision for the line (points = (360/precision))&quot;))
        self.DS_Precision_Turn.setMinimum(1)
        self.DS_Precision_Turn.setMaximum(360)
        self.DS_Precision_Turn.setValue(precision)
        self.DS_Precision_Turn.setObjectName(_fromUtf8(&quot;DS_Precision_Turn&quot;))
        self.DS_Precision_Turn.valueChanged.connect(self.on_DS_Precision_Turn) #connection doubleSpinBox

        self.label_2 = QtGui.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(120, 20, 111, 16))
        self.label_2.setToolTip(_fromUtf8(&quot;Number total of coil of the spring&quot;))
        self.label_2.setObjectName(_fromUtf8(&quot;label_2&quot;))

        self.label_3 = QtGui.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(120, 80, 111, 16))
        self.label_3.setToolTip(_fromUtf8(&quot;Radius of spring&quot;))
        self.label_3.setText(_fromUtf8(&quot;Radius of spring&quot;))
        self.label_3.setObjectName(_fromUtf8(&quot;label_3&quot;))

        self.label_4 = QtGui.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(120, 50, 111, 16))
        self.label_4.setToolTip(_fromUtf8(&quot;&quot;))
        self.label_4.setText(_fromUtf8(&quot;Pitch of spring&quot;))
        self.label_4.setObjectName(_fromUtf8(&quot;label_4&quot;))

        self.label_5 = QtGui.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(120, 110, 130, 16)) #111
        self.label_5.setToolTip(_fromUtf8(&quot;&quot;))
        self.label_5.setText(_fromUtf8(&quot;Precision = &quot; + str(360/precision) + &quot; points&quot;))
        self.label_5.setObjectName(_fromUtf8(&quot;label_5&quot;))

        self.groupBox_3 = QtGui.QGroupBox(self.groupBox)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 170, 231, 51))
        self.groupBox_3.setObjectName(_fromUtf8(&quot;groupBox_3&quot;))

        self.RA_Wire = QtGui.QRadioButton(self.groupBox_3)
        self.RA_Wire.setGeometry(QtCore.QRect(90, 20, 61, 20))
        self.RA_Wire.setToolTip(_fromUtf8(&quot;Type line BSpline&quot;))
        self.RA_Wire.setText(_fromUtf8(&quot;Wire&quot;))
#        self.RA_Wire.setChecked(True)
        self.RA_Wire.setObjectName(_fromUtf8(&quot;RA_Wire&quot;))
        self.RA_Wire.clicked.connect(self.on_RA_Wire) #connection radioButton

        self.RA_BSpline = QtGui.QRadioButton(self.groupBox_3)
        self.RA_BSpline.setGeometry(QtCore.QRect(10, 20, 71, 20))
        self.RA_BSpline.setToolTip(_fromUtf8(&quot;Type line BSpline&quot;))
        self.RA_BSpline.setText(_fromUtf8(&quot;BSpline&quot;))
        self.RA_BSpline.setChecked(True)
        self.RA_BSpline.setObjectName(_fromUtf8(&quot;RA_BSpline&quot;))
        self.RA_BSpline.clicked.connect(self.on_RA_BSpline) #connection radioButton

        self.CH_Points = QtGui.QCheckBox(self.groupBox_3)
        self.CH_Points.setEnabled(True)
        self.CH_Points.setGeometry(QtCore.QRect(160, 20, 61, 20))
        self.CH_Points.setToolTip(_fromUtf8(&quot;Check to create points to alls nodes of the precision of turn&quot;))
        self.CH_Points.setText(_fromUtf8(&quot;Ch&quot;))
#        self.CH_Points.setStatusTip(_fromUtf8(&quot;&quot;))
        self.CH_Points.setChecked(False)
        self.CH_Points.setObjectName(_fromUtf8(&quot;CH_Points&quot;))
        self.CH_Points.clicked.connect(self.on_CH_Points) #

        self.S_Begin_Angle = QtGui.QSpinBox(self.groupBox)
        self.S_Begin_Angle.setEnabled(False)
        self.S_Begin_Angle.setGeometry(QtCore.QRect(20, 140, 51, 22))
        self.S_Begin_Angle.setMinimum(0)
        self.S_Begin_Angle.setMaximum(360)
        self.S_Begin_Angle.setValue(0)
        self.S_Begin_Angle.setObjectName(_fromUtf8(&quot;S_Begin_Angle&quot;))
        self.S_Begin_Angle.valueChanged.connect(self.on_S_Begin_Angle) #

        self.S_End_Angle = QtGui.QSpinBox(self.groupBox)
        self.S_End_Angle.setEnabled(False)
        self.S_End_Angle.setGeometry(QtCore.QRect(120, 140, 51, 22))
        self.S_End_Angle.setMinimum(1)
        self.S_End_Angle.setMaximum(360)
        self.S_End_Angle.setValue(360)
        self.S_End_Angle.setObjectName(_fromUtf8(&quot;S_End_Angle&quot;))
        self.S_End_Angle.valueChanged.connect(self.on_S_End_Angle) #

        self.label_9 = QtGui.QLabel(self.groupBox)
        self.label_9.setGeometry(QtCore.QRect(80, 140, 41, 16))
        self.label_9.setObjectName(_fromUtf8(&quot;label_9&quot;))

        self.label_10 = QtGui.QLabel(self.groupBox)
        self.label_10.setGeometry(QtCore.QRect(180, 140, 31, 16))
        self.label_10.setObjectName(_fromUtf8(&quot;label_10&quot;))

        self.CH_B_E_Angle = QtGui.QCheckBox(self.groupBox)
        self.CH_B_E_Angle.setGeometry(QtCore.QRect(210, 140, 41, 20))
        self.CH_B_E_Angle.setToolTip(&quot;Check the option modify to begin and ultimate angle of coils&quot;)
        self.CH_B_E_Angle.setText(_fromUtf8(&quot;&quot;))
        self.CH_B_E_Angle.setObjectName(_fromUtf8(&quot;CB_B_E_Angle&quot;))
        self.CH_B_E_Angle.clicked.connect(self.on_CH_B_E_Angle) #connection radioButton

        self.groupBox_2 = QtGui.QGroupBox(self.centralWidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 280, 251, 201))
        self.groupBox_2.setToolTip(_fromUtf8(&quot;This section allows you to adjust the distance from the coil named. EX: 1 spire = 2 mm&quot;))
        self.groupBox_2.setCheckable(False)
        self.groupBox_2.setChecked(False)
        self.groupBox_2.setObjectName(_fromUtf8(&quot;groupBox_2&quot;))

        self.S_Numbering_Spire = QtGui.QSpinBox(self.groupBox_2)
        self.S_Numbering_Spire.setGeometry(QtCore.QRect(20, 20, 91, 22))
        self.S_Numbering_Spire.setToolTip(_fromUtf8(&quot;Numbering of coil for 1 to max = Number of coil (&quot;+str(numberSpires)+&quot;)&quot;))
        self.S_Numbering_Spire.setMinimum(1)
        self.S_Numbering_Spire.setMaximum(numberSpires)
        self.S_Numbering_Spire.setObjectName(_fromUtf8(&quot;S_Nmbering_Spire&quot;))
        self.S_Numbering_Spire.valueChanged.connect(self.on_S_Numbering_Spire) #connection SpinBox

        self.DS_Pas_Spire = QtGui.QDoubleSpinBox(self.groupBox_2)
        self.DS_Pas_Spire.setGeometry(QtCore.QRect(20, 50, 91, 22))
        self.DS_Pas_Spire.setToolTip(_fromUtf8(&quot;Pitch of the coil (The pitch is the distance betwen 2 vertices)&quot;))
        self.DS_Pas_Spire.setValue(0) #pas
        self.DS_Pas_Spire.setDecimals(3)
#        self.DS_Pas_Spire.setMinimum(0.001)
        self.DS_Pas_Spire.setMaximum(9999999.99)
        self.DS_Pas_Spire.setObjectName(_fromUtf8(&quot;DS_Pas_Spire&quot;))
        self.DS_Pas_Spire.valueChanged.connect(self.on_DS_Pas_Spire) #connection doubleSpinBox

        self.label_6 = QtGui.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(120, 20, 121, 16))
        self.label_6.setToolTip(_fromUtf8(&quot;Numbering of coil for 1 to max =  Number of coil&quot;))
        self.label_6.setText(_fromUtf8(&quot;Numbering of coil&quot;))
        self.label_6.setObjectName(_fromUtf8(&quot;label_6&quot;))

        self.label_7 = QtGui.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(120, 50, 121, 16))
        self.label_7.setToolTip(_fromUtf8(&quot;Pitch of the coil (The pitch is the distance betwen 2 vertices)&quot;))
        self.label_7.setObjectName(_fromUtf8(&quot;label_7&quot;))

        self.PU_Accept_Value = QtGui.QPushButton(self.groupBox_2)
        self.PU_Accept_Value.setGeometry(QtCore.QRect(20, 110, 211, 21))
        self.PU_Accept_Value.setToolTip(_fromUtf8(&quot;Accept the value for the coil &quot;))
        self.PU_Accept_Value.setObjectName(_fromUtf8(&quot;PU_Accept_Value&quot;))
        self.PU_Accept_Value.clicked.connect(self.on_PU_Accept_Value)

        self.textEdit = QtGui.QTextEdit(self.groupBox_2)
        self.textEdit.setGeometry(QtCore.QRect(20, 140, 211, 51))
        self.textEdit.setToolTip(_fromUtf8(&quot;List alls modification of coil &quot;))
        self.textEdit.setObjectName(_fromUtf8(&quot;textEdit&quot;))
        self.textEdit.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)

        self.DS_Radius_Spire = QtGui.QDoubleSpinBox(self.groupBox_2)
        self.DS_Radius_Spire.setGeometry(QtCore.QRect(20, 80, 91, 22))
        self.DS_Radius_Spire.setToolTip(_fromUtf8(&quot;Radiuf of coil &quot;))
        self.DS_Radius_Spire.setDecimals(3)
        self.DS_Radius_Spire.setValue(0) #rayon
#        self.DS_Radius_Spire.setMinimum(0.001)
        self.DS_Radius_Spire.setMaximum(9999999.99)
        self.DS_Radius_Spire.setObjectName(_fromUtf8(&quot;DS_Radius_Spire&quot;))
        self.DS_Radius_Spire.valueChanged.connect(self.on_DS_Radius_Spire) #connection doubleSpinBox

        self.label_8 = QtGui.QLabel(self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(120, 80, 121, 16))
        self.label_8.setToolTip(_fromUtf8(&quot;Radiuf of coil &quot;))
        self.label_8.setText(_fromUtf8(&quot;Radius of coil&quot;))
        self.label_8.setObjectName(_fromUtf8(&quot;label_8&quot;))

        self.PU_Quit = QtGui.QPushButton(self.centralWidget)
        self.PU_Quit.setGeometry(QtCore.QRect(10, 520, 81, 28))
        self.PU_Quit.setToolTip(_fromUtf8(&quot;Quit the macro&quot;))
        self.PU_Quit.setText(_fromUtf8(&quot;Quit&quot;))
        self.PU_Quit.setObjectName(_fromUtf8(&quot;PU_Quit&quot;))
        self.PU_Quit.clicked.connect(self.on_PU_Quit)

        self.PU_Launch = QtGui.QPushButton(self.centralWidget)
        self.PU_Launch.setGeometry(QtCore.QRect(180, 520, 81, 28))
        self.PU_Launch.setToolTip(_fromUtf8(&quot;launch the macro and create the spring&quot;))
        self.PU_Launch.setText(_fromUtf8(&quot;Launch &quot;))
        self.PU_Launch.setObjectName(_fromUtf8(&quot;PU_Launch&quot;))
        self.PU_Launch.clicked.connect(self.on_PU_Launch)

        self.label = QtGui.QLabel(self.centralWidget)
        self.label.setGeometry(QtCore.QRect(23, 0, 280, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setText(_fromUtf8(&quot; Spring Helix Variable &quot;))
        self.label.setObjectName(_fromUtf8(&quot;label&quot;))
        MainWindow.setCentralWidget(self.centralWidget)

        self.PU_Reset = QtGui.QPushButton(self.centralWidget)
        self.PU_Reset.setGeometry(QtCore.QRect(100, 520, 71, 28))
        self.PU_Reset.setToolTip(_fromUtf8(&quot;Reset the data &quot;))
        self.PU_Reset.setObjectName(_fromUtf8(&quot;PU_Reset&quot;))
        self.PU_Reset.clicked.connect(self.on_PU_Reset)

        self.PU_Read = QtGui.QPushButton(self.centralWidget)
        self.PU_Read.setGeometry(QtCore.QRect(10, 490, 121, 28))
        self.PU_Read.setToolTip(_fromUtf8(&quot;Read the file &quot;))
        self.PU_Read.setText(_fromUtf8(&quot;Read&quot;))
        self.PU_Read.setObjectName(_fromUtf8(&quot;on_PU_Read&quot;))
        self.PU_Read.clicked.connect(self.on_PU_Read)

        self.PU_Save = QtGui.QPushButton(self.centralWidget)
        self.PU_Save.setGeometry(QtCore.QRect(140, 490, 121, 28))
        self.PU_Save.setToolTip(_fromUtf8(&quot;Save the file&quot;))
        self.PU_Save.setText(_fromUtf8(&quot;Save&quot;))
        self.PU_Save.setObjectName(_fromUtf8(&quot;on_PU_Save&quot;))
        self.PU_Save.clicked.connect(self.on_PU_Save)

        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)        # PyQt4 cette fonction met la fenêtre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)       # PySide cette fonction met la fenêtre en avant

        MainWindow.setWindowTitle(&quot;Spring Helix Variable&quot;)
        self.groupBox.setTitle(&quot;Configure&quot;)
        self.label_2.setText(&quot;Number of coil&quot;)
        self.groupBox_3.setTitle(&quot;Type line BSpline&quot;)
        self.RA_Wire.setToolTip(&quot;Type line Wire&quot;)

        self.CH_Points.setText(&quot;Points&quot;)
        self.S_Begin_Angle.setToolTip(&quot;Begin angle first coil&quot;)
        self.S_Begin_Angle.setSuffix(&quot;°&quot;)
        self.S_End_Angle.setToolTip(&quot;End angle ultimate coil&quot;)
        self.S_End_Angle.setStatusTip(&quot;End angle to ultimate coil&quot;)
        self.S_End_Angle.setSuffix(&quot;°&quot;)
        self.label_9.setText(&quot;Begin&quot;)
        self.label_10.setText(&quot;End&quot;)
        self.CH_B_E_Angle.setText(&quot;Ch.&quot;)
        self.groupBox_2.setTitle(&quot;Coil special length&quot;)
        self.label_7.setText(&quot;Pitch of coil&quot;)
        self.PU_Accept_Value.setText(&quot;Accept the value modified&quot;)
        self.textEdit.setText(&quot;&quot;)
        self.PU_Reset.setText(&quot;Reset&quot;)

    def on_PU_Reset(self, zero = 0):                       # Reset 0=Reset total 1=Reset mise a jour
        global numberSpires
        global rayon
        global pas
        global precision
        global typeLine
        global affPoint
        global helixS
        global numberSpiresModified
        global pasSpire
        global radiusS
        global rayonSpire
        global affPoint
        global debutAngle
        global finAngle
        global modifyAngle
        
        if zero == 0:                                 # Reset total
            numberSpires         = 10
            rayon                = 20.0
            pas                  = 15.0
            precision            = 5.0
            typeLine             = 0
            affPoint             = 0
            helixS               = 0.0
            numberSpiresModified = 1
            pasSpire             = 0 #pas
            rayonSpire           = 0 #rayon
            modifyAngle          = 0
#            App.Console.PrintMessage(str(&quot;on_PU_Reset T&quot;)+&quot;\n&quot;)

        self.DS_Numb_Spires.setValue(numberSpires)
        self.DS_Radius_Sping.setValue(rayon)
        self.DS_Pas_Spring.setValue(pas)
        self.DS_Precision_Turn.setValue(precision)
        self.DS_Precision_Turn.setEnabled(True)

        self.CH_B_E_Angle.setChecked(False)
        self.S_Begin_Angle.setEnabled(False)
        debutAngle = 0
        self.S_Begin_Angle.setValue(debutAngle)
        self.S_End_Angle.setEnabled(False)
        finAngle   = 360
        self.S_End_Angle.setValue(finAngle)
        modifyAngle = 0

        self.CH_Points.setChecked(False)
        affPoint = 0

        self.S_Numbering_Spire.setValue(numberSpiresModified)
        self.DS_Pas_Spire.setValue(0) #pas
        self.DS_Radius_Spire.setValue(0) #rayon
        self.textEdit.setText(&quot;&quot;)
        self.textEdit.clear()

        helixS = []
        del helixS[:]
        helixS = numberSpires*[pas]
        radiusS = []
        del radiusS[:]
        radiusS = numberSpires*[rayon]
#        App.Console.PrintMessage(str(&quot;on_PU_Reset &quot;)+&quot;\n&quot;)

    def on_DS_Numb_Spires(self,value):          # nombre de spire total
        global pas
        global numberSpires
        global helixS
        global radiusS
        numberSpires = value
        a = ui
        a.on_PU_Reset(1)
        self.S_Numbering_Spire.setToolTip(_fromUtf8(&quot;Numbering of coil for 1 to max = Number of spires (&quot;+str(numberSpires)+&quot;)&quot;))
#        App.Console.PrintMessage(str(&quot;on_DS_Numb_Spires &quot;)+str(numberSpires)+&quot;\n&quot;)

    def on_DS_Radius_Sping(self,value):         # rayon axial du ressort
        global rayon
        rayon = value
        a = ui
        a.on_PU_Reset(1)
#        App.Console.PrintMessage(str(&quot;on_DS_Radius_Sping &quot;)+str(rayon)+&quot;\n&quot;)

    def on_DS_Pas_Spring(self,value):           # pas (pitch) du ressort
        global pas
        global numberSpires
        global helixS
        global numberSpiresModified
        global pasSpire
        global radiusS
        pas = value
        a = ui
        a.on_PU_Reset(1)
#        App.Console.PrintMessage(str(&quot;on_DS_Pas_Spring &quot;)+str(pas)+&quot;\n&quot;)

    def on_DS_Precision_Turn(self,value):        # &quot; ! float &quot; 360/precision number points for 1 turn
        global precision
        precision = value
        self.label_5.setText(_fromUtf8(&quot;Precision = &quot; + str(360/precision) + &quot; points&quot;))
#        App.Console.PrintMessage(str(&quot;on_DS_Precision_Turn &quot;)+str(precision)+&quot;\n&quot;)

    def on_S_Begin_Angle(self,value):              #
        global debutAngle
        debutAngle = value
#        App.Console.PrintMessage(str(&quot;on_S_Begin_Angle &quot;)+str(debutAngle)+&quot;\n&quot;)

    def on_S_End_Angle(self,value):                #
        global finAngle
        finAngle = value
#        App.Console.PrintMessage(str(&quot;on_S_End_Angle &quot;)+str(finAngle)+&quot;\n&quot;)

    def on_CH_B_E_Angle(self):                     #
        global debutAngle
        global finAngle
        global modifyAngle
        global precision
        if self.CH_B_E_Angle.isChecked(): 
            modifyAngle = 1
            self.S_Begin_Angle.setEnabled(True)
            self.S_End_Angle.setEnabled(True)
            precision = 1
            self.label_5.setText(_fromUtf8(&quot;Precision = &quot; + str(360/precision) + &quot; points&quot;))
            self.DS_Precision_Turn.setValue(precision)
            self.DS_Precision_Turn.setEnabled(False)
        else:
            modifyAngle = 0
            self.DS_Precision_Turn.setEnabled(True)
            self.S_Begin_Angle.setEnabled(False)
            self.S_End_Angle.setEnabled(False)
            self.CH_B_E_Angle.setChecked(False)
            self.S_Begin_Angle.setEnabled(False)
            debutAngle = 0
            self.S_Begin_Angle.setValue(debutAngle)
            self.S_End_Angle.setEnabled(False)
            finAngle   = 360
            self.S_End_Angle.setValue(finAngle)
#        App.Console.PrintMessage(str(&quot;CB_B_E_Angle &quot;)+&quot;\n&quot;)

    def on_RA_Wire(self):                        # 
        global typeLine
        typeLine = 1
#        App.Console.PrintMessage(str(&quot;on_RA_Wire &quot;)+str(typeLine)+&quot;\n&quot;)

    def on_RA_BSpline(self):                     # 
        global typeLine
        typeLine = 0
#        App.Console.PrintMessage(str(&quot;on_RA_BSpline &quot;)+str(typeLine)+&quot;\n&quot;)

    def on_CH_Points(self):                     #
        global affPoint
        if self.CH_Points.isChecked(): 
            affPoint = 1
        else:
            affPoint = 0
#        App.Console.PrintMessage(str(&quot;on_CH_Points &quot;)+&quot;\n&quot;)

    def on_S_Numbering_Spire(self,value):        # numero de la spire a modifier
#        global numberSpires
        global numberSpiresModified
        global helixS
        global radiusS
        self.S_Numbering_Spire.setMaximum(numberSpires)
        numberSpiresModified = value
#        App.Console.PrintMessage(str(&quot;on_S_Nubering_Spire &quot;)+str(numberSpiresModified)+&quot;\n&quot;)

    def on_DS_Pas_Spire(self,value):             # pas (pitch) de la spire a modifier
        global pasSpire
        pasSpire = value
#        App.Console.PrintMessage(str(&quot;on_DS_Pas_Spire &quot;)+str(pasSpire)+&quot;\n&quot;)

    def on_DS_Radius_Spire(self,value):         # pas (pitch) du rayon a modifier
        global rayonSpire
        rayonSpire = value
#        App.Console.PrintMessage(str(&quot;on_DS_Pas_Spire &quot;)+str(pasSpire)+&quot;\n&quot;)

    def on_PU_Accept_Value(self):                # accepter la modification de la spire
        global numberSpiresModified
        global pasSpire
        global rayonSpire
        global helixS
        global radiusS
        if numberSpiresModified == 1:
            helixS[0] = pasSpire
            radiusS[0]= rayonSpire
            self.textEdit.append(&quot;Coil number &quot; + str(numberSpiresModified) + &quot; = &quot; + str(helixS[0]) + &quot; &quot; + str(radiusS[0]))
            App.Console.PrintMessage(&quot;Coil number &quot; + str(numberSpiresModified) + &quot; = &quot; + str(helixS[0]) + &quot; &quot; + str(radiusS[0])+&quot;\n&quot;)
        else:
            helixS[numberSpiresModified-1] = pasSpire
            radiusS[numberSpiresModified-1]= rayonSpire
            self.textEdit.append(&quot;Coil number &quot; + str(numberSpiresModified) + &quot; = &quot; + str(helixS[numberSpiresModified-1]) + &quot; &quot; + str(radiusS[numberSpiresModified-1]))
            App.Console.PrintMessage(&quot;Coil number &quot; + str(numberSpiresModified) + &quot; = &quot; + str(helixS[numberSpiresModified-1]) + &quot; &quot; + str(radiusS[numberSpiresModified-1])+&quot;\n&quot;)
#        App.Console.PrintMessage(str(&quot;on_PU_Accept_Value &quot;)+&quot;\n&quot;)

    def on_PU_Quit(self):                        # Quit
        App.Console.PrintMessage(&quot;\n&quot;+&quot;Fin FCSpring_Helix_Variable&quot;+&quot;\n&quot;+&quot;___________________________&quot;+&quot;\n&quot;)
        self.window.hide()
#        App.Console.PrintMessage(str(&quot; &quot;)+str()+&quot;\n&quot;)

    def on_PU_Read(self):          # lecture
        global path
        global numberSpires
        global rayon
        global pas
        global precision
        global typeLine
        global affPoint
        global helixS
        global radiusS
        global debutAngle
        global finAngle
        global modifyAngle

        OpenName = &quot;&quot;
        try:
            OpenName = QFileDialog.getOpenFileName(None,QString.fromLocal8Bit(&quot;Read a file FCSpring&quot;),path,&quot;*.FCSpring&quot;) # PyQt4
        except Exception:
            OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, &quot;Read a file FCSpring&quot;, path, &quot;*.FCSpring&quot;)#PySide
        try:
            if OpenName != &quot;&quot;:
                try:
                    file = open(OpenName, &quot;r&quot;) # read
                    Header = file.readline().rstrip('\n\r')            #1
                    if (Header == &quot;FCString2&quot;) or (Header == &quot;FCString&quot;):
                        a = ui
                        a.on_PU_Reset(0)

                        self.textEdit.clear()
                        App.Console.PrintMessage(str(Header)+&quot;\n&quot;)
                        numberSpires = file.readline().rstrip('\n\r')  # 2
                        numberSpires = int(numberSpires)
                        self.DS_Numb_Spires.setValue(numberSpires)
                        App.Console.PrintMessage(str(numberSpires)+&quot;\n&quot;)

                        rayon = file.readline().rstrip('\n\r')         # 3
                        rayon = float(rayon)
                        radiusS = numberSpires*[rayon]
                        self.DS_Radius_Sping.setValue(rayon)
                        App.Console.PrintMessage(str(rayon)+&quot;\n&quot;)

                        pas = file.readline().rstrip('\n\r')           # 4
                        pas = float(pas)
                        helixS = numberSpires*[pas]
                        self.DS_Pas_Spring.setValue(pas)
                        App.Console.PrintMessage(str(pas)+&quot;\n&quot;)

                        precision = file.readline().rstrip('\n\r')     # 5
                        precision = float(precision)
                        self.DS_Precision_Turn.setValue(precision)
                        App.Console.PrintMessage(str(precision)+&quot;\n&quot;)

                        typeLine = file.readline().rstrip('\n\r')      # 6
                        typeLine = int(typeLine)
                        if typeLine == 0:
                            self.RA_BSpline.setChecked(True)
                        else:
                            self.RA_Wire.setChecked(True)
                        if (Header == &quot;FCString2&quot;):
                            self.CH_Points.setChecked(False) # reset point
                            affPoint = 0

                            debutAngle = file.readline().rstrip('\n\r')    # 7
                            self.S_Begin_Angle.setValue(int(debutAngle))

                            finAngle = file.readline().rstrip('\n\r')      # 8
                            self.S_End_Angle.setValue(int(finAngle))

                            modifyAngle = file.readline().rstrip('\n\r')   # 9
                            if modifyAngle == 0:
                                self.CH_B_E_Angle.setChecked(True) 
                            else:
                                self.CH_B_E_Angle.setChecked(False)
                            a = ui
                            a.on_CH_B_E_Angle()

                            dummy = file.readline().rstrip('\n\r')         # 10
                        dummy = file.readline().rstrip('\n\r')             # 11

                        i = 0
                        for ligne in file:
                            a , b = ligne.rstrip('\n\r').split()
                            helixS[i] = float(a)
                            radiusS[i] = float(b)
                            App.Console.PrintMessage(str(i+1)+&quot;  &quot;+str(helixS[i])+&quot;   &quot;+str(radiusS[i])+&quot;\n&quot;)
                            self.textEdit.append(&quot;Coil number &quot; + str(i+1) + &quot; = &quot; + str(helixS[i]) + &quot; &quot; + str(radiusS[i]))
                            i += 1
                    else:
                        App.Console.PrintMessage(&quot;Error file not FCSpring or not FCSpring2&quot;+&quot;\n&quot;)
                        errorDialog(&quot;Error file not FCSpring or not FCSpring2 &quot;+&quot;\n&quot;)
                finally:
                    file.close()
        except Exception:
            App.Console.PrintMessage(&quot;Error in reading the file &quot;+OpenName+&quot;\n&quot;)
            errorDialog(&quot;Error in reading the file &quot;+OpenName)

    def on_PU_Save(self):           # enregistrement
        global path
        global numberSpires
        global rayon
        global pas
        global precision
        global typeLine
        global helixS
        global radiusS
        global debutAngle
        global finAngle
        global modifyAngle

        SaveName = &quot;&quot;
        try:
            SaveName = QFileDialog.getSaveFileName(None,QString.fromLocal8Bit(&quot;Save a file FCSpring&quot;),path,&quot;*.FCSpring&quot;)    # PyQt4
        except Exception:
            SaveName, Filter = PySide.QtGui.QFileDialog.getSaveFileName(None, &quot;Save a file FCSpring&quot;, path, &quot;*.FCSpring&quot;)   # PySide
        if SaveName == &quot;&quot;:
            App.Console.PrintMessage(&quot;Process aborted&quot;+&quot;\n&quot;)
            errorDialog(&quot;Process aborted&quot;)
        else:
            App.Console.PrintMessage(&quot;Registration of &quot;+SaveName+&quot;\n&quot;)
            try:
                file = open(SaveName, 'w') # write
                try:
                    file.write(&quot;FCString2&quot;+&quot;\n&quot;)          # 1
                    file.write(str(numberSpires)+&quot;\n&quot;)    # 2
                    file.write(str(rayon)+&quot;\n&quot;)           # 3
                    file.write(str(pas)+&quot;\n&quot;)             # 4
                    file.write(str(precision)+&quot;\n&quot;)       # 5
                    file.write(str(typeLine)+&quot;\n&quot;)        # 6
                    file.write(str(debutAngle)+&quot;\n&quot;)      # 7
                    file.write(str(finAngle)+&quot;\n&quot;)        # 8
                    file.write(str(modifyAngle)+&quot;\n&quot;)     # 9
                    file.write(&quot;&quot;+&quot;\n&quot;)                   # 10
                    file.write(&quot;Coil&quot;+&quot;\t&quot;+&quot;Radius&quot;+&quot;\n&quot;) # 11
                    for i in range(numberSpires):
                        file.write(str(helixS[i])+&quot;\t&quot;+str(radiusS[i])+&quot;\n&quot;)
                finally:
                    file.close()
            except Exception:
                App.Console.PrintMessage(&quot;Error Registration file &quot;+SaveName+&quot;\n&quot;)
                errorDialog(&quot;Error Registration file &quot;+SaveName)

    def on_PU_Launch(self):                      # Execute
        global numberSpires
        global rayon
        global pas
        global precision
        global typeLine
        global helixS
        global pasSpire
        global radiusS
        global affPoint
        global debutAngle
        global finAngle
        global modifyAngle

        doc = FreeCAD.ActiveDocument
        if doc == None:
            doc = FreeCAD.newDocument()

        #### Chrono begin ##################################
        depart = time.clock()     # chrono begin          ##
        ####################################################

        coor_X = coor_Y = coor_Z = 0.0
        angleTr  = 0
        points   = []
        del   points[:]
        pas2 = 0.0
        App.Console.PrintMessage(&quot;List Helix  &quot; + str(helixS)+&quot;\n&quot;)
        App.Console.PrintMessage(&quot;List Radius &quot; + str(radiusS)+&quot;\n&quot;)
        App.Console.PrintMessage(&quot;___________________________&quot;+&quot;\n&quot;)

        for spir in range(numberSpires):                                 # number spires Helix
            pas2 = helixS[spir]

            if spir &lt;&gt; numberSpires-1:                                   # pas travail 
                pastr = ((radiusS[spir + 1]-radiusS[spir]) / (360/precision))
            else:
                pastr = 0.0

            pasRadius = radiusS[spir] # pas pour le rayon
            i = 0
            debutAngleX = 0
            finAngleX   = 360

            if modifyAngle == 1:
                if (spir == 0) :
                    debutAngleX = debutAngle

            if (spir == numberSpires-1): #or (spir == numberSpires):
                finAngleX  = finAngle + int(precision)

            for angleTr in range(0,finAngleX,int(precision)):                  #boucle for 1 turn 
                pasRadius = radiusS[spir]+((pastr*i))
                i+=1
                
                vecligne=[FreeCAD.Vector(0,0,0),FreeCAD.Vector(pasRadius ,0.0,0.0)]
                ligne = Draft.makeWire(vecligne,closed=False,face=False,support=None)      #creation de la ligne de base

                ligne.Placement = FreeCAD.ActiveDocument.Line.Placement=App.Placement(App.Vector(0.0,0.0,0.0), App.Rotation(App.Vector(0,0,1),angleTr), App.Vector(0,0,0))

                a = ligne.Shape.Edges[0].Vertexes[1]                             # fin de ligne
                coor_X = (a.Point.x)
                coor_Y = (a.Point.y)

                if angleTr &gt;= debutAngleX:
                    points += [FreeCAD.Vector(coor_X,coor_Y,coor_Z)]             # coordinates makeBSpline

                if (affPoint == 1) and (angleTr &gt;= debutAngleX):
                    point = Draft.makePoint(coor_X,coor_Y,coor_Z)                # create point repere for test
                    FreeCADGui.activeDocument().getObject(point.Name).PointColor = (1.0,0.0,0.0)

                coor_Z += (pas2 / (360/precision))                               # pas of spring

                App.ActiveDocument.removeObject(ligne.Name)                      # remove ligne de base directrice

        if typeLine == 1:
            ressort = Draft.makeWire(points,closed=False,face=False,support=None)# creation spring makeWire
        else:
#            ressort = Draft.makeBSpline(points,closed=False)                     # creation spring Draft makeBSpline
            ressort = Part.BSplineCurve()                                        # creation spring Part BSplineCurve
            ressort.interpolate(points,False)
            ressort0 = Part.Edge(ressort)
            Part.show(ressort0)
        FreeCAD.ActiveDocument.recompute()

#        pl = FreeCAD.Placement(App.Vector(0,0,0), App.Rotation(App.Vector(1,0,0),0), App.Vector(0,0,0)) # create circle
#        supp = Draft.makeCircle(rayon,placement=pl,face=True,support=None)

        #### Chrono end ####################################
        arrivee = time.clock()                                                                    # chrono end
        App.Console.PrintMessage(&quot;Time : &quot;+str(&quot;%.2f&quot; % ((arrivee - depart)/60))+&quot; min&quot;+&quot;\n\n&quot;)   # chrono end
        ####################################################
        
helixS = []
del helixS[:]
helixS = numberSpires*[pas]
radiusS = []
del radiusS[:]
radiusS = numberSpires*[rayon]

MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()


&lt;/syntaxhighlight&gt;

===Example=== &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Macro FCSpring Helix Variable 12.png| 
File:Macro FCSpring Helix Variable 13.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Macro FCSpring Helix Variable 14.png|
File:Macro FCSpring Helix Variable 15.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Macro FCSpring Helix Variable 16.png|
File:Macro FCSpring Helix Variable 17.png|
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;


===Links=== &lt;!--T:15--&gt;
The forum discussion [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=8313&amp;p=68161#p68161 Try to do a Spring]

===Project=== &lt;!--T:16--&gt;
soften fittings

&lt;!--T:26--&gt;
modify diameter to any coil :done

===Version=== &lt;!--T:17--&gt;
07/12/2014: ver 01.03 : new version with radius coil adjustable 

&lt;!--T:27--&gt;
17/11/2014: ver 1.02 : new version with GUI and modification any coil and save or load the data to disk.

&lt;!--T:18--&gt;
10/11/2014: (23h20) correction of the modification 

&lt;syntaxhighlight&gt;
ligne.Placement = App.Placement(App.Vector(0.0,0.0,0.0), App.Rotation(App.Vector(0,0,1),angleTr), App.Vector(0,0,0))
&lt;/syntaxhighlight&gt;

&lt;!--T:19--&gt;
10/11/2014: modify line 44 :

&lt;syntaxhighlight&gt;
        a = FreeCAD.ActiveDocument.Line.Placement=App.Placement(App.Vector(0.0,0.0,0.0), App.Rotation(App.Vector(0,0,1),angleTr), App.Vector(0,0,0))
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
to

&lt;syntaxhighlight&gt;
        ligne = FreeCAD.ActiveDocument.Line.Placement=App.Placement(App.Vector(0.0,0.0,0.0), App.Rotation(App.Vector(0,0,1),angleTr), App.Vector(0,0,0))
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
6/11/2014 : adding &quot;makeBSpline&quot; and configuration

===Limitations=== &lt;!--T:22--&gt;
During sweep tests here are the mistakes I have obtained !

&lt;!--T:23--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;100&quot;&gt;
File:Macro FCSpring Helix Variable 09.png|ACCESS VIOLATION
File:Macro FCSpring Helix Variable 10.png|TCollection_IndexedDataMap
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;100&quot;&gt;
File:Macro FCSpring Helix Variable 11.png|Wrong usage of punctual sections
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FCTexture</title>
    <ns>0</ns>
    <id>25001</id>
    <revision>
      <id>112563</id>
      <parentid>112561</parentid>
      <timestamp>2014-10-05T19:01:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>c6hppkv96m8g4g9t3rtf6b7o12b4z2p</sha1>
      <text xml:space="preserve" bytes="50495">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro FCTexture|Description=Creates an image 3D from a BMP image.|Author=Mario52}}

==Description== &lt;!--T:2--&gt;
This small macro allows you to build a project 3D very easily from a bitmap image 256 levels of gray.

&lt;!--T:3--&gt;
I hope that this macro will revolutionize the way of thinking the CAD and CNC any image when what can be converted to object 3D without any intervention.

&lt;!--T:4--&gt;
Everything becomes possible regardless of the complexity of the image !


&lt;!--T:5--&gt;
[[File:Texture 004 Honda.png|480px|Texture 004 Honda]]
{{clear}}

==Use== &lt;!--T:6--&gt;
This macro need an image in 256 gray levels (0-255) therefore before using the macro, convert your image into grayscale (black and white) Lowe. The number of colors is detected automatically, if the image is more than 256 colors another function is expected (to come). Each color (gray level) is regarded as a deep, white (255) the level high and black (0) the lowest level (deep).

&lt;!--T:7--&gt;
Configuration is done before the opening of the file, default values are the settings provided to get a project's dimensions:
* width of the image in points in the coordinate '''X''',
* height of the image in points in the coordinate '''Y''',
* depth or thickness of the project leaked 10 mm (in raw mode, on 256 mm) in the coordinate '''Z'''.

&lt;!--T:8--&gt;
The image file unfolds like a scanner x1 x2 x3 ... in 1 mm increments in FreeCAD similarly to the value y of 1 mm at a time. The value of z is given by the value of the color. These values are configurable in the macro.

&lt;!--T:9--&gt;
Attention: depending on the size of the image, the project can become very big! for the record an image of 100 px wide and 100 px in height gives '''100 x 100 = 10000 points''' 'and as each point corresponds to a coordinate, so '''10000 coordinates XYZ there'''.

===The interface=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[File:Texture_002.png|200px|left|Texture 002]]

&lt;!--T:12--&gt;
* '''Coordinate X:''' X coordinate of position of the object, default: 0.
* '''Coordinate Y:''' Y coordinate of position of the object, default: 0.
* '''Coordinate Z:''' coordinate Z position of the object, default: 0.
*
* '''Stetching X:''' narrowing or enlargement of the length of the object, default: 0.
* '''Stetching Y:''' narrowing or enlargement of the height of the object, default: 0.
* '''Stetching Z:''' narrowing or enlargement of the depth of the object, default: 0.
*
* '''Raw mode:''' to adjust the number of colors (depth). The default mode is 0-19 (which constitutes a filter and to obtain more details according to the complexity of the image) once the checked the mode is 0 to 255 (the entire range of colors).
* '''Capping:''' the capping function can be made on the choice of colours, white (default) or black. The degrees of capping rule 19 to 0 (or 255 to 0) if the checkbox is set on '''W''' (unchecked) or 0 to 19 (or 0 to 255) if the checkbox is set on '''B''' (checked).

&lt;!--T:13--&gt;
The beginning of the operation value automatically adapts to the selected function: 0 if the setting is on black ('''Black''') 255 or 19 if the setting is white ('''White''')
*
* '''Wire:''' build your line (vector) in the form of Wire.
* '''Bspline:''' build your line (vector) in the form of Bspline.
* '''Point:''' creates a point at each pixel (vector). (the procedure can be long)
* '''Nuance:''' If the shade option is checked the color of the point is represented as a picture
*
* '''Inversion X:''' reverse coordinates '''X''' image.
* '''Inversion Y:''' reverse coordinates '''Y''' image.
* '''Inversion Z:''' reverse coordinates '''Z''' image.
*
* '''Photo:''' the photo mode is automatically activated when a '''32-bit image''' is detected. (the procedure can be long)
* '''Plan:''' the plan allows you to import a '''32-bit image''' and ignore the background of the plan. By default the map background is black to ignore colors are adjustable with the '''Capping''' command. If White is checked, the bottom has ignore will be white. (the procedure can be long)
*
* '''File and lauch:''' opens the image file and launches the conversion.
* '''Quit:''' exits the function.

==Script== &lt;!--T:14--&gt;

FCTexture.FCMacro

&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
from __future__ import unicode_literals
&quot;&quot;&quot;
***************************************************************************
*   Copyright (c) 2014 &lt;mario52&gt;                                          *
*                                                                         *
*   This file is a supplement to the FreeCAD CAx development system.      *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU  General Public License (GPL)           *
*   as published by the Free Software Foundation; either version 3 of     *
*   the License, or (at your option) any later version.                   *
*   for detail see the LICENCE text file.                                 *
*                                                                         *
*   This software is distributed in the hope that it will be useful,      *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Library General Public License for more details.                  *
*                                                                         *
*   You should have received a copy of the GNU General Public License     *
*   License along with this macro; if not, write to the Free Software     *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
*   USA                                                                   *
***************************************************************************
*           WARNING! All changes in this file will be lost and            *  
*                  may cause malfunction of the program                   *
***************************************************************************
&quot;&quot;&quot;
# pour faire une texture de votre image, l'image doit être en 256 niveaux de gris (N/B)
# une image de 16 millons de couleurs fait l'objet d'une autre procédure d'affichage
# http://forum.freecadweb.org/viewtopic.php?f=24&amp;t=5893&amp;sid=c5f8d32c22e1d1a883741b70b1fea2dc
# ver 0.7 03/09/2014 PyQt4 and PySide
 
__title__= &quot;FCTexture&quot;
__author__ = &quot;mario52&quot;
 
try:
    import PyQt4
    from PyQt4 import QtGui ,QtCore
    from PyQt4.QtGui import *
    from PyQt4.QtCore import *
except Exception:
    import PySide
    from PySide import QtGui ,QtCore
    from PySide.QtGui import *
    from PySide.QtCore import *
 
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui, FreeCAD
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base
 
import os, time, sys
import os.path
 
 
def errorDialog(msg):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg )
    diag.setWindowModality(QtCore.Qt.ApplicationModal)
    diag.exec_()
 
def decobit(b0 = 0, b1 = 0, b2 = 0, b3 = 0):
    b0 = int(ord(b0))
    b1 = int(ord(b1))
    if b2 == 0:
        return b0 + (b1*256)
    else:
        b2 = int(ord(b2))
        b3 = int(ord(b3))
        return b0 + (b1*256) + (b2*65536) + (b3*16777216)
 
global position_X   ; position_X  = 0.0
global position_Y   ; position_Y  = 0.0
global position_Z   ; position_Z  = 0.0
global etirement_X  ; etirement_X = 1.0
global etirement_Y  ; etirement_Y = 1.0
global etirement_Z  ; etirement_Z = 1.0
global modeBrut     ; modeBrut    = 0
global modeColor    ; modeColor   = 0
global ecreter      ; ecreter     = 19
global avecLigne    ; avecLigne   = 1
global typeligne    ; typeligne   = 0
global nuance       ; nuance      = 0
global inversion_X  ; inversion_X = 0
global inversion_Y  ; inversion_Y = 0
global inversion_Z  ; inversion_Z = 0
global plan         ; plan        = 0
global fond         ; fond        = 0
global bits_pixel   ; bits_pixel  = 0
global tailleDonnees; tailleDonnees = 0
global path         ; path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
#                     path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
 
try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
 
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)
 
class Ui_MainWindow(object):
 
    def __init__(self, MainWindow):
        self.window = MainWindow
        path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;)
        global position_X
        global position_Y
        global position_Z
        global etirement_X
        global etirement_Y
        global etirement_Z
        global modeBrut
        global modeColor
        global ecreter
        global typeligne
        global nuance
        global avecLigne
        global inversion_X
        global inversion_Y
        global inversion_Z
        global plan
        global fond
        global bits_pixel
        global tailleDonnees
 
        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(263, 517)
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))
        self.frame = QtGui.QFrame(self.centralWidget)
        self.frame.setGeometry(QtCore.QRect(10, 11, 241, 101))
        self.frame.setFrameShape(QtGui.QFrame.Box)
        self.frame.setFrameShadow(QtGui.QFrame.Raised)
        self.frame.setObjectName(_fromUtf8(&quot;frame&quot;))
 
        self.doubleSpinBox_01 = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_01.setGeometry(QtCore.QRect(120, 10, 111, 22))
        self.doubleSpinBox_01.setDecimals(7)
        self.doubleSpinBox_01.setMinimum(-9999999.0)
        self.doubleSpinBox_01.setMaximum(9999999.99)
        self.doubleSpinBox_01.setSingleStep(0.0000001)
        self.doubleSpinBox_01.setObjectName(_fromUtf8(&quot;doubleSpinBox_01&quot;))
        self.doubleSpinBox_01.setToolTip(u&quot;Coordinate placement Axis X.&quot;)
        self.doubleSpinBox_01.valueChanged.connect(self.on_doubleSpinBox_01_valueChanged) #position_X connection doubleSpinBox_01
 
        self.doubleSpinBox_02 = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_02.setGeometry(QtCore.QRect(120, 40, 111, 22))
        self.doubleSpinBox_02.setDecimals(7)
        self.doubleSpinBox_02.setMinimum(-9999999.0)
        self.doubleSpinBox_02.setMaximum(9999999.99)
        self.doubleSpinBox_02.setSingleStep(0.0000001)
        self.doubleSpinBox_02.setObjectName(_fromUtf8(&quot;doubleSpinBox_02&quot;))
        self.doubleSpinBox_02.setToolTip(u&quot;Coordinate placement Axis Y.&quot;)
        self.doubleSpinBox_02.valueChanged.connect(self.on_doubleSpinBox_02_valueChanged) #position_Y connection doubleSpinBox_02
 
        self.doubleSpinBox_03 = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_03.setGeometry(QtCore.QRect(120, 70, 111, 22))
        self.doubleSpinBox_03.setDecimals(7)
        self.doubleSpinBox_03.setMinimum(-9999999.0)
        self.doubleSpinBox_03.setMaximum(9999999.99)
        self.doubleSpinBox_03.setSingleStep(0.0000001)
        self.doubleSpinBox_03.setObjectName(_fromUtf8(&quot;doubleSpinBox_03&quot;))
        self.doubleSpinBox_03.setToolTip(u&quot;Coordinate placement Axis Z.&quot;)
        self.doubleSpinBox_03.valueChanged.connect(self.on_doubleSpinBox_03_valueChanged) #position_Z connection doubleSpinBox_03
 
        self.label = QtGui.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.label.setObjectName(_fromUtf8(&quot;label&quot;))
        self.label_2 = QtGui.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(12, 40, 81, 20))
        self.label_2.setObjectName(_fromUtf8(&quot;label_2&quot;))
        self.label_3 = QtGui.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(12, 70, 81, 20))
        self.label_3.setObjectName(_fromUtf8(&quot;label_3&quot;))
 
        self.frame_2 = QtGui.QFrame(self.centralWidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 120, 241, 101))
        self.frame_2.setFrameShape(QtGui.QFrame.Box)
        self.frame_2.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_2.setObjectName(_fromUtf8(&quot;frame_2&quot;))
 
        self.doubleSpinBox_1 = QtGui.QDoubleSpinBox(self.frame_2)
        self.doubleSpinBox_1.setGeometry(QtCore.QRect(120, 10, 111, 22))
        self.doubleSpinBox_1.setDecimals(7)
        self.doubleSpinBox_1.setMinimum(-9999999.0)
        self.doubleSpinBox_1.setMaximum(9999999.99)
        self.doubleSpinBox_1.setSingleStep(0.0000001)
        self.doubleSpinBox_1.setObjectName(_fromUtf8(&quot;doubleSpinBox_1&quot;))
        self.doubleSpinBox_1.setToolTip(u&quot;Stretching Axis X.&quot;)
        self.doubleSpinBox_1.valueChanged.connect(self.on_doubleSpinBox_1_valueChanged) #etirement_X connection doubleSpinBox_1
 
        self.doubleSpinBox_2 = QtGui.QDoubleSpinBox(self.frame_2)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(120, 40, 111, 22))
        self.doubleSpinBox_2.setDecimals(7)
        self.doubleSpinBox_2.setMinimum(-9999999.0)
        self.doubleSpinBox_2.setMaximum(9999999.99)
        self.doubleSpinBox_2.setSingleStep(0.0000001)
        self.doubleSpinBox_2.setObjectName(_fromUtf8(&quot;doubleSpinBox_2&quot;))
        self.doubleSpinBox_2.setToolTip(u&quot;Stretching Axis Y.&quot;)
        self.doubleSpinBox_2.valueChanged.connect(self.on_doubleSpinBox_2_valueChanged) #etirement_Y connection doubleSpinBox_2
 
        self.doubleSpinBox_3 = QtGui.QDoubleSpinBox(self.frame_2)
        self.doubleSpinBox_3.setGeometry(QtCore.QRect(120, 70, 111, 22))
        self.doubleSpinBox_3.setDecimals(7)
        self.doubleSpinBox_3.setMinimum(-9999999.0)
        self.doubleSpinBox_3.setMaximum(9999999.99)
        self.doubleSpinBox_3.setSingleStep(0.0000001)
        self.doubleSpinBox_3.setObjectName(_fromUtf8(&quot;doubleSpinBox_3&quot;))
        self.doubleSpinBox_3.setToolTip(u&quot;Stretching Axis Z.&quot;)
        self.doubleSpinBox_3.valueChanged.connect(self.on_doubleSpinBox_3_valueChanged) #etirement_Z connection doubleSpinBox_3
 
        self.label_4 = QtGui.QLabel(self.frame_2)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 101, 16))
        self.label_4.setObjectName(_fromUtf8(&quot;label_4&quot;))
        self.label_5 = QtGui.QLabel(self.frame_2)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 101, 16))
        self.label_5.setObjectName(_fromUtf8(&quot;label_5&quot;))
        self.label_6 = QtGui.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(10, 70, 81, 16))
        self.label_6.setObjectName(_fromUtf8(&quot;label_6&quot;))
 
        self.frame_3 = QtGui.QFrame(self.centralWidget)
        self.frame_3.setGeometry(QtCore.QRect(10, 230, 241, 61))
        self.frame_3.setFrameShape(QtGui.QFrame.Box)
        self.frame_3.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_3.setObjectName(_fromUtf8(&quot;frame_3&quot;))
        self.label_7 = QtGui.QLabel(self.frame_3)
        self.label_7.setGeometry(QtCore.QRect(10, 30, 101, 16))
        self.label_7.setObjectName(_fromUtf8(&quot;label_7&quot;))
 
        self.checkBox_5 = QtGui.QCheckBox(self.frame_3)
        self.checkBox_5.setGeometry(QtCore.QRect(120, 10, 81, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_5.sizePolicy().hasHeightForWidth())
        self.checkBox_5.setSizePolicy(sizePolicy)
        self.checkBox_5.setBaseSize(QtCore.QSize(0, 0))
        self.checkBox_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox_5.setAutoFillBackground(False)
        self.checkBox_5.setObjectName(_fromUtf8(&quot;checkBox_5&quot;))
        self.checkBox_5.setToolTip(u&quot;Raw mode 256 colors or 19 colors&quot;)
        self.checkBox_5.clicked.connect(self.on_checkBox_5_clicked)        #connection checkBox_5 mode brut
 
        self.checkBox_6 = QtGui.QCheckBox(self.frame_3)
        self.checkBox_6.setGeometry(QtCore.QRect(120, 30, 61, 20))
        self.checkBox_6.setObjectName(_fromUtf8(&quot;checkBox_6&quot;))
        self.checkBox_6.setToolTip(u&quot;Capping color White or Black&quot;)
        self.checkBox_6.clicked.connect(self.on_checkBox_6_clicked)        #connection checkBox_6 mode W or B
 
        self.label_8 = QtGui.QLabel(self.frame_3)
        self.label_8.setGeometry(QtCore.QRect(10, 10, 71, 16))
        self.label_8.setObjectName(_fromUtf8(&quot;label_8&quot;))
 
        self.spinBox = QtGui.QSpinBox(self.frame_3)
        self.spinBox.setGeometry(QtCore.QRect(180, 30, 51, 22))
        self.spinBox.setMinimum(0)
        self.spinBox.setMaximum(19)
        self.spinBox.setValue(19)
#        self.spinBox.setProperty(&quot;value&quot;, 19)
        self.spinBox.setObjectName(_fromUtf8(&quot;spinBox&quot;))
        self.spinBox.setToolTip(u&quot;Capping [0 to 19 (black) 19 to 0 (white) normal mode] or [0 to 255 (black) 255 to 0 (white) Raw mode]&quot;)
        self.spinBox.valueChanged.connect(self.on_spinBox_valueChanged) # ecreter connection spinBox
 
        self.frame_4 = QtGui.QFrame(self.centralWidget)
        self.frame_4.setGeometry(QtCore.QRect(10, 300, 241, 61))
        self.frame_4.setFrameShape(QtGui.QFrame.Box)
        self.frame_4.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_4.setObjectName(_fromUtf8(&quot;frame_4&quot;))
 
        self.radioButton_3 = QtGui.QRadioButton(self.frame_4)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 10, 95, 20))
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setObjectName(_fromUtf8(&quot;radioButton_3&quot;))
        self.radioButton_3.setToolTip(u&quot;Make a Wire&quot;)
        self.radioButton_3.clicked.connect(self.on_radioButton_3_clicked) #connection radioButton_3 type makeWire
 
        self.radioButton_4 = QtGui.QRadioButton(self.frame_4)
        self.radioButton_4.setGeometry(QtCore.QRect(140, 10, 95, 20))
        self.radioButton_4.setObjectName(_fromUtf8(&quot;radioButton_4&quot;))
        self.radioButton_4.setToolTip(u&quot;Make a BSpline&quot;)
        self.radioButton_4.clicked.connect(self.on_radioButton_4_clicked) #connection radioButton_4 type BSpline
 
        self.checkBox_4 = QtGui.QCheckBox(self.frame_4)
        self.checkBox_4.setGeometry(QtCore.QRect(140, 30, 81, 20))
        self.checkBox_4.setObjectName(_fromUtf8(&quot;checkBox_4&quot;))
        self.checkBox_4.setEnabled(False)
        self.checkBox_4.setToolTip(u&quot;To display items in mode photo with shade of gray 19 or 256 shades of gray if Raw mode is set 255&quot;)
        self.checkBox_4.clicked.connect(self.on_checkBox_4_clicked)       #connection checkBox_4 nuance
 
        self.radioButton_2 = QtGui.QRadioButton(self.frame_4)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 30, 95, 20))
        self.radioButton_2.setObjectName(_fromUtf8(&quot;radioButton_2&quot;))
        self.radioButton_2.setToolTip(u&quot;Make a Point (the procedure can be long)&quot;)
        self.radioButton_2.clicked.connect(self.on_radioButton_2_clicked) #connection radioButton_2 mode point
 
        self.frame_6 = QtGui.QFrame(self.centralWidget)
        self.frame_6.setGeometry(QtCore.QRect(10, 370, 111, 81))
        self.frame_6.setFrameShape(QtGui.QFrame.Box)
        self.frame_6.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_6.setObjectName(_fromUtf8(&quot;frame_6&quot;))
 
        self.checkBox_1 = QtGui.QCheckBox(self.frame_6)
        self.checkBox_1.setGeometry(QtCore.QRect(10, 10, 111, 20))
        self.checkBox_1.setObjectName(_fromUtf8(&quot;checkBox_1&quot;))
        self.checkBox_1.setToolTip(u&quot;Inversion coordinate X&quot;)
        self.checkBox_1.clicked.connect(self.on_checkBox_1_clicked)        #connection checkBox_1 X
 
        self.checkBox_2 = QtGui.QCheckBox(self.frame_6)
        self.checkBox_2.setGeometry(QtCore.QRect(10, 30, 111, 20))
        self.checkBox_2.setObjectName(_fromUtf8(&quot;checkBox_2&quot;))
        self.checkBox_2.setToolTip(u&quot;Inversion coordinate Y&quot;)
        self.checkBox_2.clicked.connect(self.on_checkBox_2_clicked)        #connection checkBox_2 Y
 
        self.checkBox_3 = QtGui.QCheckBox(self.frame_6)
        self.checkBox_3.setGeometry(QtCore.QRect(10, 50, 101, 20))
        self.checkBox_3.setObjectName(_fromUtf8(&quot;checkBox_3&quot;))
        self.checkBox_3.setToolTip(u&quot;Inversion coordinate Z&quot;)
        self.checkBox_3.clicked.connect(self.on_checkBox_3_clicked)        #connection checkBox_3 Z
 
        self.pushButton = QtGui.QPushButton(self.centralWidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 480, 111, 28))
        self.pushButton.setObjectName(_fromUtf8(&quot;pushButton&quot;))
        self.pushButton.setToolTip(u&quot;Load the file and launch the process&quot;)
        self.pushButton.clicked.connect(self.on_pushButton_En_clicked)     # load file
 
        self.pushButton_2 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_2.setGeometry(QtCore.QRect(140, 480, 111, 28))
        self.pushButton_2.setObjectName(_fromUtf8(&quot;pushButton_2&quot;))
        self.pushButton_2.setToolTip(u&quot;Quit FCTexture&quot;)
        self.pushButton_2.clicked.connect(self.on_pushButton_Quit_clicked) # quit
 
        self.label_9 = QtGui.QLabel(self.centralWidget)
        self.label_9.setGeometry(QtCore.QRect(10, 460, 241, 16))
        self.label_9.setObjectName(_fromUtf8(&quot;label_9&quot;))
 
        self.frame_7 = QtGui.QFrame(self.centralWidget)
        self.frame_7.setGeometry(QtCore.QRect(140, 370, 111, 80))
        self.frame_7.setFrameShape(QtGui.QFrame.Box)
        self.frame_7.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_7.setObjectName(_fromUtf8(&quot;frame_7&quot;))
 
        self.radioButton_5 = QtGui.QRadioButton(self.frame_7)
        self.radioButton_5.setGeometry(QtCore.QRect(10, 10, 95, 20))
        self.radioButton_5.setChecked(True)
        self.radioButton_5.setObjectName(_fromUtf8(&quot;radioButton_5&quot;))
        self.radioButton_5.setToolTip(u&quot;The photo mode is automatically activated when a 32-bit image is detected. (the procedure can be long)&quot;)
        self.radioButton_5.clicked.connect(self.on_radioButton_5_clicked)  #connection radioButton_5 Photo
 
        self.radioButton_6 = QtGui.QRadioButton(self.frame_7)
        self.radioButton_6.setGeometry(QtCore.QRect(10, 30, 95, 20))
        self.radioButton_6.setObjectName(_fromUtf8(&quot;radioButton_6&quot;))
        self.radioButton_6.setToolTip(u&quot;The plan mode is possible when a 32-bit image and ignore the background of the plan. (the procedure can be long)&quot;)
        self.radioButton_6.clicked.connect(self.on_radioButton_6_clicked)  #connection radioButton_6 Plan
 
        MainWindow.setCentralWidget(self.centralWidget)
 
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
 
    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(&quot;FCTexture&quot;)
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)        # PyQt4 cette fonction met la fenêtre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)        # PySide cette fonction met la fenêtre en avant
        self.label.setText(&quot;Coordinate  X&quot;)
        self.label_2.setText(&quot;Coordinate  Y&quot;)
        self.label_3.setText(&quot;Coordinate  Z&quot;)
        self.label_6.setText(&quot;Stretching  Z&quot;)
        self.label_4.setText(&quot;Stretching  X&quot;)
        self.label_5.setText(&quot;Stretching  Y&quot;)
        self.label_7.setText(&quot;Capping&quot;)
        self.radioButton_2.setText(&quot;Point&quot;)
        self.radioButton_4.setText(&quot;BSpline&quot;)
        self.radioButton_3.setText(&quot;Wire&quot;)
        self.checkBox_1.setText(&quot;Inversion X&quot;)
        self.checkBox_2.setText(&quot;Inversion Y&quot;)
        self.checkBox_3.setText(&quot;Inversion Z&quot;)
        self.radioButton_5.setText(&quot;Photo&quot;)
        self.radioButton_6.setText(&quot;Plan&quot;)
        self.checkBox_4.setText(&quot;Nuance&quot;)
        self.checkBox_5.setText(&quot;19&quot;)
        self.checkBox_6.setText(&quot;White&quot;)
        self.label_8.setText(&quot;Raw mode&quot;)
        self.pushButton.setText(&quot;File and launch&quot;)
        self.pushButton_2.setText(&quot;Quit&quot;)
        self.label_9.setText(&quot;File :&quot;)
        self.label_9.setToolTip(u&quot;Gives informations about the file (Bits_pixel, Size data, Length, Height)&quot;)
 
    def on_doubleSpinBox_01_valueChanged(self,value): # connection doubleSpinBox_01 Coordinate  X
        global position_X
        position_X = value
 
    def on_doubleSpinBox_02_valueChanged(self,value): # connection doubleSpinBox_02 Coordinate  Y
        global position_Y
        position_Y = value
 
    def on_doubleSpinBox_03_valueChanged(self,value): # connection doubleSpinBox_03 Coordinate  Z
        global position_Z
        position_Z = value
 
    def on_doubleSpinBox_1_valueChanged(self,value):  # connection doubleSpinBox_1 Stretching  X
        global etirement_X
        etirement_X = value
 
    def on_doubleSpinBox_2_valueChanged(self,value):  # connection doubleSpinBox_2 Stretching  Y
        global etirement_Y
        etirement_Y = value
 
    def on_doubleSpinBox_3_valueChanged(self,value):  # connection doubleSpinBox_3 Stretching  Z
        global etirement_Z
        etirement_Z = value
 
    def on_checkBox_5_clicked(self):                  # if checked mode brut
        global modeBrut
        global ecreter
        if self.checkBox_5.isChecked():
            modeBrut = 1                              # if checked mode brut = 255 colors
            self.spinBox.setMaximum(255)
            self.checkBox_5.setText(&quot;255&quot;)
            if  self.checkBox_6.isChecked():          # if Black
                self.spinBox.setValue(0)
                ecreter  = 0
            else:
                self.spinBox.setValue(255)
                ecreter  = 255
        else:
            modeBrut = 0                              # if nochecked White mode brut = 19 colors
            self.spinBox.setMaximum(19)
            self.checkBox_5.setText(&quot;19&quot;)
            if  self.checkBox_6.isChecked():          # if Black
                self.spinBox.setValue(0)
                ecreter  = 0
            else:
                self.spinBox.setValue(19)             # if White
                ecreter  = 19

    def on_checkBox_6_clicked(self):                  # if checked ecreter Black else White
        global modeColor
        global ecreter
        if self.checkBox_6.isChecked():
            modeColor = 1                              # if checked mode Black
            self.checkBox_6.setText(&quot;Black&quot;)
            self.spinBox.setValue(0)
            self.spinBox.setObjectName(_fromUtf8(&quot;spinBox&quot;))
        else:
            modeColor = 0                              # if nochecked mode White
            self.checkBox_6.setText(&quot;White&quot;)
            if self.checkBox_5.isChecked():
                self.spinBox.setValue(255)
            else:
                self.spinBox.setValue(19)
 
    def on_spinBox_valueChanged(self,value):           # ecreter
        global ecreter
        ecreter = value
 
    def on_radioButton_3_clicked(self):                # if checked then 0=makeWire N/B
        global typeligne
        global avecLigne
        typeligne = 0
        avecLigne = 1
        self.checkBox_4.setChecked(False)
        self.checkBox_4.setEnabled(False)
 
    def on_radioButton_4_clicked(self):                # if no checked then 1=BSpline N/B
        global typeligne
        global avecLigne
        typeligne = 1
        avecLigne = 1
        self.checkBox_4.setChecked(False)
        self.checkBox_4.setEnabled(False)
    def on_radioButton_2_clicked(self):                # if checked then mode point N/B
        global avecLigne
        avecLigne = 0
        self.checkBox_4.setEnabled(True)
 
    def on_checkBox_1_clicked(self):                   # if checked inverse X
        global inversion_X
        if self.checkBox_1.isChecked():
            inversion_X  = 1
        else:
            inversion_X  = 0
 
    def on_checkBox_2_clicked(self):                   # if checked inverse X
        global inversion_Y
        if self.checkBox_2.isChecked():
            inversion_Y  = 1
        else:
            inversion_Y  = 0
 
    def on_checkBox_3_clicked(self):                   # if checked inverse X
        global inversion_Z
        if self.checkBox_3.isChecked():
            inversion_Z  = 1
        else:
            inversion_Z  = 0
 
    def on_radioButton_5_clicked(self):                # if checked then Photo colors
        global plan
        plan = 0
 
    def on_radioButton_6_clicked(self):                # if checked then Plan colors
        global plan
        global modeBrut
        global ecreter
        plan = 1
        modeBrut = 1                                   # if checked mode brut = 255 colors
        ecreter  = 255
        self.spinBox.setObjectName(_fromUtf8(&quot;spinBox&quot;))
        self.spinBox.setMaximum(255)
        self.spinBox.setValue(255)
        self.checkBox_6.setText(&quot;White&quot;)
        self.checkBox_5.setText(&quot;255&quot;)
        self.checkBox_5.setChecked(True)
        App.Console.PrintMessage(&quot;checkBox_5 ecreter   : &quot;+str(ecreter)+&quot;\n&quot;) # ici

    def on_checkBox_4_clicked(self):                   # if checked fond Black else White
        global nuance
        if self.checkBox_4.isChecked():
            nuance = 1                                 # if checked Nuance ok
        else:
            nuance = 0                                 # if nochecked Nuance Ko
 
    def on_pushButton_Quit_clicked(self):
        App.Console.PrintMessage(&quot;Terminé&quot;+&quot;\n&quot;)
        self.window.hide()
 
    def on_pushButton_En_clicked(self):
        global position_X
        global position_Y
        global position_Z
        global etirement_X
        global etirement_Y
        global etirement_Z
        global modeBrut
        global modeColor
        global ecreter
        global typeligne
        global avecLigne
        global inversion_X
        global inversion_Y
        global inversion_Z
        global plan
        global fond
        global bits_pixel
        global tailleDonnees
 
#        Configuration FCTexture
#        App.Console.PrintMessage(&quot;position_X  : &quot;+str(position_X)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;position_Y  : &quot;+str(position_Y)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;position_Z  : &quot;+str(position_Z)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;etirement_X : &quot;+str(etirement_X)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;etirement_Y : &quot;+str(etirement_Y)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;etirement_Z : &quot;+str(etirement_Z)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;ecreter     : &quot;+str(ecreter)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;wire        : &quot;+str(avecLigne)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;typeligne   : &quot;+str(typeligne)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;point       : &quot;+str(avecLigne)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;inversion_X : &quot;+str(inversion_X)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;inversion_Y : &quot;+str(inversion_Y)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;inversion_Z : &quot;+str(inversion_Z)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;plan        : &quot;+str(plan)+&quot;\n&quot;)
#        App.Console.PrintMessage(&quot;fond        : &quot;+str(fond)+&quot;\n&quot;)
 
        self.label_9.setText(&quot;File :&quot;)
        OpenName = &quot;&quot;
        try:
            OpenName = QFileDialog.getOpenFileName(None,QString.fromLocal8Bit(&quot;Read an image file&quot;),path,&quot;*.Bmp&quot;) # PyQt4
        except Exception:
            OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, &quot;Read an image file&quot;, path, &quot;*.Bmp&quot;)#PySide
        try:
            if OpenName != &quot;&quot;:
                depart = time.clock()
                App.Console.PrintMessage(&quot;Read the file &quot;+OpenName+&quot;\n&quot;)
                f = open(OpenName, &quot;rb&quot;)
                length = os.path.getsize(OpenName)
                                 # decode header file
                bytes = f.read(2)# Signature du fichier. BM=Bitmap windows, BA= Bitmap
    #            App.Console.PrintMessage(str(bytes[0]) + str(bytes[1])+&quot;\n&quot;)
                bytes = f.read(4)# Taille totale du fichier en octets
                bytes = f.read(4)# Champ réservé
 
                bytes = f.read(4)# Adresse de la zone de définition de l’image 
                adresse = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(adresse)+&quot; adresse &quot;+&quot;\n&quot;)
 
                bytes = f.read(4)# Taille en octets de l'en-tête BITMAPINFOHEADER
                entete = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(entete)+&quot; entete &quot;+&quot;\n&quot;)
 
                bytes = f.read(4)# Largeur de l’image en pixels
                Largeur = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(Largeur)+&quot; Largeur &quot;+&quot;\n&quot;)
 
                bytes = f.read(4)# Hauteur de l’image en pixels
                hauteur = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(hauteur)+&quot; hauteur &quot;+&quot;\n&quot;)
 
                bytes = f.read(2)# Nombre de plans
                plans = decobit(bytes[0],bytes[1])
    #            App.Console.PrintMessage(str(plans)+&quot; plans &quot;+&quot;\n&quot;)
                bytes = f.read(2)# Nombre de bits par pixel
                bits_pixel = decobit(bytes[0],bytes[1])
                App.Console.PrintMessage(str(bits_pixel)+&quot; bits_pixel &quot;+&quot;\n&quot;)
                bytes = f.read(4)# Type de compression : 0=pas de compression,1=compressé à 8 bits par pixel, 2=4bits par pixel.
 
                bytes = f.read(4)# Taille en octets des données de l’image
                tailleDonnees = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(tailleDonnees)+&quot; tailleDonnees &quot;+&quot;\n&quot;)
 
                bytes = f.read(4)# Résolution horizontale en pixels par mètre
                bytes = f.read(4)# Résolution verticale en pixels par mètre
 
                bytes = f.read(4)# Nombre de couleurs dans l’image : 0=maximum possible. Si une palette est utilisée, ce nombre indique le nombre de couleurs de la palette
                couleurs = decobit(bytes[0],bytes[1],bytes[2],bytes[3])
    #            App.Console.PrintMessage(str(couleurs)+&quot; couleurs &quot;+&quot;\n&quot;)
 
                bytes = f.read(4)# Nombre de couleurs importantes. 0= toutes importantes 
 
                self.label_9.setText(&quot;File: &quot;+str(bits_pixel)+&quot;:bits &quot; +str(tailleDonnees)+&quot;:data (&quot;+str(Largeur)+&quot; x &quot;+str(hauteur)+&quot;)&quot;)
 
                f.seek(adresse, 0) # seek(position, 0=defaut 1=à la position courante 2=à partir de la fin du fichier)
 
                coor_X   = 0.0
                coor_Y   = 0.0
                coor_Z   = 0.0
        ###########256 couleurs début#####################################
                if couleurs == 256:
                    completion = Largeur % 4
                    ii = 0
                    pnts = []
                    points = []
                    del pnts[:]
                    del points[:]
 
                    for Y in range(tailleDonnees):
                        ii += 1
                        try:
                            bytes = ord(f.read(1))
                            pnts.append(str(bytes))
                        except:
                            None
                        try:
                            if ((ii % Largeur) == 0) and (completion &gt; 0):
                                if completion == 3:
                                    bytes = (f.read(1))
                                    Y += 1
                                elif completion == 2:
                                    bytes = (f.read(2))
                                    Y += 2
                                elif completion == 1:
                                    bytes = (f.read(3))
                                    Y += 3
                                ii = 0
                        except:
                            None
 
                    f.close()
                    ii = 0
                    for Y in range(hauteur):
                        for X in range(Largeur):
                            if X &gt; Largeur:
                                del points[:]
                            else:
                                if modeBrut == 0:
                                    if  float(pnts[ii])  &gt; 225:  # 19        Filter
                                        pnts[ii] = &quot;10&quot;
                                    elif float(pnts[ii]) &gt; 212:  # 18
                                        pnts[ii] = &quot;9.5&quot;
                                    elif float(pnts[ii]) &gt; 200:  # 17
                                        pnts[ii] = &quot;9&quot;
                                    elif float(pnts[ii]) &gt; 187:  # 16
                                        pnts[ii] = &quot;8.5&quot;
                                    elif float(pnts[ii]) &gt; 175:  # 15
                                        pnts[ii] = &quot;8&quot;
                                    elif float(pnts[ii]) &gt; 162:  # 14
                                        pnts[ii] = &quot;7.5&quot;
                                    elif float(pnts[ii]) &gt; 150:  # 13
                                        pnts[ii] = &quot;7&quot;
                                    elif float(pnts[ii]) &gt; 137:  # 12
                                        pnts[ii] = &quot;6.5&quot;
                                    elif float(pnts[ii]) &gt; 125:  # 11
                                        pnts[ii] = &quot;6&quot;
                                    elif float(pnts[ii]) &gt; 112:  # 10
                                        pnts[ii] = &quot;5.5&quot;
                                    elif float(pnts[ii]) &gt; 100:  # 9
                                        pnts[ii] = &quot;5&quot;
                                    elif float(pnts[ii]) &gt; 87:   # 8
                                        pnts[ii] = &quot;4.5&quot;
                                    elif float(pnts[ii]) &gt; 75:   # 7
                                        pnts[ii] = &quot;4&quot;
                                    elif float(pnts[ii]) &gt; 62:   # 6
                                        pnts[ii] = &quot;3.5&quot;
                                    elif float(pnts[ii]) &gt; 50:   # 5
                                        pnts[ii] = &quot;3&quot;
                                    elif float(pnts[ii]) &gt; 37:   # 4
                                        pnts[ii] = &quot;2.5&quot;
                                    elif float(pnts[ii]) &gt; 25:   # 3
                                        pnts[ii] = &quot;2&quot;
                                    elif float(pnts[ii]) &gt; 12:   # 2
                                        pnts[ii] = &quot;1.5&quot;
                                    elif float(pnts[ii]) &gt; 1:    # 1
                                        pnts[ii] = &quot;1&quot;
                                    else :
                                        pnts[ii] = &quot;0&quot;           # 0
 
                                if modeBrut == 0:                                 # ecreter 19 colors
                                    if modeColor == 0:
                                        if float(pnts[ii]) &gt; ((ecreter + 1) / 2): # ecreter White
                                            pnts[ii] = str((ecreter + 1) / 2)
                                    else:
                                        if float(pnts[ii]) &lt; ((ecreter + 1) / 2): # ecreter Black
                                            pnts[ii] = str((ecreter + 1) / 2)
                                else:                                             # ecreter 255 colors
                                    if modeColor == 0:
                                        if float(pnts[ii]) &gt; ecreter:             # ecreter White
                                            pnts[ii] = str(ecreter)
                                    else:
                                        if float(pnts[ii]) &lt; ecreter:             # ecreter Black
                                            pnts[ii] = str(ecreter)
 
                                coor_X = (X * etirement_X) + position_X
                                coor_Y = (Y * etirement_Y) + position_Y
                                coor_Z = (float(pnts[ii]) * etirement_Z) + position_Z
 
                                if inversion_X &gt; 0:
                                    coor_X = (-coor_X)
                                if inversion_Y &gt; 0:
                                    coor_Y = (-coor_Y)
                                if inversion_Z &gt; 0:
                                    coor_Z = (-coor_Z)
 
                                try:
                                    if avecLigne == 1:                                   # 0=point 1=Ligne
                                        points += [FreeCAD.Vector(coor_X,coor_Y,coor_Z)]
                                    else:
                                        if nuance == 1:                                  # 1 = nuance
                                            a = Draft.makePoint(coor_X,coor_Y,coor_Z)
                                            FreeCADGui.activeDocument().getObject(a.Label).PointColor = (coor_Z*0.00392157,coor_Z*0.00392157,coor_Z*0.00392157)
                                        else:
                                            Draft.makePoint(coor_X,coor_Y,coor_Z)
                                except:
                                    App.Console.PrintError(&quot;Not ActiveDocument detected &quot;+&quot;\n&quot;) #errorDialog(&quot;Not ActiveDocument detected&quot;)
                                    break
 
                                ii += 1
                        try:
                            if avecLigne == 1:
                                if typeligne == 0:                                       # 0=makeWire
                                    Draft.makeWire(points,closed=False,face=False,support=None)
                                else:
                                    Draft.makeBSpline(points,closed=False)               # 0=makeBSpline 
                        except:
                            App.Console.PrintError(&quot;Not ActiveDocument detected &quot;+&quot;\n&quot;) #errorDialog(&quot;Not ActiveDocument detected&quot;)
                            break
                        del points[:]
 
        ##256 couleurs fin#####################################
        #
        ###########16 millions couleurs debut###########################
                elif bits_pixel == 32:  #if couleurs == 0:     # 16 millions couleurs  pour 32 bits mode 1 bit
 
                    if adresse == 138:                         # mode 2 bits
                        bytes = (f.read(1))
 
                    completion = Largeur % 4
                    ii = 0
                    ic = 0
                    r_color = 0.0
                    v_color = 0.0
                    b_color = 0.0
                    pnts = []
                    points = []
                    del pnts[:]
                    del points[:]
 
                    for Y in range(tailleDonnees):
                        ii = 0
                        for ic in range(3):
                            ii += 1
                            try:
                                bytes = ord(f.read(1))
                                pnts.append(str(bytes))
                            except:
                                None
                        f.read(1)
                        ii += 1
                        try:
                            if ((ii % Largeur) == 0) and (completion &gt; 0):
                                if completion == 3:
                                    bytes = ord(f.read(1))
                                    Y += 1
                                elif completion == 2:
                                    bytes = ord(f.read(2))
                                    Y += 2
                                elif completion == 1:
                                    bytes = ord(f.read(3))
                                    Y += 3
                        except:
                            None
 
                    f.close()
                    ii = 0
                    for Y in range(hauteur):
                        for X in range(Largeur):
                            if X &gt; Largeur:
                                del points[:]
                            else:
 
                                coor_X = (X * etirement_X) + position_X
                                coor_Y = (Y * etirement_Y) + position_Y
                                coor_Z = (    etirement_Z) + position_Z
 
                                if inversion_X &gt; 0:
                                    coor_X = (-coor_X)
                                if inversion_Y &gt; 0:
                                    coor_Y = (-coor_Y)
                                if inversion_Z &gt; 0:
                                    coor_Z = (-coor_Z)
                                b_color = float(pnts[ii])*0.00392157
                                ii += 1
                                v_color = float(pnts[ii])*0.00392157
                                ii += 1
                                r_color = float(pnts[ii])*0.00392157
                                ii += 1
                                try:
                                    if plan == 0:                                                                               # 0=Photo
                                        a = Draft.makePoint(coor_X,coor_Y,coor_Z)                                               # ok pour 32 bits mode 
                                        FreeCADGui.activeDocument().getObject(a.Label).PointColor = (r_color,v_color,b_color)
                                    else:                                                                                       # 1=Plan
                                        if modeColor == 0:                                                                      # white background
                                            if (r_color &lt; (ecreter*0.00392157)) and (r_color &lt; (ecreter*0.00392157)) and (r_color &lt; (ecreter*0.00392157)): # ecreter White
                                                a = Draft.makePoint(coor_X,coor_Y,coor_Z)
                                                FreeCADGui.activeDocument().getObject(a.Label).PointColor = (r_color,v_color,b_color)
                                        else:                                                                                   # black background
                                            if (r_color &gt; (ecreter*0.00392157)) and (r_color &gt; (ecreter*0.00392157)) and (r_color &gt; (ecreter*0.00392157)): # ecreter Black
                                                a = Draft.makePoint(coor_X,coor_Y,coor_Z)
                                                FreeCADGui.activeDocument().getObject(a.Label).PointColor = (r_color,v_color,b_color)
                                except:
                                    App.Console.PrintError(&quot;Not ActiveDocument detected &quot;+&quot;\n&quot;)
                                    break
                        del points[:]
        ###########16 millions couleurs fin#####################################
                else:
                    App.Console.PrintError(&quot;Bits_pixel &quot;+str(bits_pixel)+&quot; unrecognized format&quot;+&quot;\n&quot;)
 
                arrivee = time.clock()
                App.Console.PrintMessage(&quot;Time : &quot;+str(&quot;%.2f&quot; % ((arrivee - depart)/60))+&quot; min&quot;+&quot;\n&quot;)
                App.Console.PrintMessage(&quot;_End FCTexture_____________&quot;+&quot;\n&quot;)
 
        except:
            App.Console.PrintMessage(&quot;Error in reading the file &quot;+OpenName+&quot;\n&quot;)
            errorDialog(u&quot;Error in reading the file &quot;+OpenName)
 
MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()

&lt;/syntaxhighlight&gt;

==Example== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
The images were inclined to enhance the 3D effect.
&lt;center&gt;
&lt;gallery widths=&quot;600&quot; heights=&quot;300&quot;&gt;
File:FCTexture_008.png|Honda&lt;br /&gt;
&lt;/gallery&gt;
&lt;/center&gt;


&lt;!--T:23--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Texture Nano Photo.png|Here an example of a bmp image converted to points and restoring picture the width of the image is 6.5 nm&lt;br /&gt;[http://forum.freecadweb.org/viewtopic.php?f=24&amp;t=5893#p47075 thanks for the permission of Yorik]
Image:Texture NanoDesign.png|Here an example of a bmp image converted to object 3D of 6.7 nm width.&lt;br /&gt; [http://forum.freecadweb.org/viewtopic.php?f=24&amp;t=5893#p47075 thanks for the permission of Yorik]
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Texture 001 Logo.png|The logo of FreeCAD.
Image:Texture 002 Fe FC.png|A portion of the screen FreeCAD. The [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4708&amp;start=10#p46353 file].
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
Image:Texture_003_napperon.png|A portion of a tablecloth.
Image:Texture_005_larme.png|A diamond plate.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:FCTexture 006.png|Mode Plan: the image on the left the white background has been ignored in the right image the colour black has been ignored  (an [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=6123&amp;hilit=teobo&amp;start=10#p49024 example] on the forum)
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Texture Topographie.png|Topography from a drawing or each level is represented with a degrees of different color.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;gallery widths=&quot;600&quot; heights=&quot;300&quot;&gt;
File:FCTexture_007_FreeCAD_ASCII_00.png|Image converted in ASCII caracter.
&lt;/gallery&gt;
&lt;/center&gt;
&lt;br /&gt;

==Links== &lt;!--T:17--&gt;
The discussion on [http://forum.freecadweb.org/viewtopic.php?f=24&amp;t=5893 the forum] to give your impressions or contact me.

&lt;!--T:19--&gt;
[http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4708&amp;start=10#p46353 apply hair cell texture]

&lt;!--T:24--&gt;
[http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=6123&amp;hilit=teobo&amp;start=10#p49024 How to handle pdf import properly and feasibly?]

==Revision== &lt;!--T:18--&gt;

&lt;!--T:20--&gt;
*ver 0.7 : 03/09/2014 Delete &quot;'''translate'''&quot; forgotten and bug fix discovered by the passage of PyQt to Pyside !
*ver 0.6 : 26/08/2014 Delete all &quot;'''_translate'''&quot;
*ver 0.5 : 25/08/2014 Delete &quot;'''_translate (&quot; MainWindow &quot;,'''&quot; Stretching X &quot;''', None)'''&quot; that prevented the display of tooltip with PySide (Windows Vista)

&lt;!--T:22--&gt;
*ver 0.4 : 08/08/2014 PyQt4 PySide

&lt;!--T:21--&gt;
*ver 0.3 : 28/03/2014 :comment out the line &quot;'''#        self.checkBox_5.setAccessibleName(_fromUtf8(&quot;&quot;))'''&quot;
that causes an error with the version FreeCAD : Version: 0.14.3343 (Git), Python version: 2.7.6, Qt version: 4.8.5


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FaceToSketch</title>
    <ns>0</ns>
    <id>18512</id>
    <revision>
      <id>57900</id>
      <parentid>57899</parentid>
      <timestamp>2013-12-24T18:21:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ge5r8c71km1a4f52r3k3oon3vrhn8ah</sha1>
      <text xml:space="preserve" bytes="714">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=FaceToSketch|Description=Converts a face into a sketch without constraints.|Author=Jreinhardt}}

&lt;!--T:2--&gt;
This macro breaks down your form with function {{KEY|[[Image:Draft Downgrade.png|16px]] [[Draft Downgrade]]}} and transforms the face selected in a sketch without constraints, and ready to be modified.



&lt;syntaxhighlight&gt;
import Draft
  
wires,_faces = Draft.downgrade(FreeCADGui.Selection.getSelection(),delete=True)
  
sketch = Draft.makeSketch(wires[0:1])
for wire in wires[1:]:
    Draft.makeSketch([wire],addTo=sketch)
  
for wire in wires:
    FreeCAD.ActiveDocument.removeObject(wire.Name)
&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro FlattenWire</title>
    <ns>0</ns>
    <id>1400</id>
    <revision>
      <id>133477</id>
      <parentid>57843</parentid>
      <timestamp>2014-12-26T20:23:17Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>delete spaces</comment>
      <sha1>qf1ryvsscgpog5zrumu3kuzwtmptix5</sha1>
      <text xml:space="preserve" bytes="539">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=FlattenWire|Description=This macro flattens draft wires that are not plane to their median Z coordinate|Author=Yorik}}

&lt;!--T:2--&gt;
This macro flattens draft wires that are not plane to their median Z coordinate


{{Code|code=
import FreeCAD
obj = FreeCAD.ActiveDocument.ActiveObject
z = 0
for p in obj.Points: z += p.z
z = z/len(obj.Points)
newpoints = []
for p in obj.Points: newppoints.append(FreeCAD.Vector(p.x,p.y,z))
obj.Points = newppoints

}}
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro ForceRecompute</title>
    <ns>0</ns>
    <id>40447</id>
    <revision>
      <id>134319</id>
      <parentid>134301</parentid>
      <timestamp>2014-12-27T18:02:49Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Mistakenly deleted the languages tag</comment>
      <sha1>fy8j8ubhagjul6ecfeq4bptryxf33ns</sha1>
      <text xml:space="preserve" bytes="728">
&lt;!--T:1--&gt;
{{Macro|Icon=Force_Recompute|Name=Macro Force Recompute|Description=Forces manual recompute of model|Author=shoogen}}

&lt;!--T:2--&gt;
Sometimes the user applies changes to the model in FreeCAD.
But FreeCAD does not seem to recognize them.
So the blue &quot;Recompute&quot; icon [[File:View-refresh.svg|16px]] stayes greyed out.
This small macro forces a manual recompute of the model.

===Use=== &lt;!--T:3--&gt;
Just run the macro when needed.

===Script=== &lt;!--T:4--&gt;
Macro Force_Recompute.py


{{Code|code=
# -*- coding: utf-8 -*-
# Force Recompute
# macro provided by shoogen

import FreeCAD
for obj in FreeCAD.ActiveDocument.Objects:
 obj.touch()
FreeCAD.ActiveDocument.recompute()

}}
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Geneva Wheel</title>
    <ns>0</ns>
    <id>41132</id>
    <revision>
      <id>110980</id>
      <parentid>110979</parentid>
      <timestamp>2014-09-22T20:58:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sfwsog8o5jvmypvsymii3qa9m74wrkj</sha1>
      <text xml:space="preserve" bytes="3107">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Geneva Wheel|Description=Allows the user to create a Geneva wheel mechanism from scratch. Must edit values within the Macro to alter the size of the object.|Author=Drei}}

==How To Use== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
ToDo

==Link== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Macro_Geneva_Wheel_GUI|Macro Geneva Wheel GUI]]:  A GUI front end based on this macro that allows the user to create a Geneva wheel  mechanism from scratch. 

==Macro== &lt;!--T:6--&gt;

&lt;syntaxhighlight&gt;
#Creation of a Geneva Wheel with Parametric values  By: Isaac Ayala (drei)
#This Macro creates the main parts of a Geneva Wheel Mechanism 

#It depends on six values that must be altered in the following code
#The variables are a, b, n, p, t and h. 

#Definition for each variable
#    Input
#a = Drive Crank Radius
#b = Geneva Wheel Radius
#n = Driven Slot Quantity
#p = Drive Pin Diameter
#t = Tolerance
#h = Height
#    Output
#c = Distance Between Centers
#s = Slot Center Width
#w = Slot Width
#y = Stop Arc Radius
#z = Stop Disc Radius
#v = Clearance Arc

#Please note that you can alter the code so it depends on five values exclusively
#Just replace c, and either a or b with the following
#    Keep value for a
#c = a/math.sin(math.pi/n)
#b = math.sqrt((math.pow(c,2))-(math.pow(a,2)))
#    Keep value for b
#c = b/math.cos(math.pi/n)
#a = math.sqrt((math.pow(c,2))-(math.pow(b,2)))

from __future__ import division
import time
import math
from PySide import QtCore, QtGui
from FreeCAD import Base
import Part

#Inputs
a = 25.0
b = 60.0
n = 6
p = 4
t = 0.01
h = 5
T = 60

#Outputs
c = math.sqrt(pow(a,2) + pow(b,2))
s = a + b - c
w = p + t
y = a - (1.5 * p)
z = y - t
v = (b * z)/a 

#    Create the Drive Crank (Will be placed on the origin)
driveCrank = Part.makeCylinder(z, h)
driveCrank.translate(Base.Vector(0,0,0))

genevaWheelClearanceCut = Part.makeCylinder(b, h)
genevaWheelClearanceCut.translate(Base.Vector(-c,0,0))

driveCrank = driveCrank.cut(genevaWheelClearanceCut)

driveCrankBase = Part.makeCylinder((1.5*a), h)
driveCrankBase.translate(Base.Vector(0,0,-h))

driveCrank = driveCrank.fuse(driveCrankBase)

drivePin = Part.makeCylinder(p,h)
drivePin.translate(Base.Vector(-a,0,0))

driveCrank = driveCrank.fuse(drivePin)

#    Create the Geneva  Wheel (Will be placed on the x-axis on the left side)
genevaWheel = Part.makeCylinder(b,h)
genevaWheel.translate(Base.Vector(-c,0,0))

stopArc = Part.makeCylinder(y, h)
stopArc.translate(Base.Vector(((y-(b/2)),0,0)))
stopArc.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),30)

for i in range(6):
    stopArc.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),60)
    genevaWheel = genevaWheel.cut(stopArc)

slotLength = Part.makeBox(s,(2*w),h)
slotLength.translate(Base.Vector(-a,-w,0))

slotRadius = Part.makeCylinder(w,h)
slotRadius.translate(Base.Vector(-a,0,0))

slot=slotLength.fuse(slotRadius)

for i in range(6):
    slot.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),60)
    genevaWheel = genevaWheel.cut(slot)

#    Display Result

Part.show(driveCrank)
Part.show(genevaWheel)
&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Geneva Wheel GUI</title>
    <ns>0</ns>
    <id>41131</id>
    <revision>
      <id>111567</id>
      <parentid>111566</parentid>
      <timestamp>2014-09-29T17:20:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>847casachch8pme92drlrcrfp0rbahy</sha1>
      <text xml:space="preserve" bytes="6683">
&lt;!--T:1--&gt;
{{Macro|Icon=GW_Dim|Name=Geneva Wheel GUI|Description=A GUI front end that allows the user to create a Geneva wheel  mechanism from scratch. Based on drei's [[Macro Geneva Wheel|Macro Geneva Wheel]]|Author=quick61}}

==How To Use== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
To use this Macro, copy it to your FreeCAD Macro directory and include the graphic image  [http://www.freecadweb.org/wiki/images/8/8d/GW_Dim.png GW_Dim.png] below in the same directory as the Macro.


&lt;!--T:4--&gt;
[[File:GW_Dim.png|center|Copy and include this graphic with the macro.]]

==Screenshot== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
[[File:New GW GUI.png|Screenshot of Macro and result.]]

==Macro== &lt;!--T:7--&gt;

&lt;syntaxhighlight&gt;
#Creation of a Geneva Wheel with Parametric values  By: Isaac Ayala (drei) &amp; Mark Stephen (quick61)
#This Macro creates the main parts of a Geneva Wheel Mechanism 

#It depends on six values that must be altered in the following code
#The variables are a, b, n, p, t and h.

#Definition for each variable
#    Input
#a = Drive Crank Radius
#b = Geneva Wheel Radius
#p = Drive Pin Radius
#t = Geneva Wheel Tolerance
#h = Geneva Wheel Height 
#n = Driven Slot Quantity
#    Output
#c = Distance Between Centers
#s = Slot Center Width
#w = Slot Width
#y = Stop Arc Radius
#z = Stop Disc Radius
#v = Clearance Arc

#Please note that you can alter the code so it depends on five values exclusively
#Just replace c, and either a or b with the following
#    Keep value for a
#c = a/math.sin(math.pi/n)
#b = math.sqrt((math.pow(c,2))-(math.pow(a,2)))
#    Keep value for b
#c = b/math.cos(math.pi/n)
#a = math.sqrt((math.pow(c,2))-(math.pow(b,2)))

from __future__ import division
import math
from FreeCAD import Base
from PySide import QtGui, QtCore
from PySide.QtGui import QApplication, QDialog, QMainWindow
import Part
import Draft
class p():


   def Ggear(self):

      try:
         #Inputs
         a = float(self.dCr.text())
         #b = float(self.gWr.text())
         p = float(self.dPd.text())
         t = float(self.gWt.text())
         h = float(self.gWh.text())
         n = float(self.gWn.text())

         #Outputs
         #c = math.sqrt(pow(a,2) + pow(b,2))
         c = a/math.sin(math.pi/n)
         b = math.sqrt((math.pow(c,2))-(math.pow(a,2)))
         s = a + b - c
         w = p + t
         y = a - (3 * p)
         z = y - t
         v = (b * z)/a
         m = math.sqrt((v**2)+(z**2)) # Solves for location of clearance cut axis

         #    Create the Drive Crank (Will be placed on the origin)
         driveCrank = Part.makeCylinder(z, h)
         #driveCrank.translate(Base.Vector(0,0,0))

         #genevaWheelClearanceCut = Part.makeCylinder(b, h)
         #genevaWheelClearanceCut.translate(Base.Vector(-c,0,0))

         genevaWheelClearanceCut = Part.makeCylinder(v, h)
         genevaWheelClearanceCut.translate(Base.Vector(-m,0,0))

         driveCrank = driveCrank.cut(genevaWheelClearanceCut)

         driveCrankBase = Part.makeCylinder((a+(2*p)), h)
         driveCrankBase.translate(Base.Vector(0,0,-h))

         driveCrank = driveCrank.fuse(driveCrankBase)

         drivePin = Part.makeCylinder(p,h)
         drivePin.translate(Base.Vector(-a,0,0))

         driveCrank = driveCrank.fuse(drivePin)

         #    Create the Geneva  Wheel (Will be placed on the x-axis on the left side)
         genevaWheel = Part.makeCylinder(b,h)
         genevaWheel.translate(Base.Vector(-c,0,0))

         stopArc = Part.makeCylinder(y, h)
         stopArc.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),(180/n))

         for i in range(int(n)):
            stopArc.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),(360/n))
            genevaWheel = genevaWheel.cut(stopArc)

         slotLength = Part.makeBox(s,(2*w),h)
         slotLength.translate(Base.Vector(-a,-w,0))

         slotRadius = Part.makeCylinder(w,h)
         slotRadius.translate(Base.Vector(-a,0,0))

         slot=slotLength.fuse(slotRadius)

         for i in range(int(n)):
            slot.rotate(Base.Vector(-c,0,0),Base.Vector(0,0,1),(360/n))
            genevaWheel = genevaWheel.cut(slot)

         #    Display Result

         Part.show(driveCrank)
         Part.show(genevaWheel)

      except:
         FreeCAD.Console.PrintError(&quot;Unable to complete task. Please recheck your data entries.&quot;)

      self.close()

   def close(self):
      self.dialog.hide()

   def __init__(self):
      self.dialog = None

      self.dialog = QtGui.QDialog()
      self.dialog.resize(240,100)

      self.dialog.setWindowTitle(&quot;Geneva Wheel Macro&quot;)
      la = QtGui.QVBoxLayout(self.dialog)

      DCR = QtGui.QLabel(&quot;Drive Crank Radius ( A )&quot;)
      la.addWidget(DCR)
      self.dCr = QtGui.QLineEdit()
      la.addWidget(self.dCr)

      #GWR = QtGui.QLabel(&quot;Geneva Wheel Radius ( B )&quot;)
      #la.addWidget(GWR)
      #self.gWr = QtGui.QLineEdit()
      #la.addWidget(self.gWr)

      DPD = QtGui.QLabel(&quot;Drive Pin Radius ( C )&quot;)
      la.addWidget(DPD)
      self.dPd = QtGui.QLineEdit()
      la.addWidget(self.dPd)

      GWT = QtGui.QLabel(&quot;Geneva Wheel Tolerance ( D )&quot;)
      la.addWidget(GWT)
      self.gWt = QtGui.QLineEdit()
      la.addWidget(self.gWt)

      GWH = QtGui.QLabel(&quot;Geneva Wheel Height&quot;)
      la.addWidget(GWH)
      self.gWh = QtGui.QLineEdit()
      la.addWidget(self.gWh)

      GWN = QtGui.QLabel(&quot;Driven Slot Quantity&quot;)
      la.addWidget(GWN)
      self.gWn = QtGui.QLineEdit()
      la.addWidget(self.gWn)

      #
      # - Include graphic image in dialog window - 
      #
      # Insure that image is in the same directory as this Macro.
      # Image should be available from same source as Macro.
      #
  
      import os
      macro_dir = os.path.dirname(__file__)
      self.PiX = QtGui.QLabel()
      self.PiX.setPixmap(os.path.join(macro_dir, &quot;GW_Dim.png&quot;))

      hbox = QtGui.QHBoxLayout()
      hbox.addStretch()
      hbox.addWidget(self.PiX)
      hbox.addStretch()
      
      la.addSpacing(15)
      la.addLayout(hbox)
      la.addSpacing(15)

      # - End Image layout -

      okbox = QtGui.QDialogButtonBox(self.dialog)
      okbox.setOrientation(QtCore.Qt.Horizontal)
      okbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
      la.addWidget(okbox)
      QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;accepted()&quot;), self.Ggear)
      QtCore.QObject.connect(okbox, QtCore.SIGNAL(&quot;rejected()&quot;), self.close)
      QtCore.QMetaObject.connectSlotsByName(self.dialog)
      self.dialog.show()
      self.dialog.exec_()

p()
&lt;/syntaxhighlight&gt;


==Links== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
This Macro is based on [[Macro Geneva Wheel|Macro Geneva Wheel]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro HealArcs</title>
    <ns>0</ns>
    <id>1632</id>
    <revision>
      <id>81688</id>
      <parentid>57891</parentid>
      <timestamp>2014-05-05T20:34:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>IndentationError</comment>
      <sha1>k6p4k5i7gs6w8afgvod74zi3lyvjq0r</sha1>
      <text xml:space="preserve" bytes="1109">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=HealArcs|Description=Sometimes arcs are transformed into BSplines, for example when scale operations have been applied to them. This macro recreates valid arcs from them. Useful before exporting to dxf|Author=Yorik}}

&lt;!--T:2--&gt;
Sometimes arcs are transformed into BSplines, for example when scale operations have been applied to them. This macro recreates valid arcs from them. Useful before exporting to dxf



&lt;syntaxhighlight&gt;
try:
    import DraftGeomUtils as fcgeo
except:
    from draftlibs import fcgeo
import FreeCAD,FreeCADGui,Part

sel = FreeCADGui.Selection.getSelection()
if not sel:
    FreeCAD.Console.PrintWarning(&quot;Select something first!&quot;)
else:
    removeList = []
    for obj in sel:
        ed = obj.Shape.Edges[0]
        arc = fcgeo.arcFromSpline(ed)
        if arc:
            Part.show(arc)
            removeList.append(obj.Name)
    FreeCAD.ActiveDocument.recompute()
    print &quot;removing &quot;,removeList
    for n in removeList:
        FreeCAD.ActiveDocument.removeObject(n)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro JointWire</title>
    <ns>0</ns>
    <id>1402</id>
    <revision>
      <id>57863</id>
      <parentid>57862</parentid>
      <timestamp>2013-12-24T18:11:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>228ofah3t4u4d18t7rqxy69ag1ymcii</sha1>
      <text xml:space="preserve" bytes="2925">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=JointWire|Description=This macro allow to find and joint all non connected edge to the closest non connected one using a line. It take a shape matrix in entry ( [shape1,shape2,...])|Author=Tremblou}}

&lt;!--T:2--&gt;
This macro allow to find and joint all non connected edge to the closest non connected one using a line. It take a shape matrix in entry ( [shape1,shape2,...])



&lt;syntaxhighlight&gt;

 def findWires(edges):
    def verts(shape):
                return [shape.Vertexes[0].Point,shape.Vertexes[-1].Point]
        def group(shapes):
                shapesIn = shapes[:]
                pointTst = []
        pointOut =[]
        for s in shapesIn :
            pointTst=pointTst+[s.Vertexes[0].Point]
            pointTst=pointTst+[s.Vertexes[-1].Point]
        print pointTst               
        changed = False
                for s in shapesIn:
                        if len(s.Vertexes) &lt; 2:
                print &quot;one vertex, its a circle, just add&quot;
                        else:                             
                                for v in verts(s):
                    twoDot=0
                                        for vv in pointTst:
                                                if v == vv:
                            twoDot=twoDot+1                           
                        if v==vv and twoDot==2 :                   
                            changed = True
                            print &quot;found matching vert&quot;
                            break
                                    if twoDot&lt;2:
                        print &quot;didn't find any matching vert...&quot;
                        pointOut.append(v)
         print &quot;Dots non connected&quot;, pointOut
                return(changed,pointOut)
    def joint(point):
        for p in range(len(point)/2) :
            print point
            deltI=Part.Vertex(100,100,100).Point
            pos=1
            for pp in range(len(point)-1) :
                print &quot;position:&quot;,pp+1
                if len(point)-1&gt;1:
                    deltN=(point[0]-point[pp+1])
                    if deltN.Length&lt;deltI.Length:
                        deltI=deltN
                        pos=pp+1
                        print &quot;changement&quot;,pos
                else:
                    pos=1   
            print &quot;points a joindre&quot;,point[0],point[pos]
            if point[0]!=point[pos]:
                Part.show(Part.makePolygon([point[0],point[pos]]))
            else:
                print &quot;WARNING les points ont la meme valeurs &quot;
            point.pop(0)
            point.pop(pos-1)
        point=0 #to have a return normally void
        return(point)
    working = True
        edgeSet = edges
    result = group(edgeSet)
        working = result[0]
        edgeSet = result[1]
    joint(result[1])
        return result[1]

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Line Length</title>
    <ns>0</ns>
    <id>24016</id>
    <revision>
      <id>103557</id>
      <parentid>81811</parentid>
      <timestamp>2014-08-08T12:19:58Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>minor add &quot;.0&quot;</comment>
      <sha1>45fjz4qd2xj05bpae6dod0pogjcj8ap</sha1>
      <text xml:space="preserve" bytes="1721">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro Line Length|Description=Creates a line giving as an argument the XYZ coordinates, length, and angle.|Author=mario52}}

&lt;!--T:2--&gt;
This small macro create a line giving as an argument the XYZ coordinates, length, and angle

===Use=== &lt;!--T:3--&gt;
Can be used from the Freecad macro editor.

&lt;!--T:4--&gt;
If the macro is copied in the Python console, you can you can use it by:


&lt;syntaxhighlight&gt;
&gt;&gt;&gt; line_length(x1 = 0, y1 = 0, z1 = 0, length = 10, angle = 45)
&lt;/syntaxhighlight&gt;


&lt;!--T:5--&gt;
or choice


&lt;syntaxhighlight&gt;
&gt;&gt;&gt; line_length(x1 = 10, y1 = 10, z1 = 0, length = 50)

&gt;&gt;&gt; line_length(length = 50, angle = 45)
&lt;/syntaxhighlight&gt;


&lt;!--T:6--&gt;
the default values are : x1 = 0, y1 = 0, z1 = 0, length = 10, angle = 0

===Script=== &lt;!--T:7--&gt;
Macro Line_Length.py


&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# créer une ligne avec une coordonnée une longueur et un angle sur le plan X Y
# create line with coordinate length and angle to plane X Y
import FreeCAD, FreeCADGui, Draft
from math import cos, sin, radians
#from FreeCAD import Base
 
def line_length(x1 = 0.0, y1 = 0.0, z1 = 0.0, length = 10.0, angle = 0.0):
    x2 = x1 + (length * cos(radians(angle)))
    y2 = y1 + (length * sin(radians(angle)))
    z2 = z1 #+ ()
    Draft.makeWire([FreeCAD.Vector(x1,y1,z1),FreeCAD.Vector(x2,y2,z2)])
 
x1 = 0.0          # Edit coordinate x1 origin
y1 = 0.0          # Edit coordinate y1 origin
z1 = 0.0          # Edit coordinate z1 origin
length = 50.0       # Edit length
angle  = 45.0       # Edit angle plane XY
 
line_length(x1, y1, z1, length, angle)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro MacroMenu</title>
    <ns>0</ns>
    <id>38936</id>
    <revision>
      <id>133487</id>
      <parentid>103563</parentid>
      <timestamp>2014-12-26T21:43:06Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>delete spaces</comment>
      <sha1>tt7asck2acoipat58hwbcvehvhd4ji0</sha1>
      <text xml:space="preserve" bytes="1290">

&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro MacroMenu|Description=Adds the macros found in the macros folder to the FreeCAD Macros menu|Author=Yorik}}


&lt;!--T:2--&gt;
This code was part of the [[Draft Module]] and has been removed cf [http://freecadweb.org/tracker/view.php?id=490 issue #490].



'''Macro MacroMenu.FCMacro'''
{{Code|code=

import os,FreeCAD,FreeCADGui
 
macrosList = []
macroPath = FreeCAD.ParamGet(&quot;User parameter:BaseApp/Preferences/Macro&quot;).GetString(&quot;MacroPath&quot;) 
 
class MacroCommand():
    &quot;A template for macro commands&quot;
    def __init__(self,macroname):
        self.macroname = macroname
 
    def GetResources(self):
        return {'Pixmap'  : 'Draft_Macro',
                'MenuText': self.macroname,
                'ToolTip': 'Executes the '+self.macroname+' macro'}
 
    def Activated(self):
        target = macroPath+os.sep+self.macroname+'.FCMacro'
        if os.path.exists(target): execfile(target)
            
if macroPath and os.path.isdir(macroPath):
    macros = []
    for f in os.listdir(macroPath):
        if &quot;.FCMacro&quot; in f:
            macros.append(f[:-8])
    for m in macros:
        cmd = 'Macro_'+m
        FreeCADGui.addCommand(cmd,MacroCommand(m))
        macrosList.append(cmd)

}}

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Make Circle 3 Points</title>
    <ns>0</ns>
    <id>4981</id>
    <revision>
      <id>103548</id>
      <parentid>81768</parentid>
      <timestamp>2014-08-08T11:37:21Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>PyQt4 and PySide</comment>
      <sha1>eoqdvobsle6cd3rnb08uedcoonqt01s</sha1>
      <text xml:space="preserve" bytes="29457">
&lt;!--T:1--&gt;
{{Macro|Icon=Macro_Draft_Circle_3_Points|Name=Macro Make Circle 3 Points|Description=Creates a circle from 3 points or shapes selected.|Author=Mario52}}

==Description== &lt;!--T:2--&gt;
This macro creates a circle circumscribed on 3 selected points, orthogonal manner or in 3D at the option space. Points can be objects such as cubes, cylinders,... then selected coordinates will be the centre of these forms.
 

[[File:Macro Draft Circle 3 Points01.png|480px|Circle built on 3 selected points]]
{{clear}}
==Use== &lt;!--T:3--&gt;
Select 3 points, or forms in the 3D view and run the macro.&lt;br /&gt;
If the shape is a line, the coordinate will be the center of the line.
 
[[File:Circle_on_3_points.png|Circle_on_3_points]]
{{clear}}

==Options== &lt;!--T:4--&gt;
===Mode :===
'''Defaut :''' 
: Mode by default, creates a circle on the three points or shapes in 3d space.
: The order of selection of fear forms influencing the angle '''AXIS''' and reverse the inclination of the circle. In this case, reverse or change the order of selection of the shapes.
: Coordinates '''X, Y, Z''' value '''0''' or alignment does not allow calculation, can return a division by zero error, and translated by '''The three points are aligned'''

&lt;!--T:5--&gt;
'''Vue Face :'''
: Creates the circle in the front views of the form chosen, 1, 2 or 3
'''Vue Dessus :'''
:Creates the circle in the top on the form chosen view, 1, 2 or 3
'''Vue Droite :'''
:Creates the circle in the view of right on the form chosen, 1, 2 or 3

===Alignement sur :=== &lt;!--T:6--&gt;
'''Forme 1, 2, 3'''
: Forms, in the order of their selections.

===Afficher le centre :=== &lt;!--T:7--&gt;
: If this box is checked, a point on the centre of the built circle will be created

===Associer les couleurs=== &lt;!--T:8--&gt;
:If this box is checked, the circle will take the colour of the relevant view,
::View-Top (X,Y) = Blue(axe Z)
::View-Front (Z,X) = Green(Axe Y)
::View-Left (Z,Y) = Red(Axe X)

 
&lt;!--T:9--&gt;
{{clear}}
&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;100&quot;&gt;
File:Macro Draft Circle 3 Points02.png|Circumcircle on 3 forms (front view), 
File:Macro Draft Circle 3 Points03.png|in an orthogonal manner on the form chosen (right view)
File:Macro Draft Circle 3 Points04.png|
File:Macro Draft Circle 3 Points05.png|Three bystanders orthogonal circles by the form chosen.
&lt;/gallery&gt;
&lt;/center&gt;


==Script== &lt;!--T:10--&gt;
The file should be copied to &quot; '''C:/Program Files/FreeCAD0.13/''' &quot; If you want to put it in another directory, modify the path to line 53

&lt;syntaxhighlight&gt;
         path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;) # chemin
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
[[Image:View-Top.png]] [[Image:View-Left.png]] [[Image:View-Front.png]] [[Image:View-C3P.png]]

&lt;!--T:12--&gt;
The three icons must be in the same directory as the module.&lt;br /&gt;
To download them, resting your mouse over the icon and then right-click and ''' save image as...'''

&lt;!--T:13--&gt;
The file '''Make_Circle_3_Points/fr.FCMacro''':



&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# Cercle sur 3 points.py
# create a circle from 3 points selected
# combination of the two programs 'create a circle from 3 points selected'
# with as options (orthogonal) circle can be built on a choice plans
# to coordinate one of the three selected choice shapes
# mode by default, creates the circle in 3D space
# the options create the circle of orthogonal way on the map and view the choice
# with the creation of a central color related to the axes Y/N Y/N
# 04/03/2013 # 24/03/2013 # 08/08/2014 by mario52
# the formula adapted (with permission of its author) by &quot;mario52&quot; for orthogonal circles comes from
# http://www-obs.univ-lyon1.fr/labo/fc/Ateliers_archives/ateliers_2005-06/cercle_3pts.pdf
# read the note in pdf, on the order of selection points,
# If the formula returns an error (example the 3 points in the same alignment)
# the formula adapted by &quot;galou_breizh&quot; for the cecle in 3D space comes from
# http://en.wikipedia.org/wiki/Circumscribed_circle
# the window is always visible and allows you to work on other programs
# as for example to select other items in FreeCAD

#08/08/2014 PyQt4 and PySide

#OS: Windows Vista
#Word size: 32-bit
#Version: 0.14.3700 (Git)
#Branch: releases/FreeCAD-0-14
#Hash: 32f5aae0a64333ec8d5d160dbc46e690510c8fe1
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1

try:
    import PyQt4
    from PyQt4 import QtCore, QtGui
except Exception:
    import PySide
    from PySide import QtCore, QtGui

import Draft, Part, FreeCAD, math, PartGui, FreeCADGui
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base
 
                    # vueChoix = 0 et alignerSur = 0 , mode par défaut
global vueChoix		# choix de la vue Dessus=1 XY, vue Face=2 ZX, vue Droite=3 ZY (Orthogonal)
global alignerSur   # aligne le cercle sur une forme au choix (1,2 ou 3) ou sur Z=0 (Orthogonal)
global afficherPoint# affiche le point central du cercle
global colorer     	# colorer suivant l'axe 1=Ok 0=Couleur courante uniquement Orthogonal !
vueChoix = 0
alignerSur = 0
afficherPoint = 1
colorer = 1
 
try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s
 
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)
 
class Ui_MainWindow(object):
 
    def __init__(self, MainWindow):
        self.window = MainWindow
        path = FreeCAD.ConfigGet(&quot;AppHomePath&quot;) # chemin 
 
        MainWindow.setObjectName(_fromUtf8(&quot;MainWindow&quot;))
        MainWindow.resize(490, 302)
        MainWindow.setWindowIcon(QtGui.QIcon(path+'View-C3P.png'))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))
 
        self.groupBox = QtGui.QGroupBox(self.centralWidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 130, 161))
        self.groupBox.setObjectName(_fromUtf8(&quot;groupBox_1&quot;))
 
        self.radioButton_1 = QtGui.QRadioButton(self.groupBox)
        self.radioButton_1.setGeometry(QtCore.QRect(10, 30, 130, 20))
        self.radioButton_1.setChecked(True)
        self.radioButton_1.setObjectName(_fromUtf8(&quot;radioButton_1&quot;))
        self.radioButton_1.clicked.connect(self.on_radioButton_1_clicked) #connection radioButton_1
        self.radioButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle sur 3 points dans l'espace&quot;, None))
 
        self.radioButton_2 = QtGui.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 60, 130, 20))
        self.radioButton_2.setObjectName(_fromUtf8(&quot;radioButton_2&quot;))
        self.radioButton_2.clicked.connect(self.on_radioButton_2_clicked) #connection radioButton_2
        self.radioButton_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la vue de face&quot;, None))
        #self.image_01 = &quot;C:\Program Files\FreeCAD0.13\View-Front.png&quot;
        self.image_01 = path+&quot;View-Front.png&quot;
        icon01 = QtGui.QIcon() 
        icon01.addPixmap(QtGui.QPixmap(self.image_01),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.radioButton_2.setIcon(icon01) 
 
        self.radioButton_3 = QtGui.QRadioButton(self.groupBox)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 90, 130, 20))
        self.radioButton_3.setObjectName(_fromUtf8(&quot;radioButton_3&quot;))
        self.radioButton_3.clicked.connect(self.on_radioButton_3_clicked) #connection radioButton_3
        self.radioButton_3.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la vue de dessus&quot;, None))
        #self.image_02 = &quot;C:\Program Files\FreeCAD0.13\View-Top.png&quot;
        self.image_02 = path+&quot;View-Top.png&quot;
        icon02 = QtGui.QIcon() 
        icon02.addPixmap(QtGui.QPixmap(self.image_02),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.radioButton_3.setIcon(icon02) 
 
        self.radioButton_4 = QtGui.QRadioButton(self.groupBox)
        self.radioButton_4.setGeometry(QtCore.QRect(10, 120, 130, 20))
        self.radioButton_4.setObjectName(_fromUtf8(&quot;radioButton_4&quot;))
        self.radioButton_4.clicked.connect(self.on_radioButton_4_clicked) #connection radioButton_4
        self.radioButton_4.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la vue de droite&quot;, None))
        #self.image_03 = &quot;C:\Program Files\FreeCAD0.13\View-Left.png&quot;
        self.image_03 = path+&quot;View-Left.png&quot;
        icon03 = QtGui.QIcon() 
        icon03.addPixmap(QtGui.QPixmap(self.image_03),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.radioButton_4.setIcon(icon03) 
 
        self.groupBox_2 = QtGui.QGroupBox(self.centralWidget)
        self.groupBox_2.setGeometry(QtCore.QRect(170, 10, 120, 161))
        self.groupBox_2.setObjectName(_fromUtf8(&quot;groupBox_2&quot;))
 
        self.radioButton_5 = QtGui.QRadioButton(self.groupBox_2)
        self.radioButton_5.setGeometry(QtCore.QRect(10, 30, 95, 20))
        self.radioButton_5.setChecked(True)
        self.radioButton_5.setObjectName(_fromUtf8(&quot;radioButton_5&quot;))
        self.radioButton_5.clicked.connect(self.on_radioButton_5_clicked) #connection radioButton_5
        self.radioButton_5.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle sur 3 points dans l'espace&quot;, None))
 
        self.radioButton_6 = QtGui.QRadioButton(self.groupBox_2)
        self.radioButton_6.setGeometry(QtCore.QRect(10, 60, 95, 20))
        self.radioButton_6.setObjectName(_fromUtf8(&quot;radioButton_6&quot;))
        self.radioButton_6.clicked.connect(self.on_radioButton_6_clicked) #connection radioButton_6
        self.radioButton_6.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la forme 1&quot;, None))
 
        self.radioButton_7 = QtGui.QRadioButton(self.groupBox_2)
        self.radioButton_7.setGeometry(QtCore.QRect(10, 90, 95, 20))
        self.radioButton_7.setObjectName(_fromUtf8(&quot;radioButton_7&quot;))
        self.radioButton_7.clicked.connect(self.on_radioButton_7_clicked) #connection radioButton_7
        self.radioButton_7.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la forme 2&quot;, None))
 
        self.radioButton_8 = QtGui.QRadioButton(self.groupBox_2)
        self.radioButton_8.setGeometry(QtCore.QRect(10, 120, 95, 20))
        self.radioButton_8.setObjectName(_fromUtf8(&quot;radioButton_8&quot;))
        self.radioButton_8.clicked.connect(self.on_radioButton_8_clicked) #connection radioButton_8
        self.radioButton_8.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Cercle orthogonal sur la forme 3&quot;, None))
 
        self.checkBox_1 = QtGui.QCheckBox(self.centralWidget)
        self.checkBox_1.setGeometry(QtCore.QRect(20, 190, 140, 20))
        self.checkBox_1.setChecked(True)
        self.checkBox_1.setObjectName(_fromUtf8(&quot;checkBox_1&quot;))
        self.checkBox_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Affiche un point sur le centre du cercle&quot;, None))
#        self.checkBox_1.clicked.connect(self.on_checkBox_1_clicked) #connection checkBox_1
 
        self.checkBox_2 = QtGui.QCheckBox(self.centralWidget)
        self.checkBox_2.setGeometry(QtCore.QRect(170, 190, 150, 20))
        self.checkBox_2.setChecked(True)
        self.checkBox_2.setObjectName(_fromUtf8(&quot;checkBox_2&quot;))
        self.checkBox_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Associe la couleur du cercle à la couleur des axes X,Y,Z (Orthogonal)&quot;, None))
#        self.checkBox_2.clicked.connect(self.on_checkBox_2_clicked) #connection checkBox_1
 
        self.lineEdit_1 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_1.setGeometry(QtCore.QRect(320, 30, 151, 22))
        self.lineEdit_1.setObjectName(_fromUtf8(&quot;lineEdit_1&quot;))
        self.lineEdit_1.setReadOnly(True)
 
        self.lineEdit_2 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(320, 80, 151, 22))
        self.lineEdit_2.setObjectName(_fromUtf8(&quot;lineEdit_2&quot;))
        self.lineEdit_2.setReadOnly(True)
 
        self.lineEdit_3 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(320, 130, 151, 22))
        self.lineEdit_3.setObjectName(_fromUtf8(&quot;lineEdit_3&quot;))
        self.lineEdit_3.setReadOnly(True)
 
        self.lineEdit_4 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(320, 180, 151, 22))
        self.lineEdit_4.setObjectName(_fromUtf8(&quot;lineEdit_4&quot;))
        self.lineEdit_4.setReadOnly(True)
 
        self.lineEdit_5 = QtGui.QLineEdit(self.centralWidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(320, 230, 151, 22))
        self.lineEdit_5.setObjectName(_fromUtf8(&quot;lineEdit_5&quot;))
        self.lineEdit_5.setReadOnly(True)
 
        self.label_1 = QtGui.QLabel(self.centralWidget)
        self.label_1.setGeometry(QtCore.QRect(320, 10, 91, 16))
        self.label_1.setObjectName(_fromUtf8(&quot;label_1&quot;))
 
        self.label_2 = QtGui.QLabel(self.centralWidget)
        self.label_2.setGeometry(QtCore.QRect(320, 60, 91, 16))
        self.label_2.setObjectName(_fromUtf8(&quot;label_2&quot;))
 
        self.label_3 = QtGui.QLabel(self.centralWidget)
        self.label_3.setGeometry(QtCore.QRect(320, 110, 91, 16))
        self.label_3.setObjectName(_fromUtf8(&quot;label_3&quot;))
 
        self.label_4 = QtGui.QLabel(self.centralWidget)
        self.label_4.setGeometry(QtCore.QRect(320, 160, 53, 16))
        self.label_4.setObjectName(_fromUtf8(&quot;label_4&quot;))
 
        self.label_5 = QtGui.QLabel(self.centralWidget)
        self.label_5.setGeometry(QtCore.QRect(320, 210, 81, 16))
        self.label_5.setObjectName(_fromUtf8(&quot;label_5&quot;))
 
        self.pushButton_1 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_1.setGeometry(QtCore.QRect(20, 230, 90, 28))
        self.pushButton_1.setObjectName(_fromUtf8(&quot;pushButton_1&quot;))
        self.pushButton_1.clicked.connect(self.on_pushButton_1_clicked) #connection pushButton_1
        self.pushButton_1.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Quitte la fonction&quot;, None))
 
        self.pushButton_2 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 230, 90, 28))
        self.pushButton_2.setObjectName(_fromUtf8(&quot;pushButton_2&quot;))
        self.pushButton_2.clicked.connect(self.on_pushButton_2_clicked) #connection pushButton_2
        self.pushButton_2.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Applique la fonction sans quitter&quot;, None))
        #self.pushButton_2.setStyleSheet(&quot;background-color: red&quot;) #cette fonction donne une couleur au bouton
        #self.pushButton_2.setStyleSheet(&quot;color : #ff0000&quot;) #cette fonction donne une couleur au texte du bouton
        #self.pushButton_2.setStyleSheet(&quot;color : #ff0000; background-color : #0000ff;&quot; ) #combinaison des deux
 
        self.pushButton_3 = QtGui.QPushButton(self.centralWidget)
        self.pushButton_3.setGeometry(QtCore.QRect(200, 230, 90, 28))
        self.pushButton_3.setObjectName(_fromUtf8(&quot;pushButton_3&quot;))
        self.pushButton_3.clicked.connect(self.on_pushButton_3_clicked) #connection pushButton_3
        self.pushButton_3.setToolTip(_translate(&quot;MainWindow&quot;, &quot;Définit le mode par défaut (Cercle sur 3 points dans l'espace)&quot;, None))
 
        MainWindow.setCentralWidget(self.centralWidget)
        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8(&quot;statusBar&quot;))
        MainWindow.setStatusBar(self.statusBar)
 
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
 
    def retranslateUi(self, MainWindow):
        try:
            MainWindow.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # PyQt4 cette fonction met la fenêtre en avant
        except Exception:
            MainWindow.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide cette fonction met la fenêtre en avant
        #MainWindow.setStyleSheet(&quot;background-color: red&quot;) #cette fonction donne une couleur à la fenêtre
        #MainWindow.setWindowOpacity(0.5)    #cette fonction donne une transparence à la fenêtre
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;Cercle sur 3 points&quot;, None))
        self.groupBox.setTitle(_translate(&quot;MainWindow&quot;, &quot;Mode&quot;, None))
        self.radioButton_1.setText(_translate(&quot;MainWindow&quot;, &quot;Défaut&quot;, None))
        self.radioButton_2.setText(_translate(&quot;MainWindow&quot;, &quot;Vue  Face&quot;, None))
        self.radioButton_3.setText(_translate(&quot;MainWindow&quot;, &quot;Vue Dessus&quot;, None))
        self.radioButton_4.setText(_translate(&quot;MainWindow&quot;, &quot;Vue Droite&quot;, None))
        self.groupBox_2.setTitle(_translate(&quot;MainWindow&quot;, &quot;Alignement sur&quot;, None))
        self.radioButton_5.setText(_translate(&quot;MainWindow&quot;, &quot;Défaut&quot;, None))
        self.radioButton_6.setText(_translate(&quot;MainWindow&quot;, &quot;Forme 1&quot;, None))
        self.radioButton_7.setText(_translate(&quot;MainWindow&quot;, &quot;Forme 2&quot;, None))
        self.radioButton_8.setText(_translate(&quot;MainWindow&quot;, &quot;Forme 3&quot;, None))
        self.checkBox_1.setText(_translate(&quot;MainWindow&quot;, &quot;Afficher le centre&quot;, None))
        self.checkBox_2.setText(_translate(&quot;MainWindow&quot;, &quot;Associer les couleurs&quot;, None))
        self.label_1.setText(_translate(&quot;MainWindow&quot;, &quot;Coordonnée X&quot;, None))
        self.label_2.setText(_translate(&quot;MainWindow&quot;, &quot;Coordonnée Y&quot;, None))
        self.label_3.setText(_translate(&quot;MainWindow&quot;, &quot;Coordonnée Z&quot;, None))
        self.label_4.setText(_translate(&quot;MainWindow&quot;, &quot;Rayon&quot;, None))
        self.label_5.setText(_translate(&quot;MainWindow&quot;, &quot;Angle&quot;, None))
        self.pushButton_1.setText(_translate(&quot;MainWindow&quot;, &quot;Quitter&quot;, None))
        self.pushButton_2.setText(_translate(&quot;MainWindow&quot;, &quot;Appliquer&quot;, None))
        self.pushButton_3.setText(_translate(&quot;MainWindow&quot;, &quot;Défaut&quot;, None))
    # première série de radioboutons
    def on_radioButton_1_clicked(self):
        if self.radioButton_1.isChecked():
            self.radioButton_5.setChecked(True)
    def on_radioButton_2_clicked(self):
        if self.radioButton_5.isChecked():
            self.radioButton_6.setChecked(True)
    def on_radioButton_3_clicked(self):
        if self.radioButton_5.isChecked():
            self.radioButton_6.setChecked(True)
    def on_radioButton_4_clicked(self):
        if self.radioButton_5.isChecked():
            self.radioButton_6.setChecked(True)
    # deuxième série de radioboutons
    def on_radioButton_5_clicked(self):
        if self.radioButton_5.isChecked():
            self.radioButton_1.setChecked(True)
    def on_radioButton_6_clicked(self):
        if self.radioButton_1.isChecked():
            self.radioButton_2.setChecked(True)
    def on_radioButton_7_clicked(self):
        if self.radioButton_1.isChecked():
            self.radioButton_2.setChecked(True)
    def on_radioButton_8_clicked(self):
        if self.radioButton_1.isChecked():
            self.radioButton_2.setChecked(True)
    # Boutons
    def on_pushButton_1_clicked(self):    # Bouton Quitte la fonction
        App.Console.PrintMessage(&quot;Terminé\r\n&quot;)
        self.window.hide()
 
    def on_pushButton_2_clicked(self):    # Bouton Appliquer
        if self.radioButton_1.isChecked():
            vueChoix=0
        if self.radioButton_2.isChecked():
            vueChoix=1
        if self.radioButton_3.isChecked():
            vueChoix=2
        if self.radioButton_4.isChecked():
            vueChoix=3
 
        if self.radioButton_5.isChecked():
            alignerSur=0
        if self.radioButton_6.isChecked():
            alignerSur=1
        if self.radioButton_7.isChecked():
            alignerSur=2
        if self.radioButton_8.isChecked():
            alignerSur=3
 
        if self.checkBox_1.checkState()==0:
            afficherPoint=0
        else:
            afficherPoint=1
        if self.checkBox_2.checkState()==0:
            colorer=0
        else:
            colorer=1
 
        # App.Console.PrintMessage(&quot;Appliquer\r\n&quot;)
        # App.Console.PrintMessage(str(vueChoix)+&quot; \t&quot;)
        # App.Console.PrintMessage(str(alignerSur)+&quot; \t&quot;)
        # App.Console.PrintMessage(str(afficherPoint)+&quot; \t&quot;)
        # App.Console.PrintMessage(str(colorer)+&quot; \r\n&quot;)
 
        def errorDialog(msg):
            # Create a simple dialog QMessageBox
            # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
            diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg)
            try:
                diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint) # PyQt4 cette fonction met la fenêtre en avant
            except Exception:
                diag.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint) # PySide cette fonction met la fenêtre en avant
            #diag.setWindowModality(QtCore.Qt.ApplicationModal) # la fonction a été désactivée pour favoriser &quot;WindowStaysOnTopHint&quot;
            diag.exec_()
 
        def affiche(x,y,z,rayon,r,v,b,afficherPoint,angle):
            pl.Base=FreeCAD.Vector(x,y,z)
            Draft.makeCircle((rayon),placement=pl,face=False,support=None)
            if colorer==1:    
                FreeCADGui.activeDocument().activeObject().LineColor = (r,v,b)
            if afficherPoint==1:
                Draft.makePoint(x,y,z)
                if colorer==1:
                    FreeCADGui.activeDocument().activeObject().PointColor = (r,v,b)
            str(self.lineEdit_1.setText(str(x)))
            str(self.lineEdit_2.setText(str(y)))
            str(self.lineEdit_3.setText(str(z)))
            str(self.lineEdit_4.setText(str(rayon)))
            str(self.lineEdit_5.setText(str(angle)))
 
        # prendre les objets selectionnes
        sel = FreeCADGui.Selection.getSelection()           
        i=0
        centreX=0;centreY=0;rayon=0
 
        # S'il y a 3 points sélectionnés alors..
        if len(sel)==3 :
            i=0
            ta=[0,0,0,0,0,0,0,0,0]
            for obj in sel:
                x=(obj.Shape.BoundBox.Center)
                ta[i+0]=(x.x)
                ta[i+1]=(x.y)
                ta[i+2]=(x.z)
                i=i+3
 
            if vueChoix==3:        # Vue de droite ZY (Rouge)
                z_point_1=ta[0]
                x_point_1=ta[1]
                y_point_1=ta[2]
 
                z_point_2=ta[3]
                x_point_2=ta[4]
                y_point_2=ta[5]
 
                z_point_3=ta[6]
                x_point_3=ta[7]
                y_point_3=ta[8]
 
            elif vueChoix==2:    # Vue de face ZX (Vert)
                y_point_1=ta[0]
                z_point_1=ta[1]
                x_point_1=ta[2]
 
                y_point_2=ta[3]
                z_point_2=ta[4]
                x_point_2=ta[5]
 
                y_point_3=ta[6]
                z_point_3=ta[7]
                x_point_3=ta[8]
 
            else:                # Vue de dessus XY (Bleu)
                x_point_1=ta[0]
                y_point_1=ta[1]
                z_point_1=ta[2]
 
                x_point_2=ta[3]
                y_point_2=ta[4]
                z_point_2=ta[5]
 
                x_point_3=ta[6]
                y_point_3=ta[7]
                z_point_3=ta[8]
 
            # Calcul des coordonnées du centre du cercle    
            try:
                centreX =((x_point_3**2-x_point_2**2+y_point_3**2-y_point_2**2)/(2*(y_point_3-y_point_2))-(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1)))/((x_point_3-x_point_2)/(y_point_3-y_point_2)-(x_point_2-x_point_1)/(y_point_2-y_point_1))
                centreY =-(x_point_2-x_point_1)/(y_point_2-y_point_1)*centreX+(x_point_2**2-x_point_1**2+y_point_2**2-y_point_1**2)/(2*(y_point_2-y_point_1))
                rayon =sqrt((x_point_1-centreX)**2+(y_point_1-centreY)**2)
            except:
                errorDialog(u&quot;Calcul impossible trop d'élements alignés&quot;)
            else:
            #finally: # si finally est présent, il sera TOUJOURS exécuté
               # Définition de la coordonnée Z
                centreZ=0
                # Création du cercle
                pl=FreeCAD.Placement()
                if vueChoix==1:    # Plan XY Dessus
                    pl.Rotation.Q=(0,0,0,1.0)
                    if alignerSur==1:    
                        affiche(centreX,centreY,z_point_1,rayon,0.0,0.0,1.0,afficherPoint,0)
                    elif alignerSur==2:
                        affiche(centreX,centreY,z_point_2,rayon,0.0,0.0,1.0,afficherPoint,0)
                    elif alignerSur==3:
                        affiche(centreX,centreY,z_point_3,rayon,0.0,0.0,1.0,afficherPoint,0)
                elif vueChoix==2:    # Plan XZ Face
                    pl.Rotation.Q=(1,0,0,1.0)
                    if alignerSur==1:    
                        affiche(centreY,z_point_1,centreX,rayon,0.0,1.0,0.0,afficherPoint,0)
                    elif alignerSur==2:
                        affiche(centreY,z_point_2,centreX,rayon,0.0,1.0,0.0,afficherPoint,0)
                    elif alignerSur==3:
                        affiche(centreY,z_point_3,centreX,rayon,0.0,1.0,0.0,afficherPoint,0)
                elif vueChoix==3:    # Plan YZ Droite
                    pl.Rotation.Q=(0,1,0,1.0)
                    if alignerSur==1:    
                        affiche(z_point_1,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint,0)
                    elif alignerSur==2:
                        affiche(z_point_2,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint,0)
                    elif alignerSur==3:
                        affiche(z_point_3,centreX,centreY,rayon,1.0,0.0,0.0,afficherPoint,0)
                else:    # 3D XYZ
                    P1 = sel[0].Shape.BoundBox.Center
                    P2 = sel[1].Shape.BoundBox.Center
                    P3 = sel[2].Shape.BoundBox.Center
 
                    P1P2 = (P2 - P1).Length
                    P2P3 = (P3 - P2).Length
                    P3P1 = (P1 - P3).Length
 
                    # Circle radius.
                    l = ((P1 - P2).cross(P2 - P3)).Length
                    try:
                    #if l &lt; 1e-8:
                    #    errorDialog(&quot;The three points are aligned&quot;)
                        r = P1P2 * P2P3 * P3P1 / 2 / l
                    except:
                        errorDialog(&quot;The three points are aligned&quot;)
                    else:
                        # Sphere center.
                        a = P2P3**2 * (P1 - P2).dot(P1 - P3) / 2 / l**2
                        b = P3P1**2 * (P2 - P1).dot(P2 - P3) / 2 / l**2
                        c = P1P2**2 * (P3 - P1).dot(P3 - P2) / 2 / l**2
                        P1.multiply(a)
                        P2.multiply(b)
                        P3.multiply(c)
                        PC = P1 + P2 + P3
 
                        # Creation of a circle
                        pl = Base.Placement()
                        v = (P1 - P2).cross(P3 - P2)
                        v.normalize()
                        axis = Base.Vector(0, 0, 1).cross(v)
                        angle = asin(axis.Length) * 180 / pi
                        axis.normalize()
                        pl = Base.Placement(PC, axis, angle)
                        affiche((PC.x),(PC.y),(PC.z),r,0.0,0.0,0.0,afficherPoint,angle)
 
        else:
            # Si la condition n'est pas remplie, recommencer
            errorDialog(u&quot;Sélectionnez 3 points et recommencez&quot;)
            #FreeCAD.Console.PrintError(&quot;Sélectionnez 3 points et recommencez\r\n&quot;)
#________________________________________________________________________________
    def on_pushButton_3_clicked(self):    # Valeurs d'origine
        App.Console.PrintMessage(&quot;Défaut\r\n&quot;)
        vueChoix=0		# choix de la vue Dessus=1 XY, vue Face=2 ZX, vue Droite=3 ZY
        self.radioButton_1.setChecked(True)
        alignerSur=0	# aligne le cercle sur une forme au choix (1,2 ou 3) ou sur Z=0
        self.radioButton_5.setChecked(True)
        afficherPoint=1	# affiche le point central du cercle
        self.checkBox_1.setChecked(True)
        colorer=1		# colorer suivant l'axe 1=Ok 0=Couleur courante uniquement Orthogonal !
        self.checkBox_2.setChecked(True)
 
#______________________________________________________________________________________
 
MainWindow = QtGui.QMainWindow()
ui = Ui_MainWindow(MainWindow)
MainWindow.show()
&lt;/syntaxhighlight&gt;



==Anaglyphe== &lt;!--T:14--&gt;
Here an Anaglyph view that allows you to see two different positions of the view by using glasses with filters red and Cyan [[Image:Anaglyph_Tango.png|24px]].&lt;br /&gt;
Watch alternately with the left eye and the right eye to see the views separately.&lt;br /&gt;
 
&lt;center&gt;
[[File:Cercle3Points2D_anaglyphe.png|480px|Anaglyphe]]
&lt;/center&gt;
 
{{clear}}

==Crédits== &lt;!--T:15--&gt;
The genesis of the macro '''Draft_Circle_3_Points''' [http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=3696&amp;sid=17886f953113e162dc9a4a843e1fce94 sur le forum (PYTHON) coordonnées d'un point] helped flachyjoe thanks.&lt;br /&gt;
The formula comes from [http://www-obs.univ-lyon1.fr/labo/fc/Ateliers_archives/ateliers_2005-06/cercle_3pts.pdf cercle_3pts.pdf] and used with the kind permission of its author.&lt;br /&gt;
The formula adapted by &quot; galou_breizh &quot; circle in 3D space comes from
[http://en.wikipedia.org/wiki/Circumscribed_circle Circumscribed_circle]&lt;br /&gt;
Separate programs are located here,&lt;br /&gt;
[[Macro_Draft_Circle_3_Points|Macro Draft Circle 3 Points]]&lt;br /&gt;
[[Macro_Draft_Circle_3_Points_3D|Macro Draft Circle 3 Points 3D]]


</text>
    </revision>
  </page>
  <page>
    <title>Macro MeshToPart</title>
    <ns>0</ns>
    <id>1401</id>
    <revision>
      <id>82063</id>
      <parentid>82038</parentid>
      <timestamp>2014-05-09T08:33:14Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>q9rd4hty5fnmkdmuf8q2du3d4wxzhit</sha1>
      <text xml:space="preserve" bytes="2068">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=MeshToPart|Description=This macro converts selected meshes to parts. It has a broad tolerance, so use it only with objects that have no curves otherwise you'll get weird results|Author=Wmayer}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This macro converts selected meshes to parts. It has a broad tolerance, so use it only with objects that have no curves otherwise you'll get errors or weird results



&lt;syntaxhighlight&gt;

import FreeCAD,FreeCADGui,Mesh,Part,MeshPart
 
for obj in FreeCADGui.Selection.getSelection():
    if &quot;Mesh&quot; in obj.PropertiesList:
        faces = []      
        mesh = obj.Mesh
        segments = mesh.getPlanarSegments(0.01) # use rather strict tolerance here
 
        for i in segments:
          if len(i) &gt; 0:
             # a segment can have inner holes
             wires = MeshPart.wireFromSegment(mesh, i)
             # we assume that the exterior boundary is that one with the biggest bounding box
             if len(wires) &gt; 0:
                ext = None
                max_length = 0
                for i in wires:     
                   if i.BoundBox.DiagonalLength &gt; max_length:
                      max_length = i.BoundBox.DiagonalLength
                      ext = i
                wires.remove(ext)
                # all interior wires mark a hole and must reverse their orientation, otherwise Part.Face fails
                for i in wires:
                   i.reverse()
                # make sure that the exterior wires comes as first in the lsit
                wires.insert(0, ext)
                faces.append(Part.Face(wires))
 
        shell=Part.Compound(faces)
        solid = Part.Solid(Part.Shell(faces))
        name = obj.Name
        FreeCAD.ActiveDocument.removeObject(name)
        FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,name).Shape = solid
&lt;/syntaxhighlight&gt;
{{clear}}

==Link==

The discussion on the forum [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=253&amp;hilit=getPlanarSegments Convert mesh to solid?]

</text>
    </revision>
  </page>
  <page>
    <title>Macro MessageBox</title>
    <ns>0</ns>
    <id>1618</id>
    <revision>
      <id>133481</id>
      <parentid>58093</parentid>
      <timestamp>2014-12-26T21:23:10Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>delete spaces</comment>
      <sha1>b5u1lb0ayqq2lls8d8ska30t1dnrzyd</sha1>
      <text xml:space="preserve" bytes="2062">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=MessageBox|Description=Show how to give information to the user in macros|Author=Gaël Ecorchard}}

&lt;!--T:2--&gt;
Show how to give information to the user in macros

&lt;!--T:3--&gt;
[[File:Macro MessageBox 00.png|480px|MessageBox]]



{{Code|code=
#! /usr/bin/env python
# -*- coding: utf-8 -*-
 
&quot;&quot;&quot;Show how to give information to the user in macros
&quot;&quot;&quot;
from PyQt4 import QtCore, QtGui
 
def errorDialog(msg):
    # Create a simple dialog QMessageBox
    # The first argument indicates the icon used: one of QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question} 
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Warning, 'Error in macro MessageBox', msg)
    diag.setWindowModality(QtCore.Qt.ApplicationModal)
    diag.exec_()
 
msg = 'Example of warning message'
errorDialog(msg)
raise(Exception(msg))
}}



&lt;!--T:4--&gt;
In order to use the accented characters in the text field from '''Qt''', using the tag '''  #-*-coding: utf-8-*-  ''' must be added a '''u''' before the message to display&lt;br /&gt;
Example :


{{Code|code=
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Warning, u'Trop d'éléments désignés', msg)
    ...
    ...
msg = u'Élément sélectionnés affichés'
}}



&lt;!--T:5--&gt;
To display multiple lines in a dialog box '''Qt''', must be added '''&quot;\n&quot;''' (quotation, valid also between apostrophes) between each line.&lt;br /&gt;
Valid also ''' &quot;\r\n&quot;''' which correspond to '''CR''' carriage return, and '''LF''' end of line, valid also '''&quot; \t&quot;''' is a tab, characters should be between quotation marks (and apostrophes) as a character string, the tags can be found next to the text to display '''&quot; \nRayon\t: &quot;''', the tag '''&quot; \ &quot;''' (reversed slash) defines the command.&lt;br /&gt;
Example :


{{Code|code=
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Information,u&quot;Coordonnées&quot;,u&quot;Coordonnée X : &quot;+str(x)+&quot;\r\n&quot;+u&quot;Coordonnée Y : &quot;+str(y)+&quot;\n&quot;+u&quot;Coordonnée Z :&lt;br&gt;
 &quot;+str(z)+&quot;\nRayon\t     : &quot;+str(r))
}}

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Mouse Cross</title>
    <ns>0</ns>
    <id>21562</id>
    <revision>
      <id>103559</id>
      <parentid>65232</parentid>
      <timestamp>2014-08-08T13:10:01Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>ver 0.2 08/08/2014  PyQt4 and PySide</comment>
      <sha1>dqkrzkuzu4cvqk1o6cq9adx9ld8m9bu</sha1>
      <text xml:space="preserve" bytes="2796">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_Mouse_Cross|Description=This macro turns the arrow of the mouse in a precision cross.|Shortcut=&quot;C&quot; &quot;A&quot; |Author=Mario52}}

==Description== &lt;!--T:2--&gt;
This small macro turns the arrow of the mouse in a precision cross.&lt;br /&gt;
Small example of using the class '''ViewObserver()''' and the use of the keyboard with '''[[Code_snippets#Observing_mouse_events_in_the_3D_viewer_via_Python|SoKeyboardEvent]]'''

&lt;!--T:3--&gt;
[[File:Macro_Mouse_Cross_00.png|480px|Macro_Mouse_Cross]]
{{clear}}

==How to use== &lt;!--T:4--&gt;
# Press the {{KEY|C}} button to activate the cross.
# Press the {{KEY|A}} button to activate the arrow.
# Press the {{KEY|G}} button to activate the grid.

==Script== &lt;!--T:5--&gt;

Macro_Mouse_Cross.FCMacro

&lt;syntaxhighlight&gt;

# -*- coding: utf-8 -*-
# mouse cursor to Cross or Arrow + Grig 
# ver 0.2 08/08/2014  PyQt4 and PySide

try:
    from PyQt4 import QtCore, QtGui
except Exception:
    from PySide import QtCore, QtGui
from pivy import coin
class ViewObserver:
   def logPosition(self, info):
       self.pos = info[&quot;Key&quot;]
       if (self.pos.upper() == &quot;C&quot;):
           # change the cursor cross ( + )
           QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
       elif (self.pos.upper() == &quot;A&quot;):
           # change the cursor Arrow
           QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
       elif (self.pos.upper() == &quot;G&quot;):
           # &quot;wmayer&quot; http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=1065&amp;hilit=cross#p8818
           # Create Grid
           grid=coin.SoType.fromName(&quot;SoDrawingGrid&quot;).createInstance()
           Gui.ActiveDocument.ActiveView.getSceneGraph().addChild(grid)

App.Console.PrintMessage(&quot;Type Key C to Cross&quot;+&quot;\n&quot;)
App.Console.PrintMessage(&quot;Type Key A to Arrow&quot;+&quot;\n&quot;)
App.Console.PrintMessage(&quot;Type Key G to Grid (not editable)&quot;+&quot;\n&quot;)
v=Gui.activeDocument().activeView()
o = ViewObserver()
c = v.addEventCallback(&quot;SoKeyboardEvent&quot;,o.logPosition)

&lt;/syntaxhighlight&gt;

===Cursors that can be used=== &lt;!--T:6--&gt;

ArrowCursor, UpArrowCursor, CrossCursor, WaitCursor, IBeamCursor, SizeVerCursor, SizeHorCursor
SizeBDiagCursor, SizeFDiagCursor, SizeAllCursor, BlankCursor, SplitVCursor, SplitHCursor
PointingHandCursor, ForbiddenCursor, OpenHandCursor, ClosedHandCursor, WhatsThisCursor, BusyCursor, BitmapCursor

==Limitation== &lt;!--T:7--&gt;
The cursor can change appearance depending on the used Workbench, he must repeat the operation.&lt;br /&gt;
The cursor can be subtituer to the other sliders (ex: expansion of a window, corner...).&lt;br /&gt;
The grid is permanent.&lt;br /&gt;
The rest resident macro.

&lt;!--T:8--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]

</text>
    </revision>
  </page>
  <page>
    <title>Macro ObjectInfo</title>
    <ns>0</ns>
    <id>10021</id>
    <revision>
      <id>104048</id>
      <parentid>103749</parentid>
      <timestamp>2014-08-10T13:04:47Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>correct link to &quot;Info Workbench - Help with icons please.&quot;</comment>
      <sha1>jsmd6c2esqil7s2ph14oluhvay3j9aj</sha1>
      <text xml:space="preserve" bytes="1439">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro ObjectInfo|Description=provides information on the selected object|Author=keithsloan52}}

==Description== &lt;!--T:2--&gt;
This macro lets you know the volume information surface area, center of mass and moment of intertia of the selected object.&lt;br /&gt;&lt;br /&gt;
[[Image:ObjectInfoIt.png|480px]]&lt;br /&gt;&lt;br /&gt;

==Installation== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
If you're on Linux, you need to create a folder named &quot;Mod&quot; in the .FreeCAD hidden folder which is located in your Home folder. Then create a folder named &quot;Info&quot; in the &quot;Mod&quot; folder, and extract the content of the archive in it. On Windows, I have no idea where that would be. Use the same procedure to Windows in C:\Program Files\FreeCAD\Mod.

==How to use== &lt;!--T:5--&gt;
Then start FreeCAD, open your STEP file and switch to the &quot;Info&quot; workbench with the workbench switcher or by going to the View --&gt; Workbench menu. Now select your solid, and click on the &quot;Info&quot; icon; the left taskbar will show some information on the model, including volume, surface area, center of mass and moment of intertia.

==Links== &lt;!--T:6--&gt;
A FreeCAD user created a user-friendly &quot;Info&quot; module which you can get here: http://www.sloan-home.co.uk/FreeCAD/Info/Info.html

&lt;!--T:8--&gt;
From Forum [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3185 Info Workbench - Help with icons please.]


&lt;!--T:7--&gt;
[[Category:Macros]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro PartsLibrary</title>
    <ns>0</ns>
    <id>27868</id>
    <revision>
      <id>78176</id>
      <parentid>78175</parentid>
      <timestamp>2014-03-25T20:21:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gj6end81n6h29gcm863x68qfypipkz7</sha1>
      <text xml:space="preserve" bytes="987">
&lt;!--T:1--&gt;
{{Macro|Icon=FreeCAD Doc|Name=Parts Library|Description=Starts the Parts Library browser FreeCAD|Author=yorik}}

&lt;!--T:2--&gt;
The [http://github.com/yorikvanhavre/FreeCAD-library FreeCAD Parts Library] is a community effort to provide a free library of reusable Parts to be inserted into your projects. You are welcome to participate and submit parts to the library, but keep in mind you must have rights to share them. See the [http://github.com/yorikvanhavre/FreeCAD-library readme] file for more details.

&lt;!--T:3--&gt;
This macro, which is also included in the library, will show a browser panel inside the FreeCAD interface, from which you can easily browse the contents of the library, and insert a part into the current document, by double-clicking it.


[[Image:Freecad-parts-library.jpg|760px]]


&lt;!--T:7--&gt;
Get the macro here:


http://github.com/yorikvanhavre/FreeCAD-library/blob/master/PartsLibrary.FCMacro


</text>
    </revision>
  </page>
  <page>
    <title>Macro Rectellipse</title>
    <ns>0</ns>
    <id>2345</id>
    <revision>
      <id>81594</id>
      <parentid>81593</parentid>
      <timestamp>2014-05-04T12:49:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tf70dgt1sbu69ap8czyrfht8rsslcv9</sha1>
      <text xml:space="preserve" bytes="2603">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Rectellipse Macro|Description=Creates a parametric rectellipse|Author=fcaponi78}}

&lt;!--T:2--&gt;
Creates a parametric rectellipse

&lt;!--T:3--&gt;
[[File:Rectellipse.png]]

{{clear}}
&lt;syntaxhighlight&gt;
from __future__ import division # allows floating point division from integers
import FreeCAD, Part, math
from FreeCAD import Base

class RectEllipseShape:
   def __init__(self, obj):
      ''' Add the properties: Radius, Eccentricity, Height, Segments (see Property View) '''
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;a&quot;,&quot;Rectellipse&quot;,&quot;A - horizontal radius&quot;).a = 16.0
      obj.addProperty(&quot;App::PropertyLength&quot;,&quot;b&quot;,&quot;Rectellipse&quot;,&quot;B - vertical radius&quot;).b = 9.0
      obj.addProperty(&quot;App::PropertyFloat&quot;,&quot;n&quot;,&quot;Rectellipse&quot;,&quot;N &quot;).n=0.2
      obj.addProperty(&quot;App::PropertyBool&quot;,&quot;createFace&quot;,&quot;Rectellipse&quot;,&quot;Wheter to create a face or not&quot;).createFace=True
      obj.Proxy = self

   def onChanged(self, fp, prop):
      if prop == &quot;a&quot; or prop == &quot;b&quot; or prop == &quot;n&quot; or prop == &quot;segments&quot; or prop == &quot;height&quot; or prop == &quot;createFace&quot;:
         #if one of these is changed
         self.execute(fp)

   def execute(self, fp):
      r1=fp.a
      r2=fp.b
      s=fp.n
      z=0.0
      p=1.0
      ####w=2**0.5/2.0 #Ellipse
      w=2**0.5/2.0/(1-s**p)
      curve=Part.BSplineCurve()
      curve.setPeriodic()
      curve.increaseDegree(2) #quadratic
      curve.insertKnots([i*1.0/(4) for i in (1,2,3)],[2]*(3)) #5Knots 8 Poles
      curve.setPole(1,FreeCAD.Vector(0,-r2,z),1)
      curve.setPole(2,FreeCAD.Vector(-r1,-r2,z),w)
      curve.setPole(3,FreeCAD.Vector(-r1,0,z),1)
      curve.setPole(4,FreeCAD.Vector(-r1,r2,z),w)
      curve.setPole(5,FreeCAD.Vector(0,r2,z),1)
      curve.setPole(6,FreeCAD.Vector(r1,r2,z),w)
      curve.setPole(7,FreeCAD.Vector(r1,0,z),1)
      curve.setPole(8,FreeCAD.Vector(r1,-r2,z),w)
      if fp.createFace == True:
         fp.Shape = Part.Face(Part.Wire(curve.toShape()))
      else:
         fp.Shape = curve.toShape()

def makeRectellipseBlock():
   doc = FreeCAD.activeDocument()
   if doc == None:
      doc = FreeCAD.newDocument()
   obj=doc.addObject(&quot;Part::FeaturePython&quot;,&quot;RectEllipseShape&quot;) #add object to document
   obj.Label = &quot;RectEllipsse&quot;
   RectEllipseShape(obj)
   obj.ViewObject.Proxy=0
   viewObject = Gui.ActiveDocument.getObject(obj.Name)
   viewObject.ShapeColor = (0.00,0.33,1.00)
   viewObject.DisplayMode = &quot;Flat Lines&quot;
   obj.Shape.check()

if __name__ == &quot;__main__&quot;:
   #feature will be generated after macro execution
   makeRectellipseBlock()



&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Macro Remove parametric history</title>
    <ns>0</ns>
    <id>1403</id>
    <revision>
      <id>82108</id>
      <parentid>82107</parentid>
      <timestamp>2014-05-10T12:14:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>oura0nrp1jx65olxyhh6metgka5i74h</sha1>
      <text xml:space="preserve" bytes="836">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Remove parametric history|Description=This will remove all parametric associativity from an object, leaving it as a &quot;dumb&quot; shape|Author=Yorik}}

==Description== &lt;!--T:2--&gt;
This will remove all parametric associativity from an object, leaving it as a &quot;dumb&quot; shape


&lt;!--T:3--&gt;
Before and after:


&lt;!--T:4--&gt;
[[File:RPH_before.png|left]]   [[File:RPH_after.png]]
{{clear}}

==Script==
'''Remove parametric history.FCMacro'''
&lt;syntaxhighlight&gt;

originalObject = FreeCAD.ActiveDocument.ActiveObject
newShape = originalObject.Shape.copy()
newName = FreeCAD.ActiveDocument.ActiveObject.Name
FreeCAD.ActiveDocument.removeObject(newName)
newObject = FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,newName)
newObject.Shape = newShape

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Replace Part in Assembly</title>
    <ns>0</ns>
    <id>47806</id>
    <revision>
      <id>123207</id>
      <parentid>123195</parentid>
      <timestamp>2014-11-16T21:10:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>kwudlu27zxki6ido537fymu5j8toor5</sha1>
      <text xml:space="preserve" bytes="28319">
&lt;!--T:1--&gt;
{{Macro|Icon=Replace_Part|Name=Macro Replace Part in Assembly|Description=Replaces Part in Assembly|Author=ralvejd}}

&lt;!--T:2--&gt;
Especially when doing &quot;Assemblies&quot; with simple copies of parts, one needs to replace one part by another from time to time.
Then you can use this macro do do this.

===Use=== &lt;!--T:3--&gt;
Be sure to have your files containing the old part and the new part open.
# Run the macro.
# Select the appropriate FreeCAD-document and select the new part in the tree-view.
# Then click on &quot;Select New Part&quot;.
# Select the appropriate FreeCAD-document and select the part to be replaced in the tree-view.
# Then click on &quot;Select Old Part&quot;.
# Use the other options to your liking.
# Then click on &quot;Replace Old Part&quot;.


&lt;!--T:5--&gt;
[[Image:Macro_Replace_Part_in_Assembly.jpg]]

&lt;!--T:6--&gt;
See also [http://youtu.be/rTqqqy4n1RE Demo on Youtube].

===Script=== &lt;!--T:4--&gt;
Macro Replace_Part_in_Assembly.py


&lt;syntaxhighlight&gt;
#!/usr/bin/env python
# -*- coding: utf-8 -*-

&quot;&quot;&quot;
Macro to replace parts in assembly FreeCAD.
Version 0.1 from 20140910

********************************************************************************************
*   Copyright (c) 2013 Joakim Isaksson &lt;ralvejd[at]users.sourceforge.net&gt;          *
*                                                                                                                                       *
*   This file is a supplement to the FreeCAD CAx development system.                *
*                                                                                                                                       *
*   This program is free software; you can redistribute it and/or modify                  *
*   it under the terms of the GNU Lesser General Public License (LGPL)               *
*   as published by the Free Software Foundation; either version 2 of                    *
*   the License, or (at your option) any later version.                                                  *
*   for detail see the LICENCE text file.                                                                        *
*                                                                                                                                        *
*   This software is distributed in the hope that it will be useful,                                  *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of                *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *
*   GNU Library General Public License for more details.                                           *
*                                                                                                                                          *
*   You should have received a copy of the GNU Library General Public                    *
*   License along with this macro; if not, write to the Free Software                            *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307              *
*   USA                                                                                                                                *
*                                                                                                                                           *
***********************************************************************************************
&quot;&quot;&quot;

__author__ = &quot;Joakim Isaksson &lt;ralvejd[at]users.sourceforge.net&gt;&quot;


import FreeCAD, Part, math
from FreeCAD import Base
import DraftVecUtils
import sys
try:
   from PySide import QtCore, QtGui
   from PySide.QtCore import SIGNAL, QTimer
   from PySide.QtGui import QApplication
except:
   from PyQt4 import QtCore, QtGui
   from PyQt4.QtCore import SIGNAL, QTimer
   from PyQt4.QtGui import QApplication

try:
   _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
   _fromUtf8 = lambda s: s

try:
   _encoding = QtGui.QApplication.UnicodeUTF8
   def _translate(context, text, disambig):
      return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
   def _translate(context, text, disambig):
      return QtGui.QApplication.translate(context, text, disambig)

#                     [document , name, label, position, rotation, group]
global newpart ; newpart = [ &quot;&quot; , &quot;&quot;, &quot;&quot; , &quot;&quot;, &quot;&quot; , &quot;&quot; ] ;
global oldpart ; oldpart = [ &quot;&quot; , &quot;&quot;, &quot;&quot; , &quot;&quot;, &quot;&quot; , &quot;&quot; ] ;
global newPartName ; newPartName = &quot;&quot;
global newPartLabel ; newPartLabel = &quot;&quot;
global uiRowOffset ; uiRowOffset = 30
global uiColWidth ; uiColWidth = 150
global uiPad ; uiPad = 5
global uiMainWidth ; uiMainWidth = 400

class Ui_ReplacePart(object):

   def setupUi(self, ReplacePart):
      global uiMainWidth
      global uiRowOffset
      global uiColWidth
      global uiPad
      uiTextPartWidth = uiMainWidth -(3*uiPad)-uiColWidth

      ReplacePart.setObjectName(_fromUtf8(&quot;ReplacePart&quot;))
      ReplacePart.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedKingdom))   

      captionFont = QtGui.QFont()
      captionFont.setBold(True)

      self.centralWidget = QtGui.QWidget(ReplacePart)
      self.centralWidget.setObjectName(_fromUtf8(&quot;centralWidget&quot;))
      
      &quot;&quot;&quot;
      #*** FIXME ***----------------------------
      #self.centralWidget.setAttribute(QtCore.Qt.WA_DeleteOnClose)
      self.centralWidget.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)
      #*** FIXME ***----------------------------
      &quot;&quot;&quot;
      
      self.groupBoxNewName = QtGui.QButtonGroup()
      self.groupBoxNewLabel = QtGui.QButtonGroup()
      self.groupBoxColorFrom = QtGui.QButtonGroup()

      self.labelCapSelected = QtGui.QLabel(self.centralWidget)
      self.labelCapSelected.setGeometry(QtCore.QRect(uiPad, uiPad, uiColWidth, uiRowOffset-10))
      self.labelCapSelected.setAlignment(QtCore.Qt.AlignRight)
      self.labelCapSelected.setFont(captionFont)
      self.labelCapSelected.setObjectName(_fromUtf8(&quot;labelCapSelected&quot;))

      self.labelSelected = QtGui.QLabel(self.centralWidget)
      self.labelSelected.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), uiPad, uiTextPartWidth, uiRowOffset-10))
      self.labelSelected.setObjectName(_fromUtf8(&quot;labelSelected&quot;))

      row = uiPad+uiRowOffset   
      self.pushButtonNew = QtGui.QPushButton(self.centralWidget)
      self.pushButtonNew.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.pushButtonNew.setObjectName(_fromUtf8(&quot;pushButtonNew&quot;))
      self.pushButtonNew.clicked.connect(self.on_pushButtonNew_clicked)   

      self.labelNew = QtGui.QLabel(self.centralWidget)
      self.labelNew.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiTextPartWidth, uiRowOffset-2))
      self.labelNew.setObjectName(_fromUtf8(&quot;labelNew&quot;))

      row = row+uiRowOffset
      self.pushButtonOld = QtGui.QPushButton(self.centralWidget)
      self.pushButtonOld.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.pushButtonOld.setObjectName(_fromUtf8(&quot;pushButtonOld&quot;))
      self.pushButtonOld.clicked.connect(self.on_pushButtonOld_clicked)

      self.LabelOld = QtGui.QLabel(self.centralWidget)
      self.LabelOld.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiTextPartWidth, uiRowOffset-2))
      self.LabelOld.setObjectName(_fromUtf8(&quot;labelOld&quot;))

      row = row+uiRowOffset
      self.pushButtonOk = QtGui.QPushButton(self.centralWidget)
      self.pushButtonOk.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.pushButtonOk.setObjectName(_fromUtf8(&quot;pushButtonOk&quot;))
      self.pushButtonOk.setEnabled(False)
      self.pushButtonOk.clicked.connect(self.on_pushButtonOk_clicked)

      row = row+uiRowOffset+uiPad
      self.labelCapNewName = QtGui.QLabel(self.centralWidget)
      self.labelCapNewName.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-10))
      self.labelCapNewName.setFont(captionFont)
      self.labelCapNewName.setObjectName(_fromUtf8(&quot;labelCapNewName&quot;))

      self.labelCapNewLabel = QtGui.QLabel(self.centralWidget)
      self.labelCapNewLabel.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-10))
      self.labelCapNewLabel.setFont(captionFont)
      self.labelCapNewLabel.setObjectName(_fromUtf8(&quot;labelCapNewLabel&quot;))

      row = row+uiRowOffset
      self.radioButtonNameFromNewDoc = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromNewDoc.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonNameFromNewDoc.setObjectName(_fromUtf8(&quot;radioButtonNameFromNewDoc&quot;))
      self.radioButtonNameFromNewDoc.clicked.connect(self.on_radioButtonNameFromNewDoc_clicked)

      self.radioButtonLabelFromNewDoc = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromNewDoc.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonLabelFromNewDoc.setObjectName(_fromUtf8(&quot;radioButtonLabelFromNewDoc&quot;))
      self.radioButtonLabelFromNewDoc.clicked.connect(self.on_radioButtonLabelFromNewDoc_clicked)

      row = row+uiRowOffset
      self.radioButtonNameFromNewName = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromNewName.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonNameFromNewName.setObjectName(_fromUtf8(&quot;radioButtonNameFromNewName&quot;))
      self.radioButtonNameFromNewName.clicked.connect(self.on_radioButtonNameFromNewName_clicked)

      self.radioButtonLabelFromNewName = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromNewName.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonLabelFromNewName.setObjectName(_fromUtf8(&quot;radioButtonLabelFromNewName&quot;))
      self.radioButtonLabelFromNewName.clicked.connect(self.on_radioButtonLabelFromNewName_clicked)

      row = row+uiRowOffset
      self.radioButtonNameFromNewLabel = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromNewLabel.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonNameFromNewLabel.setObjectName(_fromUtf8(&quot;radioButtonNameFromNewLabel&quot;))
      self.radioButtonNameFromNewLabel.clicked.connect(self.on_radioButtonNameFromNewLabel_clicked)

      self.radioButtonLabelFromNewLabel = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromNewLabel.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonLabelFromNewLabel.setObjectName(_fromUtf8(&quot;radioButtonLabelFromNewLabel&quot;))
      self.radioButtonLabelFromNewLabel.clicked.connect(self.on_radioButtonLabelFromNewLabel_clicked)

      row = row+uiRowOffset
      self.radioButtonNameFromOldName = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromOldName.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonNameFromOldName.setObjectName(_fromUtf8(&quot;radioButtonNameFromOldName&quot;))
      self.radioButtonNameFromOldName.clicked.connect(self.on_radioButtonNameFromOldName_clicked)

      self.radioButtonLabelFromOldName = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromOldName.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonLabelFromOldName.setObjectName(_fromUtf8(&quot;radioButtonLabelFromOldName&quot;))
      self.radioButtonLabelFromOldName.clicked.connect(self.on_radioButtonLabelFromOldName_clicked)

      row = row+uiRowOffset
      self.radioButtonNameFromOldLabel = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromOldLabel.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonNameFromOldLabel.setObjectName(_fromUtf8(&quot;radioButtonNameFromOldLabel&quot;))
      self.radioButtonNameFromOldLabel.clicked.connect(self.on_radioButtonNameFromOldLabel_clicked)

      self.radioButtonLabelFromOldLabel = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromOldLabel.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonLabelFromOldLabel.setObjectName(_fromUtf8(&quot;radioButtonLabelFromOldLabel&quot;))
      self.radioButtonLabelFromOldLabel.clicked.connect(self.on_radioButtonLabelFromOldLabel_clicked)

      row = row+uiRowOffset
      self.radioButtonNameFromText = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonNameFromText.setGeometry(QtCore.QRect(uiPad, row, 20, uiRowOffset-2))
      self.radioButtonNameFromText.setObjectName(_fromUtf8(&quot;radioButtonNameFromText&quot;))
      self.radioButtonNameFromText.clicked.connect(self.on_radioButtonNameFromText_clicked)

      self.lineEditNameFromText = QtGui.QLineEdit(self.centralWidget)
      self.lineEditNameFromText.setGeometry(QtCore.QRect(uiPad+20, row, uiColWidth-20, uiRowOffset-2))
      self.lineEditNameFromText.setObjectName(_fromUtf8(&quot;lineEditNameFromText&quot;))
      self.lineEditNameFromText.textChanged.connect(self.on_lineEditNameFromText_changed)

      self.radioButtonLabelFromText = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonLabelFromText.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, 20, uiRowOffset-2))
      self.radioButtonLabelFromText.setObjectName(_fromUtf8(&quot;radioButtonLabelFromText&quot;))
      self.radioButtonLabelFromText.clicked.connect(self.on_radioButtonLabelFromText_clicked)

      self.lineEditLabelFromText = QtGui.QLineEdit(self.centralWidget)
      self.lineEditLabelFromText.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad)+20, row, uiColWidth-20, uiRowOffset-2))
      self.lineEditLabelFromText.setObjectName(_fromUtf8(&quot;lineEditLabelFromText&quot;))
      self.lineEditLabelFromText.textChanged.connect(self.on_lineEditLabelFromText_changed)

      row = row+uiRowOffset+uiPad
      self.labelCapColorFrom = QtGui.QLabel(self.centralWidget)
      self.labelCapColorFrom.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-10))
      self.labelCapColorFrom.setFont(captionFont)
      self.labelCapColorFrom.setObjectName(_fromUtf8(&quot;labelCapColorFrom&quot;))

      row = row+uiRowOffset
      self.radioButtonColorFromNew = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonColorFromNew.setGeometry(QtCore.QRect(uiPad, row, uiColWidth, uiRowOffset-2))
      self.radioButtonColorFromNew.setObjectName(_fromUtf8(&quot;radioButtonColorFromNew&quot;))

      self.radioButtonColorFromOld = QtGui.QRadioButton(self.centralWidget)
      self.radioButtonColorFromOld.setGeometry(QtCore.QRect(uiColWidth+(2*uiPad), row, uiColWidth, uiRowOffset-2))
      self.radioButtonColorFromOld.setObjectName(_fromUtf8(&quot;radioButtonColorFromOld&quot;))

      row = row+uiRowOffset+uiPad
      ReplacePart.resize(uiMainWidth,row)

      self.groupBoxNewName.addButton(self.radioButtonNameFromNewDoc)
      self.groupBoxNewName.addButton(self.radioButtonNameFromNewName)
      self.groupBoxNewName.addButton(self.radioButtonNameFromNewLabel)
      self.groupBoxNewName.addButton(self.radioButtonNameFromOldName)
      self.groupBoxNewName.addButton(self.radioButtonNameFromOldLabel)
      self.groupBoxNewName.addButton(self.radioButtonNameFromText)

      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromNewDoc)
      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromNewName)
      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromNewLabel)
      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromOldName)
      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromOldLabel)
      self.groupBoxNewLabel.addButton(self.radioButtonLabelFromText)

      self.groupBoxColorFrom.addButton(self.radioButtonColorFromNew)
      self.groupBoxColorFrom.addButton(self.radioButtonColorFromOld)

      self.radioButtonNameFromNewDoc.setChecked(True)  #Set the default name to your preference
      self.radioButtonLabelFromOldLabel.setChecked(True) #Set the default label to your preference
      self.radioButtonColorFromOld.setChecked(True) #Set the default color inherit to your preference

      &quot;&quot;&quot;
      #*** FIXME ***----------------------------
      self.timer = QtCore.QTimer()
      QtCore.QObject.connect(self.timer, QtCore.SIGNAL(&quot;timeout()&quot;), self.my_update)
      self.timer.start(2000)

      #*** FIXME ***----------------------------
      &quot;&quot;&quot;
      self.retranslateUi(ReplacePart)
      
      QtCore.QMetaObject.connectSlotsByName(ReplacePart)

   def retranslateUi(self, ReplacePart):
      ReplacePart.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
      ReplacePart.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)
      ReplacePart.setWindowTitle(_translate(&quot;ReplacePart&quot;, &quot;Replace part&quot;, None))
      self.labelCapSelected.setText(_translate(&quot;ReplacePart&quot;, &quot;Selected Part :&quot;, None))
      self.labelSelected.setText(_translate(&quot;ReplacePart&quot;, &quot;No Selected Part&quot;, None))
      self.labelNew.setText(_translate(&quot;ReplacePart&quot;, &quot;Select New Part&quot;, None))
      self.LabelOld.setText(_translate(&quot;ReplacePart&quot;, &quot;Select Old Part&quot;, None))
      self.pushButtonNew.setText(_translate(&quot;ReplacePart&quot;, &quot;Select New Part&quot;, None))
      self.pushButtonOld.setText(_translate(&quot;ReplacePart&quot;, &quot;Select Old Part&quot;, None))
      self.pushButtonOk.setText(_translate(&quot;ReplacePart&quot;, &quot;Replace Old Part&quot;, None))
      self.labelCapNewName.setText(_translate(&quot;ReplacePart&quot;, &quot;New Name from&quot;, None))
      self.radioButtonNameFromNewDoc.setText(_translate(&quot;ReplacePart&quot;, &quot;New document&quot;, None))
      self.radioButtonNameFromNewName.setText(_translate(&quot;ReplacePart&quot;, &quot;New name&quot;, None))
      self.radioButtonNameFromNewLabel.setText(_translate(&quot;ReplacePart&quot;, &quot;New label&quot;, None))
      self.radioButtonNameFromOldName.setText(_translate(&quot;ReplacePart&quot;, &quot;Old name&quot;, None))
      self.radioButtonNameFromOldLabel.setText(_translate(&quot;ReplacePart&quot;, &quot;Old label&quot;, None))
      self.radioButtonNameFromText.setText(_translate(&quot;ReplacePart&quot;, &quot;t&quot;, None))
      self.lineEditNameFromText.setText(_translate(&quot;ReplacePart&quot;, &quot;name&quot;, None))
      self.labelCapNewLabel.setText(_translate(&quot;ReplacePart&quot;, &quot;New Label from&quot;, None))
      self.radioButtonLabelFromNewDoc.setText(_translate(&quot;ReplacePart&quot;, &quot;New document&quot;, None))
      self.radioButtonLabelFromNewName.setText(_translate(&quot;ReplacePart&quot;, &quot;New name&quot;, None))
      self.radioButtonLabelFromNewLabel.setText(_translate(&quot;ReplacePart&quot;, &quot;New label&quot;, None))
      self.radioButtonLabelFromOldName.setText(_translate(&quot;ReplacePart&quot;, &quot;Old name&quot;, None))
      self.radioButtonLabelFromOldLabel.setText(_translate(&quot;ReplacePart&quot;, &quot;Old label&quot;, None))
      self.radioButtonLabelFromText.setText(_translate(&quot;ReplacePart&quot;, &quot;t&quot;, None))
      self.lineEditLabelFromText.setText(_translate(&quot;ReplacePart&quot;, &quot;label&quot;, None))
      self.labelCapColorFrom.setText(_translate(&quot;ReplacePart&quot;, &quot;Inherit color from&quot;, None))
      self.radioButtonColorFromNew.setText(_translate(&quot;ReplacePart&quot;, &quot;New part&quot;, None))
      self.radioButtonColorFromOld.setText(_translate(&quot;ReplacePart&quot;, &quot;Old part&quot;, None))

   &quot;&quot;&quot;
   #*** FIXME ***----------------------------

   def my_update(self):
      selectedPart = self.getSelectedPart()
      self.labelSelected.setText(selectedPart[0] + &quot;,&quot; + selectedPart[1] + &quot;,&quot;+ selectedPart[2])
      FreeCAD.Console.PrintMessage(&quot;Selected part: &quot; + selectedPart[0] + &quot;,&quot; + selectedPart[1] + &quot;,&quot;+ selectedPart[2] + &quot;,&quot; + &quot;\n&quot;)

   def closeEvent(self, event):
      FreeCAD.Console.PrintMessage(&quot;closeEvent\n&quot;)
      if self.timer.stop():
         self.timer.stop()
         event.accept() # let the window close
      else:
         event.ignore()

   def on_exit(self, event):
      FreeCAD.Console.PrintMessage(&quot;exitEvent\n&quot;)
      if self.timer.stop():
         self.timer.stop()
         event.accept() # let the window close
      else:
         event.ignore()

   def hideEvent(self, event):
      FreeCAD.Console.PrintMessage(&quot;hideEvent\n&quot;)
      if self.timer.stop():
         self.timer.stop()
         event.accept() # let the window close
      else:
         event.ignore()

   #--------------------------------------
   &quot;&quot;&quot;

   def on_pushButtonNew_clicked(self):
      global oldpart
      global newpart
      newpart = self.getSelectedPart()
      if str(newpart[0]) == &quot;&quot;:
         self.labelNew.setText(&quot;No part selected&quot;)
      else:
         self.labelNew.setText(str(newpart[0])+ &quot; , &quot; + str(newpart[1]))
         self.radioButtonName()
         self.radioButtonLabel()
         Gui.Selection.clearSelection()
      if str(oldpart[0]) == str(newpart[0]):
         self.pushButtonOk.setEnabled(False)
      elif str(oldpart[0]) == &quot;&quot;:
         self.pushButtonOk.setEnabled(False)
      elif str(newpart[0]) == &quot;&quot;:
         self.pushButtonOk.setEnabled(False)
      else:
         self.pushButtonOk.setEnabled(True)

   def on_pushButtonOld_clicked(self):
      global oldpart
      global newpart
      oldpart = self.getSelectedPart()
      if str(oldpart[0]) == &quot;&quot;:
         self.LabelOld.setText(&quot;No part selected&quot;)
      else:
         self.LabelOld.setText(str(oldpart[0])+ &quot; , &quot; + str(oldpart[1]))
         self.radioButtonName()
         self.radioButtonLabel()
         Gui.Selection.clearSelection()
      if str(oldpart[0]) == str(newpart[0]):
         self.pushButtonOk.setEnabled(False)
      elif str(oldpart[0]) == &quot;&quot;:
         self.pushButtonOk.setEnabled(False)
      elif str(newpart[0]) == &quot;&quot;:
         self.pushButtonOk.setEnabled(False)
      else:
         self.pushButtonOk.setEnabled(True)

   def on_pushButtonOk_clicked(self):
      if self.radioButtonColorFromNew.isChecked():
         colors = self.getColors(&quot;new&quot;)
      if self.radioButtonColorFromOld.isChecked():
         colors = self.getColors(&quot;old&quot;)
      self.deleteOldPart()
      newPartName = self.makeSimple(colors)
      self.moveNew2Old(newPartName)
      self.move2Group(newPartName)
      App.ActiveDocument.recompute()
      App.Console.PrintMessage(&quot;Part replaced\n&quot;)
      #self.window.hide()

   def on_radioButtonNameFromNewDoc_clicked(self):
      self.radioButtonName()

   def on_radioButtonNameFromNewName_clicked(self):
      self.radioButtonName()

   def on_radioButtonNameFromNewLabel_clicked(self):
      self.radioButtonName()

   def on_radioButtonNameFromOldName_clicked(self):
      self.radioButtonName()

   def on_radioButtonNameFromOldLabel_clicked(self):
      self.radioButtonName()

   def on_radioButtonNameFromText_clicked(self):
      self.radioButtonName()

   def on_lineEditNameFromText_changed(self):
      self.radioButtonName()

   def on_radioButtonLabelFromNewDoc_clicked(self):
      self.radioButtonLabel()

   def on_radioButtonLabelFromNewName_clicked(self):
      self.radioButtonLabel()

   def on_radioButtonLabelFromNewLabel_clicked(self):
      self.radioButtonLabel()

   def on_radioButtonLabelFromOldName_clicked(self):
      self.radioButtonLabel()

   def on_radioButtonLabelFromOldLabel_clicked(self):
      self.radioButtonLabel()

   def on_radioButtonLabelFromText_clicked(self):
      self.radioButtonLabel()

   def on_lineEditLabelFromText_changed(self):
      self.radioButtonLabel()

   def radioButtonName(self):
      global newPartName
      if self.radioButtonNameFromNewDoc.isChecked():
         newPartName=self.getFromNew(0)
      elif self.radioButtonNameFromNewName.isChecked():
         newPartName=self.getFromNew(1)
      elif self.radioButtonNameFromNewLabel.isChecked():
         newPartName=self.getFromNew(2)
      elif self.radioButtonNameFromOldName.isChecked():
         newPartName=self.getFromOld(1)
      elif self.radioButtonNameFromOldLabel.isChecked():
         newPartName=self.getFromOld(2)
      elif self.radioButtonNameFromText.isChecked():
         newPartName=str(self.lineEditNameFromText.displayText())
      else:
         FreeCAD.Console.PrintError(&quot;Error: Unknown Name error\n&quot;)

   def radioButtonLabel(self):
      global newPartLabel
      if self.radioButtonLabelFromNewDoc.isChecked():
         newPartLabel=self.getFromNew(0)
      elif self.radioButtonLabelFromNewName.isChecked():
         newPartLabel=self.getFromNew(1)
      elif self.radioButtonLabelFromNewLabel.isChecked():
         newPartLabel=self.getFromNew(2)
      elif self.radioButtonLabelFromOldName.isChecked():
         newPartLabel=self.getFromOld(1)
      elif self.radioButtonLabelFromOldLabel.isChecked():
         newPartLabel=self.getFromOld(2)
      elif self.radioButtonLabelFromText.isChecked():
         newPartLabel=str(self.lineEditLabelFromText.displayText())
      else:
         FreeCAD.Console.PrintError(&quot;Error: Unknown Label error\n&quot;)

   def getFromNew(self, index):
      global newpart
      return newpart[index];

   def getFromOld(self, index):
      global oldpart
      return oldpart[index];

   def getSelectedPart(self):
      sel = FreeCADGui.Selection.getSelection()
      if sel:
         sel = sel[0]
         name = sel.Name
         label = sel.Label
         doc = FreeCAD.ActiveDocument.Name
         pos = App.ActiveDocument.getObject(name).Placement.Base   
         rot = App.ActiveDocument.getObject(name).Placement.Rotation
         grp = self.inGroup(name)
         the_part=[doc , name, label, pos, rot, grp];
         return the_part;
      else:
         FreeCAD.Console.PrintError(&quot;Error: One object must be selected\n&quot;)
         the_part=[&quot;&quot; , &quot;&quot;];
         return the_part;

   def makeSimple(self, colors):
      global oldpart
      global newpart
      global newPartName
      global newPartLabel
      fixPartName = newPartName
      #newPartLabel = newPartLabel
      newPartName = self.uniqeName(fixPartName)
      App.setActiveDocument(oldpart[0])
      Gui.ActiveDocument=Gui.getDocument(oldpart[0])
      App.ActiveDocument=App.getDocument(oldpart[0])
      App.ActiveDocument.addObject('Part::Feature',newPartName).Shape=App.getDocument(newpart[0]).getObject(newpart[1]).Shape
      App.ActiveDocument.ActiveObject.Label = newPartLabel
      App.ActiveDocument.getObject(newPartName).Label = newPartLabel
      Gui.getDocument(oldpart[0]).getObject(newPartName).ShapeColor = colors[0]
      Gui.getDocument(oldpart[0]).getObject(newPartName).LineColor =  colors[1]
      Gui.getDocument(oldpart[0]).getObject(newPartName).PointColor = colors[2]
      return newPartName;

   def moveNew2Old(self, newPartName):
      global oldpart
      global newpart
      App.ActiveDocument.getObject(newPartName).Placement = App.Placement(oldpart[3], oldpart[4])

   def deleteOldPart(self):
      global oldpart
      App.setActiveDocument(oldpart[0])
      Gui.ActiveDocument=Gui.getDocument(oldpart[0])
      App.ActiveDocument=App.getDocument(oldpart[0])
      App.ActiveDocument.removeObject(oldpart[1])

   def inGroup(self, partName):
      try:
         grp = App.ActiveDocument.getObject(partName).InList
         grpName = grp[0].Name
      except:
         grpName = &quot;&quot;
      return grpName;

   def move2Group(self,  newPartName):
      global oldpart
      grp = App.ActiveDocument.getObject(oldpart[5])
      part = App.ActiveDocument.getObject(newPartName)
      grp.addObject(part)

   def getColors(self, newORold):
      global oldpart
      global newpart
      if newORold == &quot;new&quot;:
         shape = Gui.getDocument(newpart[0]).getObject(newpart[1]).ShapeColor
         line = Gui.getDocument(newpart[0]).getObject(newpart[1]).LineColor
         point = Gui.getDocument(newpart[0]).getObject(newpart[1]).PointColor
      elif newORold == &quot;old&quot;:
         shape = Gui.getDocument(oldpart[0]).getObject(oldpart[1]).ShapeColor
         line = Gui.getDocument(oldpart[0]).getObject(oldpart[1]).LineColor
         point = Gui.getDocument(oldpart[0]).getObject(oldpart[1]).PointColor
      else:
         FreeCAD.Console.PrintMessage(&quot;Error! Color from newpart or old?\n&quot;)
      colors = [ shape, line, point ];
      return colors;

   def uniqeName(self, newPartName):
      global oldpart
      objs = App.getDocument(oldpart[0]).Objects
      for obj in objs:
         if obj.Name  == newPartName:
            if obj.Name != oldpart[1]:
               i = 0
               for iobj in objs:
                  if iobj.Name == newPartName + &quot;_&quot; + str(i) and iobj.Name != oldpart[1]:
                     i += 1
               return newPartName + &quot;_&quot; + str(i);
      return newPartName;

class replace():
   Gui.Selection.clearSelection()
   d = QtGui.QWidget()
   d.ui = Ui_ReplacePart()
   d.ui.setupUi(d)
   d.show()

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Rotate View</title>
    <ns>0</ns>
    <id>1017</id>
    <revision>
      <id>81695</id>
      <parentid>58001</parentid>
      <timestamp>2014-05-06T10:53:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>indentation error</comment>
      <sha1>c1u2ejoxzgj16b95mfj8r3qn5fhdzms</sha1>
      <text xml:space="preserve" bytes="588">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Rotate View by 90°|Description=This macro rotates the current view by 90° to the left. Only works if you are in Top view|Author=Yorik}}

&lt;!--T:2--&gt;
This macro rotates the current view by 90° to the left. Only works if you are in Top view



&lt;syntaxhighlight&gt;
import math
from pivy import coin
cam = Gui.ActiveDocument.ActiveView.getCameraNode()
rot = coin.SbRotation()
rot.setValue(coin.SbVec3f(0,0,1),math.pi/2)
nrot = cam.orientation.getValue() * rot
cam.orientation = nrot

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Shake Sketch</title>
    <ns>0</ns>
    <id>40695</id>
    <revision>
      <id>108967</id>
      <parentid>108966</parentid>
      <timestamp>2014-09-11T20:51:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>q7z54b4y14oq6l1df74sd4fvs55rtoj</sha1>
      <text xml:space="preserve" bytes="4913">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro Shake Sketch|Description=Shake a sketch in order to discover its unconstrained parts|Author=Gaël Ecorchard}}

&lt;!--T:2--&gt;
Shake a sketch in order to discover its unconstrained parts. Enter edit mode for a sketch and launch the macro. The macro will add a random noise on all sketch points. The sketch is then solved, constrained parts will retain their position, free parts will move.


===Script=== &lt;!--T:3--&gt;

Macro Shake_Sketch.py

&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-

# FreeCAD macro to shake a sketch in order to discover its unconstrained parts.
#
# A Gaussian noise is introduced in all sketch points and the sketch is then
# solved.
# Enter edit mode for a sketch and launch the macro.
# Beware that the sketch can look different because some constraints have
# several solutions. In this case, just undo.
#
# This file is released under the MIT License.
# Author: Gaël Ecorchard
# Version: 1.0, 2014-08, first release.

# Amplitude of the point displacements.
# The standard deviation of the Gaussian noise is the largest sketch dimension
# multiplied by this factor.
displacement_amplitude = 0.1

# End of configuration.

from random import gauss

import FreeCADGui as Gui
from FreeCAD import Base
from FreeCAD import Part

# For each sketch geometry type, map a list of points to move.
geom_points = {
    'point': [1],
    'line': [1, 2],  # first point, last point
    'circle': [0, 3],  # curve, center
    'arc': [1, 2, 3],  # first point, last point, center
}


class BoundingBox(object):
    xmin = None
    xmax = None
    ymin = None
    ymax = None

    def enlarge_x(self, x):
        if self.xmin is None:
            self.xmin = x
            self.xmax = x
            return
        if self.xmin &gt; x:
            self.xmin = x
            return
        if self.xmax &lt; x:
            self.xmax = x
            return

    def enlarge_y(self, y):
        if self.ymin is None:
            self.ymin = y
            self.ymax = y
            return
        if self.ymin &gt; y:
            self.ymin = y
            return
        if self.ymax &lt; y:
            self.ymax = y
            return

    def enlarge_point(self, point):
        self.enlarge_x(point.x)
        self.enlarge_y(point.y)

    def enlarge_line(self, line):
        self.enlarge_x(line.StartPoint.x)
        self.enlarge_x(line.EndPoint.x)
        self.enlarge_y(line.StartPoint.y)
        self.enlarge_y(line.EndPoint.y)

    def enlarge_circle(self, circle):
        self.enlarge_x(circle.Center.x - circle.Radius)
        self.enlarge_x(circle.Center.x + circle.Radius)
        self.enlarge_y(circle.Center.y - circle.Radius)
        self.enlarge_y(circle.Center.y + circle.Radius)

    def enlarge_arc_of_circle(self, arc):
        # TODO: correctly compute the arc extrema (cf. toShape().BoundBox)
        self.enlarge_x(arc.Center.x)
        self.enlarge_y(arc.Center.y)


def get_sketch_dims(sketch):
    bbox = BoundingBox()
    for geom in sketch.Geometry:
        if isinstance(geom, Base.Vector):
            bbox.enlarge_point(geom)
        elif isinstance(geom, Part.Line):
            bbox.enlarge_line(geom)
        elif isinstance(geom, Part.Circle):
            bbox.enlarge_circle(geom)
        elif isinstance(geom, Part.ArcOfCircle):
            bbox.enlarge_arc_of_circle(geom)
    if (bbox.xmin is not None) and (bbox.ymin is not None):
        return bbox.xmax - bbox.xmin, bbox.ymax - bbox.ymin
    else:
        return 0, 0


def add_noise(point, sigma):
    &quot;&quot;&quot;Add a Gaussian noise with standard deviation sigma&quot;&quot;&quot;
    point.x = gauss(point.x, sigma)
    point.y = gauss(point.y, sigma)


def move_points(sketch, geom_index, point_indexes, sigma):
    # Direct access to sketch.Geometry[index] does not work. This would,
    # however prevent repeated recompute.
    for point_index in point_indexes:
        point = sketch.getPoint(geom_index, point_index)
        add_noise(point, sigma)
        sketch.movePoint(geom_index, point_index, point)

view_provider = Gui.activeDocument().getInEdit()

# Don't know how to exit from a macro.
do_move = True
if not view_provider:
    do_move = False

if do_move:
    sketch = view_provider.Object

    if sketch.TypeId != 'Sketcher::SketchObject':
        do_move = False

if do_move:
    sigma = max(get_sketch_dims(sketch)) * displacement_amplitude

    for i, geom in enumerate(sketch.Geometry):
        if isinstance(geom, Base.Vector):
            move_points(sketch, i, geom_points['point'], sigma)
        elif isinstance(geom, Part.Line):
            move_points(sketch, i, geom_points['line'], sigma)
        elif isinstance(geom, Part.Circle):
            move_points(sketch, i, geom_points['circle'], sigma)
        elif isinstance(geom, Part.ArcOfCircle):
            move_points(sketch, i, geom_points['arc'], sigma)
&lt;/syntaxhighlight&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Solid Sweep</title>
    <ns>0</ns>
    <id>1850</id>
    <revision>
      <id>82012</id>
      <parentid>81979</parentid>
      <timestamp>2014-05-08T12:24:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>correct code</comment>
      <sha1>09uagai31dygnfzxdrbprgykia6adh2</sha1>
      <text xml:space="preserve" bytes="3271">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Solid Sweep|Description=Creates a solid by sweeping a profile from a trajectory.|Author=Normandc}}

&lt;!--T:2--&gt;
This macro creates a solid by sweeping a 2D profile along a trajectory previously selected in the 3D view. The 2D elements can be created through the regular tools in FreeCAD's GUI.

&lt;!--T:3--&gt;
It should be noted that the resulting solid will '''not''' be parametric. If you decide to change your profile or trajectory, you'll need to run the macro again.

&lt;!--T:4--&gt;
[[File:Solid_sweep.png‎|500px|A few examples of sweeping all using the same oblong section and three kinds of trajectory.]]

=== How to use === &lt;!--T:5--&gt;
* Create two 2D elements, one for the section and one for the trajectory, of the types listed below.
* Select, either in the Project tree or in the 3D view, first the trajectory, then the profile. The order is important!
* Open the Macro manager, select the macro and click &quot;Execute&quot;.
* A '''Sweep''' object will be created in the Project tree.

=== Supported 2D elements === &lt;!--T:6--&gt;
* Wires
* [[Image:Sketcher_NewSketch.png|32px]] [[Sketcher Workbench|Sketches]]
* [[Image:Draft_BSpline.png]] [[Draft BSpline]]
* 2D primitives from the ''Parametric → [[Image:Part_CreatePrimitives.png|32px]] [[Part_CreatePrimitives|Create Primitives]] ...'' menu (circle, helix)

=== Tips === &lt;!--T:7--&gt;
* The section has to be a closed profile or the result will not be a solid.
* The section does not need to be located on the trajectory, but it's preferable that it be normal (perpendicular) to the trajectory.
* The trajectory can either be an open or closed profile (circle, or line and arc segments) but all elements need to be tangent or the resulting shape will be unexpected. For example, a trajectory with straight corners like a rectangle will not produce a solid.
* If the solid gets twisted, edit the macro to change the ''isFrenet'' value to 0 (zero) and try again.
* Setting the ''makeSolid'' variable to 0 (zero) in the macro will produce a set of surfaces with open ends.

=== The script === &lt;!--T:8--&gt;


&lt;syntaxhighlight&gt;

import Part, FreeCAD, math, PartGui, FreeCADGui
from FreeCAD import Base

# get the selected objects, with first selection for the trajectory and second for the section
s = FreeCADGui.Selection.getSelection()
try:
     shape1=s[0].Shape
     shape2=s[1].Shape
except:
     print &quot;Wrong selection&quot;

traj = Part.Wire([shape1])
section = Part.Wire([shape2])

# create Part objec in the current document
myObject=App.ActiveDocument.addObject(&quot;Part::Feature&quot;,&quot;Sweep&quot;)

# variable makeSolid = 1 to create solid, 0 to create surfaces
makeSolid = True #1
isFrenet = True #1

# create a 3D shape and assigh it to the current document
Sweep = Part.Wire(traj).makePipeShell([section],makeSolid,isFrenet)
myObject.Shape = Sweep

&lt;/syntaxhighlight&gt;


=== Credits === &lt;!--T:9--&gt;
Thanks to [[User:Wmayer|Wmayer]] for his help in writing this script.

&lt;!--T:10--&gt;
Two examples of uses can be found in [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=1222&amp;start=50#p11120 this forum topic], along with download links to the FCStd files. Using a helix as trajectory, a solid sweep can be used to create a bolt thread.


</text>
    </revision>
  </page>
  <page>
    <title>Macro Spring</title>
    <ns>0</ns>
    <id>41798</id>
    <revision>
      <id>118221</id>
      <parentid>111607</parentid>
      <timestamp>2014-11-05T10:37:16Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>add &quot;Gui.updateGui()&quot; of the code</comment>
      <sha1>lpagarum2mnbwbnjjw6wk493tgx7fzn</sha1>
      <text xml:space="preserve" bytes="1836">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Spring Simul|Description=Spring simulation.|Author=Mario52}}

&lt;!--T:2--&gt;
Simulates the compression and relaxation of a spring.

&lt;!--T:3--&gt;
[[File:Spring_00.gif|left]]{{clear}}

===Uses=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Open the 2 files below (Spring.FCMacro and Spring.FCStd) in FreeCAD with 2 screens (Menu: Windows &gt; Tile) and click in the window and the macro and click F6 (debug macro) to run the macro or run the macro whit [[File:Macro-execute.svg]]

&lt;!--T:6--&gt;
[[File:Spring_02.png|left|300px]]{{clear}}

===The File=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[http://forum.freecadweb.org/download/file.php?id=7679 Spring.FCStd]

===Script=== &lt;!--T:9--&gt;


Spring.FCMacro

&lt;syntaxhighlight&gt;
import FreeCAD, FreeCADGui, Draft, Part
from FreeCAD import Base
import time

ii = iib = FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Pitch
i = ib = FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Height

pas = 1

for ii2 in range(int(60)):
    if pas == 0:
        if ii &gt; iib-1:
            pas = 1
        else:
            ii += 1
            i = (ii * 10)
    else:
        if ii &lt; 2:
            pas = 0
        else:
            ii -= 1
            i = (ii * 10)
   
    FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Pitch = ii
    FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Height = i
    App.Console.PrintMessage(str(ii2)+&quot;  &quot; + str(ii)+&quot;  &quot; + str(i)+&quot;  &quot; + str(pas) +&quot;\n&quot;)
    Gui.updateGui()
    time.sleep(0.1) # modify the time here
#FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Pitch = iib
#FreeCAD.getDocument(&quot;Spring&quot;).getObject(&quot;Helix001&quot;).Height = ib

&lt;/syntaxhighlight&gt;

===Link=== &lt;!--T:10--&gt;
The discussion page: [http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=7449#p62193 scripting animations]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro SuperWire</title>
    <ns>0</ns>
    <id>1630</id>
    <revision>
      <id>133478</id>
      <parentid>57882</parentid>
      <timestamp>2014-12-26T20:34:20Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>delete spaces</comment>
      <sha1>loa61za9j07etrbica47nj9auc8ew90</sha1>
      <text xml:space="preserve" bytes="994">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=SuperWire|Description=This macro creates a wire from selected objects (lines and arcs) even where normal wire creation methods (for example the upgrade tool) fail|Author=Yorik}}

&lt;!--T:2--&gt;
This macro creates a wire from selected objects (lines and arcs) even where normal wire creation methods (for example the upgrade tool) fail.&lt;br /&gt;
Attention, you need a recent version of FreeCAD for this to work



{{Code|code=
import FreeCAD,FreeCADGui,Part
try:
    import DraftGeomUtils as fcgeo
except:
    from draftlibs import fcgeo

sel = FreeCADGui.Selection.getSelection()
if not sel:
   FreeCAD.Console.PrintWarning(&quot;Select something first!&quot;)
else:
   elist = []
   for obj in sel:
       if hasattr(obj,&quot;Shape&quot;):
           elist.append(obj.Shape.Edges[0])
   wire = fcgeo.superWire(elist)
   if wire:
       Part.show(wire)
   else:
       FreeCAD.Console.PrintError(&quot;SuperWire operation failed!&quot;)

}}
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro Texture Objects</title>
    <ns>0</ns>
    <id>1669</id>
    <revision>
      <id>81708</id>
      <parentid>58021</parentid>
      <timestamp>2014-05-06T11:39:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>indentation</comment>
      <sha1>e78n346phryhl7v3syghejzog7zt3am</sha1>
      <text xml:space="preserve" bytes="913">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Texture Objects|Description=This macro allows you to temporarily put a texture image on selected objects. To remove the textures, simply close and reopen the document.|Author=yorik}}

&lt;!--T:2--&gt;
This macro allows you to temporarily put a texture image on selected objects. To remove the textures, simply close and reopen the document.

&lt;!--T:3--&gt;
[[Image:Textured_objects.jpg|680px]]


{{clear}}
&lt;syntaxhighlight&gt;

import FreeCADGui
from PyQt4 import QtGui
from pivy import coin

# get a jpg filename
jpgfilename = QtGui.QFileDialog.getOpenFileName(QtGui.qApp.activeWindow(),'Open image file','*.jpg')

# apply textures
for obj in FreeCADGui.Selection.getSelection():
    rootnode = obj.ViewObject.RootNode
    tex =  coin.SoTexture2()
    tex.filename = str(jpgfilename)
    rootnode.insertChild(tex,1)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro TruncateSpring</title>
    <ns>0</ns>
    <id>45322</id>
    <revision>
      <id>124426</id>
      <parentid>124250</parentid>
      <timestamp>2014-11-19T21:44:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>page to delete - no page link here</comment>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Macro View Rotation</title>
    <ns>0</ns>
    <id>1731</id>
    <revision>
      <id>81702</id>
      <parentid>65240</parentid>
      <timestamp>2014-05-06T11:04:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>indentation error</comment>
      <sha1>qviaxcibuaf8vqyom0sz9ugoqfqcmei</sha1>
      <text xml:space="preserve" bytes="6980">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=View Rotation|Name/es=View Rotation|Description=Macro provides a GUI to permit precise rotation of the objects in the view.|Author=Joe Dowsett}}

&lt;!--T:2--&gt;
This GUI allows the view to be rotated with more precision than when using the mouse.  Rotation is according to axes fixed with respect to the user and not the objects, though the aim is that the objects rotate about their approximate shared centre rather than the view centre.&lt;br /&gt;
The GUI defaults to the top right of the screen, this behaviour can be changed by editing



&lt;syntaxhighlight&gt;
 		a = QtGui.QDesktopWidget()
 		right = a.availableGeometry().width()
  
 		self.setGeometry(right-300, 0, 300, 150)
&lt;/syntaxhighlight&gt;



&lt;!--T:3--&gt;
at the end of the function 'initUI'.  The first two arguments (right-300, 0) provide the position for the top left corner of the window - my experience is that the behaviour was as intended on Ubuntu but Vista positioned the window too high and the 0 needed to be changed to ~30.&lt;br /&gt;
Three icons are referred to to symbolise the rotation directions.  A zip file containing these icons can be found [http://forum.freecadweb.org/download/file.php?id=453 here], the images should be placed in the folder containing your macros.  Please feel free to contribute better ones!



&lt;syntaxhighlight&gt;

from PyQt4 import QtGui, QtCore
from pivy import coin
from math import pi


def find_centre():
	xmax = xmin = ymax = ymin = zmax = zmin = 0	
	for obj in App.ActiveDocument.Objects:
		if obj.Type[:4] == &quot;Mesh&quot;:
			box = obj.Mesh.BoundBox
		elif obj.Type[:6] == &quot;Points&quot;:
			box = obj.Points.BoundBox
		elif obj.Type[:4] == &quot;Part&quot;:
			box = obj.Shape.BoundBox
		else:
			continue
		xmax = max(xmax, box.XMax)
		xmin = min(xmin, box.XMin)
		ymax = max(ymax, box.YMax)
		ymin = min(ymin, box.YMin)
		zmax = max(zmax, box.ZMax)
		zmin = min(zmin, box.ZMin)

	centre = FreeCAD.Vector((xmax+xmin)/2.0, (ymax+ymin)/2.0, (zmax+zmin)/2.0)
	return centre



class rotate_gui(QtGui.QWidget):  
	def __init__(self):
		super(rotate_gui, self).__init__()
		self.initUI()
		self.initRotate()


	def initUI(self):
		self.sld = [0,1,2]
		self.tbox = [0,1,2]
		path = FreeCAD.ConfigGet(&quot;UserAppData&quot;)
		icon = [0,1,2]
		icons = ('right.png', 'up.png', 'out.png')

		for i in range(3): 
			self.sld[i] = QtGui.QSlider(QtCore.Qt.Horizontal, self)
			self.sld[i].setFocusPolicy(QtCore.Qt.NoFocus)
			self.sld[i].setSingleStep(5)
			self.sld[i].setPageStep(15)
			self.sld[i].setValue(0)
			self.sld[i].setMaximum(180)
			self.sld[i].setMinimum(-180)
			self.tbox[i] = QtGui.QLineEdit(self)
			self.tbox[i].setText(&quot;0&quot;)
			self.tbox[i].setAlignment(QtCore.Qt.AlignRight)
			icon[i] = QtGui.QLabel(self)
			icon[i].setPixmap(QtGui.QPixmap(path + icons[i]))
			self.sld[i].valueChanged[int].connect(self.valueChange)
			self.tbox[i].returnPressed.connect(self.valueEntered)

		resetButton = QtGui.QPushButton(&quot;Reset&quot;)
		resetButton.clicked.connect(self.reset)

		okButton = QtGui.QPushButton(&quot;OK&quot;)
		okButton.clicked.connect(self.close)

		cancelButton = QtGui.QPushButton(&quot;Cancel&quot;)
		cancelButton.clicked.connect(self.cancel)

		hbox = [0,1,2,3]
		vbox = QtGui.QVBoxLayout()

		for i in range(3):
			hbox[i] = QtGui.QHBoxLayout()
			hbox[i].addWidget(icon[i],1, QtCore.Qt.AlignCenter)
			hbox[i].addWidget(self.sld[i],4)
			hbox[i].addWidget(self.tbox[i],1)
			vbox.addLayout(hbox[i])

		hbox[3] = QtGui.QHBoxLayout()
		hbox[3].addWidget(resetButton,1)
		hbox[3].addWidget(okButton,1)
		hbox[3].addWidget(cancelButton,1)
		vbox.addStretch(1)
		vbox.addLayout(hbox[3])

		self.setLayout(vbox)

		a = QtGui.QDesktopWidget()
		right = a.availableGeometry().width()

		self.setGeometry(right-300, 0, 300, 150)
		self.setWindowTitle('Rotate view...')
		self.show()


	def initRotate(self):
		self.internal = False
		self.current = 0

		self.cam = Gui.ActiveDocument.ActiveView.getCameraNode()	
		self.centre = coin.SbVec3f(find_centre())		
		self.view = self.cam.orientation.getValue()
		self.pos = self.cam.position.getValue()

		#store a copy of the original view to be restored in the case of user selecting Reset or Cancel
		self.original_view = coin.SbRotation(self.view.getValue())
		self.original_pos = coin.SbVec3f(self.pos.getValue())

		self.config_direction(0)


	def reset(self):
		#reset the view to the original one
		self.cam.orientation = self.original_view
		self.cam.position = self.original_pos
		self.internal = True
		for sld in self.sld:
			sld.setValue(0)
		self.internal = False
		for tbox in self.tbox:
			tbox.setText(&quot;0&quot;)
		self.config_direction(0)


	def cancel(self):
		self.reset()
		self.close()


	def config_direction(self, i):
		#evaluate the vectors corresponding to the three directions for the current view, and assign the i-th one to self.direction
		self.view = self.cam.orientation.getValue()	
		self.view = coin.SbRotation(self.view.getValue())
		self.pos = self.cam.position.getValue()
		self.pos = coin.SbVec3f(self.pos.getValue())

		up = coin.SbVec3f(0,1,0)
		self.up = self.view.multVec(up)
		out = coin.SbVec3f(0,0,1)
		self.out = self.view.multVec(out)
		u = self.up.getValue()
		o = self.out.getValue()
		r = (u[1]*o[2]-u[2]*o[1], u[2]*o[0]-u[0]*o[2], u[0]*o[1]-u[1]*o[0])
		self.right = coin.SbVec3f(r)

		self.direction = [self.right, self.up, self.out][i]

 	def check(self, i):
		#check if the direction of rotation has changed, if so then set previous slider &amp; textbox to zero, and setup the new direction
		if i &lt;&gt; self.current:
			self.internal = True
			self.sld[self.current].setValue(0)
			self.tbox[self.current].setText(&quot;0&quot;)
			self.internal = False
			self.current = i
			self.config_direction(i)


	def rotate(self, value):
		#carry out the desired rotation about self.direction
		val = value*pi/180.0
		rot = coin.SbRotation(self.direction, -val)		
		nrot = self.view*rot
		prot = rot.multVec(self.pos - self.centre) + self.centre
		self.cam.orientation = nrot
		self.cam.position = prot


	def valueChange(self, value):
		#respond to the change in value of a slider, update the corresponding text box, check for a direction change then rotate
		#if the value was changed internally, ignore event.
		if self.internal:
			return

		sender = self.sender()
		for i in range(3):
			if sender == self.sld[i]:
				break
		self.tbox[i].setText(str(value))
		self.check(i)
		self.rotate(value)


	def valueEntered(self):
		#respond to a value being entered in a text box, updating the corresponding slider, check for direction change then rotate
		sender = self.sender()
		for i in range(3):
			if sender == self.tbox[i]:
				break
		value = int(self.tbox[i].text())
		self.internal = True
		self.sld[i].setValue(value)
		self.internal = False
		self.check(i)
		self.rotate(value)
 

rotate = rotate_gui()

&lt;/syntaxhighlight&gt;
{{clear}}

==Discussion page==
[http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=1784&amp;hilit=View+Rotation#p12012 View+Rotation]

</text>
    </revision>
  </page>
  <page>
    <title>Macro WireXYZ</title>
    <ns>0</ns>
    <id>41984</id>
    <revision>
      <id>111981</id>
      <parentid>111980</parentid>
      <timestamp>2014-10-01T19:38:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0gxqi8t1acz2fzwe90qdn4zw6kk4vh3</sha1>
      <text xml:space="preserve" bytes="2380">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=WireXYZ|Description=Creates a wire with coordinate x y z.|Author=Mario52}}

===Description=== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This macro creates a wire (or points) with the coordinates extracted from a file. The coordinates X Y Z are separated by a space. 

===Use=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
The file must have three coordinates X Y Z in ascii format without header

&lt;!--T:6--&gt;
'''Ex:'''


&lt;code&gt;
0 240.42686 0

20 243.83054 0

40 247.33677 0

60 250.94702 0

80 254.66283 0

100 258.48575 0

...
&lt;/code&gt;


&lt;!--T:7--&gt;
Modify your path and name of file, save and load the macro and run.

&lt;syntaxhighlight&gt;
fichier = &quot;C:\yourPath\cloud.asc&quot;                          # path and name of file.txt
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
If you want a close wire modify this line (closed=False):

&lt;syntaxhighlight&gt;
Draft.makeWire(wire,closed=False,face=False,support=None)   # create the wire
&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
and replace with (closed=True):

&lt;syntaxhighlight&gt;
Draft.makeWire(wire,closed=True,face=False,support=None)   # create the wire
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
same for the face, False or True (closed=True).

===Script=== &lt;!--T:11--&gt;

Macro_WireXYZ.FCMacro
&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-
# created a wire with coordinate x y z unseparated (in the file)
#EX:
#0 0 0
#10 10 10
#15 20 25
#. . . .

from __future__ import unicode_literals
from FreeCAD import Base
import Draft, Part

fichier = &quot;C:\yourPath\cloud.asc&quot;                          # path and name of file.txt

file = open(fichier, &quot;r&quot;)                                  # open the file read
wire = []
X=Y=Z = 0.0

for ligne in file:
    coordinates = ligne.split()
    X,Y,Z = coordinates                                     # separate the coordinates
#    Draft.makePoint(float(X),float(Y),float(Z))            # create points (uncomment for use)
    print X,&quot; &quot;,Y,&quot; &quot;,Z
    wire.append(FreeCAD.Vector(float(X),float(Y),float(Z))) # append the coordinates

file.close()
Draft.makeWire(wire,closed=False,face=False,support=None)   # create the wire
&lt;/syntaxhighlight&gt;


===Links=== &lt;!--T:12--&gt;
The discussion [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=7828 How do I transform a point cloud to a line?]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro WorkFeatures</title>
    <ns>0</ns>
    <id>53456</id>
    <revision>
      <id>133953</id>
      <parentid>133937</parentid>
      <timestamp>2014-12-27T16:15:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>hare -&gt; are</comment>
      <sha1>buk4qykq6ya8cdfg2q4ecm8am1v70jm</sha1>
      <text xml:space="preserve" bytes="5585">
&lt;!--T:1--&gt;
{{Macro|Icon=WF centerObjectsPlanes|Name=Macro WorkFeatures|Description=Tool utility to create plans of the axes, planes from 3 points and other functions.|Author=rentlau_64}}

==Description== &lt;!--T:2--&gt;
Tool utility to create plans of the axes, planes from 3 points, axes on a form, information on the coordinates of the shape and many other useful features to facilitate the creation of your project. This utility is up next in the combo view.


&lt;!--T:3--&gt;
[[File:WF.png|WorkFeatures|640px]]
{{clear}}

==Uses== &lt;!--T:4--&gt;
'''Work Features'''

&lt;!--T:5--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;200&quot; heights=&quot;400&quot;&gt;
Image:Macro WorkFeatures 01.png|After activating Work Features, the tool moves to the left in the window Combo view.
Image:Macro WorkFeatures 07.png|Each use and each Tag that corresponds to a function group is a group created in the name of Tag used. The Axis, Point and Planes origin are directly keyed to hidden.
Image:Macro WorkFeatures 08.png|You can ENTERING AND USING common commands to make visible the created function.&lt;br /&gt;Example key '''{{KEY|Space}}''' or select your object and click right of mouse and click &quot;'''Hide selection'''&quot; or &quot;'''Show selection'''&quot;.
&lt;/gallery&gt;
&lt;/center&gt;


&lt;!--T:6--&gt;
'''Tag Origin'''
{|
|[[File:Macro WorkFeatures 02.png|200px|left]]
|
*'''Tag Origin'''
* {{KEY|Origin}} : Create at origin: a point and X,Y and Z axis and XZ,XY  and YZ planes. The Axis, Point and Planes origin are directly keyed to hidden.
|}

&lt;!--T:7--&gt;
'''Tag Points'''
{|
|[[File:Macro WorkFeatures 03.png|200px|left]]
|
*'''Tag Points'''
* {{KEY|Object(s) Center}} : Create a Point at center location of all selected Object(s).
* {{KEY|Lines(s) Center}} : Create a Point at mid point location of each selected Line(s).
* {{KEY|Line(s) Extrema}} : Create Points at start and end location of each selected Line(s).
* {{KEY|Circle(s) Center}} : Create a Point at center location of each selected Circle(s) or Arc(s).
* {{KEY|Point along Line}} : Create a Point on a line at some distance of the extremity  point selected.
* '''SpinBox''' : enter the displacement value
* {{KEY|Face(s) Center}} : Create a Point at center location of each selected Face(s).
* {{KEY|Point (Line,Face)}} : Create a point at the intersection of the Line and Plane selected.
* {{KEY|Point (Line,Point)}} : Create a projection Point of a Point onto a Line and symetric point.
* {{KEY|Point (Point,Face)}} : Create a projection Point of a Point onto a Face.
* {{KEY|Object(s) Base Point}} : Create Base Point of all selected Object(s).
|}


&lt;!--T:8--&gt;
'''Tag Axis'''
{|
|[[File:Macro WorkFeatures 04.png|200px|left]]
|
*'''Tag Axis'''
* {{KEY|Object(s) X, Y, Z Axes}} : Create 3 Axes at center location of all selected Object(s).
* {{KEY|Two Points Axis}} : Create an Axis crossing 2 Points.
* '''SpinBox''' : enter the displacement value
* {{KEY|Cylinder(s) Axis}} : Create the Axis of a Cylinder.
* {{KEY|Axis (Line,Line)}} : Create an Axis between 2 Axes.
* {{KEY|Plane(s) Axes}} : Create 2 Perpendicular Axes at center location of a Plane.
* {{KEY|Axis (Point,Axis)}} : Create an Axis parallel to an Axis and crossing a Point.
* {{KEY|Axis (Axis,Point)}} : Create an Axis perpendicular to an Axis and crossing a Point.
* '''SpinBox''' : enter the displacement value
* {{KEY|Axis (Plane,Axis)}} : Create an Axis on a Plane by projection from another Axis.
* {{KEY|Axis (Plane,Plane)}} : Create an Axis by intersect of 2 Planes.
* {{KEY|Object(s) Base Axis}} : Create 3 Axes at Base location of all selected Object(s).
|}

&lt;!--T:9--&gt;
'''Tag Plane'''
{|
|[[File:Macro WorkFeatures 05.png|200px|left]]
|
*'''Tag Plane'''
* {{KEY|Three Points Plane}} : Create a Plane crossing 3 Points.
* {{KEY|Plane (Point, Axis)}} : Create a plane crossing a Line and a Point. The point MUST not belongs to the Line !
* {{KEY|Plane (Point, _Axis)}} : Create a plane perpendicular to a Line and crossing a Point.
* {{KEY|Plane (Point, Plane)}} : Create a plane crossing a Point and parallel to a Plane.
* '''SpinBox''' : enter the displacement value
* {{KEY|Plane (Plane, Axis)}} : Create a Plane crossing a Line and perpendicular to a Plane.
* '''SpinBox''' : enter the displacement value
* {{KEY|Object(s) Center Planes}} : Create 3 Planes (XY, XZ and YZ) at center location of all selected Object(s).
|}

&lt;!--T:10--&gt;
'''Tag Boxes'''
{|
|[[File:Macro WorkFeatures 06.png|200px|left]]
|
*'''Tag Boxes'''
* {{KEY|Bounding Box(es)}} : Create bounding boxes around each of selected object(s).
* {{KEY|Bounding Box}} : Create one bounding box around all of selected object(s).
|}

==Script== &lt;!--T:11--&gt;
After downloading the file compressed here '''[http://forum.freecadweb.org/download/file.php?id=10325 WF_2014_12_27.zip]''' , you must unzip the zip and copy all the files in your macro directory.

&lt;!--T:12--&gt;
# click '''Menu &gt; Macro &gt; Macros''' or the click the bottom [[File:Std DlgMacroExecuteDirect.svg|24px]] &quot;Open a dialog to let you execute a macro Recorded&quot; 
# one dialog box open  [[File:Dxf_Importer_Install_01.png|640px|center]]
# The address of &quot;Macro destination&quot; '''
#*Here, in Windows, is '''C:\Users\your_user_name\AppData\Roaming\FreeCAD\''' 
#*In Ubuntu, this is normally '''/home/your_user_name/.FreeCAD''' 
[[File:Dxf_Importer_Install_02.png|640px|center]]



==Examples== &lt;!--T:13--&gt;

==Links== &lt;!--T:14--&gt;
The forum discussion [http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=9056 MACRO:Work Feature 2014_12]

==Latest version== &lt;!--T:15--&gt;

27/12/2014 :  [http://forum.freecadweb.org/download/file.php?id=10325 WF_2014_12_27.zip]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro crank simul</title>
    <ns>0</ns>
    <id>41793</id>
    <revision>
      <id>111712</id>
      <parentid>111682</parentid>
      <timestamp>2014-09-30T18:57:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7li87eglmbazsxayqdlj1slyniordf8</sha1>
      <text xml:space="preserve" bytes="2330">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Crank Simul|Description=Crank simulation.|Author=kwahoo}}

&lt;!--T:2--&gt;
My simple animation uses sketch and sketcher solver to determine piston position and conrod position/rotation.

&lt;!--T:3--&gt;
[[File:Crank 00.gif|left]]{{clear}}

===Uses=== &lt;!--T:4--&gt;
To test the animation:

&lt;!--T:5--&gt;
Download the files copy the code in the Python console FreeCAD.

&lt;!--T:6--&gt;
1. Open the attached file

&lt;!--T:7--&gt;
To stop animation type :

&lt;syntaxhighlight&gt;
animation.stop()
&lt;/syntaxhighlight&gt;

===The File=== &lt;!--T:8--&gt;

[http://forum.freecadweb.org/download/file.php?id=5954 crank_simul.fcstd]

===Script=== &lt;!--T:9--&gt;

crank_simul.FCMacro

&lt;syntaxhighlight&gt;
import FreeCAD as App, FreeCADGui as Gui, Part, time, sys, math, Draft, DraftGeomUtils
from PyQt4 import QtGui,QtCore

class Animation(object):
    def __init__(self):
        App.Console.PrintMessage('init')

        App.ActiveDocument.recompute()

        self.timer = QtCore.QTimer()
        QtCore.QObject.connect(self.timer, QtCore.SIGNAL(&quot;timeout()&quot;), self.my_update)
        self.timer.start(50)

        self.an = 0.1

    def my_update(self):
        string = '{0}'.format(self.an)
        self.an = self.an + 0.01 if self.an &lt; (2 * math.pi) else 0.0

        angle = math.degrees(self.an)
        App.ActiveDocument.Sketch.setDatum(5,App.Units.Quantity(str(angle)+' deg'))
        App.ActiveDocument.recompute()
        p1 = App.ActiveDocument.Sketch.Shape.Vertexes[0].Point
        p2 = App.ActiveDocument.Sketch.Shape.Vertexes[1].Point
        conrodangle = math.degrees(Draft.DraftVecUtils.angle(App.Vector(1,0,0),(p1-p2))) - 90
        App.ActiveDocument.getObject(&quot;Cylinder&quot;).Placement = App.Placement(p1,App.Rotation(App.Vector(1,0,0),-90))
        App.ActiveDocument.getObject(&quot;Sketch001&quot;).Placement = App.Placement(p1,App.Rotation(App.Vector(0,0,1),conrodangle))

    def stop(self):
        self.timer.stop()
         

animation = Animation()

&lt;/syntaxhighlight&gt;

===Link=== &lt;!--T:10--&gt;
The page discussion [http://forum.freecadweb.org/viewtopic.php?f=24&amp;t=6815&amp;hilit=animation#p55092 Inline-four engine animation]

&lt;!--T:11--&gt;
The blog [http://freecad-tutorial.blogspot.be/ freecad-tutorial.blogspot]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro draw2DFunction</title>
    <ns>0</ns>
    <id>1398</id>
    <revision>
      <id>81759</id>
      <parentid>81602</parentid>
      <timestamp>2014-05-06T18:29:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>0rlcx46wrygvf5jj0g15pkbq895hrkz</sha1>
      <text xml:space="preserve" bytes="1130">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=draw2DFunction|Description=Use it to draw a function described by a &quot;equation&quot; [z=F(x)] (Z-X plane)|Author=unknown}}

&lt;!--T:2--&gt;
Use it to draw a function described by a &quot;equation&quot; [z=F(x)] (Z-X plane) The example done here generate a parabol.&lt;br /&gt;
Has no dialog. Needs to be defined :&lt;br /&gt;
F = variable used in the function,&lt;br /&gt; 
X = initial value of x,&lt;br /&gt;
Nb = Number of step,&lt;br /&gt; 
Z = function express with x &lt;br /&gt;
ZZ = function express with xx&lt;br /&gt;



&lt;syntaxhighlight&gt;

# F = variable used in the function,
# X = initial value of x,
# Nb = Number of step,
# Z = function express with x
# ZZ = function express with xx

import FreeCAD, FreeCADGui, Part
import math
F=800
X=-500
Nb=10
Step=1000/Nb
Y=0
for I in range(Nb):
	XX=X+Step 
 	Z=X*X/(4*F)
 	ZZ=XX*XX/(4*F)
 	if I==0:
 		print &quot;Le test est vrai !&quot;
 		nomme=Part.makeLine((X,Y,Z),(XX,Y,ZZ))
 		WWire=Part.Wire([nomme])
 	else :
 		print &quot;Le test est 2 !&quot;
 		nomme=Part.makeLine((X,Y,Z),(XX,Y,ZZ))		
 		WWire=Part.Wire([WWire,nomme])
 	X=XX 
 
Part.show(WWire)

&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Macro drawParametric2Dfunction</title>
    <ns>0</ns>
    <id>2781</id>
    <revision>
      <id>57738</id>
      <parentid>57737</parentid>
      <timestamp>2013-12-24T16:59:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>k0gle0uqo72p0cu1og8zmbomvr1h4e5</sha1>
      <text xml:space="preserve" bytes="1695">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=drawParametric2DFunction|Description=Draws 2-dimensional, parametric and optionally polar equations.|Author=T4b}}

&lt;!--T:2--&gt;
Still has some bugs and misses some features. Documentation is in the docstrings.


&lt;syntaxhighlight&gt;

import FreeCAD, FreeCADGui, Part
import math

def evalFunction(suppliedFunction, n):
	&quot;&quot;&quot;This function uses eval to evaluate suppliedFunction.
	
	It does in no way check whether suppliedFunction is evil, thus it is itself evil!
	&quot;&quot;&quot;
	return eval(suppliedFunction)

def draw2Dfunction(xFunction=&quot;n&quot;, yFunction=&quot;n&quot;, n=-5, nd=10, step=10, z=0, pol=0):
	&quot;&quot;&quot;Draws 2-dimensional mathemathical functions
	
	The function is drawn for n's between n and n+nd, in steps of 1/step, on the z-coordinate z.
	Equations for x and y can be given (xFunction and yFunction arguments), they default to n.
	
	If pol=1 then x is interpreted as r and y is interpreted as t.
	&quot;&quot;&quot;
	nStart=n
	while math.fabs(n-nd)-1.0/step&gt;0:
		print &quot;n: &quot; + str(n)
		x=evalFunction(xFunction, n)
		y=evalFunction(yFunction, n)
		nNext=n+math.copysign(1,nd-n)/step 
		print &quot;nNext: &quot; + str(nNext)
		xNext=evalFunction(xFunction, nNext)
		yNext=evalFunction(yFunction, nNext)
		if pol==0:
			nextSeg=(x,y,z),(xNext,yNext,z)
		else:
			nextSeg=(x*math.cos(y),x*math.sin(y),z),(xNext*math.cos(yNext),xNext*math.sin(yNext),z)
		print &quot;nextSeg: &quot; + str(nextSeg)
		nomme=Part.makeLine(*nextSeg)
		if n==nStart:
			WWire=Part.Wire([nomme])
		else:
			WWire=Part.Wire([WWire,nomme])
		n=nNext
	Part.show(WWire)
#Example usage:
draw2Dfunction(xFunction=&quot;0.5*n&quot;, yFunction=&quot;-0.75*n&quot;, n=0, nd=-math.pi, step=50, pol=1)

&lt;/syntaxhighlight&gt;

</text>
    </revision>
  </page>
  <page>
    <title>Macro hinge</title>
    <ns>0</ns>
    <id>41799</id>
    <revision>
      <id>118222</id>
      <parentid>111621</parentid>
      <timestamp>2014-11-05T10:42:59Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>add &quot;Gui.updateGui()&quot; in the code</comment>
      <sha1>ou4p6h1t58kz716872g0i78bdfcs1ux</sha1>
      <text xml:space="preserve" bytes="1517">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Hinge Simul|Description=Hinge simulation.|Author=Mario52}}

&lt;!--T:2--&gt;
Simulates hinge  movement

&lt;!--T:3--&gt;
[[File:Hing_00.gif|left]]{{clear}}

===Uses=== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Open the 2 files (20140908b_Hinge-1.FCMacro and 20140908b_Hinge-1.FCStd) in FreeCAD with 2 screens (Menu: Windows &gt; Tile) and click in the window and the macro and click F6 (debug macro) to run the macro or run the macro with [[File:Macro-execute.svg]] 

&lt;!--T:6--&gt;
[[File:Hing_01.png|left|300px]]{{clear}}

===The File=== &lt;!--T:7--&gt;

[http://forum.freecadweb.org/download/file.php?id=7628 20140908b_Hinge-1.fcstd]

===Script=== &lt;!--T:8--&gt;

20140908b_Hinge-1.FCMacro

&lt;syntaxhighlight&gt;
import FreeCAD, FreeCADGui, Draft, Part
from FreeCAD import Base
import time

ii = 0
pas = 0
for ii2 in range(180):
    if pas == 0:
        if ii &gt; 90:
            pas = 1
        ii += 5
    else:
        if ii &lt; 1:
            pas = 0
        ii -= 5
   
    App.getDocument(&quot;_0140908b_Hinge_1&quot;).Fusion.Placement=App.Placement(App.Vector(0,0,0), App.Rotation(App.Vector(0,0,1),ii), App.Vector(44.4,6.9,0))
    App.Console.PrintMessage(str(ii2)+&quot;  &quot; + str(ii)+&quot;  &quot; + str(pas) +&quot;\n&quot;)
    Gui.updateGui()
    time.sleep(0) #modify the time here

&lt;/syntaxhighlight&gt;

===Link=== &lt;!--T:9--&gt;
The discussion page [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=7606&amp;p=62086#p62086 Struggling with LinearPattern (again)]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro makeCube</title>
    <ns>0</ns>
    <id>1396</id>
    <revision>
      <id>133476</id>
      <parentid>57711</parentid>
      <timestamp>2014-12-26T17:29:54Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>deleting the first space code</comment>
      <sha1>dj9qklc95gac3zuc8yadjwhgnv9jhca</sha1>
      <text xml:space="preserve" bytes="5332">
&lt;!--T:1--&gt;
{{Macro|Icon=Macro_makeCube|Name=makeCube|Description=This macro creates a cube by asking for 4 points|Author=Yorik}}

{{Code|code=
# first we import the needed Draft modules
import draftTools, WorkingPlane
from draftlibs import fcvec

class myCommand(draftTools.Creator):
	&quot;A class to define our custom command&quot;
	# this command is based on the generic draftTools Creator template
	# it will ask for 4 points, defining our cube

	def __init__(self):
		# general setup, we define everything we'll need at startup
		print &quot;Starting command...&quot;
		# The Activated function of the Creator defines several variables such as self.view
		draftTools.Creator.Activated(self,&quot;Cube&quot;)
		# we use the point UI of the draft Toolbar, which has X,Y and Z input fields
		self.ui.pointUi()
		self.points = [] # here we will store our points
		self.linetracker = draftTools.lineTracker()
		# we build a special cube tracker which is a list of 4 rectangle trackers
		self.cubetracker = []
		for i in range(4): 
			self.cubetracker.append(draftTools.rectangleTracker())
		self.constraintracker = draftTools.lineTracker(dotted=True)
		self.call = self.view.addEventCallback(&quot;SoEvent&quot;,self.action)

	def action(self,arg):
		# 3D scene handler. This function will be called by the 3D view on
		# special events such as keypress or mouse movements. We must take
		# care of treating what we want. All the hard work will be here!
		point,ctrlPoint = draftTools.getPoint(self,arg)
		if arg[&quot;Type&quot;] == &quot;SoKeyboardEvent&quot;: 
			if arg[&quot;Key&quot;] == &quot;ESCAPE&quot;:
				# important! if ESC is pressed, we cancel everything
				self.finish()
		elif arg[&quot;Type&quot;] == &quot;SoLocation2Event&quot;:
			# this will be executed in case of mouse movement
			if len(self.points) == 1:
				# this will be executed after we got our first point
				self.linetracker.p2(point)
				self.length = self.linetracker.getLength()
				self.ui.setRadiusValue(self.length)
			elif len(self.points) == 2:
				# now we already have our base line, we update the 1st rectangle
				self.cubetracker[0].p3(point)
				self.width = self.cubetracker[0].getSize()[1]
				self.ui.setRadiusValue(self.width)
			elif len(self.points) == 3:
				# we must first find our height point by projecting on the normal
				w = fcvec.project(point,self.normal)
				# then we update all rectangles
				self.cubetracker[1].p3((self.cubetracker[0].p2()).add(w))
				self.cubetracker[2].p3((self.cubetracker[0].p4()).add(w))
				self.cubetracker[3].p1((self.cubetracker[0].p1()).add(w))
				self.cubetracker[3].p3((self.cubetracker[0].p3()).add(w))
				self.height = w.Length
				self.ui.setRadiusValue(self.height)

		elif arg[&quot;Type&quot;] == &quot;SoMouseButtonEvent&quot;:
			if (arg[&quot;State&quot;] == &quot;DOWN&quot;) and (arg[&quot;Button&quot;] == &quot;BUTTON1&quot;):
				# this will be executed in case of mouse button 1 pressed
				print &quot;Got point: &quot;,point
				if len(self.points) == 0:
					# this is our first clicked point	
					self.linetracker.p1(point)
					self.linetracker.on()
					# we set the radius UI, which has only a length input field
					# but we change the &quot;radius&quot; name
					self.ui.radiusUi()
					self.ui.labelRadius.setText(&quot;Width&quot;)
				elif len(self.points) == 1:
					# this is our second point
					# first we turn off our line tracker
					self.linetracker.off()
					# then we turn on only one of the rectangles
					baseline = point.sub(self.points[0])
					self.cubetracker[0].setPlane(baseline)
					self.cubetracker[0].p1(self.linetracker.p1())
					self.cubetracker[0].on()
					self.ui.labelRadius.setText(&quot;Length&quot;)
				elif len(self.points) == 2:
					# this is our third point
					# we can get the cubes Z axis from our first rectangle
					self.normal = self.cubetracker[0].getNormal()
					# we can therefore define the (u,v) planes of all rectangles
					u = self.cubetracker[0].u
					v = self.cubetracker[0].v
					self.cubetracker[1].setPlane(u,self.normal)
					self.cubetracker[2].setPlane(u,self.normal)
					self.cubetracker[3].setPlane(u,v)
					# and the origin points of the vertical rectangles
					self.cubetracker[1].p1(self.cubetracker[0].p1())
					self.cubetracker[2].p1(self.cubetracker[0].p3())
					# finally we turn all rectangles on
					for r in self.cubetracker:
						r.on()
					self.ui.labelRadius.setText(&quot;Heigth&quot;)
				elif len(self.points) == 3:
					# finally we have all our points! Let's create the actual cube.
					cube = self.doc.addObject(&quot;Part::Box&quot;,&quot;Cube&quot;)
					cube.Length = self.length
					cube.Width = self.width
					cube.Height = self.height
					# we get 3 points that define our cube orientation
					p1 = self.cubetracker[0].p1()
					p2 = self.cubetracker[0].p2()
					p3 = self.cubetracker[0].p4()
					cube.Placement = WorkingPlane.getPlacementFromPoints([p1,p2,p3])
					self.finish()
				self.points.append(point)

	def finish(self):
		# this will be executed when finishing the command
		# first thing, we remove our callback function
		self.view.removeEventCallback(&quot;SoEvent&quot;,self.call)
		# then we turn off the draft toolbar
		self.ui.offUi()
		# important! we must remove all coin stuff
		self.linetracker.finalize()
		for r in self.cubetracker:
			r.finalize()
		# then we call the generic finish function of our creator object
		draftTools.Creator.finish(self)
		print &quot;Finished!&quot;

#  finally, we execute our code!
myCommand()
}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro screw maker1 2</title>
    <ns>0</ns>
    <id>10822</id>
    <revision>
      <id>82162</id>
      <parentid>82118</parentid>
      <timestamp>2014-05-11T17:53:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>katqm4gfotjef0gkglt1o69u12fgwur</sha1>
      <text xml:space="preserve" bytes="119547">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_screw_maker1_2|Description=Creates a screw, bolt... with or without thread|Author=Ulrich Brammer}}

&lt;!--T:2--&gt;
This macro creates a screw with or without thread, according to ISO standards.

 
&lt;!--T:3--&gt;
[[File:Macro_screw_maker_01.png|400px|screw_maker]]
{{clear}}

===Utilisation=== &lt;!--T:4--&gt;
Select the characteristics of the screw and click on the create button.&lt;br /&gt;
If you select a circle on a hole, or alternatively the inner surface of a circular hole and the circle at top of that hole at the same time, the screw will be placed into the hole with the create button.
 
&lt;center&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;200&quot;&gt;
File:Macro_screw_maker_02.png|Interface of '''screw_maker''' and a few types of screws.
File:Macro_screw_maker_03.png|A screw with thread
&lt;/gallery&gt;
&lt;/center&gt;
The creation of the thread takes a long time. Be patient and have a look at the CPU-usage.
The latest version of Screw maker is 1.7. The wiki does not allow to upload a zip-File and copying the text from this page is not convenient. So here is a link to a forum post with the latest version: http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=6558#p52887

&lt;!--T:6--&gt;
The text below is still the old version 1.2. It has lesser screws than the actual one.

===Script=== &lt;!--T:5--&gt;


&lt;syntaxhighlight&gt;
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screw_selector.ui'
#
# Created: Sat Aug  3 23:19:38 2013
#      by: PyQt4 UI code generator 4.9.3
#
# WARNING! All changes made in this file will be lost!



&quot;&quot;&quot;
Macro to generate screws with FreeCAD.
Version 1.4 from 1st of September 2013
***************************************************************************
*   Copyright (c) 2013 Ulrich Brammer &lt;ulrich1a[at]users.sourceforge.net&gt; *
*                                                                         *
*   This file is a supplement to the FreeCAD CAx development system.      *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU Lesser General Public License (LGPL)    *
*   as published by the Free Software Foundation; either version 2 of     *
*   the License, or (at your option) any later version.                   *
*   for detail see the LICENCE text file.                                 *
*                                                                         *
*   This software is distributed in the hope that it will be useful,      *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU Library General Public License for more details.                  *
*                                                                         *
*   You should have received a copy of the GNU Library General Public     *
*   License along with this macro; if not, write to the Free Software     *
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
*   USA                                                                   *
*                                                                         *
***************************************************************************
&quot;&quot;&quot;

__author__ = &quot;Ulrich Brammer &lt;ulrich1a@users.sourceforge.net&gt;&quot;



from PyQt4 import QtCore, QtGui

import FreeCAD, Part, math
from FreeCAD import Base
import DraftVecUtils

DEBUG = True # set to True to show debug messages


# Diameters included in this library/macro
# The ISO-standards may include more diameters!
# Dictionary used for user messages
standard_diameters = {
   'ISO4017': ('M1.6', 'M36'), # ISO 4017 Hex-head-screw
   'ISO4014': ('M4',   'M30'), # ISO 4014 Hex-head-bolt
   'EN1662':  ('M5',   'M16'), # EN 1662 Hexagon bolts with flange, small series
   'EN1665':  ('M5',   'M20'), # EN 1665 Hexagon bolts with flange, heavy series
   'ISO4762': ('M1.6', 'M36'), # ISO 4762 Hexagon socket head cap screws
   'ISO2009': ('M1.6', 'M10'), # ISO 2009 Slotted countersunk flat head screws
   'ISO2010': ('M1.6', 'M10'), # ISO 2010 Slotted raised countersunk head screws
   'ISO1580': ('M1.6', 'M10'), # ISO 1580 Slotted pan head screws
   'ISO7045': ('M1.6', 'M10'), # ISO 7045 Pan head screws type H cross recess
   'ISO7046': ('M1.6', 'M10'),
   'ISO7047': ('M1.6', 'M10'),
   'ISO1207': ('M3',   'M10'), # ISO 1207 Slotted cheese head screws
   'ISO7048': ('M2.5', 'M8'),  # ISO 7048 Cross-recessed cheese head screws with type H cross recess
   'ISO7380': ('M3',   'M12'), # ISO 7380 Hexagon socket button head screws
   'ISO10642':('M3',   'M20'), # ISO 10642 Hexagon socket countersunk head screws
   'ISO14579':('M2',   'M20'), # ISO 14579 Hexalobular socket head cap screws
   'ISO14580':('M2',   'M10'), # ISO 14580 Hexalobular socket cheese head screws
   'ISO14583':('M2',   'M10'), # ISO 14583 Hexalobular socket pan head screws  
   'ISO7089': ('M1.6', 'M36')} # Washer

# ISO 4017 Hex-head-screw
#           P,    c,  dw,    e,     k,   r,   s
iso4017head={
   'M1.6':(0.35, 0.2, 2.3,  3.4,   1.1, 0.1,  3.2),
   'M2':  (0.40, 0.2, 3.0,  4.4,   1.4, 0.1,  4.0),
   'M2.5':(0.45, 0.2, 4.0,  5.5,   1.7, 0.1,  5.0),
   'M3':  (0.5,  0.2, 4.6,  6.1,   2.0, 0.1,  5.5),
   'M4':  (0.7,  0.2, 5.9,  7.7,   3.5, 0.2,  7.0), 
   'M5':  (0.8,  0.2, 6.9,  8.9,   3.5, 0.2,  8.0),
	'M6':  (1.0,  0.2, 8.9,  11.05, 4.0, 0.25, 10.0),
	'M8':  (1.25, 0.3, 11.7, 14.5,  5.3, 0.25, 13.0),
	'M10': (1.50, 0.3, 14.7, 17.9,  6.4, 0.4,  16.0),
   'M12': (1.75, 0.3, 16.7, 20.1,  7.5, 0.6,  18.0),
   'M14': (2.00, 0.3, 20.5, 24.5,  8.8, 0.6,  22.0),
   'M16': (2.00, 0.4, 22.4, 26.9, 10.0, 0.6,  24.0),
   'M20': (2.50, 0.4, 28.2, 33.7, 12.5, 0.8,  30.0),
   'M24': (3.00, 0.4, 33.7, 40.1, 15.0, 0.8,  36.0),
   'M27': (3.00, 0.4, 38.0, 45.2, 17.0, 1.0,  41.0),
   'M30': (3.50, 0.4, 42.8, 50.9, 18.7, 1.0,  46.0), #dw not in class A, e not in class A
   'M36': (4.00, 0.4, 51.2, 61.0, 22.5, 1.0,  55.0), #dw not in class A, e not in class A
   'M42': (4.50, 0.7, 60.0, 71.3, 26.0, 1.2,  65.0),
   'M48': (5.00, 0.7, 69.5, 82.6, 30.0, 1.6,  75.0),
   'M56': (5.50, 0.7, 78.7, 93.6, 35.0, 2.0,  85.0),
   'M64': (6.00, 0.7, 88.2,104.9, 40.0, 2.0,  95.0)
   } 


iso4017length = {
   '2': ( 1.8,  2.2),
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8),
   '180':(179.2, 180.8),
   '200':(199.1, 200.9)
         }

# range of typical srew lengths
#    min_length,  max_length
iso4017range = {
   'M1.6':  ('2', '16'),
   'M2':  ('4', '20'),
   'M2.5':  ('5', '25'),
   'M3':  ('5', '30'),
   'M4':  ('6', '40'),
   'M5':  ('8', '50'),
   'M6':  ('12', '60'),
   'M8': ('16', '80'),
   'M10':('20', '100'),
   'M12':('25','120'),
   'M14':('25','100'), # www.agriti.com
   'M16':('30','150'),
   'M20':('40','160'),
   'M24':('50','180'),
   'M27':('50','100'),
   'M30':('60','200'), 
   'M36':('70','200'),
   'M42':('70','200'),
   'M48':('100','200'),
   'M56':('110','200'),
   'M64':('120','200')
   } 

# ISO 4014 Hex-head-bolt
#          P,   b1,   b2,   b3,   c,  dw,    e,     k,   r,   s
iso4014head={
   'M4': (0.70, 14.0,  0.0,  0.0, 0.2, 5.9,  7.7,   3.5, 0.2, 7.0),
   'M5': (0.80, 16.0,  0.0,  0.0, 0.2, 6.9,  8.9,   3.5, 0.2, 8.0), 
	'M6': (1.00, 18.0, 24.0, 37.0, 0.2, 8.9,  11.05, 4.0, 0.25, 10.0),
	'M8': (1.25, 22.0, 28.0, 41.0, 0.3, 11.7, 14.5,  5.3, 0.4, 13.0),
	'M10':(1.50, 26.0, 32.0, 45.0, 0.3, 14.7, 17.9,  6.4, 0.4, 16.0),
   'M12':(1.75, 30.0, 36.0, 49.0, 0.3, 16.7, 20.1,  7.5, 0.6, 18.0),
   'M14':(2.00, 34.0, 40.0,  0.0, 0.3, 20.5, 24.5,  8.8, 0.6, 22.0),
   'M16':(2.00, 38.0, 44.0, 57.0, 0.4, 22.4, 26.9, 10.0, 0.6, 24.0),
   'M20':(2.50, 46.0, 52.0, 65.0, 0.4, 28.2, 33.7, 12.5, 0.8, 30.0),
   'M24':(3.00, 54.0, 60.0, 73.0, 0.4, 33.7, 40.1, 15.0, 0.8, 36.0),
   'M27':(3.00, 60.0, 66.0, 79.0, 0.4, 38.0, 45.2, 17.0, 1.0, 41.0),
   'M30':(3.50, 66.0, 72.0, 85.0, 0.4, 42.8, 50.9, 18.7, 1.0, 46.0)} #dw not in class A, e not in class A
   #'M36':(   , 0.4, 51.2, 61.0, 22.5, 55.0)} #dw not in class A, e not in class A


iso4014length = {
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8),
   '180':(179.2, 180.8),
   '200':(199.1, 200.9),
   '220':(219.1, 220.9)
         }

# range of typical srew lengths
#    min_length,  max_length
iso4014range = {
   'M4':  ('25', '50'),
   'M5':  ('25', '50'),
   'M6':  ('30', '130'),
   'M8': ('30', '180'),
   'M10':('35', '150'),
   'M12':('50','150'),
   'M14':('50','160'),
   'M16':('55','200'),
   'M20':('60','300'),
   'M24':('80','220'),
   'M27':('90', '220'),
   'M30':('90', '220')}


# EN 1662 Hexagon bolts with flange, small series
#          P,   b0,    b1,   b2,   b3,   c,  dc,    dw,    e,     k,   kw,  lf,  r1,   s
en1662def={
   'M5': (0.80, 25.0, 16.0,  0.0,  0.0, 1.0, 11.4,  9.4,  7.59,  5.6, 2.3, 1.4, 0.2, 7.0), 
	'M6': (1.00, 30.0, 18.0,  0.0,  0.0, 1.1, 13.6, 11.6,  8.71,  6.9, 2.9, 1.6, 0.25, 8.0),
	'M8': (1.25, 35.0, 22.0, 28.0,  0.0, 1.2, 17.0, 14.9, 10.95,  8.5, 3.8, 2.1, 0.4, 10.0),
	'M10':(1.50, 40.0, 26.0, 32.0,  0.0, 1.5, 20.8, 18.7, 14.26,  9.7, 4.3, 2.1, 0.4, 13.0),
   'M12':(1.75, 45.0, 30.0, 36.0,  0.0, 1.8, 24.7, 22.5, 17.62, 12.1, 5.4, 2.1, 0.6, 16.0),
   'M14':(2.00, 50.0, 34.0, 40.0,  0.0, 2.1, 28.6, 26.4, 19.86, 12.9, 5.6, 2.1, 0.6, 18.0),
   'M16':(2.00, 55.0, 38.0, 44.0, 57.0, 2.4, 32.8, 30.6, 23.15, 15.2, 6.8, 3.2, 0.6, 21.0)}


# range of typical srew lengths
#    min_length,  max_length
en1662range = {
   'M5': ('10', '50'),
   'M6': ('12', '60'),
   'M8': ('16', '80'),
   'M10':('20','100'),
   'M12':('25','120'),
   'M14':('30','140'), 
   'M16':('35','160')
   } 

en1662length = {
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '90':(89.3, 90.7),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8)
         }


# EN 1665 Hexagon bolts with flange, heavy series
#          P,    b0,  b1,   b2,   b3,   c,  dc,    dw,    e,     k,   kw,  lf,  r1,   s
en1665def={
   'M5': (0.80, 25.0, 16.0,  0.0,  0.0, 1.0, 11.8,  9.8,  8.71,  5.8, 2.6, 1.4, 0.2,  8.0), 
	'M6': (1.00, 30.0, 18.0,  0.0,  0.0, 1.1, 14.2, 12.2, 10.95,  6.6, 3.0, 1.6, 0.25,10.0),
	'M8': (1.25, 35.0, 22.0, 28.0,  0.0, 1.2, 18.0, 15.8, 14.26,  8.1, 3.9, 2.1, 0.4, 13.0),
	'M10':(1.50, 40.0, 26.0, 32.0,  0.0, 1.5, 22.3, 19.6, 17.62, 10.4, 4.1, 2.1, 0.4, 16.0),
   'M12':(1.75, 45.0, 30.0, 36.0,  0.0, 1.8, 26.6, 23.8, 19.86, 11.8, 5.6, 2.1, 0.6, 18.0),
   'M14':(2.00, 50.0, 34.0, 40.0,  0.0, 2.1, 30.5, 27.6, 23.15, 13.7, 6.5, 2.1, 0.6, 21.0),
   'M16':(2.00, 55.0, 38.0, 44.0, 57.0, 2.4, 35.0, 31.9, 26.51, 15.4, 7.3, 3.2, 0.6, 24.0),
   'M20':(2.50, 65.0, 46.0, 52.0, 65.0, 3.0, 43.0, 39.9, 33.23, 18.9, 8.9, 4.2, 0.8, 30.0)}


# range of typical srew lengths
#    min_length,  max_length
en1665range = {
   'M5': ('10', '50'),
   'M6': ('12', '60'),
   'M8': ('16', '80'),
   'M10':('20','100'),
   'M12':('25','120'),
   'M14':('30','140'), 
   'M16':('35','160'),
   'M20':('65','200')
   } 

en1665length = {
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '90':(89.3, 90.7),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8),
   '180':(179.2, 180.8),
   '200':(199.1, 200.9)
         }



# ISO 1207 definitions Class A, Slotted cheese head screws
#          P,     a,   b,   dk,  dk_mean, da,  k,  n_min, r, t_min, x
iso1207def={
   'M1.6':(0.35, 0.7, 25.0,  3.0,  2.9,  2.0, 1.1, 0.46, 0.1, 0.45, 0.9),
   'M2':  (0.40, 0.8, 25.0,  3.8,  3.7,  2.6, 1.4, 0.56, 0.1, 0.6, 1.0),
   'M2.5':(0.45, 0.9, 25.0,  4.5,  4.4,  3.1, 1.8, 0.66, 0.1, 0.7, 1.1),
   'M3':  (0.50, 1.0, 25.0,  5.5,  5.4,  3.6, 2.0, 0.86, 0.1, 0.85, 1.25),
   'M3.5':(0.60, 1.2, 38.0,  6.0,  5.9,  4.1, 2.4, 1.06, 0.1, 1.0, 1.5),
   'M4':  (0.70, 1.4, 38.0,  7.0,  6.9,  4.7, 2.6, 1.26, 0.2, 1.1, 1.75),
   'M5':  (0.80, 1.6, 38.0,  8.5,  8.4,  5.7, 3.3, 1.26, 0.2, 1.3, 2.0),
   'M6':  (1.00, 2.0, 38.0, 10.0,  9.9,  6.8, 3.9, 1.66, 0.25,1.6, 2.5),
   'M8':  (1.25, 2.5, 38.0, 13.0, 12.85, 9.2, 5.0, 2.06, 0.4, 2.0, 3.2),
   'M10': (1.50, 3.0, 38.0, 16.0, 15.85, 11.2,6.0, 2.56, 0.4, 2.4, 3.8)}

# range of typical srew lengths
#    min_length,  max_length
iso1207range = {
   'M1.6':('2', '16'),
   'M2':  ('3', '20'),
   'M2.5':('3', '25'),
   'M3':  ('4', '30'),
   'M3.5':('5', '35'),
   'M4':  ('5', '40'),
   'M5':  ('6', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '80'),
   'M10':('12', '80')}

# slotted cheese head screws
# nom length: l_min, l_max       
iso1207length = {
   '2': (1.8,  2.2),
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.05, 55.95),
   '60':(59.05, 60.95),
   '65':(64.05, 65.95),
   '70':(69.05, 70.95),
   '75':(74.05, 75.95),
   '80':(79.05, 80.95)
      }


# ISO 14580 definitions , Hexalobular socket cheese head screws
#          P,     a,   b,   dk,  dk_mean, da,  k,  n_min, r, t_min, x
#           tt,    k,    A,  t_mean
iso14580def={
   'M2':  ('T6',  1.55, 1.75, 0.8),
   'M2.5':('T8',  1.85, 2.40, 0.9),
   'M3':  ('T10', 2.40, 2.80, 1.2),
   'M3.5':('T15', 2.60, 3.35, 1.3),
   'M4':  ('T20', 3.10, 3.95, 1.5),
   'M5':  ('T25', 3.65, 4.50, 1.7),
   'M6':  ('T30', 4.40, 5.60, 2.1),
   'M8':  ('T45', 5.80, 7.95, 2.9),
   'M10': ('T50', 6.90, 8.95, 3.3)}
   
# range of typical srew lengths
#    min_length,  max_length
# iso14580range = iso1207range

# nom length: l_min, l_max       
iso14580length = {
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.05, 55.95),
   '60':(59.05, 60.95),
   '65':(64.05, 65.95),
   '70':(69.05, 70.95),
   '75':(74.05, 75.95),
   '80':(79.05, 80.95)
      }



# ISO 7048 definitions Class A, 
# Cross-recessed cheese head screws with type H or Z cross recess
#          P,     a,   b,   dk,  dk_mean, da,  k,   r,   x, cT,   mH,   mZ 
iso7048def={
   'M2.5':(0.45, 0.9, 25.0,  4.5,  4.4,  3.1, 1.8, 0.1, 1.1, '1', 2.7, 2.4),
   'M3':  (0.50, 1.0, 25.0,  5.5,  5.4,  3.6, 2.0, 0.1, 1.25,'2', 3.5, 3.5),
   'M3.5':(0.60, 1.2, 38.0,  6.0,  5.9,  4.1, 2.4, 0.1, 1.5, '2', 3.8, 3.7),
   'M4':  (0.70, 1.4, 38.0,  7.0,  6.9,  4.7, 2.6, 0.2, 1.75,'2', 4.1, 4.0),
   'M5':  (0.80, 1.6, 38.0,  8.5,  8.4,  5.7, 3.3, 0.2, 2.0, '2', 4.8, 4.6),
   'M6':  (1.00, 2.0, 38.0, 10.0,  9.9,  6.8, 3.9, 0.25,2.5, '3', 6.2, 6.1),
   'M8':  (1.25, 2.5, 38.0, 13.0, 12.85, 9.2, 5.0, 0.4, 3.2, '3', 7.7, 7.5)
   }

# range of typical srew lengths
#    min_length,  max_length
iso7048range = {
   'M2.5':('3', '25'),
   'M3':  ('4', '30'),
   'M3.5':('5', '35'),
   'M4':  ('5', '40'),
   'M5':  ('6', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '80')}

# nom length: l_min, l_max       
iso7048length = {
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '60':(59.05, 60.95),
   '70':(69.05, 70.95),
   '80':(79.05, 80.95)
      }


# Button Head Screw
# nom length: l_min, l_max       
iso7380length = {
   #'2.5':(2.3,  2.7),
   #'3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.05, 55.95),
   '60':(59.05, 60.95)
      }

# ISO 7380 definitions Class A 
# http://www.agrati.com/it/unificati/it/gamma/unificati/home02.htm
#          P,     a,   da,   dk,  dk_mean,s_mean,t_min, r, k,   e,    w,  
iso7380def={
   'M3':  (0.50, 1.0,  3.6,  5.7,  5.5, 2.03, 1.04, 0.1, 1.65, 2.3,  0.2),
   'M4':  (0.70, 1.4,  4.7,  7.6,  7.4, 2.54, 1.30, 0.2, 2.20, 2.87, 0.3),
   'M5':  (0.80, 1.6,  5.7,  9.5,  9.3, 3.05, 1.56, 0.2, 2.75, 3.44, 0.38),
   'M6':  (1.00, 2.0,  6.8, 10.5, 10.3, 4.05, 2.08, 0.25,3.3,  4.58, 0.74),
   'M8':  (1.25, 2.5,  9.2, 14.0, 13.8, 5.05, 2.60, 0.4, 4.4,  5.72, 1.05),
   'M10': (1.50, 3.0, 11.2, 17.5, 17.3, 6.05, 3.12, 0.4, 5.5,  6.86, 1.45),
   'M12': (1.75, 3.5, 13.7, 21.0, 20.7, 8.06, 4.16, 0.6, 6.6,  9.15, 1.63),
   'M16': (1.75, 3.5, 18.2, 28.0, 27.8, 10.06,5.20, 0.6, 8.8,  9.15, 2.25)
   }

# range of typical srew lengths
#    min_length,  max_length
iso7380range = {
   'M3':  ('5', '25'),
   'M4':  ('5', '40'),
   'M5':  ('6', '40'),
   'M6':  ('8', '60'),
   'M8': ('10', '60'),
   'M10':('12', '60'),
   'M12':('16', '60'),
   'M16':('20', '60')}


L_iso2009length =['2.5','3','4','5','6','8','10','12','14','16','20', \
   '25','30','35','40','45','50','55','60','65','70','75','80'] 
# nom length: l_min, l_max       
iso2009length = {
   '2.5':(2.3,  2.7),
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.05, 55.95),
   '60':(59.05, 60.95),
   '65':(64.05, 65.95),
   '70':(69.05, 70.95),
   '75':(74.05, 75.95),
   '80':(79.05, 80.95)
      }


# ISO 2009 definitions Class A
#          P, a, b, dk_theo, dk_mean, k, n_min, r, t_mean, x
iso2009def={
   'M1.6':(0.35, 0.7, 25, 3.6, 2.8,  1.0,  0.46, 0.4, 0.4, 0.9),
   'M2':  (0.40, 0.8, 25, 4.4, 3.6,  1.2,  0.56, 0.5, 0.5, 1.0),
   'M2.5':(0.45, 0.9, 25, 5.5, 4.5,  1.5,  0.66, 0.6, 0.6, 1.1),
   'M3':  (0.50, 1.0, 25, 6.3, 5.3,  1.65, 0.86, 0.8, 0.7, 1.25),
   'M3.5':(0.60, 1.2, 38, 8.2, 7.1,  2.35, 1.06, 0.9, 1.0, 1.5),
   'M4':  (0.70, 1.4, 38, 9.4, 8.2,  2.7,  1.26, 1.0, 1.1, 1.75),
   'M5':  (0.80, 1.6, 38,10.4, 9.2,  2.7,  1.26, 1.3, 1.2, 2.0),
   'M6':  (1.00, 2.0, 38,12.6, 11.2, 3.3,  1.66, 1.5, 1.4, 2.5),
   'M8':  (1.25, 2.5, 38,17.3, 15.6, 4.65, 2.06, 2.0, 2.0, 3.2),
   'M10': (1.50, 3.0, 38,20.0, 18.1, 5.0,  2.56, 2.5, 2.3, 3.8)}
   
# range of typical srew lengths
#    min_length,  max_length
iso2009range = {
   'M1.6':('2.5', '16'),
   'M2':  ('3', '20'),
   'M2.5':('4', '25'),
   'M3':  ('5', '30'),
   'M3.5':('6', '35'),
   'M4':  ('6', '40'),
   'M5':  ('8', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '80'),
   'M10':('12', '80')}


# ISO 7046 definitions Class A
# ISO 7046 Countersunk flat head srews (common head style)
# with type H or type Z cross recess
# Parameters P, a, b, dk_theo, dk_mean, k, r, x to be read from iso2009def
# Length = iso7045length
#          cT,   mH,   mZ 
iso7046def={
   'M1.6':('0', 1.6, 1.6),
   'M2':  ('0', 1.9, 1.9),
   'M2.5':('1', 2.9, 2.8),
   'M3':  ('1', 3.2, 3.0),
   'M3.5':('2', 4.4, 4.1),
   'M4':  ('2', 4.6, 4.4),
   'M5':  ('2', 5.2, 4.0),
   'M6':  ('3', 6.8, 6.6),
   'M8':  ('4', 8.9, 8.8),
   'M10': ('4', 10.0,9.8)}

# range of typical srew lengths
#    min_length,  max_length
iso7046range = {
   'M1.6':('3', '16'),
   'M2':  ('3', '20'),
   'M2.5':('3', '25'),
   'M3':  ('4', '30'),
   'M3.5':('5', '35'),
   'M4':  ('5', '40'),
   'M5':  ('6', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '60'),
   'M10':('12', '60')}

# ISO 2010, ISO 7047 definitions Class A: Raised Countersunk head srews
# ISO 2010 slotted screws (common head style)   range = iso2009range
# ISO 7047  with type H or type Z cross recess  range = iso7046range
# Parameters P, a, b, dk_theo, dk_mean, k, r, x to be read from iso2009def
# Length = iso7045length
#          rf, t_mean, cT,   mH,   mZ 
Raised_countersunk_def={
   'M1.6':(3.0,  0.7, '0', 1.9,  1.9),
   'M2':  (4.0,  0.9, '0', 2.0,  2.2),
   'M2.5':(5.0,  1.1, '1', 3.0,  2.8),
   'M3':  (6.0,  1.3, '1', 3.4,  3.1),
   'M3.5':(8.5,  1.5, '2', 4.8,  4.6),
   'M4':  (9.5,  1.8, '2', 5.2,  5.0),
   'M5':  (9.5,  2.2, '2', 5.4,  5.3),
   'M6':  (12.0, 2.6, '3', 7.3,  7.1),
   'M8':  (16.5, 3.5, '4', 9.6,  9.5),
   'M10': (19.5, 4.1, '4', 10.4,10.3)}





# ISO 1580 definitions Class A, Slotted pan head screws
#           P,    a,   b, dk_max,da,  k, n_min,  r,  rf, t_mean, x
iso1580def={
   'M1.6':(0.35, 0.7, 25,  3.2, 2.0, 1.0, 0.46, 0.1, 0.5, 0.4, 0.9),
   'M2':  (0.4,  0.8, 25,  4.0, 2.6, 1.3, 0.56, 0.1, 0.6, 0.5, 1.0),
   'M2.5':(0.45, 0.9, 25,  5.0, 3.1, 1.5, 0.66, 0.1, 0.8, 0.6, 1.1),
   'M3':  (0.5,  1.0, 25,  5.6, 3.6, 1.8, 0.86, 0.1, 0.9, 0.7, 1.25),
   'M3.5':(0.6,  1.2, 38,  7.0, 4.1, 2.1, 1.06, 0.1, 1.0, 0.8, 1.5),
   'M4':  (0.7,  1.4, 38,  8.0, 4.7, 2.4, 1.26, 0.2, 1.2, 1.0, 1.75),
   'M5':  (0.8,  1.6, 38,  9.5, 5.7, 3.0, 1.26, 0.2, 1.5, 1.2, 2.0),
   'M6':  (1.0,  2.0, 38, 12.0, 6.8, 3.6, 1.66, 0.25,1.8, 1.4, 2.5),
   'M8':  (1.25, 2.5, 38, 16.0, 9.2, 4.8, 2.06, 0.4, 2.4, 1.9, 3.2),
   'M10': (1.50, 3.0, 38, 20.0,11.2, 6.0, 2.56, 0.4, 3.0, 2.4, 3.8)}



# ISO 7045 definitions Class A, Pan head screws with type H or type Z
# partly used also for ISO 14583 Hexalobular socket pan head screws
#   cross recess;    cT = size of cross recess
#           P,    a,   b, dk_max,da,  k,   r,   rf,  x,  cT,   mH,   mZ 
iso7045def={
   'M1.6':(0.35, 0.7, 25,  3.2, 2.0, 1.3, 0.1, 2.5, 0.9, '0', 1.7, 1.6),
   'M2':  (0.4,  0.8, 25,  4.0, 2.6, 1.6, 0.1, 3.2, 1.0, '0', 1.9, 2.1),
   'M2.5':(0.45, 0.9, 25,  5.0, 3.1, 2.1, 0.1, 4.0, 1.1, '1', 2.7, 2.6),
   'M3':  (0.5,  1.0, 25,  5.6, 3.6, 2.4, 0.1, 5.0, 1.25,'1', 3.0, 2.8),
   'M3.5':(0.6,  1.2, 38,  7.0, 4.1, 2.6, 0.1, 6.0, 1.5, '2', 3.9, 3.9),
   'M4':  (0.7,  1.4, 38,  8.0, 4.7, 3.1, 0.2, 6.5, 1.75,'2', 4.4, 4.3),
   'M5':  (0.8,  1.6, 38,  9.5, 5.7, 3.7, 0.2, 8.0, 2.0, '2', 4.9, 4.7),
   'M6':  (1.0,  2.0, 38, 12.0, 6.8, 4.6, 0.25,10., 2.5, '3', 6.9, 6.7),
   'M8':  (1.25, 2.5, 38, 16.0, 9.2, 6.0, 0.4, 13., 3.2, '4', 9.0, 8.8),
   'M10': (1.50, 3.0, 38, 20.0,11.2, 7.5, 0.4, 16., 3.8, '4', 10.1,9.9)}

# nom length: l_min, l_max       
iso7045length = {
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.05, 55.95),
   '60':(59.05, 60.95)
      }

# range of typical srew lengths
#    min_length,  max_length
iso7045range = {
   'M1.6':('3', '16'),
   'M2':  ('3', '20'),
   'M2.5':('3', '25'),
   'M3':  ('4', '30'),
   'M3.5':('5', '35'),
   'M4':  ('5', '40'),
   'M5':  ('6', '45'),
   'M6':  ('8', '60'),
   'M8': ('10', '60'),
   'M10':('12', '60')}


# ISO 14583 Hexalobular socket pan head screws
#   hexalobular recess;    tt = size of hexalobular recess

#           tt,    A,  t_mean
iso14583def={
   'M2':  ('T6',  1.75, 0.7),
   'M2.5':('T8',  2.40, 1.0),
   'M3':  ('T10', 2.80, 1.2),
   'M3.5':('T15', 3.35, 1.3),
   'M4':  ('T20', 3.95, 1.5),
   'M5':  ('T25', 4.50, 1.7),
   'M6':  ('T30', 5.60, 2.2),
   'M8':  ('T45', 7.95, 3.0),
   'M10': ('T50', 8.95, 3.8)}


#iso14583range = iso7046range
#iso14583length = iso7045length



# ISO 4762 Hexagon socket head cap screws ( Allan screw)
# ISO 4762 definitions
#           P,   b,  dk_max, da,  ds_min,   e,    lf,   k,   r,   s_mean, t,    v,   dw,   w
iso4762def={
   'M1.6':(0.35, 15.0, 3.0,  2.0,  1.46,  1.73, 0.34,  1.6, 0.1,  1.56,  0.7, 0.16, 2.72, 0.55),
   'M2':  (0.40, 16.0, 3.8,  2.6,  1.86,  1.73, 0.51,  2.0, 0.1,  1.56,  1.0, 0.2,  3.48, 0.55),
   'M2.5':(0.45, 17.0, 4.5,  3.1,  2.36,  2.30, 0.51,  2.5, 0.1,  2.06,  1.1, 0.25, 4.18, 0.85),
   'M3':  (0.50, 18.0,  5.5,  3.6,  2.86,  2.87, 0.51,  3.0, 0.1,  2.56,  1.3, 0.3,  5.07, 1.15),
   'M4':  (0.70, 20.0,  7.0,  4.7,  3.82,  3.44, 0.60,  4.0, 0.2,  3.06,  2.0, 0.4,  6.53, 1.40),
   'M5':  (0.80, 22.0,  8.5,  5.7,  4.82,  4.58, 0.60,  5.0, 0.2,  4.06,  2.5, 0.5,  8.03, 1.9),
   'M6':  (1.00, 24.0, 10.0,  6.8,  5.82,  5.72, 0.68,  6.0, 0.25, 5.06,  3.0, 0.6,  9.38, 2.3),
   'M8':  (1.25, 28.0, 13.0,  9.2,  7.78,  6.86, 1.02,  8.0, 0.4,  6.06,  4.0, 0.8, 12.33, 3.3),
   'M10': (1.50, 32.0, 16.0, 11.2,  9.78,  9.15, 1.02, 10.0, 0.4,  8.07,  5.0, 1.0, 15.33, 4.0),
   'M12': (1.75, 36.0, 18.0, 13.7, 11.73, 11.43, 1.45, 12.0, 0.6, 10.07,  6.0, 1.2, 17.23, 4.8),
   'M14': (2.00, 40.0, 21.0, 15.7, 13.73, 13.72, 1.45, 14.0, 0.6, 12.07,  7.0, 1.4, 20.17, 5.8),
   'M16': (2.00, 44.0, 24.0, 17.7, 15.73, 16.00, 1.45, 16.0, 0.6, 14.08,  8.0, 1.6, 23.17, 6.8),
   'M20': (2.50, 52.0, 30.0, 22.4, 19.67, 19.44, 2.04, 20.0, 0.8, 17.10, 10.0, 2.0, 28.87, 8.6),
   'M24': (3.00, 60.0, 36.0, 26.4, 23.67, 21.73, 2.04, 24.0, 0.8, 19.15, 12.0, 2.0, 34.81, 10.4),
   'M30': (3.50, 72.0, 45.0, 33.4, 29.67, 25.15, 2.89, 30.0, 1.0, 22.15, 15.5, 2.4, 43,61, 13.1),
   'M36': (4.00, 84.0, 54.0, 39.4, 35.61, 30.85, 2.89, 36.0, 1.0, 27.15, 19.0, 3.0, 52.54, 15.3)}       

# nom length: l_min, l_max       
iso4762length = {
   '2.5':(2.3,  2.7),
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '14':(13.65, 14.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '75':(74.4, 75.6),
   '80':(79.4, 80.6),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8),
   '180':(179.2, 180.8),
   '200':(199.1, 200.9)
      }

# range of typical srew lengths
#    min_length,  max_length
iso4762range = {
   'M1.6':('2.5', '16'),
   'M2':  ('3', '20'),
   'M2.5':('4', '25'),
   'M3':  ('5', '30'),
   'M3.5':('6', '35'),
   'M4':  ('6', '40'),
   'M5':  ('8', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '80'),
   'M10':('16', '100'),
   'M12':('20', '120'),
   'M14':('25', '140'),
   'M16':('25', '160'),
   'M20':('16', '100'),
   'M24':('40', '200'),
   'M30':('45', '200'),
   'M36':('55', '200')   
   }


# ISO 14579 Hexalobular socket head cap screws
#   hexalobular recess;    tt = size of hexalobular recess

#           tt,    A,  t_mean
iso14579def={
   'M2':  ( 'T6',  1.75, 0.8),
   'M2.5':( 'T8',  2.40, 1.0),
   'M3':  ('T10',  2.80, 1.2),
   'M4':  ('T20',  3.95, 1.7),
   'M5':  ('T25',  4.50, 1.9),
   'M6':  ('T30',  5.60, 2.3),
   'M8':  ('T45',  7.95, 3.2),
   'M10': ('T50',  8.95, 3.8),
   'M12': ('T55', 11.35, 5.0),
   'M14': ('T60', 13.45, 5.8),
   'M16': ('T70', 15.70, 6.8),
   #'M18': ('T80', 17.75, 7.8),
   'M20': ('T90', 20.20, 9.0),
   }

# range of typical srew lengths
#    min_length,  max_length
iso14579range = {
   'M2':  ('3', '20'),
   'M2.5':('4', '25'),
   'M3':  ('5', '30'),
   'M4':  ('6', '40'),
   'M5':  ('8', '50'),
   'M6': ('10', '60'),
   'M8': ('12', '80'),
   'M10':('16','100'),
   'M12':('20','120'),
   'M14':('25','140'), 
   'M16':('25','160'),
   #'M18':('30','180'),
   'M20':('30','200'),
   } 

iso14579length = {
   '3': ( 2.8,  3.2),
   '4': ( 3.76, 4.24),
   '5': ( 4.76, 5.24),
   '6': ( 5.76, 6.24),
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '90':(89.3, 90.7),
   '100':(99.3, 100.7),
   '110':(109.3, 110.7),
   '120':(119.3, 120.7),
   '130':(129.2, 130.8),
   '140':(139.2, 130.8),
   '150':(149.2, 150.8),
   '160':(159.2, 160.8),
   '180':(179.2, 180.8),
   '200':(199.1, 200.9)
         }


# ISO 10642 Hexagon socket countersunk head screws ( Allan screw)
# ISO 10642 definitions
#           P,   b,  dk_theo, dk_mean,da,  ds_min,   e,  k,   r,   s_mean, t,    w
iso10642def={
   'M3':  (0.50, 18.0,  6.72,  6.0,  3.3,  2.86,  2.31, 1.86, 0.1,  2.06,  1.1, 0.25),
   'M4':  (0.70, 20.0,  8.96,  8.0,  4.4,  3.82,  2.88, 2.48, 0.2,  2.56,  1.5, 0.45),
   'M5':  (0.80, 22.0, 11.20, 10.0,  5.5,  4.82,  3.45, 3.10, 0.2,  3.06,  1.9, 0.66),
   'M6':  (1.00, 24.0, 13.44, 12.0,  6.6,  5.82,  4.59, 3.72, 0.25, 4.06,  2.2, 0.70),
   'M8':  (1.25, 28.0, 17.92, 16.0,  8.54, 7.78,  5.73, 4.96, 0.4,  5.06,  3.0, 1.16),
   'M10': (1.50, 32.0, 22.40, 20.5, 10.62, 9.78,  6.87, 6.20, 0.4,  6.06,  3.6, 1.62),
   'M12': (1.75, 36.0, 26.88, 25.0, 13.5, 11.73,  9.15, 7.44, 0.6,  8.07,  4.3, 1.80),
   'M14': (2.00, 40.0, 30.80, 28.4, 15.5, 13.73, 11.43, 8.40, 0.6, 10.07,  4.5, 1.62),
   'M16': (2.00, 44.0, 33.60, 31.0, 17.5, 15.73, 11.43, 8.80, 0.6, 10.07,  4.8, 2.20),
   'M20': (2.50, 52.0, 40.32, 38.0, 22.0, 19.67, 13.72, 10.16, 0.8, 12.10,  5.6, 2.20)}

# range of typical srew lengths
#    min_length,  max_length
iso10642range = {
   'M3':  ('8', '30'),
   'M4':  ('8', '40'),
   'M5':  ('8', '50'),
   'M6':  ('8', '60'),
   'M8': ('10', '80'),
   'M10':('12','100'),
   'M12':('20','100'),
   'M14':('25','100'), 
   'M16':('30','100'),
   'M20':('35','100'),
   } 

iso10642length = {
   '8': ( 7.71, 8.29),
   '10':( 9.71, 10.29),
   '12':(11.65, 12.35),
   '16':(15.65, 16.35),
   '20':(19.58, 20.42),
   '25':(24.58, 25.42),
   '30':(29.58, 30.42),
   '35':(34.5,  35.5),
   '40':(39.5,  40.5),
   '45':(44.5,  45.5),
   '50':(49.5,  50.5),
   '55':(54.4, 55.6),
   '60':(59.4, 60.6),
   '65':(64.4, 65.6),
   '70':(69.4, 70.6),
   '80':(79.4, 80.6),
   '90':(89.3, 90.7),
   '100':(99.3, 100.7),
         }


# ISO 7089 definitions  Washer
#           d1_min, d2_max, h, h_max
iso7089def={
   'M1.6':( 1.7,  4.0, 0.3, 0.35),
   'M2':  ( 2.2,  5.0, 0.3, 0.35),
   'M2.5':( 2.7,  6.0, 0.5, 0.55),
   'M3':  ( 3.2,  7.0, 0.5, 0.55),
   'M4':  ( 4.3,  9.0, 0.8, 0.90),
   'M5':  ( 5.3, 10.0, 1.0, 1.10),
   'M6':  ( 6.4, 12.0, 1.6, 1.80),
   'M8':  ( 8.4, 16.0, 1.6, 1.80),
   'M10': (10.5, 20.0, 2.0, 2.20),
   'M12': (13.0, 24.0, 2.5, 2.70),
   'M16': (17.0, 30.0, 3.0, 3.30),
   'M20': (21.0, 37.0, 3.0, 3.30),
   'M24': (25.0, 44.0, 4.0, 4.30),
   'M30': (31.0, 56.0, 4.0, 4.30),
   'M36': (37.0, 66.0, 5.0, 5.60),
   'M42': (45.0, 78.0, 8.0, 9.0),
   'M48': (52.0, 92.0, 8.0, 9.0),
   'M56': (62.0,105.0,10.0, 11.0),
   'M64': (70.0,115.0,10.0, 11.0)
   }       


# ISO 4757:1983 Definition of cross recess type H
#          b, e_min, g, f_mean, r, t1, alpha, beta
iso4757def = {
   '0': (0.61, 0.26, 0.81, 0.34, 0.3, 0.22, 138.0, 7.0 ),
   '1': (0.97, 0.41, 1.27, 0.54, 0.5, 0.34, 138.0, 7.0 ),
   '2': (1.47, 0.79, 2.29, 0.70, 0.6, 0.61, 140.0, 5.75),
   '3': (2.41, 1.98, 3.81, 0.83, 0.8, 1.01, 146.0, 5.75),
   '4': (3.48, 2.39, 5.08, 1.23, 1.0, 1.35, 153.0, 7.0 )
   }

# ISO 10664 Hexalobular internal driving feature for bolts and screws
#           A,     B,   Re
iso10664def = {
   'T6': ( 1.75,  1.205, 0.14),
   'T8': ( 2.40,  1.67, 0.20),
   'T10':( 2.80,  1.98, 0.24),
   'T15':( 3.35,  2.35, 0.28),
   'T20':( 3.95,  2.75, 0.32),
   'T25':( 4.50,  3.16, 0.39),
   'T30':( 5.60,  3.95, 0.46),
   'T40':( 6.75,  4.76, 0.56),
   'T45':( 7.93,  5.55, 0.59),
   'T50':( 8.95,  6.36, 0.78),
   'T55':(11.35,  7.92, 0.77),
   'T60':(13.45,  9.48, 1.07),
   'T70':(15.70, 11.08, 1.20),
   'T80':(17.75, 12.64, 1.53),
   'T90':(20.20, 14.22, 1.54),
   'T100':(22.40,15.81, 1.73)
   } 



try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class Ui_ScrewMaker(object):
    def setupUi(self, ScrewMaker):
        ScrewMaker.setObjectName(_fromUtf8(&quot;ScrewMaker&quot;))
        ScrewMaker.resize(450, 362)
        ScrewMaker.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedKingdom))
        self.layoutWidget = QtGui.QWidget(ScrewMaker)
        self.layoutWidget.setGeometry(QtCore.QRect(330, 20, 111, 161))
        self.layoutWidget.setObjectName(_fromUtf8(&quot;layoutWidget&quot;))
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setMargin(0)
        self.verticalLayout_2.setObjectName(_fromUtf8(&quot;verticalLayout_2&quot;))
        self.ScrewTypeLabel = QtGui.QLabel(self.layoutWidget)
        self.ScrewTypeLabel.setObjectName(_fromUtf8(&quot;ScrewTypeLabel&quot;))
        self.verticalLayout_2.addWidget(self.ScrewTypeLabel)
        self.NomDiaLabel = QtGui.QLabel(self.layoutWidget)
        self.NomDiaLabel.setObjectName(_fromUtf8(&quot;NomDiaLabel&quot;))
        self.verticalLayout_2.addWidget(self.NomDiaLabel)
        self.NomLenLabel = QtGui.QLabel(self.layoutWidget)
        self.NomLenLabel.setObjectName(_fromUtf8(&quot;NomLenLabel&quot;))
        self.verticalLayout_2.addWidget(self.NomLenLabel)
        self.ThreadTypeLabel = QtGui.QLabel(self.layoutWidget)
        self.ThreadTypeLabel.setObjectName(_fromUtf8(&quot;ThreadTypeLabel&quot;))
        self.verticalLayout_2.addWidget(self.ThreadTypeLabel)
        self.layoutWidget1 = QtGui.QWidget(ScrewMaker)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 20, 315, 166))
        self.layoutWidget1.setObjectName(_fromUtf8(&quot;layoutWidget1&quot;))
        self.verticalLayout = QtGui.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setMargin(0)
        self.verticalLayout.setObjectName(_fromUtf8(&quot;verticalLayout&quot;))
        self.ScrewType = QtGui.QComboBox(self.layoutWidget1)
        self.ScrewType.setObjectName(_fromUtf8(&quot;ScrewType&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))  # 0
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;))
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 10
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 11
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 12
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 13
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 14
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 15
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 16
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 17
        self.ScrewType.addItem(_fromUtf8(&quot;&quot;)) # 18
        self.verticalLayout.addWidget(self.ScrewType)
        self.NominalDiameter = QtGui.QComboBox(self.layoutWidget1)
        self.NominalDiameter.setObjectName(_fromUtf8(&quot;NominalDiameter&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.NominalDiameter.addItem(_fromUtf8(&quot;&quot;))
        self.verticalLayout.addWidget(self.NominalDiameter)
        self.NominalLength = QtGui.QComboBox(self.layoutWidget1)
        self.NominalLength.setObjectName(_fromUtf8(&quot;NominalLength&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.NominalLength.addItem(_fromUtf8(&quot;&quot;))
        self.verticalLayout.addWidget(self.NominalLength)
        self.ThreadType = QtGui.QComboBox(self.layoutWidget1)
        self.ThreadType.setObjectName(_fromUtf8(&quot;ThreadType&quot;))
        self.ThreadType.addItem(_fromUtf8(&quot;&quot;))
        self.verticalLayout.addWidget(self.ThreadType)
        self.layoutWidget2 = QtGui.QWidget(ScrewMaker)
        self.layoutWidget2.setGeometry(QtCore.QRect(10, 200, 321, 83))
        self.layoutWidget2.setObjectName(_fromUtf8(&quot;layoutWidget2&quot;))
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_3.setMargin(0)
        self.verticalLayout_3.setObjectName(_fromUtf8(&quot;verticalLayout_3&quot;))
        self.SimpleScrew = QtGui.QRadioButton(self.layoutWidget2)
        self.SimpleScrew.setChecked(True)
        self.SimpleScrew.setObjectName(_fromUtf8(&quot;SimpleScrew&quot;))
        self.verticalLayout_3.addWidget(self.SimpleScrew)
        self.SymbolThread = QtGui.QRadioButton(self.layoutWidget2)
        self.SymbolThread.setObjectName(_fromUtf8(&quot;SymbolThread&quot;))
        self.verticalLayout_3.addWidget(self.SymbolThread)
        self.RealThread = QtGui.QRadioButton(self.layoutWidget2)
        self.RealThread.setObjectName(_fromUtf8(&quot;RealThread&quot;))
        self.verticalLayout_3.addWidget(self.RealThread)
        self.MessageLabel = QtGui.QLabel(ScrewMaker)
        self.MessageLabel.setGeometry(QtCore.QRect(20, 290, 411, 21))
        self.MessageLabel.setProperty(&quot;Empty_text&quot;, _fromUtf8(&quot;&quot;))
        self.MessageLabel.setObjectName(_fromUtf8(&quot;MessageLabel&quot;))
        self.CreateButton = QtGui.QToolButton(ScrewMaker)
        self.CreateButton.setGeometry(QtCore.QRect(180, 320, 111, 26))
        self.CreateButton.setObjectName(_fromUtf8(&quot;CreateButton&quot;))
        self.ScrewAvailable = True

        self.retranslateUi(ScrewMaker)
        self.NominalDiameter.setCurrentIndex(5)
        self.NominalLength.setCurrentIndex(9)
        QtCore.QObject.connect(self.ScrewType, QtCore.SIGNAL(_fromUtf8(&quot;currentIndexChanged(int)&quot;)), self.check_Data)
        QtCore.QObject.connect(self.CreateButton, QtCore.SIGNAL(_fromUtf8(&quot;pressed()&quot;)), self.createScrew)
        QtCore.QObject.connect(self.NominalDiameter, QtCore.SIGNAL(_fromUtf8(&quot;currentIndexChanged(int)&quot;)), self.check_Data)
        QtCore.QObject.connect(self.NominalLength, QtCore.SIGNAL(_fromUtf8(&quot;currentIndexChanged(int)&quot;)), self.check_Data)
        QtCore.QMetaObject.connectSlotsByName(ScrewMaker)

    def retranslateUi(self, ScrewMaker):
        ScrewMaker.setWindowTitle(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Screw-Maker&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewTypeLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Type of Screw&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NomDiaLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Nomimal Diameter&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NomLenLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Nominal length&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ThreadTypeLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Thread type&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(0, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO4017: Hexagon head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(1, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO4014: Hexagon head bolts&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(2, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;EN1662: Hexagon bolts with flange, small series&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(3, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;EN1665: Hexagon bolts with flange, heavy series&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(4, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO4762: Hexagon socket head cap screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(5, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7380: Hexagon socket button head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(6, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO10642: Hexagon socket countersunk head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(7, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO2009: Slotted countersunk flat head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(8, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO2010: Slotted raised countersunk head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(9, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO1207: Slotted cheese head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(10, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO1580: Slotted pan head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(11, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7045: Pan head screws type H cross recess&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(12, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7046: Countersunk flat head screws H cross r.&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(13, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7047: Raised countersunk head screws H cross r.&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(14, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7048: Cheese head screws type H cross recess&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(15, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO14579: Hexalobular socket head cap screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(16, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO14580: Hexalobular socket cheese head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(17, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO14583: Hexalobular socket pan head screws&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ScrewType.setItemText(18, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;ISO7089: Washer&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(0, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M1.6&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(1, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M2&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(2, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M2.5&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(3, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M3&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(4, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M4&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(5, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M5&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(6, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M6&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(7, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M8&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(8, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M10&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(9, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M12&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(10, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M14&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(11, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M16&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(12, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M20&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(13, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M24&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(14, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M27&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(15, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M30&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalDiameter.setItemText(16, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;M36&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(0, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;2.5&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(1, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;3&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(2, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;4&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(3, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;5&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(4, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;6&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(5, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;8&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(6, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;10&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(7, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;12&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(8, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;16&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(9, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;20&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(10, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;25&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(11, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;30&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(12, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;35&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(13, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;40&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(14, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;45&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(15, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;50&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(16, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;55&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(17, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;60&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(18, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;65&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(19, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;70&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(20, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;80&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(21, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;90&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(22, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;100&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(23, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;110&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(24, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;120&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(25, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;130&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(26, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;140&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(27, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;150&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(28, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;160&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(29, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;180&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.NominalLength.setItemText(30, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;200&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.ThreadType.setItemText(0, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;regular pitch&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.SimpleScrew.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Simple Screw (no thread at all!)&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.SymbolThread.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Symbol Thread (not implemented yet)&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.RealThread.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Real Thread (takes time, may not work above M16)&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.MessageLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Select your screw type&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.MessageLabel.setProperty(&quot;Errortext&quot;, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Combination not implemented&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.MessageLabel.setProperty(&quot;OK_text&quot;, QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;Screw is made&quot;, None, QtGui.QApplication.UnicodeUTF8))
        self.CreateButton.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;create&quot;, None, QtGui.QApplication.UnicodeUTF8))


    def check_Data(self):
      FreeCAD.Console.PrintMessage(&quot;Data checking&quot; + self.NominalLength.currentText() + &quot;\n&quot;)
      #set screw not ok
      M_text = &quot;Select your screw type&quot;
      ST_text = str(self.ScrewType.currentText())
      ST_text = ST_text.split(':')[0]
      ND_text = str(self.NominalDiameter.currentText())
      Type_text = ''
      if ST_text == 'ISO4017':
        table = iso4017head
        tab_len = iso4017length
        tab_range = iso4017range
        Type_text = 'Screw'

      if ST_text == 'EN1662':
        table = en1662def
        tab_len = en1662length
        tab_range = en1662range
        Type_text = 'Screw'
        
      if ST_text == 'EN1665':
        table = en1665def
        tab_len = en1665length
        tab_range = en1665range
        Type_text = 'Screw'
                
      if ST_text == 'ISO2009':
        table = iso2009def
        tab_len = iso2009length
        tab_range = iso2009range
        Type_text = 'Screw'
      if ST_text == 'ISO2010':
        table = iso2009def
        tab_len = iso2009length
        tab_range = iso2009range
        Type_text = 'Screw'
      if ST_text == 'ISO4762':
        table = iso4762def
        tab_len = iso4762length
        tab_range = iso4762range
        Type_text = 'Screw'

      if ST_text == 'ISO10642':
        table = iso10642def
        tab_len = iso10642length
        tab_range = iso10642range
        Type_text = 'Screw'


      if ST_text == 'ISO4014':
        table = iso4014head
        tab_len = iso4014length
        tab_range = iso4014range
        Type_text = 'Screw'
        
      if ST_text == 'ISO1207':
        table = iso1207def
        tab_len = iso1207length
        tab_range = iso1207range
        Type_text = 'Screw'
      if ST_text == 'ISO1580':
        table = iso1580def
        tab_len = iso2009length
        tab_range = iso2009range
        Type_text = 'Screw'

      if ST_text == 'ISO7045':
        table = iso7045def
        tab_len = iso7045length
        tab_range = iso7045range
        Type_text = 'Screw'

      if ST_text == 'ISO7046':
        table = iso7046def  # contains only cross recess data
        tab_len = iso7045length
        tab_range = iso7046range
        Type_text = 'Screw'

      if ST_text == 'ISO7047':
        table = iso2009def  
        tab_len = iso7045length
        tab_range = iso7046range
        Type_text = 'Screw'


      if ST_text == 'ISO7048':
        table = iso7048def
        tab_len = iso7048length
        tab_range = iso7048range
        Type_text = 'Screw'

      if ST_text == 'ISO7380':
        table = iso7380def
        tab_len = iso7380length
        tab_range = iso7380range
        Type_text = 'Screw'

      if ST_text == 'ISO14579':
        table = iso14579def
        tab_len = iso14579length
        tab_range = iso14579range
        Type_text = 'Screw'

      if ST_text == 'ISO14580':
        table = iso14580def
        tab_len = iso14580length
        tab_range = iso1207range
        Type_text = 'Screw'

      if ST_text == 'ISO14583':
        table = iso14583def
        tab_len = iso7045length
        tab_range = iso7046range
        Type_text = 'Screw'



      if ST_text == 'ISO7089':
        table = iso7089def
        Type_text = 'Washer'

      if ND_text not in table:
         ND_min, ND_max = standard_diameters[ST_text]
         M_text = ST_text+' has diameters from '+ ND_min +' to ' + ND_max + ' and not ' + ND_text +'!'
         self.ScrewAvailable = False
         # set scew not ok
      else:
         if Type_text == 'Screw':
            NL_text = str(self.NominalLength.currentText())
            NL_min, NL_max = tab_range[ND_text]
            NL_min_float = float(NL_min)
            NL_max_float = float(NL_max)
            NL_text_float = float(NL_text)
            if (NL_text_float&lt;NL_min_float)or(NL_text_float&gt;NL_max_float)or(NL_text not in tab_len):            
               M_text = ST_text+'-'+ ND_text +' has lengths from '+ NL_min +' to ' + NL_max + ' and not ' + NL_text +'!'
               self.ScrewAvailable = False
               # set screw not ok
            else:
               M_text = ST_text+'-'+ ND_text +'x'+ NL_text +' is in library available! '
               self.ScrewAvailable = True
               #set screw ok
         else: # Washers and Nuts
            M_text = ST_text+'-'+ ND_text +' is in library available! '
            self.ScrewAvailable = True
            #set washer/nut ok
      
      #print &quot;Data checking: &quot;, self.NominalLength.currentText(), &quot;\n&quot;
      self.MessageLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, M_text, None, QtGui.QApplication.UnicodeUTF8))
      FreeCAD.Console.PrintMessage(&quot;Set Check_result into text &quot; + str(self.ScrewAvailable) + M_text + &quot;\n&quot;)


    def createScrew(self):
       if self.ScrewAvailable:
          try:
              # first we check if valid numbers have been entered
              FreeCAD.Console.PrintMessage(&quot;NominalLength: &quot; + self.NominalLength.currentText() + &quot;\n&quot;)
              FreeCAD.Console.PrintMessage(&quot;NominalDiameter: &quot; + self.NominalDiameter.currentText() + &quot;\n&quot;)
              FreeCAD.Console.PrintMessage(&quot;SimpleThread: &quot; + str(self.SimpleScrew.isChecked()) + &quot;\n&quot;)
              FreeCAD.Console.PrintMessage(&quot;SymbolThread: &quot; + str(self.SymbolThread.isChecked()) + &quot;\n&quot;)
              FreeCAD.Console.PrintMessage(&quot;RealThread: &quot; + str(self.RealThread.isChecked()) + &quot;\n&quot;)
                         
              ND_text = str(self.NominalDiameter.currentText())
              NL_text = str(self.NominalLength.currentText())
              ST_text = str(self.ScrewType.currentText())
              ST_text = ST_text.split(':')[0]
              dia = float(ND_text.lstrip('M'))
              l = float(NL_text)
              if ST_text == 'ISO4017':
                 table = iso4017head
              if ST_text == 'ISO4014':
                 table = iso4014head
              if ST_text == 'EN1662':
                 table = en1662def
              if ST_text == 'EN1665':
                 table = en1665def
              if ST_text == 'ISO2009':
                 table = iso2009def
              if ST_text == 'ISO2010':
                 table = iso2009def
              if ST_text == 'ISO4762':
                 table = iso4762def
              if ST_text == 'ISO10642':
                 table = iso10642def
              if ST_text == 'ISO1207':
                 table = iso1207def
              if ST_text == 'ISO1580':
                 table = iso1580def
              if ST_text == 'ISO7045':
                 table = iso7045def
              if ST_text == 'ISO7046':
                 table = iso7045def
              if ST_text == 'ISO7047':
                 table = iso7045def
              if ST_text == 'ISO7048':
                 table = iso7048def
              if ST_text == 'ISO7380':
                 table = iso7380def
              if ST_text == 'ISO7089':
                 table = iso7089def
              if ST_text == 'ISO14579':
                 table = iso14579def
              if ST_text == 'ISO14580':
                 table = iso14580def
              if ST_text == 'ISO14583':
                 table = iso14583def
              if ND_text not in table:
                 FreeCAD.Console.PrintMessage(&quot;Combination of type &quot;+ST_text \
                    + &quot; and diameter &quot; + ND_text +&quot; not available!&quot; + &quot;\n&quot;)
              #self.MessageLabel.setText(QtGui.QApplication.translate(&quot;ScrewMaker&quot;, &quot;not implemented&quot;, None, QtGui.QApplication.UnicodeUTF8))
              
          except ValueError:
              print &quot;Error! nom_dia and length values must be valid numbers!&quot;
          else:
              doc=App.activeDocument()
              done = False
              if ST_text == 'ISO4017':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO4017 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso4017(ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO4014':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO4014 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso4014(ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if (ST_text == 'EN1662') or (ST_text == 'EN1665'):
                 FreeCAD.Console.PrintMessage(&quot;screw Type EN1662/EN1665 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeEN1662(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if (ST_text == 'ISO2009') or (ST_text == 'ISO2010'):
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO2009/10 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso2009(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO4762':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO4762 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso4762(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO10642':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO10642 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso2009(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO1207':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO1207 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso1207(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO1580':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO1580 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso1580(ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7045':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO7045 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso7045(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7046':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO7046 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso2009(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7047':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO7047 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso2009(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7048':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO7048 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso1207(ST_text, ND_text, l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7380':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO7380 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso7380(ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO14579':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO14579 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso4762(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO14580':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO14580 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso1207(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO14583':
                 FreeCAD.Console.PrintMessage(&quot;screw Type ISO14583 selected &quot;+ str(dia) +&quot; &quot;+ str(l) + &quot;\n&quot;)
                 screw = self.makeIso7045(ST_text, ND_text,l)
                 Type_text = 'Screw'
                 done = True
              if ST_text == 'ISO7089':
                 FreeCAD.Console.PrintMessage(&quot;washer Type ISO7089 selected &quot;+ str(dia) + &quot;\n&quot;)
                 screw = self.makeIso7089(ND_text)
                 Type_text = 'Washer'
                 done = True
              if not done:
                 FreeCAD.Console.PrintMessage(&quot;No valid Screw Type!&quot; +  &quot;\n&quot;)
              if Type_text == 'Screw':
                 label = ST_text + '-' + ND_text +'x'+ NL_text +'_'
              else:
                 label = ST_text + '-' + ND_text.lstrip('M') +'_'
              ScrewObj = doc.addObject(&quot;Part::Feature&quot;,label)
              #ScrewObj = doc.addObject(&quot;Part::Feature&quot;,&quot;Screw&quot;)
              ScrewObj.Shape=screw
              FreeCAD.Console.PrintMessage(&quot;Placement: &quot;+ str(ScrewObj.Placement) +&quot;\n&quot;)
              self.moveScrew(ScrewObj)
              #ScrewObj.Label = label
              doc.recompute()
              # Part.show(screw)
              return ScrewObj
           
    def moveScrew(self, ScrewObj_m):
      FreeCAD.Console.PrintMessage(&quot;In Move Screw: &quot; + str(ScrewObj_m) + &quot;\n&quot;)

      mylist = Gui.Selection.getSelectionEx()
      if (mylist.__len__() == 1):
         # check selection
         FreeCAD.Console.PrintMessage(&quot;Selektionen: &quot; + str(mylist.__len__()) + &quot;\n&quot;)
         Pnt1 = None
         Axis1 = None
         Axis2 = None
         
         for o in Gui.Selection.getSelectionEx():
            #for s in o.SubElementNames:
               #FreeCAD.Console.PrintMessage( &quot;name: &quot; + str(s) + &quot;\n&quot;)
            for s in o.SubObjects:
               #FreeCAD.Console.PrintMessage( &quot;object: &quot;+ str(s) + &quot;\n&quot;)
               if hasattr(s,&quot;Curve&quot;):
                  #FreeCAD.Console.PrintMessage( &quot;The Object is a Curve!\n&quot;)
                  if hasattr(s.Curve,&quot;Center&quot;):
                     &quot;&quot;&quot;
                     FreeCAD.Console.PrintMessage( &quot;The object has a Center!\n&quot;)
                     FreeCAD.Console.PrintMessage( &quot;Curve attribut. &quot;+ str(s.__getattribute__('Curve')) + &quot;\n&quot;)
                     FreeCAD.Console.PrintMessage( &quot;Center: &quot;+ str(s.Curve.Center) + &quot;\n&quot;)
                     FreeCAD.Console.PrintMessage( &quot;Axis: &quot;+ str(s.Curve.Axis) + &quot;\n&quot;)
                     &quot;&quot;&quot;
                     Pnt1 = s.Curve.Center
                     Axis1 = s.Curve.Axis
               if hasattr(s,'Surface'):
                  #print 'the object is a face!'
                  if hasattr(s.Surface,'Axis'):
                     Axis1 = s.Surface.Axis
         
               if hasattr(s,'Point'):
                  FreeCAD.Console.PrintMessage( &quot;the object seems to be a vertex! &quot;+ str(s.Point) + &quot;\n&quot;)
                  Pnt1 = s.Point
                     
         if (Axis1 != None):
            #FreeCAD.Console.PrintMessage( &quot;Got Axis1: &quot; + str(Axis1) + &quot;\n&quot;)
            Axis2 = Base.Vector(0.0,0.0,1.0)
            Axis2_minus = Base.Vector(0.0,0.0,-1.0)
            
            # Calculate angle
            if Axis1 == Axis2:
               normvec = Base.Vector(1.0,0.0,0.0)
               result = 0.0
            else:
               if Axis1 == Axis2_minus:
                  normvec = Base.Vector(1.0,0.0,0.0)
                  result = math.pi
               else:
                  normvec = Axis1.cross(Axis2) # Berechne Achse der Drehung = normvec
                  normvec.normalize() # Normalisieren fuer Quaternionenrechnung
                  #normvec_rot = normvec
                  result = DraftVecUtils.angle(Axis1, Axis2, normvec) # Winkelberechnung
            sin_res = math.sin(result/2.0)
            cos_res = math.cos(result/2.0)
            normvec.multiply(-sin_res) # Berechnung der Quaternionen-Elemente
            #FreeCAD.Console.PrintMessage( &quot;Winkel = &quot;+ str(math.degrees(result)) + &quot;\n&quot;)
            #FreeCAD.Console.PrintMessage(&quot;Normalvektor: &quot;+ str(normvec) + &quot;\n&quot;)
            
            pl = FreeCAD.Placement()
            pl.Rotation = (normvec.x,normvec.y,normvec.z,cos_res) #Drehungs-Quaternion
            
            #FreeCAD.Console.PrintMessage(&quot;pl mit Rot: &quot;+ str(pl) + &quot;\n&quot;)
            #neuPlatz = Part2.Object.Placement.multiply(pl)
            neuPlatz = ScrewObj_m.Placement
            #FreeCAD.Console.PrintMessage(&quot;die Position     &quot;+ str(neuPlatz) + &quot;\n&quot;)
            neuPlatz.Rotation = pl.Rotation.multiply(ScrewObj_m.Placement.Rotation)
            neuPlatz.move(Pnt1)
            #FreeCAD.Console.PrintMessage(&quot;die rot. Position: &quot;+ str(neuPlatz) + &quot;\n&quot;)



     # make Washer
    def makeIso7089(self,ThreadType ='M6'):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;die Scheibe mit dia: &quot; + str(dia) + &quot;\n&quot;)
      d1_min, d2_max, h, h_max = iso7089def[ThreadType]

      FreeCAD.Console.PrintMessage(&quot;die Scheibe mit d1_min: &quot; + str(d1_min) + &quot;\n&quot;)

      #Washer Points  
      Pnt0 = Base.Vector(d1_min/2.0,0.0,h_max)
      Pnt2 = Base.Vector(d2_max/2.0,0.0,h_max)
      Pnt3 = Base.Vector(d2_max/2.0,0.0,0.0)      
      Pnt4 = Base.Vector(d1_min/2.0,0.0,0.0)
      
      edge1 = Part.makeLine(Pnt0,Pnt2)
      edge2 = Part.makeLine(Pnt2,Pnt3)
      edge3 = Part.makeLine(Pnt3,Pnt4)
      edge4 = Part.makeLine(Pnt4,Pnt0)
      FreeCAD.Console.PrintMessage(&quot;Edges made Pnt2: &quot; + str(Pnt2) + &quot;\n&quot;)

      aWire=Part.Wire([edge1,edge2,edge3,edge4])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      FreeCAD.Console.PrintMessage(&quot;Washer revolved: &quot; + str(dia) + &quot;\n&quot;)

      return head



     # make Pan head slotted screw Code is nearly identical to iso1207
    def makeIso1580(self,ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      #P, a, b, dk, dk_mean, da, k, n_min, r, t_min, x = iso1580def[ThreadType]
      P, a, b, dk_max, da, k, n_min, r, rf, t_min, x = iso1580def[ThreadType]
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso: &quot; + str(dk_max) + &quot;\n&quot;)
      
      #Length for calculation of head fillet
      r_fil = rf
      beta = math.radians(5.0)   # angle of pan head edge
      alpha = math.radians(90.0 - (90.0+5.0)/2.0)
      tan_beta = math.tan(beta)      
      # top head diameter without fillet
      rK_top = dk_max/2.0 - k * tan_beta     
      fillet_center_x = rK_top - r_fil + r_fil * tan_beta 
      fillet_center_z = k - r_fil
      fillet_arc_x = fillet_center_x + r_fil * math.sin(alpha)
      fillet_arc_z = fillet_center_z + r_fil * math.cos(alpha)
      #FreeCAD.Console.PrintMessage(&quot;rK_top: &quot; + str(rK_top) + &quot;\n&quot;)

      if (b &gt; l - P):
         bmax = l-P
      else:
         bmax = b
      turns = round((bmax+P)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)

      #Head Points  
      Pnt0 = Base.Vector(0.0,0.0,k)
      Pnt2 = Base.Vector(fillet_center_x,0.0,k)
      Pnt3 = Base.Vector(fillet_arc_x,0.0,fillet_arc_z)      
      Pnt4 = Base.Vector(fillet_center_x + r_fil*math.cos(beta),0.0,fillet_center_z+ r_fil * math.sin(beta))
      Pnt5 = Base.Vector(dk_max/2.0,0.0,0.0)
      Pnt6 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt7 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt8 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt9 = Base.Vector(dia/2.0,0.0,-a_real)        # Start of thread
      #FreeCAD.Console.PrintMessage(&quot;Points defined fillet_center_x: &quot; + str(fillet_center_x) + &quot;\n&quot;)
      
      edge1 = Part.makeLine(Pnt0,Pnt2)
      edge2 = Part.Arc(Pnt2,Pnt3,Pnt4).toShape()
      edge3 = Part.makeLine(Pnt4,Pnt5)
      edge4 = Part.makeLine(Pnt5,Pnt6)
      edge5 = Part.Arc(Pnt6,Pnt7,Pnt8).toShape()
      edge6 = Part.makeLine(Pnt8,Pnt9)
      #FreeCAD.Console.PrintMessage(&quot;Edges made fillet_center_z: &quot; + str(fillet_center_z) + &quot;\n&quot;)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt9,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6, \
          edgeB1, edgeB2, edgeZ0])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)

      #Parameter for slot-recess: dk_max, n_min, k, t_min
      slot = Part.makePlane(dk_max, n_min, \
          Base.Vector(dk_max/2.0,-n_min/2.0,k),Base.Vector(0.0,0.0,-1.0))
      slot = slot.extrude(Base.Vector(0.0,0.0,-t_min))
      #Part.show(slot)
      head = head.cut(slot)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      #cyl = self.cutChamfer(dia, P, l)
      cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
   
      head = head.cut(cyl)
      return head

    # ISO 7045 Pan head screws with type H or type Z cross recess
    # ISO 14583 Hexalobular socket pan head screws  
    def makeIso7045(self, SType ='ISO7045', ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      P, a, b, dk_max,da, k, r, rf, x, cT, mH, mZ  = iso7045def[ThreadType]
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso: &quot; + str(dk_max) + &quot;\n&quot;)



      #Lengths and angles for calculation of head rounding
      beta = math.asin(dk_max /2.0 / rf)   # angle of head edge
      #print 'beta: ', math.degrees(beta)
      tan_beta = math.tan(beta)      


      if SType == 'ISO14583':
         tt, A, t_mean = iso14583def[ThreadType]
         beta_A = math.asin(A/2.0 / rf)   # angle of recess edge
         tan_beta_A = math.tan(beta_A)

         alpha = (beta_A + beta)/2.0 # half angle
         #print 'alpha: ', math.degrees(alpha)
         # heigth of head edge
         he = k - A/2.0/tan_beta_A + (dk_max/2.0) / tan_beta    
         #print 'he: ', he
         h_arc_x = rf * math.sin(alpha) 
         h_arc_z = k - A/2.0/tan_beta_A + rf * math.cos(alpha)
         #FreeCAD.Console.PrintMessage(&quot;h_arc_z: &quot; + str(h_arc_z) + &quot;\n&quot;)
      else:
         alpha = beta/2.0 # half angle
         #print 'alpha: ', math.degrees(alpha)
         # heigth of head edge
         he = k - rf + (dk_max/2.0) / tan_beta    
         #print 'he: ', he
         h_arc_x = rf * math.sin(alpha) 
         h_arc_z = k - rf + rf * math.cos(alpha)
         #FreeCAD.Console.PrintMessage(&quot;h_arc_z: &quot; + str(h_arc_z) + &quot;\n&quot;)
      
      if (b &gt; l - P):
         bmax = l-P
      else:
         bmax = b
      turns = round((bmax+P)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)
      
      #Head Points  
      Pnt0 = Base.Vector(0.0,0.0,k)
      Pnt1 = Base.Vector(h_arc_x,0.0,h_arc_z)
      Pnt2 = Base.Vector(dk_max/2.0,0.0,he)      
      Pnt3 = Base.Vector(dk_max/2.0,0.0,0.0)
      Pnt4 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt5 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt6 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt7 = Base.Vector(dia/2.0,0.0,-a_real)        # Start of thread
      #FreeCAD.Console.PrintMessage(&quot;Points defined h_arc_z: &quot; + str(h_arc_z) + &quot;\n&quot;)


      if (SType == 'ISO14583'):
         Pnt0 = Base.Vector(0.0,0.0,k-A/4.0)
         PntCham = Base.Vector(A/2.0,0.0,k)
         edgeCham1 = Part.makeLine(Pnt0,PntCham)    
         edgeCham2 = Part.Arc(PntCham,Pnt1,Pnt2).toShape()   
         edge1 = Part.Wire([edgeCham1,edgeCham2]) 
      else:
         Pnt0 = Base.Vector(0.0,0.0,k)
         edge1 = Part.Arc(Pnt0,Pnt1,Pnt2).toShape()  # make round head


      
      #edge1 = Part.Arc(Pnt0,Pnt1,Pnt2).toShape()
      edge2 = Part.makeLine(Pnt2,Pnt3)
      edge3 = Part.makeLine(Pnt3,Pnt4)
      edge4 = Part.Arc(Pnt4,Pnt5,Pnt6).toShape()
      edge5 = Part.makeLine(Pnt6,Pnt7)
      #FreeCAD.Console.PrintMessage(&quot;Edges made h_arc_z: &quot; + str(h_arc_z) + &quot;\n&quot;)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt7,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5, \
          edgeB1, edgeB2, edgeZ0])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)
   
      if (SType == 'ISO14583'):
         recess = self.makeIso10664(tt, t_mean, k)

      else:
         #Lengths and angles for calculation of recess positioning
         beta_cr = math.asin(mH /2.0 / rf)   # angle of recess edge
         tan_beta_cr = math.tan(beta_cr)      
         # heigth of cross recess cutting
         hcr = k - rf + (mH/2.0) / tan_beta_cr
         #print 'hcr: ', hcr
         
         #Parameter for cross-recess type H: cT, mH
         recess = self.makeCross_H(cT, mH, hcr)
      head = head.cut(recess)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
   
      #cyl = self.cutChamfer(dia, P, l)
      cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
      
      head = head.cut(cyl)
      return head


     # make Cheese head screw
     # ISO 1207 slotted screw
     # ISO 7048 cross recessed screw
     # ISO 14580 Hexalobular socket cheese head screws
    def makeIso1207(self,SType ='ISO1207', ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      if (SType == 'ISO1207') or (SType == 'ISO14580'):
         P, a, b, dk, dk_mean, da, k, n_min, r, t_min, x = iso1207def[ThreadType]
      if SType == 'ISO7048':
         P, a, b, dk, dk_mean, da, k, r, x, cT, mH, mZ  = iso7048def[ThreadType]
      if (SType == 'ISO14580'):
         tt, k, A, t_min = iso14580def[ThreadType]

      FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso: &quot; + str(dk) + &quot;\n&quot;)
      
      #Length for calculation of head fillet
      r_fil = r
      beta = math.radians(5.0)   # angle of cheese head edge
      alpha = math.radians(90.0 - (90.0+5.0)/2.0)
      tan_beta = math.tan(beta)      
      # top head diameter without fillet
      rK_top = dk/2.0 - k * tan_beta     
      fillet_center_x = rK_top - r_fil + r_fil * tan_beta 
      fillet_center_z = k - r_fil
      fillet_arc_x = fillet_center_x + r_fil * math.sin(alpha)
      fillet_arc_z = fillet_center_z + r_fil * math.cos(alpha)
      #FreeCAD.Console.PrintMessage(&quot;rK_top: &quot; + str(rK_top) + &quot;\n&quot;)

      if (b &gt; l - P):
         bmax = l-P
      else:
         bmax = b
      turns = round((bmax+P)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)

      #Head Points  
      Pnt2 = Base.Vector(fillet_center_x,0.0,k)
      Pnt3 = Base.Vector(fillet_arc_x,0.0,fillet_arc_z)      
      Pnt4 = Base.Vector(fillet_center_x + r_fil*math.cos(beta),0.0,fillet_center_z+ r_fil * math.sin(beta))
      Pnt5 = Base.Vector(dk/2.0,0.0,0.0)
      Pnt6 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt7 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt8 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt9 = Base.Vector(dia/2.0,0.0,-a_real)        # Start of thread
      #FreeCAD.Console.PrintMessage(&quot;Points defined fillet_center_x: &quot; + str(fillet_center_x) + &quot;\n&quot;)

      if (SType == 'ISO14580'):
         Pnt0 = Base.Vector(0.0,0.0,k-A/4.0)
         PntCham = Base.Vector(A/2.0,0.0,k)
         edgeCham1 = Part.makeLine(Pnt0,PntCham)    
         edgeCham2 = Part.makeLine(PntCham,Pnt2)    
         edge1 = Part.Wire([edgeCham1,edgeCham2]) # make head with countersunk
      else:
         Pnt0 = Base.Vector(0.0,0.0,k)
         edge1 = Part.makeLine(Pnt0,Pnt2)  # make flat head
      
      edge2 = Part.Arc(Pnt2,Pnt3,Pnt4).toShape()
      edge3 = Part.makeLine(Pnt4,Pnt5)
      edge4 = Part.makeLine(Pnt5,Pnt6)
      edge5 = Part.Arc(Pnt6,Pnt7,Pnt8).toShape()
      edge6 = Part.makeLine(Pnt8,Pnt9)
      #FreeCAD.Console.PrintMessage(&quot;Edges made fillet_center_z: &quot; + str(fillet_center_z) + &quot;\n&quot;)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt9,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6, \
          edgeB1, edgeB2, edgeZ0])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)
      
      if SType == 'ISO1207':
         #Parameter for slot-recess: dk, n_min, k, t_min
         recess = Part.makePlane(dk, n_min, \
             Base.Vector(dk/2.0,-n_min/2.0,k),Base.Vector(0.0,0.0,-1.0))
         recess = recess.extrude(Base.Vector(0.0,0.0,-t_min))
      if SType == 'ISO7048':
         recess = self.makeCross_H(cT, mH, k)
      if (SType == 'ISO14580'):
         recess = self.makeIso10664(tt, t_min, k)

      #Part.show(slot)
      head = head.cut(recess)
      FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      #cyl = self.cutChamfer(dia, P, l)
      cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
   
      head = head.cut(cyl)
      return head


	# make the ISO 4017 Hex-head-screw	
    def makeIso4017(self,ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      P, c, dw, e,k,r,s = iso4017head[ThreadType]
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso: &quot; + str(c) + &quot;\n&quot;)
      cham = (e-s)*math.sin(math.radians(15)) # needed for chamfer at head top
      #cham_t = P*math.sqrt(3.0)/2.0*17.0/24.0
      turns = round((l-2*P)/P) # number of thread turns
      a = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)

      #Head Points  Usage of k, s, cham, c, dw, dia, r, a
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit math a: &quot; + str(a) + &quot;\n&quot;)
      Pnt0 = Base.Vector(0.0,0.0,k)
      Pnt2 = Base.Vector(s/2.0,0.0,k)
      Pnt3 = Base.Vector(s/math.sqrt(3.0),0.0,k-cham)
      Pnt4 = Base.Vector(s/math.sqrt(3.0),0.0,c)
      Pnt5 = Base.Vector(dw/2.0,0.0,c)
      Pnt6 = Base.Vector(dw/2.0,0.0,0.0)
      Pnt7 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt8 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt9 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt10 = Base.Vector(dia/2.0,0.0,-a)        # Start of thread
      
      edge1 = Part.makeLine(Pnt0,Pnt2)
      edge2 = Part.makeLine(Pnt2,Pnt3)
      edge3 = Part.makeLine(Pnt3,Pnt4)
      edge4 = Part.makeLine(Pnt4,Pnt5)
      edge5 = Part.makeLine(Pnt5,Pnt6)
      edge6 = Part.makeLine(Pnt6,Pnt7)
      edge7 = Part.Arc(Pnt7,Pnt8,Pnt9).toShape()
      edge8 = Part.makeLine(Pnt9,Pnt10)
      
      # bolt points
      PntB0 = Base.Vector(0.0,0.0,-a)
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt10,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6,edge7,edge8, \
          edgeB1, edgeB2, edgeZ0])
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)

      # create cutting tool for hexagon head 
      # Parameters s, k, outer circle diameter =  e/2.0+10.0     
      extrude = self.makeHextool(s, k, e/2.0+10.0)

      # Part.show(extrude)
      head = head.cut(extrude)		   
      FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      cyl = self.cutChamfer(dia, P, l)
      #cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
   
      head = head.cut(cyl)
      return head

	# helper method to create the ISO 4014 Hex-head-bolt
    def makeIso4014(self,ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      P, b1, b2, b3, c, dw, e, k, r, s = iso4014head[ThreadType]
      if l&lt;= 125.0:
         b = b1
      else:
         if l&lt;= 200.0:
            b = b2
         else:
            b = b3
      
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso4014: &quot; + str(c) + &quot;\n&quot;)
      cham = (e-s)*math.sin(math.radians(15)) # needed for chamfer at head top
      turns = round((b+P)/P) # number of thread turns
      a = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)

      #Head Points
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit math a: &quot; + str(a) + &quot;\n&quot;)
      Pnt0 = Base.Vector(0.0,0.0,k)
      Pnt2 = Base.Vector(s/2.0,0.0,k)
      #Pnt3 = Base.Vector(e/2.0,0.0,k-cham)   #s/math.sqrt(3.0)
      #Pnt4 = Base.Vector(e/2.0,0.0,c)
      Pnt3 = Base.Vector(s/math.sqrt(3.0),0.0,k-cham)   #s/math.sqrt(3.0)
      Pnt4 = Base.Vector(s/math.sqrt(3.0),0.0,c)
      Pnt5 = Base.Vector(dw/2.0,0.0,c)
      Pnt6 = Base.Vector(dw/2.0,0.0,0.0)
      Pnt7 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt8 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt9 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt10 = Base.Vector(dia/2.0,0.0,-a)        # Start of thread
      
      edge1 = Part.makeLine(Pnt0,Pnt2)
      edge2 = Part.makeLine(Pnt2,Pnt3)
      edge3 = Part.makeLine(Pnt3,Pnt4)
      edge4 = Part.makeLine(Pnt4,Pnt5)
      edge5 = Part.makeLine(Pnt5,Pnt6)
      edge6 = Part.makeLine(Pnt6,Pnt7)
      edge7 = Part.Arc(Pnt7,Pnt8,Pnt9).toShape()
      edge8 = Part.makeLine(Pnt9,Pnt10)
      
      # bolt points
      PntB0 = Base.Vector(0.0,0.0,-a)
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt10,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6,edge7,edge8, \
          edgeB1, edgeB2, edgeZ0])
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)

      # create cutting tool for hexagon head 
      # Parameters s, k, outer circle diameter =  e/2.0+10.0     
      extrude = self.makeHextool(s, k, e/2.0+10.0)

      # Part.show(extrude)
      head = head.cut(extrude)		   
      #FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      cyl = self.cutChamfer(dia, P, l)
      #cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
      head = head.cut(cyl)
      return head



    # EN 1662 Hex-head-bolt with flange - small series
    # EN 1665 Hexagon bolts with flange, heavy series
    def makeEN1662(self,SType ='EN1662', ThreadType ='M8',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      if SType == 'EN1662':
         P, b0, b1, b2, b3, c, dc, dw, e, k, kw,f, r1, s = en1662def[ThreadType]
      else:
         P, b1, b2, b3, c, dc, dw, e, k, kw,f, r1, s = en1665def[ThreadType]
      if l&lt; b0:
         b = l - 2*P
      else:
         if l&lt;= 125.0:
            b = b1
         else:
            if l&lt;= 200.0:
               b = b2
            else:
               b = b3
      
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit isoEN1662: &quot; + str(c) + &quot;\n&quot;)
      cham = s*(2.0/math.sqrt(3.0)-1.0)*math.sin(math.radians(25)) # needed for chamfer at head top
      turns = round((b+P)/P) # number of thread turns
      a = l-turns*P  # starting point of thread
      sqrt2_ = 1.0/math.sqrt(2.0)
   
      # Flange is made with a radius of c
      beta = math.radians(25.0)
      tan_beta = math.tan(beta)
      
      # Calcualtion of Arc points of flange edge using dc and c
      arc1_x = dc/2.0 - c/2.0 + (c/2.0)*math.sin(beta)
      arc1_z = c/2.0 + (c/2.0)*math.cos(beta)
      
      hF = arc1_z + (arc1_x -s/2.0) * tan_beta  # height of flange at center
      
      kmean = arc1_z + (arc1_x - s/math.sqrt(3.0)) * tan_beta + kw * 1.1 + cham
      #kmean = k * 0.95
      
      #Hex-Head Points
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit math a: &quot; + str(a) + &quot;\n&quot;)
      PntH0 = Base.Vector(0.0,0.0,kmean*0.9)
      PntH1 = Base.Vector(s/2.0*0.8 - r1/2.0,0.0,kmean*0.9)
      PntH1a = Base.Vector(s/2.0*0.8-r1/2.0+r1/2.0*sqrt2_,0.0,kmean*0.9 +r1/2.0 -r1/2.0*sqrt2_)
      PntH1b = Base.Vector(s/2.0*0.8,0.0,kmean*0.9 +r1/2.0)
      PntH2 = Base.Vector(s/2.0*0.8,0.0,kmean -r1)
      PntH2a = Base.Vector(s/2.0*0.8+r1-r1*sqrt2_,0.0,kmean -r1 +r1*sqrt2_)
      PntH2b = Base.Vector(s/2.0*0.8 + r1 ,0.0,kmean)
      PntH3 = Base.Vector(s/2.0,0.0,kmean)
      PntH4 = Base.Vector(s/math.sqrt(3.0),0.0,kmean-cham)   #s/math.sqrt(3.0)
      PntH5 = Base.Vector(s/math.sqrt(3.0),0.0,c)
      PntH6 = Base.Vector(0.0,0.0,c)
      
      edgeH1 = Part.makeLine(PntH0,PntH1)
      edgeH2 = Part.Arc(PntH1,PntH1a,PntH1b).toShape()
      edgeH3 = Part.makeLine(PntH1b,PntH2)
      edgeH3a = Part.Arc(PntH2,PntH2a,PntH2b).toShape()   
      edgeH3b = Part.makeLine(PntH2b,PntH3)
      edgeH4 = Part.makeLine(PntH3,PntH4)
      edgeH5 = Part.makeLine(PntH4,PntH5)
      edgeH6 = Part.makeLine(PntH5,PntH6)
      edgeH7 = Part.makeLine(PntH6,PntH0)
      
      hWire=Part.Wire([edgeH1,edgeH2,edgeH3,edgeH3a,edgeH3b,edgeH4,edgeH5,edgeH6,edgeH7])
      hFace =Part.Face(hWire)
      hexhead = hFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      
      
      # Center of flange:
      Pnt0 = Base.Vector(0.0,0.0,hF)
      Pnt1 = Base.Vector(s/2.0,0.0,hF)
      
      # arc edge of flange:
      Pnt2 = Base.Vector(arc1_x,0.0,arc1_z)
      Pnt3 = Base.Vector(dc/2.0,0.0,c/2.0)
      Pnt4 = Base.Vector((dc-c)/2.0,0.0,0.0)
      
      Pnt5 = Base.Vector(dia/2.0+r1,0.0,0.0)     #start of fillet between head and shank
      Pnt6 = Base.Vector(dia/2.0+r1-r1*sqrt2_,0.0,-r1+r1*sqrt2_) #arc-point of fillet
      Pnt7 = Base.Vector(dia/2.0,0.0,-r1)        # end of fillet
      Pnt8 = Base.Vector(dia/2.0,0.0,-a)        # Start of thread
      
      edge1 = Part.makeLine(Pnt0,Pnt1)
      edge2 = Part.makeLine(Pnt1,Pnt2)
      edge3 = Part.Arc(Pnt2,Pnt3,Pnt4).toShape()
      edge4 = Part.makeLine(Pnt4,Pnt5)
      edge5 = Part.Arc(Pnt5,Pnt6,Pnt7).toShape()
      edge6 = Part.makeLine(Pnt7,Pnt8)
      
      # bolt points
      PntB0 = Base.Vector(0.0,0.0,-a)
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      
      edgeB1 = Part.makeLine(Pnt8,PntB1)
      edgeB2 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6, \
          edgeB1, edgeB2, edgeZ0])
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)
      
      # create cutting tool for hexagon head 
      # Parameters s, k, outer circle diameter =  dc   
      extrude = self.makeHextool(s, k, dc)
      
      #Part.show(extrude)
      hexhead = hexhead.cut(extrude)		   
      #FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      #Part.show(hexhead)
      head = head.fuse(hexhead)
      
      if self.RealThread.isChecked():
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      cyl = self.cutChamfer(dia, P, l)
      head = head.cut(cyl)
      return head






    # make ISO 2009 Slotted countersunk flat head screws
    # make ISO 2010 Slotted raised countersunk head screws
    # also used for ISO 7046 countersunk flat head screws with H cross recess
    # also used for ISO 7047 raised countersunk head screws with H cross recess
    # also used for ISO 10642 Hexagon socket countersunk head screws
    def makeIso2009(self, SType ='ISO2009', ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      #FreeCAD.Console.PrintMessage(&quot;der 2009Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      if (SType == 'ISO10642'):
          P,b,dk_theo,dk_mean,da, ds_min, e, k, r, s_mean, t, w =iso10642def[ThreadType]
          ht = - s_mean / math.sqrt(3.0)
          a = 2*P
          t_mean = t
      else:
          P, a, b, dk_theo, dk_mean, k, n_min, r, t_mean, x = iso2009def[ThreadType]
          ht = 0.0 # Head heigth of flat head
      if SType == 'ISO7046':
         cT, mH, mZ  = iso7046def[ThreadType]
      if (SType == 'ISO2010') or (SType == 'ISO7047'):
         rf, t_mean, cT, mH, mZ = Raised_countersunk_def[ThreadType]

         #Lengths and angles for calculation of head rounding
         beta = math.asin(dk_mean /2.0 / rf)   # angle of head edge
         tan_beta = math.tan(beta)      
         alpha = beta/2.0 # half angle
         # heigth of raised head top
         ht = rf - (dk_mean/2.0) / tan_beta
         #print 'he: ', he
         h_arc_x = rf * math.sin(alpha) 
         h_arc_z = ht - rf + rf * math.cos(alpha)
         FreeCAD.Console.PrintMessage(&quot;h_arc_z: &quot; + str(h_arc_z) + &quot;\n&quot;)
         
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso r: &quot; + str(r) + &quot;\n&quot;)
      cham = (dk_theo - dk_mean)/2.0
      rad225 = math.radians(22.5)
      rad45 = math.radians(45.0)
      rtan = r*math.tan(rad225)
      
      if (b &gt; l - k -a):
         bmax = l-k-a
      else:
         bmax = b
      turns = round((bmax+P/2.0)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
         
      #Head Points
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit math rtan: &quot; + str(rtan) + &quot;\n&quot;)
      Pnt0 = Base.Vector(0.0,0.0,ht)
      Pnt1 = Base.Vector(dk_mean/2.0,0.0,0.0)
      Pnt2 = Base.Vector(dk_mean/2.0,0.0,-cham)
      Pnt3 = Base.Vector(dia/2.0+r-r*math.cos(rad45),0.0,-k-rtan+r*math.sin(rad45))
      
      # Arc-points
      Pnt4 = Base.Vector(dia/2.0+r-r*(math.cos(rad225)),0.0,-k-rtan+r*math.sin(rad225))
      Pnt5 = Base.Vector(dia/2.0,0.0,-k-rtan)
      #FreeCAD.Console.PrintMessage(&quot;last Arc point: &quot; + str(-k-rtan) + &quot;\n&quot;)
      Pnt6 = Base.Vector(dia/2.0,0.0,-a_real)

      if (SType == 'ISO2010') or (SType == 'ISO7047'): # make raised head rounding
         Pnt0arc = Base.Vector(h_arc_x,0.0,h_arc_z)
         edge1 = Part.Arc(Pnt0,Pnt0arc,Pnt1).toShape()     
      else:
         if (SType == 'ISO10642'):
            PntCham = Base.Vector(-ht,0.0,0.0)
            edgeCham1 = Part.makeLine(Pnt0,PntCham)    
            edgeCham2 = Part.makeLine(PntCham,Pnt1)    
            edge1 = Part.Wire([edgeCham1,edgeCham2]) 
         else:
            edge1 = Part.makeLine(Pnt0,Pnt1)  # make flat head
         
      edge2 = Part.makeLine(Pnt1,Pnt2)
      edge3 = Part.makeLine(Pnt2,Pnt3)
      #FreeCAD.Console.PrintMessage(&quot;before bolt points: &quot; + str(cham) + &quot;\n&quot;)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      #PntB3 = Base.Vector(0.0,0.0,-l)

      edgeArc = Part.Arc(Pnt3,Pnt4,Pnt5).toShape()     
      edgeArc1 = Part.makeLine(Pnt3,Pnt4)     
      edgeArc2 = Part.makeLine(Pnt4,Pnt5)
      edge6 = Part.makeLine(Pnt5,Pnt6)
      edgeB0 = Part.makeLine(Pnt6,PntB1)
      edgeB1 = Part.makeLine(PntB1,PntB2)
      #edgeB2 = Part.makeLine(PntB2,PntB3)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      
      aWire=Part.Wire([edge1,edge2,edge3,edgeArc,edge6, \
          edgeB0, edgeB1, edgeZ0])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit revolve: &quot; + str(dia) + &quot;\n&quot;)
      
      if (SType == 'ISO2009') or (SType == 'ISO2010'):
         #Parameter for slot-recess: dk_theo, n_min, offset, t_mean
         recess = Part.makePlane(dk_theo, n_min, \
             Base.Vector(dk_theo/2.0,-n_min/2.0,ht),Base.Vector(0.0,0.0,-1.0))
         recess = recess.extrude(Base.Vector(0.0,0.0,-t_mean))

      if (SType == 'ISO7046') or (SType == 'ISO7047'):
         recess = self.makeCross_H(cT, mH, ht)

      if SType == 'ISO10642':
         recess = self.makeAllen(s_mean, t_mean, dk_mean, 0.0 )

      head = head.cut(recess)

      if self.RealThread.isChecked():
         # cut the thread
         head = self.cutIsoThread(head, dia, P, turns, l)
         
      if SType == 'ISO10642':
         cyl = self.cutChamfer(dia, P, l)
      else:
         cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
      head = head.cut(cyl)
            
      return head

    # make ISO 4762 Allan Screw head
    # ISO 14579 Hexalobular socket head cap screws
    def makeIso4762(self, SType ='ISO4762', ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      #FreeCAD.Console.PrintMessage(&quot;der 4762Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      P, b, dk_max, da, ds_mean, e, lf, k, r, s_mean, t, v, dw, w = iso4762def[ThreadType]
      #FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso r: &quot; + str(r) + &quot;\n&quot;)
      if SType == 'ISO14579':
         tt, A, t = iso14579def[ThreadType]
         #Head Points 30° countersunk
         Pnt0 = Base.Vector(0.0,0.0,k-A/4.0) #Center Point for countersunk
         Pnt1 = Base.Vector(A/2.0,0.0,k)     #countersunk edge at head
      else:
         e_cham = 2.0 * s_mean / math.sqrt(3.0)
         #Head Points 45° countersunk
         Pnt0 = Base.Vector(0.0,0.0,k-e_cham/2.0) #Center Point for countersunk
         Pnt1 = Base.Vector(e_cham/2.0,0.0,k)     #countersunk edge at head

      
      sqrt2_ = 1.0/math.sqrt(2.0)
      #depth = s_mean / 3.0

      if (b &gt; l - 3*P):
         bmax = l-3*P
      else:
         bmax = b
      turns = round((bmax+P)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
           
      #rad30 = math.radians(30.0)
      #Head Points
      Pnt2 = Base.Vector(dk_max/2.0-v,0.0,k)   #start of fillet
      Pnt3 = Base.Vector(dk_max/2.0-v+v*sqrt2_,0.0,k-v+v*sqrt2_) #arc-point of fillet
      Pnt4 = Base.Vector(dk_max/2.0,0.0,k-v)   #end of fillet
      Pnt5 = Base.Vector(dk_max/2.0,0.0,(dk_max-dw)/2.0) #we have a chamfer here
      Pnt6 = Base.Vector(dw/2.0,0.0,0.0)           #end of chamfer
      Pnt7 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt8 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt9 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt10 = Base.Vector(dia/2.0,0.0,-a_real)        # start of thread
      
      edge1 = Part.makeLine(Pnt0,Pnt1)
      edge2 = Part.makeLine(Pnt1,Pnt2)
      edge3 = Part.Arc(Pnt2,Pnt3,Pnt4).toShape()
      edge4 = Part.makeLine(Pnt4,Pnt5)
      edge5 = Part.makeLine(Pnt5,Pnt6)
      edge6 = Part.makeLine(Pnt6,Pnt7)
      edge7 = Part.Arc(Pnt7,Pnt8,Pnt9).toShape()
      edge8 = Part.makeLine(Pnt9,Pnt10)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)  # Chamfer is made with a cut later
      PntB2 = Base.Vector(0.0,0.0,-l-P)
      #PntB3 = Base.Vector(0.0,0.0,-l)

      edgeB0 = Part.makeLine(Pnt10,PntB1)
      edgeB1 = Part.makeLine(PntB1,PntB2)
      #edgeB2 = Part.makeLine(PntB2,PntB3)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5,edge6,edge7,edge8, \
          edgeB0, edgeB1, edgeZ0])
      aFace =Part.Face(aWire)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      
      # The round part of the cutting tool, we need for the allan hex
      #PntH1 = Base.Vector(0.0,0.0,k)
      #PntH2 = Base.Vector(e_cham/2.0,0.0,k)
      #PntH3 = Base.Vector(e_cham/2.0,0.0,k-t)
      #PntH4 = Base.Vector(0.0,0.0,k-t-depth)
      
      #edgeH1 = Part.makeLine(PntH1,PntH2)
      #edgeH2 = Part.makeLine(PntH2,PntH3)
      #edgeH3 = Part.makeLine(PntH3,PntH4)
      #edgeH4 = Part.makeLine(PntH4,PntH1)
      #hWire=Part.Wire([edgeH1,edgeH2,edgeH3,edgeH4])
      #Part.show(hWire)
      #hFace =Part.Face(hWire)
      #roundtool = hFace.revolve(Base.Vector(0.0,0.0,k),Base.Vector(0.0,0.0,1.0),360)

      #extrude = self.makeHextool(s_mean, k, dk_max)
      #Part.show(extrude)
            
      #hextool = roundtool.cut(extrude)		   
      #FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)


      
      if SType == 'ISO14579':
         recess = self.makeIso10664(tt, t, k) # hexalobular recess
      else:
         recess = self.makeAllen(s_mean, t, dk_max, k )

      allenscrew = head.cut(recess)

      if self.RealThread.isChecked():
         # cut the thread
         allenscrew = self.cutIsoThread(allenscrew, dia, P, turns, l)
         
      cyl = self.cutChamfer(dia, P, l)
      #cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
      allenscrew = allenscrew.cut(cyl)
      
      return allenscrew


    # make ISO 7380 Button head Screw 
    def makeIso7380(self,ThreadType ='M6',l=25.0):
      dia=float(ThreadType.lstrip('M'))
      FreeCAD.Console.PrintMessage(&quot;der 7380-Kopf mit l: &quot; + str(l) + &quot;\n&quot;)
      P, a, da, dk, dk_mean,s_mean, t_min, r, k, e, w = iso7380def[ThreadType]
      FreeCAD.Console.PrintMessage(&quot;der Kopf mit iso r: &quot; + str(r) + &quot;\n&quot;)
      
      sqrt2_ = 1.0/math.sqrt(2.0)
      e_cham = 2.0 * s_mean / math.sqrt(3.0)
      depth = s_mean / 3.0
      
      #ak = -(k**2 + e_cham**2-dk**2)/(2*k)
      ak = -(4*k**2 + e_cham**2 - dk**2)/(8*k)
      rH = math.sqrt((dk/2.0)**2 + ak**2)
      #alpha = (math.atan((k + ak)/e_cham) + math.atan(ak/dk))/2
      alpha = (math.atan(2*(k + ak)/e_cham) + math.atan((2*ak)/dk))/2
      
      turns = round((l-1.1*P)/P) # number of thread turns
      a_real = l-turns*P  # starting point of thread
      
      FreeCAD.Console.PrintMessage(&quot;Value ak: &quot; + str(ak) + &quot;\n&quot;)
           
      #Head Points
      Pnt0 = Base.Vector(0.0,0.0,k-e_cham/2.0) #Center Point for chamfer
      Pnt1 = Base.Vector(e_cham/2.0,0.0,k)     #inner chamfer edge at head
      Pnt2 = Base.Vector(rH*math.cos(alpha),0.0,-ak + rH*math.sin(alpha)) #arc-point of button
      Pnt3 = Base.Vector(dk/2.0,0.0,0.0)   #end of fillet
      Pnt4 = Base.Vector(dia/2.0+r,0.0,0.0)     #start of fillet between head and shank
      Pnt5 = Base.Vector(dia/2.0+r-r*sqrt2_,0.0,-r+r*sqrt2_) #arc-point of fillet
      Pnt6 = Base.Vector(dia/2.0,0.0,-r)        # end of fillet
      Pnt7 = Base.Vector(dia/2.0,0.0,-a_real)        # start of thread

      FreeCAD.Console.PrintMessage(&quot;Points made, rH: &quot; + str(rH) + &quot;\n&quot;)

      
      edge1 = Part.makeLine(Pnt0,Pnt1)
      edge2 = Part.Arc(Pnt1,Pnt2,Pnt3).toShape()
      edge3 = Part.makeLine(Pnt3,Pnt4)
      edge4 = Part.Arc(Pnt4,Pnt5,Pnt6).toShape()
      edge5 = Part.makeLine(Pnt6,Pnt7)
      
      # bolt points
      PntB1 = Base.Vector(dia/2.0,0.0,-l-P)  # ISO7380 wants a chamfer here!!!
      PntB2 = Base.Vector(0.0,0.0,-l-P)      # we chamfer with the last cut!!!
      #PntB3 = Base.Vector(0.0,0.0,-l)

      edgeB0 = Part.makeLine(Pnt7,PntB1)
      edgeB1 = Part.makeLine(PntB1,PntB2)
      edgeZ0 = Part.makeLine(PntB2,Pnt0)
      
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5, \
          edgeB0, edgeB1, edgeZ0])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      #Part.show(aFace)
      head = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #Part.show(head)
      
      # The round part of the cutting tool, we need for the allan hex
      PntH1 = Base.Vector(0.0,0.0,k)
      PntH2 = Base.Vector(e_cham/2.0,0.0,k)
      PntH3 = Base.Vector(e_cham/2.0,0.0,k-t_min)
      PntH4 = Base.Vector(0.0,0.0,k-t_min-depth)
      
      edgeH1 = Part.makeLine(PntH1,PntH2)
      edgeH2 = Part.makeLine(PntH2,PntH3)
      edgeH3 = Part.makeLine(PntH3,PntH4)
      edgeH4 = Part.makeLine(PntH4,PntH1)
      hWire=Part.Wire([edgeH1,edgeH2,edgeH3,edgeH4])
      #Part.show(hWire)
      hFace =Part.Face(hWire)
      roundtool = hFace.revolve(Base.Vector(0.0,0.0,k),Base.Vector(0.0,0.0,1.0),360)

      extrude = self.makeHextool(s_mean, k, dk)
      #Part.show(extrude)
            
      hextool = roundtool.cut(extrude)		   
      FreeCAD.Console.PrintMessage(&quot;der Kopf geschnitten: &quot; + str(dia) + &quot;\n&quot;)
      buttonscrew = head.cut(hextool)

      if self.RealThread.isChecked():
         # cut the thread
         buttonscrew = self.cutIsoThread(buttonscrew, dia, P, turns, l)
         
      cyl = self.cutChamfer(dia, P, l)
      #cyl = Part.makeCylinder(dia/2.0,P,Base.Vector(0.0,0.0,-l-P),Base.Vector(0.0,0.0,1.0),360)
      buttonscrew = buttonscrew.cut(cyl)
      
      return buttonscrew



    def makeHextool(self,s_hex, k_hex, cir_hex):
      # makes a cylinder with an inner hex hole, used as cutting tool
      # create hexagon
      mhex=Base.Matrix()
      mhex.rotateZ(math.radians(60.0))
      polygon = []
      vhex=Base.Vector(s_hex/math.sqrt(3.0),0.0,0.0)
      for i in range(6):
         polygon.append(vhex)
         vhex = mhex.multiply(vhex)
      polygon.append(vhex)
      hexagon = Part.makePolygon(polygon)
      # create circle
      circ=Part.makeCircle(cir_hex/2.0)
      # Create the face with the circle as outline and the hexagon as hole
      face=Part.Face([Part.Wire(circ),hexagon])
      
      # Extrude in z to create the final cutting tool
      exHex=face.extrude(Base.Vector(0.0,0.0,k_hex))
      return exHex

    def cutTooliso261(self, d, P, angle = False):
      # P pitch of thread, d nonminal diameter of thread (floats)
      H=P*math.cos(math.radians(30)) # H depth of thread
      r=d/2.0   #Nominal radius
      
      # points for screw cutting profile
      ps1 = (r + H/16.0,0.0,-P/2.0+P/32.0)
      ps2 = (r-H*5.0/8.0,0.0,-P/8.0)
      ps3 = (r-H*17.0/24.0,0.0,0.0) # Center of Arc
      ps4 = (r-H*5.0/8.0,0.0,+P/8.0)
      ps5 =  (r+ H/16.0,0.0,+P/2.0-P/32.0)    

      edge1 = Part.makeLine(ps1,ps2)
      edge2 = Part.Arc(FreeCAD.Vector(ps2),FreeCAD.Vector(ps3),FreeCAD.Vector(ps4)).toShape()
      edge3 = Part.makeLine(ps4,ps5)
      edge4 = Part.makeLine(ps5,ps1)

      alpha_rad = math.atan(H*17.0/24.0/P)
      alpha = math.degrees(alpha_rad)
      Hyp = P/math.cos(alpha_rad) # Parameter for the last turn (angle==True)
      tuning = 0.42
      if d&gt;14:
         tuning = 0.40
    
      # This works for a diameter of 6
      # helix = Part.makeHelix(P,P,(d-H*26.0/24.0)/2.0,0) # make just one turn, length is identical to pitch
      if angle:
         helix = Part.makeHelix(Hyp,Hyp,d*tuning,alpha) # make just one turn, length is identical to pitch
      else: 
         helix = Part.makeHelix(P,P,d*0.42,0) # make just one turn, length is identical to pitch
      
      cutProfile = Part.Wire([edge1,edge2,edge3,edge4])
      makeSolid=1
      isFrenet=1
      pipe = Part.Wire(helix).makePipeShell([cutProfile],makeSolid,isFrenet)
      # Part.show(pipe)
      return pipe


    def cutIsoThread(self, rawScrew, dia_cT, P_cT, turns_cT, l_cT):
      # Parameter object=head, dia, P, turns, l
      #FreeCAD.Console.PrintMessage(&quot;vor cutTool: &quot; + str(dia_cT) + &quot;\n&quot;)
      cutTool=self.cutTooliso261(dia_cT, P_cT, False)
      #FreeCAD.Console.PrintMessage(&quot;cutTool made: &quot; + str(dia_cT) + &quot;\n&quot;)
      rotations = int(turns_cT)
      cutTool.Placement.Base = Base.Vector(0.0,0.0,-l_cT-P_cT/2.0)
      #FreeCAD.Console.PrintMessage(&quot;cutTool placed: &quot; + str(dia_cT) + &quot;\n&quot;)
      
      for i in range(rotations):
         rawScrew = rawScrew.cut(cutTool)
         cutTool.Placement.Base = Base.Vector(0.0,0.0,-l_cT-P_cT/2.0+P_cT*(i+1.0))
      lastCut = self.cutTooliso261(dia_cT, P_cT, True)
      lastCut.Placement.Base = Base.Vector(0.0,0.0,-l_cT-P_cT/2.0+P_cT*(i+1.0))
      threadedScrew = rawScrew.cut(lastCut)
      return threadedScrew

    def cutChamfer(self, dia_cC, P_cC, l_cC):
      cham_t = P_cC*math.sqrt(3.0)/2.0*17.0/24.0
      PntC0 = Base.Vector(0.0,0.0,-l_cC)
      PntC1 = Base.Vector(dia_cC/2.0-cham_t,0.0,-l_cC)
      PntC2 = Base.Vector(dia_cC/2.0,0.0,-l_cC+cham_t)
      PntC3 = Base.Vector(dia_cC/2.0,0.0,-l_cC-P_cC)
      PntC4 = Base.Vector(0.0,0.0,-l_cC-P_cC)
      
      edgeC1 = Part.makeLine(PntC0,PntC1)
      edgeC2 = Part.makeLine(PntC1,PntC2)
      edgeC3 = Part.makeLine(PntC2,PntC3)
      edgeC4 = Part.makeLine(PntC3,PntC4)
      edgeC5 = Part.makeLine(PntC4,PntC0)
      CWire=Part.Wire([edgeC1,edgeC2,edgeC3,edgeC4,edgeC5])
      CFace =Part.Face(CWire)
      cyl = CFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      return cyl



    # cross recess type H
    def makeCross_H(self, CrossType = '2', m = 6.9, h = 0.0):
      # m = diameter of cross at top of screw at reference level for penetration depth
      b, e_mean, g, f_mean, r, t1, alpha, beta = iso4757def[CrossType]
      
      rad265 = math.radians(26.5)
      rad28 = math.radians(28.0)
      tg = (m-g)/2.0/math.tan(rad265) # depth at radius of g
      t_tot = tg + g/2.0 * math.tan(rad28)
      # print 'tg: ', tg,' t_tot: ', t_tot
      hm = m / 4.0
      
      Pnt0 = Base.Vector(0.0,0.0,hm)
      Pnt1 = Base.Vector(m/2.0,0.0,hm)
      # Hier müssen noch der Radius rein
      Pnt2 = Base.Vector(m/2.0,0.0,0.0)
      Pnt3 = Base.Vector(0.0,0.0,0.0)
      Pnt3 = Base.Vector(0.0,0.0,0.0)
   
      Pnt4 = Base.Vector(g/2.0,0.0,-tg)
      Pnt5 = Base.Vector(0.0,0.0,-t_tot)
   
      edge1 = Part.makeLine(Pnt0,Pnt1)
      edge2 = Part.makeLine(Pnt1,Pnt2)
      edge3 = Part.makeLine(Pnt2,Pnt4)
      edge4 = Part.makeLine(Pnt4,Pnt5)
      edge5 = Part.makeLine(Pnt5,Pnt0)
      #FreeCAD.Console.PrintMessage(&quot;Edges made Pnt2: &quot; + str(Pnt2) + &quot;\n&quot;)
      
      aWire=Part.Wire([edge1,edge2,edge3,edge4,edge5])
      #Part.show(aWire)
      aFace =Part.Face(aWire)
      cross = aFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      #FreeCAD.Console.PrintMessage(&quot;Washer revolved: &quot; + str(dia) + &quot;\n&quot;)
   
      # the need to cut 4 corners out of the above shape.
      # Definition of corner
      # The angles 92 degrees and alpha are defined on a plane which has 
      # an angle of beta against our coordinate system.
      # The projected angles are needed for easier calculation!
      rad_alpha = math.radians(alpha/2.0)
      rad92 = math.radians(92.0/2.0)
      rad_beta = math.radians(beta)
      
      rad_alpha_p = math.atan(math.tan(rad_alpha)/math.cos(rad_beta))
      rad92_p = math.atan(math.tan(rad92)/math.cos(rad_beta))
      
      tb = tg + (g-b)/2.0 * math.tan(rad28) # depth at dimension b
      rbtop = b/2.0 + (hm + tb)*math.tan(rad_beta) # radius of b-corner at hm
      rbtot = b/2.0 - (t_tot - tb)*math.tan(rad_beta) # radius of b-corner at t_tot
      
      dre = e_mean/2.0 / math.tan(rad_alpha_p)  # delta between corner b and corner e in x direction
   
      dx = m/2.0 * math.cos(rad92_p)
      dy = m/2.0 * math.sin(rad92_p)
   
      PntC0 = Base.Vector(rbtop,0.0,hm)
      #PntC1 = Base.Vector(b/2.0,0.0,-tb)
      PntC1 = Base.Vector(rbtot,0.0,-t_tot)
      PntC2 = Base.Vector(rbtop+dre,+e_mean/2.0,hm)
      PntC3 = Base.Vector(rbtot+dre,+e_mean/2.0,-t_tot)
      PntC4 = Base.Vector(rbtop+dre,-e_mean/2.0,hm)
      PntC5 = Base.Vector(rbtot+dre,-e_mean/2.0,-t_tot)
      
      PntC6 = Base.Vector(rbtop+dre+dx,+e_mean/2.0+dy,hm)
      PntC7 = Base.Vector(rbtot+dre+dx,+e_mean/2.0+dy,-t_tot)
      PntC8 = Base.Vector(rbtop+dre+dx,-e_mean/2.0-dy,hm)
      PntC9 = Base.Vector(rbtot+dre+dx,-e_mean/2.0-dy,-t_tot)
   
      #wire_hm = Part.makePolygon([PntC0,PntC2,PntC6,PntC8,PntC4,PntC0])
      #face_hm =Part.Face(wire_hm)
      #Part.show(face_hm)
   
      wire_t_tot = Part.makePolygon([PntC1,PntC3,PntC7,PntC9,PntC5,PntC1])
      edgeC1 = Part.makeLine(PntC0,PntC1)
   
      makeSolid=1
      isFrenet=1
      corner = Part.Wire(edgeC1).makePipeShell([wire_t_tot],makeSolid,isFrenet)
      
      rot_axis = Base.Vector(0.,0.,1.0)
      sin_res = math.sin(math.radians(90)/2.0)
      cos_res = math.cos(math.radians(90)/2.0)
      rot_axis.multiply(-sin_res) # Calculation of Quaternion-Elements
   
      pl_rot = FreeCAD.Placement()
      pl_rot.Rotation = (rot_axis.x,rot_axis.y,rot_axis.z,cos_res) #Rotation-Quaternion 90° z-Axis
      
      cross = cross.cut(corner)
      cutplace = corner.Placement
   
      for i in range(3):
         cutplace.Rotation = pl_rot.Rotation.multiply(corner.Placement.Rotation)
         cross = cross.cut(corner)
         
      cross.Placement.Base = Base.Vector(0.0,0.0,h)
      return cross


    # Allen recess cutting tool
    # Parameters used: s_mean, k, t_min, dk
    def makeAllen(self, s_a = 3.0, t_a = 1.5, dk_a = 5.0, h_a = 2.0 ):
      # h_a  top height location of cutting tool 
      # s_a hex width
      # t_a dept of the allen
      # dk_a diameter needed

      e_cham = 2.0 * s_a / math.sqrt(3.0)
      depth = s_a / 3.0
      FreeCAD.Console.PrintMessage(&quot;allen tool: &quot; + str(dk_a) + &quot;\n&quot;)

      # The round part of the cutting tool, we need for the allen hex recess
      PntH1 = Base.Vector(0.0,0.0,0.0)
      PntH2 = Base.Vector(e_cham/2.0,0.0,0.0)
      PntH3 = Base.Vector(e_cham/2.0,0.0,-t_a)
      PntH4 = Base.Vector(0.0,0.0,-t_a-depth)
      
      edgeH1 = Part.makeLine(PntH1,PntH2)
      edgeH2 = Part.makeLine(PntH2,PntH3)
      edgeH3 = Part.makeLine(PntH3,PntH4)
      edgeH4 = Part.makeLine(PntH4,PntH1)
      hWire=Part.Wire([edgeH1,edgeH2,edgeH3,edgeH4])
      # Part.show(hWire)
      hFace =Part.Face(hWire)
      roundtool = hFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)

      extrude = self.makeHextool(s_a, -t_a-depth, dk_a)
            
      allen = roundtool.cut(extrude)
      allen.Placement.Base = Base.Vector(0.0,0.0,h_a)
      return allen  



    # ISO 10664 Hexalobular internal driving feature for bolts and screws
    def makeIso10664(self,RType ='T20',t_hl=3.0, h_hl = 0):
      # t_hl depth of the recess
      # h_hl top height location of Cutting tool
      A, B, Re = iso10664def[RType]
      sqrt_3 = math.sqrt(3.0)
      depth=A/4.0
   
   
      # The round part of the cutting tool, we need for the hexalobular recess
      PntH1 = Base.Vector(0.0,0.0,0.0)
      PntH2 = Base.Vector(A/2.0*1.02,0.0,0.0)
      PntH3 = Base.Vector(A/2.0*1.02,0.0,-t_hl)
      PntH4 = Base.Vector(0.0,0.0,-t_hl-depth)
      
      edgeH1 = Part.makeLine(PntH1,PntH2)
      edgeH2 = Part.makeLine(PntH2,PntH3)
      edgeH3 = Part.makeLine(PntH3,PntH4)
      edgeH4 = Part.makeLine(PntH4,PntH1)
      hWire=Part.Wire([edgeH1,edgeH2,edgeH3,edgeH4])
      # Part.show(hWire)
      hFace =Part.Face(hWire)
      roundtool = hFace.revolve(Base.Vector(0.0,0.0,0.0),Base.Vector(0.0,0.0,1.0),360)
      
      Ri = -((B+sqrt_3*(2.*Re-A))*B+(A-4.*Re)*A)/(4.*B-2.*sqrt_3*A+(4.*sqrt_3-8.)*Re)
      print '2nd  Ri last solution: ', Ri
      beta=math.acos(A/(4*Ri+4*Re)-(2*Re)/(4*Ri+4*Re))-math.pi/6
      print 'beta: ', beta
      Rh=(sqrt_3*(A/2.0-Re))/2.0
      Re_x = A/2.0 - Re + Re*math.sin(beta)
      Re_y = Re*math.cos(beta)
      Ri_y = B/4.0
      Ri_x = sqrt_3*B/4.0
      
      mhex=Base.Matrix()
      mhex.rotateZ(math.radians(60.0))
      hexlobWireList = []
      
      PntRe0=Base.Vector(Re_x,-Re_y,0.0)
      PntRe1=Base.Vector(A/2.0,0.0,0.0)
      PntRe2=Base.Vector(Re_x,Re_y,0.0)
      edge0 = Part.Arc(PntRe0,PntRe1,PntRe2).toShape()
      #Part.show(edge0)
      hexlobWireList.append(edge0)
      
      PntRi = Base.Vector(Ri_x,Ri_y,0.0)
      PntRi2 = mhex.multiply(PntRe0)
      edge1 = Part.Arc(PntRe2,PntRi,PntRi2).toShape()
      #Part.show(edge1)
      hexlobWireList.append(edge1)
   
      for i in range(5):
         #polygon.append(vhex)
         PntRe1 = mhex.multiply(PntRe1)
         PntRe2 = mhex.multiply(PntRe2)
         edge0 = Part.Arc(PntRi2,PntRe1,PntRe2).toShape()
         hexlobWireList.append(edge0)
         PntRi = mhex.multiply(PntRi)
         PntRi2 = mhex.multiply(PntRi2)
         if i == 5:
            edge1 = Part.Arc(PntRe2,PntRi,PntRe0).toShape()
         else:
            edge1 = Part.Arc(PntRe2,PntRi,PntRi2).toShape()
         hexlobWireList.append(edge1)
      hexlobWire=Part.Wire(hexlobWireList)
      #Part.show(hWire)
   
      circ=Part.makeCircle(A/2.0*1.1)
      # Create the face with the circle as outline and the hexagon as hole
      face=Part.Face([Part.Wire(circ),hexlobWire])
      
      # Extrude in z to create the final cutting tool
      cutHelo=face.extrude(Base.Vector(0.0,0.0,-t_hl-depth))
      #Part.show(cutHelo)
      hexlob = roundtool.cut(cutHelo)
      #Part.show(hexlob)
      hexlob.Placement.Base = Base.Vector(0.0,0.0,h_hl)
      return hexlob





class screw():
    d = QtGui.QWidget()
    d.ui = Ui_ScrewMaker()
    d.ui.setupUi(d)
    d.show()

&lt;/syntaxhighlight&gt;
</text>
    </revision>
  </page>
  <page>
    <title>Macro unfoldBox</title>
    <ns>0</ns>
    <id>10919</id>
    <revision>
      <id>58080</id>
      <parentid>58079</parentid>
      <timestamp>2013-12-25T18:15:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>o0fkpdb2wknyisc16a3qobtejoxeuo6</sha1>
      <text xml:space="preserve" bytes="23787">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_unfoldBox|Description=The macro allows to unfold the surfaces of a box of any shape and to draw them on a page.|Author=Hervé B.}}

&lt;!--T:2--&gt;
The macro allows to unfold the surfaces of a box of any shape and to draw them on a page.


&lt;!--T:3--&gt;
[[File:Macro_unfoldBox1.png|480px|Macro_unfoldBox]]

=== Installation === &lt;!--T:4--&gt;
Copy the code file of the macro in the directory :
*'''Linux &amp; Mac'''   : $home/.Freecad/Mod/unfoldBox.
*'''Windows''' : C:\Program Files\FreeCAD0.13
Add templates : A3_Landscape_Empty.svg  A3_Landscape.svg  A4_Landscape_Empty.svg  A4_Landscape.svg&lt;br /&gt;
Cf [http://forum.freecadweb.org/viewtopic.php?f=17&amp;t=4587 Macro for unfolding box surfaces]

=== Options === &lt;!--T:5--&gt;
# Scale manual or automatic
# Page format: a3/a4, cartridge (cf FreeCAD templates)
# Group drawings in the same page as possible.
# Sew or not the edges of the pieces.

=== Instruction for use === &lt;!--T:6--&gt;
# Select a box made with Part::Loft tool for example.
# Explode it (cf Draft menu) into plan pieces
# Select the surfaces
# Execute the macro

=== Python Code === &lt;!--T:7--&gt;
'''Macro_unfoldBox'''



&lt;syntaxhighlight&gt;
#***************************************************************************
#*                                                                         *
#*   Copyright (c) 2013 - DoNovae/Herve BAILLY &lt;hbl13@donovae.com&gt;         *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU Lesser General Public License (LGPL)    *
#*   as published by the Free Software Foundation; either version 2 of     *
#*   the License, or (at your option) any later version.                   *
#*   for detail see the LICENCE text file.                                 *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU Library General Public License for more details.                  *
#*                                                                         *
#*   You should have received a copy of the GNU Library General Public     *
#*   License along with this program; if not, write to the Free Software   *
#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
#*   USA                                                                   *
#*                                                                         *
#***************************************************************************

#####################################
# Macro unfoldBox
#     Unroll of a ruled surface
#####################################
import FreeCAD , FreeCADGui , Part, Draft, math, Drawing , PyQt4, os
from PyQt4 import QtGui,QtCore
from FreeCAD import Base
fields_l = [] 
unroll_l = [] 

#####################################
#####################################
# Functions 
#####################################
#####################################

#####################################
# Function errorDialog 
#####################################
def errorDialog(msg):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg )
    diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)
    diag.exec_()


#####################################
# Function proceed 
#####################################
def proceed():
   QtGui.qApp.setOverrideCursor(QtCore.Qt.WaitCursor)

   FreeCAD.Console.PrintMessage(&quot;===========================================\n&quot;)
   FreeCAD.Console.PrintMessage(&quot;unfoldBox: start.\n&quot;)
   try:
      file_name  = fields_l[0].text()
      scale    = float(fields_l[1].text())
      scale_auto = scale_check.isChecked()
      a3 = a3_check.isChecked()
      cartridge = cartridge_check.isChecked()
      onedrawing = onedrawing_check.isChecked()
      sewed = sewed_check.isChecked()
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.file_name: &quot;+file_name+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.scale: &quot;+str(scale)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.scale_check: &quot;+str(scale_auto)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.a3_check: &quot;+str(a3)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.cartridge: &quot;+str(cartridge)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.onedrawing: &quot;+str(onedrawing)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;unfoldBox.sewed: &quot;+str(sewed)+&quot;\n&quot;)
   except:
      msg=&quot;unfoldBox: wrong inputs...\n&quot;
      FreeCAD.Console.PrintError(msg)
      errorDialog(msg)

   QtGui.qApp.restoreOverrideCursor()
   DialogBox.hide()
   #
   # Get selection
   #
   sel=FreeCADGui.Selection.getSelection()
   faceid=0
   objnames_l=[]
   tree_l=[]
   grp=FreeCAD.activeDocument().addObject(&quot;App::DocumentObjectGroup&quot;, str(file_name)) 
   for objid in range( sel.__len__() ):
     obj=Draft.clone(sel[objid])
     grp.addObject(obj)
     objnames_l.append( [ obj , sel[objid].Name ] )

   unfold=unfoldBox()
   if sewed : 
       objnames_l=unfold.done(objnames_l)
       grp.addObject(objnames_l[0][0])
   else:
       for objid in range( objnames_l.__len__() ):
         unfold.moveXY(objnames_l[objid][0])

   id=0
   while objnames_l.__len__() &gt; 0:
       draw=Drawing2d( scale, scale_auto , a3 , cartridge , onedrawing , FreeCAD.activeDocument().Name , &quot;Page&quot;+str(id) ) 
       objnames_l=draw.all( objnames_l )
       id=id+1
       FreeCAD.Console.PrintMessage(&quot;unfoldBox: obj_l= &quot;+str(objnames_l.__len__())+&quot;\n&quot;)

   FreeCAD.Console.PrintMessage(&quot;unfoldBox: end.\n&quot;)
   FreeCAD.Console.PrintMessage(&quot;===========================================\n&quot;)


#####################################
# Function close 
#####################################
def close():
   DialogBox.hide()

#####################################
# Class unfoldBox 
#####################################
class unfoldBox:
  #####################################
  # Function __init__ 
  #####################################
  def __init__(self):
     FreeCAD.Console.PrintMessage(&quot;unfoldBox.unfoldBox\n&quot;)
     self.LIMIT=0.0001


  #####################################
  # Function done 
  #####################################
  def done(self,objnames_l):
       tree_l=self.makeTree(objnames_l)
       for id in range( objnames_l.__len__() ): 
         face=objnames_l[id]
         self.moveXY(face[0])
       self.sew( objnames_l , tree_l )
       return self.fusion(objnames_l)

    
  #####################################
  # Function makeTree 
  #####################################
  def makeTree(self,objnames_l):
     #
     # Initialisation of tree_l
     #
     tree_l=[]
     for k in range( objnames_l.__len__() ):
        facek=objnames_l[k][0]
	facek_l=[]
	for i in range( facek.Shape.Edges.__len__() ):
	   if False and type(facek.Shape.Edges[i].Curve).__name__ != 'GeomLineSegment':
             facek_l.append([-1,-1])
	   else:
	     #
	     # Search face link to the ith edge
	     #
	     vki0=facek.Shape.Edges[i].Curve.StartPoint
	     vki1=facek.Shape.Edges[i].Curve.EndPoint
	     found=False
	     for l in range( k+1 , objnames_l.__len__() ):
               facel=objnames_l[l][0]
	       for j in range( facel.Shape.Edges.__len__() ):
	            vlj0=facel.Shape.Edges[j].Curve.StartPoint
	            vlj1=facel.Shape.Edges[j].Curve.EndPoint
	            if vki0.__eq__(vlj0) and vki1.__eq__(vlj1): 
	                arelinked=False
	                isfacek=False
	                isfacel=False
	                for kk in range( k-1 ):
	                   for ii in range( tree_l[kk].__len__() ):
		              if tree_l[kk][ii][0]==k: isfacek=True
		              if tree_l[kk][ii][0]==l: isfacel=True
		           if isfacek and isfacel: 
		              arelinked=True 
		              break
			if not arelinked:
                          facek_l.append([l,j])
			  found=True
			  break
	            if found: break
	   if not found: facek_l.append([-1,-1])
        tree_l.append(facek_l) 
     return tree_l


  #####################################
  # Function sew 
  #####################################
  def sew( self,objnames_l , tree_l ):
    placed_l=[]
    for k in range( tree_l.__len__() ):
      iskplaced=False
      for p in range( placed_l.__len__() ):
         if placed_l[p] == k:
            iskplaced=True 
      if not iskplaced:placed_l.append(k)
      facek=tree_l[k]
      objk=objnames_l[k][0]
      for i in range( facek.__len__() ):
        edgeki=facek[i]
        l=edgeki[0]
        j=edgeki[1]
	islplaced=False
	for p in range( placed_l.__len__() ):
	     if placed_l[p] == l: 
	        islplaced=True 
		break
	if not islplaced: placed_l.append(l)
        if l &gt;= 0 and not ( islplaced and iskplaced ):
	  iskplaced=True
          #
  	  # Move facel.edgelj to facek.edgeki
  	  #
          objl=objnames_l[l][0]
          vki0=objk.Shape.Edges[i].Curve.StartPoint
          vki1=objk.Shape.Edges[i].Curve.EndPoint
	  vlj0=objl.Shape.Edges[j].Curve.StartPoint
	  vlj1=objl.Shape.Edges[j].Curve.EndPoint
	  vk=vki1.sub(vki0)
	  vl=vlj1.sub(vlj0)
	  alpk=vk.getAngle(vl)*180/math.pi
	  alpl=vl.getAngle(vk)*180/math.pi
          self.isPlanZ(objk)
	  if islplaced:
            Draft.move( objk , vlj0.sub(vki0) )
	  else:
            Draft.move( objl , vki0.sub(vlj0) )
          self.isPlanZ(objk)

	  if math.fabs( vk.dot(FreeCAD.Base.Vector(-vl.y,vl.x,0))) &gt; self.LIMIT:
	     if islplaced:
               Draft.rotate( objk , -alpl , vlj0 , self.vecto( vl , vk ))
	     else:
               Draft.rotate( objl , -alpk , vki0 , self.vecto( vk , vl ))
	  elif vk.dot(vl)&lt;0:
	     if islplaced:
               Draft.rotate( objk , 180 , vlj0 , self.vecto( vl , FreeCAD.Base.Vector(-vl.y,vl.x,0) ))
	     else:
               Draft.rotate( objl , 180 , vki0 , self.vecto( vk , FreeCAD.Base.Vector(-vk.y,vk.x,0)))
          #
	  # Verifications
	  #
          vki0=objk.Shape.Edges[i].Curve.StartPoint
          vki1=objk.Shape.Edges[i].Curve.EndPoint
	  vlj0=objl.Shape.Edges[j].Curve.StartPoint
	  vlj1=objl.Shape.Edges[j].Curve.EndPoint
	  vk=vki1.sub(vki0)
	  vl=vlj1.sub(vlj0)
          self.isPlanZ(objk)

	  #
	  # Flip or not
	  #
          L=max(objl.Shape.BoundBox.XMax,objk.Shape.BoundBox.XMax) - min( objl.Shape.BoundBox.XMin,objk.Shape.BoundBox.XMin) 
          W=max(objl.Shape.BoundBox.YMax,objk.Shape.BoundBox.YMax) - min( objl.Shape.BoundBox.YMin,objk.Shape.BoundBox.YMin) 
	  S1=L*W
	  if islplaced:
	    dum=0
            Draft.rotate( objk , 180 , vlj0 ,vl)
	  else:
	    dum=0
            Draft.rotate( objl , 180 , vki0 ,vk)
          L=max(objl.Shape.BoundBox.XMax,objk.Shape.BoundBox.XMax) - min( objl.Shape.BoundBox.XMin,objk.Shape.BoundBox.XMin) 
          W=max(objl.Shape.BoundBox.YMax,objk.Shape.BoundBox.YMax) - min( objl.Shape.BoundBox.YMin,objk.Shape.BoundBox.YMin) 
	  S2=L*W
	  if (S2&lt;=S1):
	     if islplaced:
	        dum=0
                Draft.rotate( objk , 180 , vlj0 ,vl)
	     else:
	        dum=0
                Draft.rotate( objl , 180 , vki0 ,vk)
          self.isPlanZ(objk)

  #####################################
  # Function isPlanZ 
  #####################################
  def isPlanZ(self,obj):
     L=obj.Shape.BoundBox.XMax - obj.Shape.BoundBox.XMin
     W=obj.Shape.BoundBox.YMax - obj.Shape.BoundBox.YMin
     H=obj.Shape.BoundBox.ZMax - obj.Shape.BoundBox.ZMin
     if H &lt; self.LIMIT:
       return True
     else:
       return False


  #####################################
  # Function fusion 
  #####################################
  def fusion(self,objnames_l):
     #
     # Init
     #
     obj_l=[]
     objna_l=[]
     obj0=objnames_l[0][0];name=objnames_l[0][1]
     objfuse=FreeCAD.activeDocument().addObject(&quot;Part::MultiFuse&quot;,&quot;Unfolding&quot;)
     for k in range( objnames_l.__len__() ):
       objk=objnames_l[k][0]
       obj_l.append(objk)
     objfuse.Shapes=obj_l
     FreeCAD.activeDocument().recompute()
     objna_l.append([objfuse,name])
     return objna_l 

  #####################################
  # Function get2Vectors 
  #####################################
  def get2Vectors(self,shape):
    v0=FreeCAD.Base.Vector(0,0,0) 
    v1=FreeCAD.Base.Vector(0,0,0) 

    edges= shape.Edges
    for id in range( edges.__len__()-1):
       va=edges[id].Curve.EndPoint.sub(edges[id].Curve.StartPoint)
       vb=edges[id+1].Curve.EndPoint.sub(edges[id+1].Curve.StartPoint)
       if vb.sub(va).Length &gt; v1.sub(v0).Length:
         v0=self.vect_copy(va);v1=self.vect_copy(vb)
    #FreeCAD.Console.PrintMessage(&quot;unfoldBox.get2Vectors: v0= {:s}, v1= {:s}\n&quot;.format(str(v0),str(v1)))
    return [ v0 , v1 ]

  #####################################
  # Function vecto 
  #   - vect1,2:  
  #   - return abs(sin) angle between 
  #     2 vectors 
  #####################################
  def vecto( self,vect1, vect2 ):
     v= FreeCAD.Base.Vector(0,0,0)
     v.x=vect1.y*vect2.z-vect1.z*vect2.y
     v.y=vect1.z*vect2.x-vect1.x*vect2.z
     v.z=vect1.x*vect2.y-vect1.y*vect2.x
     return v 


  #####################################
  # Function vect_copy 
  #   - vect:  
  #   - return copy of vector
  #####################################
  def vect_copy( self,vect):
     v= vect.add( FreeCAD.Base.Vector(0,0,0) )
     return v 


  #####################################
  # Function movexy 
  #####################################
  def moveXY( self,obj ):
     #
     # Move to origin
     #
     Draft.move( obj , FreeCAD.Base.Vector( -obj.Shape.BoundBox.XMin , -obj.Shape.BoundBox.YMin , -obj.Shape.BoundBox.ZMin ))
     #
     # Find 2 vectors defining the plan of surface
     #
     tab=self.get2Vectors( obj.Shape )
     v0=tab[0];v1=tab[1]
     norm=self.vecto(v0,v1)
     norm.normalize()
     #FreeCAD.Console.PrintMessage(&quot;unfoldBox.moveXY: norm= {:s}\n&quot;.format(str(norm)))

     #
     # Rotate
     #
     if math.fabs(norm.x) &lt; self.LIMIT and math.fabs(norm.y) &lt; self.LIMIT:
        dum=0
     elif math.fabs(norm.x) &lt; self.LIMIT and math.fabs(norm.z) &lt; self.LIMIT:
        Draft.rotate( obj , 90 , FreeCAD.Base.Vector(0,0,0) , FreeCAD.Base.Vector(1,0,0) )
     elif math.fabs(norm.y) &lt; self.LIMIT and math.fabs(norm.z) &lt; self.LIMIT:
        Draft.rotate( obj , 90 , FreeCAD.Base.Vector(0,0,0) , FreeCAD.Base.Vector(0,1,0) )
     else:
	#
	# Rotate following the angle to the normal direction of the plan
	#
        oz= FreeCAD.Base.Vector(0,0,1)
	alp=oz.getAngle(norm)*180/math.pi
        #FreeCAD.Console.PrintMessage(&quot;unfoldBox.moveXY: alp= &quot;+str(alp)+&quot;\n&quot;)
        #FreeCAD.Console.PrintMessage(&quot;unfoldBox.moveXY: vecto= {:s}\n&quot;.format(str(self.vecto(oz,norm))))
        Draft.rotate( obj , -alp , FreeCAD.Base.Vector(0,0,0) , self.vecto( oz, norm ))
     #
     # Move to z=0
     #
     Draft.move( obj , FreeCAD.Base.Vector( 0 , 0 , -obj.Shape.BoundBox.ZMin ))
     L=obj.Shape.BoundBox.XMax - obj.Shape.BoundBox.XMin
     W=obj.Shape.BoundBox.YMax - obj.Shape.BoundBox.YMin
     H=obj.Shape.BoundBox.ZMax - obj.Shape.BoundBox.ZMin


#####################################
# Class Drawing2d 
#####################################
class Drawing2d:
  #####################################
  # Function __init__ 
  #     - Scale
  #     - scale_auto
  #     - a3
  #     - cartridge
  #     - onedrawing
  #####################################
  def __init__( self,  scale , scale_auto , a3 , cartridge , onedrawing , drawing_name , page_name ):
    self.TopX_H=0
    self.TopY_H=0
    self.TopX_V=0
    self.TopY_V=0
    self.TopX_Hmax=0
    self.TopY_Hmax=0
    self.TopX_Vmax=0
    self.TopY_Vmax=0
    self.a3=a3
    self.pts_nbr=100
    self.scale=scale
    self.scale_auto=scale_auto
    self.cartridge=cartridge
    self.onedrawing=onedrawing
    if self.a3:
      self.L=420
      self.H=297
      self.marge=6
    else:
      self.L=297
      self.H=210
      self.marge=6
    self.page_name=page_name
    self.drawing_name=drawing_name

  #####################################
  # Function newPage 
  #####################################
  def newPage( self ):
    freecad_dir=os.getenv('HOME')+&quot;/.FreeCAD/Mod/unfoldBox&quot;
    page = FreeCAD.activeDocument().addObject('Drawing::FeaturePage', self.page_name )
    if self.a3:
        if self.cartridge:
           page.Template = freecad_dir+'/A3_Landscape.svg'   
        else:
           page.Template = freecad_dir+'/A3_Landscape_Empty.svg'   
    else:
        if self.cartridge:
           page.Template = freecad_dir+'/A4_Landscape.svg'   
        else:
           page.Template = freecad_dir+'/A4_Landscape_Empty.svg'   
    return page

  #####################################
  # Function all 
  #####################################
  def all( self, objnames_l ):
      obj_l=[]
      for objid in range( objnames_l.__len__() ):
        if objid == 0 or not self.onedrawing:
          page = self.newPage()
        obj_l.extend( self.done( objid , objnames_l[objid] ))
      return obj_l 




  #####################################
  # Function done 
  #####################################
  def done( self, id , objname ):
    #
    # Init
    #
    obj_l=[]
    obj=objname[0]
    objname=objname[1]
    xmax=obj.Shape.BoundBox.XMax-obj.Shape.BoundBox.XMin
    ymax=obj.Shape.BoundBox.YMax-obj.Shape.BoundBox.YMin
    if ymax &gt; xmax :
      Draft.rotate( obj , 90 )
    Draft.move( obj , FreeCAD.Base.Vector( -obj.Shape.BoundBox.XMin , -obj.Shape.BoundBox.YMin , 0))
    xmax=obj.Shape.BoundBox.XMax-obj.Shape.BoundBox.XMin
    ymax=obj.Shape.BoundBox.YMax-obj.Shape.BoundBox.YMin

    scale=min((self.L-4*self.marge)/xmax,(self.H-4*self.marge)/ymax)

    if ( not self.scale_auto ) or ( self.onedrawing ) :
       scale=self.scale


    if id == 0 or not self.onedrawing:
      #
      # Init
      #
      FreeCAD.Console.PrintMessage(&quot;Dawing2d: init\n&quot;)
      self.TopX_H=self.marge*2
      self.TopY_H=self.marge*2
      TopX=self.TopX_H
      TopY=self.TopY_H
      self.TopX_H=self.TopX_H + xmax * scale + self.marge
      self.TopY_H=self.TopY_H 
      self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
      self.TopY_Hmax=max( self.TopY_Hmax , self.TopY_H + ymax*scale+self.marge )
      self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax )
      self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
      self.TopY_V=self.marge*2
    elif self.onedrawing:
      if self.TopX_H + xmax * scale &lt; self.L :
        if self.TopY_H + ymax * scale + self.marge*2 &lt; self.H :
	   #
	   # H Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: horizontal\n&quot;)
           TopX=self.TopX_H
           TopY=self.TopY_H
           self.TopX_H=self.TopX_H + xmax * scale + self.marge
	   self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
	   self.TopY_Hmax=max( self.TopY_Hmax , self.TopY_H + ymax*scale+self.marge )
	   self.TopX_Vmax=max( self.TopX_Hmax , self.TopX_Vmax )
           self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax  )
           self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
	else:
	   #
	   # V Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: vertival\n&quot;)
           if self.TopX_V + ymax * scale +2* self.marge &lt; self.L and self.TopY_V + xmax * scale + 2*self.marge &lt; self.H :
             Draft.rotate( obj , 90 )
	     Draft.move( obj , FreeCAD.Base.Vector( -obj.BoundBox.XMin , -obj.BoundBox.YMin , 0))
             self.TopX_V=max(self.TopX_Vmax, self.TopX_V)
             TopX=self.TopX_V
             TopY=self.TopY_V
	     self.TopX_V = self.TopX_V + ymax * scale + self.marge
	     self.TopY_Vmax=max( self.TopY_Vmax , self.TopY_V + xmax * scale + self.marge )
	   else:
	     obj_l.append( [ obj , name ] )
	     return obj_l

      else:
	#
	# H Carriage return 
	#
        if ( self.TopY_Hmax + ymax * scale + self.marge*2 &lt; self.H ):   
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: carriage return: &quot;+str(self.TopY_H + ymax * scale )+&quot; &gt; &quot;+str(self.H)+&quot;\n&quot;)
           TopX=self.marge*2
           TopY=self.TopY_Hmax
           self.TopX_H=TopX + xmax * scale + self.marge
           self.TopY_H=TopY 
	   self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
	   self.TopY_Hmax=self.TopY_Hmax + ymax*scale+self.marge
           self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax )
           self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
	else:
	   #
	   # V Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: vertival: &quot;+str(self.TopX_V)+&quot; , &quot;+str(self.TopX_Vmax)+&quot;\n&quot;)
           if self.TopX_V + ymax * scale + 2*self.marge &lt; self.L and self.TopY_V + xmax * scale + 2*self.marge &lt; self.H :
             Draft.rotate( obj , 90 )
	     Draft.move( obj , FreeCAD.Base.Vector( -obj.BoundBox.XMin , -obj.BoundBox.YMin , 0))
             TopX=self.TopX_V
             TopY=self.TopY_V
	     self.TopX_V = self.TopX_V + ymax * scale + self.marge
	     self.TopY_Vmax=max( self.TopY_Vmax , self.TopY_V + xmax * scale + self.marge )
	   else:
	     obj_l.append( [ obj , name ] )
	     return obj_l

    page=FreeCAD.activeDocument().getObject(self.page_name )

    Text=FreeCAD.activeDocument().addObject('Drawing::FeatureViewAnnotation', objname+&quot;_txt&quot;)
    Text.Text=objname
    Text.X=TopX+xmax/2*scale
    Text.Y=TopY+ymax/2*scale
    Text.Scale=1

    TopView = FreeCAD.activeDocument().addObject('Drawing::FeatureViewPart','TopView')
    TopView.Source = obj
    TopView.Direction = (0.0,0.0,1)
    TopView.Rotation = 0 
    TopView.X = TopX 
    TopView.Y = TopY 
    TopView.ShowHiddenLines = True
    TopView.Scale = scale 
    page.addObject(TopView)
    page.addObject(Text)
    FreeCAD.activeDocument().recompute()
    return obj_l




#####################################
#####################################
# Dialog Box 
#####################################
#####################################
fields = [[ &quot;Group Name&quot; , &quot;Unfolding&quot; ]]
fields.append([&quot;Scale&quot;,&quot;1&quot; ])

DialogBox = QtGui.QDialog()
DialogBox.resize(250,250)
DialogBox.setWindowTitle(&quot;unfoldBox&quot;)
la = QtGui.QVBoxLayout(DialogBox)

#
# Input fields
#
for id in range(len( fields )):
  la.addWidget(QtGui.QLabel( fields[ id ][ 0 ] ))
  fields_l.append( QtGui.QLineEdit( fields[ id ][ 1 ] ))
  la.addWidget( fields_l[ id ] )

scale_check = QtGui.QCheckBox( DialogBox )
scale_check.setObjectName(&quot;checkBox&quot;)
scale_check.setChecked(True)
la.addWidget(QtGui.QLabel(&quot;Scale auto&quot;))
la.addWidget(scale_check)

a3_check = QtGui.QCheckBox( DialogBox )
a3_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;A3 Format&quot;))
a3_check.setChecked(False)
la.addWidget(a3_check)

cartridge_check = QtGui.QCheckBox( DialogBox )
cartridge_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;Cartridge&quot;))
cartridge_check.setChecked(False)
la.addWidget(cartridge_check)

onedrawing_check = QtGui.QCheckBox( DialogBox )
onedrawing_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;Group drawings in page&quot;))
onedrawing_check.setChecked(True)
la.addWidget(onedrawing_check)

sewed_check = QtGui.QCheckBox( DialogBox )
sewed_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;Sewed surfaces&quot;))
sewed_check.setChecked(True)
la.addWidget(sewed_check)

box = QtGui.QDialogButtonBox(DialogBox)

box = QtGui.QDialogButtonBox(DialogBox)
box.setOrientation(QtCore.Qt.Horizontal)
box.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
la.addWidget(box)

QtCore.QObject.connect(box, QtCore.SIGNAL(&quot;accepted()&quot;), proceed )
QtCore.QObject.connect(box, QtCore.SIGNAL(&quot;rejected()&quot;), close )
QtCore.QMetaObject.connectSlotsByName(DialogBox)
DialogBox.show()

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macro unrollRuledSurface</title>
    <ns>0</ns>
    <id>10906</id>
    <revision>
      <id>58617</id>
      <parentid>58066</parentid>
      <timestamp>2014-01-01T16:48:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>resize</comment>
      <sha1>26v5lxv1j4cj1f5fpld1npz4hamrv53</sha1>
      <text xml:space="preserve" bytes="24791">
&lt;!--T:1--&gt;
{{Macro|Icon=Text-x-python|Name=Macro_unrollRuledSurface|Description=The macro allows to unroll ruled surfaces and to draw them on a page.|Author=Hervé B.}}

&lt;!--T:2--&gt;
The macro allows to unroll ruled surfaces and to draw them on a page.


&lt;!--T:3--&gt;
[[File:Macro_unrollRuledSurface_00.png|480px|Macro_unrollRuledSurface]]

=== Installation === &lt;!--T:4--&gt;
Copy the code file of the macro in the directory :
*'''Linux &amp; Mac'''   : $home/.Freecad/Mod/UnrollRuledSurface.
*'''Windows''' : C:\Program Files\FreeCAD0.13
Add templates : A3_Landscape_Empty.svg  A3_Landscape.svg  A4_Landscape_Empty.svg  A4_Landscape.svg&lt;br /&gt;
Cf [http://forum.freecadweb.org/viewtopic.php?f=17&amp;t=4563&amp;p=35737#p35737 Macro for unrolling ruled surfaces]

=== Options === &lt;!--T:5--&gt;
* Number of generatrix
* Scale manual or automatic
* Page format: a3/a4, cartridge (cf FreeCAD templates)
* Group drawings in the same page as possible.

&lt;!--T:6--&gt;
[[File:Macro unrollRuledSurface 01.png|Macro_unrollRuledSurface]] 

=== Instruction for use === &lt;!--T:7--&gt;
# Select ruled surfaces
# Explode them (cf Draft menu)
# Select the surfaces
# Execute the macro

=== Python Code === &lt;!--T:8--&gt;
'''Macro_unrollRuledSurface.py'''



&lt;syntaxhighlight&gt;
#***************************************************************************
#*                                                                         *
#*   Copyright (c) 2013 - DoNovae/Herve BAILLY &lt;hbl13@donovae.com&gt;           *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU Lesser General Public License (LGPL)    *
#*   as published by the Free Software Foundation; either version 2 of     *
#*   the License, or (at your option) any later version.                   *
#*   for detail see the LICENCE text file.                                 *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU Library General Public License for more details.                  *
#*                                                                         *
#*   You should have received a copy of the GNU Library General Public     *
#*   License along with this program; if not, write to the Free Software   *
#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
#*   USA                                                                   *
#*                                                                         *
#***************************************************************************

#####################################
# Macro UnrollRuledSurface
#     Unroll of a ruled surface
#####################################
import FreeCAD , FreeCADGui , Part, Draft, math, Drawing , PyQt4, os
from PyQt4 import QtGui,QtCore
from FreeCAD import Base
from unrollRuledSurface.unfoldBox import unfoldBoxClass
fields_l = [] 
unroll_l = [] 


#####################################
#####################################
# Functions 
#####################################
#####################################

#####################################
# Function errorDialog 
#####################################
def errorDialog(msg):
    diag = QtGui.QMessageBox(QtGui.QMessageBox.Critical,u&quot;Error Message&quot;,msg )
    diag.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)
    diag.exec_()


#####################################
# Function proceed 
#####################################
def proceed():
   QtGui.qApp.setOverrideCursor(QtCore.Qt.WaitCursor)

   FreeCAD.Console.PrintMessage(&quot;===========================================\n&quot;)
   FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface: start.\n&quot;)
   try:
      file_name  = fields_l[0].text()
      pts_nbr    = float(fields_l[1].text())
      scale    = float(fields_l[2].text())
      scale_auto = scale_check.isChecked()
      edge0 = edge0_check.isChecked()
      a3 = a3_check.isChecked()
      cartridge = cartridge_check.isChecked()
      onedrawing = onedrawing_check.isChecked()
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.file_name: &quot;+file_name+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.pts_nbr: &quot;+str(pts_nbr)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.scale: &quot;+str(scale)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.scale_check: &quot;+str(scale_auto)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.edge0_check: &quot;+str(edge0)+&quot;&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.a3_check: &quot;+str(a3)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.cartridge: &quot;+str(cartridge)+&quot;\n&quot;)
      FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.onedrawing: &quot;+str(onedrawing)+&quot;\n&quot;)
   except:
      msg=&quot;UnrollRuledSurface: wrong inputs...\n&quot;
      FreeCAD.Console.PrintError(msg)
      errorDialog(msg)

   QtGui.qApp.restoreOverrideCursor()
   DialogBox.hide()
   unrollRS=unrollRuledSurface( file_name , pts_nbr , edge0 )
   #
   # Get selection
   #
   sel=FreeCADGui.Selection.getSelection()
   faceid=0
   objnames_l=[]
   objnames0_l=[]
   grp=FreeCAD.activeDocument().addObject(&quot;App::DocumentObjectGroup&quot;, str(file_name)+&quot;_objs&quot;) 
   for objid in range( sel.__len__() ):
     shape=sel[objid].Shape
     faces=shape.Faces
     for id in range( faces.__len__() ):
        FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.proceed: ObjId= &quot;+str(objid)+&quot; , faceId= &quot;+str( faceid )+&quot;\n&quot;)
	if faces.__len__() &gt; 1:
	  name=sel[objid].Name+&quot;.faces &quot;+str(id)
	else:
	  name=sel[objid].Name
        obj=unrollRS.unroll(faces[id],name) 
        obj.ViewObject.Visibility=False
        grp.addObject(obj)
	objnames_l.append( [ obj , name ] )
	objnames0_l.append( [ sel[objid] , name ] )
        faceid=faceid+1
   id=0
   while objnames_l.__len__() &gt; 0:
     draw=Drawing2d( scale, scale_auto , a3 , cartridge , onedrawing,str(file_name)+&quot;_page&quot;+str(id) ) 
     objnames_l=draw.all( objnames_l )
     id=id+1
     FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface: obj_l= &quot;+str(objnames_l.__len__())+&quot;\n&quot;)

   FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface: end.\n&quot;)
   FreeCAD.Console.PrintMessage(&quot;===========================================\n&quot;)

#####################################
# Function close 
#####################################
def close():
   DialogBox.hide()

#####################################
# Class unrollRuledSurface 
#     - file_name : ouput file 
#     - pts_nbr : nbr point of 
#       discretization
#####################################
class unrollRuledSurface:
  def __init__( self, file_name, pts_nbr , edge0 ):
    self.doc = FreeCAD.activeDocument()
    self.file_name = file_name
    self.pts_nbr = int(pts_nbr)
    self.edge0 = edge0
    FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.unroll - file_name: &quot;+self.file_name+&quot; , pts_nbr: &quot;+str(self.pts_nbr)+&quot;\n&quot;)


  #####################################
  # Function discretize 
  #####################################
  def discretize(self,curve):
         if type(curve).__name__=='GeomLineSegment':
            sd=curve.discretize( self.pts_nbr )
         elif type(curve).__name__=='GeomBSplineCurve':
            nodes=curve.getPoles()
            spline=Part.BSplineCurve()
            spline.buildFromPoles( nodes )
            sd=spline.discretize( self.pts_nbr )
         elif type(curve).__name__=='GeomCircle':
            sd=curve.discretize( self.pts_nbr )
	 else:
            sd=curve.discretize( self.pts_nbr )
         return sd 

  #####################################
  # Function nbpoles 
  #####################################
  def nbpoles(self,curve):
       if type(curve).__name__=='GeomLineSegment':
         nbpol=1
       elif type(curve).__name__=='GeomBSplineCurve':
         nbpol=curve.NbPoles
       elif type(curve).__name__=='GeomCircle':
         nbpol=2
       elif type(curve).__name__=='GeomBezierCurve':
         nbpol=4
       else:
         nbpol=0
       FreeCAD.Console.PrintMessage(&quot;UnrollRulrdSurface.nbpole {:s} = {:d}\n&quot;.format(type(curve).__name__,nbpol))
       return nbpol

  #####################################
  # Function unroll 
  #####################################
  # Unroll of a face 
  # composed of 2 or 4 edges
  #####################################
  def unroll(self,face,name):
    FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.unroll: Ege Nbr= &quot;+str( face.Edges.__len__())+&quot;\n&quot;)
    if face.Edges.__len__() == 2: 
       e1=face.Edges[0]
       e2=face.Edges[1]
       sd1=e1.Curve.discretize( self.pts_nbr )
       sd2=e2.Curve.discretize( self.pts_nbr )
    elif face.Edges.__len__() == 3:
       e1=face.Edges[0]
       e2=face.Edges[2]
       sd1=e1.Curve.discretize( self.pts_nbr )
       sd2=e2.Curve.discretize( self.pts_nbr )
    else:
       E0=face.Edges[0]
       E1=face.Edges[1]
       E2=face.Edges[2]
       E3=face.Edges[3]
       #
       # Choose more complexe curve as edge
       #
       nbpol0=self.nbpoles(E0.Curve)
       nbpol1=self.nbpoles(E1.Curve)
       nbpol2=self.nbpoles(E2.Curve)
       nbpol3=self.nbpoles(E3.Curve)
       FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.unroll: nbpol0= {:d}, nbpol1= {:d}, nbpol2= {:d}, nbpol3= {:d}\n&quot;.format(nbpol0,nbpol1,nbpol2,nbpol3))

       if self.edge0:
         e1=E0
         e2=E2
         v=self.discretize( E1 )
	 v0=v[0]
	 v1=v[self.pts_nbr-1]
       else:
         e1=E1
         e2=E3
         v=self.discretize( E2 )
	 v0=v[0]
	 v1=v[self.pts_nbr-1]

       sd1=self.discretize( e1 )
       sd2=self.discretize( e2 )
       #
       # Reverse if curves cross over
       #
       if not ( sd2[0].__eq__( v0 ) or not sd2[0].__eq__( v1 ) ):
          sd2.reverse()

    #
    # Create a polygon object and set its nodes 
    #
    devlxy_l=self.devlxyz( sd1 , sd2 )
    FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.unroll: size devlxy_l: &quot;+str( devlxy_l.__len__())+&quot;\n&quot;)
    p=self.doc.addObject(&quot;Part::Polygon&quot;,name) 
    p.Nodes=devlxy_l
    self.doc.recompute()
    FreeCADGui.SendMsgToActiveView(&quot;ViewFit&quot;)
    return p

  #####################################
  # Function vect_copy 
  #   - vect:  
  #   - return copy of vector
  #####################################
  def vect_copy( self, vect):
     v= vect.add( FreeCAD.Base.Vector(0,0,0) )
     return v 

  #####################################
  # Function vect_cos 
  #   - vect1,2:  
  #   - return cos angle between 
  #     2 vectors 
  #####################################
  def vect_cos( self , vect1, vect2 ):
     cosalp=vect1.dot(vect2)/vect1.Length/vect2.Length
     return cosalp
  
  #####################################
  # Function vect_sin 
  #   - vect1,2:  
  #   - return abs(sin) angle between 
  #     2 vectors 
  #####################################
  def vect_sin( self , vect1, vect2 ):
     v= FreeCAD.Base.Vector(0,0,0)
     v.x=vect1.y*vect2.z-vect1.z*vect2.y
     v.y=vect1.z*vect2.x-vect1.x*vect2.z
     v.z=vect1.x*vect2.y-vect1.y*vect2.x
     sinalp=v.Length/vect1.Length/vect2.Length
     return sinalp

  
  #####################################
  # Function devlxyz 
  #    - vect1,2: 2 edges of the shape
  #    - return dvlxy_l
  #####################################
  # unroll of a face 
  # composed of 4 edges
  #####################################
  def devlxyz( self , vect1 , vect2 ):
    #
    # Init
    #
    if ( vect1.__len__() != vect2.__len__()) or  ( vect1.__len__() != self.pts_nbr ) or ( vect2.__len__() != self.pts_nbr ):
        msg=&quot;UnrollRuledSurface.devlxyz: incompatility of sizes vect1 , vect2, pts_nbr- &quot;+str( vect1.__len__())+&quot; , &quot;+str( vect2.__len__())+&quot; , &quot;+str( self.pts_nbr )+&quot;\n&quot;
        FreeCAD.Console.PrintError(msg)
        errorDialog(msg)

    devlxy_l=[]
    devl1xy_l=[]
    devl2xy_l=[]
    errormax=0.0
    #
    # Init unroll
    # AB
    #
    a1b1=vect2[0].sub(vect1[0])
    oa1=FreeCAD.Vector(0,0,0)
    devl1xy_l.append( oa1 ) #A1
    ob1=FreeCAD.Vector(a1b1.Length,0,0)
    devl2xy_l.append( ob1 ) #B1
    #self.draw_line( devl1xy_l[0] , devl2xy_l[0] )
    #self.draw_line( vect1[0] , vect2[0] )
    for j in range( 1 , self.pts_nbr ) : 
      #
      # AB
      #
      ab=vect2[j-1].sub(vect1[j-1])
      #self.draw_line( vect1[j-1] , vect2[j-1] )
      #
      # AC
      #
      ac=vect1[j].sub(vect1[j-1])
      #
      # BD
      #
      bd=vect2[j].sub(vect2[j-1])
      #
      # CD 
      #
      cd=vect2[j].sub(vect1[j])
      #
      # A1B1 in unroll plan
      #
      a1b1=devl2xy_l[j-1].sub(devl1xy_l[j-1])
      a1b1n=self.vect_copy(a1b1)
      a1b1n.normalize()
      a1b1on=FreeCAD.Vector(-a1b1n.y,a1b1n.x,0)
      #
      # A1C1
      #
      cosalp=self.vect_cos( ab , ac )
      sinalp=self.vect_sin( ab , ac )
      a1c1=self.vect_copy(a1b1n)
      a1c1.multiply(cosalp*ac.Length)
      v=self.vect_copy(a1b1on)
      v.multiply(sinalp*ac.Length)
      a1c1=a1c1.add(v)
      #FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.alp a1b1: &quot;+str(a1b1n.getAngle(a1b1on))+&quot;\n&quot;)
      #FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.alp oc1: &quot;+str(a1b1n.getAngle(a1c1)-alp)+&quot;\n&quot;)
      #FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.length oc1: &quot;+str(a1c1.Length-ac.Length)+&quot;\n&quot;)
      oa1=self.vect_copy(devl1xy_l[j-1])
      oc1=oa1.add(a1c1)
      devl1xy_l.append(oc1)
      #
      # B1D1
      #
      cosalp=self.vect_cos( ab , bd )
      sinalp=self.vect_sin( ab , bd )
      b1d1=self.vect_copy(a1b1n)
      b1d1.multiply(cosalp*bd.Length)
      v=self.vect_copy(a1b1on)
      v.multiply(sinalp*bd.Length)
      b1d1=b1d1.add(v)
      #FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.alp od1: &quot;+str(b1a1n.getAngle(b1d1)-alp)+&quot;\n&quot;)
      #FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.length od1: &quot;+str(b1d1.Length-bd.Length)+&quot;\n&quot;)
      ob1=self.vect_copy(devl2xy_l[j-1])
      od1=ob1.add(b1d1)
      devl2xy_l.append(od1)
      #
      # Draw generatrice
      #
      #self.draw_line( devl1xy_l[j] , devl2xy_l[j] )
      c1d1=devl2xy_l[j].sub( devl1xy_l[j] )
      if ab.Length &lt;&gt; 0 :
         errormax=max(errormax,math.fabs(ab.Length-c1d1.Length)/ab.Length)
    #
    # The end
    #
    FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface Error cd,c1d1: {:.1f} %\n&quot;.format(errormax*100))

    #
    # Close polygone
    #
    devlxy_l = devl1xy_l
    devl2xy_l.reverse()
    devlxy_l.extend( devl2xy_l )
    v=FreeCAD.Vector(0,0,0)
    devlxy_l.append( v )

    return devlxy_l

    

  #####################################
  # Function draw_line 
  #   - vect0,1: two points 
  #####################################
  def draw_line( self , vect0 , vect1 ):
     l=Part.Line()
     l.StartPoint=vect0
     l.EndPoint=vect1
     self.doc.addObject(&quot;Part::Feature&quot;,&quot;Line&quot;).Shape=l.toShape()


#####################################
# Class Drawing2d 
#   -obj_l: listes of object
#   -topxh1
#   -topyh1
#   -topxv1
#   -topyv1
#   -topxvmax1
#   -topyvmax1
#   -topxvmax1
#   -topyvmax1
#####################################
class Drawing2d:
  #####################################
  # Function __init__ 
  #     - Scale
  #     - scale_auto
  #     - a3
  #     - cartridge
  #     - onedrawing
  #####################################
  def __init__( self,  scale , scale_auto , a3 , cartridge , onedrawing , page_str ):
    self.TopX_H=0
    self.TopY_H=0
    self.TopX_V=0
    self.TopY_V=0
    self.TopX_Hmax=0
    self.TopY_Hmax=0
    self.TopX_Vmax=0
    self.TopY_Vmax=0
    self.a3=a3
    self.scale=scale
    self.scale_auto=scale_auto
    self.cartridge=cartridge
    self.onedrawing=onedrawing
    if self.a3:
      self.L=420
      self.H=297
      self.marge=6
    else:
      self.L=297
      self.H=210
      self.marge=6
    self.name=page_str

  #####################################
  # Function newPage 
  #####################################
  def newPage( self ):
    freecad_dir=os.getenv('HOME')+&quot;/.FreeCAD/Mod/unrollRuledSurface&quot;
    page = FreeCAD.activeDocument().addObject('Drawing::FeaturePage', self.name )
    if self.a3:
        if self.cartridge:
           page.Template = freecad_dir+'/A3_Landscape.svg'   
        else:
           page.Template = freecad_dir+'/A3_Landscape_Empty.svg'   
    else:
        if self.cartridge:
           page.Template = freecad_dir+'/A4_Landscape.svg'   
        else:
           page.Template = freecad_dir+'/A4_Landscape_Empty.svg'   
    return page


  #####################################
  # Function all 
  #####################################
  def all( self, objname_l ):
      obj1_l=[]
      for objid in range( objname_l.__len__() ):
        if objid == 0 or not self.onedrawing:
          page = self.newPage()
        obj1_l.extend( self.done( objid , objname_l[objid] ))
      return obj1_l 

  #####################################
  # Function all 
  #####################################
  def done( self, id , objname ):
    #
    # Init
    #
    obj_l=[]
    obj=objname[0]
    objname=objname[1]
    xmax=obj.Shape.BoundBox.XMax-obj.Shape.BoundBox.XMin
    ymax=obj.Shape.BoundBox.YMax-obj.Shape.BoundBox.YMin
    if ymax &gt; xmax :
      Draft.rotate( obj , 90 )
    Draft.move( obj , FreeCAD.Base.Vector( -obj.Shape.BoundBox.XMin , -obj.Shape.BoundBox.YMin , 0))
    xmax=obj.Shape.BoundBox.XMax-obj.Shape.BoundBox.XMin
    ymax=obj.Shape.BoundBox.YMax-obj.Shape.BoundBox.YMin

    scale=min((self.L-4*self.marge)/xmax,(self.H-4*self.marge)/ymax)

    if ( not self.scale_auto ) or ( self.onedrawing ) :
       scale=self.scale

    FreeCAD.Console.PrintMessage(&quot;UnrollRuledSurface.drawing: scale= {:.2f}\n&quot;.format(scale))
     

    if id == 0 or not self.onedrawing:
      #
      # Init
      #
      FreeCAD.Console.PrintMessage(&quot;Dawing2d: init\n&quot;)
      self.TopX_H=self.marge*2
      self.TopY_H=self.marge*2
      TopX=self.TopX_H
      TopY=self.TopY_H
      self.TopX_H=self.TopX_H + xmax * scale + self.marge
      self.TopY_H=self.TopY_H 
      self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
      self.TopY_Hmax=max( self.TopY_Hmax , self.TopY_H + ymax*scale+self.marge )
      self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax )
      self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
      self.TopY_V=self.marge*2
    elif self.onedrawing:
      if self.TopX_H + xmax * scale &lt; self.L :
        if self.TopY_H + ymax * scale + self.marge*2 &lt; self.H :
	   #
	   # H Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: horizontal\n&quot;)
           TopX=self.TopX_H
           TopY=self.TopY_H
           self.TopX_H=self.TopX_H + xmax * scale + self.marge
	   self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
	   self.TopY_Hmax=max( self.TopY_Hmax , self.TopY_H + ymax*scale+self.marge )
	   self.TopX_Vmax=max( self.TopX_Hmax , self.TopX_Vmax )
           self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax  )
           self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
	else:
	   #
	   # V Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: vertival\n&quot;)
           if self.TopX_V + ymax * scale +2* self.marge &lt; self.L and self.TopY_V + xmax * scale + 2*self.marge &lt; self.H :
             Draft.rotate( obj , 90 )
	     Draft.move( obj , FreeCAD.Base.Vector( -obj.Shape.BoundBox.XMin , -obj.Shape.BoundBox.YMin , 0))
	     x0=xmax;xmax=ymax,ymax=x0
             self.TopX_V=max(self.TopX_Vmax, self.TopX_V)
             TopX=self.TopX_V
             TopY=self.TopY_V
	     self.TopX_V = self.TopX_V + xmax * scale + self.marge
	     self.TopY_Vmax=max( self.TopY_Vmax , self.TopY_V + ymax * scale + self.marge )
	   else:
	     obj_l.append( [ obj , name ] )
	     return obj_l

      else:
	#
	# H Carriage return 
	#
        if ( self.TopY_Hmax + ymax * scale + self.marge*2 &lt; self.H ):   
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: carriage return: &quot;+str(self.TopY_H + ymax * scale )+&quot; &gt; &quot;+str(self.H)+&quot;\n&quot;)
           TopX=self.marge*2
           TopY=self.TopY_Hmax
           self.TopX_H=TopX + xmax * scale + self.marge
           self.TopY_H=TopY 
	   self.TopX_Hmax=max( self.TopX_Hmax , self.TopX_H )
	   self.TopY_Hmax=self.TopY_Hmax + ymax*scale+self.marge
           self.TopX_Vmax=max( self.TopX_Vmax , self.TopX_Hmax )
           self.TopX_V=max(self.TopX_Vmax,self.TopX_V)
	else:
	   #
	   # V Add at right on same horizontal line
	   #
           FreeCAD.Console.PrintMessage(&quot;Dawing2d: vertival: &quot;+str(self.TopX_V)+&quot; , &quot;+str(self.TopX_Vmax)+&quot;\n&quot;)
           if self.TopX_V + ymax * scale + 2*self.marge &lt; self.L and self.TopY_V + xmax * scale + 2*self.marge &lt; self.H :
             Draft.rotate( obj , 90 )
	     Draft.move( obj , FreeCAD.Base.Vector( -obj.Shape.BoundBox.XMin , -obj.Shape.BoundBox.YMin , 0))
	     x0=xmax;xmax=ymax,ymax=x0
             TopX=self.TopX_V
             TopY=self.TopY_V
	     self.TopX_V = self.TopX_V + xmax * scale + self.marge
	     self.TopY_Vmax=max( self.TopY_Vmax , self.TopY_V + ymax * scale + self.marge )
	   else:
	     obj_l.append( [ obj , objname ] )
	     return obj_l

    page=FreeCAD.activeDocument().getObject(self.name )

    Text=FreeCAD.activeDocument().addObject('Drawing::FeatureViewAnnotation', objname+&quot;_txt&quot;)
    Text.Text=objname
    Text.X=TopX+xmax*scale/2
    Text.Y=TopY+ymax*scale/2
    Text.Scale=2

    TopView = FreeCAD.activeDocument().addObject('Drawing::FeatureViewPart',objname)
    TopView.Source = obj
    TopView.Direction = (0.0,0.0,1)
    TopView.Rotation = 0 
    TopView.X = TopX 
    TopView.Y = TopY 
    TopView.ShowHiddenLines = False
    TopView.Scale = scale 
    page.addObject(TopView)
    page.addObject(Text)
    FreeCAD.activeDocument().recompute()
    return obj_l




#####################################
#####################################
# Dialog Box 
#####################################
#####################################
fields = [[ &quot;File Name&quot; , &quot;UnrollSurface&quot; ]]
fields.append([&quot;Dicretization Points Nbr&quot;,&quot;100&quot; ])
fields.append([&quot;Scale&quot;,&quot;1&quot; ])

DialogBox = QtGui.QDialog()
DialogBox.resize(250,250)
DialogBox.setWindowTitle(&quot;UnrollRuledSurface&quot;)
la = QtGui.QVBoxLayout(DialogBox)
buttonGrp1 = QtGui.QButtonGroup(DialogBox)
buttonGrp2 = QtGui.QButtonGroup(DialogBox)

#
# Input fields
#
for id in range(len( fields )):
  la.addWidget(QtGui.QLabel( fields[ id ][ 0 ] ))
  fields_l.append( QtGui.QLineEdit( fields[ id ][ 1 ] ))
  la.addWidget( fields_l[ id ] )

scale_check = QtGui.QCheckBox( DialogBox )
scale_check.setObjectName(&quot;checkBox&quot;)
scale_check.setChecked(True)
la.addWidget(QtGui.QLabel(&quot;Scale auto&quot;))
la.addWidget(scale_check)

line3 = QtGui.QFrame(DialogBox)
line3.setFrameShape(QtGui.QFrame.HLine)
line3.setFrameShadow(QtGui.QFrame.Sunken)
la.addWidget(line3)

edge0_check = QtGui.QRadioButton( DialogBox )
la.addWidget(QtGui.QLabel(&quot;Generatrices from edge 1 to 4&quot; ))
edge0_check.setChecked(False)
la.addWidget(edge0_check)
edge1_check = QtGui.QRadioButton( DialogBox )
la.addWidget(QtGui.QLabel(&quot;Generatrices from edge 0 to 3&quot; ))
edge1_check.setChecked(True)
buttonGrp1.addButton(edge0_check)
buttonGrp1.addButton(edge1_check)
la.addWidget(edge1_check)

line4 = QtGui.QFrame(DialogBox)
line4.setFrameShape(QtGui.QFrame.HLine)
line4.setFrameShadow(QtGui.QFrame.Sunken)
la.addWidget(line4)

a3_check = QtGui.QRadioButton( DialogBox )
la.addWidget(QtGui.QLabel(&quot;A3&quot; ))
a3_check.setChecked(False)
la.addWidget(a3_check)
a4_check = QtGui.QRadioButton( DialogBox )
la.addWidget(QtGui.QLabel(&quot;A4&quot;))
a4_check.setChecked(True)
buttonGrp2.addButton(a3_check)
buttonGrp2.addButton(a4_check)
la.addWidget(a4_check)

cartridge_check = QtGui.QCheckBox( DialogBox )
cartridge_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;Cartridge&quot;))
cartridge_check.setChecked(False)
la.addWidget(cartridge_check)

line6 = QtGui.QFrame(DialogBox)
line6.setFrameShape(QtGui.QFrame.HLine)
line6.setFrameShadow(QtGui.QFrame.Sunken)
la.addWidget(line6)

onedrawing_check = QtGui.QCheckBox( DialogBox )
onedrawing_check.setObjectName(&quot;checkBox&quot;)
la.addWidget(QtGui.QLabel(&quot;Group drawings in page&quot;))
onedrawing_check.setChecked(True)
la.addWidget(onedrawing_check)

line7 = QtGui.QFrame(DialogBox)
line7.setFrameShape(QtGui.QFrame.HLine)
line7.setFrameShadow(QtGui.QFrame.Sunken)
la.addWidget(line7)

box = QtGui.QDialogButtonBox(DialogBox)
box.setOrientation(QtCore.Qt.Horizontal)
box.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
la.addWidget(box)

QtCore.QObject.connect(box, QtCore.SIGNAL(&quot;accepted()&quot;), proceed )
QtCore.QObject.connect(box, QtCore.SIGNAL(&quot;rejected()&quot;), close )
QtCore.QMetaObject.connectSlotsByName(DialogBox)
DialogBox.show()

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macros</title>
    <ns>0</ns>
    <id>446</id>
    <revision>
      <id>131498</id>
      <parentid>105039</parentid>
      <timestamp>2014-12-14T12:56:19Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>adding link &quot;Customize ToolsBar&quot;</comment>
      <sha1>9iqmqg1f7r99dsp2ewgvimcl3a5ndwa</sha1>
      <text xml:space="preserve" bytes="3235">
&lt;!--T:1--&gt;
Macros are a convenient way to create complex actions in FreeCAD. You simply record actions as you do them, then save that under a name, and replay them whenever you want. Since macros are in reality a list of python commands, you can also edit them, and create very complex scripts.

===How it works=== &lt;!--T:2--&gt;
If you enable console output (Menu Edit -&gt; Preferences -&gt; General -&gt; Macros -&gt; Show scripts commands in python console), you will see that in FreeCAD, every action you do, such as pressing a button, outputs a python command. Thos commands are what can be recorded in a macro. The main tool for making macros is the macros toolbar: [[Image:Macros_toolbar.jpg]]. On it you have 4 buttons: Record, stop recording, edit and play the current macro.

&lt;!--T:3--&gt;
It is very simple to use: Press the record button, you will be asked to give a name to your macro, then perform some actions. When you are done, click the stop recording button, and your actions will be saved. You can now access the macro dialog with the edit button:

&lt;!--T:4--&gt;
[[Image:Macros.jpg]]

&lt;!--T:5--&gt;
There you can manage your macros, delete, edit or create new ones from scratch. If you edit a macro, it will be opened in an editor window where you can make changes to its code.

===Example=== &lt;!--T:6--&gt;
Press the record button, give a name, let's say &quot;cylinder 10x10&quot;, then, in the [[Part Workbench]], create a cylinder with radius = 10 and height = 10. Then, press the &quot;stop recording&quot; button. In the edit macros dialog, you can see the python code that has been recorded, and, if you want, make alterations to it. To execute your macro, simply press the execute button on the toolbar while your macro is in the editor. You macro is always saved to disk, so any change you make, or any new macro you create, will always be available next time you start FreeCAD.

===Customizing=== &lt;!--T:7--&gt;
Of course it is not practical to load a macro in the editor in order to use it. FreeCAD provides much better ways to use your macro, such as assigning a keyboard shortcut to it or putting an entry in the menu. Once your macro is created, all this can be done via the Tools -&gt; Customize menu:

&lt;!--T:8--&gt;
[[Image:Macros config.jpg]]

&lt;!--T:9--&gt;
[[Customize_ToolsBar|Customize ToolsBar]] This way you can make your macro become a real tool, just like any standard FreeCAD tool. This, added to the power of python scripting within FreeCAD, makes it possible to easily add your own tools to the interface. Read on to the [[Scripting]] page if you want to know more about python scripting...

===Creating macros without recording=== &lt;!--T:10--&gt;
You can also directly copy/paste python code into a macro, without recording GUI action. Simply create a new macro, edit it, and paste your code. You can then save your macro the same way as you save a FreeCAD document. Next time you start FreeCAD, the macro will appear under the &quot;Installed Macros&quot; item of the Macro menu.

===Macros repository=== &lt;!--T:11--&gt;
Visit the [[Macros recipes]] page to pick some useful macros to add to your FreeCAD installation.

&lt;!--T:12--&gt;
{{docnav|Standard Menu|Introduction to Python}}
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Macros Rectellipse</title>
    <ns>0</ns>
    <id>2346</id>
    <revision>
      <id>107998</id>
      <parentid>89272</parentid>
      <timestamp>2014-09-01T12:29:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Macros recipes</title>
    <ns>0</ns>
    <id>695</id>
    <revision>
      <id>133374</id>
      <parentid>133373</parentid>
      <timestamp>2014-12-25T17:16:24Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>bp4qmosw39aauoi8u4azgf8yq4xjhtk</sha1>
      <text xml:space="preserve" bytes="14041">
&lt;!--T:1--&gt;
This page contains macros to add functionality to your freecad installation

== Macros == &lt;!--T:2--&gt;

=== Object creation === &lt;!--T:3--&gt;
* [[Image:Macro_makeCube.png|16px]] [[Macro makeCube|Macro MakeCube]] : creates a [http://en.wikipedia.org/wiki/Cuboid rectangular cuboid] from 4 points
* [[Macro draw2DFunction|Macro Draw2DFunction]]: draws a function described by an equation z=F(x)
* [[Macro drawParametric2Dfunction|Macro DrawParametric2Dfunction]]: Based on the above macro, but for parametric and optionally polar equations.
* [[Macro Solid Sweep|Macro Solid Sweep]]: creates a solid by sweeping a 2D profile along a trajectory previously selected in the 3D view. The 2D elements can be created through the regular tools in FreeCAD's GUI.
* [[Macro Rectellipse|Macro Rectellipse]]: creates a parametric rectellipse
* [[Image:Macro_Draft_Circle_3_Points.png|16px]] [[Macro_Make_Circle_3_Points|Macro Make Circle 3 Points]]: creates a circle on 3 selected points, the points can be objects (this example brings together the two examples below, all parameters simply settle on a graphic window).
* [[Image:Macro_Draft_Circle_3_Points.png|16px]] [[Macro Draft Circle 3 Points|Macro Draft Circle 3 Points]]: creates a circle from 3 selected points 2D orthogonal
* [[Image:Macro_Draft_Circle_3_Points.png|16px]] [[Macro Draft Circle 3 Points 3D|Macro Draft Circle 3 Points 3D]]: creates a circle from 3 selected points in the space 3D
* [[Macro screw maker1_2|Macro Screw Maker1_2]]: This macro creates a screw with or without thread, according to ISO standards ([http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=6088#p48519 screw_maker1_6.py.zip with Pyside support]). [http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=6558#p52887 (Screw Maker 1.7 - the best so far!)]  
* [[Image:Macro_BOLTS.png|16px]] [[Macro BOLTS|Macro BOLTS]]: The aim of BOLTS is to build a free and open-source standard parts library for CAD applications.
* [[Macro Ellipse-Center+2Points|Macro Ellipse Center+2Points]] Makes an ellipse by selecting three points (in this order): centre, major radius and minor radius
* [[Macro Airfoil Import &amp; Scale|Macro Airfoil Import &amp; Scale]] : Imports and scales a .dat airfoil to desired chord length.
* [[Macro 3D Parametric Curve|Macro 3D Parametric Curve]]: Draw a function described by parametric equations x(t), y(t) and z(t).
* [[Macro Line Length|Macro Line Length]]: Create a line giving coordinate XYZ length and angle to plane X Y
* [[Macro FCTexture|Macro FCTexture]]: Create a project from a bmp image to create a texture easily
* [[Image:FreeCAD Doc.png|16px]] [[Macro PartsLibrary|Macro PartsLibrary]]: Starts the Parts library browser
* [[Macro BoundingBox Tracing|Macro BoundingBox Tracing]] : This macro red trace (editable) around the BoundingBox with 6 rectangles
* [[PartDesign_InvoluteGear|Involute Gear]]: allows you to create gear. See [https://github.com/FreeCAD/FreeCAD_sf_master/blob/master/src/Mod/PartDesign/InvoluteGearFeature.py InvoluteGearFeature.py] in FreeCAD_sf_master.
* [[Macro FCCircularText|Macro FCCircularText]]: This macro create a text around a cylinder
* [[Macro Geneva Wheel|Macro Geneva Wheel]]: Allows the user to create a Geneva wheel mechanism from scratch. Must edit values within the Macro to alter the size of the object.
* [[Macro WireXYZ|Macro WireXYZ]]: This macro creates a Wire with the coordinates extracted from a file. The coordinates X Y Z are separated by a space.
* [[Macro_FCSpring_Helix_Variable|Macro FCSpring Helix Variable]]: This macro create one spring truncate, the troncature is adjustable on the all coil to choice.
* [[Macro_ArchAxisSystemRepartition|Macro Arch Axis System Repartition]]: This macro help you to create an Arch Axis System along a line with a set of parameters.

=== Object transformation === &lt;!--T:4--&gt;
* [[Macro ArrayCopy|Macro ArrayCopy]]: copies the selected object several times, on an array grid
* [[Macro FlattenWire|Macro FlattenWire]]: flattens draft wires that are not plane to their median Z coordinate
* [[Macro MeshToPart|Macro MeshToPart]]:  converts selected meshes to parts
* [[Macro JointWire|Macro JointWire]]: allows to find and joint all non connected edge to the closest non connected one using a line
* [[Macro Remove parametric history|Macro Remove parametric history]]: removes all parametric associativity from an object, leaving it as a &quot;dumb&quot; shape
* [[Macro SuperWire|Macro SuperWire]]: Forces the creation of a Wire from lines and arcs that don't necessarily touch each other. Use this if normal wire operation fails
* [[Macro HealArcs|Macro HealArcs]]: Sometimes arcs are transformed into BSplines, for example when scale operations have been applied to them. This macro recreates valid arcs from them. Useful before exporting to dxf
* [[Macro FaceToSketch|Macro FaceToSketch]]: Converts the selected Face to a single Sketch without constraints.
* [[Macro EdgesToArc|Macro EdgesToArc]]: Converts the selected Edges to a circular Arc if possible. Useful for restoring discretized arcs.
* [[Macro CloneConvert|Macro CloneConvert]]: Creates a clone of the object and the converted in the chosen position and size (inch, mm, m, µm...). The base object is recognized in mm (FreeCAd base)
* [[Macro Creating faces from a DXF file|Macro Creating faces from a DXF file]]: This macro create face from a DXF file, the &quot;Layer&quot; are recognized separate and trained in groups.

=== 3D View operations === &lt;!--T:5--&gt;
* [[Macro Rotate View|Macro Rotate View]] This macro rotates the current view by 90° to the left. Only works if you are in Top view.
* [[Macro View Rotation|Macro View Rotation]] Provides a GUI to permit rotation of view by precise amounts in all three directions.
* [[Macro Texture Objects|Macro Texture Objects]] This macro allows you to temporarily put a texture image on the selected objects.
* [[Macro Mouse Cross|Macro Mouse Cross]] This small macro turns the arrow of the mouse in a precision cross
* [[Macro Align View to Face|Macro Align ViewToFace]] This macro aligns the current view to a selected face

=== Wizards === &lt;!--T:6--&gt;
* [[Macro Automatic drawing|Macro Automatic Drawing]]: allows the user to get the view of his object in a drawing with 4 different position(front,top,iso,right). Needs some modification to be perfectly effective
* [[Macro Corner shapes wizard|Macro Corner Shapes Wizard]]: pops up a dialog asking for the dimensions of your corner piece, then creates the object in the document and creates a page view with top, front and lateral views of the piece
* [[Macro CartoucheFC|Macro CartoucheFC]]: This GUI macro to fill simply all fields of the cartridge of the plan implementation worksheet FreeCAD, the format of the date and the symbol of the projection mode adapt to the EU region or US selected.
* [[Macro CartoucheFC Full|Macro CartoucheFC Full]]: (Full field edition for this [[Misc_templates|Templates]]) This GUI macro to fill simply all fields of the cartridge '''model 1''' of the plan implementation worksheet FreeCAD, the format of the date and the symbol of the projection mode adapt to the EU region or US selected.
* [[Macro CartoucheFC 2|Macro CartoucheFC 2]]: (Full field edition for this [[Misc_templates|Templates]]) This GUI macro to fill simply all fields of the cartridge '''model 2''' of the plan implementation worksheet FreeCAD.
* [[Macro unrollRuledSurface|Macro UnrollRuledSurface]]: allows to unroll ruled surfaces and to draw them on a page.
* [[Macro unfoldBox|Macro UnfoldBox]]: allows to unfold the surfaces of a box of any shape and to draw them on a page.
* [[Macro Geneva Wheel GUI|Macro Geneva Wheel GUI]]: A GUI front end that allows the user to create a Geneva wheel mechanism from scratch.
* [[Image:Part_Prism_Apothem.svg|16px]] [[Macro Apothem Based Prism GUI|Macro Apothem Based Prism GUI]] A GUI dialog that creates an Apothem, (inradius) Based Prism from user input.

=== Utility === &lt;!--T:7--&gt;
* [[Macro MessageBox|Macro MessageBox]]: shows how to give information to the user through the GUI.
* [[Image:FCInfo.png|16px]] [[Macro_FCInfo|Macro FCInfo]] : Gives a series of information about the selected shape and can display a conversion of length, inclination (degrees, radian, grade) shape, surface, volume and the weight of the form in the density selected in various international and Anglo-Saxon  units
* [[Image:FCInfo.png|16px]] [[Macro FCInfo Alternate Linux|Macro FCInfo Alternate Linux]] : same as above, but for Linux
* [[Macro 3d Printer Slicer|Macro 3D Printer Slicer]]: Exports current design to slicer software or CAM software.
* [[Macro Delta xyz|Macro Delta xyz]] : Gives the Delta values and the distance between 2 points
* [[Macro CenterFace|Macro CenterFace]] : This macro red trace (editable) the center face (mass) with 1 point and print the coordinates
* [[Macro ObjectInfo|Macro ObjectInfo]]: User-friendly &quot;Info&quot; module created by a FreeCAD user
* [[Macro MacroMenu|MacroMenu]]: Add the macros found in the macros folder to the Macros menu of FreeCAD
* [[Image:Force_Recompute.png|16px]] [[Macro_ForceRecompute|Macro ForceRecompute]] : Forces manual recompute of model
* [[Macro Shake Sketch|Macro Shake Sketch]]: Shake a sketch in order to discover its unconstrained parts.
* [[Image:Replace_Part.png|16px]] [[Macro Replace Part in Assembly|Macro Replace Part in Assembly]]: Replaces a part (simple copy) in an &quot;Assembly&quot; with another Part (simple copy).
* [[File:WF centerObjectsPlanes.png|16px]] [[Macro WorkFeatures|Macro WorkFeatures]]: Tool utility to create plans of the axes, planes from 3 points, axes on a form, information on the coordinates of the shape and many other useful features to facilitate the creation of your project. This utility is up next in the combo view.

=== Animation=== &lt;!--T:22--&gt;
* [[Macro_crank_simul|Macro Crank Simul]] : Rotation rod and piston
* [[Macro_Spring|Macro Spring]] : simulation of one spring
* [[Macro_hinge|Macro Hinge]] : Open and close hinge
* [[Macro_Assembly|Macro Assembly]] : Assembly animate

== How to use? == &lt;!--T:8--&gt;
The above macros can easily be plugged on any FreeCAD installation
* Copy the macro python code from the corresponding macro page
* In FreeCAD, Macro-&gt;Macros-&gt;Create new, and give it a name
* Paste the python code you copied
* Hit the Save button, and restart FreeCAD
* Open the Macro manager, select your new macro and click &quot;execute&quot;
* Section animated : create animated gif that represents the object in context. Create animated gif max 500 x 500 px the site does not accept resizing animated gif otherwise it stays dead.

&lt;!--T:9--&gt;
Additionally, you can also add your new macro to a custom toolbar
* In FreeCAD, go to Tools -&gt; Customize
* In the Macros tab, add a new macro, and, if you like, define an icon and a keyboard shortcut
* In the Toolbars tab, create a new toolbar, and add your macro, taking it from the &quot;Macros&quot; category.

== Adding new macros to this repository == &lt;!--T:10--&gt;
* Create a new page, beginning its name with &quot;Macro&quot;, for example &quot;Macro_My_Excellent_Macro&quot;, this can be done simply by editing this page, and adding a new link to your macro, like this: &lt;nowiki&gt;&quot;[[Macro My Excellent Macro]]: My excellent macro&quot;&lt;/nowiki&gt;. &lt;!--T:11--&gt;
A new page (red link) will be created.
* In that page, paste the following text:

&lt;!--T:12--&gt;
(With the default icon)

 &lt;nowiki&gt;{{Macro|Icon=Text-x-python|Name=Macro_My_Excellent_Macro|Description=What my excellent macro does|Author=your username}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
(With the icon custom)

 &lt;nowiki&gt;{{Macro|Icon=Macro_My_Excellent_Macro|Name=Macro_My_Excellent_Macro|Description=What my excellent macro does|Author=your username}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
(Another language with the default icon (example &quot;/fr&quot; &quot;/de&quot; &quot;/it&quot;....))

 &lt;nowiki&gt;{{Macro/fr|Icon=Text-x-python|Name=Macro_My_Excellent_Macro|Name/fr=Macro_My_Excellent_Macro|Description=
 What my excellent macro does|Author=your username}}&lt;/nowiki&gt;

&lt;!--T:15--&gt;
(Another language with the icon custom (example &quot;/fr&quot; &quot;/de&quot; &quot;/it&quot;....))

 &lt;nowiki&gt;{{Macro/fr|Icon=Macro_My_Excellent_Macro|Name=Macro_My_Excellent_Macro|Name/fr=Macro_My_Excellent_Macro|Description=
 What my excellent macro does|Author=your username}}&lt;/nowiki&gt;

&lt;!--T:16--&gt;
*You can also [http://www.freecadweb.org/wiki/index.php?title=Special:Upload Upload ] a custom format icon'''.png'''&lt;br /&gt;'''Note that the name of the icon must have the same name as the name of the macro'''.
**example : &quot; Macro_My_Excellent_Macro &quot; '''without extension''' (the extension is given by the system), and, replace &quot; Icon='''Text-x-python''' &quot; by &quot; Icon='''Macro_My_Excellent_Macro''' &quot;
**'''Text-x-python''' [[Image:Text-x-python.png|32px]] is the default icon of the page dedicated to the Macro.

&lt;!--T:17--&gt;
* Paste your macro, and use the '''&lt;nowiki&gt;&lt;syntaxhighlight&gt; your code ...&lt;/syntaxhighlight&gt;&lt;/nowiki&gt;''' preformated text wiki tags to avoid adding spaces into your script. This will display the macro in a monospace font inside a light grey box like the example above.
* If you like, upload a .png icon with the exact same name as your macro page (ex. Macro_My_Excellent_Macro.png)
* Optionally you can add some more info on how to use your macro, tips, limitations and workaround.
* It is also interesting to include version information in your macro. This macro allows you to locate in time compared to the evolution of FreeCAD, do &quot;Menu &gt; Help &gt; About FreeCAD and click to Copy to clipboard&quot; and paste it your macro

&lt;!--T:19--&gt;
Ex:

&lt;!--T:20--&gt;
&lt;syntaxhighlight&gt;
#OS: Windows Vista
#Platform: 32-bit
#Version: 0.14.3389
#Python version: 2.6.2
#Qt version: 4.5.2
#Coin version: 3.1.0
#SoQt version: 1.4.1
#OCC version: 6.5.1
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
* Add it to the above categories, create a new category if needed.

&lt;!--T:18--&gt;
[[Category:User Documentation]]
[[Category:Repository]]
[[Category:Macros]]
[[Category:Python Code]]
[[Category:Tutorials]]

</text>
    </revision>
  </page>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>86049</id>
      <parentid>79668</parentid>
      <timestamp>2014-05-23T16:02:20Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>93rwnkdvwygop55t7sb945hl7by5p08</sha1>
      <text xml:space="preserve" bytes="4292">

&lt;!--T:1--&gt;
This is the documentation wiki of [http://www.freecadweb.org FreeCAD]. The information contained here is what forms the offline documentation shipped with FreeCAD itself. You have two main ways to browse through the documentation: by exploring user hubs, or by following the manual. It is a work in progress, written by the community of users and developers of FreeCAD. If you find information that is wrong or missing, please [[Help FreeCAD|help]]!

&lt;!--T:2--&gt;
__NOTOC__

== User hubs == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
Below are the three main entry points to the documentation, for the three broad categories of FreeCAD users:
{|border=&quot;0&quot; width=&quot;100%&quot; style=&quot;background:transparent;&quot;
|- 
| 
* [[Image:Crystal_Clear_app_display.png|22px]] [[User_hub|Users hub]]: For normal users, explains how to install and use the FreeCAD application and the contents of the different workbenches
||
* [[Image:Crystal Clear app terminal.png|22px]] [[Power_users_hub|Power users hub]]: For advanced users, explains how to use macros and python scripting to enhance your workflow
||
* [[Image:Crystal Clear app tutorials.png|22px]] [[Developer_hub|Developers hub]]: For developers, explains how to write code for the FreeCAD application, extend it or use it in your own applications
|}

== Manual == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
The FreeCAD manual is another, more linear way to present the articles contained in this wiki. It forms the backbone of the offline documentation shipped with the FreeCAD application. It is already available in several languages:

{|border=&quot;0&quot; width=&quot;100%&quot; style=&quot;background:transparent;&quot;
|- 
| 
* [[Image:Flag-en.jpg]] [[Online Help Toc|Table of contents]]
* [[Image:Flag-cn.jpg]] [[Online Help Toc/cn|目录]] - cn
* [[Image:Flag-cn.jpg]] [[Online Help Toc/zh|目录]] 中文 - zh
* [[Image:Flag-cs.jpg]] [[Online Help Toc/cs|Obsah]]
* [[Image:Flag-de.jpg]] [[Online Help Toc/de|Inhaltsverzeichnis]]
* [[Image:Flag-es.jpg]] [[Online Help Toc/es|Índice de contenidos]]
||
* [[Image:Flag-ro.jpg]] [[Online_Help_Toc/ro|Cuprins]]
* [[Image:Flag-fr.jpg]] [[Online Help Toc/fr|Table des matières]]
* [[Image:Flag-it.jpg]] [[Online Help Toc/it|Sommario]]
* [[Image:Flag-jp.jpg]] [[Online Help Toc/jp|目次]] - jp
* [[Image:Flag-jp.jpg]] [[Online Help Toc/ja|目次]] 日本語 - ja
* [[Image:Flag-pl.jpg]] [[Online Help Toc/pl|Spis Treści]]
||
* [[Image:Flag-pt.jpg]] [[Online Help Toc/pt|Tabela de conteúdos]] - pt
* [[Image:Flag-pt-br.jpg]] [[Online Help Toc/pt-br|Tabela de conteúdos]] - pt-br
* [[Image:Flag-ru.jpg]] [[Online Help Toc/ru|Содержание]]
* [[Image:Flag-sv.jpg]] [[Online Help Toc/sv|Innehallsforteckning]]  - sv
* [[Image:Flag-tr.jpg]] [[Online Help Toc/tr|İçindekiler]]
|}


== Get involved == &lt;!--T:7--&gt;

=== How to participate === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
There is plenty to do inside the FreeCAD project, if you are interested in helping us. There are programming tasks, for C++ or python programmers, but there are also many things you can do even if you cannot code, such as writing documentation, helping newcomers, translating the application and documentation, help packaging the latest release of FreeCAD for your favourite operating system, or simply help other people to discover FreeCAD around you. The [[help FreeCAD]] page describes it all with more details.

=== Source code === &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
FreeCAD can be compiled using cMake or autotools, the git link is https://github.com/FreeCAD/FreeCAD_sf_master and there are build instructions for [[CompileOnWindows|Windows]], [[CompileOnUnix|Unix/Linux]] and [[CompileOnMac|MacOSX]].

=== About the development === &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
Check the [[Development roadmap]] for news about what is being planned, the [http://www.freecadweb.org/tracker/changelog_page.php Changelog] and [http://www.freecadweb.org/tracker/roadmap_page.php Roadmap] pages on the [http://www.freecadweb.org/tracker FreeCAD tracker] to see the progresses towards next release, or the [http://www.ohloh.net/p/freecad Project statistics] for even more information about the FreeCAD codebase. All the development communication happens on the [http://forum.freecadweb.org forum], so be sure to visit it if you are interested in participating.



</text>
    </revision>
  </page>
  <page>
    <title>Main Page es</title>
    <ns>0</ns>
    <id>1212</id>
    <revision>
      <id>89295</id>
      <parentid>85651</parentid>
      <timestamp>2014-05-31T21:05:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Manipulator</title>
    <ns>0</ns>
    <id>70</id>
    <revision>
      <id>84338</id>
      <parentid>84337</parentid>
      <timestamp>2014-05-18T18:54:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>lqao158r240edexjl2ifrcnan1ksjma</sha1>
      <text xml:space="preserve" bytes="214">
&lt;!--T:1--&gt;
A '''manipulator''' is a handle that can be used to modify an object's appearance, shape, or other parameters.


&lt;!--T:2--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Manual</title>
    <ns>0</ns>
    <id>71</id>
    <revision>
      <id>111543</id>
      <parentid>107578</parentid>
      <timestamp>2014-09-28T20:35:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>added PartDesign_Workbench</comment>
      <sha1>eowunob23t5paw6itkynfdswzgglcdq</sha1>
      <text xml:space="preserve" bytes="2181">This is the FreeCAD manual. It includes the essential parts out of the [[Main Page|FreeCAD documentation wiki]]. It is made primarily to be printed as one big document, so, if you are reading this online, you might prefer to head directly to the [[Online_Help_Toc|Online help]] version, which is easier to browse.

{{:Online_Help_Startpage/en}}

= Introduction =

{{:About_FreeCAD/en}}
{{clear}}
{{:Feature_list/en}}
{{clear}}
= Installation =

== Install on Windows ==

{{:Install on Windows/en}}
{{clear}}
== Install on Unix/Linux ==

{{:Install on Unix/en}}
{{clear}}
== Install on Mac ==

{{:Install on Mac/en}}
{{clear}}
= Discovering FreeCAD =

{{:Getting_started/en}}
{{clear}}
= Working with FreeCAD =

== 3D navigation ==

{{:Mouse Model/en}}

== The FreeCAD Document ==

{{:Document structure/en}}

== Setting User Preferences ==

{{:Preferences Editor/en}}

== Customizing the Interface ==

{{:Interface Customization/en}}

== Object properties ==

{{:Property/en}}

= Working with workbenches =

{{:Workbenches/en}}

== The PartDesign workbench ==

{{:PartDesign_Workbench/en}}

== The Mesh workbench ==

{{:Mesh Module/en}}

== The Part workbench ==

{{:Part Module/en}}

== The Drawing workbench ==

{{:Drawing Module/en}}

== The Raytracing workbench ==

{{:Raytracing Module/en}}

== The Image workbench ==

{{:Image Module/en}}

== The Draft workbench ==

{{:Draft Module/en}}

= Scripting and Macros =

== Macros ==

{{:Macros/en}}

== Introduction to Python ==

{{:Introduction to Python}}
{{:FreeCAD Scripting Basics}}
{{:Mesh Scripting}}
{{:Topological data scripting}}
{{:Mesh to Part}}
{{:Scenegraph}}
{{:Pivy}}
{{:PyQt}}
{{:Scripted objects/en}}
{{:Embedding FreeCAD}}
{{:Code snippets/en}}
{{:Line drawing function}}
{{:Dialog creation}}

= Developing applications for FreeCAD =

{{:Licence}}
{{:Tracker}}
{{:CompileOnWindows/en}}
{{:CompileOnUnix/en}}
{{:CompileOnMac}}
{{:Third Party Libraries}}
{{:Third Party Tools}}
{{:Start up and Configuration}}
{{:FreeCAD Build Tool}}
{{:Module Creation}}
{{:Debugging}}
{{:Testing}}
{{:Branding}}
{{:Localisation}}
{{:Extra python modules}}

= Credits =

{{:Contributors/en}}

[[Category:Poweruser_Documentation]]</text>
    </revision>
  </page>
  <page>
    <title>Material</title>
    <ns>0</ns>
    <id>4278</id>
    <revision>
      <id>112898</id>
      <parentid>90227</parentid>
      <timestamp>2014-10-08T17:50:54Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>7mauuwpkg3i7nvcx4wmzlpngcyybkfk</sha1>
      <text xml:space="preserve" bytes="9591">
&lt;!--T:1--&gt;
This page is about the material data system in FreeCAD. 

== Abstract == &lt;!--T:2--&gt;
Since it is hard, or even impossible, to define a fixed or complete set of material properties, we go a more open way. Every object in FreeCAD which 
has to deal with material will have a Property named &quot;Material&quot;, which is a key/value list that can hold an infinite number of material properties. Since this is a very open and extensible way to deal with such data, it also holds the danger of chaos. Therefore this page defines some rules and basic properties for dealing with such material-property-maps.

== Rules == &lt;!--T:3--&gt;
Every property set has only one mandatory entry which is &quot;Name&quot;. This is the primary key of the material. The rest of the material properties are optional or can be retrieved out of a material DB. 

&lt;!--T:4--&gt;
Property names (key) are ordered by strings separated by underscores. The first substring is named by the application or standard, the following can be used to further group the properties. The Values can also be grouped by underscores, e.g. to separate different sorts of steel. Examples: 
* Name=Steel_Cast
* SpecificWeight=7.85 (at 20° in kg/mm3)
* EN10027_name = S235JR+AR (steel standard EN 10027-1)
* FEM_YoungsModulus = xx  (in  mm−1·kg·s−2)
* FEM_YoungsModulus_Z
* FEM_YoungsModulus_X

&lt;!--T:5--&gt;
Each property has a human readably description on this Material page, with links to further information (e.g. Wikipedia). 

&lt;!--T:6--&gt;
For each property a unit has to be defined, based on the FreeCAD internal unit mm-kg-s! That allows consistent usage and translation. 

&lt;!--T:7--&gt;
The key (name) and the value of the property uses only ASCII characters (7-bit). The keys are written in Camel-Case but interpreted case-insensitive.   

&lt;!--T:8--&gt;
The underscores allow later a tree view property editor/viewer which allow folding.

== Tools == &lt;!--T:9--&gt;
There are some good resources out there handle materials more easy:
* [http://www.dimensionengine.com/ Units calculater] to get your material information in the Unit needed for FreeCAD
* [http://www.matweb.com/ http://www.matweb.com/] free Material database with thousands of material values

== Material Database == &lt;!--T:10--&gt;
Given that above standard is implemented, it would be stupid to store all the properties again and again to objects. Basically we can build up a Material DB with the Name as a primary key. So if you have no special needs for your material, you just define e.g. Name=Steel and FreeCAD can retrieve all properties from that DB. Every additional property you set in the map overrides the one from the DB. 

&lt;!--T:11--&gt;
In the future we can host that DB somwhere in the Web and build up a general OpenSource material DB.

&lt;!--T:12--&gt;
At the moment I think of a compiled in mini dataset with a set of &quot;basic&quot; materials and its basic properties and a SQLite based full version.

== Material.py == &lt;!--T:13--&gt;
Since handling material-properties is a tedious work we should implement a Python front-end module calls Material.py. This will be the place to implement all kind of helper methods for material handling.
* Calculation of Mass out of Volume and Density
* Translation in different unit systems
* Calculation needed in special application (e.g. FEM)
* and anything else we don't know yet 

&lt;!--T:14--&gt;
The module should be implemented that way it can run in FreeCAD or stand alone on the command line (material-property-map has be given as python map).

== The FreeCAD material card file format == &lt;!--T:15--&gt;
Working with materials means often import/export material-definitions. There fore a file format is needed. Since we have only key/value form, we can use a simple and easy to read and parse file format. There fore the [http://en.wikipedia.org/wiki/INI_file ini-file] format is chosen. Its standardized and there are already parser available. E.g the [http://docs.python.org/2/library/configparser.html Config parser module in python]. 

&lt;!--T:16--&gt;
Each material definition reside in a file with the ending .FCMat. Some of this files are part of the FreeCAD source and get compiled into the binary. This is to save overhead in distribution and access. But also files can be placed and searched on different places to allow additional non-standard material definitions. 

=== Examples === &lt;!--T:17--&gt;
 ; last modified 1 April 2001 by John Doe
 
 Name=Steel_Cast
 Father=Steel
 Source=Some material book everyone knows (or not) ;Some comment
  
 [EN10027]
 ; steel standard EN 10027-1
 Name=S235JR+AR      
 
 [Graphic]
 Color_Emissiv = 255,255,255

== Material properties == &lt;!--T:18--&gt;
Here now the description of agreed material-properties. Feel free to add a subsection for the material-properties of you field of expertise. 

=== General === &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
{|  border=&quot;1&quot;  style=&quot;text-align:left; width:80%;&quot;
|+ General material properties
|-
! property name
! Description
! Unit/Data-Type
|-
! Name
| Unique name of the property, following the rules described above || ASCII string 7-bit
|-
! Father
| Name of the material group this material belongs to. If defined this material inherits all the father properties. That means if not defined the father properties will be used.  || ASCII string 7-bit
|-
! Description
| A placeholder for a longer description of the material || ASCII string 7-bit
|-
! SpecificWeight
| The specific weight (also known as the unit weight) is the weight per unit volume of a material. see: [http://en.wikipedia.org/wiki/Specific_weight Specific_weight]  || kg/mm^3
|-
! Vendor
| Specifies the brand or vendor of the material || ASCII string 7-bit
|-
! ProductURL
| An URL where to find more information about the material || ASCII string 7-bit
|-
! SpecificPrice
| The price per unit of this material. Units can vary a lot (USD/m³, EUR/piece, etc...) || ASCII string 7-bit
|}

&lt;!--T:21--&gt;
'''ToDos:''' add some properties with an ordering system for materials (metal, alloy, mineral, wood, ....)

=== Mechanical === &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
{|  border=&quot;1&quot;  style=&quot;text-align:left; width:80%;&quot;
|+ Material properties used in mechanical engineering 
|-
! property name
! Description
! Unit/Data-Type
|-
! YoungsModulus
| Young's modulus, also known as the tensile modulus or elastic modulus, is a measure of the stiffness of an elastic material and is a quantity used to characterize materials. See: [http://en.wikipedia.org/wiki/Young%27s_modulus Young's modulus]
|| kg*mm^-1*s^-2 (kPa) 
|-
!UltimateTensileStrength
| Des...
|| N'*mm^-2 (MPa)
|-
!Hardness
| Des...
|| 
|-
! EN-10027-1
| In case of steel material the [http://en.wikipedia.org/wiki/Steel_grades Steel grade] as defined in the [http://en.wikipedia.org/wiki/European_Committee_for_Standardization European standard] No. 10027-1. || string ASCII 7-bit 
|}

&lt;!--T:24--&gt;
'''ToDos:''' further add properties needed for mechanical design.

=== Graphical === &lt;!--T:25--&gt;
This section defines material-properties which are related to the visual appearance of the material. The  

&lt;!--T:26--&gt;
{|  border=&quot;1&quot;  style=&quot;text-align:left; width:80%;&quot;
|+ visual appearance 
|-
! property name
! Description
! Unit/Data-Type
|-
! AmbientColor
| Ambient color in the Coin3D color model|| float,float,float range: 0.0-1.0
|-
! DiffuseColor
| Diffuse color in the Coin3D color model|| float,float,float range: 0.0-1.0
|-
! SpecularColor
| Specular color in the Coin3D color model|| float,float,float range: 0.0-1.0
|-
! EmissiveColor
| Emissive color in the Coin3D color model|| float,float,float range: 0.0-1.0
|-
! Shininess
| Ambient color in the Coin3D color model|| float range: 0.0-1.0
|-
! Transparency
| Ambient color in the Coin3D color model|| float range: 0.0-1.0
|-
! VertxShader
| Vertex shader program as defined in [http://de.wikipedia.org/wiki/OpenGL_Shading_Language GlSl] || Multi line string ASCII 7-bit
|-
! FragmentShader
| Fragment shader program as defined in [http://de.wikipedia.org/wiki/OpenGL_Shading_Language GlSl] || Multi line string ASCII 7-bit
|}



=== Finite Element Method === &lt;!--T:27--&gt;
'''ToDos:''' Build up collection of FEM material properties.

=== Computational Fluid Dynamics === &lt;!--T:28--&gt;
'''ToDos:''' Build up collection of CFM material properties.

=== Architecture and BIM === &lt;!--T:29--&gt;

&lt;!--T:30--&gt;
{|  border=&quot;1&quot;  style=&quot;text-align:left; width:80%;&quot;
|+ Material properties used in architectural design 
|-
! property name
! Description
! Unit/Data-Type
|-
! StandardFormat
| The standard specification system used in this material (ASTM, MasterFormat, CSI, OmniClass, etc...)|| String ASCII 7-bit
|-
! StandardCode
| The specific code of this material in the above standard format|| String ASCII 7-bit
|-
! FireStandard
| The fire rating standard used in the material|| String ASCII 7-bit
|-
! FireClass
| The [http://en.wikipedia.org/wiki/Fire-resistance_rating fire resistance class] of the material in the above standard|| String ASCII 7-bit
|-
! ThermalConductivity
| The [http://en.wikipedia.org/wiki/Thermal_conductivity thermal conductivity (R or lambda coefficient)] that indicates the capacity to transfer heat of a material || W/m²K
|-
! SoundTransmission
| The sound transmission coefficient of this material || W/m²K
|-
! Finish
| The type of finishing/coating of this material|| String ASCII 7-bit
|-
! Color
| The color of this material|| String ASCII 7-bit
|-
! UnitsArea
| The number of units of this material necessary to fill a certain area|| String ASCII 7-bit
|}
'''ToDos:''' add sustainability &amp; LEED properties

&lt;!--T:31--&gt;
[[Category:Roadmap]]


</text>
    </revision>
  </page>
  <page>
    <title>Material data model</title>
    <ns>0</ns>
    <id>1675</id>
    <revision>
      <id>124459</id>
      <parentid>124135</parentid>
      <timestamp>2014-11-19T22:14:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>k2mlwmyrpwwabiu1r3fk9db0948dgtm</sha1>
      <text xml:space="preserve" bytes="11416">
== Purpose and principles == &lt;!--T:1--&gt;
By storing material properties in an unified data structure, one aims to ease data retrieval that can be carried out in different contexts:
* when building a finite element model
* when rendering a 3D model
* to be able to track changes in a material of a ''component'' created in FreeCAD, for [http://en.wikipedia.org/wiki/Product_Data_Management PDM] applications,
* BIM application (architecture and construction industry)

&lt;!--T:2--&gt;
To manage material properties, it is proposed to create a specific data model that will be instanced when a new material is created whithin FreeCAD.

&lt;!--T:3--&gt;
It will be possible to create a material either by defining by hand its properties through a material workbench, or by reading material properties from a file. The formats of such files is to be defined (some already exist, like MatML, STEP AP235 &amp; IGR45...).

&lt;!--T:4--&gt;
Also, it will be possible to save the material properties in a collection of files in a format still to be chosen as well. The collection of files that can be stored in a common directory will form the FreeCAD material database.

&lt;!--T:5--&gt;
Through this data model, material can be defined in FreeCAD without the need to define a ''component''.

&lt;!--T:6--&gt;
A new pointer will be created in the ''component'' data model, to link to a material that has been defined through the material data model.

== Outcome == &lt;!--T:7--&gt;
Through this material data model, it is proposed to offer a tool to manage easily material data within FreeCAD.

== Brainstorming == &lt;!--T:8--&gt;

== Organizing == &lt;!--T:9--&gt;
Different kinds of data need to be managed to describe a material.
A material data model is proposed below.
Some examples of the data that can be stored within this structure are given as well.

=== Material data model === &lt;!--T:10--&gt;
In addition to classical &quot;string&quot; attributes like a name, and a family, 3 different specific kinds of information need to be managed to describe a material in FreeCAD.
* properties: generic structure to store data describing the engineering properties of the material
* chemical composition: chemical composition of the material
* appearance: information describing how the material will look like in FreeCAD (color, shininess...)
All of these kind of information do not need necessarily to be defined for the material to exist. Finally, below is the list of attributes retained to describe a material in FreeCAD.

==== Name ==== &lt;!--T:11--&gt;
A string indicating the name of the material. It is its designation.

==== Family ==== &lt;!--T:12--&gt;
A string indicating the family of the material, such as for instance:
* metal
* plastic
* ...
Additionnally, it is proposed to create a map between the families (for instance stored in a XML file) so as to be able to browse the FreeCAD material database. 

&lt;!--T:13--&gt;
Such a map could for instance contain a tree presenting relationships between families, like:
* metal -&gt; steel -&gt; flat carbon steel -&gt; advanced high strength steel
* metal -&gt; aluminium -&gt; casted aluminium

==== Manufacturer ==== &lt;!--T:14--&gt;
A string indicating the manufacturer of the material.

==== URL ==== &lt;!--T:15--&gt;
A string indicating the web page presenting the material.

==== Properties ==== &lt;!--T:16--&gt;

===== Description ===== &lt;!--T:17--&gt;
The material data model includes a collection of properties.
The size of such a collection is not fixed and may be extended with new user-defined properties.

&lt;!--T:18--&gt;
A property contains the following attributes.
* name: string
* symbol: string to write the symbol of the properties (?in Latex math format?)
* type: &quot;scalar&quot; or &quot;array&quot;
* value: scalar (if it is a scalar)
* values: array (if it is an array)
* parameterNames: array of strings (for &quot;array&quot; type property)
* parameterValues: array of scalars (for &quot;array&quot; type property)
* unit &amp; unitMagnitude (specific object described in [[Units|Units]]) (to be noted: examples include unitMagnitude, while I am not completely sure that this should be defined at property level. The unit system may be defined at material level)
* direction: a vector indicating in which direction is to be understood the property value. The vector is itself a FreeCAD object expressed in the global coordinate system or in a user-defined coordinate system
* notes: string that can be used to describe a bit more the property like what is its meaning, how has it been measured... It can also help to understand the name of the properties

&lt;!--T:19--&gt;
Material properties will be identified thanks to their name in order to process them, i.e. for instance writing the Yield strength in a finite element model. In order to ease material data creation within FreeCAD, a standardized list of property names along with their standard units will be proposed to the user. Nonetheless, the user is free to create new properties, with new names, new units, and so on...

&lt;!--T:20--&gt;
Below is proposed the dictionary of standard properties. Feel free to add new ones.

 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &lt;MatPropDictionary LastUpdate=&quot;2011-10-24T09:00:00&quot;&gt;
    &lt;Property Name=&quot;Yield Stress&quot; Symbol=&quot;YS&quot; UnitSignature=&quot;-1 1 -2 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Ultimate tensile strength&quot; Symbol=&quot;UTS&quot; UnitSignature=&quot;-1 1 -2 0 0 0 0&quot; /&gt;	
    &lt;Property Name=&quot;Mean Lankford coefficient&quot; Symbol=&quot;r_{mean}&quot; UnitSignature=&quot;0 0 0 0 0 0 0&quot; /&gt;        
    &lt;Property Name=&quot;Hardening coefficient&quot; Symbol=&quot;n&quot; UnitSignature=&quot;0 0 0 0 0 0 0&quot; /&gt;     
    &lt;Property Name=&quot;Strain hardening&quot; UnitSignature=&quot;-1 1 -2 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Elastic modulus&quot; Symbol=&quot;E&quot; UnitSignature=&quot;-1 1 -2 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Density&quot; Symbol=&quot;\rho&quot; UnitSignature=&quot;-3 1 0 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Poisson coefficient&quot; Symbol=&quot;\nu&quot; UnitSignature=&quot;0 0 0 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Uniform elongation&quot; Symbol=&quot;UE&quot; UnitSignature=&quot;0 0 0 0 0 0 0&quot; /&gt;
    &lt;Property Name=&quot;Total elongation&quot; Symbol=&quot;TE&quot; UnitSignature=&quot;0 0 0 0 0 0 0&quot; /&gt;
 &lt;/MatPropDictionary&gt;

&lt;!--T:21--&gt;
Notes: &quot;Mean Lankford coefficient is representative of the anisotropy of a thin metal sheet.&quot; &quot;The Hardening coefficient is representative of the hardening capacity of a metal. It appears in Hollomon formula that can relates cumulated plastic strain to stress.&quot;

===== Example 1: Cost per tonne ===== &lt;!--T:22--&gt;
A first example is given below to show how a ''Cost per tonne'' property can be stored.
* name: Cost per tonne
* symbol: not applicable
* type: scalar
* value: 500
* values: not applicable (but could be: for instance different cost values per different countries)
* parameterNames: not applicable (but could be: for instance different cost values for different countries)
* parameterValues: not applicable (but could be: for instance different cost values for different countries)
* parameterUnits: not applicable
* unit &amp; unitMagnitude: [[ 0, -3, 0, 0, 0, 0, 0], 1]
** meaning m^(-3) (more details about unit &amp; unit system specifications in [[Units|Units]] page)
* direction: not applicable

===== Example 2: Yield strength ===== &lt;!--T:23--&gt;
A second example is given below to show how the ''Yield strength'' property can be stored.
* name: Yield stress
* symbol: YS
* type: scalar
* value: 450
* values: not applicable
* parameterNames: not applicable
* parameterValues: not applicable
* parameterUnits: not applicable
* unit &amp; unitMagnitude: [[ -1, 1, -2, 0, 0, 0, 0], 1]
** meaning Pa (more details about unit &amp; unit system specifications in [[Units|Units]] page)
* direction: [ 1, 0, 0] in global coordinate system
** given a steel sheet, this means that the ''Yield strength'' given is expressed in ''x'' direction, that can be for instance the rolling direction

===== Example 3: Strain hardening ===== &lt;!--T:24--&gt;
A third example is given below to show how the ''Strain hardening'' property can be stored.
This is a more complex example because ''Strain hardening'' is represented by a serie of curves.
The curves represent the stress evolution with respect to plastic strain.
3 curves have been obtained at different strain rates.
All curves have been obtained at room temperature.

&lt;!--T:25--&gt;
* name: Strain hardening
* symbol: not applicable
* type: scalar
* value: not applicable
* values: [[0., 100, 150, 200], [ 0., 120, 180, 210], [ 0., 140, 190, 220]]
* parameterNames: [Plastic strain, Strain rate, Temperature]
* parameterValues:
** The 1st three arrays represents plastic strain evolutions
** The 2nd serie of three arrays represents the strain rate evolutions. A single value is given in each of the arrays, meaning that the strain rate doesn't change for each the corresponding stress evolutions.
** The last serie of a single array represents temperature evolutions. This time a single value is written in a single array, meaning that temperature doesn't change for a given array of stress, and this applies for all stress arrays.
**#1st serie: [[[0. , 0.4, 0.8, 1], [ 0, 0.4, 0.8, 1], [ 0, 0.4, 0.8, 1]],
**#2nd serie: [[0.]              , [100]            , [1000.]          ],
**#3rd serie: [[18.]                                                   ],]
* parameterUnits  &amp; parameterUnitMagnitudes: [[[ 0, 0, 0, 0, 0, 0, 0], 1], [[ 0, 0, -1, 0, 0, 0, 0], 1], [[ 0, 0, 0, 0, 1, 0, 0], 1]]
** meaning none, s^(-1) and, K (more details about unit &amp; unit system specifications in [[Units]] page)
* unit &amp; unitMagnitude: [[ -1, 1, -2, 0, 0, 0, 0], 1]
** meaning Pa (more details about unit &amp; unit system specifications in [[Units]] page)
* direction: not applicable

==== Chemical composition ==== &lt;!--T:26--&gt;
[Yet to be filled up]

==== Appearance ==== &lt;!--T:27--&gt;
[Yet to be filled up]

==== Notes ==== &lt;!--T:28--&gt;
A string where the user can add its own comments about the material.

=== Material data model applications: some examples === &lt;!--T:29--&gt;

===== Example 1: Brick masonry ===== &lt;!--T:30--&gt;

====== Name ====== &lt;!--T:31--&gt;
Brick masonry

====== Family ====== &lt;!--T:32--&gt;
?string?

====== Properties ====== &lt;!--T:33--&gt;
*''Weight'': 1kg/m³
*''Cost per cubic meter'': 1€/m³
*''Number of bricks por base unit'': ?float?
*''Volume of mortar por base unit'': ?float?
*''Mortar type'': ?string?
*''Brick type'': ?string?
*''Fire resistance class'': ?string?
*''Thermal conductivity'': 1 W/mK

====== Manufacturer ====== &lt;!--T:34--&gt;
?string?

====== URL ====== &lt;!--T:35--&gt;
?string?

====== Notes ====== &lt;!--T:36--&gt;
Notes about maintainance, special cares to be taken, etc...

&lt;!--T:37--&gt;
CSI/MasterFormat code (as there are several systems used in the industry which give to all material a special code, I propose to enter it in the notes, because it doesn't appear to me relevant create a specific properties that we won't be able to name exactly).

== Next actions == &lt;!--T:38--&gt;
* Define a set of names for classical properties, that we can define in a dictionary (FreeCAD configuration file). These properties will most notably be re-used in other contexts like the FEM module.
* Fill up ''Chemical composition'' section.
* Fill up ''Appearance'' section.
* Define a set of default chemical components.
* Review by other people.
* Implement in C++ data model and ability to write/read in a file (ISO 10303-45 through SCL?).
* Implement XML dictionaries to store default properties, with their units, that can be used by the user.
* Implement python GUI to handle this data.

&lt;!--T:39--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Matrix API</title>
    <ns>0</ns>
    <id>737</id>
    <revision>
      <id>133202</id>
      <parentid>122989</parentid>
      <timestamp>2014-12-23T21:00:28Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>lxomara965uj5ykw5236fgpvk8yvqln</sha1>
      <text xml:space="preserve" bytes="2666">
&lt;!--T:1--&gt;
4x4 Matrixes are used everywhere throughout FreeCAD and can be created by one of the following manners:

{{Code|code=
m=FreeCAD.Matrix()          # m = the [http://en.wikipedia.org/wiki/Identity_matrix identity matrix]
m=FreeCAD.Base.Matrix()
print m.A21()               # print m[1][0]
}}



&lt;!--T:2--&gt;
{{APIFunction|A| | |all the matrix elements.}}
{{APIFunction|A11| | |a matrix element.}}
{{APIFunction|A12| | |a matrix element.}}
{{APIFunction|A13| | |a matrix element.}}
{{APIFunction|A14| | |a matrix element.}}
{{APIFunction|A21| | |a matrix element.}}
{{APIFunction|A22| | |a matrix element.}}
{{APIFunction|A23| | |a matrix element.}}
{{APIFunction|A24| | |a matrix element.}}
{{APIFunction|A31| | |a matrix element.}}
{{APIFunction|A32| | |a matrix element.}}
{{APIFunction|A33| | |a matrix element.}}
{{APIFunction|A34| | |a matrix element.}}
{{APIFunction|A41| | |a matrix element.}}
{{APIFunction|A42| | |a matrix element.}}
{{APIFunction|A43| | |a matrix element.}}
{{APIFunction|A44| | |a matrix element.}}
{{APIFunction|determinant| |Computes the [http://en.wikipedia.org/wiki/Determinant determinant] of the matrix|a number.}}
{{APIFunction|inverse| |[http://en.wikipedia.org/wiki/Inverse_matrix Inverts] this matrix, if possible|nothing.}}
{{APIFunction|invert| |Returns the [http://en.wikipedia.org/wiki/Inverse_matrix inverse] of this matrix, if possible|a Matrix}}
{{APIFunction|move|Vector|Makes this matrix a [http://en.wikipedia.org/wiki/Translation_%28geometry%29 translation] matrix|nothing.}}
{{APIFunction|multiply|Matrix or Vector|Returns the [http://en.wikipedia.org/wiki/Cross_product cross product] of a matrix or vector with this matrix|a Matrix}}
{{APIFunction|rotateX|Float(radians)|Makes this matrix a [http://en.wikipedia.org/wiki/Rotation_%28mathematics%29 rotation] about X transform|nothing.}}
{{APIFunction|rotateY|Float(radians)|Makes this matrix a [http://en.wikipedia.org/wiki/Rotation_%28mathematics%29 rotation] about Y transform|nothing.}}
{{APIFunction|rotateZ|Float(radians)|Makes this matrix a [http://en.wikipedia.org/wiki/Rotation_%28mathematics%29 rotation] about Z transform|nothing.}}
{{APIFunction|scale|Vector|Makes this matrix a [http://en.wikipedia.org/wiki/Scaling_matrix scaling transform]|nothing.}}
{{APIFunction|transform|Vector, Matrix|Makes this matrix a [http://en.wikipedia.org/wiki/Transformation_matrix transformation matrix] based on Vector and Matrix|nothing. }}
{{APIFunction|unity| |Makes this matrix the [http://en.wikipedia.org/wiki/Identity_matrix identity matrix]|nothing.}}

&lt;!--T:30--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>MenuMacro</title>
    <ns>0</ns>
    <id>3970</id>
    <revision>
      <id>88410</id>
      <parentid>86285</parentid>
      <timestamp>2014-05-29T22:52:57Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>7htegsza0a7abkv68vp99ucnpun73cc</sha1>
      <text xml:space="preserve" bytes="576">
==Menu Macro== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[File:Std DlgMacroRecord.png|32px|text-top=Std DlgMacroRecord|link=Std DlgMacroRecord]]&amp;nbsp;&amp;nbsp;&amp;nbsp;
[[File:Std DlgMacroStop.png|32px|text-top=Std DlgMacroStop|link=Std DlgMacroStop]]&amp;nbsp;&amp;nbsp;&amp;nbsp;
[[File:Std DlgMacroExecute.png|32px|text-top=Std DlgMacroExecute|link=Std DlgMacroExecute]]&amp;nbsp;&amp;nbsp;&amp;nbsp;
[[File:Std DlgMacroExecuteDirect.png|32px|text-top=Std DlgMacroExecuteDirect|link=Std DlgMacroExecuteDirect]]&amp;nbsp;&amp;nbsp;&amp;nbsp;

&lt;!--T:3--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Mesh API</title>
    <ns>0</ns>
    <id>770</id>
    <revision>
      <id>133203</id>
      <parentid>129148</parentid>
      <timestamp>2014-12-23T21:01:25Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>nr1okwengk7kietgrxdll73chrf3fj0</sha1>
      <text xml:space="preserve" bytes="6335">
&lt;!--T:1--&gt;
The Mesh objects can be manipulated by adding new facets, deleting facets, importing from an STL file, transforming the mesh and much more. For a complete overview of what can be done see also the [[Mesh Module]] documentation. A mesh object cannot be added to an existing document directly. Therefore the document must create an object with a property class that supports meshes. Example:

&lt;!--T:2--&gt;
{{Code|code=
m = Mesh.Mesh()
... # Manipulate the mesh
d = FreeCAD.activeDocument() # Get a reference to the actie document
f = d.addObject(&quot;Mesh::Feature&quot;, &quot;Mesh&quot;) # Create a mesh feature
f.Mesh = m # Assign the mesh object to the internal property
d.recompute()
}}


&lt;!--T:3--&gt;
{{APIFunction|addFacet|Facet|Adds a facet to the mesh| }}
{{APIFunction|addFacets|list|Adds a list of facets to the mesh| }}
{{APIFunction|addMesh|Mesh|Combines this mesh with another mesh.| }}
{{APIFunction|clear| |Clears the mesh| }}
{{APIFunction|coarsen| |Coarsens the mesh| }}
{{APIFunction|collapseEdge|Edge|Removes an edge and both facets that share this edge| }}
{{APIFunction|collapseFacet|Facet|Removes a facet| }}
{{APIFunction|collapseFacets|list|Removes a list of facets| }}
{{APIFunction|copy| |Creates a copy of this mesh|a Mesh object}}
{{APIFunction|countComponents| |Get the number of topological independent areas|an integer}}
{{APIFunction|countNonUniformOrientedFacets| |Get the number of wrong oriented facets|an integer}}
{{APIFunction|countSegments| |Get the number of segments which may also be 0|an integer}}
{{APIFunction|crossSections| |Get cross-sections of the mesh through several planes| }}
{{APIFunction|difference|Mesh|Difference of this and the given mesh object.| }}
{{APIFunction|fillupHoles| |Fillup holes| }}
{{APIFunction|fixDeformations| |Repair deformed facets| }}
{{APIFunction|fixDegenerations| |Remove degenerated facets| }}
{{APIFunction|fixIndices| |Repair any invalid indices| }}
{{APIFunction|fixSelfIntersections| |Repair self-intersections| }}
{{APIFunction|flipNormals| |Flip the mesh normals| }}
{{APIFunction|foraminate| |Get a list of facet indices and intersection points| }}
{{APIFunction|getPlanes| |Get all planes of the mesh as segment. In the worst case each triangle can be regarded as single plane if none of its neighbors is coplanar.| }}
{{APIFunction|getSegment|integer|Get a list of facet indices that describes a segment| }}
{{APIFunction|getSeparateComponents| |Returns a list containing the different components (separated areas) of the mesh as separate meshes|a list}}
{{APIFunction|harmonizeNormals| |Adjust wrong oriented facets| }}
{{APIFunction|hasNonManifolds| |Check if the mesh has non-manifolds|a boolean}}
{{APIFunction|hasNonUniformOrientedFacets| |Checks if the mesh has facets with inconsistent orientation| }}
{{APIFunction|hasSelfIntersections| |Check if the mesh intersects itself| }}
{{APIFunction|inner| |Get the part inside of the intersection| }}
{{APIFunction|insertVertex|Vertex|Inserts a vertex into a facet| }}
{{APIFunction|intersect|Mesh|Intersection of this and the given mesh object.| }}
{{APIFunction|isSolid| |Check if the mesh is a solid| }}
{{APIFunction|meshFromSegment| |Create a mesh from segment| }}
{{APIFunction|nearestFacetOnRay|tuple, tuple|Get the index and intersection point of the nearest facet to a ray. The first parameter is a tuple of three floats the base point of the ray, the second parameter is ut uple of three floats for the direction. The result is a dictionary with an index and the intersection point or an empty dictionary if there is no intersection.|a dictionary}}
{{APIFunction|offset|float|Move the point along their normals| }}
{{APIFunction|offsetSpecial|float|Move the point along their normals| }}
{{APIFunction|optimizeEdges| |Optimize the edges to get nicer facets| }}
{{APIFunction|optimizeTopology| |Optimize the edges to get nicer facets| }}
{{APIFunction|outer| |Get the part outside the intersection| }}
{{APIFunction|printInfo| |Get detailed information about the mesh| }}
{{APIFunction|read| |Read in a mesh object from file.| }}
{{APIFunction|refine| |Refine the mesh| }}
{{APIFunction|removeComponents|integer|Remove components with less or equal to number of given facets| }}
{{APIFunction|removeDuplicatedFacets| |Remove duplicated facets| }}
{{APIFunction|removeDuplicatedPoints| |Remove duplicated points| }}
{{APIFunction|removeFacets|list|Remove a list of facet indices from the mesh| }}
{{APIFunction|removeFoldsOnSurface| |Remove folds on surfaces| }}
{{APIFunction|removeNonManifolds| |Remove non-manifolds| }}
{{APIFunction|rotate| |Apply a rotation to the mesh| }}
{{APIFunction|setPoint|int, Vector|Sets the point at index.| }}
{{APIFunction|smooth| |Smooth the mesh| }}
{{APIFunction|snapVertex| |Insert a new facet at the border| }}
{{APIFunction|splitEdge| |Split edge| }}
{{APIFunction|splitEdges| |Split all edges| }}
{{APIFunction|splitFacet| |Split facet| }}
{{APIFunction|swapEdge| |Swap the common edge with the neighbor| }}
{{APIFunction|transform| |Apply a transformation to the mesh| }}
{{APIFunction|transformToEigen| |Transform the mesh to its eigenbase| }}
{{APIFunction|translate|Vector|Apply a translation to the mesh| }}
{{APIFunction|unite|Mesh|Union of this and the given mesh object.| }}
{{APIFunction|write|string|Write the mesh object into file.| }}
{{APIFunction|writeInventor| |Write the mesh in OpenInventor format to a string.|a string}}
{{APIProperty|Area|the area of the mesh object.}}
{{APIProperty|CountFacets|the number of facets of the mesh object.}}
{{APIProperty|CountPoints|the number of vertices of the mesh object.}}
{{APIProperty|Facets|A collection of facets; With this attribute it is possible to get access to the facets of the mesh: for p in mesh.Facets: print p}}
{{APIProperty|Points|A collection of the mesh points; With this attribute it is possible to get access to the points of the mesh: for p in mesh.Points: print p.x, p.y, p.z}}
{{APIProperty|Topology|the points and face indices as tuple.}}
{{APIProperty|Volume|the volume of the mesh object.}}
{{APIProperty|BoundBox|the BoundBox of the object}}
{{APIProperty|Matrix|the current transformation of the object as matrix}}
{{APIProperty|Placement|the current transformation of the object as placement}}


&lt;!--T:4--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Mesh BoundingBox</title>
    <ns>0</ns>
    <id>72</id>
    <revision>
      <id>760</id>
      <parentid>759</parentid>
      <timestamp>2009-02-02T13:09:10Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>b73ty2ugw4en2f7g4mztc5jbhah6r3m</sha1>
      <text xml:space="preserve" bytes="115">{{GuiCommand|Name=Mesh_BoundingBox|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh BuildRegularSolid</title>
    <ns>0</ns>
    <id>73</id>
    <revision>
      <id>104350</id>
      <parentid>762</parentid>
      <timestamp>2014-08-11T21:42:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>rvduptrns774v9ctymv5qv2pldmaaem</sha1>
      <text xml:space="preserve" bytes="116">{{GuiCommand|Name=Mesh RegularSolid|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh CurvatureInfo</title>
    <ns>0</ns>
    <id>74</id>
    <revision>
      <id>764</id>
      <parentid>763</parentid>
      <timestamp>2009-02-02T13:09:10Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>nky191oo1l7bjkfytif0nhf46qcvv96</sha1>
      <text xml:space="preserve" bytes="117">{{GuiCommand|Name=Mesh_CurvatureInfo|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Demolding</title>
    <ns>0</ns>
    <id>75</id>
    <revision>
      <id>766</id>
      <parentid>765</parentid>
      <timestamp>2009-02-02T13:09:10Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>fsw5w5vn0q05qq49c3r9lpegndg3mt8</sha1>
      <text xml:space="preserve" bytes="113">{{GuiCommand|Name=Mesh_Demolding|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Difference</title>
    <ns>0</ns>
    <id>76</id>
    <revision>
      <id>768</id>
      <parentid>767</parentid>
      <timestamp>2009-02-02T13:09:10Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>k0ssabqw47ayq7uyxu7uc7ezcqoxi2f</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_Difference|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh EvaluateFacet</title>
    <ns>0</ns>
    <id>77</id>
    <revision>
      <id>770</id>
      <parentid>769</parentid>
      <timestamp>2009-02-02T13:09:11Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>mr6bdga3tn6x4qn4wmmag77b1s6jcts</sha1>
      <text xml:space="preserve" bytes="117">{{GuiCommand|Name=Mesh_EvaluateFacet|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh EvaluateSolid</title>
    <ns>0</ns>
    <id>78</id>
    <revision>
      <id>772</id>
      <parentid>771</parentid>
      <timestamp>2009-02-02T13:09:11Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>46tebyri4nokbglevocfm48y465ihfo</sha1>
      <text xml:space="preserve" bytes="117">{{GuiCommand|Name=Mesh_EvaluateSolid|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Evaluation</title>
    <ns>0</ns>
    <id>79</id>
    <revision>
      <id>774</id>
      <parentid>773</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>b6ils8v5w87tmgz6jvg4qgkvubtpg45</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_Evaluation|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh ExMakeMesh</title>
    <ns>0</ns>
    <id>80</id>
    <revision>
      <id>776</id>
      <parentid>775</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>9m47xd9z32upxkdu3a2g0uwk58r8m23</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_ExMakeMesh|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh ExMakeTool</title>
    <ns>0</ns>
    <id>81</id>
    <revision>
      <id>778</id>
      <parentid>777</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>5yshn7227ch0atuy9l6q9sth8g22w3b</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_ExMakeTool|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh ExMakeUnion</title>
    <ns>0</ns>
    <id>82</id>
    <revision>
      <id>780</id>
      <parentid>779</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>rborl341zj799qo1vqaq99clyhcu22p</sha1>
      <text xml:space="preserve" bytes="115">{{GuiCommand|Name=Mesh_ExMakeUnion|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FillInteractiveHole</title>
    <ns>0</ns>
    <id>83</id>
    <revision>
      <id>782</id>
      <parentid>781</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>ar7no6eit86kxpya3n6jsfiak68odnb</sha1>
      <text xml:space="preserve" bytes="123">{{GuiCommand|Name=Mesh_FillInteractiveHole|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FillupHoles</title>
    <ns>0</ns>
    <id>84</id>
    <revision>
      <id>784</id>
      <parentid>783</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>rcf9cf1njb54ftuk1gi1nu6stee24cq</sha1>
      <text xml:space="preserve" bytes="115">{{GuiCommand|Name=Mesh_FillupHoles|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FixDegenerations</title>
    <ns>0</ns>
    <id>85</id>
    <revision>
      <id>786</id>
      <parentid>785</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>0jme7klgex9y8hhx3w7jnlru57xevuy</sha1>
      <text xml:space="preserve" bytes="120">{{GuiCommand|Name=Mesh_FixDegenerations|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FixDuplicateFaces</title>
    <ns>0</ns>
    <id>86</id>
    <revision>
      <id>788</id>
      <parentid>787</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>gfvp9j8vzomm4gjxozsvli8odkoe9iz</sha1>
      <text xml:space="preserve" bytes="121">{{GuiCommand|Name=Mesh_FixDuplicateFaces|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FixDuplicatePoints</title>
    <ns>0</ns>
    <id>87</id>
    <revision>
      <id>790</id>
      <parentid>789</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>sxeqhb4q187sjdwe9h49xo5nkq8570g</sha1>
      <text xml:space="preserve" bytes="122">{{GuiCommand|Name=Mesh_FixDuplicatePoints|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FixIndices</title>
    <ns>0</ns>
    <id>88</id>
    <revision>
      <id>792</id>
      <parentid>791</parentid>
      <timestamp>2009-02-02T13:09:19Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>8l5pzd7z0fxszjihx1tqerbtfqizzo6</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_FixIndices|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FlipNormals</title>
    <ns>0</ns>
    <id>89</id>
    <revision>
      <id>794</id>
      <parentid>793</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>co94l81p0lfk69f26y5jvta3d8h5sy4</sha1>
      <text xml:space="preserve" bytes="115">{{GuiCommand|Name=Mesh_FlipNormals|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh FromGeometry</title>
    <ns>0</ns>
    <id>90</id>
    <revision>
      <id>796</id>
      <parentid>795</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>g1az3ykb057k2h94thjqzexhx9mptn6</sha1>
      <text xml:space="preserve" bytes="116">{{GuiCommand|Name=Mesh_FromGeometry|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh HarmonizeNormals</title>
    <ns>0</ns>
    <id>91</id>
    <revision>
      <id>798</id>
      <parentid>797</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>nz0cmat9xzi32elkl8t813prm64r0sp</sha1>
      <text xml:space="preserve" bytes="120">{{GuiCommand|Name=Mesh_HarmonizeNormals|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Icon</title>
    <ns>0</ns>
    <id>51430</id>
    <revision>
      <id>130236</id>
      <parentid>130235</parentid>
      <timestamp>2014-12-08T20:11:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qfhv1n74cg1en4i842xdisqu9l8qmnw</sha1>
      <text xml:space="preserve" bytes="262">
==[[Image:Workbench Mesh.png|32px|Mesh Module|link=Mesh Module]] [[Mesh Module|Mesh Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Mesh Import</title>
    <ns>0</ns>
    <id>92</id>
    <revision>
      <id>104211</id>
      <parentid>800</parentid>
      <timestamp>2014-08-10T19:49:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>pt8ijp1vdubdpukpskzq7qu6bhl12aq</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Mesh_ImportMesh|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Intersection</title>
    <ns>0</ns>
    <id>93</id>
    <revision>
      <id>802</id>
      <parentid>801</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>rsd5kv4doe7im89ad11tabwznl41943</sha1>
      <text xml:space="preserve" bytes="116">{{GuiCommand|Name=Mesh_Intersection|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Key</title>
    <ns>0</ns>
    <id>51441</id>
    <revision>
      <id>131449</id>
      <parentid>130898</parentid>
      <timestamp>2014-12-13T21:17:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>dktn5c12qvqmsvkce69w6pntlnayy01</sha1>
      <text xml:space="preserve" bytes="283">
==[[File:Workbench Mesh.png|32px|Mesh Module|link=Mesh Module]] [[Mesh Module|Mesh Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Mesh Module</title>
    <ns>0</ns>
    <id>94</id>
    <redirect title="Mesh Workbench" />
    <revision>
      <id>1919</id>
      <parentid>807</parentid>
      <timestamp>2009-03-09T20:22:39Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <sha1>csmolnkl0xp5w0oj0nli26yerftbejq</sha1>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Mesh Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Mesh PolyCut</title>
    <ns>0</ns>
    <id>95</id>
    <revision>
      <id>809</id>
      <parentid>808</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>cz0tqpy1iuncxauuljpaw0ri5uuc2ov</sha1>
      <text xml:space="preserve" bytes="111">{{GuiCommand|Name=Mesh_PolyCut|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh PolySegm</title>
    <ns>0</ns>
    <id>96</id>
    <revision>
      <id>811</id>
      <parentid>810</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>5tjvaqvsf9z8ivr68nu05dcx9iasp07</sha1>
      <text xml:space="preserve" bytes="112">{{GuiCommand|Name=Mesh_PolySegm|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh PolySplit</title>
    <ns>0</ns>
    <id>97</id>
    <revision>
      <id>813</id>
      <parentid>812</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>2gvxfzn1arr9j7rrnml63vfk3whzvut</sha1>
      <text xml:space="preserve" bytes="113">{{GuiCommand|Name=Mesh_PolySplit|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh RemoveCompByHand</title>
    <ns>0</ns>
    <id>98</id>
    <revision>
      <id>815</id>
      <parentid>814</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>qxt2tvje66s9quszs4giv73cnd41kiz</sha1>
      <text xml:space="preserve" bytes="120">{{GuiCommand|Name=Mesh_RemoveCompByHand|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh RemoveComponents</title>
    <ns>0</ns>
    <id>99</id>
    <revision>
      <id>817</id>
      <parentid>816</parentid>
      <timestamp>2009-02-02T13:09:20Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>sm0zp6e55jg9l9w5rnd9aqg8kcqh8oq</sha1>
      <text xml:space="preserve" bytes="120">{{GuiCommand|Name=Mesh_RemoveComponents|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Scripting</title>
    <ns>0</ns>
    <id>100</id>
    <revision>
      <id>115456</id>
      <parentid>115455</parentid>
      <timestamp>2014-10-17T19:23:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>4xbx7lh1qbxvz4mk1sutpekcdrpsfi5</sha1>
      <text xml:space="preserve" bytes="4334">
=== Introduction === &lt;!--T:1--&gt;
First of all you have to import the Mesh module:

&lt;syntaxhighlight&gt;
import Mesh
&lt;/syntaxhighlight&gt;

&lt;!--T:2--&gt;
After that you have access to the Mesh module and the Mesh class which facilitate the functions
of the FreeCAD C++ Mesh-Kernel.

=== Creation and Loading ===  &lt;!--T:3--&gt;
To create an empty mesh object just use the standard constructor:


&lt;syntaxhighlight&gt;
mesh = Mesh.Mesh()
&lt;/syntaxhighlight&gt;


&lt;!--T:4--&gt;
You can also create an object from a file


&lt;syntaxhighlight&gt;
mesh = Mesh.Mesh('D:/temp/Something.stl')
&lt;/syntaxhighlight&gt;


&lt;!--T:5--&gt;
(A list of compatible filetypes can be found under 'Meshes' [[Feature_list#IO|here]].)

&lt;!--T:6--&gt;
Or create it out of a set of triangles described by their corner points:


&lt;syntaxhighlight&gt;
planarMesh = [
# triangle 1
[-0.5000,-0.5000,0.0000],[0.5000,0.5000,0.0000],[-0.5000,0.5000,0.0000],
#triangle 2
[-0.5000,-0.5000,0.0000],[0.5000,-0.5000,0.0000],[0.5000,0.5000,0.0000],
]
planarMeshObject = Mesh.Mesh(planarMesh)
Mesh.show(planarMeshObject)
&lt;/syntaxhighlight&gt;


&lt;!--T:7--&gt;
The Mesh-Kernel takes care about creating a topological correct data structure by sorting
coincident points and edges together. 

&lt;!--T:8--&gt;
Later on you will see how you can test and examine mesh data.

=== Modeling ===  &lt;!--T:9--&gt;
To create regular geometries you can use the Python script BuildRegularGeoms.py.


&lt;syntaxhighlight&gt;
import BuildRegularGeoms
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
This script provides methods to define simple rotation bodies like spheres, ellipsoids, cylinders, toroids and cones. And it also has a method to create a simple cube.
To create a toroid, for instance, can be done as follows:


&lt;syntaxhighlight&gt;
t = BuildRegularGeoms.Toroid(8.0, 2.0, 50) # list with several thousands triangles
m = Mesh.Mesh(t)
&lt;/syntaxhighlight&gt;


&lt;!--T:11--&gt;
The first two parameters define the radiuses of the toroid and the third parameter is a sub-sampling factor for how many triangles are created. The higher this value the smoother and the lower the coarser the body is.
The Mesh class provides a set of boolean functions that can be used for modeling purposes. It provides union, intersection and difference of two mesh objects.


&lt;syntaxhighlight&gt;
m1, m2              # are the input mesh objects
m3 = Mesh.Mesh(m1)  # create a copy of m1
m3.unite(m2)        # union of m1 and m2, the result is stored in m3
m4 = Mesh.Mesh(m1)
m4.intersect(m2)    # intersection of m1 and m2
m5 = Mesh.Mesh(m1)
m5.difference(m2)   # the difference of m1 and m2
m6 = Mesh.Mesh(m2)
m6.difference(m1)   # the difference of m2 and m1, usually the result is different to m5
&lt;/syntaxhighlight&gt;


&lt;!--T:12--&gt;
Finally, a full example that computes the intersection between a sphere and a cylinder that intersects the sphere.


&lt;syntaxhighlight&gt;
import Mesh, BuildRegularGeoms
sphere = Mesh.Mesh( BuildRegularGeoms.Sphere(5.0, 50) )
cylinder = Mesh.Mesh( BuildRegularGeoms.Cylinder(2.0, 10.0, True, 1.0, 50) )
diff = sphere
diff = diff.difference(cylinder)
d = FreeCAD.newDocument()
d.addObject(&quot;Mesh::Feature&quot;,&quot;Diff_Sphere_Cylinder&quot;).Mesh=diff
d.recompute()
&lt;/syntaxhighlight&gt;


=== Examining and Testing === &lt;!--T:13--&gt; 

=== Write your own Algorithms === &lt;!--T:14--&gt; 

=== Exporting ===  &lt;!--T:15--&gt;
You can even write the mesh to a python module:


&lt;syntaxhighlight&gt;
m.write(&quot;D:/Develop/Projekte/FreeCAD/FreeCAD_0.7/Mod/Mesh/SavedMesh.py&quot;)
import SavedMesh
m2 = Mesh.Mesh(SavedMesh.faces)
&lt;/syntaxhighlight&gt;


=== Gui related stuff === &lt;!--T:16--&gt; 

=== Odds and Ends ===  &lt;!--T:17--&gt;
An extensive (though hard to use) source of Mesh related scripting are the unit test scripts of the Mesh-Module. 
In this unit tests literally all methods are called and all properties/attributes are tweaked.
So if you are bold enough, take a look at the [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/Mesh/App/MeshTestsApp.py?view=markup Unit Test module].

&lt;!--T:18--&gt;
{{docnav|FreeCAD Scripting Basics|Topological data scripting}}

&lt;!--T:19--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Mesh Skripting in FreeCAD</title>
    <ns>0</ns>
    <id>2351</id>
    <revision>
      <id>107999</id>
      <parentid>95798</parentid>
      <timestamp>2014-09-01T12:30:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Mesh ToolMesh</title>
    <ns>0</ns>
    <id>101</id>
    <revision>
      <id>848</id>
      <parentid>847</parentid>
      <timestamp>2009-02-02T13:09:21Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>oodfeci4w21095s9vqvn5xlllwvcvj5</sha1>
      <text xml:space="preserve" bytes="112">{{GuiCommand|Name=Mesh_ToolMesh|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Transform</title>
    <ns>0</ns>
    <id>102</id>
    <revision>
      <id>850</id>
      <parentid>849</parentid>
      <timestamp>2009-02-02T13:09:21Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>jcyyokbb36tzim2vx5nk4l41sqvq611</sha1>
      <text xml:space="preserve" bytes="113">{{GuiCommand|Name=Mesh_Transform|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Union</title>
    <ns>0</ns>
    <id>103</id>
    <revision>
      <id>852</id>
      <parentid>851</parentid>
      <timestamp>2009-02-02T13:09:21Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>hderzat1op5p5rygy4bmfmee4xugdib</sha1>
      <text xml:space="preserve" bytes="109">{{GuiCommand|Name=Mesh_Union|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh VertexCurvature</title>
    <ns>0</ns>
    <id>104</id>
    <revision>
      <id>854</id>
      <parentid>853</parentid>
      <timestamp>2009-02-02T13:09:31Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>ggp4loe4u3e79io5l28k010ua7blpmr</sha1>
      <text xml:space="preserve" bytes="119">{{GuiCommand|Name=Mesh_VertexCurvature|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Mesh Workbench</title>
    <ns>0</ns>
    <id>105</id>
    <revision>
      <id>130791</id>
      <parentid>111360</parentid>
      <timestamp>2014-12-09T21:03:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2sa5ue9mphvot2rwtikylcrcjkc2x2f</sha1>
      <text xml:space="preserve" bytes="4031">
&lt;!--T:1--&gt;
The '''Mesh Workbench''' handles [http://en.wikipedia.org/wiki/Triangle_mesh triangle meshes]. Meshes are a special type of 3D object, composed of triangles conected by their edges and their corners (also called vertices).

&lt;!--T:2--&gt;
[[Image:Mesh_example.jpg|An example of a mesh object]]

&lt;!--T:3--&gt;
An example of a mesh object

&lt;!--T:4--&gt;
Many 3D applications use meshes as their primary type of 3D object, like [http://en.wikipedia.org/wiki/Sketchup sketchup], [http://en.wikipedia.org/wiki/Blender_(software) blender], [http://en.wikipedia.org/wiki/Maya_(software) maya] or [http://en.wikipedia.org/wiki/3d_max 3d studio max]. Since meshes are very simple objects, containing only vertices (points), edges and (triangular) faces, they are very easy to create, modify, subdivide, stretch, and can easily be passed from one application to another without any loss. Besides, since they contain very simple data, 3D applications can usually manage very large quantities of them without any problem. For those reasons, meshes are often the 3D object type of choice for applications dealing with movies, animation, and image creation.

&lt;!--T:5--&gt;
In the field of engineering, however, meshes present one big limitation: They are very dumb objects, only composed of points,lines and faces. They are only made of surfaces, and have no mass information, so they don't behave as solids. In a mesh there is no automatic way to know if a point is inside or outside the object. This means that all solid-based operations, such as addition or subtraction, are always a bit difficult to perform on meshes, and return errors often.

&lt;!--T:6--&gt;
In FreeCAD, since it is an engineering application, we would obviously prefer to work with more intelligent types of 3D objects, that can carry more informations, such as mass, solid behaviour, or even custom parameters. The mesh module was first created to serve as a testbed, but to be able to read, manipulate and convert meshes is also highly important for FreeCAD. Very often, in your workflow, you will receive 3D data in mesh format. You will need to handle that data, analyse it to detect errors or other problems that prevent converting them to more intelligent objects, and finally, convert them to more intelligent objects, handled by the [[Part Module]].

=== Using the mesh module === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
The mesh module has currently a very simple interface, all its functions are grouped in the '''Mesh''' menu entry. The most important operations you can currently do with meshes are:
* [[Image:Mesh_Import_Mesh.svg|32px]] Import meshes in several file formats
* [[Image:Mesh_Export_Mesh.svg|32px]] Export meshes in several file formats
* [[Image:Mesh_Mesh_from_Shape.svg|32px]] Convert [[Part Module|Part]] objects into meshes
* [[Image:Mesh_Harmonize_Normals.svg|32px]] Harmonize normals
* [[Image:Mesh_Flip_Normals.svg|32px]] Flip [http://en.wikipedia.org/wiki/Surface_normal normals]
* [[Image:Mesh_boundary.svg|32px]] Close holes in meshes
* [[Image:Mesh_Remove_Components.svg|32px]] Remove components of meshes
* [[Image:Mesh_cut.svg|32px]] Cut meshes along a line


&lt;!--T:12--&gt;
Analyse curvature, faces, and check if a mesh can be safely converted into a solid


&lt;!--T:13--&gt;
Create mesh primitives, like cubes, cylinders, cones, or spheres:
* [[Image:Mesh_Cube.svg|32px]] Create a mesh cube
* [[Image:Mesh_Cylinder.svg|32px]] Create a mesh cylinder
* [[Image:Mesh_Cone.svg|32px]] Create a mesh cone
* [[Image:Mesh_Sphere.svg|32px]] Create a mesh sphere
* [[Image:Mesh_Ellipsoid.svg|32px]] Create a mesh ellipsoid
* [[Image:Mesh_Torus.svg|32px]] Create a mesh torus


&lt;!--T:14--&gt;
* Union, subtract and intersect meshes


&lt;!--T:9--&gt;
These are only some of the basic operations currently present in the Mesh module interface. But the FreeCAD meshes can also be handled in many more ways by [[Mesh Scripting| scripting]].

&lt;!--T:10--&gt;
{{docnav|PartDesign Workbench|OpenSCAD Module}}

&lt;!--T:11--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Mesh to Part</title>
    <ns>0</ns>
    <id>694</id>
    <revision>
      <id>111805</id>
      <parentid>111804</parentid>
      <timestamp>2014-09-30T20:42:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a5gdz85sgp3wzhx0l7d0f1sxnwxgihz</sha1>
      <text xml:space="preserve" bytes="4491">
== Converting Part objects to Meshes == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
Converting higher-level objects such as [[Part Module|Part shapes]] into simpler objects such as [[Mesh Module|meshes]] is a pretty simple operation, where all faces of a Part object get triangulated. The result of that triangulation (tessellation) is then used to construct a mesh: (let's assume our document contains one part object)

&lt;syntaxhighlight&gt;
 #let's assume our document contains one part object
 import Mesh
 faces = []
 shape = FreeCAD.ActiveDocument.ActiveObject.Shape
 triangles = shape.tessellate(1) # the number represents the precision of the tessellation)
 for tri in triangles[1]:
     face = []
     for i in range(3):
         vindex = tri[i]
         face.append(triangles[0][vindex])
     faces.append(face)
 m = Mesh.Mesh(faces)
 Mesh.show(m)
&lt;/syntaxhighlight&gt;

&lt;!--T:3--&gt;
Sometimes the triangulation of certain faces offered by OpenCascade is quite ugly. If the face has a rectangular parameter space and doesn't contain any holes or other trimming curves you can also create a mesh on your own:

&lt;syntaxhighlight&gt;
 import Mesh
 def makeMeshFromFace(u,v,face):
 	(a,b,c,d)=face.ParameterRange
 	pts=[]
 	for j in range(v):
 		for i in range(u):
 			s=1.0/(u-1)*(i*b+(u-1-i)*a)
 			t=1.0/(v-1)*(j*d+(v-1-j)*c)
 			pts.append(face.valueAt(s,t))
 
 	mesh=Mesh.Mesh()
 	for j in range(v-1):
 		for i in range(u-1):
 			mesh.addFacet(pts[u*j+i],pts[u*j+i+1],pts[u*(j+1)+i])
 			mesh.addFacet(pts[u*(j+1)+i],pts[u*j+i+1],pts[u*(j+1)+i+1])
 
 	return mesh

&lt;/syntaxhighlight&gt;

== Converting Meshes to Part objects == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Converting Meshes to Part objects is an extremely important operation in CAD work, because very often you receive 3D data in mesh format from other people or outputted from other applications. Meshes are very practical to represent free-form geometry and big visual scenes, as it is very lightweight, but for CAD we generally prefer higher-level objects that carry much more information, such as the idea of solid, or faces made of curves instead of triangles.

&lt;!--T:6--&gt;
Converting meshes to those higher-level objects (handled by the [[Part Module]] in FreeCAD) is not an easy operation. Meshes can be made of thousands of triangles (for example when generated by a 3D scanner), and having solids made of the same number of faces would be extremely heavy to manipulate. So you generally want to optimize the object when converting.

&lt;!--T:7--&gt;
FreeCAD currently offers two methods to convert Meshes to Part objects. The first method is a simple, direct conversion, without any optimization:

&lt;syntaxhighlight&gt;
 import Mesh,Part
 mesh = Mesh.createTorus()
 shape = Part.Shape()
 shape.makeShapeFromMesh(mesh.Topology,0.05) # the second arg is the tolerance for sewing
 solid = Part.makeSolid(shape)
 Part.show(solid)

&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
The second method offers the possibility to consider mesh facets coplanar when the angle between them is under a certain value. This allows to build much simpler shapes: (let's assume our document contains one Mesh object)

&lt;syntaxhighlight&gt;
 # let's assume our document contains one Mesh object
 import Mesh,Part,MeshPart
 faces = []
 mesh = App.ActiveDocument.ActiveObject.Mesh
 segments = mesh.getPlanes(0.00001) # use rather strict tolerance here
 
 for i in segments:
   if len(i) &gt; 0:
      # a segment can have inner holes
      wires = MeshPart.wireFromSegment(mesh, i)
      # we assume that the exterior boundary is that one with the biggest bounding box
      if len(wires) &gt; 0:
         ext=None
         max_length=0
         for i in wires:
            if i.BoundBox.DiagonalLength &gt; max_length:
               max_length = i.BoundBox.DiagonalLength
               ext = i
 
         wires.remove(ext)
         # all interior wires mark a hole and must reverse their orientation, otherwise Part.Face fails
         for i in wires:
            i.reverse()
 
         # make sure that the exterior wires comes as first in the lsit
         wires.insert(0, ext)
         faces.append(Part.Face(wires))
 
 shell=Part.Compound(faces)
 Part.show(shell)
 #solid = Part.Solid(Part.Shell(faces))
 #Part.show(solid)

&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
{{docnav|Topological data scripting|Scenegraph}}

&lt;!--T:10--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Migius</title>
    <ns>0</ns>
    <id>2902</id>
    <revision>
      <id>88909</id>
      <parentid>84360</parentid>
      <timestamp>2014-05-31T09:40:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Misc templates</title>
    <ns>0</ns>
    <id>19842</id>
    <revision>
      <id>108401</id>
      <parentid>98039</parentid>
      <timestamp>2014-09-04T09:31:49Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>mq099a8pgyr4u302nhdyhlftn39h94w</sha1>
      <text xml:space="preserve" bytes="3605">

&lt;!--T:13--&gt;
This page lists some mixed templates.&lt;br /&gt;
All models are in SVG format directly downloadable and usable with or without modification. &lt;br /&gt;
All the templates and cartridges are equipped with editable texts in FreeCAD.&lt;br /&gt;
For use must rename in '''A3_Landscape.svg''' (has put in (Window) '''&quot;C:\Program Files\you FreeCAD version\data\Mod\Drawing\Templates&quot;''' ).&lt;br /&gt;
To access after you create the page, click on the page in '''Combo View &gt; Properties &gt; Data &gt; Editable Texts &gt; click 3 points...'''


&lt;!--T:14--&gt;
A macro is available for two major [[Macro_CartoucheFC_Full|model 1]] and [[Macro_CartoucheFC_2|model 2]] cartridges. &lt;br /&gt;
Several custom attributes can be placed in templates. The list of currently supported attributes is available on the [[Svg Namespace]] page.

===A3 Landscape US Text Complet With Convention EU.svg=== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
[[Image:A3_Landscape_US_Text_Complet_With_Convention_EU.svg|800px|A3 Landscape US Text Complet With Convention EU]]

===A3 Landscape US Text Complet With Convention US=== &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
[[Image:A3_Landscape_US_Text_Complet_With_Convention_US.svg|800px|A3 Landscape US Text Complet With Convention US]]

===A3 Landscape US Text Complet Without Convention=== &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
[[Image:A3_Landscape_US_Text_Complet_Without_Convention.svg|800px|A3 Landscape US Text Complet Without Convention]]

===The most used cartridges in templates FreeCAD=== &lt;!--T:21--&gt;

====Convention EU US==== &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
Symbols used to define a [http://commons.wikimedia.org/wiki/File:Convention_placement_vues_dessin_technique.svg projection].

&lt;!--T:24--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;100&quot;&gt;
File:Cartouche_01_Convention_EU.svg|Left: '''First angle''' projection (ISO standard).
File:Cartouche_01_Convention_US.svg|Right: '''Third angle''' projection (Used in the US, UK and Canada).
&lt;/gallery&gt;
&lt;/center&gt;

====Model Cartridge 1==== &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
[[File:Cartouche_01_US.svg|400px|Cartouche model 01]]

====Model Cartridge 2==== &lt;!--T:27--&gt;

&lt;!--T:28--&gt;
[[File:Cartouche_02_US.svg|400px|Cartouche model 02]]

====Model Cartridge 3==== &lt;!--T:29--&gt;

&lt;!--T:30--&gt;
[[File:Cartouche_03_US.svg|400px|Cartouche model 03]]

====Model Cartridge 4==== &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
[[File:Cartouche_04_US.svg|400px|Cartouche model 04]]

===CompassRose=== &lt;!--T:35--&gt;

&lt;!--T:36--&gt;
[[File:CompassRose.svg|200px|CompassRose]]

===Templates in .FCStd format=== &lt;!--T:37--&gt;

&lt;!--T:38--&gt;
The templates is complete and are equipped of cartouche and with a table (K to Z hidden by default) and symbols US (hidden by default) and EU. You just hide or erase what does not serve you.

&lt;!--T:39--&gt;
Template [http://forum.freecadweb.org/download/file.php?id=6499 A3_Landscape.FCStd]

&lt;!--T:40--&gt;
Template [http://forum.freecadweb.org/download/file.php?id=6500 A4_Portrait.FCStd]

&lt;!--T:41--&gt;
CompassRose_2D [http://forum.freecadweb.org/download/file.php?id=6501 CompassRose_2D.FCStd]

&lt;!--T:42--&gt;
CompassRose_3D [http://forum.freecadweb.org/download/file.php?id=6502 CompassRose_3D.FCStd]

===Other standards available=== &lt;!--T:33--&gt;
* [[Drawing_templates|Drawing templates]]: default FreeCAD templates 
* [[Arch_templates|Arch templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute Arch] standard 
* [[ANSI_templates|ANSI templates]]: according to American National Standards Institute [http://en.wikipedia.org/wiki/American_National_Standards_Institute ANSI] standard


&lt;!--T:34--&gt;
[[Category:Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Mit Makros arbeiten</title>
    <ns>0</ns>
    <id>1374</id>
    <revision>
      <id>108000</id>
      <parentid>95799</parentid>
      <timestamp>2014-09-01T12:30:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Module Creation</title>
    <ns>0</ns>
    <id>393</id>
    <revision>
      <id>120028</id>
      <parentid>114564</parentid>
      <timestamp>2014-11-08T20:45:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>syntaxhighlight -&gt; pre</comment>
      <sha1>psva12aorh0391d8emeexi83vmwfvx9</sha1>
      <text xml:space="preserve" bytes="7715">
&lt;!--T:1--&gt;
Adding new modules and workbenches in FreeCAD is very easy. We call module any extension of FreeCAD, while a workbench is a special GUI configuration that groups some toolbars and menus. Usually you create a new module which contains its own workbench.

&lt;!--T:2--&gt;
Modules can be programmed in C++ or in python, or in a mixture of both, but the module init files must be in python. Setting up a new module with those init files is easy, and can be done either manually or with the FreeCAD build tool.

== Using the FreeCAD Build tool == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
'''Creating a new application module''' in FreeCAD is rather simple. In the FreeCAD development tree exists the ''[[FreeCAD Build Tool]]'' (fcbt) that does the most important things for you. It is a [[wikipedia:Python (programming language)|Python]] script located under

&lt;pre&gt;
 trunk/src/Tools/fcbt.py
&lt;/pre&gt;

&lt;!--T:5--&gt;
When your python interpreter is correctly installed you can execute the script from a command line with

&lt;pre&gt;
 python fcbt.py
&lt;/pre&gt;

&lt;!--T:6--&gt;
It will display the following menu:

&lt;pre&gt;
 FreeCAD Build Tool
 Usage:
    fcbt &lt;command name&gt; [command parameter] 
 possible commands are:
  - DistSrc         (DS)   Build a source Distr. of the current source tree
  - DistBin         (DB)   Build a binary Distr. of the current source tree
  - DistSetup       (DI)   Build a Setup Distr. of the current source tree
  - DistSetup       (DUI)  Build a User Setup Distr. of the current source tree
  - DistAll         (DA)   Run all three above modules
  - BuildDoc        (BD)   Create the documentation (source docs)
  - NextBuildNumber (NBN)  Increase the Build Number of this Version
  - CreateModule    (CM)   Insert a new FreeCAD Module in the module directory
 
 For help on the modules type:
   fcbt &lt;command name&gt; ?
&lt;/pre&gt;

&lt;!--T:7--&gt;
At the command prompt enter ''CM'' to start the creation of a module: 

&lt;pre&gt;
 Insert command: ''CM''
&lt;/pre&gt;

&lt;!--T:8--&gt;
You are now asked to specify a name for your new module. Lets call it ''TestMod'' for example:

&lt;pre&gt;
 Please enter a name for your application: ''TestMod''
&lt;/pre&gt;

&lt;!--T:9--&gt;
After pressing ''enter'' fcbt starts copying all necessary files for your module in a new folder at

&lt;pre&gt;
 trunk/src/Mod/TestMod/
&lt;/pre&gt;

&lt;!--T:10--&gt;
Then all files are modified with your new module name. The only thing you need to do now is to add the two new projects &quot;appTestMod&quot; and &quot;appTestModGui&quot; to your workspace (on Windows) or to your makefile targets (unix). Thats it!

== Setting up a new module manually == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
You need two things to create a new module:

&lt;!--T:13--&gt;
* A new '''folder''' in the FreeCAD Mod folder (either in InstalledPath/FreeCAD/Mod or in UserPath/.FreeCAD/Mod). You can name it as you like.
* Inside that folder, an '''InitGui.py''' file. That file will be executed automatically on FreeCAD start (for ex, put a print(&quot;hello world&quot;) inside)

&lt;!--T:14--&gt;
Additionally, you can also put an '''Init.py''' file. The difference is, the InitGui.py file is loaded only when FreeCAD runs in GUI mode, the Init.py file is loaded always. But if we are going to make a workbench, we'll put it in InitGui.py, because workbenches are used only in GUI mode, of course.

== Creating a new workbench == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
Inside the InitGui.py file, one of the first thing you will want to do is to define a workbench. Here is a minimal code that you can use:

&lt;syntaxhighlight&gt;
 class MyWorkbench ( Workbench ):
 	&quot;My workbench object&quot;
 	Icon = &quot;&quot;&quot;
 			/* XPM */
 			static const char *test_icon[]={
 			&quot;16 16 2 1&quot;,
 			&quot;a c #000000&quot;,
 			&quot;. c None&quot;,
 			&quot;................&quot;,
 			&quot;................&quot;,
 			&quot;..############..&quot;,
 			&quot;..############..&quot;,
 			&quot;..############..&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;................&quot;,
 			&quot;................&quot;};
 			&quot;&quot;&quot;
 	MenuText = &quot;My Workbench&quot;
 	ToolTip = &quot;This is my extraordinary workbench&quot;
 
         def GetClassName(self):
                return &quot;Gui::PythonWorkbench&quot;
 	
 	def Initialize(self):
 		import myModule1, myModule2
 		self.appendToolbar(&quot;My Tools&quot;, [&quot;MyCommand1&quot;,&quot;MyCommand2&quot;])
 		self.appendMenu(&quot;My Tools&quot;, [&quot;MyCommand1&quot;,&quot;MyCommand2&quot;])
 		Log (&quot;Loading MyModule... done\n&quot;)
 
 	def Activated(self):
                # do something here if needed...
 		Msg (&quot;MyWorkbench.Activated()\n&quot;)
 
 	def Deactivated(self):
                # do something here if needed...
 		Msg (&quot;MyWorkbench.Deactivated()\n&quot;)
 
 FreeCADGui.addWorkbench(MyWorkbench)
&lt;/syntaxhighlight&gt;

&lt;!--T:17--&gt;
The workbench must have all these attributes defined: 
* The Icon attribute is an XPM image (Most software such as GIMP can convert an image into xpm format, which is a text file. You can then paste the contents here)
* MenuText is the workbench name as it appears in the workbenches list
* Tooltip appears when you hover on it with the mouse
* Initialize() is executed on FreeCAD load, and must create all menus and toolbars that the workbench will use. If you are going to make your module in C++, you can also define your menus and toolbars inside the C++ module, not in this InitGui.py file. The important is that they are created now, and not when the module is activated.
* Activated() is executed when the user switches to your workbench
* Deactivated() is executed when the user switches from yours to another workbench or leaves FreeCAD

== Creating FreeCAD commands in Python == &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
Usually you define all your tools (called Commands in FreeCAD) in another module, then import that module before creating the toolbars and menus. This is a minimal code that you can use to define a command:

&lt;syntaxhighlight&gt;
 import FreeCAD,FreeCADGui
 
 class MyTool:
 	&quot;My tool object&quot;
 
        def GetResources(self):
                return {&quot;MenuText&quot;: &quot;My Command&quot;,
                        &quot;Accel&quot;: &quot;Ctrl+M&quot;,
                        &quot;ToolTip&quot;: &quot;My extraordinary command&quot;,
                        &quot;Pixmap&quot;  : &quot;&quot;&quot;
 			/* XPM */
 			static const char *test_icon[]={
 			&quot;16 16 2 1&quot;,
 			&quot;a c #000000&quot;,
 			&quot;. c None&quot;,
 			&quot;................&quot;,
 			&quot;................&quot;,
 			&quot;..############..&quot;,
 			&quot;..############..&quot;,
 			&quot;..############..&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;......####......&quot;,
 			&quot;................&quot;,
 			&quot;................&quot;};
 			&quot;&quot;&quot;}
 
        def IsActive(self):
                if FreeCAD.ActiveDocument == None:
                        return False
                else:
                        return True
 
 	def Activated(self):
                # do something here...
 
 FreeCADGui.addCommand('MyCommand1',MyTool())
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
* The GetResources() method must return a dictionnary with visual attributes of your tool. Accel defines a shortcut key but is not mandatory.
* The IsActive() method defines if the command is active or greyed out in menus and toolbars.
* The Activated() method is executed when the Command is called through a toolbar button or menu or even by script.

== Creating FreeCAD Commands in C++ == &lt;!--T:21--&gt;

&lt;!--T:22--&gt;
To Be Documented


&lt;!--T:23--&gt;
{{docnav|FreeCAD Build Tool|Debugging}}

&lt;!--T:24--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Modules</title>
    <ns>0</ns>
    <id>1088</id>
    <revision>
      <id>108001</id>
      <parentid>4699</parentid>
      <timestamp>2014-09-01T12:30:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Mouse Model</title>
    <ns>0</ns>
    <id>107</id>
    <revision>
      <id>102673</id>
      <parentid>102672</parentid>
      <timestamp>2014-08-03T12:16:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>brzwg48o2d8hx65xv7j16rj1vzpxk8x</sha1>
      <text xml:space="preserve" bytes="4434">
&lt;!--T:1--&gt;
The FreeCAD '''mouse model''' consists of the commands used to visually navigate the 3D space and interact with the objects displayed. FreeCAD supports multiple mouse model navigation styles. The default navigation style is referred to as &quot;CAD Navigation,&quot; and is very simple and practical, but FreeCAD also provides alternative navigation styles, that you can choose according to your preferences.

== Navigation == &lt;!--T:2--&gt;
The object handling is common to all workbenches. The following mouse gestures can be used to control the object position and view according to which Navigation style is selected.

&lt;!--T:3--&gt;
There are two ways to change the navigation style:

&lt;!--T:4--&gt;
* In the [[Preferences Editor]], Display section, ''3D View'' tab;
* By right-clicking in empty space in the 3D view area, then selecting ''Navigation style'' in the contextual menu.


=== CAD Navigation (default) === &lt;!--T:5--&gt;
This is the default navigation style and allows the user a simple control of the view, and does not require the use of keyboard keys except to make multi-selections.
{{CAD Navigation}}


=== Inventor Navigation === &lt;!--T:6--&gt;
In Inventor Navigation, modeled after [http://en.wikipedia.org/wiki/Open_Inventor Open Inventor] (not to be confused with Autodesk Inventor), there is no mouse-only selection. In order to select objects, you must hold down the {{KEY|CTRL}} key.
{{Inventor Navigation}}


=== Blender Navigation === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
In Blender Navigation, modeled after [http://www.blender.org Blender], there is no mouse-only panning. In order to pan the view, you must hold down the {{KEY|SHIFT}} key.
{{Blender Navigation}}


=== Touchpad Navigation === &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
In Touchpad Navigation, neither panning, nor zooming, nor rotating the view, are mouse-only (or touchpad-only) operations.
{{Touchpad Navigation}}

== Selecting objects == &lt;!--T:11--&gt;

=== Simple selection === &lt;!--T:12--&gt;
Objects can be selected by a click with the left mouse button either by clicking on the object in the 3D-view or by selecting it in the tree view.

=== Preselection === &lt;!--T:13--&gt;
There is also a ''Preselection'' mechanism that highlights objects and displays information before selection by just hovering the mouse over the objects. If you don't like this behaviour or you have a slow machine, you can switch preselection off in the preferences.


== Manipulating Objects == &lt;!--T:14--&gt;
FreeCAD offers [[Manipulator|''manipulators'']] that are handles that can be used to modify an object's appearance, shape, or other parameters.

&lt;!--T:15--&gt;
.

&lt;!--T:24--&gt;
{{Note|''Obsolete''|The [[Std ClippingPlane|clipping plane]] is a good example of an object with manipulators. A [[Std ClippingPlane|clipping plane]] can be activated with the ''View→Clipping Plane'' menu. After activation the clipping plane object appears and shows seven obvious manipulators as little boxes: One on each end of its three coordinate axes and one on the center of the plane normal axis. There are four more that are not as obvious: The plane itself and the thin part of the three axis objects.
;Scaling: To scale the object click with the left mouse button on the box manipulators at the end of the axes and pull them back and forth. Depending on the object the manipulators work independently or synchronously.
;Out of plane shifting: To shift the object along its normal vector, pull the long box on the center of an axis with the left mouse button. For the clipping plane there is only one manipulator along the normal vector.
;In plane shifting: To move the center of the clipping plane, click on the plane object and pull it to the desired location.
;Rotation: Clicking on the thin part of the axes puts the manipulator in rotation mode.
}}

== Hardware support == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
FreeCAD also supports some [[3D input devices]].

== Mac OS X Issues == &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
Recently we got reports [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3592&amp;start=0 on the forum] from Mac users that those mouse button and key combination do not work as expected. Unfortunately, none of the developers owns a Mac, neither do the other regular contributors. We need your help to determine which mouse buttons and key combination work so we can update this wiki.

&lt;!--T:21--&gt;
{{docnav|Getting started|Document structure}}

&lt;!--T:22--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Name Discussion</title>
    <ns>0</ns>
    <id>108</id>
    <revision>
      <id>129942</id>
      <parentid>129772</parentid>
      <timestamp>2014-12-07T18:03:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>jcyt6w3w7fulukbyr0swulkf6rp9y5s</sha1>
      <text xml:space="preserve" bytes="4436">
&lt;!--T:1--&gt;
As a lot of you mentioned... FreeCAD is not a very good name for this project. There fore maybe its time to think of a new one. This page is for that purpose.

== Maintainers thoughts == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
For me FreeCAD was always a working or project name. Especially because FreeCAD is not really a CAD yet but more an ongoing effort to put a lot of engineering software together to create something bigger then the pieces. To create maybe a community which take the torch of Open Source in a field of software which is still held hostage by Dassaults and Autodesks. 

&lt;!--T:4--&gt;
But which name to give such an effort?? Who knows??? 

&lt;!--T:5--&gt;
Maybe something completly different, like an animal name?

&lt;!--T:6--&gt;
So join the discussion:

== Cons of the name FreeCAD == &lt;!--T:7--&gt;
* The (older) [http://www.ar-cad.com/ freeCAD] Project
* FreeCAD.org is already used/blocked

== Pros of the name FreeCAD == &lt;!--T:8--&gt;
* Already known
* At least in the German Google the first hit of &quot;FreeCAD&quot; is our project   


== Possible new names == &lt;!--T:9--&gt;
* CADalytix
* HobbyCad ;-
* How about &quot;CADenza&quot;, &quot;CADence&quot; or even &quot;DeCADence&quot; ?
* foCAD - freedom of CAD
* Fosoid - Freedom of solid design
* Fancyfactum - Factum: lat. made, done... And Google says: Your search - fancyfactum - did not match any documents. 
* Fantafactor - Doing Fantasy. No Google matches
* FreeDCAD - Amphibolic structure implying that CAD design has been &quot;freed,&quot; made opensouce, and implied 3D creation.
* Eleversum - The Universe of Elements. No Google matches.
* EngineersDesk - That's what it could be. But at least the com-domain is allready taken
* CADQuarks - It contains a lot of small CAD-particles that should create something bigger...
* EngineeringQuarks - The fusion of the last two ( I admit, I am a physicist, but it is not infective )
* OpenProjekt - English+German
* Modus or ModusCAD - From latin
* Revolve
* OpenCad - it is open for all...
* Worksite
* Mechframe, Mechanic, Nmech - something with mech...
* Hitech, Hitechnic, Paratechnic - something with tech...
* Your girlfriend/wife name  - After all Catia is also a girl's name!
* FormReactor
* Mecheneer or Mechineer(ing) - from mechanical engineer(ing)
* TurboDimension or TurboDim
* ThinkDimension
* MechFlux
* MechPhysx
* MoskitoCad - small, simple, efficient, many childs, adaptable
* FreeCadProject.org
* FusionCAD, or just Fusion
* MECA - Mechanical Engineering Construction Assistant (sorry for those that would use this for non mechanical applications )
* SPIRAL - Super Project Inventor Really Aiming for Liberty (doesn't really make sense, I let it up to english-speaking natives to find better ^^)
* IcePeach - name of a flower, I just like it, and the icon would be quite simply found: a picture of the flower
* arcade or ArCADe
* CADemlia - (not [http://en.wikipedia.org/wiki/Kademlia Kademlia])
* Engine
* openCAx - 1. FreeCAD seams to be a really powerful platform that will hopefully evolve into much more than only &quot;designing&quot; application, hence X for Engineering, Manufacturing etc.; 2. I didn't find any application with that name.; 3. It's easy to find out the purpose of the application from its namel.; 4. It's short and easy to remember (I believe). (The logo could be something like [http://img147.imageshack.us/my.php?image=opencaxdc6.png])
* mechfoundry
* grindmill
* steelmold, ironmold
* LiberationCAD
* [http://en.wikipedia.org/wiki/Gleipnir Gleipnir] from Norse mythology - see this [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=7&amp;sid=2248eb4d40500010b18d54f511674d8f&amp;p=22#p22 post] in the FreeCAD forum for more explanation
* [http://en.wikipedia.org/wiki/Sk%C3%AD%C3%B0bla%C3%B0nir Skíðblaðnir] from Norse mythology - see this [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=7&amp;sid=2248eb4d40500010b18d54f511674d8f&amp;p=22#p22 post] in the FreeCAD forum for more explanation
* [http://en.wikipedia.org/wiki/Eldhr%C3%ADmnir Eldhrímnir] from Norse mythology - see this [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=7&amp;sid=2248eb4d40500010b18d54f511674d8f&amp;p=22#p22 post] in the FreeCAD forum for more explanation
* [http://en.wikipedia.org/wiki/Mj%C3%B6llnir Mjöllnir] from Norse mythology - see this [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=7&amp;sid=2248eb4d40500010b18d54f511674d8f&amp;p=22#p22 post] in the FreeCAD forum for more explanation
* Mechanics

&lt;!--T:10--&gt;
[[Category:News]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Naming project</title>
    <ns>0</ns>
    <id>2869</id>
    <revision>
      <id>121360</id>
      <parentid>121359</parentid>
      <timestamp>2014-11-13T21:55:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gv8dxn9jgafds232wr0i0c2zn5ise1r</sha1>
      <text xml:space="preserve" bytes="3425">
&lt;!--T:1--&gt;
This template is the guideline for a FreeCAD development project. It follows the rules of the [http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology Getting Things Done (GTD)] process. The projects are collected in the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This is an development and design effort to implement a robust topological naming in FreeCAD. 


== Outcome == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
# '''Interface''' in (Part::TopoShape) to robustly reference (name) shapes and sub-shapes (faces, edges, vertexes) through a string (sub-element name like &quot;Face1&quot;) &lt;p&gt; Here we need a interface to provide Part::TopoShape with all information need to do the Naming, e.g. NewShape, additional information from a algos like deleted faces, modeling step (for 2.) and ...... &lt;/p&gt;
# '''Association''' of modeling steps with the resulting faces/edges. &lt;p&gt; In case of a big model the user is lost if he/she has hundreds of fillets or bore hole. So if the faces/edges would know what modeling step  it created we could implement a double click on edge/face opens the right feature! &lt;/p&gt; 
# An '''algorithm''' to keep the naming stable throughout changes in modeling history, like splitting edge/faces and moving vertexes &lt;p&gt; [[File:NamingExample.jpg]]
# (optional) '''memory optimized data structure''' to keep only changed faces/edges in each modeling feature. &lt;p&gt; This will become important when the models get bigger. Its not efficient to copy most of the shape just through. Would be much more effective to share the unchanged faces/edges between Feautures and copy only whats changed.

== Brainstorming == &lt;!--T:5--&gt;
A lot was discussed in the [http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=2656 &quot;Robust Reference&quot; Post]
of jrheinlaender.

=== Others === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* [http://www.maruf.ca/files/caadoc/CAATopTechArticles/JournalMethodology.htm#Definition Catia V5 and Topology Naming] and [http://www.maruf.ca/files/caadoc/CAAMmrTechArticles/CAAMmrGenericNaming.htm CAAMmrGenericNaming]
* [http://opencascade.sourcearchive.com/documentation/6.3.0.dfsg.1-1/TNaming_8hxx-source.html Naming in OpenCasCade OCAF]

=== Literature &amp; Papers === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* J Kripac, &quot;A mechanism for persistently naming topological entities in history-based parametric solid models&quot;
: Describes a method to do the first three points in the List. Would say the is the approach used by Catia and OCC-TNaming. At least the interface looks the same. The paper was nowhere to download. I had to buy it. If someone is interested I can send it via E-Mail. 

&lt;!--T:10--&gt;
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.29.2836&amp;rep=rep1&amp;type=pdf Dago AGBODAN, David MARCHEIX and Guy PIERRA, &quot;PERSISTENT NAMING FOR PARAMETRIC MODELS&quot;]
: Interesting approach via shell-graphs, tackles the point four on the list by reusing faces/edges not changed. 

&lt;!--T:11--&gt;
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.106.3087&amp;rep=rep1&amp;type=pdf Duhwan Mun and Soonhung Han, &quot;Identification of Topological Entities and Naming Mapping for Parametric CAD Model Exchanges&quot;]
: Very good overview and Examples

&lt;!--T:12--&gt;
* and some more to come....

== Organizing == &lt;!--T:13--&gt;


== Next actions == &lt;!--T:14--&gt;
* Defining the scope
* Python test cases
* Interface in Part::TopoShape (+ python binding)


&lt;!--T:15--&gt;
[[Category:Roadmap]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>New homepage</title>
    <ns>0</ns>
    <id>40435</id>
    <revision>
      <id>116275</id>
      <parentid>116274</parentid>
      <timestamp>2014-10-25T18:12:38Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <sha1>hyccgxf2i3i6sj6xhmid1ezmb45ls5x</sha1>
      <text xml:space="preserve" bytes="29271">{{Note|Warning|This is a space to throw ideas for a new formatting of the documentation homepage, table of contents and hubs (the idea is to merge both into one). Please do not translate!

Inspirations &amp; ideas: 
* http://manuals.info.apple.com/MANUALS/1000/MA1569/en_US/ipad_2_user_guide.pdf
* https://docs.djangoproject.com/en/1.6/
* Tutorials are not a standalone link but each section should have a box with related leaning material and tutorials
* '''HELP NEEDED!''' Do some cleanup work on the page marked with &quot;CLEANUP&quot; below, and add the missing tools in workbenches}}

__NOTOC__



{{Rightbox|Learning|
Aside from the documentation below, this wiki contains a lot of [[:Category:Tutorials|tutorials]]. See the sideboxes below for tutorials and learning material related to each subject.}}
=== Welcome! ===

This is the documentation website of [http://www.freecadweb.org FreeCAD]. It is written by the community of FreeCAD users and developers, and is continuously being updated and extended. It might therefore contain errors, inaccuracies, or articles that describe functionality that is not yet available on the version you have installed. We try our best to fix these and make this documentation better, don't hesitate to [[Help FreeCAD|help and contribute]]!
{{Clear}}

== Discovering FreeCAD ==

[[Image:Freecad default.jpg|1024px|center]] 

FreeCAD is an open-source general purpose parametric 3D CAD modeler, made for product design, that is, anything you plan to build in the real world. It is mainly made for two categories of users: '''Professional users''' from the fields of mechanical engineering and product design but also from a wider range of uses around engineering, such as architecture or other engineering specialties, and also '''hobbyist and casual users''' who need a tool to model objects they want to build or 3D print. It can also be used by '''developers''' who wish to build their own application using FreeCAD as a base.

Modeling for product design is usually a complex task, where precision is important. FreeCAD is therefore also a complex tool with a fair learning curve. This documentation will hopefully help to make this learning phase an interesting and enjoyable experience.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Discovering and installing FreeCAD ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

{{Rightbox|Learning|

[[Basic modeling tutorial]]: Learn some basic ways to create simple geometry


[[Video tutorials]]: Discover the extensive collections of FreeCAD videos made by community members}}

* [[About FreeCAD]]: A better and deeper description of the FreeCAD project and application
* [[Feature list|Features list]]: A list of the main features you will find in FreeCAD '''CLEANUP'''
* [[Screenshots]]: A collection of screenshots showing how the FreeCAD application looks like '''CLEANUP'''
* [[Download]] instructions, or the best ways to get or update FreeCAD depending on your platform
* Detailed installation instructions for [[Install on Windows|Windows]], [[Install on Unix|Linux]] and [[Install on Mac|Mac]]
* [[FAQ]]: The most frequent asked questions. This will help you with frequent problems and questions
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== First steps ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Getting started]]: A quick overview of the FreeCAD application and its typical workflows
* [[Mouse Model|Navigating in the 3D space]]: A complete description of the different ways to use the mouse in FreeCAD
* [[Property editor|Working with parametric objects]] '''CLEANUP'''
* [[Import Export|Import / Export]]: How importing and exporting to different file formats work in FreeCAD
&lt;/div&gt;
&lt;/div&gt;

== Working with workbenches ==

The FreeCAD interface is based on the concept of [[workbenches]]. Workbenches are sets of tools typically designed for a specific task. Switching between these workbenches changes several parts of the FreeCAD interface such as toolbars and menus. Most of the tasks you will do in FreeCAD will take place inside one or more of these workbenches.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Part.png|16px]] Part workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Part Module|Part Workbench]] provides basic tools for working with solid parts: primitives, such as cube and sphere, and simple geometric operations and boolean operations. The Part workbench provides the foundation of FreeCAD's geometry system, and is used by almost all other workbenches.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Part_Box.png|16px]] [[Part_Box|Box]]
* [[Image:Part_Cone.png|16px]] [[Part_Cone|Cone]]
* [[Image:Part_Cylinder.png|16px]] [[Part_Cylinder|Cylinder]]
* [[Image:Part_Sphere.png|16px]] [[Part_Sphere|Sphere]]
* [[Image:Part_Torus.png|16px]] [[Part_Torus|Torus]]
* [[Image:Part_CreatePrimitives.png|16px]] [[Part_CreatePrimitives|CreatePrimitives]]
||
* [[Image:Part_Shapebuilder.png|16px]] [[Part_Shapebuilder|Shapebuilder]]
* [[Image:Part_Booleans.png|16px]] [[Part_Booleans|Booleans]]
* [[Image:Part_Fuse.png|16px]] [[Part_Fuse|Fuse]]
* [[Image:Part_Common.png|16px]] [[Part_Common|Common]]
* [[Image:Part_Cut.png|16px]] [[Part_Cut|Cut]]
||
* [[Image:Part_Extrude.png|16px]] [[Part_Extrude|Extrude]]
* [[Image:Part_Fillet.png|16px]] [[Part_Fillet|Fillet]]
* [[Image:Part_Revolve.png|16px]] [[Part_Revolve|Revolve]]
* [[Image:Part_Section.png|16px]] [[Part_Section|Section]]
* [[Image:Part_SectionCross.png|16px]] [[Part_SectionCross|Cross sections]]
||
* [[Image:Part_Chamfer.png|16px]] [[Part_Chamfer|Chamfer]]
* [[Image:Part_Mirror.png|16px]] [[Part_Mirror|Mirror]]
* [[Image:Part_RuledSurface.png|16px]] [[Part_RuledSurface|Ruled Surface]]
* [[Image:Part_Sweep.png|16px]] [[Part_Sweep|Sweep]]
* [[Image:Part_Loft.png|16px]] [[Part_Loft|Loft]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Draft.png|16px]] Draft workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Draft tutorial]]: A slightly outdated but still useful tutorial showing how to use the Draft tools}}
The [[Draft Module|Draft Workbench]] provides tools to do basic 2D CAD drafting tasks: lines, circles, etc... and also provides generic handy tools that work with all FreeCAD objects, such as move, rotate or scale. It also provides several drawing aids, such as grid and snapping.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Draft_Line.png|16px]] [[Draft_Line|Line]]
* [[Image:Draft_Wire.png|16px]] [[Draft_Wire|Wire]]
* [[Image:Draft_Circle.png|16px]] [[Draft_Circle|Circle]]
* [[Image:Draft_Arc.png|16px]] [[Draft_Arc|Arc]]
* [[Image:Draft_Ellipse.png|16px]] [[Draft_Ellipse|Ellipse]]
* [[Image:Draft_Polygon.png|16px]] [[Draft_Polygon|Polygon]]
* [[Image:Draft_Rectangle.png|16px]] [[Draft_Rectangle|Rectangle]]
* [[Image:Draft_Text.png|16px]] [[Draft_Text|Text]]
||
* [[Image:Draft_Dimension.png|16px]] [[Draft_Dimension|Dimension]]
* [[Image:Draft_BSpline.png|16px]] [[Draft_BSpline|BSpline]]
* [[Image:Draft_Point.png|16px]] [[Draft_Point|Point]]
* [[Image:Draft_ShapeString.png|16px]] [[Draft_ShapeString|ShapeString]]
* [[Image:Draft_Facebinder.png|16px]] [[Draft_Facebinder|Facebinder]]
* [[Image:Draft_BezCurve.png|16px]] [[Draft_BezCurve|Bezier Curve]]
* [[Image:Draft_Move.png|16px]] [[Draft_Move|Move]]
* [[Image:Draft_Rotate.png|16px]] [[Draft_Rotate|Rotate]]
||
* [[Image:Draft_Offset.png|16px]] [[Draft_Offset|Offset]]
* [[Image:Draft_Trimex.png|16px]] [[Draft_Trimex|Trim/Extend]]
* [[Image:Draft_Upgrade.png|16px]] [[Draft_Upgrade|Upgrade]]
* [[Image:Draft_Downgrade.png|16px]] [[Draft_Downgrade|Downgrade]]
* [[Image:Draft_Scale.png|16px]] [[Draft_Scale|Scale]]
* [[Image:Draft_PutOnSheet.png|16px]] [[Draft_Drawing|Drawing]]
* [[Image:Draft_Edit.png|16px]] [[Draft_Edit|Edit]]
* [[Image:Draft_WireToBSpline.png|16px]] [[Draft_WireToBSpline|Wire to BSpline]]
||
* [[Image:Draft_AddPoint.png|16px]] [[Draft_AddPoint|Add point]]
* [[Image:Draft_DelPoint.png|16px]] [[Draft_DelPoint|Delete point]]
* [[Image:Draft_Shape2DView.png|16px]] [[Draft_Shape2DView|Shape 2D View]]
* [[Image:Draft_Draft2Sketch.png|16px]] [[Draft_Draft2Sketch|Draft to Sketch]]
* [[Image:Draft_Array.png|16px]] [[Draft_Array|Array]]
* [[Image:Draft_PathArray.png|16px]] [[Draft_PathArray|Path Array]]
* [[Image:Draft_Clone.png|16px]] [[Draft_Clone|Clone]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Mesh.png|16px]] Mesh workbench===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Mesh Module|Mesh workbench]] is dedicated to working with triangular meshes. Although these are not the primary type of geometry to work with in FreeCAD, meshes have a lot of uses, and are fully supported. This workbench contain many tools to work with, fix and analyze meshes.
{{Clear}}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Sketcher.png|16px]] Sketcher workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Sketcher Tutorial]]: A complete tutorial to show you in depth how the sketcher works}}
The [[Sketcher Module|Sketcher]] contains tools to build and edit constraint-driven 2D sketches. These are the base blocks on which you can build complex parametric geometry.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Sketcher_NewSketch.png‎‎|16px]] [[Sketcher_NewSketch|New sketch]]
* [[Image:Sketcher_EditSketch.svg|16px]] [[Sketcher_EditSketch|Edit sketch]]
* [[Image:Sketcher_LeaveSketch.png|16px]] [[Sketcher_LeaveSketch|Leave sketch]]
* [[Image:Sketcher_ViewSketch.png‎|16px]] [[Sketcher_ViewSketch|View sketch]]
* [[Image:Sketcher_MapSketch.png‎|16px]] [[Sketcher_MapSketch|Map sketch to face]]
* [[Sketcher_Reorient|Reorient sketch ]]
* [[Sketcher_Validate|Validate sketch]]
* [[Image:Sketcher_CreatePoint.png|16px]] [[Sketcher_Point|Point]]
* [[Image:Sketcher_Line.png|16px]] [[Sketcher_Line|Line by 2 point]]
* [[Image:Sketcher_Arc.png|16px]] [[Sketcher_Arc|Arc]]
||
* [[Image:Sketcher_Create3PointArc.svg|16px]] [[Sketcher_Arc3Point|Arc by 3 Point]]
* [[Image:Sketcher_Circle.png|16px]] [[Sketcher_Circle|Circle]]
* [[Image:Sketcher_Create3PointCircle.svg|16px]] [[Sketcher_Circle3Point|Circle by 3 Point]]
* [[Image:Sketcher_CreatePolyline.png|16px]] [[Sketcher_Polyline|Polyline]]
* [[Image:Sketcher_CreateRectangle.png|16px]] [[Sketcher_Rectangle|Rectangle]]
* [[Image:Sketcher_CreateTriangle.svg|16px]] [[Sketcher_Triangle|Triangle]]
* [[Image:Sketcher_CreateSquare.svg|16px]] [[Sketcher_Square|Square]]
* [[Image:Sketcher_CreatePentagon.svg|16px]] [[Sketcher_Pentagon|Pentagon]]
* [[Image:Sketcher_CreateHexagon.svg|16px]] [[Sketcher_Hexagon|Hexagon]]
* [[Image:Sketcher_CreateHeptagon.svg|16px]] [[Sketcher_Heptagon|Heptagon]]
* [[Image:Sketcher_CreateOctagon.svg|16px]] [[Sketcher_Octagon|Octagon]]
||
* [[Image:Sketcher_CreateSlot.svg|16px]] [[Sketcher_Slot|Slot]]
* [[Image:Sketcher_CreateFillet.png|16px]] [[Sketcher_Fillet|Fillet]]
* [[Image:Sketcher_Trimming.png|16px]] [[Sketcher_Trimming|Trimming]]
* [[Image:Sketcher_External.png|16px]] [[Sketcher_External|External Geometry]]
* [[Image:Sketcher_AlterConstruction.png|16px]] [[Sketcher_ConstructionMode|Construction Mode]]
* [[Image:Constraint_PointOnPoint.png|16px]] [[Constraint_PointOnPoint|Coincident]]
* [[Image:Constraint_PointOnObject.png|16px]] [[Constraint_PointOnObject|Point On Object]]
* [[Image:Constraint_Vertical.png|16px]] [[Constraint_Vertical|Vertical]]
* [[Image:Constraint_Horizontal.png|16px]] [[Constraint_Horizontal|Horizontal]]
* [[Image:Constraint_Parallel.png|16px]] [[Constraint_Parallel|Parallel]]
||
* [[Image:Constraint_Perpendicular.png|16px]] [[Constraint_Perpendicular|Perpendicular]]
* [[Image:Constraint_Tangent.png|16px]] [[Constraint_Tangent|Tangent]]
* [[Image:Constraint_EqualLength.png|16px]] [[Constraint_EqualLength|Equal Length]]
* [[Image:Constraint_Symmetric.png|16px]] [[Constraint_Symmetric|Symmetric]]
* [[Image:Sketcher_ConstrainLock.png‎|16px]] [[Constraint_Lock|Lock]]
* [[Image:Constraint_HorizontalDistance.png‎|16px]] [[Constraint_HorizontalDistance|Horizontal Distance]]
* [[Image:Constraint_VerticalDistance.png|16px]] [[Constraint_VerticalDistance|Vertical Distance]]
* [[Image:Constraint_Length.png|16px]] [[Constraint_Length|Length]]
* [[Image:Constraint_Radius.png|16px]] [[Constraint_Radius|Radius]]
* [[Image:Constraint_InternalAngle.png|16px]] [[Constraint_InternalAngle|InternalAngle]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_PartDesign.png|16px]] Part design workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[PartDesign Workbench|Part design workbench]] contains advanced tools to build solid parts from sketches. It also contains all the tools from the sketcher, and only produces solid geometry.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:PartDesign_Pad.png|16px]] [[PartDesign_Pad|Pad]]
* [[Image:PartDesign_Pocket.png|16px]] [[PartDesign_Pocket|Pocket]]
* [[Image:PartDesign_Revolution.png|16px]] [[PartDesign_Revolution|Revolution]]
||
* [[Image:PartDesign_Groove.png|16px]] [[PartDesign_Groove|Groove]]
* [[Image:PartDesign_Fillet.png|16px]] [[PartDesign_Fillet|Fillet]]
* [[Image:PartDesign_Chamfer.png|16px]] [[PartDesign_Chamfer|Chamfer]]
||
* [[Image:PartDesign_Draft.png|16px]] [[PartDesign_Draft|Draft]]
* [[Image:PartDesign_Mirrored.png|16px]] [[PartDesign_Mirrored|Mirrored]]
* [[Image:PartDesign_LinearPattern.png|16px]] [[PartDesign_LinearPattern|Linear Pattern]]
||
* [[Image:PartDesign_PolarPattern.png|16px]] [[PartDesign_PolarPattern|Polar Pattern]]
* [[Image:PartDesign_Scaled.png|16px]] [[PartDesign_Scaled|Scaled]]
* [[Image:PartDesign_MultiTransform.png|16px]] [[PartDesign_MultiTransform|MultiTransform]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Arch.png|16px]] Arch workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Arch tutorial]]: A complete tutorial that describes the whole process of modeling a building with the Arch workbench step by step


[[Arch mesh-based tutorial]]: An article describing how to build architectural models on top of mesh modesl imported from other applications}}
The [[Arch Module|Arch workbench]] contains tools to work with BIM projects (civil engineering and architecture). It also contains all the tools from the Draft workbench.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Arch_Wall.png|16px]] [[Arch_Wall|Wall]]
* [[Image:Arch_Structure.png|16px]] [[Arch_Structure|Structural element]]
* [[Image:Arch_Rebar.png|16px]] [[Arch_Rebar|Reinforcing bar]]
* [[Image:Arch_Floor.png|16px]] [[Arch_Floor|Floor]]
* [[Image:Arch_Building.png|16px]] [[Arch_Building|Building]]
||
* [[Image:Arch_Site.png|16px]] [[Arch_Site|Site]]
* [[Image:Arch_Window.png|16px]] [[Arch_Window|Window]]
* [[Image:Arch_SectionPlane.png|16px]] [[Arch_SectionPlane|Section Plane]]
* [[Image:Arch_Axis.png|16px]] [[Arch_Axis|Axes system]]
||
* [[Image:Arch_Roof.png|16px]] [[Arch_Roof|Roof]]
* [[Image:Arch_Space.png|16px]] [[Arch_Space|Space]]
* [[Image:Arch_Stairs.png|16px]] [[Arch_Stairs|Stairs]]
* [[Image:Arch_Panel.png|16px]] [[Arch_Panel|Panel]]
||
* [[Image:Arch_Frame.png|16px]] [[Arch_Frame|Frame]]
* [[Image:Arch_Add.png|16px]] [[Arch_Add|Add]]
* [[Image:Arch_Remove.png|16px]] [[Arch_Remove|Remove]]
* [[Image:Arch_Survey.png|16px]] [[Arch_Survey|Survey]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Drawing.png|16px]] Drawing workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Drawing Module|Drawing workbench]] handles the creation and manipulation of 2D drawing sheets, used for displaying views of your 3D work in 2D. These sheets can then be exported to 2D applications or printed.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Drawing_New.png|16px]] [[Drawing_Open_SVG|Open SVG graphic]]
* [[Image:Drawing_Landscape_A3.png|16px]] [[Drawing_Landscape_A3|New drawing page]]
* [[Image:Drawing_View.png|16px]] [[Drawing_View|Insert a view]]
||
* [[Image:Drawing_Annotation.png|16px]] [[Drawing_Annotation|Annotation]]
* [[Image:Drawing_Clip.png|16px]] [[Drawing_Clip|Clip]]
||
* [[Image:Drawing_Openbrowser.png|16px]] [[Drawing_Openbrowser|Open Browser]]
* [[Image:Drawing_Orthoviews.png|16px]] [[Drawing_Orthoviews|Ortho Views]]
||
* [[Image:Drawing_Symbol.png|16px]] [[Drawing_Symbol|Symbol]]
* [[Image:Drawing_Save.png|16px]] [[Drawing_Save|Save sheet]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Raytracing.png|16px]] Raytracing workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Raytracing Module|Raytracing workbench]] offers tools to interface with external renderers such as povray or luxrender. Right from inside FreeCAD, this workbench allows you to produce high-quality renderings from your models.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Raytracing_New.png|16px]] [[Raytracing_New|New PovRay project]]
* [[Image:Raytracing_Lux.png|16px]] [[Raytracing_Lux|New LuxRender project]]
||
* [[Image:Raytracing_InsertPart.png|16px]] [[Raytracing_InsertPart|Insert part]]
* [[Image:Raytracing_ResetCamera.png|16px]] [[Raytracing_ResetCamera|Reset camera]]
||
* [[Image:Raytracing_ExportProject.png|16px]] [[Raytracing_ExportProject|Export project]]
||
* [[Image:Raytracing_Render.png|16px]] [[Raytracing_Render|Render]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Mesh.png|16px]] FEM workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Fem Workbench|Fem workbench]] permits the performing of pre- and post-processing FEM calculations and display the results graphically

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Fem_FemMesh.svg|16px]] [[FEM Create|Create FEM mesh]]
* [[Image:Fem_Material.svg|16px]] [[FEM Material|Mechanical material]]
* [[Image:Fem_Analysis.svg|16px]] [[FEM Analysis|New analysis]]
||
* [[Image:Fem_NewAnalysis.svg|16px]] [[FEM Calculation|Start calculation]]
* [[Image:Fem_FemMesh_createnodebypoly.svg|16px]] [[FEM DefineNodes|Create nodes set]]
* [[Image:Fem_ConstraintFixed.svg|16px]] [[FEM FixedConstraint|Fixed constraint]]
||
* [[Image:Fem_ConstraintForce.svg|16px]] [[FEM ForceConstraint|Force constraint]]
* [[Image:Fem_ConstraintBearing.svg|16px]] [[FEM BearingConstraint|Bearing constraint]]
* [[Image:Fem_ConstraintGear.svg|16px]] [[FEM GearConstraint|Gear constraint]]
||
* [[Image:Fem_ConstraintPulley.svg|16px]] [[FEM PulleyConstraint|Pulley constraint]]
* [[Image:Fem_Result.svg|16px]] [[FEM ShowResult|Show result]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_OpenSCAD.png|16px]] OpenSCAD workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[OpenSCAD Module|OpenSCAD workbench]] offer tools for interoperability with OpenSCAD and repairing CSG model history

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:OpenSCAD_AddOpenSCADElement.png|16px]] [[OpenSCAD_AddOpenSCADElement|Add OpenSCAD Element]]
* [[Image:OpenSCAD_MeshBoolean.png|16px]] [[OpenSCAD_MeshBoolean|Mesh Boolean]]
* [[Image:OpenSCAD_ColorCodeShape.png|16px]] [[OpenSCAD_ColorCodeShape|Color Code Shape]]
||
* [[Image:OpenSCAD_ReplaceObject.png|16px]] [[OpenSCAD_ReplaceObject|Replace Object]]
* [[Image:OpenSCAD_RemoveSubtree.png|16px]] [[OpenSCAD_RemoveSubtree|Remove Subtree]]
* [[Image:OpenSCAD_RefineShapeFeature.png|16px]] [[OpenSCAD_RefineShapeFeature|Refine Shape]]
||
* [[Image:OpenSCAD_IncreaseTolerance.png|16px]] [[OpenSCAD_IncreaseTolerance|Increase Tolerance]]
* [[Image:OpenSCAD_ExpandPlacements.png|16px]] [[OpenSCAD_ExpandPlacements|Expand Placements]]
* [[Image:OpenSCAD_ExplodeGroup.png|16px]] [[OpenSCAD_ExplodeGroup|Explode Group]]
||
* [[Image:OpenSCAD_Hull.png|16px]] [[OpenSCAD_Hull|Hull]]
* [[Image:OpenSCAD_Minkowski.png|16px]] [[OpenSCAD_Minkowski|Minkowski]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Image.png|16px]] Image workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Image Module|Image workbench]] features tools to work with bitmap images, and import bitmap images as planes in the FreeCAD document, so they can be used for tracing over.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Image_Import.png|16px]] [[Image_Import]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[Image:Workbench_Robot.png|16px]] Robot workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[Robot Module|Robot workbench]] provides a complete interface to simulate and study robot movements

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Robot_CreateRobot.png|16px]] [[Robot_CreateRobot|Create a robot]]
* [[Image:Robot_Simulate.png|16px]] [[Robot_Simulate|Simulate a trajectory]]
* [[Image:Robot_Export.png|16px]] [[Robot_Export|Export a trajectory]]
* [[Image:Robot_SetHomePos.png|16px]] [[Robot_SetHomePos|Set home positon]]
* [[Image:Robot_RestoreHomePos.png|16px]] [[Robot_RestoreHomePos|Restore home positon]]
||
* [[Image:Robot_CreateTrajectory.png|16px]] [[Robot_CreateTrajectory|Create a trajectory]]
* [[Image:Robot_SetDefaultOrientation.png|16px]] [[Robot_SetDefaultOrientation|Set default orientation]]
* [[Image:Robot_SetDefaultValues.png|16px]] [[Robot_SetDefaultValues|Set default speed parameter]]
* [[Image:Robot_InsertWaypoint.png|16px]] [[Robot_InsertWaypoint|Insert a waypoint]]
* [[Image:Robot_InsertWaypointPre.png|16px]] [[Robot_InsertWaypointPre|Insert a waypoint]]
||
* [[Image:Robot_Edge2Trac.png|16px]] [[Robot_Edge2Trac|Create a trajectory]]
* [[Image:Robot_TrajectoryDressUp.png|16px]] [[Robot_TrajectoryDressUp|Dress-up a trajectory]]
* [[Image:Robot_TrajectoryCompound.png|16px]] [[Robot_TrajectoryCompound|Trajectory compound]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[File:FreeCAD-Ship-Ico.png|16px]] Ship workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[FreeCAD-Ship s60 tutorial|Ship s60 tutorial part 1]] and [[FreeCAD-Ship s60 tutorial (II)|part 2]]: A tutorial showing how to work with a symmetric monohull ship in the Ship workbench}}
The [[FreeCADShip Workbench|Ship workbench]] is a suite of tools to create and work with ship hulls.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:FreeCAD-Ship-Ico.png|16px]] [[Ship_CreateShip|Create new ship]]
* [[Image:FreeCAD-Ship-LoadIco.png|16px]] [[Ship_LoadExample|Load an example]]
||
* [[Image:FreeCAD-Ship-OutlineDrawIco.png|16px]] [[Ship_OutlineDraw|Draw outline]]
||
* [[Image:FreeCAD-Ship-AreaCurveIco.png|16px]] [[Ship_AreasCurve|Transversal areas curve]]
||
* [[Image:FreeCAD-Ship-HydrostaticsIco.png‎|16px]] [[Ship_Hydrostatics|Hydrostatics tool]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[File:Plot_Save.png|16px]] Plot workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[Plot Module|Plot workbench]] allows to edit and save output plots created from other modules and tools.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Plot_Save.png|16px]] [[Plot_Save|Save plot]]
* [[Image:Plot_Axes.png|16px]] [[Plot_Axes|Axes]]
||
* [[Image:Plot_Series.png|16px]] [[Plot_Series|Series]]
* [[Image:Plot_Grid.png|16px]] [[Plot_Grid|Grid]]
||
* [[Image:Plot_Legend.png|16px]] [[Plot_Legend|Legend]]
* [[Image:Plot_Labels.png|16px]] [[Plot_Labels|Labels]]
||
* [[Image:Plot_Positions.png|16px]] [[Plot_Positions|Positions]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== [[File:Spreadsheet Create.png|16px]] Spreadsheet workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Spreadsheet Module|Spreadsheet workbench]] permits the creation and manipulation of spreadsheet data, that can be extracted from FreeCAD models.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Spreadsheet Create.png|16px]] [[Spreadsheet Create|Spreadsheet]]
||
* [[Image:Spreadsheet Controller.png|16px]] [[Spreadsheet Controller|Cell Controller]]
||
* [[Image:Spreadsheet PropertyController.png|16px]] [[Spreadsheet PropertyController|Property Controller]]
|}
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Customizing FreeCAD ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The workbench system is not to be considered as a limitation to your freedom, but simply a way to organize large quantities of tools and offer different workflows inside a single application. They are however extensively customizable, so you can tailor your interface to your preferences and needs.

* [[Interface Customization]]: How to customize the interface, workbench toolbars and keyboard shortcuts.
* [[Preferences Editor|User preferences]]: Understand how those are organized '''CLEANUP'''
* [[Macros]]: How to create your own tools in FreeCAD
* [[Macros recipes]]: Add tools created by FreeCAD users to your installation
&lt;/div&gt;
&lt;/div&gt;

== Python scripting ==

Strong support to python scripting is one of the main strengths of FreeCAD. Almost any part of the FreeCAD application is accessible to python scripting: the core application, the interface, the 3D view, and almost all of the modules functionality. Python scripting can be used from the FreeCAD python console, from macros, from external scripts or even from external applications, FreeCAD being importable as a python module. 


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== The basics ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

{{Rightbox|Learning|
[[Python scripting tutorial|FreeCAD scripting tutorial]]: A general look at python scripting in FreeCAD and a gentle introduction to how to work with it...


'''Tip''': If you are interested in helping to develop FreeCAD, even if you work with C++, the python documentation pages are worth reading, since in FreeCAD things work very similarly between python and C++.}}

* [[Introduction to Python]]: See also other Python tutorials at the bottom of this page
* [[Document structure|The FreeCAD Document]]: Description of the FreeCAD document structure '''CLEANUP'''
* [[FreeCAD Scripting Basics]]: The base concepts of FreeCAD scripting
* [[Gui Command]]: Adding custom commands to the GUI
* Using mixed [[Units]] in FreeCAD
* [[Scenegraph|The Coin/Inventor scenegraph]]: How the FreeCAD scene representation works
* [[Pivy]]: How to access and modify the scenegraph
* [[PyQt]]: How to access the interface, and modify its contents
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] in another Qt application with PyQt
* [[Scripted objects]]: How to make 100% Python-scripted objects in FreeCAD
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Modules ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [http://www.freecadweb.org/api Python API reference]: The auto-generated python API reference of FreeCAD
* The [[Builtin modules]] contain the general functionality such as opening and saving files
* [[Mesh Scripting]]: How to interact with the [[Mesh Module]]
* [[Topological data scripting|Part scripting]]: How to interact with the [[Part Module]]
* [[PythonOCC]]: How to unleash the whole Open CASCADE power
* [[Mesh to Part]]: Converting between object types
* [[Drawing Module]]: Automating the 3D-to-2D process
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Examples ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Code snippets]] : A collection of pieces of FreeCAD Python code, to serve as ingredients in your scripts...
* [[Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD]]: How to import FreeCAD as a Python module in other applications
* [[FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is part of the Draft module.
&lt;/div&gt;
&lt;/div&gt;

== Development ==

The following articles will be useful to you if you wish to look deeper into the FreeCAD source code, modify it, compile FreeCAD yourself on your machine, or start developing another application using FreeCAD as a base.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot;&gt;
=== Development documentation ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Source code management]]
* [[Tracker|Find assistance]] when you have a problem or think you may have found a bug
* [[CompileOnWindows|Compiling on Windows]]
* [[CompileOnUnix|Compiling on Unix]]
* [[CompileOnMac|Compiling on Mac]]
* [[Licence|Licence details]] about the FreeCAD licences
* [[Third Party Libraries]]
* [[Third Party Tools]]
* [[Start up and Configuration]]
* [[Source documentation]]
* The [[FreeCAD Build Tool]]
* [[Module_Creation|Adding an application module]] to FreeCAD
* [[Debugging]] FreeCAD
* [[Testing]] FreeCAD
* Add [[Gui Command|Features]] to FreeCAD or a Workbench
* [[Branding]] or ''how to give FreeCAD a unique look''
* [[Artwork]] we made for FreeCAD, that you can freely reuse
* [[Localisation|Translating FreeCAD]]
* [[Extra python modules]], or ''how to extend python functionality within FreeCAD''
&lt;/div&gt;
&lt;/div&gt;


== Reference ==

* [[:Category:Command Reference|Commands reference]]: The complete list of FreeCAD commands
* [[:Category:Tutorials|Tutorials]]: All available FreeCAD tutorials
* [http://www.freecadweb.org/api Python API reference]: The auto-generated python API reference of FreeCAD
* [http://www.freecadweb.org/wiki/index.php?title=Macros_recipes Macro recipes]</text>
    </revision>
  </page>
  <page>
    <title>New homepage quick61</title>
    <ns>0</ns>
    <id>44082</id>
    <revision>
      <id>116381</id>
      <parentid>116380</parentid>
      <timestamp>2014-10-27T19:14:39Z</timestamp>
      <contributor>
        <username>Quick61</username>
        <id>3300</id>
      </contributor>
      <comment>/* 16px Part design workbench */</comment>
      <sha1>a08r2kk0xej9pgaac0dxpar4sv1w4wg</sha1>
      <text xml:space="preserve" bytes="29907">{{VeryImportantMessage|SAMPLE ONLY - Not For Release - Do not Translate''}}

{{Note|Warning|This is a space to throw ideas for a new formatting of the documentation homepage, table of contents and hubs (the idea is to merge both into one). Please do not translate!

Inspirations &amp; ideas: 
* http://manuals.info.apple.com/MANUALS/1000/MA1569/en_US/ipad_2_user_guide.pdf
* https://docs.djangoproject.com/en/1.6/
* Tutorials are not a standalone link but each section should have a box with related leaning material and tutorials
* '''HELP NEEDED!''' Do some cleanup work on the page marked with &quot;CLEANUP&quot; below, and add the missing tools in workbenches}}

__NOTOC__



{{Rightbox|Learning|
Aside from the documentation below, this wiki contains a lot of [[:Category:Tutorials|tutorials]]. See the sideboxes below for tutorials and learning material related to each subject.}}
=== Welcome! ===

This is the documentation website of [http://www.freecadweb.org FreeCAD]. It is written by the community of FreeCAD users and developers, and is continuously being updated and extended. It might therefore contain errors, inaccuracies, or articles that describe functionality that is not yet available on the version you have installed. We try our best to fix these and make this documentation better, don't hesitate to [[Help FreeCAD|help and contribute]]!
{{Clear}}

== Discovering FreeCAD ==

[[Image:Freecad default.jpg|1024px|center]] 

FreeCAD is an open-source general purpose parametric 3D CAD modeler, made for product design, that is, anything you plan to build in the real world. It is mainly made for two categories of users: '''Professional users''' from the fields of mechanical engineering and product design but also from a wider range of uses around engineering, such as architecture or other engineering specialties, and also '''hobbyist and casual users''' who need a tool to model objects they want to build or 3D print. It can also be used by '''developers''' who wish to build their own application using FreeCAD as a base.

Modeling for product design is usually a complex task, where precision is important. FreeCAD is therefore also a complex tool with a fair learning curve. This documentation will hopefully help to make this learning phase an interesting and enjoyable experience.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Discovering and installing FreeCAD ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

{{Rightbox|Learning|

[[Basic modeling tutorial]]: Learn some basic ways to create simple geometry


[[Video tutorials]]: Discover the extensive collections of FreeCAD videos made by community members}}

* [[About FreeCAD]]: A better and deeper description of the FreeCAD project and application
* [[Feature list|Features list]]: A list of the main features you will find in FreeCAD '''CLEANUP'''
* [[Screenshots]]: A collection of screenshots showing how the FreeCAD application looks like '''CLEANUP'''
* [[Download]] instructions, or the best ways to get or update FreeCAD depending on your platform
* Detailed installation instructions for [[Install on Windows|Windows]], [[Install on Unix|Linux]] and [[Install on Mac|Mac]]
* [[FAQ]]: The most frequent asked questions. This will help you with frequent problems and questions
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== First steps ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Getting started]]: A quick overview of the FreeCAD application and its typical workflows
* [[Mouse Model|Navigating in the 3D space]]: A complete description of the different ways to use the mouse in FreeCAD
* [[Property editor|Working with parametric objects]] '''CLEANUP'''
* [[Import Export|Import / Export]]: How importing and exporting to different file formats work in FreeCAD
&lt;/div&gt;
&lt;/div&gt;
== Working with workbenches ==

The FreeCAD interface is based on the concept of [[workbenches]]. Workbenches are sets of tools typically designed for a specific task. Switching between these workbenches changes several parts of the FreeCAD interface such as toolbars and menus. Most of the tasks you will do in FreeCAD will take place inside one or more of these workbenches.
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Part.png|16px]] Part workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[Part Module|Part Workbench]] provides basic tools for working with solid parts: primitives, such as cube and sphere, and simple geometric operations and boolean operations. The Part workbench provides the foundation of FreeCAD's geometry system, and is used by almost all other workbenches.
{{Rightspacer}}
{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Part_Box.png|16px]] [[Part_Box|Box]]
* [[Image:Part_Cone.png|16px]] [[Part_Cone|Cone]]
* [[Image:Part_Cylinder.png|16px]] [[Part_Cylinder|Cylinder]]
* [[Image:Part_Sphere.png|16px]] [[Part_Sphere|Sphere]]
* [[Image:Part_Torus.png|16px]] [[Part_Torus|Torus]]
* [[Image:Part_CreatePrimitives.png|16px]] [[Part_CreatePrimitives|CreatePrimitives]]
* [[Image:Part_Shapebuilder.png|16px]] [[Part_Shapebuilder|Shapebuilder]]
||
* [[Image:Part_Booleans.png|16px]] [[Part_Booleans|Booleans]]
* [[Image:Part_Fuse.png|16px]] [[Part_Fuse|Fuse]]
* [[Image:Part_Common.png|16px]] [[Part_Common|Common]]
* [[Image:Part_Cut.png|16px]] [[Part_Cut|Cut]]
* [[Image:Part_Extrude.png|16px]] [[Part_Extrude|Extrude]]
* [[Image:Part_Fillet.png|16px]] [[Part_Fillet|Fillet]]
* [[Image:Part_Revolve.png|16px]] [[Part_Revolve|Revolve]]
||
* [[Image:Part_Section.png|16px]] [[Part_Section|Section]]
* [[Image:Part_SectionCross.png|16px]] [[Part_SectionCross|Cross sections]]
* [[Image:Part_Chamfer.png|16px]] [[Part_Chamfer|Chamfer]]
* [[Image:Part_Mirror.png|16px]] [[Part_Mirror|Mirror]]
* [[Image:Part_RuledSurface.png|16px]] [[Part_RuledSurface|Ruled Surface]]
* [[Image:Part_Sweep.png|16px]] [[Part_Sweep|Sweep]]
* [[Image:Part_Loft.png|16px]] [[Part_Loft|Loft]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Draft.png|16px]] Draft workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Draft tutorial]]: A slightly outdated but still useful tutorial showing how to use the Draft tools}}
The [[Draft Module|Draft Workbench]] provides tools to do basic 2D CAD drafting tasks: lines, circles, etc... and also provides generic handy tools that work with all FreeCAD objects, such as move, rotate or scale. It also provides several drawing aids, such as grid and snapping.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Draft_Line.png|16px]] [[Draft_Line|Line]]
* [[Image:Draft_Wire.png|16px]] [[Draft_Wire|Wire]]
* [[Image:Draft_Circle.png|16px]] [[Draft_Circle|Circle]]
* [[Image:Draft_Arc.png|16px]] [[Draft_Arc|Arc]]
* [[Image:Draft_Ellipse.png|16px]] [[Draft_Ellipse|Ellipse]]
* [[Image:Draft_Polygon.png|16px]] [[Draft_Polygon|Polygon]]
* [[Image:Draft_Rectangle.png|16px]] [[Draft_Rectangle|Rectangle]]
* [[Image:Draft_Text.png|16px]] [[Draft_Text|Text]]
* [[Image:Draft_Dimension.png|16px]] [[Draft_Dimension|Dimension]]
* [[Image:Draft_BSpline.png|16px]] [[Draft_BSpline|BSpline]]
||
* [[Image:Draft_Point.png|16px]] [[Draft_Point|Point]]
* [[Image:Draft_ShapeString.png|16px]] [[Draft_ShapeString|ShapeString]]
* [[Image:Draft_Facebinder.png|16px]] [[Draft_Facebinder|Facebinder]]
* [[Image:Draft_BezCurve.png|16px]] [[Draft_BezCurve|Bezier Curve]]
* [[Image:Draft_Move.png|16px]] [[Draft_Move|Move]]
* [[Image:Draft_Rotate.png|16px]] [[Draft_Rotate|Rotate]]
* [[Image:Draft_Offset.png|16px]] [[Draft_Offset|Offset]]
* [[Image:Draft_Trimex.png|16px]] [[Draft_Trimex|Trim/Extend]]
* [[Image:Draft_Upgrade.png|16px]] [[Draft_Upgrade|Upgrade]]
* [[Image:Draft_Downgrade.png|16px]] [[Draft_Downgrade|Downgrade]]
* [[Image:Draft_Scale.png|16px]] [[Draft_Scale|Scale]]
||
* [[Image:Draft_PutOnSheet.png|16px]] [[Draft_Drawing|Drawing]]
* [[Image:Draft_Edit.png|16px]] [[Draft_Edit|Edit]]
* [[Image:Draft_WireToBSpline.png|16px]] [[Draft_WireToBSpline|Wire to BSpline]]
* [[Image:Draft_AddPoint.png|16px]] [[Draft_AddPoint|Add point]]
* [[Image:Draft_DelPoint.png|16px]] [[Draft_DelPoint|Delete point]]
* [[Image:Draft_Shape2DView.png|16px]] [[Draft_Shape2DView|Shape 2D View]]
* [[Image:Draft_Draft2Sketch.png|16px]] [[Draft_Draft2Sketch|Draft to Sketch]]
* [[Image:Draft_Array.png|16px]] [[Draft_Array|Array]]
* [[Image:Draft_PathArray.png|16px]] [[Draft_PathArray|Path Array]]
* [[Image:Draft_Clone.png|16px]] [[Draft_Clone|Clone]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Mesh.png|16px]] Mesh workbench===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Mesh Module|Mesh workbench]] is dedicated to working with triangular meshes. Although these are not the primary type of geometry to work with in FreeCAD, meshes have a lot of uses, and are fully supported. This workbench contain many tools to work with, fix and analyze meshes.
{{Clear}}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Sketcher.png|16px]] Sketcher workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Sketcher Tutorial]]: A complete tutorial to show you in depth how the sketcher works}}
The [[Sketcher Module|Sketcher]] contains tools to build and edit constraint-driven 2D sketches. These are the base blocks on which you can build complex parametric geometry.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Sketcher_NewSketch.png‎‎|16px]] [[Sketcher_NewSketch|New sketch]]
* [[Image:Sketcher_EditSketch.svg|16px]] [[Sketcher_EditSketch|Edit sketch]]
* [[Image:Sketcher_LeaveSketch.png|16px]] [[Sketcher_LeaveSketch|Leave sketch]]
* [[Image:Sketcher_ViewSketch.png‎|16px]] [[Sketcher_ViewSketch|View sketch]]
* [[Image:Sketcher_MapSketch.png‎|16px]] [[Sketcher_MapSketch|Map sketch to face]]
* [[Sketcher_Reorient|Reorient sketch ]]
* [[Sketcher_Validate|Validate sketch]]
* [[Image:Sketcher_CreatePoint.png|16px]] [[Sketcher_Point|Point]]
* [[Image:Sketcher_Line.png|16px]] [[Sketcher_Line|Line by 2 point]]
* [[Image:Sketcher_Arc.png|16px]] [[Sketcher_Arc|Arc]]
* [[Image:Sketcher_Create3PointArc.svg|16px]] [[Sketcher_Arc3Point|Arc by 3 Point]]
* [[Image:Sketcher_Circle.png|16px]] [[Sketcher_Circle|Circle]]
* [[Image:Sketcher_Create3PointCircle.svg|16px]] [[Sketcher_Circle3Point|Circle by 3 Point]]
* [[Image:Sketcher_CreatePolyline.png|16px]] [[Sketcher_Polyline|Polyline]]
||
* [[Image:Sketcher_CreateRectangle.png|16px]] [[Sketcher_Rectangle|Rectangle]]
* [[Image:Sketcher_CreateTriangle.svg|16px]] [[Sketcher_Triangle|Triangle]]
* [[Image:Sketcher_CreateSquare.svg|16px]] [[Sketcher_Square|Square]]
* [[Image:Sketcher_CreatePentagon.svg|16px]] [[Sketcher_Pentagon|Pentagon]]
* [[Image:Sketcher_CreateHexagon.svg|16px]] [[Sketcher_Hexagon|Hexagon]]
* [[Image:Sketcher_CreateHeptagon.svg|16px]] [[Sketcher_Heptagon|Heptagon]]
* [[Image:Sketcher_CreateOctagon.svg|16px]] [[Sketcher_Octagon|Octagon]]
* [[Image:Sketcher_CreateSlot.svg|16px]] [[Sketcher_Slot|Slot]]
* [[Image:Sketcher_CreateFillet.png|16px]] [[Sketcher_Fillet|Fillet]]
* [[Image:Sketcher_Trimming.png|16px]] [[Sketcher_Trimming|Trimming]]
* [[Image:Sketcher_External.png|16px]] [[Sketcher_External|External Geometry]]
* [[Image:Sketcher_AlterConstruction.png|16px]] [[Sketcher_ConstructionMode|Construction Mode]]
* [[Image:Constraint_PointOnPoint.png|16px]] [[Constraint_PointOnPoint|Coincident]]
* [[Image:Constraint_PointOnObject.png|16px]] [[Constraint_PointOnObject|Point On Object]]
||
* [[Image:Constraint_Vertical.png|16px]] [[Constraint_Vertical|Vertical]]
* [[Image:Constraint_Horizontal.png|16px]] [[Constraint_Horizontal|Horizontal]]
* [[Image:Constraint_Parallel.png|16px]] [[Constraint_Parallel|Parallel]]
* [[Image:Constraint_Perpendicular.png|16px]] [[Constraint_Perpendicular|Perpendicular]]
* [[Image:Constraint_Tangent.png|16px]] [[Constraint_Tangent|Tangent]]
* [[Image:Constraint_EqualLength.png|16px]] [[Constraint_EqualLength|Equal Length]]
* [[Image:Constraint_Symmetric.png|16px]] [[Constraint_Symmetric|Symmetric]]
* [[Image:Sketcher_ConstrainLock.png‎|16px]] [[Constraint_Lock|Lock]]
* [[Image:Constraint_HorizontalDistance.png‎|16px]] [[Constraint_HorizontalDistance|Horizontal Distance]]
* [[Image:Constraint_VerticalDistance.png|16px]] [[Constraint_VerticalDistance|Vertical Distance]]
* [[Image:Constraint_Length.png|16px]] [[Constraint_Length|Length]]
* [[Image:Constraint_Radius.png|16px]] [[Constraint_Radius|Radius]]
* [[Image:Constraint_InternalAngle.png|16px]] [[Constraint_InternalAngle|InternalAngle]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_PartDesign.png|16px]] Part design workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

{{Rightbox|Learning|

[[Basic Part Design Tutorial]]: Tutorial written with the new FreeCAD user in mind. Designed to expose the new user to some of the basic tools available in the Part Design Workbench.}}

The [[PartDesign Workbench|Part design workbench]] contains advanced tools to build solid parts from sketches. It also contains all the tools from the sketcher, and only produces solid geometry.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:PartDesign_Pad.png|16px]] [[PartDesign_Pad|Pad]]
* [[Image:PartDesign_Pocket.png|16px]] [[PartDesign_Pocket|Pocket]]
* [[Image:PartDesign_Revolution.png|16px]] [[PartDesign_Revolution|Revolution]]
* [[Image:PartDesign_Groove.png|16px]] [[PartDesign_Groove|Groove]]
||
* [[Image:PartDesign_Fillet.png|16px]] [[PartDesign_Fillet|Fillet]]
* [[Image:PartDesign_Chamfer.png|16px]] [[PartDesign_Chamfer|Chamfer]]
* [[Image:PartDesign_Draft.png|16px]] [[PartDesign_Draft|Draft]]
* [[Image:PartDesign_Mirrored.png|16px]] [[PartDesign_Mirrored|Mirrored]]
||
* [[Image:PartDesign_LinearPattern.png|16px]] [[PartDesign_LinearPattern|Linear Pattern]]
* [[Image:PartDesign_PolarPattern.png|16px]] [[PartDesign_PolarPattern|Polar Pattern]]
* [[Image:PartDesign_Scaled.png|16px]] [[PartDesign_Scaled|Scaled]]
* [[Image:PartDesign_MultiTransform.png|16px]] [[PartDesign_MultiTransform|MultiTransform]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;

=== [[Image:Arch.png|16px]] Arch workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[Arch tutorial]]: A complete tutorial that describes the whole process of modeling a building with the Arch workbench step by step


[[Arch mesh-based tutorial]]: An article describing how to build architectural models on top of mesh modesl imported from other applications}}
The [[Arch Module|Arch workbench]] contains tools to work with BIM projects (civil engineering and architecture). It also contains all the tools from the Draft workbench.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Arch_Wall.png|16px]] [[Arch_Wall|Wall]]
* [[Image:Arch_Structure.png|16px]] [[Arch_Structure|Structural element]]
* [[Image:Arch_Rebar.png|16px]] [[Arch_Rebar|Reinforcing bar]]
* [[Image:Arch_Floor.png|16px]] [[Arch_Floor|Floor]]
* [[Image:Arch_Building.png|16px]] [[Arch_Building|Building]]
* [[Image:Arch_Site.png|16px]] [[Arch_Site|Site]]
||
* [[Image:Arch_Window.png|16px]] [[Arch_Window|Window]]
* [[Image:Arch_SectionPlane.png|16px]] [[Arch_SectionPlane|Section Plane]]
* [[Image:Arch_Axis.png|16px]] [[Arch_Axis|Axes system]]
* [[Image:Arch_Roof.png|16px]] [[Arch_Roof|Roof]]
* [[Image:Arch_Space.png|16px]] [[Arch_Space|Space]]
||
* [[Image:Arch_Stairs.png|16px]] [[Arch_Stairs|Stairs]]
* [[Image:Arch_Panel.png|16px]] [[Arch_Panel|Panel]]
* [[Image:Arch_Frame.png|16px]] [[Arch_Frame|Frame]]
* [[Image:Arch_Add.png|16px]] [[Arch_Add|Add]]
* [[Image:Arch_Remove.png|16px]] [[Arch_Remove|Remove]]
* [[Image:Arch_Survey.png|16px]] [[Arch_Survey|Survey]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Drawing.png|16px]] Drawing workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Drawing Module|Drawing workbench]] handles the creation and manipulation of 2D drawing sheets, used for displaying views of your 3D work in 2D. These sheets can then be exported to 2D applications or printed.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Drawing_New.png|16px]] [[Drawing_Open_SVG|Open SVG graphic]]
* [[Image:Drawing_Landscape_A3.png|16px]] [[Drawing_Landscape_A3|New drawing page]]
* [[Image:Drawing_View.png|16px]] [[Drawing_View|Insert a view]]
||
* [[Image:Drawing_Annotation.png|16px]] [[Drawing_Annotation|Annotation]]
* [[Image:Drawing_Clip.png|16px]] [[Drawing_Clip|Clip]]
* [[Image:Drawing_Openbrowser.png|16px]] [[Drawing_Openbrowser|Open Browser]]
||
* [[Image:Drawing_Orthoviews.png|16px]] [[Drawing_Orthoviews|Ortho Views]]
* [[Image:Drawing_Symbol.png|16px]] [[Drawing_Symbol|Symbol]]
* [[Image:Drawing_Save.png|16px]] [[Drawing_Save|Save sheet]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Raytracing.png|16px]] Raytracing workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Raytracing Module|Raytracing workbench]] offers tools to interface with external renderers such as povray or luxrender. Right from inside FreeCAD, this workbench allows you to produce high-quality renderings from your models.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Raytracing_New.png|16px]] [[Raytracing_New|New PovRay project]]
* [[Image:Raytracing_Lux.png|16px]] [[Raytracing_Lux|New LuxRender project]]
||
* [[Image:Raytracing_InsertPart.png|16px]] [[Raytracing_InsertPart|Insert part]]
* [[Image:Raytracing_ResetCamera.png|16px]] [[Raytracing_ResetCamera|Reset camera]]
||
* [[Image:Raytracing_ExportProject.png|16px]] [[Raytracing_ExportProject|Export project]]
* [[Image:Raytracing_Render.png|16px]] [[Raytracing_Render|Render]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Mesh.png|16px]] FEM workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Fem Workbench|Fem workbench]] permits the performing of pre- and post-processing FEM calculations and display the results graphically

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Fem_FemMesh.svg|16px]] [[FEM Create|Create FEM mesh]]
* [[Image:Fem_Material.svg|16px]] [[FEM Material|Mechanical material]]
* [[Image:Fem_Analysis.svg|16px]] [[FEM Analysis|New analysis]]
* [[Image:Fem_NewAnalysis.svg|16px]] [[FEM Calculation|Start calculation]]
||
* [[Image:Fem_FemMesh_createnodebypoly.svg|16px]] [[FEM DefineNodes|Create nodes set]]
* [[Image:Fem_ConstraintFixed.svg|16px]] [[FEM FixedConstraint|Fixed constraint]]
* [[Image:Fem_ConstraintForce.svg|16px]] [[FEM ForceConstraint|Force constraint]]
||
* [[Image:Fem_ConstraintBearing.svg|16px]] [[FEM BearingConstraint|Bearing constraint]]
* [[Image:Fem_ConstraintGear.svg|16px]] [[FEM GearConstraint|Gear constraint]]
* [[Image:Fem_ConstraintPulley.svg|16px]] [[FEM PulleyConstraint|Pulley constraint]]
* [[Image:Fem_Result.svg|16px]] [[FEM ShowResult|Show result]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_OpenSCAD.png|16px]] OpenSCAD workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[OpenSCAD Module|OpenSCAD workbench]] offer tools for interoperability with OpenSCAD and repairing CSG model history

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:OpenSCAD_AddOpenSCADElement.png|16px]] [[OpenSCAD_AddOpenSCADElement|Add OpenSCAD Element]]
* [[Image:OpenSCAD_MeshBoolean.png|16px]] [[OpenSCAD_MeshBoolean|Mesh Boolean]]
* [[Image:OpenSCAD_ColorCodeShape.png|16px]] [[OpenSCAD_ColorCodeShape|Color Code Shape]]
* [[Image:OpenSCAD_ReplaceObject.png|16px]] [[OpenSCAD_ReplaceObject|Replace Object]]
||
* [[Image:OpenSCAD_RemoveSubtree.png|16px]] [[OpenSCAD_RemoveSubtree|Remove Subtree]]
* [[Image:OpenSCAD_RefineShapeFeature.png|16px]] [[OpenSCAD_RefineShapeFeature|Refine Shape]]
* [[Image:OpenSCAD_IncreaseTolerance.png|16px]] [[OpenSCAD_IncreaseTolerance|Increase Tolerance]]
||
* [[Image:OpenSCAD_ExpandPlacements.png|16px]] [[OpenSCAD_ExpandPlacements|Expand Placements]]
* [[Image:OpenSCAD_ExplodeGroup.png|16px]] [[OpenSCAD_ExplodeGroup|Explode Group]]
* [[Image:OpenSCAD_Hull.png|16px]] [[OpenSCAD_Hull|Hull]]
* [[Image:OpenSCAD_Minkowski.png|16px]] [[OpenSCAD_Minkowski|Minkowski]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Image.png|16px]] Image workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Image Module|Image workbench]] features tools to work with bitmap images, and import bitmap images as planes in the FreeCAD document, so they can be used for tracing over.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Image_Import.png|16px]] [[Image_Import]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[Image:Workbench_Robot.png|16px]] Robot workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[Robot Module|Robot workbench]] provides a complete interface to simulate and study robot movements

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Robot_CreateRobot.png|16px]] [[Robot_CreateRobot|Create a robot]]
* [[Image:Robot_Simulate.png|16px]] [[Robot_Simulate|Simulate a trajectory]]
* [[Image:Robot_Export.png|16px]] [[Robot_Export|Export a trajectory]]
* [[Image:Robot_SetHomePos.png|16px]] [[Robot_SetHomePos|Set home positon]]
||
* [[Image:Robot_RestoreHomePos.png|16px]] [[Robot_RestoreHomePos|Restore home positon]]
* [[Image:Robot_CreateTrajectory.png|16px]] [[Robot_CreateTrajectory|Create a trajectory]]
* [[Image:Robot_SetDefaultOrientation.png|16px]] [[Robot_SetDefaultOrientation|Set default orientation]]
* [[Image:Robot_SetDefaultValues.png|16px]] [[Robot_SetDefaultValues|Set default speed parameter]]
* [[Image:Robot_InsertWaypoint.png|16px]] [[Robot_InsertWaypoint|Insert a waypoint]]
||
* [[Image:Robot_InsertWaypointPre.png|16px]] [[Robot_InsertWaypointPre|Insert a waypoint]]
* [[Image:Robot_Edge2Trac.png|16px]] [[Robot_Edge2Trac|Create a trajectory]]
* [[Image:Robot_TrajectoryDressUp.png|16px]] [[Robot_TrajectoryDressUp|Dress-up a trajectory]]
* [[Image:Robot_TrajectoryCompound.png|16px]] [[Robot_TrajectoryCompound|Trajectory compound]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[File:FreeCAD-Ship-Ico.png|16px]] Ship workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightbox|Learning|

[[FreeCAD-Ship s60 tutorial|Ship s60 tutorial part 1]] and [[FreeCAD-Ship s60 tutorial (II)|part 2]]: A tutorial showing how to work with a symmetric monohull ship in the Ship workbench}}
The [[FreeCADShip Workbench|Ship workbench]] is a suite of tools to create and work with ship hulls.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:FreeCAD-Ship-Ico.png|16px]] [[Ship_CreateShip|Create new ship]]
* [[Image:FreeCAD-Ship-LoadIco.png|16px]] [[Ship_LoadExample|Load an example]]
||
* [[Image:FreeCAD-Ship-OutlineDrawIco.png|16px]] [[Ship_OutlineDraw|Draw outline]]
||
* [[Image:FreeCAD-Ship-AreaCurveIco.png|16px]] [[Ship_AreasCurve|Transversal areas curve]]
* [[Image:FreeCAD-Ship-HydrostaticsIco.png‎|16px]] [[Ship_Hydrostatics|Hydrostatics tool]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[File:Plot_Save.png|16px]] Plot workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The [[Plot Module|Plot workbench]] allows to edit and save output plots created from other modules and tools.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Plot_Save.png|16px]] [[Plot_Save|Save plot]]
* [[Image:Plot_Axes.png|16px]] [[Plot_Axes|Axes]]
||
* [[Image:Plot_Series.png|16px]] [[Plot_Series|Series]]
* [[Image:Plot_Grid.png|16px]] [[Plot_Grid|Grid]]
* [[Image:Plot_Legend.png|16px]] [[Plot_Legend|Legend]]
||
* [[Image:Plot_Labels.png|16px]] [[Plot_Labels|Labels]]
* [[Image:Plot_Positions.png|16px]] [[Plot_Positions|Positions]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== [[File:Spreadsheet Create.png|16px]] Spreadsheet workbench ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;
{{Rightspacer}}
The [[Spreadsheet Module|Spreadsheet workbench]] permits the creation and manipulation of spreadsheet data, that can be extracted from FreeCAD models.

{|border=&quot;0&quot;&quot;
|- 
| 
* [[Image:Spreadsheet Create.png|16px]] [[Spreadsheet Create|Spreadsheet]]
||
* [[Image:Spreadsheet Controller.png|16px]] [[Spreadsheet Controller|Cell Controller]]
||
* [[Image:Spreadsheet PropertyController.png|16px]] [[Spreadsheet PropertyController|Property Controller]]
|}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Customizing FreeCAD ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

The workbench system is not to be considered as a limitation to your freedom, but simply a way to organize large quantities of tools and offer different workflows inside a single application. They are however extensively customizable, so you can tailor your interface to your preferences and needs.

* [[Interface Customization]]: How to customize the interface, workbench toolbars and keyboard shortcuts.
* [[Preferences Editor|User preferences]]: Understand how those are organized '''CLEANUP'''
* [[Macros]]: How to create your own tools in FreeCAD
* [[Macros recipes]]: Add tools created by FreeCAD users to your installation
&lt;/div&gt;
&lt;/div&gt;

== Python scripting ==

Strong support to python scripting is one of the main strengths of FreeCAD. Almost any part of the FreeCAD application is accessible to python scripting: the core application, the interface, the 3D view, and almost all of the modules functionality. Python scripting can be used from the FreeCAD python console, from macros, from external scripts or even from external applications, FreeCAD being importable as a python module. 


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== The basics ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

{{Rightbox|Learning|
[[Python scripting tutorial|FreeCAD scripting tutorial]]: A general look at python scripting in FreeCAD and a gentle introduction to how to work with it...


'''Tip''': If you are interested in helping to develop FreeCAD, even if you work with C++, the python documentation pages are worth reading, since in FreeCAD things work very similarly between python and C++.}}

* [[Introduction to Python]]: See also other Python tutorials at the bottom of this page
* [[Document structure|The FreeCAD Document]]: Description of the FreeCAD document structure '''CLEANUP'''
* [[FreeCAD Scripting Basics]]: The base concepts of FreeCAD scripting
* [[Gui Command]]: Adding custom commands to the GUI
* Using mixed [[Units]] in FreeCAD
* [[Scenegraph|The Coin/Inventor scenegraph]]: How the FreeCAD scene representation works
* [[Pivy]]: How to access and modify the scenegraph
* [[PyQt]]: How to access the interface, and modify its contents
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] in another Qt application with PyQt
* [[Scripted objects]]: How to make 100% Python-scripted objects in FreeCAD
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Modules ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [http://www.freecadweb.org/api Python API reference]: The auto-generated python API reference of FreeCAD
* The [[Builtin modules]] contain the general functionality such as opening and saving files
* [[Mesh Scripting]]: How to interact with the [[Mesh Module]]
* [[Topological data scripting|Part scripting]]: How to interact with the [[Part Module]]
* [[PythonOCC]]: How to unleash the whole Open CASCADE power
* [[Mesh to Part]]: Converting between object types
* [[Drawing Module]]: Automating the 3D-to-2D process
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Examples ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Code snippets]] : A collection of pieces of FreeCAD Python code, to serve as ingredients in your scripts...
* [[Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD]]: How to import FreeCAD as a Python module in other applications
* [[FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is part of the Draft module.
&lt;/div&gt;
&lt;/div&gt;
== Development ==

The following articles will be useful to you if you wish to look deeper into the FreeCAD source code, modify it, compile FreeCAD yourself on your machine, or start developing another application using FreeCAD as a base.


&lt;div class=&quot;mw-collapsible mw-collapsed toccolours&quot; style=&quot;width:800px&quot;&gt;
=== Development documentation ===
&lt;div class=&quot;mw-collapsible-content&quot;&gt;

* [[Source code management]]
* [[Tracker|Find assistance]] when you have a problem or think you may have found a bug
* [[CompileOnWindows|Compiling on Windows]]
* [[CompileOnUnix|Compiling on Unix]]
* [[CompileOnMac|Compiling on Mac]]
* [[Licence|Licence details]] about the FreeCAD licences
* [[Third Party Libraries]]
* [[Third Party Tools]]
* [[Start up and Configuration]]
* [[Source documentation]]
* The [[FreeCAD Build Tool]]
* [[Module_Creation|Adding an application module]] to FreeCAD
* [[Debugging]] FreeCAD
* [[Testing]] FreeCAD
* Add [[Gui Command|Features]] to FreeCAD or a Workbench
* [[Branding]] or ''how to give FreeCAD a unique look''
* [[Artwork]] we made for FreeCAD, that you can freely reuse
* [[Localisation|Translating FreeCAD]]
* [[Extra python modules]], or ''how to extend python functionality within FreeCAD''
&lt;/div&gt;
&lt;/div&gt;
== Reference ==

* [[:Category:Command Reference|Commands reference]]: The complete list of FreeCAD commands
* [[:Category:Tutorials|Tutorials]]: All available FreeCAD tutorials
* [http://www.freecadweb.org/api Python API reference]: The auto-generated python API reference of FreeCAD
* [http://www.freecadweb.org/wiki/index.php?title=Macros_recipes Macro recipes]</text>
    </revision>
  </page>
  <page>
    <title>News</title>
    <ns>0</ns>
    <id>109</id>
    <revision>
      <id>129870</id>
      <parentid>129858</parentid>
      <timestamp>2014-12-07T17:11:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2rwfobvqi4x0ngjaacoxyntfmlduq7g</sha1>
      <text xml:space="preserve" bytes="3867">
&lt;!--T:1--&gt;
This page contains news about the FreeCAD software.  Currently this is mostly release news, but any news that is relevant to the wider MediaWiki community may be added here.  &lt;!-- You need to edit Template:FreeCAD News to add items to this page. --&gt;

&lt;!--T:2--&gt;
&lt;!-- CURRENT NEWS --&gt;
{{FreeCAD News/en}}
&lt;!-- OLDER NEWS, REMOVED FROM THE NEWS TEMPLATE --&gt;
* '''2011-02-26''': [[Online Help Toc/cn|Chinese translation]] of the manual has started
* '''2011-02-21''': New 0.11 release is almost ready! Just polishing last corners now, and killing last bugs.
* '''2010-12-07''': New [http://sourceforge.net/projects/free-cad/files/FreeCAD%20MacOSX/FreeCAD_i386_R3703.dmg/download Mac OSX build] just out!
* '''2010-11-17''': Come check out and test the new [http://sourceforge.net/apps/ideatorrent/free-cad Ideastorrent]!
* '''2010-10-22''': An awesome [http://www.youtube.com/watch?v=Q7cG-LQK8Ps new video tutorial] showing the draft module, by tremblou
* '''2010-10-04''': [http://www.openplm.org/trac/wiki/WikiStartEnglish OpenPLM] now has a [http://www.openplm.org/docs/plugin_freecad.html FreeCAD plugin]!
* '''2010-09-12''': Translation of the manual into german [[Online_Help_Toc/de|has started]]...
* '''2010-09-10''': 2 new video tutorials by [http://www.youtube.com/user/salceson2 salceson2]: [http://www.youtube.com/watch?v=xnlEVKAtFYw video1] and [http://www.youtube.com/watch?v=hyBlOL_MFlY video 2]
* '''2010-09-10''': FreeCAD has a [http://www.facebook.com/pages/FreeCAD/153482088014175 facebook page]!
* '''2010-08-24''': Opened a translation project on [http://crowdin.net/project/freecad crowdin] for testing...
* '''2010-07-07''': 2 FreeCAD videotutorials by [http://www.youtube.com/user/salceson2 salceson2]: [http://www.youtube.com/watch?v=LOAxc1StGW8 tutorial 1] and [http://www.youtube.com/watch?v=GFuyF78QLGc tutorial 2]
* '''2010-06-12''': We now have [http://sourceforge.net/mail/?group_id=49159 mailing lists]!
* '''2010-05-25''': Translation of the manual into polish [[Online_Help_Toc/pl|has started]]...
* '''2010-05-13''': New website is up! Anything not displaying right? [[User_talk:Yorikvanhavre|Tell me here]]!
* '''2010-05-03''': FreeCAD Release 0.10 is out! [http://sourceforge.net/projects/free-cad/files/ Download it here]!
* '''2010-03-28''': Updated the [[Localisation|Translation]] page with better instruction for who wants to help translating FreeCAD.
* '''2010-01-30''': FreeCAD Release 0.9 now available for [http://sourceforge.net/project/downloading.php?group_id=49159&amp;filename=FreeCAD_0.9.2863_setup.msi windows] and [http://sourceforge.net/projects/free-cad/files/FreeCAD%20Linux/FreeCAD%200.9%20R2646 linux].
* '''2009-12-20''': Technology preview of the [[Robot_Workbench]]!
* '''2009-08-30''': Technology preview of the [[Drawing Module]]!
* '''2009-08-27''': FreeCAD successfully compiles and runs on [[CompileOnMac|Mac OSX]]!
* '''2009-07-13''': [http://sourceforge.net/projects/free-cad/files/ FreeCAD Release 0.8] is out! Get yours, for Windows, Debian or Ubuntu
* '''2009-07-03''': 100% [[Scripted objects|python-scripted objects]] are now available and fully working
* '''2009-07-01''': Started a [[Wished tools]] page for collecting end-users wishes
* '''2009-05-01''': Started and fill up [[Development roadmap]]
* '''2009-04-09''': [http://www.pythonocc.org/ pythonOCC] can already be used within FreeCAD
* '''2009-03-16''': [https://sourceforge.net/project/showfiles.php?group_id=49159&amp;package_id=206659&amp;release_id=668707 FreeCAD Release 2008] is out!
* '''2008-09-01''': Start assembling the [[Manual]]
* '''2008-05-01''': Start the 0.7 Release series 
* '''2008-02-28''': An [[Name Discussion|Article]] for the name discussion
* '''2007-01-14''': QT4 port compiles, but still some things to do! 

&lt;!--T:3--&gt;
&lt;noinclude&gt;[[Category:News]]&lt;/noinclude&gt;

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Object API</title>
    <ns>0</ns>
    <id>742</id>
    <revision>
      <id>133204</id>
      <parentid>123147</parentid>
      <timestamp>2014-12-23T21:02:06Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>er4hm55hfcunki135evpnko0z1gwrem</sha1>
      <text xml:space="preserve" bytes="1869">
&lt;!--T:1--&gt;
Being parametric, document objects in FreeCAD can have a lot of additional properties, but these are the basic ones, present in every FreeCAD Document Object. Objects can be retrieved simply by their name. Example:

{{Code|code=
myObj = FreeCAD.ActiveDocument.myObjectName
print myObj.PropertiesList
}}



&lt;!--T:3--&gt;
{{APIProperty|Content|An XML representation of the properties of an object.}}
{{APIProperty|Label|Gets/sets the objects label. The string can be unicode.}}
{{APIProperty|Name|The unique name of an object.}}
{{APIProperty|Placement|Gets/sets the Placement of an object. A placement defines an orientation (rotation) and a position (base) in 3D space. It is used when no scaling or other distortion is needed.}}
{{APIProperty|PropertiesList|A list of the properties of an object}}
{{APIProperty|State|The FreeCAD state of an object (ie. if it needs to be recomputed)}}
{{APIProperty|Type|A string describing the type of an object}}
{{APIProperty|ViewObject|The associated View Provider (FreeCADGUI object) of an object}}
{{APIFunction|getAllDerivedFrom| | |All descendants of this object}}
{{APIFunction|getDocumentationOfProperty| | |The documentation string of the property of this class.}}
{{APIFunction|getGroupOfProperty| | |The name of the group which the property belongs to in this class. The properties are sorted in different named groups for convenience.}}
{{APIFunction|getPropertyByName| | |The value of a named property.}}
{{APIFunction|getTypeOfProperty| | |The type of a named property. This can be (Hidden,ReadOnly,Output) or any combination.}}
{{APIFunction|isDerivedFrom| | |True if given type is a father}}
{{APIFunction|purgeTouched| |Marks the object as unchanged| }}
{{APIFunction|touch| |Marks the object as changed (touched)| }}

&lt;!--T:4--&gt;
[[Category:API]]

</text>
    </revision>
  </page>
  <page>
    <title>Objekteigenschaften</title>
    <ns>0</ns>
    <id>1278</id>
    <revision>
      <id>108006</id>
      <parentid>95801</parentid>
      <timestamp>2014-09-01T12:40:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Offsite tutorials</title>
    <ns>0</ns>
    <id>2364</id>
    <revision>
      <id>124597</id>
      <parentid>85664</parentid>
      <timestamp>2014-11-22T14:56:05Z</timestamp>
      <contributor>
        <username>Topcyde</username>
        <id>3305</id>
      </contributor>
      <sha1>ebw20dij65bp6w7jrceg8vbckf17a4b</sha1>
      <text xml:space="preserve" bytes="998">
&lt;!--T:1--&gt;
This page lists FreeCAD tutorials found on other sites on the web.

&lt;!--T:2--&gt;
* [http://hackaday.com/2014/02/05/3d-printering-making-a-thing-in-freecad-part-i 3D Printering: Making A Thing In FreeCAD] a 2 part tutorial by Brian Benchoff on Hackaday. (5th February 2014)
* [http://freecad-tutorial.blogspot.it FreeCAD tutorial - Unofficial tutorial blog] by  Adrian Przekwas (Updated 16th June 2013)
* [http://linuxaideddesign.blogspot.com.br/2012/10/playing-with-freecad-airfoils-and-blades.html Playing with FreeCAD: Airfoils and Blades] by Spyros M. (20th october 2012)
* [http://opensourceecology.org/w/images/0/00/FreeCAD-3.pdf OpenSourceEcology.org FreeCAD tutorial] by Mark Norton (pdf) (updated 30th september 2011)
* [http://hackaday.com/2014/02/05/3d-printering-making-a-thing-in-freecad-part-i 3D Printering: Making A Thing In FreeCAD] a 2 part tutorial by Brian Benchoff. (5th February 2014)

&lt;!--T:3--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Om FreeCAD</title>
    <ns>0</ns>
    <id>793</id>
    <revision>
      <id>108007</id>
      <parentid>89277</parentid>
      <timestamp>2014-09-01T12:40:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Online Help Startpage</title>
    <ns>0</ns>
    <id>110</id>
    <revision>
      <id>85211</id>
      <parentid>43166</parentid>
      <timestamp>2014-05-20T21:12:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>fvn48vz44tanbky3cuqt68cl14afhm5</sha1>
      <text xml:space="preserve" bytes="2383">
&lt;!--T:1--&gt;
[[Image:Crystal_Clear_app_tutorials.png|right|150]]

== Welcome to the FreeCAD on-line help == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This document has been automatically created from the contents of the official FreeCAD wiki documentation, which can be read online at http://www.freecadweb.org/wiki/index.php?title=Main_Page. Since the wiki is actively maintained and continuously developed by the FreeCAD community of developers and users, you may find that the online version contains more or newer information than this document. There you will also find in-progress translations of this documentation in several languages. But nevertheless, we hope you will find here all information you need. In case you have questions you can't find answers for in this document, have a look on the [http://forum.freecadweb.org/index.php FreeCAD forum], where you can maybe find your question answered, or someone able to help you.

=== How to use === &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
This document is divided into several sections: introduction, usage, scripting and development, the last three address specifically the three broad categories of users of FreeCAD: end-users, who simply want to use the program, power-users, who are interested by the scripting capabilities of FreeCAD and would like to customize some of its aspects, and developers, who consider FreeCAD as a base for developing their own applications. If you are completely new to FreeCAD, we suggest you to start simply from the introduction.

=== Contribute === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
As you may have experienced sometimes, programmers are really bad help writers! For them it is all completely clear because they made it that way. Therefore it's vital that experienced users help us to write and revise the documentation. Yes, we mean you! How, you might ask? Just go to the Wiki at http://www.freecadweb.org/wiki/index.php in the User section. You will need a [http://sourceforge.net/ sourceforge account] to log in, and then ask on the forum or on the irc channel for write permission (the wiki is write-protected to avoid spamming). Then you can start editing!  Also, check out the page at http://www.freecadweb.org/wiki/index.php?title=Help_FreeCAD for more ways you can help FreeCAD.

&lt;!--T:8--&gt;
{{docnav|Online Help Toc|About FreeCAD}}


&lt;!--T:10--&gt;
[[Category:User_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Online Help Toc</title>
    <ns>0</ns>
    <id>111</id>
    <revision>
      <id>105038</id>
      <parentid>99160</parentid>
      <timestamp>2014-08-18T19:22:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>dskfhacvaxcc0xqexteer2hmwacvck3</sha1>
      <text xml:space="preserve" bytes="2817">
&lt;!--T:1--&gt;
Here is the table of contents for the online help system in FreeCAD. The articles referenced here are automatically included in the FreeCAD.chm file by the wiki2chm.py tool. You find that tool under src/Tools/wiki2chm.py. A [[Manual|printable version]] of this manual is also available.

&lt;!--T:2--&gt;
* [[Online Help Startpage| Welcome]]
* Introduction
** [[About FreeCAD]]
** [[Feature list|Features]]
** [[Install on Windows|Installing on Windows]]
** [[Install on Unix|Installing on Linux/Unix]]
** [[Install on Mac|Installing on Mac]]

&lt;!--T:4--&gt;
* Working with FreeCAD
** [[Getting started]]
** [[Mouse Model|Navigating in the 3D space]]
** [[Document structure|The FreeCAD Document]]
** [[Preferences Editor|Setting user preferences]]
** [[Interface Customization|Customizing the interface]]
** [[Property editor|Object properties]]
** [[Workbenches|Working with workbenches]]
** [[PartDesign Workbench|The PartDesign workbench]]
** [[Mesh Module|The Mesh workbench]]
** [[Part Module|The Part workbench]]
** [[Drawing Module|The Drawing workbench]]
** [[Raytracing Module|The Raytracing workbench]]
** [[Image Module|The Image workbench]]
** [[Draft Module|The Draft workbench]]
** [[Arch Module|The Architecture workbench]]
** [[Robot Module|The Robot workbench]]
** [[Standard Menu|Standard FreeCAD menus and commands]]
** [[List of Commands|List of all FreeCAD commands]]
** [[Tutorials]]

&lt;!--T:5--&gt;
* Scripting and Macros
** [[Macros|Working with macros]]
** [[Introduction to Python]]
** [[Python scripting tutorial]]
** [[FreeCAD Scripting Basics]]
** [[Mesh Scripting]]
** [[Topological data scripting|Part Scripting]]
** [[Mesh to Part|Converting between Meshes and Parts]]
** [[Scenegraph|The Coin Scenegraph]]
** [[Pivy|Working with Pivy]]
** [[PyQt|Working with PyQt]]
** [[Scripted objects|Creating parametric objects]]
** [[Embedding FreeCAD]]
** [[API documentation]]
** Scripting Examples
*** [[Code snippets]]
*** [[Line drawing function]]
*** [[Dialog creation]]

&lt;!--T:6--&gt;
* Developing applications for FreeCAD
** [[Licence]]
** Compiling FreeCAD
*** [[Tracker|Finding assistance]]
*** [[CompileOnWindows|Compiling on Windows]]
*** [[CompileOnUnix|Compiling on Unix]]
*** [[CompileOnMac|Compiling on Mac]]
*** [[Third Party Libraries]]
*** [[Third Party Tools]]
*** [[Start up and Configuration]]
** Build Support Tools 
*** [[FreeCAD Build Tool|The FreeCAD build tool]]
*** [[Module Creation|Adding an application module]]
*** [[Debugging|Debugging FreeCAD]]
*** [[Testing|Testing FreeCAD]]
** Modifying FreeCAD 
*** [[Branding]] 
*** [[Localisation|Translating FreeCAD]]
*** [[Extra python modules|Installing extra python modules]]
** [[Source documentation]]

&lt;!--T:7--&gt;
* Credits
**[[Contributors]]

&lt;!--T:3--&gt;
[[Category:Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD AddOpenSCADElement</title>
    <ns>0</ns>
    <id>2865</id>
    <revision>
      <id>85695</id>
      <parentid>85694</parentid>
      <timestamp>2014-05-22T19:12:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qv82uhayw04c5vnflr97q0yt1wn8vlw</sha1>
      <text xml:space="preserve" bytes="2382">
&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD AddOpenSCADElement|Workbenches=[[OpenSCAD Module|OpenSCAD]]|MenuLocation=OpenSCAD -&gt; Add OpenSCAD Element}}

====Description==== &lt;!--T:2--&gt;
Add an OpenSCAD element by entering OpenSCAD code into the task panel and executing the OpenSCAD binary (requires OpenSCAD) 

&lt;!--T:3--&gt;
When 'as mesh' is selected, OpenSCAD renders a Mesh. 

&lt;!--T:4--&gt;
Each time Add is pressed the OpenSCAD code is executed and elements are imported.

&lt;!--T:5--&gt;
If OpenSCAD returns successfully, its messages are displayed as warnings in the report window. This will be the case if the path to imported, included and used files is broken.
In case of undesired results it is highly recommend to have a look at the report windows, as there might be a lot of other output, created by the importer.
If OpenSCAD fails, its messages will be loged as errors.
Libraries should be accessible as usual, whereas example can be reached as stated below

&lt;syntaxhighlight&gt;
include &lt;../examples/example001.scad&gt;;
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
would include the first examples also known as the OpenSCAD icon

====Initial set up from within FreeCAD==== &lt;!--T:7--&gt;
*OpenSCAD needs to be installed on your computer before FreeCAD will have this functionality
**install OpenSCAD in the appropriate manner for your operating system. See [http://www.openscad.org/ the OpenSCAD web site] for more information
*FreeCAD needs to be told where to find the OpenSCAD executable
**Switch to the OpenSCAD Workbench Menu -&gt; View Workbench -&gt; OpenSCAD
**Open the preferences dialog Menu -&gt; Edit -&gt; Preferences
**Click on &quot;OpenSCAD&quot; on the left plane
**Click on the button labled &quot;...&quot; in General Settings -&gt; General OpenSCAD Settings -&gt; OpenSCAD executable to browser the directory or enter the path (e.g. Ubuntu based Linux distributions /usr/bin/openscad) directly into the line input right to the button
**close and restart FreeCAD, a new OpenSCAD icon will appear on the tool bar, and in the OpenSCAD menu, in the FreeCAD OpenSCAD workbench
*It is also possible to add another optional Parameter which controls the maximum sides of a polygon before it is considered a circle (fn).

&lt;!--T:8--&gt;
Starting from FreeCAD Version 0.14, FreeCAD will search for the OpenSCAD executable if the setting mentioned above is empty.    




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD CSG</title>
    <ns>0</ns>
    <id>2887</id>
    <revision>
      <id>84362</id>
      <parentid>84361</parentid>
      <timestamp>2014-05-18T19:17:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1za4u5toi55vshghf16ybjtjehf737m</sha1>
      <text xml:space="preserve" bytes="794">
== Import == &lt;!--T:1--&gt;
=== Supported Elements ===
* primitives: cube, sphere, cylinder, square, circle, polygon, polyhedron
* boolean: union, difference, intersection
* linearextrude, rotateextrude
* import (dxf, stl, off) (without scaling or transformation of origin)
* multmatrix
* color

=== Unsupported Elements === &lt;!--T:2--&gt;
* projection
* surface
* render (ignored)
* cgal operations: minkowski, glide, path, subdiv, hull

== Export == &lt;!--T:3--&gt;
=== Supported Elements ===
* primitives: Box, Cylinder, Cone, Torus
* boolean: Cut, Fuse, Common

=== Fallback === &lt;!--T:4--&gt;
Every object derived from Part::Feature which is not (yet) supported will get meshed and exported as a polyhedron element

&lt;!--T:5--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD CSG tested files</title>
    <ns>0</ns>
    <id>3595</id>
    <revision>
      <id>129372</id>
      <parentid>129371</parentid>
      <timestamp>2014-12-06T20:53:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>035zx9x8rd8wdhx5lcjste8dtyea803</sha1>
      <text xml:space="preserve" bytes="1156">
==This is a list of OpenSCAD files that can not be opened in FreeCAD== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{|
|Description
|Source
|Reason
|Interactive repair known
|Fixed version available
|-
|Driver Bit Handle
|http://www.thingiverse.com/thing:34852
|execute function does not return, Coincident geometry? 
|no
|no
|-
|Ashtray
|http://www.thingiverse.com/thing:33191
|booleans of coincident geometry fail
|multi-fusing cylinders 001-004 at once solves the problem
|no
|-
|Batman Symbol
|http://www.thingiverse.com/thing:12381
|booleans of coincident geometry fail
|do booleans in 2D space, before applying linear extrusion
|http://www.thingiverse.com/thing:18780  
|-
|venturi pump
|http://www.thingiverse.com/thing:29100
|uses screw lib http://www.thingiverse.com/thing:8793
|no
|no
|-
|Screw Library
|http://www.thingiverse.com/thing:8793
|returns meshes with duplicate vertices
|no
|no
|}

==This is a list of OpenSCAD files that can be opened in FreeCAD without any problem== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
{|
|Description
|Source
|-
|Tetrapode
|http://www.thingiverse.com/thing:33104
|}

&lt;!--T:5--&gt;
[[Category:Developer]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD ColorCodeShape</title>
    <ns>0</ns>
    <id>36946</id>
    <revision>
      <id>105829</id>
      <parentid>105828</parentid>
      <timestamp>2014-08-22T20:40:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a9g0xjip7sqk4p6ygiekw769xwhimxd</sha1>
      <text xml:space="preserve" bytes="302">
&lt;!--T:4--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:3--&gt;
{{GuiCommand|Name=OpenSCAD ColorCodeShape‏‎ |MenuLocation=OpenSCAD → ColorCodeShape‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD DRAWEXE</title>
    <ns>0</ns>
    <id>28409</id>
    <revision>
      <id>85455</id>
      <parentid>79451</parentid>
      <timestamp>2014-05-21T21:07:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>m5ei8bbhww7jet9buz8of0h114bvk3s</sha1>
      <text xml:space="preserve" bytes="1106">Work in progress!
Please don't translate it, yet.
But feel free to correct spelling mistakes ;)
== DRAWEXE ==
Our geometry kernel (OCCT) includes a command line application called DRAWEXE. It allows to use the geometry kernel from an interactive prompt. It can be scripted using the tool command language (tcl).
It is used at OpenCASCADE for automatated intergration testing.
=== Intention of the exporter ===
A lot of problems in FreeCAD are caused by our geometry kernel. In order to attribute those problems, they need to be reproduces outside of FreeCAD. The motivation for the exporter is to export a sub-tree of a FreeCAD document as a script for the DRAWEXE command.
This subtree can then be recreated using the &quot;source&quot; command of DRAWEXE.
== Export ==
=== Supported Elements ===
* primitives: Sphere, Box, Cylinder, Cone, Torus, Prism
* boolean: Cut, Fuse, Common, Section
* modification: Mirroring
* OpenSCAD specific: Non-uniform scaling (as &quot;deform&quot;) 
=== Fallback ===
Every object derived from Part::Feature which is not (yet) supported will be exported as a BREP shape

[[Category:Developer]]</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Edgestofaces</title>
    <ns>0</ns>
    <id>36956</id>
    <revision>
      <id>106147</id>
      <parentid>106146</parentid>
      <timestamp>2014-08-23T19:16:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>faad60k4yx3kaewh3qkex68bsfus696</sha1>
      <text xml:space="preserve" bytes="266">
&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD Edgestofaces|MenuLocation=OpenSCAD → EdgesToFaces‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD ExpandPlacements</title>
    <ns>0</ns>
    <id>36967</id>
    <revision>
      <id>105997</id>
      <parentid>105996</parentid>
      <timestamp>2014-08-23T12:13:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>nnmapjglaxebukuwg3qt0h1ey8geoi5</sha1>
      <text xml:space="preserve" bytes="275">
&lt;!--T:3--&gt;
{{GuiCommand|Name=OpenSCAD ExpandPlacements|MenuLocation=OpenSCAD → ExpandPlacements‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:4--&gt;
ToDo



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD ExplodeGroup</title>
    <ns>0</ns>
    <id>40120</id>
    <revision>
      <id>106822</id>
      <parentid>106821</parentid>
      <timestamp>2014-08-27T20:50:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7l9ksm92sj4gx5mqqeeqk4ki26xbvki</sha1>
      <text xml:space="preserve" bytes="270">


&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD ExplodeGroup|MenuLocation=OpenSCAD → Explode Group‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Hull</title>
    <ns>0</ns>
    <id>40135</id>
    <revision>
      <id>106836</id>
      <parentid>106835</parentid>
      <timestamp>2014-08-27T20:53:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>l6k4o8ffgly9gwwxw2zctce0d3ybdhb</sha1>
      <text xml:space="preserve" bytes="253">


&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD Hull|MenuLocation=OpenSCAD → Hull‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Icon</title>
    <ns>0</ns>
    <id>51418</id>
    <revision>
      <id>130246</id>
      <parentid>130245</parentid>
      <timestamp>2014-12-08T20:14:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mzo7678ecb7j4zedrk28pwt1cvx3yzb</sha1>
      <text xml:space="preserve" bytes="2609">
==[[Image:Workbench OpenSCAD.png|32px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:OpenSCAD ColorCodeShape.png|32px|OpenSCAD ColorCodeShape|link=OpenSCAD ColorCodeShape]] [[OpenSCAD ColorCodeShape|ColorCodeShape]]
 &lt;nowiki&gt;[[Image:OpenSCAD ColorCodeShape.png|32px|OpenSCAD ColorCodeShape|link=OpenSCAD ColorCodeShape]] [[OpenSCAD ColorCodeShape|ColorCodeShape]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:OpenSCAD Edgestofaces.png|32px|OpenSCAD Edgestofaces|link=OpenSCAD Edgestofaces]] [[OpenSCAD Edgestofaces|OpenSCAD Edgestofaces]]
 &lt;nowiki&gt;[[Image:OpenSCAD Edgestofaces.png|32px|OpenSCAD Edgestofaces|link=OpenSCAD Edgestofaces]] [[OpenSCAD Edgestofaces|OpenSCAD Edgestofaces]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:OpenSCAD RefineShapeFeature.png|32px|OpenSCAD RefineShapeFeature|link=OpenSCAD RefineShapeFeature]] [[OpenSCAD RefineShapeFeature|OpenSCAD RefineShapeFeature]]
 &lt;nowiki&gt;[[Image:OpenSCAD RefineShapeFeature.png|32px|OpenSCAD RefineShapeFeature|link=OpenSCAD RefineShapeFeature]] [[OpenSCAD RefineShapeFeature|OpenSCAD RefineShapeFeature]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:OpenSCAD ExpandPlacements.png|32px|OpenSCAD ExpandPlacements|link=OpenSCAD ExpandPlacements]] [[OpenSCAD ExpandPlacements|OpenSCAD ExpandPlacements]]
 &lt;nowiki&gt;[[Image:OpenSCAD ExpandPlacements.png|32px|OpenSCAD ExpandPlacements|link=OpenSCAD ExpandPlacements]] [[OpenSCAD ExpandPlacements|OpenSCAD ExpandPlacements]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:OpenSCAD ReplaceObject.png|32px|OpenSCAD ReplaceObject|link=OpenSCAD ReplaceObject]] [[OpenSCAD ReplaceObject|OpenSCAD ReplaceObject]]
 &lt;nowiki&gt;[[Image:OpenSCAD ReplaceObject.png|32px|OpenSCAD ReplaceObject|link=OpenSCAD ReplaceObject]] [[OpenSCAD ReplaceObject|OpenSCAD ReplaceObject]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:OpenSCAD RemoveSubtree.png|32px|OpenSCAD RemoveSubtree|link=OpenSCAD RemoveSubtree]] [[OpenSCAD RemoveSubtree|OpenSCAD RemoveSubtree]]
 &lt;nowiki&gt;[[Image:OpenSCAD RemoveSubtree.png|32px|OpenSCAD RemoveSubtree|link=OpenSCAD RemoveSubtree]] [[OpenSCAD RemoveSubtree|OpenSCAD RemoveSubtree]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:OpenSCAD AddOpenSCADElement.png|32px|OpenSCAD AddOpenSCADElement|link=OpenSCAD AddOpenSCADElement]] [[OpenSCAD AddOpenSCADElement|OpenSCAD AddOpenSCADElement]]
 &lt;nowiki&gt;[[Image:OpenSCAD AddOpenSCADElement.png|32px|OpenSCAD AddOpenSCADElement|link=OpenSCAD AddOpenSCADElement]] [[OpenSCAD AddOpenSCADElement|OpenSCAD AddOpenSCADElement]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD IncreaseTolerance</title>
    <ns>0</ns>
    <id>40113</id>
    <revision>
      <id>106815</id>
      <parentid>106814</parentid>
      <timestamp>2014-08-27T20:49:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>by8hrwv84uagibd41zbhvfchniowl7p</sha1>
      <text xml:space="preserve" bytes="294">


&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD IncreaseTolerance‏‎ |MenuLocation=OpenSCAD → Increase Tolerance Feature‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Key</title>
    <ns>0</ns>
    <id>51442</id>
    <revision>
      <id>131451</id>
      <parentid>130903</parentid>
      <timestamp>2014-12-13T21:19:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7sutyt3to2xi8qlruh9fr2ll37600zu</sha1>
      <text xml:space="preserve" bytes="2728">
==[[File:Workbench OpenSCAD.png|32px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:OpenSCAD ColorCodeShape.png|16px|OpenSCAD ColorCodeShape|link=OpenSCAD ColorCodeShape]] [[OpenSCAD ColorCodeShape|ColorCodeShape]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD ColorCodeShape.png|16px|OpenSCAD ColorCodeShape|link=OpenSCAD ColorCodeShape]] [[OpenSCAD ColorCodeShape|ColorCodeShape]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:OpenSCAD Edgestofaces.png|16px|OpenSCAD Edgestofaces|link=OpenSCAD Edgestofaces]] [[OpenSCAD Edgestofaces|OpenSCAD Edgestofaces]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD Edgestofaces.png|16px|OpenSCAD Edgestofaces|link=OpenSCAD Edgestofaces]] [[OpenSCAD Edgestofaces|OpenSCAD Edgestofaces]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:OpenSCAD RefineShapeFeature.png|16px|OpenSCAD RefineShapeFeature|link=OpenSCAD RefineShapeFeature]] [[OpenSCAD RefineShapeFeature|OpenSCAD RefineShapeFeature]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD RefineShapeFeature.png|16px|OpenSCAD RefineShapeFeature|link=OpenSCAD RefineShapeFeature]] [[OpenSCAD RefineShapeFeature|OpenSCAD RefineShapeFeature]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:OpenSCAD ExpandPlacements.png|16px|OpenSCAD ExpandPlacements|link=OpenSCAD ExpandPlacements]] [[OpenSCAD ExpandPlacements|OpenSCAD ExpandPlacements]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD ExpandPlacements.png|16px|OpenSCAD ExpandPlacements|link=OpenSCAD ExpandPlacements]] [[OpenSCAD ExpandPlacements|OpenSCAD ExpandPlacements]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:OpenSCAD ReplaceObject.png|16px|OpenSCAD ReplaceObject|link=OpenSCAD ReplaceObject]] [[OpenSCAD ReplaceObject|OpenSCAD ReplaceObject]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD ReplaceObject.png|16px|OpenSCAD ReplaceObject|link=OpenSCAD ReplaceObject]] [[OpenSCAD ReplaceObject|OpenSCAD ReplaceObject]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:OpenSCAD RemoveSubtree.png|16px|OpenSCAD RemoveSubtree|link=OpenSCAD RemoveSubtree]] [[OpenSCAD RemoveSubtree|OpenSCAD RemoveSubtree]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD RemoveSubtree.png|16px|OpenSCAD RemoveSubtree|link=OpenSCAD RemoveSubtree]] [[OpenSCAD RemoveSubtree|OpenSCAD RemoveSubtree]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:OpenSCAD AddOpenSCADElement.png|16px|OpenSCAD AddOpenSCADElement|link=OpenSCAD AddOpenSCADElement]] [[OpenSCAD AddOpenSCADElement|OpenSCAD AddOpenSCADElement]]}}
 &lt;nowiki&gt;{{KEY|[[File:OpenSCAD AddOpenSCADElement.png|16px|OpenSCAD AddOpenSCADElement|link=OpenSCAD AddOpenSCADElement]] [[OpenSCAD AddOpenSCADElement|OpenSCAD AddOpenSCADElement]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD MeshBoolean</title>
    <ns>0</ns>
    <id>40128</id>
    <revision>
      <id>106829</id>
      <parentid>106828</parentid>
      <timestamp>2014-08-27T20:52:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8r8zhkbp5atjgr0xwy5aqnzorz2ta6c</sha1>
      <text xml:space="preserve" bytes="271">


&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD MeshBoolean|MenuLocation=OpenSCAD → Mesh Boolean...‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Minkowski</title>
    <ns>0</ns>
    <id>40141</id>
    <revision>
      <id>106843</id>
      <parentid>106842</parentid>
      <timestamp>2014-08-27T20:54:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>49d26m1k1ubhjw1w4lhtq2jpm36eih3</sha1>
      <text xml:space="preserve" bytes="263">


&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD Minkowski|MenuLocation=OpenSCAD → Minkowski‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Module</title>
    <ns>0</ns>
    <id>2782</id>
    <revision>
      <id>106008</id>
      <parentid>88906</parentid>
      <timestamp>2014-08-23T12:21:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>docnav</comment>
      <sha1>4dkidng8zqfutk5r1esgz92yltbaiao</sha1>
      <text xml:space="preserve" bytes="3393">
&lt;!--T:1--&gt;
The OpenSCAD module is in an early stage of development.

&lt;!--T:2--&gt;
The OpenSCAD module offers interoperability with the open source software [http://www.openscad.org/ OpenSCAD].


&lt;!--T:3--&gt;
[[Image:OpenSCADexamaple1.png|An example of imported OpenSCAD geometry]]

&lt;!--T:4--&gt;
It contains an [[OpenSCAD_CSG|importer]] which allows you to open the [[OpenSCAD_CSG|.csg]] output from OpenSCAD in FreeCAD.

&lt;!--T:5--&gt;
The [[OpenSCAD_CSG|exporter]] outputs a CSG based (sub-)tree to [[OpenSCAD_CSG|.csg]]. Geometry which is not based on CSG operations and is exported as a mesh. 
The OpenSCAD module contains a toolbox with functions to modify the feature tree and repair models.

== OpenSCAD language and file format == &lt;!--T:6--&gt;
The OpenSCAD language allows the use of variables and loops. It allows you to specify submodules to reuse geometry and code. This high degree of flexibility makes parsing very complex. Currently the OpenSCAD module in FreeCAD can not handle the OpenSCAD language natively.
Instead, if OpenSCAD is installed, it can be used to convert the input to an output format named 'CSG'. It is a subset of the OpenSCAD Language and can be used as the input to OpenSCAD for further processing.
During conversion all parametric behavior is lost - all variable names are discarded, loops expanded and mathematical expressions evaluated.

== GUI Commands == &lt;!--T:7--&gt;
{{OpenSCAD Tools}}

== Limitations == &lt;!--T:8--&gt;
OpenSCAD creates constructive solid geometry as well as importing mesh files and extruding 2d geometry (from dxf files). FreeCAD allows you to create CSG with primitives as well. The FreeCAD geometry kernel (OCCT) works using a boundary representation.
Therefore conversion from CSG to BREP should, in theory, be possible whereas conversion from BREP to CSG is, in general, not.

&lt;!--T:9--&gt;
OpenSCAD works internaly on meshes. Some operations which are useful on meshes are not meaningful on a BREP model and can not be fully supported.  Among these are convex hull, minkowski sum, glide and subdiv. Currently we run the OpenSCAD binary in order to perform hull and minkwoski operations and import the result. This means that the involved geometry will be triangulated. In OpenSCAD non-uniform scaling is often used, which does not impose any problems when using meshes. In our geometry kernel geometric primitives (lines, circular sections, etc) are converted to BSpline prior to performing such deformations. Those BSplines are known to cause trouble in later boolean operations. An automatic solution is not available at the moment. Please feel free to post to the forum if you encounter such problems. Often such problems can be solved be remodeling small parts. A deformation of a cylinder can substituted by an extrusion of an ellipses.

== Hints == &lt;!--T:10--&gt;
When importing DXF set the Draft precision to a sensible amount as this will affect the detection of connected edges.

&lt;!--T:11--&gt;
If FreeCAD crashes when importing CSG, it is strongly recommended that you enable 'automatically check model after boolean operation' in Menu -&gt; Edit -&gt; Preferences -&gt; Part Design -&gt; Model setting

== Links == &lt;!--T:12--&gt;
* [http://www.thingiverse.com/tag:openscad Things tagged with &quot;Openscad&quot; on Thingiverse]

&lt;!--T:13--&gt;
{{docnav|Mesh Module|Part Module}}

&lt;!--T:14--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD RefineShapeFeature</title>
    <ns>0</ns>
    <id>32501</id>
    <revision>
      <id>99927</id>
      <parentid>99926</parentid>
      <timestamp>2014-07-28T20:28:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>oidm6vd4f2g8i41ol9yt4sbfvr7pln4</sha1>
      <text xml:space="preserve" bytes="331">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=OpenSCAD RefineShapeFeature|MenuLocation=OpenSCAD → Refine Shape Feature|Workbenches=[[Part Module|Part]],  [[OpenSCAD Module|OpenSCAD]]|SeeAlso=..}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD RemoveSubtree</title>
    <ns>0</ns>
    <id>36951</id>
    <revision>
      <id>107391</id>
      <parentid>107390</parentid>
      <timestamp>2014-08-29T19:48:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>iurg9f4aoy8r6fbgktwusoagg969s85</sha1>
      <text xml:space="preserve" bytes="271">

&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD RemoveSubtree|MenuLocation=OpenSCAD → RemoveSubtree‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}



&lt;!--T:3--&gt;
ToDo



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD ReplaceObject</title>
    <ns>0</ns>
    <id>36962</id>
    <revision>
      <id>107382</id>
      <parentid>107381</parentid>
      <timestamp>2014-08-29T19:47:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8r3pfavwab1npftkbaf4rf4b27sjgmg</sha1>
      <text xml:space="preserve" bytes="269">

&lt;!--T:1--&gt;
{{GuiCommand|Name=OpenSCAD ReplaceObject|MenuLocation=OpenSCAD → ReplaceObject‏‎||Workbenches=[[OpenSCAD Module|OpenSCAD]]|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>OpenSCAD Workbench</title>
    <ns>0</ns>
    <id>2921</id>
    <redirect title="OpenSCAD Module" />
    <revision>
      <id>12807</id>
      <timestamp>2012-09-17T10:13:07Z</timestamp>
      <contributor>
        <username>Shoogen</username>
        <id>1492</id>
      </contributor>
      <comment>Redirected page to [[OpenSCAD Module]]</comment>
      <sha1>k8kr2dwjx1mhhmah7o3ai6r1dmtm4y7</sha1>
      <text xml:space="preserve" bytes="29">#REDIRECT [[OpenSCAD Module]]</text>
    </revision>
  </page>
  <page>
    <title>Organization chart</title>
    <ns>0</ns>
    <id>1827</id>
    <revision>
      <id>84406</id>
      <parentid>43038</parentid>
      <timestamp>2014-05-18T19:30:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>ef5182j3zcgwdau447hxrk3rrt7z2uz</sha1>
      <text xml:space="preserve" bytes="3515">The following table shows who does what in the FreeCAD universe...

{| class=&quot;orgchart&quot;
|+ '''FreeCAD software'''

|- class=&quot;orgheader&quot;
! Modules
| FreeCAD base    || Part   || Mesh || Sketcher + PartDesign                  || Draft         ||  (Production) Drawing || Arch
|-
|
| [[user:jriegel|jriegel]], [[user:wmayer|wmayer]] || [[user:wmayer|wmayer]] || [[user:wmayer|wmayer]] || [[user:jriegel|jriegel]], [[user:logari81|logari81]], [[user:mrlukeparry|mrlukeparry]], [[user:wmayer|wmayer]], [[user:jrheinlaender|jrheinlaender]] || [[user:yorikvanhavre|yorik]] || [[user:jriegel|jriegel]] || [[user:yorikvanhavre|yorik]]
|- class=&quot;orgheader&quot;
|
|  Robot Simulation || Splash Start || CNC G-Code || Family-Design Table || Fold-Flat (Sheet-Metal) || Assembly
|-
|
|    || [[user:yorikvanhavre|yorik]] || [[user:danielfalck|danielfalck]] ||  ||  Jacques-Antoine Gaudin, Carlton Corbitt PE || [[user:jriegel|jriegel]], [[user:ickby|ickby]]
|- class=&quot;orgheader&quot;
|
| Units || Material Properties || Bill of Materials || Mold Tooling || ANSI/ISO/DIN Part Library || FEM-FEA || Undo Button
|-
|
| [[User:Emagdalena|Emagdalena]] || [[User:Emagdalena|Emagdalena]] || ||  ||  ||

|- class=&quot;orgheader&quot;
! File formats 
| FcStd           || Obj    || Step + Iges     || Dxf                        || IFC || STL || PDF
|-
|
| [[user:jriegel|jriegel]], [[user:wmayer|wmayer]] || [[user:wmayer|wmayer]] || [[user:jriegel|jriegel]], [[user:wmayer|wmayer]] || [[user:yorikvanhavre|yorik]], [[user:danielfalck|danielfalck]] || [[user:yorikvanhavre|yorik]] ||
|-  class=&quot;orgheader&quot;
|
| SAT - ACIS || postscript || 
|-
|
| need vol

|- class=&quot;orgheader&quot;
! Compiled Binary
| Linux Deb Ubuntu || Linux Fedora || Linux OpenSUSE || MS Windows || Apple Mac || BSD / Unix || Android 
|-
|
| [[user:wmayer|wmayer]],[[user:normandc|normandc]] ||  ||  || [[user:jriegel|jriegel]] ||  ||  ||  
|}

{| class=&quot;orgchart&quot;
|+ '''FreeCAD Translation'''
|- class=&quot;orgheader&quot;
! Language 
| Chinese || Dutch || French || German || Polish || Portuguese || Spanish || Arabic
|-
|
|   || [[user:yorikvanhavre|yorik]] || [[user:yorikvanhavre|yorik]], [[user:normandc|normandc]] || || [[user:kwahooo|kwahooo]] || [[user:yorikvanhavre|yorik]] || [[User:Emagdalena|Emagdalena]] ||    
|-  class=&quot;orgheader&quot;
|
| Croatian
|-
|
| Petar pperisin
|}

{| class=&quot;orgchart&quot;
|+ '''FreeCAD Documentation'''
|- class=&quot;orgheader&quot;
!Documentation
| wiki || Forum || Mailing List || YouTube || Tutorial Writer || Manual || Organization Chart 
|-
|
|  [[user:yorikvanhavre|yorik]],[[user:normandc|normandc]], [[User:Emagdalena|Emagdalena]], [[User:Jdurston|Jdurston]] ||  ||  ||  [[user:kwahooo|kwahooo]], [[User:Jdurston|Jdurston]] || [[user:kwahooo|kwahooo]] || [[User:Emagdalena|Emagdalena]]  || Carlton Corbitt PE
|}

{| class=&quot;orgchart&quot;
|+  '''FreeCAD Publicity'''
|- class=&quot;orgheader&quot;
!Publicity
| Twitter  Laconica || Google+ || BlogSpot || Facebook || Webpage Development || Server &amp; Domain || Donation Account 
|-
|
|  [[User:Emagdalena|Emagdalena]], [[User:Jdurston|Jdurston]] || [[user:kwahooo|kwahooo]], [[user:yorikvanhavre|yorik]], [[User:Emagdalena|Emagdalena]] , [[User:Jdurston|Jdurston]] || [[user:kwahooo|kwahooo]] || [[user:yorikvanhavre|yorik]],[[User:Emagdalena|Emagdalena]] ||[[user:yorikvanhavre|yorik]] || SF.net || 
|}

Volunteers to help can post on the [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=1891&amp;start=30 Org Chart Thread] on the forum.

[[Category:Administration]]
[[Category:Developer]]


{{languages | {{es|Organization_chart/es}} }}</text>
    </revision>
  </page>
  <page>
    <title>Overview</title>
    <ns>0</ns>
    <id>625</id>
    <revision>
      <id>108008</id>
      <parentid>89278</parentid>
      <timestamp>2014-09-01T12:41:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Pagina de Inicio da Ajuda Online</title>
    <ns>0</ns>
    <id>3627</id>
    <revision>
      <id>108009</id>
      <parentid>89279</parentid>
      <timestamp>2014-09-01T12:41:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Parametric building ideas</title>
    <ns>0</ns>
    <id>1162</id>
    <revision>
      <id>108010</id>
      <parentid>89280</parentid>
      <timestamp>2014-09-01T12:42:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Parametrische Objekte erstellen</title>
    <ns>0</ns>
    <id>2281</id>
    <revision>
      <id>108011</id>
      <parentid>95802</parentid>
      <timestamp>2014-09-01T12:42:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Bearingholder Tutorial I</title>
    <ns>0</ns>
    <id>9661</id>
    <revision>
      <id>108035</id>
      <parentid>107915</parentid>
      <timestamp>2014-09-01T14:21:10Z</timestamp>
      <contributor>
        <username>Bejant</username>
        <id>3295</id>
      </contributor>
      <comment>Edited VeryImportandMessage and removed Tutorial tag.</comment>
      <sha1>f81f4me4ysj2phkr1utescgmqdzx4kv</sha1>
      <text xml:space="preserve" bytes="16656">
&lt;!--T:1--&gt;
{{VeryImportantMessage|'''This tutorial is for a development version of FreeCAD that is not currently available as a binary or installer. These features won't be included in FreeCAD until some undetermined future release. The only way to get these features is to [[Compiling|compile FreeCAD]] from this special development branch: http://sourceforge.net/p/free-cad/code/ci/jriegel/dev-assembly-old/~/tree/'''}}

&lt;!--T:2--&gt;
[[Image:HolderTop1-1.jpg|Bearing Holder Tutorial - Finished bearing holder (top)|thumb|right|400px]]

&lt;!--T:3--&gt;
As the warning at the top of the page already indicates, this '''tutorial will NOT WORK unless you compile a special highly experimental branch from FreeCAD source code''' and is an introductory tutorial to modeling with the PartDesign workbench in FreeCAD '''using Datum planes which are a feature that does not yet exist in most FreeCAD versions'''. The purpose of the tutorial is to introduce you to two different work flows for creating a cast part with drafts and fillets. Depending on what other CAD programs you have been using, one or the other might be familiar to you. As a working example we will be modeling a simple bearing holder.

&lt;!--T:4--&gt;
This is the first part of the tutorial. It will use what might be called the 'single body' work flow, using the (simpler) top part of the holder as an example.

&lt;!--T:5--&gt;
Obviously, to follow through this tutorial you must activate the PartDesign workbench.

&lt;!--T:6--&gt;
You can find my version of the part created by this tutorial [[http://ubuntuone.com/5gok0J4dye3Fo4BKWMGWVa here]].
&lt;br clear=all&gt;

== Design data == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
The holder should be able to hold a diameter 90mm bearing with a width of up to 33mm (e.g. DIN 630 type 2308). The bearing requires a shoulder height of at least 4.5mm in the holder (and on the shaft). The top part of the holder will be bolted to the bottom with two 12mm bolts. There should be a groove on both sides of the bearing able to hold a standard shaft sealing ring DIN 3760: 38x55x7 or 40x55x7 on one side, 50x68x8 on the other side.

&lt;!--T:9--&gt;
The holder will be a sand cast with a minimum wall thickness of 5mm, a draft angle of 2 degrees, and a minimum fillet radius of 3mm.

&lt;br clear=all&gt;
== Setting up the skeleton geometry == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[Image:HolderTop1-2.jpg|Bearing holder with the two most important skeleton planes|thumb|right|text-top|400px]]

&lt;!--T:12--&gt;
The idea of skeleton geometry is to capture the basic design dimensions in a single datum feature (e.g. a plane or an axis). When the design dimension changes, all that needs to be done is to change the skeleton feature. If the model is well built, then all its feature will recompute to reflect the design change. This reduces the danger that in a complex model, where the basic design dimensions are used in multiple places, you forget to change it somewhere.

&lt;!--T:13--&gt;
The alternative to skeleton geometry is to have a table of the basic design dimensions that assign a symbolic name to each dimension, and then use the symbolic name wherever the dimensions is required to build the model. FreeCAD does not allow this approach yet.

&lt;!--T:14--&gt;
[[Image:HolderTop1-3.jpg|Base planes and all datum planes|thumb|right|text-top|400px]]

&lt;!--T:15--&gt;
For the case of the bearing holder, the two most important design dimensions are the distance between the bolts (which limits the size of the bearing that can be used) and the height of the bolt heads. The dimensions chosen are
* Distance between bolts: Radius of bearing (45) + wall thickness (5) plus radius of hole for bolt (7) = 57mm, so the vertical plane will be 57mm offset from the YZ-plane.  To create this datum plane, select the YZ-plane and then choose to create a new datum plane. Enter the offset in the dialog that opens up
* Height of bolt heads: This was chosen as an offset of 28mm from the XZ-plane

&lt;!--T:16--&gt;
For convenience, two further datum planes can be created to reflect the amount of material that must be cut away from the sides of the bearing holder. They are offset +22 and -22 from the XY-plane.

&lt;!--T:17--&gt;
It is advisable to give clear names to the skeleton geometry. Most of the time, you will want to turn off visibility for datum planes because they clutter up the screen, and if the planes have self-explanatory names you can just pick them by name instead of from the screen.
&lt;br clear=all&gt;

== The solid geometry == &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
[[Image:HolderTop1-4.jpg|thumb|400px|right|text-top|Sketch of the first pad]]
Now its time to start creating some real geometry. The sketch for the first pad is shown on the right. It is placed on the XY-plane. There are just three dimensions: The inner radius (22.5mm), the machining allowance (3mm) at the base as an offset to the XZ-plane and the distance from the datum plane representing the bolt axis (7mm). This means that if you later move the datum plane, the pad will automatically adjust its outer radius. Remember that before you can use the datum plane for dimensioning, you need to introduce it as external geometry to the sketcher.

&lt;!--T:20--&gt;
You are probably wondering why there is a small straight segment at the bottom of each arc. This segment ensures that there will be a draft angle of 2 degrees on the arcs. This might look like a lot of work for a very small benefit, but many CAD programs (and maybe FreeCAD one day) have tools that highlight a solid model in different colours and immediately show you all faces where the draft angle is not correct. You don't want that to happen to your model, especially after putting on a lot of fillets!

&lt;!--T:21--&gt;
When you have done the sketch (which is a bit tricky because of the 2 degree tangential lines), just pad it symmetrically to the sketch plane with a length of 62mm: 34mm for the bearing, 2x 9mm for the sealing rings, 2x 5mm for the wall thickness.
&lt;br clear=all&gt;

&lt;!--T:22--&gt;
[[Image:HolderTop1-5.jpg|thumb|400px|right|text-top|Sketch of the cut-away at the side of the pad]]
Next we want to cut away some material where the sealing rings are, because their outer diameter is much less than the bearing's. The easiest way to create the sketches is to select the sketch of the pad and then choose &quot;Duplicate selection&quot; from the edit menu. You can then remap the sketch to the side of the pad, and modify it as shown in the picture.

&lt;!--T:23--&gt;
The only two important dimensions in the sketch are 3mm of machining allowance at the bottom, and a inner diameter of 78mm: 68mm for the outer diameter of the sealing ring + 2x 5mm wall thickness. Since the sealing ring on the other side will only have a diameter of 55mm, the cut-out can be 65mm here.

&lt;!--T:24--&gt;
After you have created the sketch, pocket it up to the datum plane marking the bearing side plus 5mm wall thickness. If you ever want to modify the holder to be able to hold wider bearings, all you have to do is to change the dimension of these datum planes, and the cut-out depth will follow along.
&lt;br clear=all&gt;

&lt;!--T:25--&gt;
[[Image:HolderTop1-6.jpg|thumb|400px|right|text-top|Sketch of the cut-away inside the pad]]
To reduce the amount of machining required, we also want to cut away some material inside the holder. Again, duplicating the sketch of the first pad is convenient. It doesn't even have to be remapped. Again, the only important dimensions are the machining allowance (3mm) and the outer diameters: 84mm for the place where the bearing will be (90mm - 2x machining allowance), 49mm for the smaller sealing ring (55mm - 2x 3mm) and 62mm for the larger sealing ring.

&lt;!--T:26--&gt;
After creating the sketches, pocket them: Symetrically 28mm for the bearing cut-out (34mm - 2x machining allowance) and one-sided 23mm for the cut-outs for the sealing rings: 34mm / 2 for half the bearing width + 9mm for the sealing rings - 3mm machining allowance. 
&lt;br clear=all&gt;

&lt;!--T:27--&gt;
[[Image:HolderTop1-7.jpg|thumb|400px|right|text-top|Main geometry of the holder top]]
Your part should now look like the picture on the right. Note how the different cut-aways combine to create an almost uniform wall thickness, which will make the casting easier and less liable to have pores.
&lt;br clear=all&gt;

&lt;!--T:28--&gt;
[[Image:HolderTop1-8.jpg|thumb|400px|right|text-top|Sketch with draft where the bolts will be]]
Now all that remains is to create some material for the bolts to go through. You might be tempted to sketch these as a circle and then pad them, but this will head you for trouble when you try to put the draft onto them later (I assume that is a weakness of OpenCascade). So to circumvent the problems, it is better to create a sketch with the draft angle included and then rotate it through 360 degrees.

&lt;!--T:29--&gt;
Here again the skeleton planes come in useful. You will need the bolt axis plane and the bolt head plane as external geometry. Then, create a straight line for the rotation axis and make sure it is constrained to the bolt axis plane reference. Toggle it to be construction geometry. Then, sketch the rest of the contour. The important dimensions are the machining allowance at the top and bottom and the radius of 12mm: 7mm for the hole radius + 5mm wall thickness.
&lt;br clear=all&gt;

&lt;!--T:30--&gt;
[[Image:HolderTop1-9.jpg|thumb|400px|right|text-top|Finished geometry of the holder top (without draft and fillets)]]
Create a revolution feature from the sketch and then mirror it on the YZ-plane. This is all the solid geometry we need to model. The rest is draft and fillets.
&lt;br clear=all&gt;

== Applying draft to the side faces == &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
[[Image:HolderTop1-10.jpg|thumb|400px|right|text-top|The neutral plane for creating drafts]]
The next step is to apply drafts on all faces. Its important to consider the location of the neutral plane, that is, the plane which the face is &quot;rotated&quot; around. If we choose as neutral plane the bottom of the holder, then we will have a problem with the wall thickness in the top part of the holder. Therefore, we create a datum plane at an offset of 40mm from the XZ plane as a compromise between the top of the holder becoming to thin and the bottom becoming to wide.
&lt;br clear=all&gt;

&lt;!--T:33--&gt;
[[Image:HolderTop1-11.jpg|thumb|400px|right|text-top|Applying draft to the side faces of the holder]]
To put draft on a face, select this face and create the draft feature. You can then select more faces to apply the draft on. If you have a large part, it is advisable to draft only one face at a time. This means that if you change the geometry and a draft fails, only this one feature will fail, whereas if you put all faces in one draft feature, then the whole feature might fail because of one face failing. For a small part like the bearing holder, its sufficient to create two draft features: One for the four outside faces, and one for the inside faces.

&lt;!--T:34--&gt;
The dialog will force you to select a neutral plane before completing. You can leave the pull direction empty, in this case it will be normal to the neutral plane. Don't forget to set the draft angle to 2 degrees.
&lt;br clear=all&gt;

== Filleting the holder == &lt;!--T:35--&gt;

&lt;!--T:36--&gt;
[[Image:HolderTop1-13.jpg|thumb|400px|right|text-top|Fillet where the bolts will go]]
We can now fillet the part. The picture shows the first set of fillets. Start with the small circular fillets and make them 4mm radius. Even though 3mm would be enough as per specification of the part, a radius of 4mm means that after machining 1mm of the fillet is left, reducing the sharp edge produced by the machining. The large fillets are 6mm radius to help spread the force from the bolts into the rest of the part. It would be nice to make this radius even larger, but unfortunately OpenCascade can't handle overlapping fillets yet.

&lt;!--T:37--&gt;
As with drafts, in a complex part you should fillet only one edge at a time to avoid unnecessary failures if the base geometry changes.
&lt;br clear=all&gt;

&lt;!--T:38--&gt;
[[Image:HolderTop1-12.jpg|thumb|400px|right|text-top|Filleting the outside of the holder]]
The rest of the fillets are simply 3mm radius. Looking at the picture on the right, the two highlighted fillets could actually be filleted with 5mm to achieve a more uniform wall thickness for the casting. After machining, the minimum wall thickness of 5mm would still be maintained. But again the fact that OpenCascade can't handle overlapping fillets prevents us from doing this for the inner of the two highlighted fillets.
&lt;br clear=all&gt;

&lt;!--T:39--&gt;
[[Image:HolderTop1-14.jpg|thumb|400px|right|text-top|Filleting the inside of the holder - problematic edge]]
Filleting the inside of the part presents us with a difficulty that cannot be solved with the current tools in the PartDesign workbench. The highlighted edge cannot be filleted at all, again because the rounds would overlap. This could be worked around by creating a sweep instead of a fillet, except that sweeps are not implemented in PartDesign yet. For the time being, we are forced to leave the edge as it is.
&lt;br clear=all&gt;

&lt;!--T:40--&gt;
[[Image:HolderTop1-15.jpg|thumb|400px|right|text-top|The filleted part (except for the impossible edge)]]
The picture on the right shows the finished part in the state it will be before machining (except for the one edge that is impossible to fillet). You will notice that one edge that runs around the whole part has been left unfilleted on purpose. This is the edge where the bottom and the top of the mould meet. Here, no fillet is possible (and none is required anyway).
&lt;br clear=all&gt;

== Machining == &lt;!--T:41--&gt;

&lt;!--T:42--&gt;
[[Image:HolderTop1-16.jpg|thumb|400px|right|text-top|Machining the top and bottom of the holder]]
[[Image:HolderTop1-17.jpg|thumb|400px|right|text-top|Machining the inside of the bearing holder]]
Now we can cut away the material that will be machined off the raw cast part. This is very easy with the skeleton geometry defined. The idea is to create all machining features (Pockets and Grooves) using datum features only. This means they will be totally independent of the solid geometry of the bearing holder, which gives us some big advantages:
* No matter how you change the solid geometry, the features for the machining can never fail.
* You can create the machining geometry before finalizing the solid, which gives you useful visual feedback.
* If you move the skeleton datum planes, then both the solid geometry and the machining will adapt automatically.
* If you make a mistake in your solid geometry, the machining will still be in the correct position, and very likely the mistake will become glaringly obvious (e.g. a wall thickness becoming 2mm instead of 5mm). Whereas if you reference the machining to the solid geometry, it will adapt to the error in the solid and e.g. maintain the 5mm wall thickness, just in the same wrong location as the solid is.

&lt;!--T:43--&gt;
Before starting on the machining geometry, I like to place a datum point in the tree and name it something like &quot;Machining_starts_here&quot;. This is useful if you want to switch between the raw and the machined state of the part because you can see at a glance where to move the insert point to get the raw state.

&lt;!--T:44--&gt;
To machine the bottom of the holder, just sketch a large rectangle on the XZ plane and pocket it. For the top, sketch a circle on the datum plane defining the bolt head location, and then mirror the pocket on the YZ plane. In the same way, create a pocket for the hole which the bolt will go through and mirror it. To machine the inside of the holder, create a sketch on the YZ plane and groove it.
&lt;br clear=all&gt;

&lt;!--T:45--&gt;
[[Image:HolderTop1-1.jpg|thumb|400px|right|text-top|Finished part]]
Once you have done the machining, you can have a nice visual effect by colouring all the machined faces so that you can see at one glance which parts are raw casting and which are machined after casting.

&lt;!--T:46--&gt;
&lt;br clear=all&gt;

== Final notes == &lt;!--T:47--&gt;

&lt;!--T:48--&gt;
We have modelled the bearing holder top with the dimensions it will have after casting. To create the casting mould, you need to apply shrinkage to your part because after casting, when the hot metal cools down, it will shrink by a few percent (depending on the material). Usually it is best to leave the application of shrinkage to the foundry making the part because they have the required special knowledge. They should also tell you if your part has problematic areas, e.g. very thick walls suddenly joining to very thin sections without a properly tapered section between them.

== Part Two == &lt;!--T:49--&gt;
[[PartDesign Bearingholder Tutorial II]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Bearingholder Tutorial II</title>
    <ns>0</ns>
    <id>10401</id>
    <revision>
      <id>108036</id>
      <parentid>107919</parentid>
      <timestamp>2014-09-01T14:23:20Z</timestamp>
      <contributor>
        <username>Bejant</username>
        <id>3295</id>
      </contributor>
      <comment>Edited VeryImportantMessage and removed Tutorial tag.</comment>
      <sha1>4yx6ujlxui6tsebumwtmqbssypvaaqr</sha1>
      <text xml:space="preserve" bytes="15347">
&lt;!--T:1--&gt;
{{VeryImportantMessage|'''This tutorial is for a development version of FreeCAD that is not currently available as a binary or installer. These features won't be included in FreeCAD until some undetermined future release. The only way to get these features is to [[Compiling|compile FreeCAD]] from this special development branch: http://sourceforge.net/p/free-cad/code/ci/jriegel/dev-assembly-old/~/tree/'''}}

&lt;!--T:2--&gt;
[[Image:HolderTop2-19.jpg|Bearing Holder Tutorial - Finished bearing holder (top)|thumb|right|400px]]

&lt;!--T:3--&gt;
As the warning at the top of the page already indicates, this '''tutorial will NOT WORK unless you compile a special highly experimental branch from FreeCAD source code''' and is an introductory tutorial to modeling with the PartDesign workbench in FreeCAD '''using Datum planes which are a feature that does not yet exist in most FreeCAD versions'''. The purpose of the tutorial is to introduce you to two different work flows for creating a cast part with drafts and fillets. Depending on what other CAD programs you have been using, one or the other might be familiar to you. As a working example we will be modeling a simple bearing holder.

&lt;!--T:4--&gt;
This is the second part of the tutorial. It will use what might be called the 'multiple body' workflow, using the (simpler) top part of the holder as an example.

&lt;!--T:5--&gt;
Obviously, to follow through this tutorial you must activate the PartDesign workbench.

&lt;!--T:6--&gt;
You can find my version of the part created in this tutorial [[http://ubuntuone.com/39PTZ3Y3LUnmZzpZQPcJT4 here]]
&lt;br clear=all&gt;

== Design data == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
The holder should be able to hold a diameter 90mm bearing with a width of up to 33mm (e.g. DIN 630 type 2308 which has an inside diameter of 40mm). The bearing requires a shoulder height of at least 4.5mm in the holder (and on the shaft). The top part of the holder will be bolted to the bottom with two 12mm bolts. The head of such a bolt will require at least 20mm diameter free space. There should be a groove on both sides of the bearing able to hold a standard shaft sealing ring DIN 3760: 38x55x7 or 40x55x7 on one side, 50x68x8 on the other side.

&lt;!--T:9--&gt;
The holder will be a sand cast with a minimum wall thickness of 5mm, a draft angle of 2 degrees, and a minimum fillet radius of 3mm.

&lt;!--T:10--&gt;
&lt;br clear=all&gt;

== Setting up the skeleton geometry == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
[[Image:HolderTop2-2.jpg|Sketch of the skeleton geometry|thumb|right|400px]]
Create a new part in the PartDesign workbench. Rename the Body that is created by default to Skeleton. This Body is probably activated already, which you can see by the blue background colour in the feature tree. Create a new sketch on the YZ plane containing the outline of the shaft, bearing and sealing rings. After finishing the sketch, make a revolution feature from it. This skeleton feature will later be used to reference the real geometry to it. This means that if you want to change any dimensions, all you need to do is adjust the skeleton feature's dimensions and the rest of the part will update accordingly.
[[Image:HolderTop2-2-1.jpg|The skeleton geometry|thumb|right|400px]]

&lt;!--T:13--&gt;
&lt;br clear=all&gt;

== The main body == &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
[[Image:HolderTop2-3.jpg|Sketch of the first Pad|thumb|right|400px]]
Create a new body and make it active. The sketch for the first pad is shown on the right. It is placed on a datum plane with an offset of 5mm (wall thickness) from the skeleton face marking the side of one of the bearing sealing rings. Because all the important dimensions are taken from the skeleton, there are just three dimensions: The machining allowance (3mm) at the base as an offset to the XY-plane, the 5mm wall thickness from the outer diameter of the skeleton, and the two degrees draft angle. Two create the 5mm dimension, you first need to select the outer circle (radius 45mm) of the skeleton geometry as external geometry in the sketcher, and then put in a construction line constrained tangential to this circle and at an angle of two degrees.

&lt;!--T:16--&gt;
You are probably wondering why there is this small straight segment at the bottom of each arc. This segment ensures that there will be a draft angle of 2 degrees on the arcs. This might look like a lot of work for a very small benefit, but many CAD programs (and maybe FreeCAD one day) have tools that highlight a solid model in different colours and immediately show you all faces where the draft angle is not correct. You don't want that to happen to your model, especially after putting on a lot of fillets!
&lt;br clear=all&gt;

&lt;!--T:17--&gt;
[[Image:HolderTop2-4.jpg|The first Pad|thumb|right|400px]]
When you have done the sketch (which is a bit tricky because of the 2 degree tangential lines), create a Pad from it extending up to the other side of the skeleton geometry, again with a 5mm offset to the side face. You don't need to create a datum plane this time, the &quot;up to face&quot; mode of the Pad dialog offers to input an offset.
&lt;br clear=all&gt;

&lt;!--T:18--&gt;
[[Image:HolderTop2-5.jpg|Sketch for Pad cut-out|thumb|right|400px]]
Next, we will cut away some material on both ends of the Pad because it is always ideal for cast parts to have as uniform a wall thickness as possible. Create a sketch on each of the end faces of the Pad and dimension it at 5mm offset from the circle representing the bearing sealing ring (radius 27.5mm on one side and 34mm on the other). For the bottom line segment of the sketch, create another external geometry from the Pad and constrain to this. Thus the sketch has only a single dimension, the 5mm wall thickness (the 150mm and 75mm dimensions are not important as long as they are large enough to ensure that everything is cut away).
&lt;br clear=all&gt;

&lt;!--T:19--&gt;
[[Image:HolderTop2-6.jpg|The Pad with cut-outs to achieve uniform wall thickness|thumb|right|400px]]
Use the sketch you created to make a Pocket and extend it to the face of the skeleton geometry that represents the bearing, minus 5mm offset for the wall thickness. For the second Pocket, you can use the option &quot;Duplicate selected object&quot; from the Edit menu to duplicate the sketch you already made (choose not to duplicate dependend objects if the question pops up). Then, select the face you want to move this sketch to, and tell FreeCAD to map the sketch to this face (this is an item on the PartDesign menu). After creating the second Pocket, you can look at the result from the bottom to check that you have a uniform wall thickness of 5mm around the contour of the skeleton geometry.
&lt;br clear=all&gt;

&lt;!--T:20--&gt;
[[Image:HolderTop2-7.jpg|Neutral plane for applying draft|thumb|right|400px]]
Now it's time to create draft and fillets. The draft feature requires a neutral plane, meaning that the geometry that is cut by this plane will remain in its place, while the rest of the face is tilted at the draft angle. Using the bottom of the Pad for this purpose for this is not a good idea, because the wall thickness in the top part of the holder would become less than 5mm. So we create a datum plane offset about 35mm from the XY for this purpose. Activate the Skeleton body and create the plane there, because we will need it for applying draft to other bodies, too.
&lt;br clear=all&gt;

&lt;!--T:21--&gt;
[[Image:HolderTop2-8.jpg|First body with draft and fillets|thumb|right|400px]]
The picture on the right shows the finished first body with draft and fillets applied. Note that the outer (concave) edges have a larger fillet radius of 5mm, again with the purpose of creating a more uniform wall thickness (more than 5mm is not possible because then after machining the inside of the holder the wall thickness would become less than 5mm).
&lt;br clear=all&gt;

== Adding the bodies for the bolts == &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
[[Image:HolderTop2-13.jpg|The sketch for the body for the bolts|thumb|right|400px]]
The bolts need two cylindrical bodies on both sides of the main Body. It is best to include the 2 degree draft angle in the sketch. I tried revolving a cylinder and later applying a draft, but weird things happened after mirroring it and I couldn't put fillets on it because the surface was warped somehow.

&lt;!--T:24--&gt;
The sketch is dimensioned so that the rotation axis is 12mm distance to the outer diameter of the skeleton Body, 7mm for the radius of the hole plus 5mm for the wall thickness. For the sake of having a fully parametric part, it is a good idea to add a plane to the Skeleton about 25mm above the XY-plane to mark the top of the cylinders. Since this will be machined, the sketch is dimensioned 3mm above it.

&lt;!--T:25--&gt;
&lt;br clear=all&gt;

&lt;!--T:26--&gt;
[[Image:HolderTop2-14.jpg|The body for the bolts|thumb|right|400px]]
Create a revolution from the sketch and apply a fillet of 4mm to the top. This means that after machining away 3mm, a slight radius will remain which helps to avoid a sharp edge where someone could cut their hand when tightening the bolt.
&lt;br clear=all&gt;

&lt;!--T:27--&gt;
[[Image:HolderTop2-16.jpg|The main body with the two bodies for the bolts|thumb|right|400px]]
Create a boolean feature to fuse the main Body and the bolt body. Then create a new body for the other side. Duplicate the sketch of the revolution, move it to this body and create the second body for the bolts (mirroring a Body is not supported yet so you need to redo most of it). Then fuse this second body into the main Body as well. Finally, apply a large fillet on the edge created by the boolean fuse operation. The largest I could get was 4mm.
&lt;br clear=all&gt;

== Hollowing out the main body == &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
[[Image:HolderTop2-9.jpg|The first Pad of the cut-out body inside the main body|thumb|right|300px]]
We will now work on the inside of the holder and hollow it out to make space for the bearing and sealing rings. When doing this of course we need to keep in mind the 3mm machining allowance. Since this tutorial teaches the multi-body method, we will create the inside geometry as a separate body and then cut it out of the main body with a boolean operation.

&lt;!--T:30--&gt;
Create a new body and make it active. First, we need a datum plane offset 3mm inside the skeleton face that shows the side of the bearing. Then, duplicate the sketch of the first Pad of the main body. It will be added to the main body, so right-click on it and choose to move it to the newly created body (this option is only available in the context menu if the PartDesign workbench is active). Map the sketch onto the datum plane (if the sketch turns upside-down after mapping, move the datum plane to the other side of the bearing, next to where the duplicated sketch is located). Now, modify the sketch so that the diameter is 3mm less than the outer diameter of the skeleton geometry that represents the bearing. All you need to do is remove the 5mm dimension, drag the sketch inside the reference circle, and create a new 3mm dimension.
&lt;br clear=all&gt;

&lt;!--T:31--&gt;
[[Image:HolderTop2-10.jpg|The cut-out body inside the skeleton body|thumb|right|400px]]
Next we want two more Pads to hollow out the place for the sealing rings. Duplicate the sketch of the first pad of the cut-out Body and map it to the XZ-plane. Edit the sketch and replace the external reference with the outer diameter of the bearing sealing ring. Extrude this sketch to an offset of 3mm of the side of the sealing ring. Repeat the whole process for the sealing ring on the other side.

&lt;!--T:32--&gt;
After this we want to create two more Pads like the last two to give the shaft a clearance (e.g. 3mm) inside the holder.
&lt;br clear=all&gt;

&lt;!--T:33--&gt;
[[Image:HolderTop2-11.jpg|The complete cut-out body (minus impossible fillets)|thumb|right|400px]]
Now all that remains is to apply draft to the planar side faces, using the same neutral plane as for the main body, and filleting. Apply a general fillet of 3mm to all edges. You will notice that there are several edges that cannot be filleted... this is a defect of the underlying geometric kernel which FreeCAD uses.
&lt;br clear=all&gt;

&lt;!--T:34--&gt;
[[Image:HolderTop2-15.jpg|The completed raw part of the holder (without machining)|thumb|right|400px]]
We are ready to hollow out the main body. Select it and choose to create a new Boolean operation. Add the cut-out body to the list window and set the operation to &quot;Cut&quot;. Put a 3mm fillet on the two edges resulting from the cut-out operation (again some edges remain that are &quot;unfilletable&quot;). The result should look like the picture on the right.

&lt;!--T:35--&gt;
The raw part is now completed. This is what the holder will look like before machining. Note that since the mold will have a top and bottom half, the edge between these two cannot be filleted. Also, if you give away this model to a foundry make sure to point out that it has the dimensions after casting. The foundry will then have to apply a certain percentage of shrinkage to the model (making the digital model used to manufacture the mold larger so that when the metal cools down and shrinks after casting it will have the right size).
&lt;br clear=all&gt;

== Machining == &lt;!--T:36--&gt;

&lt;!--T:37--&gt;
[[Image:HolderTop2-17.jpg|Sketch to &quot;drill&quot; the hole for the bolts|thumb|right|400px]]
To take away the material for machining the inside of the holder, very conveniently we can use the Skeleton Body itself. If you don't want that because then the skeleton gets hidden somewhere deep in the tree, you can also duplicate the sketch of the skeleton Revolution feature and re-create the revolution in another body. This is not completely parametric, though, because the duplicated sketch is independent of the original, so you will have to work on both if you change a dimension. Dependent duplicated features might be supported in the future sometime.

&lt;!--T:38--&gt;
For the rest of the machining, create a new Body. The bottom of the holder will be machined by a Pad sketched on the XY-plane extending downwards. Next, sketch a revolution to make a hole for the bolts. You will need to sketch on the XZ-plane and revolve it so that you can choose the outer diameter of the skeleton Body as an external reference. The top part of the sketch will serve to machine a flat place for the head of the bolt. It is dimensioned to leave at least 5mm wall thickness in the holder. If this does not give enough space for the bolt head then you can move the datum plane upwards. Of course, you could put this logic into the Skeleton, which is left as an exercise to the reader!
&lt;br clear=all&gt;

&lt;!--T:39--&gt;
[[Image:HolderTop2-18.jpg|The machining Body|thumb|right|400px]]
You can mirror the revolution on the YZ-axis. The picture on the right shows the &quot;machining&quot; Body. Of course, most of the dimensions of the Pads and Revolutions are not important as long as there is plenty of overlap.
&lt;br clear=all&gt;

&lt;!--T:40--&gt;
[[Image:HolderTop2-19.jpg|The finished Holder with machining|thumb|right|400px]]
Finally, create a boolean operation to cut the machining Body out of the main Body. If you want a nice visual effect, you can colour the machined surfaces differently from the rest of the part. This is also a useful optical feedback showing you whether you forgot to machine somewhere.
&lt;br clear=all&gt;

== Part One == &lt;!--T:41--&gt;
[[PartDesign Bearingholder Tutorial I]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Chamfer</title>
    <ns>0</ns>
    <id>2915</id>
    <revision>
      <id>57498</id>
      <parentid>57497</parentid>
      <timestamp>2013-12-22T22:04:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>chbfz3m4w5rz30b84r7sumh07np3zjg</sha1>
      <text xml:space="preserve" bytes="700">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign Chamfer|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=Part Design → Chamfer|SeeAlso=[[Part Chamfer|Chamfer Part]]}}

=== Description === &lt;!--T:2--&gt;

{|
|
[[Image:PartDesign_Chamfer-01.png|thumb|left|Sélection des arêtes avant de démarrer la commande.]]
[[Image:PartDesign_Chamfer-02.png|thumb|left|Réglage de la dimension du chanfrein dans les paramètres de chanfrein.]]
[[Image:PartDesign_Chamfer-03.png|thumb|left|Un élément Chamfer est ajouté dans l'arborescence Projet.]]
|
=== Usage === &lt;!--T:3--&gt;
#
#
#
=== PartDesign Chamfer VS. Part Chamfer  ===
*
*
*
|}




&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Draft</title>
    <ns>0</ns>
    <id>4309</id>
    <revision>
      <id>98835</id>
      <parentid>97548</parentid>
      <timestamp>2014-07-25T16:40:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>rksi8pqfkhfgpduobeks6wdvky8qvzo</sha1>
      <text xml:space="preserve" bytes="2966">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign Draft|MenuLocation=Part Design → Draft|Workbenches=[[PartDesign_Workbench|Part Design]]|Shortcut=None|SeeAlso=None}}

=== Description === &lt;!--T:2--&gt;
This tool creates angular draft on the selected faces of an object. A new separate Draft entry (followed by a sequential number if there are already existing drafts in the document) is created in the Project tree.

{|
|
[[Image:PartDesign_Draft-01.png|thumb|left|Select one or more faces on the object before starting the tool. Here, 2 faces have been selected.]]
[[Image:PartDesign_Draft-02.png|thumb|left|Showing Draft Parameter in TaskPanel.]]
[[Image:PartDesign_Draft-03.png|thumb|left|2 faces have been added, and a 10 deg. draft applied. The bottom plane has remained dimensionally stable, while the draft has made the top plane smaller.]]
[[Image:PartDesign_Draft-04.png|thumb|left|The Neutral Plane has been changed to the Top Surface. Now, the top plane has stayed dimensionally stable, while the draft has made the bottom plane larger.]]
[[Image:PartDesign_Draft-05.png|thumb|left|Pull direction is set to the lower right edge, resulting in the draft pulling to the left.]]
[[Image:PartDesign_Draft-06.png|thumb|left|Checking the Reverse Direction box has applied an inward draft rather than outward.]]
|
=== Usage === &lt;!--T:3--&gt;
* Select one or more faces on an object, then start the tool either by clicking its icon or going into the menu.
* In Draft Parameters on the TaskPanel, set the required parameters and/or options as described below.
* Click OK to validate.
* To edit the draft after the function has been validated, either double-click on the Draft label in the Project tree, or right-click on it and select '''Edit Draft'''.
=== Parameters and Options ===
==== Add Face / Remove Face ==== 
Click Add Face or Remove Face, then select a single face to update the list of active faces. Repeat as needed.
==== Draft Angle ==== 
Set the Draft Angle by entering a value or by clicking on the up/down arrows. The applied draft angle is shown in real time.
==== Neutral Plane ==== 
Click Neutral Plane, then select the plane that must not change dimensionally. The change is made in real time.
==== Pull Direction ==== 
Click Pull Direction, then select an edge. Pull Direction is only effective if the Neutral Plane has been set. Results can be unpredictable.
==== Reverse Pull Direction ==== 
Checking Reverse Pull Direction will toggle the draft between positive and negative angles.
=== Special Cases ===
The Draft tool will only function on faces that are normal to each other.  If there are any tangential faces attached to the face you wish to apply draft to, it will fail.  A common cause of failure is attempting to apply draft to a face that already has a fillet or chamfer applied to it.  In this case, remove the tangential surface, apply the draft as need, then re-apply the fillet or chamfer.
|}



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Fillet</title>
    <ns>0</ns>
    <id>2186</id>
    <revision>
      <id>98819</id>
      <parentid>98818</parentid>
      <timestamp>2014-07-25T16:36:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>849c6a57wzvf8cupeob8fj8wictdxnt</sha1>
      <text xml:space="preserve" bytes="3268">

&lt;!--T:20--&gt;
{{GuiCommand|Name=PartDesign Fillet|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Fillet|SeeAlso=[[Part Fillet|Part Fillet]]}}

==== Description ==== &lt;!--T:21--&gt;
This tool creates fillets (rounds) on the selected edges of an object. A new separate Fillet entry (followed by a sequential number if there are already existing fillets in the document) is created in the Project tree.

[[Image:PartDesign_Fillet-01.png|thumb|left|Select edges on the object before starting the tool.]]
[[Image:PartDesign_Fillet-02.png|thumb|left|Set the fillet radius in the Fillet parameters.]]
[[Image:PartDesign_Fillet-03.png|thumb|left|A Fillet object is added in the Project tree.]]
==== Usage ==== &lt;!--T:22--&gt;
* Select a single or multiple edges on an object, then start the tool either by clicking its icon or going into the menu.
* In Fillet parameters in the TaskPanel, set the fillet radius either by entering the value, or by clicking on the up/down arrows. The applied fillet is shown in real time.
* Click OK to validate.
* For a chain of edges tangential to one another, one single edge can be selected; the fillet will propagate along the chain. 
* To edit the fillet after the function has been validated, either double-click on the Fillet label in the Project tree, or right-click on it and select '''Edit Fillet'''.
==== PartDesign Fillet VS. Part Fillet ==== 
'''The PartDesign Fillet is not to be confused with its [[Part Fillet|Part workbench counterpart]]'''. Although they share the same icon, they are not the same, and are not used the same way.
Here is how they differ from each other:
* The PartDesign Fillet is ''parametric''. After a fillet has been applied, its radius can be edited; this is not possible with the Part Fillet.
* Edges must be selected on an object before activating the PartDesign Fillet. WIth the Part Fillet, the tool can be started, then a solid is selected, then edges.
* The PartDesign Fillet creates a separate Fillet entry (followed by a sequential number if there are already existing fillets) in the Project tree. The Part Fillet becomes the parent of the object it was applied to.
* The PartDesign Fillet offers a live preview of the fillet applied to the object before validating the function.
* The Part Fillet supports variable radii (with a start radius and an end radius). The PartDesign fillet doesn't.
{{clear}}

==Scripting== &lt;!--T:23--&gt;
The tool {{KEY|[[File:PartDesign_Fillet.png|16px|text-top=Fillet|link=PartDesign_Fillet]] [[ PartDesign_Fillet|Fillet]]}} can be used in a macro, and, from the Python console using the following function :

&lt;syntaxhighlight&gt;
Box = Box.makeFillet(3,[Box.Edges[0]]) # 1 Fillet
Box = Box.makeFillet(3,[Box.Edges[1],Box.Edges[2],Box.Edges[3],Box.Edges[4]]) # for several Fillets
&lt;/syntaxhighlight&gt;


&lt;!--T:24--&gt;
*3 = radius
*Box.Edges[2] = Edge with its number


&lt;!--T:25--&gt;
Example :

&lt;syntaxhighlight&gt;
import PartDesign
from FreeCAD import Base

Box = Part.makeBox(10,10,10)
Box = Box.makeFillet(3,[Box.Edges[0]]) # pour 1 Fillet
Box = Box.makeFillet(3,[Box.Edges[1],Box.Edges[2],Box.Edges[3],Box.Edges[4]]) # for several Fillets
Part.show(Box)
&lt;/syntaxhighlight&gt;

{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Groove</title>
    <ns>0</ns>
    <id>2691</id>
    <revision>
      <id>101452</id>
      <parentid>98809</parentid>
      <timestamp>2014-08-01T18:47:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Revolve -&gt; Revolution</comment>
      <sha1>00q75kwice99ei0s689ktvyrlxwbl32</sha1>
      <text xml:space="preserve" bytes="739">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign Groove|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Groove}}

==Introduction== &lt;!--T:2--&gt;
This tool revolves a selected sketch or 2D object about a given axis, cutting out material from the support. For example, the picture shows a groove cut out of a shaft.
[[Image:Groove_example.png|500px|left]]
{{clear}}

==Options== &lt;!--T:3--&gt;
[[Image:partdesign_groove_parameters.png|left]]
When creating a groove, the 'groove parameters' dialogue offers several parameters specifying how the sketch should be revolved. They have exactly the same meaning as for the [[PartDesign_Revolution#Options|revolution]] feature.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Icon</title>
    <ns>0</ns>
    <id>51419</id>
    <revision>
      <id>130292</id>
      <parentid>130291</parentid>
      <timestamp>2014-12-08T20:19:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1ccyv3nz3i767tbu0nhii81gzfcjscu</sha1>
      <text xml:space="preserve" bytes="3729">
==[[Image:Workbench PartDesign.png|32px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]== &lt;!--T:1--&gt;

===PartDesign Construction tools=== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
[[File:PartDesign Pad.png|32px|PartDesign Pad|link=PartDesign Pad]] [[PartDesign Pad|PartDesign Pad]]
 &lt;nowiki&gt;[[File:PartDesign Pad.png|32px|PartDesign Pad|link=PartDesign Pad]] [[PartDesign Pad|PartDesign Pad]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[File:PartDesign Pocket.png|32px|PartDesign Pocket|link=PartDesign Pocket]] [[ PartDesign Pocket|PartDesign Pocket]]
 &lt;nowiki&gt;[[File:PartDesign Pocket.png|32px|PartDesign Pocket|link=PartDesign Pocket]] [[PartDesign Pocket|PartDesign Pocket]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[File:PartDesign Revolution.png|32px|PartDesign Revolution|link=PartDesign Revolution]] [[PartDesign Revolution|PartDesign Revolution]]
 &lt;nowiki&gt;[[File:PartDesign Revolution.png|32px|PartDesign Revolution|link=PartDesign Revolution]] [[PartDesign Revolution|PartDesign Revolution]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[File:PartDesign Groove.png|32px|PartDesign Groove|link=PartDesign Groove]] [[PartDesign Groove|PartDesign Groove]]
 &lt;nowiki&gt;[[File:PartDesign Groove.png|32px|PartDesign Groove|link=PartDesign Groove]] [[PartDesign Groove|PartDesign Groove]]&lt;/nowiki&gt;

===PartDesign Editing tools=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[[File:PartDesign Fillet.png|32px|PartDesign Fillet|link=PartDesign Fillet]] [[PartDesign Fillet|PartDesign Fillet]]
 &lt;nowiki&gt;[[File:PartDesign Fillet.png|32px|PartDesign Fillet|link=PartDesign Fillet]] [[PartDesign Fillet|PartDesign Fillet]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[File:PartDesign Chamfer.png|32px|PartDesign Chamfer|link=PartDesign Chamfer]] [[PartDesign Chamfer|PartDesign Chamfer]]
 &lt;nowiki&gt;[[File:PartDesign Chamfer.png|32px|PartDesign Chamfer|link=PartDesign Chamfer]] [[PartDesign Chamfer|PartDesign Chamfer]]&lt;/nowiki&gt;

===PartDesign Transform tools=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
[[File:PartDesign Mirrored.png|32px|PartDesign Mirrored|link=PartDesign Mirrored]] [[PartDesign Mirrored|PartDesign Mirrored]]
 &lt;nowiki&gt;[[File:PartDesign Mirrored.png|32px|PartDesign Mirrored|link=PartDesign Mirrored]] [[PartDesign Mirrored|PartDesign Mirrored]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:PartDesign LinearPattern.png|32px|PartDesign LinearPattern linéaire|link=PartDesign LinearPattern]] [[PartDesign LinearPattern|PartDesign LinearPattern]]
 &lt;nowiki&gt;[[Image:PartDesign LinearPattern.png|32px|PartDesign LinearPattern|link=PartDesign LinearPattern]] [[PartDesign LinearPattern|PartDesign LinearPattern]]&lt;/nowiki&gt;

&lt;!--T:13--&gt;
[[File:PartDesign PolarPattern.png|32px|PartDesign PolarPattern|link=PartDesign PolarPattern]] [[PartDesign PolarPattern|PartDesign PolarPattern]]
 &lt;nowiki&gt;[[File:PartDesign PolarPattern.png|32px|PartDesign PolarPattern|link=PartDesign PolarPattern]] [[PartDesign PolarPattern|PartDesign PolarPattern]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[File:PartDesign Scaled.png|32px|PartDesign Scaled|link=PartDesign Scaled]] [[PartDesign Scaled|PartDesign Scaled]]
 &lt;nowiki&gt;[[File:PartDesign Scaled.png|32px|PartDesign Scaled|link=PartDesign Scaled]] [[PartDesign Scaled|PartDesign Scaled]]&lt;/nowiki&gt;

&lt;!--T:15--&gt;
[[File:PartDesign MultiTransform.png|32px|PartDesign MultiTransform|link=PartDesign MultiTransform]] [[PartDesign MultiTransform|PartDesign MultiTransform]]
 &lt;nowiki&gt;[[File:PartDesign MultiTransform.png|32px|PartDesign MultiTransform|link=PartDesign MultiTransform]] [[PartDesign MultiTransform|PartDesign MultiTransform]]&lt;/nowiki&gt;

&lt;!--T:16--&gt;
[[File:Part Import.svg|32px|Part Import]]
 &lt;nowiki&gt;[[File:Part Import.svg|32px|Part Import]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign InvoluteGear</title>
    <ns>0</ns>
    <id>30457</id>
    <revision>
      <id>103649</id>
      <parentid>84786</parentid>
      <timestamp>2014-08-08T20:28:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ihdgjw54eymaqsxgxic4f8dv7aw7tbd</sha1>
      <text xml:space="preserve" bytes="528">

&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign InvoluteGear|MenuLocation=Part Design → Involute gear...|Workbenches=[[PartDesign Workbench|PartDesign]]}}

&lt;!--T:2--&gt;
This tool allows you to create a gear.

&lt;!--T:3--&gt;
Original file: https://github.com/FreeCAD/FreeCAD_sf_master/blob/master/src/Mod/PartDesign/InvoluteGearFeature.py

&lt;!--T:4--&gt;
Recent forum link: http://forum.freecadweb.org/viewtopic.php?f=22&amp;t=5977&amp;p=47725&amp;hilit=involutegear#p47725




&lt;!--T:5--&gt;
[[Category:Macros]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Key</title>
    <ns>0</ns>
    <id>51444</id>
    <revision>
      <id>131455</id>
      <parentid>130941</parentid>
      <timestamp>2014-12-13T21:22:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>cenbeyaw6pckr2cr49x6ofl6f22zjgv</sha1>
      <text xml:space="preserve" bytes="3940">
==[[File:Workbench PartDesign.png|32px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]== &lt;!--T:1--&gt;

===PartDesign Construction tools=== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:PartDesign Pad.png|16px|PartDesign Pad|link=PartDesign Pad]] [[PartDesign Pad|PartDesign Pad]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Pad.png|16px|PartDesign Pad|link=PartDesign Pad]] [[PartDesign Pad|PartDesign Pad]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:PartDesign Pocket.png|16px|PartDesign Pocket|link=PartDesign Pocket]] [[ PartDesign Pocket|PartDesign Pocket]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Pocket.png|16px|PartDesign Pocket|link=PartDesign Pocket]] [[PartDesign Pocket|PartDesign Pocket]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:PartDesign Revolution.png|16px|PartDesign Revolution|link=PartDesign Revolution]] [[PartDesign Revolution|PartDesign Revolution]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Revolution.png|16px|PartDesign Revolution|link=PartDesign Revolution]] [[PartDesign Revolution|PartDesign Revolution]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:PartDesign Groove.png|16px|PartDesign Groove|link=PartDesign Groove]] [[PartDesign Groove|PartDesign Groove]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Groove.png|16px|PartDesign Groove|link=PartDesign Groove]] [[PartDesign Groove|PartDesign Groove]]}}&lt;/nowiki&gt;

===PartDesign Editing tools=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:PartDesign Fillet.png|16px|PartDesign Fillet|link=PartDesign Fillet]] [[PartDesign Fillet|PartDesign Fillet]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Fillet.png|16px|PartDesign Fillet|link=PartDesign Fillet]] [[PartDesign Fillet|PartDesign Fillet]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:PartDesign Chamfer.png|16px|PartDesign Chamfer|link=PartDesign Chamfer]] [[PartDesign Chamfer|PartDesign Chamfer]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Chamfer.png|16px|PartDesign Chamfer|link=PartDesign Chamfer]] [[PartDesign Chamfer|PartDesign Chamfer]]}}&lt;/nowiki&gt;

===PartDesign Transform tools=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:PartDesign Mirrored.png|16px|PartDesign Mirrored|link=PartDesign Mirrored]] [[PartDesign Mirrored|PartDesign Mirrored]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Mirrored.png|16px|PartDesign Mirrored|link=PartDesign Mirrored]] [[PartDesign Mirrored|PartDesign Mirrored]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:PartDesign LinearPattern.png|16px|PartDesign LinearPattern linéaire|link=PartDesign LinearPattern]] [[PartDesign LinearPattern|PartDesign LinearPattern]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign LinearPattern.png|16px|PartDesign LinearPattern|link=PartDesign LinearPattern]] [[PartDesign LinearPattern|PartDesign LinearPattern]]}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
{{KEY|[[File:PartDesign PolarPattern.png|16px|PartDesign PolarPattern|link=PartDesign PolarPattern]] [[PartDesign PolarPattern|PartDesign PolarPattern]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign PolarPattern.png|16px|PartDesign PolarPattern|link=PartDesign PolarPattern]] [[PartDesign PolarPattern|PartDesign PolarPattern]]}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:PartDesign Scaled.png|16px|PartDesign Scaled|link=PartDesign Scaled]] [[PartDesign Scaled|PartDesign Scaled]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign Scaled.png|16px|PartDesign Scaled|link=PartDesign Scaled]] [[PartDesign Scaled|PartDesign Scaled]]}}&lt;/nowiki&gt;

&lt;!--T:15--&gt;
{{KEY|[[File:PartDesign MultiTransform.png|16px|PartDesign MultiTransform|link=PartDesign MultiTransform]] [[PartDesign MultiTransform|PartDesign MultiTransform]]}}
 &lt;nowiki&gt;{{KEY|[[File:PartDesign MultiTransform.png|16px|PartDesign MultiTransform|link=PartDesign MultiTransform]] [[PartDesign MultiTransform|PartDesign MultiTransform]]}}&lt;/nowiki&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Part Import.svg|16px|Part Import]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Import.svg|16px|Part Import]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>PartDesign LinearPattern</title>
    <ns>0</ns>
    <id>2702</id>
    <revision>
      <id>55148</id>
      <parentid>55147</parentid>
      <timestamp>2013-12-14T17:27:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qerydp3fou03loj6er55c53f59qyi8g</sha1>
      <text xml:space="preserve" bytes="2078">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign_LinearPattern|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign -&gt; LinearPattern}}

==Introduction== &lt;!--T:2--&gt;
'Make a linear pattern of features' - This tool takes a set of one or more selected features as its input (the 'originals'), and produces with it a second set of features translated in a given direction. For example:
[[Image:linearpattern_example.png|600px|left]]
{{clear}}
 
==Options==
{|
| [[Image:linearpattern_parameters.png|left]]
|
When creating a linear pattern feature, the 'linear pattern parameters' dialog offers two different ways of specifying the pattern direction.
===Standard axis===
One of the standard axes '''X''', '''Y''' or '''Z''' can be chosen with the radio buttons. The pattern direction can be reversed by ticking 'Reverse direction'.
===Select a face===
Pressing the button labeled 'Direction' allows to select a face or an edge from a pre-existing solid to specify the direction. The pattern direction will be normal to the face if a face is selected. Note that the button must be pressed again every time to select a new face or edge.
===Select originals===
The list view shows the 'originals', the features that are to be patterned. Clicking on any feature will add it to the list.
===Length and Occurrences ===
Specifies the length to be covered by the pattern, and the total number of pattern shapes (including the original feature). For example, six occurrences in a length of 150 would give a spacing of 30 between patterns (150 divided by 5, since there are 5 'gaps' between a total of six occurrences!).
|}
{{clear}}

==Limitations== &lt;!--T:3--&gt;
* Pattern shapes may not overlap one another except for the special case of only two occurrences (original plus one copy)
* Any pattern shapes that do not overlap the original's support will be excluded. This ensures that a PartDesign feature always consists of a single, connected solid
* For further limitations, see the [[PartDesign_Mirrored|mirrored feature]]
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Mirrored</title>
    <ns>0</ns>
    <id>2696</id>
    <revision>
      <id>112869</id>
      <parentid>112853</parentid>
      <timestamp>2014-10-07T19:58:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>8p7crjjmm4mu86va6r4c1q0rezr1a2a</sha1>
      <text xml:space="preserve" bytes="1901">
&lt;!--T:8--&gt;
{{GuiCommand|Name=PartDesign Mirrored|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Mirrored}}

==Introduction== &lt;!--T:9--&gt;
'Mirror features' - This tool takes a set of one selected features as its input (the 'original'), and produces with it a second set of features mirrored on a plane. For example:
[[Image:Mirrored_example.png|left]]
{{clear}}

==Use== &lt;!--T:10--&gt;

{|
| [[Image:mirrored_parameters.png|left]]
|
===Mirror Plane Selection=== &lt;!--T:14--&gt;
When creating a mirrored feature, the 'Mirrored parameters' dialogue offers four different ways of specifying the mirror line or plane.
====Horizontal sketch axis==== 
Uses the horizontal axis of the sketch  as the axis of symmetry. 
====Vertical sketch axis==== 
Uses the vertical axis of the sketch  as the axis of symmetry.
====Select reference...====
Allows you to select a plane (such as a face of an object) to use as a mirror plane.
====Custom Sketch Axis====
If the sketch which defines the feature to be mirrored also contains a construction line (or lines), then the drop down list will contain one custom sketch axis for each construction line. The first construction line will be labelled 'Sketch axis 0'.
===Preview===
The mirror result can be previewed in real time before clicking OK by checking &quot;Update view&quot;.
|}
{{clear}}

&lt;!--T:13--&gt;
[[Image:PartDesign_Mirrored_axis_fromconstructionlines.jpg|left]]
{{clear}}

==Limitations== &lt;!--T:11--&gt;
* Currently, only the last feature in the feature tree can be chosen as the 'original' therefore,
** it is not possible to choose more than one feature to be mirrored
** it is not possible to select more features to add to the list view of 'originals'
* Once the Mirrored feature has been started or been completed, it is not possible to replace the original feature for a different one.
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign MultiTransform</title>
    <ns>0</ns>
    <id>2713</id>
    <revision>
      <id>93388</id>
      <parentid>55272</parentid>
      <timestamp>2014-06-22T21:28:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>cpqx9mu2fdto9rpwo360gu3b1n499x6</sha1>
      <text xml:space="preserve" bytes="2494">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign MultiTransform|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign -&gt; MultiTransform}}

==Introduction== &lt;!--T:2--&gt;
'Make a pattern from combinations of transformations' - This tool takes a set of one or more selected features as its input (the 'originals'), and allows to apply several transformations in sequence to them. For example, to produce a flange with a double row of holes, the hole (the 'original') is first patterned in a linear pattern in the X direction, and then patterned eight times in a polar pattern around the Y axis.
[[Image:multitransform_example.png|600px|left]]
{{clear}}

==Options== &lt;!--T:3--&gt;
{|
| [[Image:Multitransfrom_parameters.png|left]]
|
When creating a multitransform feature, the 'multitransform parameters' dialogue offers two different list views.
===Select originals===
The list view shows the 'originals', the features that are to be patterned. Clicking on any feature will add it to the list.
===Select transformations===
This list can be filled with a combination of the simple transformations [[PartDesign_Mirrored|mirrored]], [[PartDesign_LinearPattern|linear pattern]], [[PartDesign_PolarPattern|polar pattern]] and [[PartDesign_Scaled|scaled]]. The transformations will be applied one after the other.
The context menu offers the following entries:
====Edit====
Allows editing the parameters of a transformation in the list (double-clicking will have the same effect)
====Delete====
Removes a transformation from the list
====Add transformation====
Adds a transformation to the list
====Move Up/Down====
Allows changing the order of transformations in the list
|}
{{clear}}

==Limitations== &lt;!--T:4--&gt;
* A scaled transformation should not be the first in the list
* The scaled transformation must have the same number of occurrences as the transformation immediately preceding it in the list
* For further limitations, see the [[PartDesign_LinearPattern|linear pattern feature]]
{{clear}}

==Examples== &lt;!--T:5--&gt;
[[Image:mt_example2.png|c|center|800px]]
The smallest pad was first patterned three times in X direction and then scaled to factor two (so the three occurrences have scaling factor 1.0, 1.5 and 2.0). Then a polar pattern was applied with 8 occurrences.
[[Image:mt_example3.png|c|center|800px]]
The pocket was first mirrored on the YZ plane and then patterned with two linear patterns to give a rectangular pattern.
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Pad</title>
    <ns>0</ns>
    <id>1702</id>
    <revision>
      <id>100882</id>
      <parentid>100881</parentid>
      <timestamp>2014-08-01T01:35:07Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6lk2prc96djel4kyvzt048tfp09uuic</sha1>
      <text xml:space="preserve" bytes="3965">

&lt;!--T:23--&gt;
{{GuiCommand|Name=PartDesign Pad|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Pad}}

==Description== &lt;!--T:24--&gt;
The '''Pad''' tool takes a selected sketch as its input and from it produces a &quot;pad&quot; feature. A pad is essentially an extrusion of a sketch into a solid. For example, if a sketch were made of two concentric circles, and the pad tool were subsequently used on this sketch, the result would be a cylinder:

[[Image:Pad_cylinder.png|left]]
{{clear}}

&lt;!--T:25--&gt;
If the selected sketch is mapped to the face of an existing solid or another Part Design feature, the pad will be fused to it.

==How to use== &lt;!--T:26--&gt;
# Select the sketch to be padded.
# Press the {{KEY|[[Image:PartDesign_Pad.png|16px]] '''Pad'''}} button.
# Set the Pad parameters (see next section).
# Click OK.

==Options== &lt;!--T:27--&gt;
When creating a pad, the Combo view automatically switches to the Tasks pane, showing the '''Pad parameters''' dialogue.

&lt;!--T:28--&gt;
[[Image:pad_parameters_cropped.png|frame|left]]

===Type=== &lt;!--T:29--&gt;
Type offers five different ways of specifying the length to which the pad will be extruded.
====Dimension====
Enter a numeric value for the length of the pad. The default direction for extrusion is away (outside of) the support, but it can be changed by ticking the '''Reversed''' option. Extrusions occur [http://en.wikipedia.org/wiki/Surface_normal normal] to the defining sketch plane. With the option '''Symmetric to plane''' the pad will extend half of the given length to either side of the sketch plane. Negative dimensions are not possible. Use the '''Reversed''' option instead.
====Two dimensions====
This allows to enter a second length in which the pad should extend in the opposite direction (into the support). Again can be changed by ticking the '''Reversed''' option.
====To last====
The pad will extrude up to the last face of the support in the extrusion direction. If there is no support, an error message will appear.
====To first====
The pad will extrude up to the first face of the support in the extrusion direction.  If there is no support, an error message will appear.
====Up to face====
The pad will extrude up to a face in the support that can be chosen by clicking on it. If there is no support, no selections will be accepted.

===Length=== &lt;!--T:30--&gt;
Defines the length of the pad. Multiple units can be used independently of the user's units preferences (m, cm, mm, nm, ft or ', in or &quot;).

=== Symmetric to plane=== &lt;!--T:31--&gt;
Tick the checkbox to extend half of the given length to either side of the sketch plane.

=== Reversed === &lt;!--T:32--&gt;
Reverses the direction of the pad.

==Limitations== &lt;!--T:33--&gt;
* Like all Part Design features, Pad creates a solid, thus the sketch must include a closed profile or it will fail. There can be multiple enclosed profiles inside a larger one, provided none intersect each other (for example, a rectangle with two circles inside it).
* The algorithm used for '''To First''' and '''To Last''' is:
** Create a line through the centre of gravity of the sketch
** Find all faces of the support cut by this line
** Choose the face where the intersection point is nearest/furthest from the sketch
* This means that the face that is found might not always be what you expected. If you run into this problem, use the '''Up to face''' type instead, and pick the face you want.
* For the very special case of extrusion to a concave surface, where the sketch is larger than this surface, extrusion will fail. This is a unresolved bug.
* There is no automatic cleanup, e.g. of adjacent planar surfaces into a single surface. You can fix this manually in the Part workbench with '''Refine shape''' (which creates an unlinked, non-parametric solid) or with the &quot;Refine shape feature&quot; (which creates a parametric feature) from the [[OpenSCAD Workbench]].

{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Pocket</title>
    <ns>0</ns>
    <id>1703</id>
    <revision>
      <id>100973</id>
      <parentid>100972</parentid>
      <timestamp>2014-08-01T03:09:32Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bvs6a7qyk3uc5q4a30zotr242ismfaz</sha1>
      <text xml:space="preserve" bytes="2385">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign Pocket|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Pocket}}

==Introduction== &lt;!--T:2--&gt;
'Create a pocket with the selected sketch' - This tool takes a selected sketch as its input, and produces with it a &lt;em&gt;pocket&lt;/em&gt;. A pocket being essentially an extrusion of a sketch that subtracts from the geometry it protrudes into. For example, if a sketch were made simply of one circle on one face of a cube, then the pocket formed by that sketch would manifest as a hole 'drilled' into the cube:

[[Image:pocket_cropped.png|left]]
{{clear}}

==How to use== &lt;!--T:6--&gt;
# Select the sketch to be pocketed. This sketch must be mapped to the face of an existing solid or Part Design feature, or an error message will appear.
# Press the {{KEY|[[Image:PartDesign_Pocket.png|16px]] '''Pocket'''}} button.
# Set the Pocket parameters (see next section).
# Click OK.

==Options== &lt;!--T:3--&gt;
[[Image:Pocket_options.png|left]]

When creating a pocket, the 'pocket parameters' dialogue offers four different ways of specifying the length (depth) to which the pocket will be extruded:
===Dimension=== &lt;!--T:7--&gt;
Enter a numeric value for the depth of the pocket. The default direction for extrusion is into the support. Extrusions occur [http://en.wikipedia.org/wiki/Surface_normal normal] to the defining sketch plane.
Negative dimensions are not possible.
===To first===
The pocket will extrude up to the first face of the support in the extrusion direction. In other words, it will cut through all material until it reaches an empty space.
===Through all===
The pocket will cut through all material in the extrusion direction. With the option '''Symmetric to plane''' the pad will cut through all material in both directions.
===Up to face===
The pocket will extrude up to a face in the support that can be chosen by clicking on it.


==Limitations== &lt;!--T:4--&gt;
* Use the type '''Dimension''' or '''Through All''' wherever possible because the other types sometimes give trouble when they are being patterned
* Otherwise, the pocket feature has the same [[PartDesign_Pad#Limitations|limitations]] as the pad feature.

==Useful links== &lt;!--T:5--&gt;
An [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3733&amp;start=10 example] with the practice on the forum.



</text>
    </revision>
  </page>
  <page>
    <title>PartDesign PolarPattern</title>
    <ns>0</ns>
    <id>2706</id>
    <revision>
      <id>93356</id>
      <parentid>55189</parentid>
      <timestamp>2014-06-21T22:45:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ipkxp64vpreiegnzqr6un6wamcfx34j</sha1>
      <text xml:space="preserve" bytes="1849">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign PolarPattern|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign -&gt; PolarPattern}}

==Introduction== &lt;!--T:2--&gt;
'Make a polar pattern of features' - This tool takes a set of one or more selected features as its input (the 'originals'), and produces with it a second set of features rotated around a given axis. For example:
[[Image:Polarpattern_example.png|600px|left]]
{{clear}}
 
==Options==
{|
| [[Image:Polarpattern_parameters.png|left]]
|
When creating a polar pattern feature, the 'polar pattern parameters' dialogue offers two different ways of specifying the pattern rotation axis.
===Standard axis===
One of the standard axes '''X''', '''Y''' or '''Z''' can be chosen with the radio buttons. The pattern direction can be reversed by ticking 'Reverse direction'.
===Select a face===
Pressing the button labeled 'Direction' allows to select an edge from a pre-existing solid to specify the direction. Note that the button must be pressed again every time to select a new edge.
===Select originals===
The list view shows the 'originals', the features that are to be patterned. Clicking on any feature will add it to the list.
===Angle and Occurrences ===
Specifies the angle to be covered by the pattern, and the total number of pattern shapes (including the original feature). For example, four occurrences in an angle of 180 degrees would give a spacing of 60 degrees between patterns. There is one exception: If the angle is 360 degrees, since first and last occurrence are identical, four occurrences will be spaced 90 degrees apart.
|}
{{clear}}

==Limitations== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
* See [[PartDesign_LinearPattern|linear pattern feature]]
{{clear}}

==Examples== &lt;!--T:5--&gt;
[[Image:Polarpattern_example2.jpg|left]]
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Revolution</title>
    <ns>0</ns>
    <id>1685</id>
    <revision>
      <id>112877</id>
      <parentid>112876</parentid>
      <timestamp>2014-10-07T20:22:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>npnkhxjfs7cstwsy46o8ikfpxyzymv0</sha1>
      <text xml:space="preserve" bytes="4225">
&lt;!--T:4--&gt;
{{GuiCommand|Name=PartDesign Revolution|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Revolution}}

==Introduction== &lt;!--T:1--&gt;
This tool revolves a selected sketch or 2D object about a given axis.
For all the following explanations of this command the example sketch below will be used:
[[Image:complex_sketch.png|frame|left|Example sketch: A complex sketch with many constraints. Sketch is oriented in the x-y plane, with x being the horizontal axis, and y being the vertical axis (shown in image as the two blue lines). Other important things to note about this sketch is that it are mirrored about the y axis and that the base of it is coincident with the x axis.]]
{{clear}}

==Options== &lt;!--T:2--&gt;
When creating a revolution, the 'revolution parameters' dialogue offers several parameters specifying how the sketch should be revolved.

{|
| [[Image:partdesign_revolution_parameters.png|left]]
|
===Axis=== &lt;!--T:10--&gt;
This option specifies the axis about which the sketch is to be revolved. Currently, by default only the horizontal or vertical sketch axis can be selected here. However if the sketch which defines the feature to be Revolved also contains a construction line (or lines), then the drop down list will contain one custom sketch axis for each construction line. The first construction line will be labelled 'Sketch axis 0'. After creation an arbitrary axis can be defined in the Properties table. Base is a point through which the axis goes. The axis option itself takes three arguments, which are passed as numbers to either the x, y, or z boxes in the tool. Adding a value of 1.0 to only one of the boxes will cause the tool to make the revolution about that axis. Example revolutions 1, 2 and 3 in the [[#Examples|examples]] section demonstrate scenarios where the example sketch is revolved about either the x or the y axis.
Adding a non-zero value to more than one of the axes will cause the part to be revolved by a weighted amount in each axis. e.g. an x value of 1 and a y value of 2 will mean that the revolution about the y-axis is twice as strong as that about the x. This is fairly difficult to comprehend, Example Revolution 4 shows an example where more than one of the boxes has a non-zero value.
===Angle===
This controls the angle through which the revolution is to be formed, e.g. 360° would be a full, contiguous revolution.
The images in the [[#Examples|examples]] section demonstrate some of the possibilities with specifying different angles. It is not possible to specify negative angles (use the '''Reversed''' option instead) or angles greater than 360°.
===Symmetric to plane===
The revolution will extend half of the specified angle in both directions from the sketch plane.
===Reversed===
The direction of revolution will be reversed.
|}
{{clear}}


==Examples== &lt;!--T:6--&gt;

&lt;!--T:8--&gt;
[[Image:PartDesign_Revolution_axis_fromconstructionlines1.jpg|frame|left|Example revolution using a construction line as the Revolution axis: In this image the angle is 75°, revolution is about the construction line (Sketch axis 0)]]
{{clear}}

&lt;!--T:9--&gt;
Note: Unlike the above, all these examples below refer to Base, Axis and Placement being edited directly through the feature properties table.
[[Image:revolve3_cropped.png|frame|left|Example revolution 1: In this image the angle has been set to 70°, revolution is about the x-axis and there is a y-offset of 100mm. The sketch is the face not shown in the image (i.e. the 'back' face).]]
[[Image:revolve5_cropped.png|frame|left|Example revolution 2: In this image the angle is 70°, revolution is about the y-axis and there is a y-offset of 100mm.]]
[[Image:revolve7_cropped.png|frame|left|Example revolution 3: In this image the angle is 270°, revolution is about the x-axis and there are 0 offsets]]
[[Image:revolve8_cropped.png|frame|left|Example revolution 4: In this image the angle is 270°, revolution is about the x-axis (value 1.00) and the y-axis (value 2.00) and there is a y-offset of 100mm]]
{{clear}}

==Useful links== &lt;!--T:3--&gt;
An [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3674 example] with the practice on the forum.


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Revolve</title>
    <ns>0</ns>
    <id>37842</id>
    <revision>
      <id>101475</id>
      <parentid>101073</parentid>
      <timestamp>2014-08-01T19:23:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>page to delete</comment>
      <sha1>2c5u388zpygltuhcdzk8skq5uvfo0wl</sha1>
      <text xml:space="preserve" bytes="105">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
replaced by PartDesign Revolution - no page link here</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Scaled</title>
    <ns>0</ns>
    <id>2708</id>
    <revision>
      <id>93768</id>
      <parentid>55233</parentid>
      <timestamp>2014-07-02T09:15:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>fqwrwlydblz0m5pscvk3ov2v75yfpz6</sha1>
      <text xml:space="preserve" bytes="1274">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign Scaled|Workbenches=[[PartDesign Workbench|PartDesign]], Complete|MenuLocation=PartDesign → Scaled}}

==Introduction== &lt;!--T:2--&gt;
'Scale features' - This tool takes a set of one or more selected features as its input (the 'originals'), and scales them by a given factor. Since the scaling takes place around the centre of gravity of the selected features, they usually disappear inside the scaled versions. Therefore, normally it is only useful to use scaling as part of the MultiTransform feature.

==Options== &lt;!--T:3--&gt;
{|
| [[Image:Scaled_parameters.png|left]]
|
When creating a scaled feature, the 'scaled parameters' dialogue offers the following options:
===Select originals===
The list view shows the 'originals', the features that are to be scaled. Clicking on any feature will add it to the list.
===Factor and Occurrences ===
Specifies the maximum factor which the features are to be scaled to, and the total number of scaled shapes (including the original feature).
|}
{{clear}}

==Limitations== &lt;!--T:4--&gt;
* Scaling always happens with the centre of gravity of the feature as the base point.
* See [[PartDesign_LinearPattern|linear pattern feature]] for other limitations
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>PartDesign WizardShaft</title>
    <ns>0</ns>
    <id>3003</id>
    <revision>
      <id>82251</id>
      <parentid>82250</parentid>
      <timestamp>2014-05-12T14:59:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>hywlwewko2s6aya94523cc7verc9znv</sha1>
      <text xml:space="preserve" bytes="2962">
&lt;!--T:1--&gt;
{{GuiCommand|Name=PartDesign WizardShaft|MenuLocation=Part Design → Shaft design wizard...|Workbenches=[[PartDesign Workbench|PartDesign]], Complete}}

==Introduction== &lt;!--T:2--&gt;
This tool allows you to create a shaft from a table of values, and to analyse forces and moments. You can start the wizard from the Part Design menu or by typing


&lt;syntaxhighlight&gt;
  Gui.runCommand('PartDesign_WizardShaft')
&lt;/syntaxhighlight&gt;


&lt;!--T:3--&gt;
into the Python console of FreeCAD. The wizard will start and show a default table, the corresponding shaft part and force/moment graphs.

&lt;!--T:4--&gt;
[[Image:WizardShaft_Part.jpg|780px]]

&lt;!--T:5--&gt;
The top of the window is taken up by the table. It is organized into numbered columns which correspond to segments of the shaft. A shaft segment is characterized by having certain length and diameter. The main window shows two tabs. One is the shaft part itself (a revolution feature), shown in the image above. The second tab shows graphs of the shear forces and moments created by the loads defined in the table.

&lt;!--T:6--&gt;
[[Image:shaftwizard1.jpg|1024px]]
{{clear}}

==Prerequisites== &lt;!--T:7--&gt;
The shaft design wizard depends on the [http://matplotlib.org/ matplotlib] library to create and display the graphs of shear force and bending moment. On Debian/Ubuntu-based systems, it is available through the python-matplotlib package.
==Parameters==
For each shaft segment, the following parameters can be defined
* Length of the segment
* Diameter of the segment
* Load type. Note that you have to click on the desired entry in the menu after scrolling to it, otherwise it will not be selected!
** None: No load
** Fixed: The end of the shaft is fixed (e.g. welded to another part). This load type can only be defined for the first or last segment.
** Static: There is a static load on this shaft segment
* Load on the shaft segment
* Location where the load is applied to the segment. The location is counted from the left-hand edge of the segment
(Other rows and load types exist but no functionality has been implemented yet)

==Menus== &lt;!--T:8--&gt;
To add a new shaft segment, right-click into the empty space to the right of the table, and choose &quot;Add column&quot;.

==Limitations== &lt;!--T:9--&gt;
* It is not possible to have adjacent shaft segments with the same diameter.

==Planned functionality== &lt;!--T:10--&gt;
* Table-driven chamfers and rounds on the shaft edges
* Recognize a previously created shaft wizard part and initialize the table values from it
* Shaft stress calculation
* Visualization of loads on the shaft (can use the same functionality as for FEM module)
* Definition of loads as a Document Object (can use the same functionality as for FEM module)
* Material database
* Allow loads in the Z-direction as well as in Y-direction (requires definition of loads as a Document Object, otherwise the table will become very long)


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PartDesign Workbench</title>
    <ns>0</ns>
    <id>1697</id>
    <revision>
      <id>126069</id>
      <parentid>125285</parentid>
      <timestamp>2014-11-29T13:54:54Z</timestamp>
      <contributor>
        <username>Jmaustpc</username>
        <id>1193</id>
      </contributor>
      <sha1>8ckfaesqbsykt78d7lgg84905i5oya6</sha1>
      <text xml:space="preserve" bytes="2839">
&lt;!--T:1--&gt;
The '''Part Design Workbench''' provides tools for modelling complex solid parts and is based on a '''Feature editing methodology''' to produce a single contiguous solid. It is intricately linked with the [[Sketcher Workbench]].

&lt;!--T:2--&gt;
[[File:Revolve3_cropped.png]]

== Basic Workflow == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
The sketch is the building block for creating and editing solid parts. The workflow can be summarized by this: a sketch containing 2D geometry is created first, then a solid creation tool is used on the sketch. At the moment the available tools are:
* [[Image:PartDesign_Pad.png|32px]]  '''Pad''' which extrudes a sketch
* [[Image:PartDesign_Pocket.png|32px]]  '''Pocket''' which creates a pocket on an existing solid
* [[Image:PartDesign_Revolution.png|32px]]  '''Revolution''' which creates a solid by revolving a sketch along an axis
* [[Image:PartDesign_Groove.png|32px]]  '''Groove''' which creates a groove in an existing solid
More tools are planned in future releases.

&lt;!--T:5--&gt;
A very important concept in the PartDesign workbench is the '''sketch support'''. Sketches can be created on standard planes ('''XY''', '''XZ''', '''YZ''' and planes parallel to them) or on the face of an existing solid. For this last case, the existing solid becomes the '''support''' of the sketch. Several tools will only work with sketches that have a support, for example, '''Pocket''' - without a support there would be nothing to remove material from! 

&lt;!--T:6--&gt;
After solid geometry has been created it can be modified with chamfers and fillets or transformed, e.g. mirrored or patterned.

&lt;!--T:7--&gt;
The Partdesign workbench is meant to create a single, connected solid. Multiple solids will be possible with the [[Assembly Workbench|Assembly workbench]].

== The Tools == &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
The Part Design tools are all located in the '''Part Design''' menu that appears when you load the Part Design module. 

&lt;!--T:10--&gt;
They include the [[Sketcher Workbench]] tools, since the Part Design module is so dependent on them.

=== The Sketcher Tools === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
{{Sketcher Tools}}

=== The Part Design Tools === &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
{{PartDesign Tools}}

== Extras == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
{{PartDesign Extras/en}}

== Feature properties == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
{{PartDesign Placement}}

== Tutorials == &lt;!--T:21--&gt;
Only for a development version of FreeCAD that is not currently available as a binary or installer:
* [[PartDesign_Bearingholder_Tutorial_I|PartDesign Bearingholder Tutorial I]]
* [[PartDesign_Bearingholder_Tutorial_II|PartDesign Bearingholder Tutorial II]]

&lt;!--T:22--&gt;
* [[Basic_Part_Design_Tutorial|Basic Part Design Tutorial]]

&lt;!--T:19--&gt;
{{docnav|Workbenches|Mesh Workbench}}

&lt;!--T:20--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>PartDesign project</title>
    <ns>0</ns>
    <id>408</id>
    <revision>
      <id>122801</id>
      <parentid>121728</parentid>
      <timestamp>2014-11-15T17:54:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>54rg6jhk7gjyyklna4a5qci017103ib</sha1>
      <text xml:space="preserve" bytes="6717">
&lt;!--T:1--&gt;
Here the project plan for the '''PartDesign''' as part of the [[Development roadmap]].


== Purpose and principles == &lt;!--T:2--&gt;
This is a software development project aimed to implement a Part Design capabilities. Its about
implementing some '''core features''' into the CAD modules of FreeCAD, '''Part, PartDesign and Assembly'''.

&lt;!--T:3--&gt;
The development steps are planed here and tracked in the Issue tracking system to get a well formed 
change log: [http://apps.sourceforge.net/mantisbt/free-cad/my_view_page.php Issue tracker]

== Outcome == &lt;!--T:4--&gt;
Aim of the project is to enable FreeCAD accomplish a design task like the one at the right.


[[Image:Gripper.jpg|300px|right]]



&lt;!--T:5--&gt;
This will be achived by using the '''Sketcher''' and the '''PartDesign''' to design
special part and '''Part''' to load standard part as STEP (like the linear bearing).
The '''Assembly''' puts it all together with constrains.

&lt;!--T:6--&gt;
Also an important outcome is the '''Feature editing methodology'''. Which gives the 
user an intuitive approach to instantiating and editing Features. This is importand
for all other Modules and Workbenches to be come, to comply to a consistent user
interface!


[[Image:TaskPanel.jpg|400px]]

[[Image:CAD_Modeling.gif‎]]

=== Sketcher === &lt;!--T:7--&gt;
A parametric sketcher with a geometrical constraints solver, for more details see the '''[[Sketcher project]]'''.

=== PartDesign === &lt;!--T:8--&gt;

==== Body feature ==== &lt;!--T:9--&gt;
Since a history based modeling can have a lot of steps leading 
to the final shape a bracket is needed. Thats the Body, which 
holds the final outcome of the modeling and acts as a group to 
all the features of the history tree. 


==== Pad feature ==== &lt;!--T:10--&gt;
A Pad feature extrude a Sketch (or any Part2DObject) in its normal direction. 
Always guaranty a solid, or fail.
 
==== Pocket feature ====
Imprint a sketch in a base solid either defined by depth or &quot;Up to last | Up to first&quot;.
Also guaranty a solid.   

==== Bore feature ==== &lt;!--T:11--&gt;
Very good bore parameter definition from the NaroCad specification:

{| class=&quot;wikitable&quot; style=&quot;text-align:left&quot;
|+ '''NaroCAD Bore definitions'''
|-               
| [[Image:Counterbore_settings.png|300px]]
 || [[Image:Counterbore_settings2.png|300px]]
 || [[Image:Countersink_settings.png|300px]]         
|}

==== Pattern ==== &lt;!--T:12--&gt;
Replicate one of the above features

===== '''RectangularPattern''' ===== &lt;!--T:13--&gt;
Replicate one of the above features along an x,y pattern

===== '''CircularPattern''' ===== &lt;!--T:14--&gt;
Replicate one of the above features along a pattern in polar coordinates

===== '''ScriptedPattern''' ===== &lt;!--T:15--&gt;
Replicate one of the above features according to a general rule provided in form of a script.

== Brainstorming == &lt;!--T:16--&gt;
=== What others do ===
* [http://www.youtube.com/watch?v=cVXQmDStHus SolidWorks examples]

=== Pattern Implementation === &lt;!--T:17--&gt;
The Pattern feature class can be implemented as a tabular pattern and serve as a base class for the Rectangular, Circular and Scripted Pattern features. These derived classes will only have to fill in the repetitions table of the base class.

&lt;!--T:18--&gt;
Each line of the repetitions table of the base Pattern class has to hold at least a transformation matrix to applied to the Placement of the original feature to be replicated. Additionally we could have optional transformation rules like for example manipulating some parameter value the feature to be replicated (e.g. in order to create a pattern of holes with varying radius).

== Organizing == &lt;!--T:19--&gt;

=== Modeling objects hierarchy === &lt;!--T:20--&gt;
This [http://en.wikipedia.org/wiki/Unified_Modeling_Language UML] chart shows the planed object hierarchy and its relationships. Yellow is a abstract base class, blue implemented and grey is planed. 

&lt;!--T:21--&gt;
[[Image:PartDesign_ModlingObjectsHirachy.png|1000px]]

== Tutorials == &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
[[PartDesign Bearingholder Tutorial I|PartDesign Bearingholder Tutorial I]]

&lt;!--T:24--&gt;
[[PartDesign Bearingholder Tutorial II|PartDesign Bearingholder Tutorial II]]

== Next actions == &lt;!--T:25--&gt;
Next actions are defined in the [http://www.freecadweb.org/tracker/roadmap_page.php Roadmap] entry for PartDesign:

=== Body === &lt;!--T:26--&gt;
Since the parametric/associative nature of the PartDesign we need finally a &quot;Body&quot; which 
groups and organizes a construction history. The Body itself holds the end result as a shape 
and has grouped as children the PartDesign features. It also defines the actual head of the 
modeling history. Its also related to the [[Assembly project]] since its the building block 
for products and compounds. 

=== Additional features === &lt;!--T:27--&gt;
The Pad and Pocket features are the first teaser for the PartDesign. There is still work to do 
especially the visibility control and the visual manipulators. But then additional features are needed.

==== Pattern ==== &lt;!--T:28--&gt;
Pattern feature which repeatingly apply a Pad or Pocket feature according to a circular or rectangular patter. 
An [http://www.ironcad.com/index.php/support/learning-center Example in IronCAD]. '''Done [jrheinlaender]'''

==== BoreHole ==== &lt;!--T:29--&gt;
Classical bore hole with all parameters for threading and counter bore....

==== Sweep ==== &lt;!--T:30--&gt;
Sweeps a Sketch along a curve and create a Solid. 

==== Revolve ==== &lt;!--T:31--&gt;
Rotate a Sketch along one of its Axis and a certain angle. '''Done [jrheinlaender et al.]'''

== TODO List == &lt;!--T:32--&gt;
# '''Fillet/Chamfer Part'''
## Apply fillet/chamfer operation to different selection types (face/faces pair/whole body)*
# '''Pad Tool'''
## Create 'up to next' mode '''DONE''' ['''mrlukeparry''']
## Create 'up to surface/face' mode ['''mrlukeparry''']
## Create draft property for pad '''DONE''' ['''mrlukeparry''']
## If pad is selected on face automatically create a sketch?
## Create 'midplane' mode '''DONE''' ['''jrheinlaender''']
# '''Pocket Tool'''
## Create 'up to first', 'up to last', 'through all', 'up to surface/face' modes '''DONE''' ['''jrheinlaender''']
## If pocket is selected on face automatically create a sketch?
# '''Revolution Part'''
## Allow a generic line segment/axis to be used for reference
## Create 'midplane' mode '''DONE''' ['''jrheinlaender''']
# '''Hole Feature'''
# '''Pattern Feature''' '''DONE''' ['''jrheinlaender''']
# '''Sweep Feature'''
# '''Body Feature'''
# '''Reference Geometry'''
## Plane
# '''Mirror Tool''' '''DONE''' ['''jrheinlaender''']
# '''Copy feature Tool'''

&lt;!--T:33--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part API</title>
    <ns>0</ns>
    <id>703</id>
    <revision>
      <id>133205</id>
      <parentid>129053</parentid>
      <timestamp>2014-12-23T21:02:59Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>fbzhx76vglnvobd0z44c6me8jozvy0i</sha1>
      <text xml:space="preserve" bytes="4853">
&lt;!--T:1--&gt;
The Part module is the direct connection between FreeCAD and the OpenCasCade kernel. It provides mainly [[TopoShape_API|TopoShapes]] which is the main object type used by OpenCascade. The Part module also contains a variety of convenience functions to create and manipulate topoShapes. Example:

{{Code|code=
import Part
mycube = Part.makeBox(2,2,2)
Part.show(mycube)
}}




&lt;!--T:2--&gt;
{{APIFunction|__fromPythonOCC__|OCC.Object|Helper method to convert a pythonocc shape to an internal shape|A Part.Shape}}
{{APIFunction|__sortEdges__|list of edges|Helper method to sort an unsorted list of edges so that afterwards two adjacent edges share a common vertex|a list of edges}}
{{APIFunction|__toPythonOCC__|Part.Shape|Helper method to convert an internal shape to pythonocc shape|an OCC.Shape}}
{{APIFunction|cast_to_shape|Part.Shape|Cast to the actual shape type| }}
{{APIFunction|export|list,string|Export a list of objects into a single file.| }}
{{APIFunction|getSortedClusters|list of edges|Helper method to sort and cluster a variety of edges| }}
{{APIFunction|insert|string,string|Insert the file (path given as first argument) into the given document (second argument).| }}
{{APIFunction|makeBox|length,width,height,[pnt,dir]|Makes a box located at pnt with the dimensions (length,width,height). By default pnt is Vector(0,0,0) and dir is Vector(0,0,1)|the created shape}}
{{APIFunction|makeCircle|radius,[pnt,dir,angle1,angle2]|Makes a circle with a given radius. By default pnt is Vector(0,0,0), dir is Vector(0,0,1), angle1 is 0 and angle2 is 360|the created shape}}
{{APIFunction|makeCompound|list|Creates a compound out of a list of shapes.|the created shape}}
{{APIFunction|makeCone|radius1,radius2,height,[pnt,dir,angle]|Makes a cone with given radii and height. By default pnt is Vector(0,0,0), dir is Vector(0,0,1) and angle is 360|the created shape}}
{{APIFunction|makeCylinder|radius,height,[pnt,dir,angle]|Makes a cylinder with a given radius and height. By default pnt is Vector(0,0,0),dir is Vector(0,0,1) and angle is 360|the created shape}}
{{APIFunction|makeHelix|pitch,height,radius,[angle,lefthand,heightstyle]|Makes a helix shape with a given pitch, height and radius. Defaults to right-handed cylindrical helix. Non-zero angle parameter produces a conical helix.  Lefthand True produces left handed helix.  Heightstyle applies only to conical helices. Heightstyle False (default) will cause the height parameter to be interpreted as the length of the side of the underlying frustum.  Heightstyle True will cause the height parameter to be interpreted as the vertical height of the helix.  Pitch is &quot;metric pitch&quot; (advance/revolution). For conical helix, radius is the minor radius.|the created shape}}
{{APIFunction|makeLine|(x1,y1,z1),(x2,y2,z2)|Makes a line of two points|the created shape}}
{{APIFunction|makeLoft|shapelist&lt;profiles&gt;,[boolean&lt;solid&gt;,boolean&lt;ruled&gt;]|Creates a loft shape using the list of profiles. Optionally make result a solid (vs surface/shell) or make result a ruled surface.|the created shape}}
{{APIFunction|makePlane|length,width,[pnt,dir]|Makes a plane. By default pnt is Vector(0,0,0) and dir is Vector(0,0,1)|the created shape}}
{{APIFunction|makePolygon|list|Makes a polygon of a list of Vectors|the created shape}}
{{APIFunction|makeRevolution|Curve,[vmin,vmax,angle,pnt,dir]|Makes a revolved shape by rotating the curve or a portion of it around an axis given by (pnt,dir). By default vmin/vmax are set to bounds of the curve,angle is 360,pnt is Vector(0,0,0) and dir is Vector(0,0,1)|the created shape}}
{{APIFunction|makeRuledSurface|Edge or Wire,Edge or Wire|Creates a ruled surface out of two edges or wires. If wires are used then these must have the same number of edges.|the created shape}}
{{APIFunction|makeShell|list|Creates a shell out of a list of faces.|the created shape}}
{{APIFunction|makeSolid|Part.Shape|Creates a solid out of the shells inside a shape.|the created shape}}
{{APIFunction|makeSphere|radius,[pnt, dir, angle1,angle2,angle3]|Makes a sphere with a given radius. By default pnt is Vector(0,0,0), dir is Vector(0,0,1), angle1 is 0, angle2 is 90 and angle3 is 360|the created shape}}
{{APIFunction|makeTorus|radius1,radius2,[pnt,dir,angle1,angle2,angle]|Makes a torus with a given radii and angles. By default pnt is Vector(0,0,0),dir is Vector(0,0,1),angle1 is 0,angle2 is 360 and angle is 360|the created shape}}
{{APIFunction|makeTube|edge,float|Creates a tube.|the created shape}}
{{APIFunction|open|string|Creates a new document and load the file into the document.| }}
{{APIFunction|read|string|Loads the file and return the shape.|a shape}}
{{APIFunction|show|shape|Adds the shape to the active document or create one if no document exists.| }}


&lt;!--T:3--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Booleans</title>
    <ns>0</ns>
    <id>559</id>
    <revision>
      <id>105467</id>
      <parentid>92247</parentid>
      <timestamp>2014-08-20T00:49:39Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Updated Part Booleans image of dialog</comment>
      <sha1>a2czj4yxrpx3a6cxvbi4wawmo42xhou</sha1>
      <text xml:space="preserve" bytes="615">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Booleans|MenuLocation=Part → Booleans|Workbenches=[[Part Module|Part]],Complete|SeeAlso=[[Part Fuse|Part Fuse]], [[Part Common|Part Common]] and [[Part Cut|Part Cut]]}}

&lt;!--T:2--&gt;
This command is a generic all-in-one boolean tool. It allows you to specify what operation to perform and what parameters to use via the dialog below. For quicker boolean operations, see also [[Part Fuse]], [[Part Common]] and [[Part Cut]].

&lt;!--T:3--&gt;
[[File:PartBooleansDialog.png]]

&lt;!--T:4--&gt;
See also Part → [[Part_RefineShape|Refine Shape]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Box</title>
    <ns>0</ns>
    <id>554</id>
    <revision>
      <id>92616</id>
      <parentid>92615</parentid>
      <timestamp>2014-06-19T09:49:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fzxm5a0akvw6hqowguoh51smd3n6dhg</sha1>
      <text xml:space="preserve" bytes="1715">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Box|MenuLocation=Part → Box||Workbenches=[[Part Module|Part]], Complete|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

== Description == &lt;!--T:13--&gt;
A parametric [http://en.wikipedia.org/wiki/Cuboid#Rectangular_cuboid Rectangular cuboid] primitive is available in the Part workbench from the Part tool bar, Part menu (primitives sub-menu) and the Create Primitives dialogue. Beginning in FreeCAD version 0.14, a Part Box is referred to in the GUI elements as a Cube and the default label is &quot;Cube&quot;.

== How to use == &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
In the workbench [[Part_Workbench|Part]] click on the cube icon [[Image:Part Box.png|32px]]. A cube with standard dimension and position will be created.

== Options == &lt;!--T:16--&gt;
The parametric rectangular cuboid is defined by the parameters  
*length, 
*width, 
*height,
*as well as the standard set of Placement Parameters.

&lt;!--T:9--&gt;
The default is a cube with parameter values for height, length and width being 10mm. The default placement values will locate the cuboid's local origin at the global origin (the location where all axis are 0) and the orientation such that 

&lt;!--T:8--&gt;
[[File:box.png|650px|a box created with the Box tool]]

====Parameter==== &lt;!--T:17--&gt;
* {{Parameter|Length:}} The length is the distance in the x-axis
* {{Parameter|Width:}} The width is the distance in the y-axis
* {{Parameter|Height:}} The height is the distance in the z-axis

==FreeCAD - Version== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
*{{Version|0.14}} 

&lt;!--T:12--&gt;
Beginning in FreeCAD version 0.14, a Part Box is referred to in the GUI elements as a Cube and the default label is &quot;Cube&quot;. 



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Chamfer</title>
    <ns>0</ns>
    <id>1072</id>
    <revision>
      <id>73058</id>
      <parentid>73057</parentid>
      <timestamp>2014-03-01T19:51:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1daw8rqo3kfsn0ljal8ec4w5hyf9tao</sha1>
      <text xml:space="preserve" bytes="340">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Chamfer|MenuLocation=Part -&gt; Chamfer|Workbenches=[[Part Module|Part]], Complete|SeeAlso=}}

&lt;!--T:2--&gt;
Chamfers the selected edges of an object. A dialog allows you to choose which objects and which edges to work on.

&lt;!--T:3--&gt;
[[Image:Dialog-chamfer.jpg]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part CheckGeometry</title>
    <ns>0</ns>
    <id>39230</id>
    <revision>
      <id>104640</id>
      <parentid>104628</parentid>
      <timestamp>2014-08-14T11:50:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>18s3mpp9rvin0g8wcqavgprdm969oi8</sha1>
      <text xml:space="preserve" bytes="319">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part CheckGeometry‏‎|MenuLocation=Part → Check geometry|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Circle</title>
    <ns>0</ns>
    <id>18881</id>
    <revision>
      <id>94511</id>
      <parentid>88511</parentid>
      <timestamp>2014-07-07T21:50:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>rz67mn2r4wlouiv3br7r9h9or0bsoce</sha1>
      <text xml:space="preserve" bytes="1428">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Circle|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Circle|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}


== Description == &lt;!--T:4--&gt;
A Circle geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:5--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.

&lt;!--T:6--&gt;
This command will create a circular curved edge. With the default values, the circular curved edge will be closed and therefore will be a circle. If the properties Angle 0 or Angle 1 are changed from their default values (0 and 360) the edge will be an open curve, an arc. 

&lt;!--T:7--&gt;
Alternatively a Part Circle can be initially defined from three points. Once created the circle will only contain the standard Part Circle properties and will no longer contain a reference to the creation points.


===Properties=== &lt;!--T:2--&gt;

&lt;!--T:8--&gt;
* {{Parameter|Radius}}: the radius of the curved edge (arc or circle) 
* {{Parameter|Angle 0}}: start of the curved edge, (degrees anti-clockwise), the default value is 0
* {{Parameter|Angle 1}}: end of the curved edge, (degrees anti-clockwise), the default value is 360 




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Common</title>
    <ns>0</ns>
    <id>561</id>
    <revision>
      <id>92232</id>
      <parentid>72732</parentid>
      <timestamp>2014-06-18T16:17:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>egjm3bhgvszutpfxwwf87uvku54rdr8</sha1>
      <text xml:space="preserve" bytes="398">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Common|MenuLocation=Part → Common|Workbenches=[[Part Module|Part]],Complete|SeeAlso=[[Part Fuse|Part Fuse]],  [[Part Cut|Part Cut]]}}

&lt;!--T:2--&gt;
Extracts the common part (intersection) between selected Part objects. This operation is fully parametric and the components can be modified and the result recomputed.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Cone</title>
    <ns>0</ns>
    <id>553</id>
    <revision>
      <id>109104</id>
      <parentid>109103</parentid>
      <timestamp>2014-09-12T20:31:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6h3czmheqh9fw02xcsjc0r9drzwqehh</sha1>
      <text xml:space="preserve" bytes="1659">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Cone|MenuLocation=Part -&gt; Cone||Workbenches=[[Part_Module|Part]], Complete|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

== Description == &lt;!--T:7--&gt;
A parametric truncated Part Cone primitive is available in the Part workbench from the Part tool bar, Part menu (primitives sub-menu) and the Create Primitives dialogue. 

== How to use == &lt;!--T:8--&gt;
In the workbench Part click on the cone icon [[Image:Part Cone.png|32px]].

&lt;!--T:9--&gt;
The default values create a truncated parametric cone, defined by radius1, radius2 height and angle, parameters. The default cone will be positioned at origin (point 0,0,0) on creation. The angle parameter permits the creation of a portion of cone (it is set to 360° by default), and the radius 1 and 2 correspond to base and top radius of the truncated cone.

== Options == &lt;!--T:10--&gt;
{|
| [[File:PartConeProperty_en.png]]
|
{{KEY|Cone}}
*Radius 1 - radius of the arc or circle defining the lower face
*Radius 2 - radius of the arc or circle defining the upper face
*Height - the height of the Part Cone
*Angle -  the number of degrees of the arc or circles defining the upper and lower faces of the truncated cone. The default 360 creates circular faces, a lower value will create a portion of a cone as defined by upper and lower faces each with edges defined by an arc of the number of degrees and two radii.
|}


&lt;!--T:5--&gt;
The image below shows a Part Cone with the parameter &quot;Angle&quot; set to 270 degrees and all other parameters are at their default values.

&lt;!--T:6--&gt;
[[File:Otherwisedefault270degree_Part_Cone.png]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part ConvertToSolid</title>
    <ns>0</ns>
    <id>39232</id>
    <revision>
      <id>106157</id>
      <parentid>104648</parentid>
      <timestamp>2014-08-23T19:28:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>b2f42l8f15uc0phl8qpfladbfwtezjp</sha1>
      <text xml:space="preserve" bytes="281">
&lt;!--T:2--&gt;
{{GuiCommand|Name=Part ConvertToSolid‏‎|MenuLocation=Part → Convert to solid|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part CreatePrimitives</title>
    <ns>0</ns>
    <id>4065</id>
    <revision>
      <id>92354</id>
      <parentid>72612</parentid>
      <timestamp>2014-06-18T17:06:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>exlp1zkr3315as98f11vp7oah6vawmr</sha1>
      <text xml:space="preserve" bytes="897">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part CreatePrimitives|MenuLocation=Part -&gt; CreatePrimitives...||Workbenches=[[Part_Module|Part]]|SeeAlso=[[Part_Shapebuilder|Part Shapebuilder]]}}

&lt;!--T:2--&gt;
A tool to create various parametric geometric primitives. 

&lt;!--T:3--&gt;
*Currently this tools can create a parametric
**[[Part_Plane|Plane]]
**[[Part_Box|Box]]
**[[Part_Cylinder|Cylinder]]
**[[Part_Cone|Cone]]
**[[Part_Sphere|Sphere]]
**[[Part_Ellipsoid|Ellipsoid]]
**[[Part_Torus|Torus]]
**[[Part_Prism|Prism]] {{Version|0.14}}*:
**[[Part_Wedge|Wedge]]
**[[Part_Helix|Helix]]
**[[Part_Spiral|Spiral]] {{Version|0.14}}*:
**[[Part_Circle|Circle]]
**[[Part_Ellipse|Ellipse]]
**[[Part_Line|Line]] (Edge)
**[[Part_Point|Point]] (Vertex)
**[[Part_RegularPolygon|Regular Polygon]] {{Version|0.14}}*:

&lt;!--T:4--&gt;
[[File:Part_CreatePrimitives_example_FreeCAD_0_13.jpg]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part CreateSimpleCopy</title>
    <ns>0</ns>
    <id>39234</id>
    <revision>
      <id>106159</id>
      <parentid>104656</parentid>
      <timestamp>2014-08-23T19:29:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>37xeuezmj6f6t1d6u0pruifdgh4tr0l</sha1>
      <text xml:space="preserve" bytes="285">
&lt;!--T:2--&gt;
{{GuiCommand|Name=Part CreateSimpleCopy‏‎|MenuLocation=Part → Create simple copy|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Cube</title>
    <ns>0</ns>
    <id>30711</id>
    <revision>
      <id>108012</id>
      <parentid>89282</parentid>
      <timestamp>2014-09-01T12:42:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Part Cut</title>
    <ns>0</ns>
    <id>562</id>
    <revision>
      <id>92365</id>
      <parentid>72766</parentid>
      <timestamp>2014-06-18T20:08:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>60312ufkzj54e5xej3ae1nsp9o08s3b</sha1>
      <text xml:space="preserve" bytes="417">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Cut|MenuLocation=Part → Cut|Workbenches=[[Part Module|Part]], Complete|SeeAlso=[[Part Fuse|Part Fuse]], [[Part Common|Part Common]]}}

&lt;!--T:2--&gt;
Cuts (subtracts) selected Part objects, the last one being subtracted from the first one. This operation is fully parametric and the components can be modified and the result recomputed.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Cylinder</title>
    <ns>0</ns>
    <id>112</id>
    <revision>
      <id>92870</id>
      <parentid>92869</parentid>
      <timestamp>2014-06-19T19:10:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>r1q1o2hwz3qy39hlillt3jjqfc7lf0o</sha1>
      <text xml:space="preserve" bytes="1103">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Cylinder|MenuLocation=Part → Cylinder||Workbenches=[[Part Module|Part]], Complete|SeeAlso=[[Part CreatePrimitives|Part CreatePrimitives]]}}

== Description == &lt;!--T:9--&gt;
Creates a simple parametric cylinder, with position, angle, radius and height parameters.

== How to use == &lt;!--T:10--&gt;
In the workbench [[Part_Workbench|Part]] click on the cube icon [[Image:Part_Cylinder.png|32px]]. The default is for a full cylinder to be positioned, the centre of one circular face coincident with the global origin (point 0,0,0), with a radius of 2mm and height of 10mm.

== Options == &lt;!--T:11--&gt;
The properties can later be edited in the data tab for the cylinder:

&lt;!--T:8--&gt;
[[File:cylinder.png|650px|a cylinder created with the Cylinder tool]]

==== Cylinder==== &lt;!--T:12--&gt;
* {{Parameter|Angle:}}  The angle parameter permits the creation of a portion of cylinder (it is set to 360° by default)
* {{Parameter|Height:}} The height is the distance in the z-axis
* {{Parameter|Radius:}} The radius defines a plane in x-y.



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Ellipse</title>
    <ns>0</ns>
    <id>18882</id>
    <revision>
      <id>88522</id>
      <parentid>88496</parentid>
      <timestamp>2014-05-30T18:20:13Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ce720zwbgfsnm2flipid2i9zvhqqdae</sha1>
      <text xml:space="preserve" bytes="1326">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Ellipse|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Ellipse|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}


== Description == &lt;!--T:2--&gt;
An Ellipse geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:4--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.

&lt;!--T:5--&gt;
This command will create a elliptical curved edge. With the default values, the elliptical curved edge will be closed and therefore will be an ellipse. If the properties Angle 1 or Angle 2 are changed from their default values (0 and 360) the edge will be an open curve.

==Properties== &lt;!--T:6--&gt;
* '''Major radius:''' the major radius of the ellipse, the default value is 4
* '''Minor radius:''' the minor radius of the ellipse, the default value is 2
* '''Angle 1:''' start of the edge of the ellipse or elliptical curved edge, (degrees anti-clockwise), the default value is 0 
* '''Angle 2:''' end of the edge  of the ellipse or elliptical curved edge, (degrees anti-clockwise), the default value is 360 


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Ellipsoid</title>
    <ns>0</ns>
    <id>10970</id>
    <revision>
      <id>88532</id>
      <parentid>88531</parentid>
      <timestamp>2014-05-30T18:22:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>4b6zud5rcy7ewxg2olnjoyq4q93iw9b</sha1>
      <text xml:space="preserve" bytes="2010">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Ellipsoid|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Ellipsoid|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}

==Description== &lt;!--T:2--&gt;
A parametric Ellipsoid solid is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:11--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.

&lt;!--T:12--&gt;
The shape produced is limited in FreeCAD to being a solid (optionally truncated) spheroid, the shape you would create by rotating an ellipse around one of its axis. By default it is a [http://en.wikipedia.org/wiki/Oblate_spheroid oblate_spheroid], the shape you would create by rotating an ellipse around its minor axis. The parameters can be changed to form a [http://en.wikipedia.org/wiki/Prolate_spheroid prolate_spheroid].

&lt;!--T:13--&gt;
The default spheroid in FreeCAD will have a circle for any cross section parallel to the xy plane. The cross section parallel to the other two planes will be an ellipse. 

&lt;!--T:14--&gt;
In mathematics, an [http://en.wikipedia.org/wiki/Ellipsoid Ellipsoid] would have an elliptical cross section in all three planes.

==Properties== &lt;!--T:3--&gt;


&lt;!--T:15--&gt;
* Radius 1, by default the minor radius parallel to the Z-axis,
* Radius 2, by default the major radius parallel to the XY plane, it is also the maximum radius of the circular cross section  
* Angle 1, lower truncation of the ellipsoid, parallel to the circular cross section (-90 degrees in a full spheroid)
* Angle 2, upper truncation of the ellipsoid, parallel to the circular cross section (90 degrees in a full spheroid)
* Angle 3, angle of rotation of the elliptical cross section (360 degrees in a full spheroid)

&lt;!--T:16--&gt;
{{clear}}

&lt;!--T:17--&gt;
[[Image:Part_Ellipsoid_screenshot.jpg]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part ExportCAD</title>
    <ns>0</ns>
    <id>39229</id>
    <revision>
      <id>105838</id>
      <parentid>105837</parentid>
      <timestamp>2014-08-22T20:42:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ae0n3mp20utnfczfahlabb23l4ec4hc</sha1>
      <text xml:space="preserve" bytes="312">
&lt;!--T:6--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:2--&gt;
{{GuiCommand|Name=Part ExportCAD‏‎|MenuLocation=Part → Export CAD|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Extrude</title>
    <ns>0</ns>
    <id>113</id>
    <revision>
      <id>85371</id>
      <parentid>85370</parentid>
      <timestamp>2014-05-21T19:46:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>q53x84k3a38eveiwuab4qf5mlpgrg89</sha1>
      <text xml:space="preserve" bytes="1948">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Extrude|MenuLocation=Part -&gt; Extrude|Workbenches=[[Part_Module|Part]], Complete|SeeAlso=}}

== Description == &lt;!--T:2--&gt;
A parametric Extrusion feature is available in the Part workbench from the Part tool bar and Part menu. Part Extrude extends a shape by a specified distance, in a specified direction. The output shape type will vary depending on the input shape type and the options selected.

&lt;!--T:4--&gt;
In most common scenarios, the following lists the expected output shape type from a given input shape type, 
*  Extrude a Vertex (point), will produce a lineal Edge (Line) 
*  Extrude a open edge (e.g. line, arc), will produce a open face (e.g. plane)  
*  Extrude a closed edge (e.g. circle), will optionally produce a closed face (e.g. an open ended cylinder) or if the parameter &quot;solid&quot; is &quot;true&quot; will produce a solid (e.g. a closed solid cylinder) 
*  Extrude a open Wire (e.g. a Draft Wire), will produce a open shell (several joined faces)  
*  Extrude a closed Wire (e.g. a Draft Wire), will optionally produce a shell (several joined faces) or if the parameter &quot;solid&quot; is &quot;true&quot; will produce a solid 
*  Extrude a face (e.g. plane), will produce a solid (e.g. Cuboid)
*  Extrude a [[Draft_ShapeString |Draft Shape String]], will produce a compound of solids (the string is a compound of the letters which are each a solid)

== Parameters == &lt;!--T:3--&gt;
The parametric rectangular cuboid is defined by the parameters  
*Base, - the input shape, (the shape upon which the Part Extrude was applied)  
*Dir, the direction and distance to extend the shape, as defined by a specified distance in each of the x, y and Z axis.
*solid, true or false, toggles between a surface or a solid where not other wise defined by the nature of the extrusion  
*Taper Angle,
*Placement, the standard placement parameters
*Label,

&lt;!--T:5--&gt;
[[Image:Dialog-extrude.jpg]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Fillet</title>
    <ns>0</ns>
    <id>563</id>
    <revision>
      <id>92732</id>
      <parentid>73002</parentid>
      <timestamp>2014-06-19T10:29:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>1i2pmedvrsnt0s8l9gnh4jauvnl0eb1</sha1>
      <text xml:space="preserve" bytes="1176">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Fillet|MenuLocation=Part → Fillet|Workbenches=[[Part Module|Part]], Complete|SeeAlso=[[Part Chamfer|Part Chamfer]]}}

==== Description ==== &lt;!--T:2--&gt;
This tool creates a fillet (round) on the selected edges of an object. A dialog allows you to choose which objects and which edges to work on.

==== Usage ==== &lt;!--T:3--&gt;
* Start the tool from the Part toolbar or from the menu. You can either select the object before or after starting the tool.
* If the shape was not selected prior to starting the tool, select it in the Shape drop down list in the TaskPanel.
* Select the fillet type, either constant radius (default) or variable radius.
* Select the edges either in the 3D model view, or by ticking them in the edge list in TaskPanel.
* Set the radius value.
* Click {{KEY|OK}} to validate.


&lt;!--T:4--&gt;
[[Image:Dialog-fillet.jpg]]

=== Part Fillet VS. PartDesign Fillet === &lt;!--T:5--&gt;
There is another fillet tool in the PartDesign workbench. Please note that their operation is quite different. Check out the [[PartDesign Fillet]] reference page for more details on their differences.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Fuse</title>
    <ns>0</ns>
    <id>560</id>
    <revision>
      <id>114782</id>
      <parentid>114562</parentid>
      <timestamp>2014-10-15T21:14:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>abiz8nhl4h0f5zpgz6vqjoo7ee7m6dc</sha1>
      <text xml:space="preserve" bytes="966">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Fuse|MenuLocation=Part → Fuse|Workbenches=[[Part_Module|Part]], Complete|SeeAlso=[[Part Cut|Part Cut]],  [[Part Common|Part Common]]}}

&lt;!--T:2--&gt;
Fuses (unions) selected Part objects into one. This operation is fully parametric and the components can be modified and the result recomputed.

&lt;!--T:4--&gt;
This command allows you to perform quickly this [[Part Booleans|Boolean operation]].

=== How to use === &lt;!--T:5--&gt;
# Select two or more shapes
# Press the {{KEY|[[Image:Part Fuse.png|16px]] '''Part Fuse'''}} button.

=== Options === &lt;!--T:3--&gt;
Items can be added and removed from the Fuse, by dragging them in or out of the Fuse feature in the treeview, with the mouse. A manual recompute (press F5 key or click on the recompute icon) is required to see the results. 

&lt;!--T:6--&gt;
After this operation may be necessary to clean the shape with [[Part_RefineShape|RefineShape]]





{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Helix</title>
    <ns>0</ns>
    <id>18880</id>
    <revision>
      <id>90155</id>
      <parentid>84270</parentid>
      <timestamp>2014-06-04T18:55:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hsrkl23guxakzsk3fdgvvt0cuu5xcqu</sha1>
      <text xml:space="preserve" bytes="2632">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Helix|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Helix|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}


== Description == &lt;!--T:2--&gt;
A Helix geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:9--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.

== How to use == &lt;!--T:4--&gt;

{| 
| [[File:PartHelixPrimitivesOptions_en.png]]
|
====Parameter==== &lt;!--T:5--&gt;
* {{Parameter|Pitch:}}The pitch corresponds to the space between two consecutive &quot;turns&quot; of the helix measured along the main axis of the helix.
* {{Parameter|Height:}} The height corresponds to the overall height of the helix measured along the main axis of the helix.
* {{Parameter|Radius:}} The radius corresponds to the radius of the circle built by the helix by viewing the helix from the top / bottom.
* {{Parameter|Angle}}: Per default the helix is built on a imaginary cylinder. With this option it is possible to build the helix on a imaginay conus. This angle corresponds to the angle of the conus. The value must be comprised between -90 deg and +90 deg.
* {{Parameter|Right-handed or Left-handed:}} This parameter specifies the [https://en.wikipedia.org/wiki/Screw_thread handedness] of the helix.
====Location====
* {{Parameter|X:}} The main axis of the helix will be translated along the x axis of the value you indicate in this field.
* {{Parameter|Y:}} The main axis of the helix will be translated along the y axis of the value you indicate in this field.
* {{Parameter|Z:}} The main axis of the helix will be translated along the z axis of the value you indicate in this field.
* {{Parameter|Direction:}} Per default the main axis of the helix is the z axis. Here you have the possibility to edit the main axis of the helix. If you select the parameter &quot;user defined...&quot; , you will be invited to indicate the main axis of the helix by entering the coordinates of its vector.
* {{Parameter|3D View:}} allows you select center in the 3D view
|}

== Options == &lt;!--T:6--&gt;

=== Properties === &lt;!--T:3--&gt;
Once you have created the helix you have the possibility to edit its parameters.
{|
| [[File:PartHelixProperty_en.png]]
|
The parameters in this menu are similar to those described above.&lt;br /&gt;
{{KEY|Base}}&lt;br /&gt;
* {{Parameter|Placement:}} allows you to move or rotate the helix
* {{Parameter|Angle:}} 
|}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Icon</title>
    <ns>0</ns>
    <id>51417</id>
    <revision>
      <id>130263</id>
      <parentid>130262</parentid>
      <timestamp>2014-12-08T20:16:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6ce84h5m6pig41jivclpfsjwa70lavh</sha1>
      <text xml:space="preserve" bytes="3984">
==[[Image:Workbench Part.png|32px|Workbench Part|link=Part Module]] [[Part Module|Part Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Part Box.png|32px|Part Box|link=Part Box]] [[Part Box|Part Box]]
 &lt;nowiki&gt;[[Image:Part Box.png|32px|Part Box|link=Part Box]] [[Part Box|Part Box]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Part Cylinder.png|32px|Part Cylinder|link=Part Cylinder]] [[Part Cylinder|Part Cylinder]] 
 &lt;nowiki&gt;[[Image:Part Cylinder.png|32px|Part Cylinder|link=Part Cylinder]] [[Part Cylinder|Part Cylinder]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Part Sphere.png|32px|Part Sphere|link=Part Sphere]] [[Part Sphere|Part Sphere]]
 &lt;nowiki&gt;[[Image:Part Sphere.png|32px|Part Sphere|link=Part Sphere]] [[Part Sphere|Part Sphere]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Part Cone.png|32px|Part Cone|link=Part Cone]] [[Part Cone|Part Cone]]
 &lt;nowiki&gt;[[Image:Part Cone.png|32px|Part Cone|link=Part Cone]] [[Part Cone|Part Cone]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Part Torus.png|32px|Part Torus|link=Part Torus]] [[Part Torus|Part Torus]]
 &lt;nowiki&gt;[[Image:Part Torus.png|32px|Part Torus|link=Part Torus]] [[Part Torus|Part Torus]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Part CreatePrimitives.png|32px|Part CreatePrimitives|link=Part CreatePrimitives]] [[Part CreatePrimitives|Part CreatePrimitives]]
 &lt;nowiki&gt;[[Image:Part CreatePrimitives.png|32px|Part CreatePrimitives|link=Part CreatePrimitives]] [[Part CreatePrimitives|Part CreatePrimitives]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Part Shapebuilder.png|32px|Part Shapebuilder|link=Part Shapebuilder]] [[Part Shapebuilder|Part Shapebuilder]]
 &lt;nowiki&gt;[[Image:Part Shapebuilder.png|32px|Part Shapebuilder|link=Part Shapebuilder]] [[Part Shapebuilder|Part Shapebuilder]]&lt;/nowiki&gt;

===Part Editing tools=== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
[[Image:Part Extrude.png|32px|Part Extrude|link=Part Extrude]] [[Part Extrude|Part Extrude]]
 &lt;nowiki&gt;[[Image:Part Extrude.png|32px|Part Extrude|link=Part Extrude]] [[Part Extrude|Part Extrude]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Part Revolve.png|32px|Part Revolve|link=Part Revolve]] [[Part Revolve|Part Revolve]]
 &lt;nowiki&gt;[[Image:Part Revolve.png|32px|Part Revolve|link=Part Revolve]] [[Part Revolve|Part Revolve]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:Part Mirror.png|32px|Part Mirror|link=Part Mirror]] [[Part Mirror|Part Mirror]]
 &lt;nowiki&gt;[[Image:Part Mirror.png|32px|Part Mirror|link=Part Mirror]] [[Part Mirror|Part Mirror]]&lt;/nowiki&gt;

&lt;!--T:13--&gt;
[[Image:Part Fillet.png|32px|Part Fillet|link=Part Fillet]] [[Part Fillet|Part Fillet]]
 &lt;nowiki&gt;[[Image:Part Fillet.png|32px|Part Fillet|link=Part Fillet]] [[Part Fillet|Part Fillet]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[Image:Part Chamfer.png|32px|Part Chamfer|link=Part Chamfer]] [[Part Chamfer|Part Chamfer]]
 &lt;nowiki&gt;[[Image:Part Chamfer.png|32px|Part Chamfer|link=Part Chamfer]] [[Part Chamfer|Part Chamfer]]&lt;/nowiki&gt;

===Part Boolean tools=== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
[[Image:Part Booleans.png|32px|Part Booleans|link=Part Booleans]] [[Part Booleans|Part Booleans]]
 &lt;nowiki&gt;[[Image:Part Booleans.png|32px|Part Booleans|link=Part Booleans]] [[Part Booleans|Part Booleans]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
[[Image:Part Cut.png|32px|Part Cut|link=Part Cut]] [[Part Cut|Part Cut]]
 &lt;nowiki&gt;[[Image:Part Cut.png|32px|Part Cut|link=Part Cut]] [[Part Cut|Part Cut]]&lt;/nowiki&gt;

&lt;!--T:18--&gt;
[[Image:Part Fuse.png|32px|Part Fuse|link=Part Fuse]] [[Part Fuse|Part Fuse]]
 &lt;nowiki&gt;[[Image:Part Fuse.png|32px|Part Fuse|link=Part Fuse]] [[Part Fuse|Part Fuse]]&lt;/nowiki&gt;

&lt;!--T:19--&gt;
[[Image:Part Common.png|32px|Part Common|link=Part Common]] [[Part Common|Part Common]]
 &lt;nowiki&gt;[[Image:Part Common.png|32px|Part Common|link=Part Common]] [[Part Common|Part Common]]&lt;/nowiki&gt;

&lt;!--T:20--&gt;
[[Image:Part Section.png|32px|Part Section|link=Part Section]] [[Part Section|Part Section]]
 &lt;nowiki&gt;[[Image:Part Section.png|32px|Part Section|link=Part Section]] [[Part Section|Part Section]]&lt;/nowiki&gt;

&lt;!--T:21--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part ImportCAD</title>
    <ns>0</ns>
    <id>39228</id>
    <revision>
      <id>104672</id>
      <parentid>104626</parentid>
      <timestamp>2014-08-14T11:53:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0pb3yt6it669pqo75qzfu8g7go16y0p</sha1>
      <text xml:space="preserve" bytes="311">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part ImportCAD‏‎|MenuLocation=Part → Import CAD|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Key</title>
    <ns>0</ns>
    <id>51443</id>
    <revision>
      <id>131453</id>
      <parentid>130916</parentid>
      <timestamp>2014-12-13T21:20:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2z5d6wwncw70x2321bn54wjuzb6xyfx</sha1>
      <text xml:space="preserve" bytes="4232">
==[[File:Workbench Part.png|16px|Workbench Part|link=Part Module]] [[Part Module|Part Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Part Box.png|16px|Part Box|link=Part Box]] [[Part Box|Part Box]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Box.png|16px|Part Box|link=Part Box]] [[Part Box|Part Box]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Part Cylinder.png|16px|Part Cylinder|link=Part Cylinder]] [[Part Cylinder|Part Cylinder]] }}
 &lt;nowiki&gt;{{KEY|[[File:Part Cylinder.png|16px|Part Cylinder|link=Part Cylinder]] [[Part Cylinder|Part Cylinder]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Part Sphere.png|16px|Part Sphere|link=Part Sphere]] [[Part Sphere|Part Sphere]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Sphere.png|16px|Part Sphere|link=Part Sphere]] [[Part Sphere|Part Sphere]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Part Cone.png|16px|Part Cone|link=Part Cone]] [[Part Cone|Part Cone]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Cone.png|16px|Part Cone|link=Part Cone]] [[Part Cone|Part Cone]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Part Torus.png|16px|Part Torus|link=Part Torus]] [[Part Torus|Part Torus]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Torus.png|16px|Part Torus|link=Part Torus]] [[Part Torus|Part Torus]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Part CreatePrimitives.png|16px|Part CreatePrimitives|link=Part CreatePrimitives]] [[Part CreatePrimitives|Part CreatePrimitives]]
 &lt;nowiki&gt;[[Image:Part CreatePrimitives.png|16px|Part CreatePrimitives|link=Part CreatePrimitives]] [[Part CreatePrimitives|Part CreatePrimitives]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Part Shapebuilder.png|16px|Part Shapebuilder|link=Part Shapebuilder]] [[Part Shapebuilder|Part Shapebuilder]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Shapebuilder.png|16px|Part Shapebuilder|link=Part Shapebuilder]] [[Part Shapebuilder|Part Shapebuilder]]}}&lt;/nowiki&gt;

===Part Editing tools=== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Part Extrude.png|16px|Part Extrude|link=Part Extrude]] [[Part Extrude|Part Extrude]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Extrude.png|16px|Part Extrude|link=Part Extrude]] [[Part Extrude|Part Extrude]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Part Revolve.png|16px|Part Revolve|link=Part Revolve]] [[Part Revolve|Part Revolve]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Revolve.png|16px|Part Revolve|link=Part Revolve]] [[Part Revolve|Part Revolve]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:Part Mirror.png|16px|Part Mirror|link=Part Mirror]] [[Part Mirror|Part Mirror]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Mirror.png|16px|Part Mirror|link=Part Mirror]] [[Part Mirror|Part Mirror]]}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
{{KEY|[[File:Part Fillet.png|16px|Part Fillet|link=Part Fillet]] [[Part Fillet|Part Fillet]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Fillet.png|16px|Part Fillet|link=Part Fillet]] [[Part Fillet|Part Fillet]]}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:Part Chamfer.png|16px|Part Chamfer|link=Part Chamfer]] [[Part Chamfer|Part Chamfer]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Chamfer.png|16px|Part Chamfer|link=Part Chamfer]] [[Part Chamfer|Part Chamfer]]}}&lt;/nowiki&gt;

===Part Boolean tools=== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Part Booleans.png|16px|Part Booleans|link=Part Booleans]] [[Part Booleans|Part Booleans]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Booleans.png|16px|Part Booleans|link=Part Booleans]] [[Part Booleans|Part Booleans]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
{{KEY|[[File:Part Cut.png|16px|Part Cut|link=Part Cut]] [[Part Cut|Part Cut]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Cut.png|16px|Part Cut|link=Part Cut]] [[Part Cut|Part Cut]]}}&lt;/nowiki&gt;

&lt;!--T:18--&gt;
{{KEY|[[File:Part Fuse.png|16px|Part Fuse|link=Part Fuse]] [[Part Fuse|Part Fuse]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Fuse.png|16px|Part Fuse|link=Part Fuse]] [[Part Fuse|Part Fuse]]}}&lt;/nowiki&gt;

&lt;!--T:19--&gt;
{{KEY|[[File:Part Common.png|16px|Part Common|link=Part Common]] [[Part Common|Part Common]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Common.png|16px|Part Common|link=Part Common]] [[Part Common|Part Common]]}}&lt;/nowiki&gt;

&lt;!--T:20--&gt;
{{KEY|[[File:Part Section.png|16px|Part Section|link=Part Section]] [[Part Section|Part Section]]}}
 &lt;nowiki&gt;{{KEY|[[File:Part Section.png|16px|Part Section|link=Part Section]] [[Part Section|Part Section]]}}&lt;/nowiki&gt;

&lt;!--T:21--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Part Line</title>
    <ns>0</ns>
    <id>18883</id>
    <revision>
      <id>97578</id>
      <parentid>73146</parentid>
      <timestamp>2014-07-24T13:51:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>lx76809osigj2z0muj9ibghdmb4mhgl</sha1>
      <text xml:space="preserve" bytes="862">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Line|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Line|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}


===Geometric Primitives=== &lt;!--T:2--&gt;
{|
| [[File:PartLinePrimitivesOptions_it.png]]
|
Line
====Parameter====
:
* {{Parameter|Start point}} 
* {{Parameter|End point}}
====Location====
* 
* 
|}

===Property=== &lt;!--T:3--&gt;
{|
| [[File:PartLineProperty_it.png]]
|
==== View ====
..
==== Data ====
{{KEY|Base}}&lt;br /&gt;
* {{PropertyData|Label}}: 
* {{PropertyData|Placement}}: [[Placement|placement]]
{{KEY|Vertex 1 Start}}&lt;br /&gt;
* {{PropertyData|X1}} :  
* {{PropertyData|X1}} :  
* {{PropertyData|X1}} :  
{{KEY|Vertex 2 Finish}}&lt;br /&gt;
* {{PropertyData|X2}} :  
* {{PropertyData|X2}} :  
* {{PropertyData|X2}} :  
|}
{{clear}}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Loft</title>
    <ns>0</ns>
    <id>4063</id>
    <revision>
      <id>124654</id>
      <parentid>124653</parentid>
      <timestamp>2014-11-23T17:34:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>9xpkgs56t70c20yw8mxye4rlicnrs1v</sha1>
      <text xml:space="preserve" bytes="5156">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part Loft|MenuLocation=Part → Loft...||Workbenches=[[Part Module|Part]]|SeeAlso=[[Part Sweep|Part Sweep]]}}


==Overview== &lt;!--T:3--&gt;
The FreeCAD Loft tool (Part Workbench), is used to create a face, shell or a solid shape from two or more profiles. The profiles can be a point (vertex), line (Edge), wire or face. Edges and wires may be either open or closed. There are various [[Part_Loft#limitations and complications|limitations and complications]], see below, however the profiles may come from the Part Workbench primitives, Draft Workbench features and a Sketch. 

&lt;!--T:4--&gt;
The Loft has three parameters, &quot;Ruled&quot;,&quot;Solid&quot; and &quot;Closed&quot; each with a value of either &quot;true&quot; or &quot;false&quot;. 

&lt;!--T:5--&gt;
If &quot;Ruled&quot; is &quot;true&quot; FreeCAD creates a face, faces or a solid from ruled surfaces. [http://en.wikipedia.org/wiki/Ruled_surface Ruled surface page on Wikipedia.]

&lt;!--T:6--&gt;
If &quot;Solid&quot; is &quot;true&quot; FreeCAD creates a solid if the profiles are of closed geometry, if &quot;false&quot; FreeCAD creates a face or (if more than one face) a shell for either open or closed profiles.

&lt;!--T:7--&gt;
If &quot;Closed&quot; is &quot;true&quot; FreeCAD attempts to loft the last profile to the first profile to create a closed figure.  

&lt;!--T:29--&gt;
For more info on how the profiles are joined together, refer [[Part Loft Technical Details|Part Loft Technical Details]] page.

&lt;!--T:8--&gt;
[[File:Part_Loft_solid_ruled_from3profiles_example_FreeCAD_0_13.jpg|frame|centre|Part_Loft. From three profiles which are two Part_Circles and one Part_Ellipse. Parameters are Solid &quot;True&quot; and Ruled &quot;True&quot;]]

==Limitations and complications== &lt;!--T:9--&gt;
*A vertex or point 
** vertex or point may only be used as the first and/or last profile in the list of profiles. 
***For example 
****you can not loft from a circle to a point, to a ellipse. 
****However you could Loft from a point to a circle to an ellipse to another point.
*Open or closed geometry profiles can not be mixed in one single Loft 
**In one Loft, all profiles (lines wires etc.) must be either open or closed. 
***For example 
****FreeCAD can not Loft between one Part Circle and one default Part Line.
*Draft Workbench features
**Draft Workbench features can be directly used as a profile in FreeCAD 0.14 or later. 
***For example the following Draft features can be used as profiles in a Part Loft
****Draft Polygon. 
****Draft Point, Line, wire, 
****Draft B-spline, Bezier Curve
****Draft Circle, Ellipse, Rectangle 
*PartDesign Sketches
**The profile may be created with a sketch. However only a valid sketch will be shown in the list to be available for selection.
**The sketch must contain only one open or closed wire or line (can be multiple lines, if those lines are all connected as they are then a single wire)
*Part Workbench
**the profile can be a valid Part geometric primitive which can be created with the [[Part_CreatePrimitives|Part CreatePrimitives]] tool
***For example the following Part geometric primitives can be a valid profile
****Point (Vertex), Line (Edge)  
****Helix, Spiral
****Circle, Ellipse
****Regular Polygon
****Plane (Face)

&lt;!--T:10--&gt;
*Closed Lofts
** The results of closed lofts may be unexpected - the loft may develop twists or kinks.  Lofting is very sensitive to the Placement of the profiles and the complexity of the curves required to connect the corresponding Vertices in all the profiles.

==An example Loft== &lt;!--T:11--&gt;
The Loft tool is in the Part Workbench, menu Part -&gt; Loft... or via the icon in the tool bar.

&lt;!--T:12--&gt;
[[Image:Part_Loft_Ikon_Ballon_Hilfe.png]]

&lt;!--T:13--&gt;
In the &quot;Tasks&quot; will be two lists: &quot;node / wire&quot; and &quot;free form&quot;.

&lt;!--T:14--&gt;
[[Image:Part_Loft_Liste3.png]]

===Selection of the elements=== &lt;!--T:15--&gt;
In the &quot;node / wire&quot; the available items are displayed. Two elements must be selected one after the first in this list.

&lt;!--T:16--&gt;
[[Image:Part_Loft_Liste_Auswahl_3b.png]]


&lt;!--T:17--&gt;
Thereafter, with the blue arrow that item is added to the list of &quot;free form&quot;.

&lt;!--T:18--&gt;
[[Image:Part_Loft_Liste_Auswahl_3c.png]]

&lt;!--T:19--&gt;
The selected items must be of the same type, so .

&lt;!--T:20--&gt;
Tip: the active / selected items in the list are displayed in the 3D area as active / selected.

===Command complete=== &lt;!--T:21--&gt;
If both elements are selected, the command can be completed with &quot;OK&quot;.

&lt;!--T:22--&gt;
[[Image:Part_Loft_Liste_Auswahl_3d.png]]

==Result== &lt;!--T:23--&gt;
From closed lines arise surfaces which might be taken at a superficial look for solids / solids.

&lt;!--T:24--&gt;
[[Image:Part_Loft_geschlossen.png]]

&lt;!--T:25--&gt;
If indeed a solid / solid to be created, can be used either when you create the button &quot;Create Solid&quot; or after creating the field'' properties'' tab'' data'' created the free-form surface of the switch &quot;Solid&quot; by pop be set to &quot;true&quot; / set properly.

&lt;!--T:26--&gt;
The procedure is analogous open polylines.

==FreeCAD Version== &lt;!--T:27--&gt;
*added Version 0.13
*&quot;closed&quot; property added Version 0.14
*Ability to use a face as a profile added Version 0.14




&lt;!--T:28--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Loft Technical Details</title>
    <ns>0</ns>
    <id>48597</id>
    <revision>
      <id>124800</id>
      <parentid>124799</parentid>
      <timestamp>2014-11-23T18:16:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gqi5833cjl8w93za5tfji4lqwyo6inq</sha1>
      <text xml:space="preserve" bytes="6783">
&lt;!--T:1--&gt;
This page explains the details of how the [[Part Loft|Loft]] surface is created. This is also relevant to [[Part Sweep|Part Sweep]] done along a straight path, although there are differences.

&lt;!--T:2--&gt;
The information provided is implementation specific, and may change. Current state is relevant to FreeCAD 0.15.4119, OCC version: 6.7.0.

==Stages of the Loft creation== &lt;!--T:3--&gt;
To explain the process of loft, it is convenient to divide it into stages:
# make number of segments in the profiles equal (if they are not already)
# establish correspondence between segments
# make the loft surface

===Step 1. Making numbers of segment in profiles match=== &lt;!--T:4--&gt;
The Loft needs the number of segments to match in order to create surfaces between corresponding segments. If the numbers of segments match in all profiles, this step is skipped.

&lt;!--T:5--&gt;
If at least one of the profiles as different number of segments, the following procedure is applied. The procedure is explained here for the case of only two profiles for simplicity.
# the profiles are temporarily aligned so that they are coplanar and their centers of masses* match.
# (see the picture) for every vertex in one profile, the second profile is sliced at the same polar angle (the polar center is the center of mass). If there is more than one slice possible or no slice possible at all (it can happen on very convex profiles), the Loft typically fails.
# the same is done in the opposite direction.

&lt;!--T:6--&gt;
The operation is extended to all profiles, to yield the equal number of segments. The total number of segments in each profile would be equal to the sum of all numbers of segments of all profiles (provided none of the vertices happen to be at the same polar angle).

&lt;!--T:7--&gt;
{|style=&quot;margin: 0 auto;&quot;
|[[File:Loft-vertex-insertion.png|thumb|none|300px|The process of slicing profile2 (white crescent-like shape) to create joints corresponding to vertices of profile1 (purple pentagon). The inserted joints are marked by yellow arrows.]]
|[[File:Loft crescent pentagon.png|thumb|none|300px|The result of loft relevant to the picture on the left.]]
|}

===Step 2. Establishing correspondence between segments=== &lt;!--T:8--&gt;
[[File:Loft Number of verts match.png|thumb|300px|Demonstration of Loft keeping the number of segments in profiles when they match. Note how 3 edges of the top square &quot;collapse&quot; into a small polygonal piece of the bottom profile.]]
In case numbers of segments in all profiles were not equal, slicing was done in Step 1, and the correspondence is trivial.
In case numbers of segments in all profiles were equal, existing segments are used (see the picture), and this is when the correspondence must be established. 

&lt;!--T:9--&gt;
The exact algorithm to find corresponding segments is complex, but generally it tends to minimize the twisting of the resulting Loft. This means that if one is doing a loft between two squares, the maximum twist possible is &lt;45°. Further rotation of one of the squares will cause the Loft to jump to other vertices.

&lt;!--T:10--&gt;
The correspondence between neighboring profiles is made independently. This means that additional twisting can be obtained by adding more profiles.

&lt;!--T:11--&gt;
Another thing to note is that when numbers of segments in profiles are equal, the resulting Loft is substantially more robust with respect to complex profiles, especially for non-convex ones.

{{clear}}

===Step 3. Making the loft surface.=== &lt;!--T:12--&gt;
[[File:Loft B-spline.png|thumb|400px|A spline interpolation curve (red) that follows the loft surface. The points to interpolate through are shown as red squares.]]
If there are only two profiles, the surfaces created are ruled surfaces between corresponding segments of the profiles. Straight edges are created to connect corresponding vertices of the profiles.

&lt;!--T:13--&gt;
If there are more than two profiles, the surfaces are made of splines in the same manner as straight lines form ruled surfaces. The imaginary splines the surface is &quot;made of&quot; are drawn through corresponding points of the corresponding segments of the profiles.

&lt;!--T:14--&gt;
The splines are B-spline interpolation.
* If the number of profiles is below 10, interpolation is done with by a B-spline with a maximum possible degree (i.e. degree = number_of_profiles - 1).
* If the number of profiles exceeds 10, the interpolation is switched to 3rd degree B-splines.

&lt;!--T:15--&gt;
The knotting method used is &quot;approximate chord length&quot;. Approximate stands for the fact that the knot vector is exactly the same for every spline in a loft. For more info on what is B-spline interpolation, knot vector, chord length method, see, for example, [http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/INT-APP/CURVE-INT-global.html cs.mtu.edu Curve Global Interpolation ].

&lt;!--T:16--&gt;
Note that Loft has a &quot;Ruled&quot; property. If it is set to true, ruled surfaces are made between neighboring profiles even when there's more than one profile. That is, B-spline interpolation is replaced by piecewise linear interpolation.

{{clear}}

==The essence== &lt;!--T:17--&gt;
* The loft is doing B-spline interpolation between the provided profiles. The interpolation is switched to piecewise linear when &quot;Ruled&quot; property is set to true.
* When number of profiles exceeds 9, interpolation degree is dropped to 3. This switchover can substantially reduce wiggling.
* Matching the number of segments (aka number of vertices) in the profiles allows one to give the loft a slight twist, and typically permits using more complex profiles.
* When numbers of segments are not matched, it's best to keep the profiles to be representable by a proper r(phi) function in polar coordinates.

==Additional remarks== &lt;!--T:18--&gt;
* It is not required that the profiles are parallel (see a picture below).
* For Loft, it is not required that the profiles are separated (see a picture below). They can be coplanar, but they should not intersect.
* When &quot;closed&quot; property of the Loft is &quot;true&quot;, there is a cusp joint in all the splines forming the Loft (see a picture below). There is no reliable way to close the loft smoothly now.

&lt;!--T:19--&gt;
{|style=&quot;margin: 0 auto;&quot;
|[[File:Loft nonparallel.png|thumb|300px|none|It is not required that the profiles are parallel.]]
|[[File:Loft Coplanar.png|thumb|300px|none|In Loft, the profiles can be coplanar. In this example, two of three profiles are coplanar.]]
|[[File:Loft-closed.png|thumb|300px|none|An example of a closed loft between three pentagonal profiles (white). Note the non-smooth joint at the outermost profile. This is the first profile in the closed loft.]]
|}

&lt;!--T:20--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part MakeCompound</title>
    <ns>0</ns>
    <id>32499</id>
    <revision>
      <id>91215</id>
      <parentid>91103</parentid>
      <timestamp>2014-06-15T22:02:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a9qc7fktxo3x6g8lszcx9p1ivcr9ttx</sha1>
      <text xml:space="preserve" bytes="234">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part MakeCompound‏‎|MenuLocation=Part -&gt; Make compound|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:2--&gt;

==Usage== &lt;!--T:3--&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Mirror</title>
    <ns>0</ns>
    <id>1074</id>
    <revision>
      <id>72896</id>
      <parentid>72895</parentid>
      <timestamp>2014-03-01T16:13:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dcx85d6vidhz6t4c3gl81sk75m1n5mw</sha1>
      <text xml:space="preserve" bytes="1877">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Mirror|MenuLocation=Part -&gt; Mirror|Workbenches=[[Part Workbench|Part]], Complete|SeeAlso=}}

==Introduction== &lt;!--T:2--&gt;
'Mirror Object' - This tool creates a new object (image) which is a reflection of the original object (source). The image object is created behind a mirror plane.  The mirror plane may be standard plane ('''XY''', '''YZ''', or '''XZ'''), or any plane parallel to a standard plane.  

&lt;!--T:3--&gt;
An example:

&lt;!--T:4--&gt;
[[Image:PARTMirrorBeforev11.png|frame|left|Before]]


&lt;!--T:5--&gt;
[[Image:PARTMirrorAfterv11.png|frame|left|After (mirrored through '''YZ''' plane)]]
{{clear}}

==Usage== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[[Image:PARTMirrorDialogv11.png|left]]

&lt;!--T:8--&gt;
Select the source object from the list.
Select a standard '''Mirror plane''' from the dropbox.
Press '''OK''' to create the image object.

&lt;!--T:9--&gt;
&lt;br clear=all&gt;

==Options== &lt;!--T:10--&gt;
The '''Base point''' boxes can be used to move the mirror plane parallel to the selected standard miror plane. Only one of the '''X''', '''Y''', or '''Z''' boxes is effective for a given standard plane.

&lt;!--T:11--&gt;
{| class=&quot;wikitable&quot; border=&quot;1&quot;
!Standard Plane!!Base Point Box!!Effect
|- align=&quot;center&quot; 
|'''XY'''||'''Z'''|| align=&quot;left&quot; |Move mirror plane along '''Z''' axis.
|- align=&quot;center&quot;
|'''XY'''||'''X''', '''Y'''|| align=&quot;left&quot; |No effect.
|- align=&quot;center&quot;
|'''XZ'''||'''Y'''|| align=&quot;left&quot; |Move mirror plane along '''Y''' axis.
|- align=&quot;center&quot;
|'''XZ'''||'''X''', '''Z'''|| align=&quot;left&quot; |No effect.
|- align=&quot;center&quot;
|'''YZ'''||'''X'''|| align=&quot;left&quot; |Move mirror plane along '''X''' axis.
|- align=&quot;center&quot;
|'''YZ'''||'''Y''', '''Z'''|| align=&quot;left&quot; |No effect.
|}

==Limitations== &lt;!--T:12--&gt;
* Arbitrary mirror planes (ie not parallel to a standard plane) are not supported (as of FC version 0.13). 


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Module</title>
    <ns>0</ns>
    <id>114</id>
    <revision>
      <id>106007</id>
      <parentid>45577</parentid>
      <timestamp>2014-08-23T12:21:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>docnav</comment>
      <sha1>r2uh6i9w5eyr8idbv1fr5qzu0o9727e</sha1>
      <text xml:space="preserve" bytes="6801">
&lt;!--T:1--&gt;
The CAD capabilities of FreeCAD are based on the [http://en.wikipedia.org/wiki/Open_CASCADE OpenCasCade] kernel. The Part module allows FreeCAD to access and use the OpenCasCade objects and functions. OpenCascade is a professional-level CAD kernel, that features advanced 3D geometry manipulation and objects. The Part objects, unlike [[Mesh Module]] objects, are much more complex, and therefore permit much more advanced operations, like coherent boolean operations, modifications history and parametric behaviour.

&lt;!--T:2--&gt;
[[Image:Part example.jpg]]

&lt;!--T:3--&gt;
Example of Part shapes in FreeCAD

=== The tools === &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
The Part module tools are all located in the '''Part''' menu that appears when you load the Part module. 

&lt;!--T:6--&gt;
{{Part Tools}}

=== Boolean Operations === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[[Image:Part_BooleanOperations.png|500px|left|An example of union (Fuse), intersection (Common) and difference (Cut)]]

&lt;!--T:9--&gt;
{{clear}}

&lt;!--T:10--&gt;
An example of union (Fuse), intersection (Common) and difference (Cut)

=== Explaining the concepts === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
In OpenCasCade terminology, we distinguish between geometric primitives and (topological) shapes. A geometric primitive can be a point, a line, a circle, a plane, etc. or even some more complex types like a B-Spline curve or surface. A shape can be a vertex, an edge, a wire, a face, a solid or a compound of other shapes. The geometric primitives are not made to be directly displayed on the 3D scene, but rather to be used as building geometry for shapes. For example, an edge can be constructed from a line or from a portion of a circle.

&lt;!--T:13--&gt;
We could say, to resume, that geometry primitive are &quot;shapeless&quot; building blocks, and shapes are the real spatial geometry built on it.

&lt;!--T:14--&gt;
To get a complete list of all of them refer to the [http://www.opencascade.org/org/doc/ OCC documentation] (Alternative: [http://opencascade.sourcearchive.com/documentation/6.3.0.dfsg.1-1/classes.html sourcearchive.com]) and search for '''Geom_*''' (for geometry) and '''TopoDS_*''' (for shapes). There you can also read more about the differences between geometric objects and shapes. Please note that unfortunately the official OCC documentation is not available online (you must download an archive) and is mostly aimed at programmers, not at end-users. But hopefully you'll find enough information to get started here.

&lt;!--T:15--&gt;
The geometric types actually can be divided into two major groups: curves and surfaces. Out of the curves (line, circle, ...) you can directly build an edge, out of the surfaces (plane, cylinder, ...) a face can be built. For example, the geometric primitive line is unlimited, i.e. it is defined by a base vector and a direction vector while its shape representation must be something limited by a start and end point. And a box -- a solid -- can be created by six limited planes.

&lt;!--T:16--&gt;
From an edge or face you can also go back to its geometric primitive counter part.

&lt;!--T:17--&gt;
Thus, out of shapes you can build very complex parts or, the other way round, extract all sub-shapes a more complex shape is made of.

=== Scripting === &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
The main data structure used in the Part module is the [http://en.wikipedia.org/wiki/Boundary_representation BRep] data type from OpenCascade.
Almost all contents and object types of the Part module are now available to python scripting. This includes geometric primitives, such as Line and Circle (or Arc), and the whole range of TopoShapes, like Vertexes, Edges, Wires, Faces, Solids and Compounds. For each of those objects, several creation methods exist, and for some of them, especially the TopoShapes, advanced operations like boolean union/difference/intersection are also available. Explore the contents of the Part module, as described in the [[FreeCAD Scripting Basics]] page, to know more.

=== Examples === &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
To create a line element switch to the Python console and type in:

&lt;syntaxhighlight&gt;
 import Part,PartGui 
 doc=App.newDocument()  
 l=Part.Line()
 l.StartPoint=(0.0,0.0,0.0)
 l.EndPoint=(1.0,1.0,1.0)
 doc.addObject(&quot;Part::Feature&quot;,&quot;Line&quot;).Shape=l.toShape() 
 doc.recompute()
&lt;/syntaxhighlight&gt;

&lt;!--T:22--&gt;
Let's go through the above python example step by step:

&lt;syntaxhighlight&gt;
 import Part,PartGui
 doc=App.newDocument()
&lt;/syntaxhighlight&gt;

&lt;!--T:23--&gt;
loads the Part module and creates a new document

&lt;syntaxhighlight&gt;
 l=Part.Line()
 l.StartPoint=(0.0,0.0,0.0)
 l.EndPoint=(1.0,1.0,1.0)
&lt;/syntaxhighlight&gt;

&lt;!--T:24--&gt;
Line is actually a line segment, hence the start and endpoint.

&lt;syntaxhighlight&gt;
 doc.addObject(&quot;Part::Feature&quot;,&quot;Line&quot;).Shape=l.toShape()
&lt;/syntaxhighlight&gt;

&lt;!--T:25--&gt;
This adds a Part object type to the document and assigns the shape representation of the line segment to the 'Shape' property of the added object. It is important to understand here that we used a geometric primitive (the Part.Line) to create a TopoShape out of it (the toShape() method). Only Shapes can be added to the document. In FreeCAD, geometry primitives are used as &quot;building structures&quot; for Shapes.

&lt;syntaxhighlight&gt;
 doc.recompute()
&lt;/syntaxhighlight&gt;

&lt;!--T:26--&gt;
Updates the document. This also prepares the visual representation of the new part object.

&lt;!--T:27--&gt;
Note that a Line can be created by specifying its start and endpoint directly in the constructor, for example Part.Line(point1,point2), or we can create a default line and set its properties afterwards, as we did here.

&lt;!--T:28--&gt;
A circle can be created in a similar way:

&lt;syntaxhighlight&gt;
 import Part
 doc = App.activeDocument()
 c = Part.Circle() 
 c.Radius=10.0  
 f = doc.addObject(&quot;Part::Feature&quot;, &quot;Circle&quot;)
 f.Shape = c.toShape()
 doc.recompute()
&lt;/syntaxhighlight&gt;

&lt;!--T:29--&gt;
Note again, we used the circle (geometry primitive) to construct a shape out of it. We can of course still access our construction geometry afterwards, by doing:

&lt;syntaxhighlight&gt;
 s = f.Shape
 e = s.Edges[0]
 c = e.Curve
&lt;/syntaxhighlight&gt;

&lt;!--T:30--&gt;
Here we take the shape of our object f, then we take its list of edges. In this case there will be only one because we made the whole shape out of a single circle, so we take only the first item of the Edges list, and we takes its curve. Every Edge has a Curve, which is the geometry primitive it is based on.

&lt;!--T:31--&gt;
Head to the [[Topological data scripting]] page if you would like to know more.

&lt;!--T:32--&gt;
{{docnav|OpenSCAD Module|Drawing Module}}

&lt;!--T:33--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Part Offset</title>
    <ns>0</ns>
    <id>11063</id>
    <revision>
      <id>106213</id>
      <parentid>106212</parentid>
      <timestamp>2014-08-24T00:49:21Z</timestamp>
      <contributor>
        <username>Stemby</username>
        <id>401</id>
      </contributor>
      <minor/>
      <sha1>cvcy77m49lbq72zqia66ulg5idvk565</sha1>
      <text xml:space="preserve" bytes="578">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part Offset|MenuLocation=Part → Offset||Workbenches=[[Part_Module|Part]], Complet|SeeAlso=[[Part_Thickness|Thickness]]}}


==Description== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
The Part Offset tool creates copies of a selected shape at a certain distance from the base shape.

==How to use== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
ToDo

==Example== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[[Image:PartOffset1_it.png|left]]
{{clear}}
[[Image:PartOffset2_it.png|left]]
{{clear}}
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Plane</title>
    <ns>0</ns>
    <id>18824</id>
    <revision>
      <id>92588</id>
      <parentid>92587</parentid>
      <timestamp>2014-06-19T09:39:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fi9gj1d88s3jruelferc7ag3kojm4xw</sha1>
      <text xml:space="preserve" bytes="2107">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part CreatePrimitives|Workbenches=[[Part Module|Part]], [[OpenSCAD_Module|OpenSCAD]]|MenuLocation=[[Part_Module|Part]] → [[Part_CreatePrimitives|Create Primitives]] → Plane|
SeeAlso=[[Part_CreatePrimitives|Create Primitives]]}}

== Description == &lt;!--T:7--&gt;
Create a simple parametric plane 10 x 10 mm, with the parameters of position, length, and width.
By default, the plane is positioned at the origin (0,0,0). 

&lt;!--T:3--&gt;
[[File:PartPlane.png|left]]
{{clear}}

== How to use == &lt;!--T:8--&gt;
The standard plane is created with its lower left corner at the origin point 0,0,0.
To change these parameters, open the Location section and enter the desired values ​​in the respective input fields, or click on the 3D view and select a point, the point coordinates are taken from the fields.
In the Direction menu you can also define a standard vector (X, Y or Z) normal to the plane, or click User Defined ... to open the dialog box that allows you to set a different carrier (eg direction 1.0 , -1 creates a plane inclined 45 ° with respect to X and Z).

&lt;!--T:5--&gt;
The properties can be changed later in the '''Combined View → Data''', after selecting the item.

== Option == &lt;!--T:9--&gt;
{|
| [[File:PartPlaneProperty.png]]
|
==== View ====
You have the standard properties view.
==== Data ====
{{KEY/it|Base}} - Object placement data &lt;br /&gt;
* {{PropertyData|Label}} : String name of the object, defaults to 'Plane'. User may rename it.
* {{PropertyData|Placement}}: Placement of feature is defined by below angle, axis and position.
*{{PropertyData|Angle}} : Angle of rotation relative to the below axis.
*{{PropertyData|Axis}} : Defines the axis of rotation plane: X, Y, or Z. Defaults to Z axis, Z = 1
*{{PropertyData|Position}} : Position X, Y, Z, relative to the origin 0, 0, 0.
{{KEY/it|Plane}} - Plane Specific Parameters &lt;br /&gt;
* {{PropertyData|Length}} : Length is the dimension along the X axis The default value is 10 mm
* {{PropertyData|Width}} : Width is the size of the Y-axis The default value is 10 mm
|}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Point</title>
    <ns>0</ns>
    <id>18884</id>
    <revision>
      <id>90248</id>
      <parentid>90247</parentid>
      <timestamp>2014-06-04T19:43:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>10pizwr9fmfmr13txjbg6tj6146ds3l</sha1>
      <text xml:space="preserve" bytes="1094">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Point|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Point|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}


== Description == &lt;!--T:2--&gt;
A Point (vertex) geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:4--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.


===Geometric Primitives=== &lt;!--T:5--&gt;
{|
| [[File:PartVertexPrimitivesOptions_it.png]]
| 
Point
====Parameter====
* {{Parameter|X}} 
* {{Parameter|Y}}
* {{Parameter|Z}}
====Location====
*
* 
* 
|}
===Property===
{|
| [[File:PartVertexProperty_it.png|left]]
|
==== View ====
..
==== Data ====
{{KEY|Base}}&lt;br /&gt;
* {{ProprietaDati|Label}}: 
* {{ProprietaDati|Placement}}: [[Placement|placement]]
* {{ProprietaDati|X}} :  
* {{ProprietaDati|Y}} :  
* {{ProprietaDati|Z}} :  
|}
{{clear}}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Prism</title>
    <ns>0</ns>
    <id>18821</id>
    <revision>
      <id>96568</id>
      <parentid>84279</parentid>
      <timestamp>2014-07-21T22:01:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>fgxtq7nr5qnv8z6v5c1h072zd3df62w</sha1>
      <text xml:space="preserve" bytes="988">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Prism|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Prism|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=Part → Primitives → [[Part_Box|Box]]}}

== Description == &lt;!--T:2--&gt;
A Part Prism is available from the Create Primitives dialogue in the Part workbench. A Part Prism is a solid defined by a regular polygon cross section and a height.

&lt;!--T:3--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.


== Parameters == &lt;!--T:4--&gt;
*Polygon - the number of sides of the polygon which describes the cross section of the Part Prism
*cirumradius - the circumradius is the distance from the centre of the polygon to a vertex.
*Height - the height of the Part Prism

&lt;!--T:5--&gt;
{{Version|0.14}}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part RefineShape</title>
    <ns>0</ns>
    <id>18825</id>
    <revision>
      <id>114265</id>
      <parentid>114264</parentid>
      <timestamp>2014-10-13T17:33:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>lohlv74xr9bl54bnpzdq1hashayt3n4</sha1>
      <text xml:space="preserve" bytes="953">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part RefineShape|MenuLocation=Part → Refine Shape|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=}}


==Description== &lt;!--T:2--&gt;
Cleans its unnecessary lines. After a Boolean operation some lines defining the previous form remain visible, this tool creates a copy of the totally cleaned.

&lt;!--T:4--&gt;
[[File:PartRefineShape_it.png]]

==Use== &lt;!--T:3--&gt;
# Select the shape to be cleaned.
# Click the {{KEY|Part → Refine shape}} menu.
* A copy of the object is created and totally cleaned, the original object is rendered hiden.
* The newly created copy is independent of the original.

==Scripting== &lt;!--T:5--&gt;
The Phyton command for refining a shape is the following:

&lt;syntaxhighlight&gt;
shape.removeSplitter()
&lt;/syntaxhighlight&gt;


&lt;!--T:6--&gt;
Note that the function does not modify the existing shape, but returns a new shape.

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part RegularPolygon</title>
    <ns>0</ns>
    <id>18823</id>
    <revision>
      <id>86897</id>
      <parentid>84296</parentid>
      <timestamp>2014-05-24T21:28:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>8yrv4frimqnxmhpba234ccf1ogqwyx5</sha1>
      <text xml:space="preserve" bytes="876">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part RegularPolygon|MenuLocation=Part → [[Part_CreatePrimitives|Create Primitives]] → Regular Polygon|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=..}}

== Description == &lt;!--T:2--&gt;
A RegularPolygon geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:3--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.


== Parameters == &lt;!--T:4--&gt;
*Polygon - the number of sides of the polygon which describes the cross section of the Part Prism
*cirumradius - the circumradius is the distance from the centre of the polygon to a vertex.

 
&lt;!--T:5--&gt;
{{Version|0.14}}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part ReverseShapes</title>
    <ns>0</ns>
    <id>39233</id>
    <revision>
      <id>104680</id>
      <parentid>104631</parentid>
      <timestamp>2014-08-14T11:53:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>t5u0vqpnqyodygux5yamo0zv9rc403p</sha1>
      <text xml:space="preserve" bytes="319">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part ReverseShapes‏‎|MenuLocation=Part → Reverse Shapes|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Revolve</title>
    <ns>0</ns>
    <id>564</id>
    <revision>
      <id>80318</id>
      <parentid>80317</parentid>
      <timestamp>2014-04-26T06:19:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bqaco5vsv70pi48194utxofwvcrr02w</sha1>
      <text xml:space="preserve" bytes="1427">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Revolve|MenuLocation=Part → Revolve|Workbenches=[[Part Module|Part]], Complete|SeeAlso=}}


&lt;!--T:2--&gt;
Revolves the selected object around a given axis.  The following shape types 
are allowed, and lead to the listed output shapes ([[#Notes|See Notes for exceptions]]):

&lt;!--T:3--&gt;
{| class=&quot;wikitable&quot;
|-
! Input shape
! Output shape
|-
| Vertex 
| Edge
|-
| Edge 
| Face
|-
|Wire 
| Shell
|-
|Face
| Solid
|-
|Shell 
| Compound solid
|}

&lt;!--T:4--&gt;
Solids or compound solids are not allowed as input shapes.  Normal compounds 
are currently not allowed, too.  Future versions will check the actual shape 
type of compound objects.

&lt;!--T:5--&gt;
[[Image:Dialog-revolve.jpg]]

&lt;!--T:6--&gt;
The Angle argument specifies how far the object is to be turned.  The 
coordinates move the origin of the axis of revolving, relative to the origin
of the coordinate system.

&lt;!--T:7--&gt;
If you select a user defined axis, the numbers define the direction of the
revolving axis with respect to the coordinate system: If the Z coordinate is
0 and the Y and X coordinate are non-zero, then the axis will lie in the 
X-Y-plane.  Its angle is such that its tangent is the ratio of the given 
X and Y coordinates.

===Notes=== &lt;!--T:8--&gt;
*If your version of FreeCAD has a check box for Solid in the Revolve dialog, you can make Solids from closed Wires and Edges.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part RuledSurface</title>
    <ns>0</ns>
    <id>25647</id>
    <revision>
      <id>73087</id>
      <parentid>73086</parentid>
      <timestamp>2014-03-01T20:04:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dc8ke67tmrzk5ux0gfplzwpvq5cxq7l</sha1>
      <text xml:space="preserve" bytes="299">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part RuledSurface|MenuLocation=Part → RuledSurface|Workbenches=[[Part Module|Part]], Complete|SeeAlso=}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
[[File:PartRuledSurface_it.png|left]]
{{clear}}

==How to use== &lt;!--T:4--&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Section</title>
    <ns>0</ns>
    <id>565</id>
    <revision>
      <id>92758</id>
      <parentid>72958</parentid>
      <timestamp>2014-06-19T10:42:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7oob5xrwedp4wiwx9nab8ae79h30haz</sha1>
      <text xml:space="preserve" bytes="395">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Section|MenuLocation=Part → Section|Workbenches=[[Part Module|Part]], Complete|SeeAlso=}}

&lt;!--T:2--&gt;
Extracts a section from the intersection of two selected shapes, the second one being used as a section plane. This operation is fully parametric and the components can be modified and the result recomputed.



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part SectionCross</title>
    <ns>0</ns>
    <id>25587</id>
    <revision>
      <id>72982</id>
      <parentid>72981</parentid>
      <timestamp>2014-03-01T17:41:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a1iue5b3gcu6k1kpd5af0tltct4i056</sha1>
      <text xml:space="preserve" bytes="356">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part SectionCross|MenuLocation=Part → SectionCross|Workbenches=[[Part Module|Part]],Complete|SeeAlso=}}

&lt;!--T:2--&gt;
[[Image:SectionCross1.png|Selezionare un oggetto]]

&lt;!--T:3--&gt;
[[Image:SectionCross2.png|Finestra di dialogo]]

&lt;!--T:4--&gt;
[[Image:SectionCross3.png|Risultato]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part ShapeFromMesh</title>
    <ns>0</ns>
    <id>39231</id>
    <revision>
      <id>104685</id>
      <parentid>104629</parentid>
      <timestamp>2014-08-14T11:53:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h6i8nlfcap2bcio1x1bk4gbtdqnebg1</sha1>
      <text xml:space="preserve" bytes="320">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Part ShapeFromMesh‏‎|MenuLocation=Part → Shape from Mesh|Workbenches=[[Part Workbench|Part]]|SeeAlso=}}

==Introduction== &lt;!--T:3--&gt; 

==Usage== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Shapebuilder</title>
    <ns>0</ns>
    <id>4066</id>
    <revision>
      <id>73837</id>
      <parentid>73836</parentid>
      <timestamp>2014-03-03T20:30:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h38b8p98qsyr9zwod79i4zsnfuk4cw5</sha1>
      <text xml:space="preserve" bytes="321">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Shapebuilder|MenuLocation=Part -&gt; Shapebuilder...||Workbenches=[[Part_Module|Part]]|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

&lt;!--T:2--&gt;
A tool to create more complex shapes from various parametric geometric primitives.




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Sphere</title>
    <ns>0</ns>
    <id>552</id>
    <revision>
      <id>132368</id>
      <parentid>132367</parentid>
      <timestamp>2014-12-19T16:16:03Z</timestamp>
      <contributor>
        <username>FreeMaxCar</username>
        <id>3310</id>
      </contributor>
      <sha1>n9art0m0gl3uykacn1jl4nx239llzbr</sha1>
      <text xml:space="preserve" bytes="1649">
{{clear}}

&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Sphere|MenuLocation=Part -&gt; Sphere||Workbenches=[[Part_Module|Part Module]],Complete|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

== Description == &lt;!--T:2--&gt;
Creates a simple parametric sphere, with position, angle1, angle2, angle3 and radius parameters.

[[File:SimpleSphere.jpg|400px]]

== How to use == &lt;!--T:3--&gt;
In the workbench [[Part_Workbench|Part]] click on the sphere icon [[Image:Part Sphere.png|32px]]. The sphere will be positioned at origin (point 0,0,0) on creation. The angle parameters permit to make a portion of sphere instead of a full sphere (they are set to 360° by default).

== Options == &lt;!--T:4--&gt;

&lt;!--T:18--&gt;
The parametric sphere is defined by the following parameters:

&lt;!--T:19--&gt;
* Radius
* Angle 1
* Angle 2
* Angle 3
* as well as the standard set of placement parameters

&lt;!--T:20--&gt;
The picture below gives an overview of a parametric sphere with parameters different from the default value.

&lt;!--T:21--&gt;
[[File:PartDesign_Sphere_Parameter_en.jpg|600px]]

====Parameter==== &lt;!--T:17--&gt;
* {{Parameter|Radius:}} Radius of the sphere
* {{Parameter|Angle 1:}} 1nd angle to cut / define the sphere
* {{Parameter|Angle 2:}} 2nd angle to cut / define the sphere
* {{Parameter|Angle 3:}} 3rd angle to cut / define the sphere

Because it is quite difficult to explain the meaning of the parameters angle 1, angle 2, angle 3, the picture below gives an explanation about these parameters with following values: angle 1 = -45°, angle 2 = 45° and angle 3= 90°.

[[File:SphereCutThreeAngles.jpg|400px]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Spiral</title>
    <ns>0</ns>
    <id>18822</id>
    <revision>
      <id>88553</id>
      <parentid>88550</parentid>
      <timestamp>2014-05-30T18:23:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5lgmnzs4cra02d85ps2os319e0rvl4t</sha1>
      <text xml:space="preserve" bytes="810">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Spiral|MenuLocation=[[Part_Module|Part]] → [[Part_CreatePrimitives|Create Primitives]] → Spiral|Workbenches=[[Part Module|Part]],  [[OpenSCAD_Module|OpenSCAD]]|SeeAlso=[[Part_CreatePrimitives|Create Primitives]]}}


== Description == &lt;!--T:2--&gt;
A Spiral geometric primitive is available from the Create Primitives dialogue in the Part workbench. 

&lt;!--T:6--&gt;
The Create Primitives dialogue can be accessed via the [[Part_CreatePrimitives|CreatePrimitives]] icon [[Image:Part_CreatePrimitives.png|32px]] located in the Part menu or the Part toolbar, in the Part Workbench.


&lt;!--T:3--&gt;
[[File:SpiralDefault_it.png]]

&lt;!--T:4--&gt;
[[File:Spiral_x45_it.png]]

&lt;!--T:5--&gt;
[[File:Spiral_y45_it.png]]


&lt;!--T:7--&gt;
{{Version|0.14}}



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Sweep</title>
    <ns>0</ns>
    <id>4057</id>
    <revision>
      <id>125143</id>
      <parentid>125142</parentid>
      <timestamp>2014-11-25T21:11:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>54za2hbt248jqro198twbhkwbaes55s</sha1>
      <text xml:space="preserve" bytes="4905">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:12--&gt;
{{GuiCommand|Name=Part Sweep|MenuLocation=Part → Sweep...||Workbenches=[[Part Module|Part]]|SeeAlso=[[Part Loft|Part Loft]]}}

==Overview== &lt;!--T:2--&gt;
The FreeCAD Part Sweep tool (Part Workbench), is used to create a face, shell or a solid shape from one or more profiles, projected along a path.

&lt;!--T:3--&gt;
The Part Sweep tool is similar to [[Part Loft|Part Loft]] with the addition of a path to define the projection between profiles. 

&lt;!--T:4--&gt;
The profiles can be a point (vertex), line (Edge), wire or face. Edges and wires may be either open or closed. There are various [[Part_Sweep#Profile limitations and complications|profile limitations and complications]], see below, however the profiles may come from the Part Workbench primitives, Draft Workbench features and a Sketch. 

&lt;!--T:5--&gt;
The path can be a line (Edge) or series of connecting lines, wire or various Part Workbench primitives, Draft Workbench features or a Sketch. The path is often selected directly from the main model window, however it can also be selected from the Tree View (Model Tab of Combo View). The path can either be an entire appropriate shape or an appropriate sub-component of a more advance shape (for example, an edge of a Part Cube could be selected as the path). The path may be either open or closed and will thus create either an open or closed Sweep. A closed path such as a Part Circle will result in a closed Sweep. For example a Sweep of a smaller circle around a path of a larger circle will create a torus.

&lt;!--T:13--&gt;
[[File:Sweep-demo-no frenet.png|600px]]

==Properties== &lt;!--T:7--&gt;
===Solid===
If &quot;Solid&quot; is &quot;true&quot; FreeCAD creates a solid if the profiles are of closed geometry, if &quot;false&quot; FreeCAD creates a face or (if more than one face) a shell for either open or closed profiles.

===Frenet=== &lt;!--T:8--&gt;
[[File:Sweep-frenet-comp.png|500px|right]]
The &quot;Frenet&quot; property controls how the profile orientation changes as it follows along the sweep path. If &quot;Frenet&quot; is &quot;false&quot;, the orientation of the profile is kept consistent from point to point. The resulting shape has the minimum possible twisting. Unintuitively, when a profile is swept along a helix, this results in the orientation of the profile slowly creep (rotate) as it follows the helix. Setting &quot;Frenet&quot; to true prevents such a creep.

&lt;!--T:14--&gt;
If &quot;Frenet&quot; is &quot;true&quot; the orientation of the profile is computed basing on local curvature and tangency vectors of the path. This keeps the orientation of the profile consistent when sweeping along a helix (because curvature vector of a straight helix is always pointing to its axis). However, when path is not a helix, the resulting shape can have strange looking twists sometimes. For more information, see [http://en.wikipedia.org/wiki/Frenet%E2%80%93Serret_formulas Frenet Serret formulas].

===Transition=== &lt;!--T:6--&gt;
&quot;Transition&quot; sets the transition style of the Sweep at a joint in the path, if the path does not define the corner transition (for example where the path is a wire). The property is not exposed in Task dialog and can be found in properties after the Sweep has been created.

==Profile limitations and complications== &lt;!--T:9--&gt;
*A vertex or point 
** vertex or point may only be used as the first and/or last profile in the list of profiles. 
***For example 
****you can not Sweep from a circle to a point, to a ellipse. 
****However you could Sweep from a point to a circle to an ellipse to another point.
*Open or closed geometry profiles can not be mixed in one single Sweep 
**In one Sweep, all profiles (lines wires etc.) must be either open or closed. 
***For example 
****FreeCAD can not Sweep between one Part Circle and one default Part Line.
*Draft Workbench features
**Draft Workbench features can be directly used as a profile in FreeCAD 0.14 or later. 
***For example the following Draft features can be used as profiles in a Part Sweep
****Draft Polygon. 
****Draft Point, Line, wire, 
****Draft B-spline, Bezier Curve
****Draft Circle, Ellipse, Rectangle 
*PartDesign Sketches
**The profile may be created with a sketch. However only a valid sketch will be shown in the list to be available for selection.
**The sketch must contain only one open or closed wire or line (can be multiple lines, if those lines are all connected as they are then a single wire)
*Part Workbench
**the profile can be a valid Part geometric primitive which can be created with the [[Part_CreatePrimitives|Part CreatePrimitives tool]] 
***For example the following Part geometric primitives can be a valid profile
****Point (Vertex), Line (Edge)  
****Helix, Spiral
****Circle, Ellipse
****Regular Polygon
****Plane (Face)

==FreeCAD - Version== &lt;!--T:10--&gt;
*0.13
*0.14 some of the above is extended functionality added in 0.14

&lt;!--T:11--&gt;
[[Category:UnfinishedDocu]]



</text>
    </revision>
  </page>
  <page>
    <title>Part Thickness</title>
    <ns>0</ns>
    <id>32073</id>
    <revision>
      <id>110052</id>
      <parentid>109469</parentid>
      <timestamp>2014-09-21T18:44:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>pvktr131fale8d9xrxjuiy69ixcjwso</sha1>
      <text xml:space="preserve" bytes="2044">
== Part Thickness == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
{{GuiCommand|Name=Part Thickness|MenuLocation=Part → Thickness||Workbenches=[[Part Module|Part]], Complet|SeeAlso=[[Part Offset|Offset]]}}


&lt;!--T:4--&gt;
This tool works on a solid form, and transforms it into a hollow object, giving to each of its faces a thickness defined.
On some forms allows you to significantly speed up the work, and avoids boring extrusions and pockets. 

===Use=== &lt;!--T:5--&gt;
* Create a solid
* Select one or more faces
* Click Part Thickness tool
* Set the options
* Click ok to confirm, create the operation and exit the function
* In the Properties table adjust the parameters if necessary

===Options=== &lt;!--T:6--&gt;
* Tickness: Wall thickness of the resulting object, set the desired value
* Mode
** Skin: Select this option if you want to get an item like a vase,  headless but with the bottom
** Pipe: Select this option if you want to get an object like a pipe, headless and bottomless. In this case it may be convenient to select the faces to be deleted before you start the tool. Helping with predefined views buttons or use the numeric keys.
** RectoVerso: 
* Join Type
** Arc: removes the outer edges and create a fillet with a radius equal to the thickness defined
** Tangent:
** Intersection:
* Intersection:
* Self-intersection: Enables self-intersection
* Face / Done: Select the faces to be removed, then click Done
* Update view: Automatically updates the view in real time

===Limitations=== &lt;!--T:13--&gt;
Sometimes, on some shape produce bizarre results. Save your work before applying Thickness on complex objects

===Links=== &lt;!--T:14--&gt;
A good example on how to use this tool: http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3766&amp;p=29741&amp;hilit=enclosure#p29547

===Examples=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[[Image:ThicknessEsempio1.png]]

&lt;!--T:9--&gt;
[[Image:ThicknessEsempio2.png]]

&lt;!--T:10--&gt;
[[Image:ThicknessEsempio3.png]]

&lt;!--T:11--&gt;
[[Image:ThicknessEsempio4.png]]

&lt;!--T:12--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Torus</title>
    <ns>0</ns>
    <id>551</id>
    <revision>
      <id>92700</id>
      <parentid>70319</parentid>
      <timestamp>2014-06-19T10:21:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ee4lae46o4tc89toz210prez0gts9qj</sha1>
      <text xml:space="preserve" bytes="612">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Torus|MenuLocation=Part → Torus||Workbenches=[[Part Module|Part]], Complete|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

&lt;!--T:2--&gt;
Creates a simple parametric torus, with position, angle1, angle2, angle3, radius1 and radius2 parameters. The torus will be positioned at origin (point 0,0,0) on creation. The angle parameters permit to make a portion of torus instead of a full one (they are set to 360° by default), the radius 1 and 2 define respectively the size of the hole and the ring thickness of the torus.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Vertex</title>
    <ns>0</ns>
    <id>25667</id>
    <revision>
      <id>132541</id>
      <parentid>132534</parentid>
      <timestamp>2014-12-19T22:59:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>9re1g9c3blqknosw370watgqoppcvso</sha1>
      <text xml:space="preserve" bytes="29">
[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Part Wedge</title>
    <ns>0</ns>
    <id>18878</id>
    <revision>
      <id>94831</id>
      <parentid>73229</parentid>
      <timestamp>2014-07-08T14:01:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>90466hvtxky06c77wu9atcqgf1jxzq3</sha1>
      <text xml:space="preserve" bytes="1189">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Part Wedge|MenuLocation=Part -&gt; [[Part_CreatePrimitives|Part CreatePrimitives]] -&gt; Wedge||Workbenches=[[Part_Module|Part]]|SeeAlso=[[Part_CreatePrimitives|Part CreatePrimitives]]}}

&lt;!--T:2--&gt;
Create a parametric Wedge object. This Wedge defaults to a larger square base and a smaller square top.

=== Default Size and Placement === &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
'''Placement:'''
The default orientation places the base in the XZ plane and the top outward in the Y axis direction. The default base corner is the 0,0,0 origin.

&lt;!--T:5--&gt;
'''Base Face:'''
*X : 10 mm
*Z : 10 mm

&lt;!--T:6--&gt;
'''Height:'''
*Y : 0-10 mm

&lt;!--T:7--&gt;
'''Top Face:'''
*X : 2-8 mm
*Z : 2-8 mm


&lt;!--T:8--&gt;
[[File:PartWedgeProperty.png|left]]
{{clear}}

=== Parametric Inputs === &lt;!--T:9--&gt;
{|
| [[File:PartWedgeProperty_Inputs.png]]
|
Using the default placement, the below inputs are:
*{{PropertyData|X min/max}} : Base face X axis span
*{{PropertyData|Y min/max}}: Wedge height span
*{{PropertyData|Z min/max}} : Base face Z axis span
*{{PropertyData|X2 min/max}} : Top face X axis span
*{{PropertyData|Z2 min/max}} : Top face Z axis span
|}


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Part Workbench</title>
    <ns>0</ns>
    <id>115</id>
    <redirect title="Part Module" />
    <revision>
      <id>957</id>
      <parentid>956</parentid>
      <timestamp>2009-02-02T13:09:33Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>00oojse3kunmsozjmcgmahoiidb3tt4</sha1>
      <text xml:space="preserve" bytes="25">#Redirect [[Part_Module]]</text>
    </revision>
  </page>
  <page>
    <title>Part scripting</title>
    <ns>0</ns>
    <id>687</id>
    <revision>
      <id>108013</id>
      <parentid>89283</parentid>
      <timestamp>2014-09-01T12:43:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Pivy</title>
    <ns>0</ns>
    <id>443</id>
    <revision>
      <id>112246</id>
      <parentid>112245</parentid>
      <timestamp>2014-10-04T20:25:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>p3rmgjagyctc7rmp9g6v7z648lq04m8</sha1>
      <text xml:space="preserve" bytes="6436">
&lt;!--T:1--&gt;
[http://pivy.coin3d.org/ Pivy] is a python binding library for [http://www.coin3d.org Coin3d], the 3D-rendering library used FreeCAD. When imported in a running python interpreter, it allows to dialog directly with any running Coin3d [[Scenegraph|scenegraphs]], such as the FreeCAD 3D views, or even to create new ones. Pivy is bundled in standard FreeCAD installation.

&lt;!--T:2--&gt;
The coin library is divided into several pieces, coin itself, for manipulating scenegraphs and bindings for several GUI systems, such as windows or, like in our case, qt. Those modules are available to pivy too, depending if they are present on the system. The coin module is always present, and it is what we will use anyway, since we won't need to care about anchoring our 3D display in any interface, it is already done by FreeCAD itself. All we need to do is this:

&lt;syntaxhighlight&gt;
 from pivy import coin
&lt;/syntaxhighlight&gt;

==Accessing and modifying the scenegraph== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
We saw in the [[Scenegraph]] page how a typical Coin scene is organized. Everything that appears in a FreeCAD 3D view is a coin scenegraph, organized the same way. We have one root node, and all objects on the screen are its children.

&lt;!--T:5--&gt;
FreeCAD has an easy way to access the root node of a 3D view scenegraph:

&lt;syntaxhighlight&gt;
 sg = FreeCADGui.ActiveDocument.ActiveView.getSceneGraph()
 print sg
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
This will return the root node:

&lt;syntaxhighlight&gt;
 &lt;pivy.coin.SoSelection; proxy of &lt;Swig Object of type 'SoSelection *' at 0x360cb60&gt; &gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
We can inspect the immediate children of our scene:

&lt;syntaxhighlight&gt;
 for node in sg.getChildren():
     print node
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
Some of those nodes, such as SoSeparators or SoGroups, can have children themselves. The complete list of the available coin objects can be found in the [http://doc.coin3d.org/Coin/classes.html official coin documentation].

&lt;!--T:9--&gt;
Let's try to add something to our scenegraph now. We'll add a nice red cube:

&lt;syntaxhighlight&gt;
 col = coin.SoBaseColor()
 col.rgb=(1,0,0)
 cub = coin.SoCube()
 myCustomNode = coin.SoSeparator()
 myCustomNode.addChild(col)
 myCustomNode.addChild(cub)
 sg.addChild(myCustomNode)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
and here is our (nice) red cube. Now, let's try this:

&lt;syntaxhighlight&gt;
 col.rgb=(1,1,0)
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
See? everything is still accessible and modifiable on-the-fly. No need to recompute or redraw anything, coin takes care of everything. You can add stuff to your scenegraph, change properties, hide stuff, show temporary objects, anything. Of course, this only concerns the display in the 3D view. That display gets recomputed by FreeCAD on file open, and when an object needs recomputing. So, if you change the aspect of an existing FreeCAD object, those changes will be lost if the object gets recomputed or when you reopen the file.

&lt;!--T:12--&gt;
A key to work with scenegraphs in your scripts is to be able to access certain properties of the nodes you added when needed. For example, if we wanted to move our cube, we would have added a SoTranslation node to our custom node, and it would have looked like this:

&lt;syntaxhighlight&gt;
 col = coin.SoBaseColor()
 col.rgb=(1,0,0)
 trans = coin.SoTranslation()
 trans.translation.setValue([0,0,0])
 cub = coin.SoCube()
 myCustomNode = coin.SoSeparator()
 myCustomNode.addChild(col)
 mtCustomNode.addChild(trans)
 myCustomNode.addChild(cub)
 sg.addChild(myCustomNode)
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
Remember that in an openInventor scenegraph, the order is important. A node affects what comes next, so you can say something like: color red, cube, color yellow, sphere, and you will get a red cube and a yellow sphere. If we added the translation now to our existing custom node, it would come after the cube, and not affect it. If we had inserted it when creating it, like here above, we could now do:

&lt;syntaxhighlight&gt;
 trans.translation.setValue([2,0,0])
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
And our cube would jump 2 units to the right.
Finally, removing something is done with:

&lt;syntaxhighlight&gt;
 sg.removeChild(myCustomNode)
&lt;/syntaxhighlight&gt;

==Using callback mechanisms== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
A [http://en.wikipedia.org/wiki/Callback_%28computer_science%29 callback mechanism] is a system that permits a library that you are using, such as our coin library, to call you back, that is, to call a certain function from your currently running python object. This is extremely useful, because that way coin can notify you if some specific event occurs in the scene. Coin can watch very different things, such as mouse position, clicks of a mouse button, keyboard keys being pressed, and many other things.

&lt;!--T:17--&gt;
FreeCAD features an easy way to use such callbacks:

&lt;syntaxhighlight&gt;
 class ButtonTest:
   def __init__(self):
     self.view = FreeCADGui.ActiveDocument.ActiveView
     self.callback = self.view.addEventCallbackPivy(SoMouseButtonEvent.getClassTypeId(),self.getMouseClick) 
   def getMouseClick(self,event_cb):
     event = event_cb.getEvent()
     if event.getState() == SoMouseButtonEvent.DOWN:
       print &quot;Alert!!! A mouse button has been improperly clicked!!!&quot;
       self.view.removeEventCallbackSWIG(SoMouseButtonEvent.getClassTypeId(),self.callback) 
 
 ButtonTest()
&lt;/syntaxhighlight&gt;

&lt;!--T:18--&gt;
The callback has to be initiated from an object, because that object must still be running when the callback will occur.
See also a [[Code_snippets#Observing_mouse_events_in_the_3D_viewer_via_Python|complete list]] of possible events and their parameters, or the [http://doc.coin3d.org/Coin/classes.html official coin documentation].

== Documentation == &lt;!--T:19--&gt; 

&lt;!--T:20--&gt;
Unfortunately pivy itself still doesn't have a proper documentation, but since it is an accurate translation of coin, you can safely use the coin documentation as reference, and use python style instead of c++ style (for example SoFile::getClassTypeId() would in pivy be SoFile.getClassId())

&lt;!--T:21--&gt;
{{docnav|Scenegraph|PyQt}}

&lt;!--T:22--&gt;
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Placement</title>
    <ns>0</ns>
    <id>3760</id>
    <revision>
      <id>112574</id>
      <parentid>112573</parentid>
      <timestamp>2014-10-05T19:06:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>482pjqwv9ttqa5dpi0v64l4gtri9062</sha1>
      <text xml:space="preserve" bytes="10562">
==Overview== &lt;!--T:1--&gt;
'''Placement''' is how FreeCAD specifies the location and attitude (orientation) of an object in space.  Placement can be specified in multiple forms and manipulated via [[Python_scripting_tutorial#Vectors_and_Placements|scripting]], the Properties pane or the '''Placement''' dialog ('''Edit''' menu).
 
===Accessing the Placement Attribute===
An object's Placement attributes can be accessed and modified in 3 ways:

&lt;!--T:2--&gt;
[[Image:PlacementPropertiesv10-800x800.png|frame|left|Placement in Properties panel]]
{{clear}}

&lt;!--T:3--&gt;
[[Image:PlacePyConv10.png|frame|left|Scripting Placement as y/p/r and Matrix and its  [[Placement_API|API]].]]
{{clear}}

[[Image:PlacementDialogv10.png|frame|left|Placement Dialog]]
{{clear}}
 
==Forms of Placement== &lt;!--T:4--&gt;
===Angle, Axis and Position===
'''Placement = [Angle, Axis, Position]'''

&lt;!--T:5--&gt;
The first form of '''Placement''' fixes an object's location in space with a Position, and describes it's orientation as a single rotation about an axis. 
 
'''Angle = r''' is a scalar indicating the amount of rotation of the object about Axis. Entered as degrees, but stored internally as radians.

'''Axis = (ax,ay,az)''' is a vector describing an axis of rotation (See Note about axis of rotation). Examples are:
 
    (1,0,0)       ==&gt; about '''X''' axis
    (0,1,0)       ==&gt; about '''Y''' axis
    (0,0,1)       ==&gt; about '''Z''' axis
    (0.71,0.71,0) ==&gt; about the line '''y=x'''
                                         
'''Position = (x,y,z)''' is a Vector describing the world coordinates of the reference point of the object.  Note that in scripts, Placement.Base is used to denote the Position component of a placement.
The Property Editor calls this value &quot;Position&quot;.
 
===Position and Yaw, Pitch and Roll=== &lt;!--T:6--&gt;
'''Placement = [Position, Yaw-Pitch-Roll]'''

&lt;!--T:7--&gt;
The second form of '''Placement''' fixes an object's location in space with a Position (as in the first form), but describes it's orientation using Yaw, Pitch and Roll angles ([http://en.wikipedia.org/wiki/Yaw,_pitch,_and_roll Yaw, Pitch, Roll]).  These angles are sometimes referred to as Euler angles or Tait-Bryan angles ([http://en.wikipedia.org/wiki/Euler_angles Euler angles]). Yaw, Pitch and Roll are common aviation terms for a body's orientation (or attitude). 

&lt;!--T:8--&gt;
'''Position = (x,y,z)''' is a Vector describing the world coordinates of the reference point of the object.

&lt;!--T:9--&gt;
'''Yaw-Pitch-Roll = (y,p,r)''' is a tuple that specifies the attitude of the object. Values for y,p,r   specify degrees of rotation about each of the z,y,x axis (see note).  
 
&lt;center&gt;
&lt;gallery widths=&quot;300&quot; heights=&quot;200&quot;&gt;
Image:Tache_Placement_Lacet_fr_Mini.gif|'''Yaw''' is the rotation about the '''Z axis''', that is to say a rotation from left to right. &lt;br /&gt;(The yaw angle is the '''Psi ψ''').
Image:Tache_Placement_Tangage_fr_Mini.gif|'''Pitch''' is rotation about the '''Y axis''', that is to say nose-up and nose-down. &lt;br /&gt;(The Pitch angle is the '''Phi φ''').
Image:Tache_Placement_Roulis_fr_Mini.gif|'''Roll''' is rotation about the '''X axis''', that is to say wing up and down. &lt;br /&gt;(The Roll angle is the '''Thêta θ''').
&lt;/gallery&gt;
&lt;/center&gt;
{{clear}}

===Matrix=== &lt;!--T:10--&gt;
'''Placement = Matrix'''

&lt;!--T:11--&gt;
The third form of '''Placement''' describes the object's position and orientation with a 4x4 affine transformation matrix ([http://en.wikipedia.org/wiki/Affine_transformation Affine Transformation]).

&lt;!--T:12--&gt;
'''Matrix''' = 

   ((r11,r12,r13,t1),
    (r21,r22,r23,t2),
    (r31,r32,r33,t3),
    (0,0,0,1)) , with rij specifying rotation and ti specifying translation. 
{{clear}}
 
==The Placement Dialog== &lt;!--T:13--&gt;
The Placement Dialog is invoked from the '''Edit''' menu.  It is used to precisely rotate/translate objects.  It is also used when we need to create a sketch on a &quot;non standard&quot; plane or change a sketch's orientation to a new plane.
 
The '''Translation''' section adjusts the objects location in space.
The '''Center''' section adjusts the rotational axis to one that does not pass through the object's reference point.
The '''Rotation''' section adjusts the rotational angle(s) and the method of specifying those angles. 
 
The '''Apply incremental changes to object placement''' tick box is useful when translations/rotations are to be made relative the object's current position/attitude, rather than to the original position/attitude.  Ticking this box resets the dialog's input fields to zero, but does not change the object's orientation or location.  Subsequent entries do change the orientation/location, but are applied from the object's current position.  
 
==Examples==
Rotations about a single axis:

&lt;!--T:14--&gt;
[[Image:RotationAboutZBefore.png|600px|left|Before Rotation]]  Before Rotation (top view) {{clear}}
 
[[Image:RotationAboutZAfter.png|600px|right|After Rotation about Z]]  After Rotation about Z (top view) {{clear}}
 
[[Image:RotationAboutYXAfter.png|600px|right|After Rotation about y=x]]  After Rotation about y=x (right view) {{clear}}
 
Rotation with offset centre point:

&lt;!--T:15--&gt;
[[Image:RotationOffsetBefore.png|600px|left|Before Rotation]] Before Rotation (top view) {{clear}} 
 
[[Image:RotationOffsetAfter.png|600px|right|After Rotation about Z]]  After Rotation about Z (top view) {{clear}}
 
Rotation using Euler angles:

[[Image:RotationEulerBefore.png|600px|left|Before Rotation]]  Before Rotation {{clear}}
 
[[Image:RotationEulerAfter.png|600px|right|After Rotation]] After Rotation {{clear}} 
 
==Placement.Base vs Shape Definition== &lt;!--T:16--&gt;
Placement is not the only way to position a shape in space.  Note the Python console
in this image: 

&lt;!--T:17--&gt;
[[Image:2Placements800.png|frame|left|2 Shapes with Same Placement]]{{clear}} 

&lt;!--T:18--&gt;
Both cubes have the same value for Placement, but are in different locations!  This is 
because the 2 shapes are defined by different vertices.  For the 2 shapes in the above
illustration: 

  &gt;&gt;&gt; ev = App.ActiveDocument.Extrude.Shape.Vertexes
  &gt;&gt;&gt; for v in ev: print v.X,&quot;,&quot;,v.Y,&quot;,&quot;,v.Z
  ... 
  30.0,30.0,0.0
  30.0,30.0,10.0
  40.0,30.0,0.0
  40.0,30.0,10.0
  40.0,40.0,0.0
  40.0,40.0,10.0
  30.0,40.0,0.0
  30.0,40.0,10.0
  &gt;&gt;&gt; e1v = App.ActiveDocument.Extrude001.Shape.Vertexes
  &gt;&gt;&gt; for v in e1v: print v.X,&quot;,&quot;,v.Y,&quot;,&quot;,v.Z
  ... 
  0.0,10.0,0.0
  0.0,10.0,10.0
  10.0,10.0,0.0
  10.0,10.0,10.0
  10.0,0.0,0.0
  10.0,0.0,10.0
  0.0,0.0,0.0
  0.0,0.0,10.0
  &gt;&gt;&gt; 
  
The Vertices (or Vectors) that define the shape use the Placement.Base attribute as
their origin.  So if you want to move a shape 10 units along the '''X''' axis, you could 
add 10 to the '''X''' coordinates of all the Vertices or you could set Placement.Position
to (10,0,0).
 
==Using &quot;Center&quot; to Control Axis of Rotation== &lt;!--T:19--&gt;
By default, the axis of rotation isn't really the x/y/z axis. It is a line parallel to the selected axis, but passing through the reference point (Placement.Base) of the object to be rotated. This can be changed by using the Center fields in the Placement dialog or, in scripts, by using the Center parameter of the FreeCAD.Placement constructor.

&lt;!--T:20--&gt;
For example, suppose we have a box (below) positioned at (20,20,10).  
[[Image:LocalZBefore2.png|frame|center|Before Rotation]]{{clear}}
We wish to spin the box around it's own vertical centre line (ie local Z), while keeping it the same position.  We can easily achieve this by specifying a Center value equal to the coordinates of the box's central point (25,25,15).
[[Image:LocalZAfter2.png|frame|center|After Rotation]]{{clear}}
 
In a script, we would do: 
&lt;syntaxhighlight&gt;
import FreeCAD
obj = App.ActiveDocument.Box                       # our box
rot = FreeCAD.Rotation(FreeCAD.Vector(0,0,1),45)   # 45° about Z
centre = FreeCAD.Vector(25,25,15)                  # central point of box 
pos = obj.Placement.Base                           # position point of box
newplace = FreeCAD.Placement(pos,rot,centre)       # make a new Placement object
obj.Placement = newplace                           # spin the box
&lt;/syntaxhighlight&gt;  

&lt;!--T:23--&gt;
Same script with the file example [http://forum.freecadweb.org/download/file.php?id=1651 RotateCoG2.fcstd] (discussion on the [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3950#p31052 forum])

&lt;syntaxhighlight&gt;
import FreeCAD
obj = App.ActiveDocument.Extrude                    # our box
rot = FreeCAD.Rotation(FreeCAD.Vector(0,0,1),45)    # 45 about Z
centre = FreeCAD.Vector(25,25,0)                    # &quot;centre&quot; of rotation (where local Z cuts XY)
pos = obj.Placement.Base                            # original placement of obj
newplace = FreeCAD.Placement(pos,rot,centre)        # make a new Placement object
obj.Placement = newplace                            # spin the box
&lt;/syntaxhighlight&gt;


==Notes== &lt;!--T:21--&gt;
* Axis and Angle can also be expressed as a [http://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation quaternion].
* The reference point of an object (FreeCAD.Placement.Base) varies depending on the object.  Some examples for common objects:
 
{| class=&quot;wikitable&quot; border=&quot;1&quot;
!Object!!Reference Point
|- align=&quot;left&quot; 
|Part.Box ||left (minx), front (miny), bottom (minz) vertex
|- align=&quot;left&quot;
|Part.Sphere||center of the sphere (ie centre of bounding box)
|- align=&quot;left&quot;
|Part.Cylinder||center of the bottom face
|- align=&quot;left&quot;
|Part.Cone||center of bottom face (or apex if bottom radius is 0)
|- align=&quot;left&quot;
|Part.Torus||center of the torus
|- align=&quot;left&quot;
|Features derived from Sketches||the Feature inherits the Position of the underlying Sketch.   Sketches always start with Position = (0,0,0).
|}
{{clear}}
==Issues==
* As of version 0.13, update of Placement properties in the Data tab has been disabled for objects created with PartDesign, except for the initial sketch from which the solid will be created. Therefore the Placement of a solid created in PartDesign from a sketch can only be altered by adjusting Placement parameters of the initial construction sketch (the first sketch) from which the solid was created. 
* Placement functionality will eventually be handled in the Assembly workbench. 
{{clear}}
==More==
*This tutorial: [[Aeroplane|Aeroplane]] covers the mechanics of changing an object's Placement extensively.
*A step-by-step explanation of the Placement Dialog can be found here [[Tasks_Placement|Tasks_Placement]].

&lt;!--T:22--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Placement API</title>
    <ns>0</ns>
    <id>741</id>
    <revision>
      <id>133208</id>
      <parentid>133207</parentid>
      <timestamp>2014-12-23T21:05:16Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <sha1>fpjbdzzjwnua6odp4nzv0f8bzxjyfq9</sha1>
      <text xml:space="preserve" bytes="1258">
&lt;!--T:1--&gt;
In FreeCAD, Placement defines an object's position and rotation. The Placement concept is explained in detail here: [[Placement|Placement]].

&lt;!--T:2--&gt;
Example of setting a document object's Placement: 

{{Code|code=
myObj = FreeCAD.ActiveDocument.ActiveObject
pl = FreeCAD.Placement()
pl.move(FreeCAD.Vector(2,0,0))
myObj.Placement = pl
}}



&lt;!--T:3--&gt;
{{APIClass|Placement| ) or (Placement) or (Matrix) or (Base, Rotation) or (Base,Rotation,Center) or (Base,Axis,Angle|Constructs a placement, empty or with the given arguments, or as a copy of the given placement.}}
{{APIProperty|Base|a vector representing the Placement's position.}}
{{APIProperty|Rotation|a quaternion representing the Placement's rotation.}}
{{APIFunction|inverse| |computes the inverse placement|a placement.}}
{{APIFunction|move|Vector|moves the Placement along the given vector|nothing}}
{{APIFunction|multVec|Vector|applies the Placement to the given vector|the resulting vector.}}
{{APIFunction|multiply|Placement|multiplies this placement with another one|the resulting placement.}}
{{APIFunction|toMatrix| | |a matrix representing the Placement's transformation.}}

&lt;!--T:4--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Planche à dessin</title>
    <ns>0</ns>
    <id>1347</id>
    <revision>
      <id>108019</id>
      <parentid>91011</parentid>
      <timestamp>2014-09-01T12:47:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Plot Axes</title>
    <ns>0</ns>
    <id>36982</id>
    <revision>
      <id>99343</id>
      <parentid>99342</parentid>
      <timestamp>2014-07-28T10:54:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>p5x7u75mneob8q9tedx94a8bjvsq0c6</sha1>
      <text xml:space="preserve" bytes="248">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Axes|MenuLocation=Plot → Axes‏‎||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Basic tutorial</title>
    <ns>0</ns>
    <id>3218</id>
    <revision>
      <id>128613</id>
      <parentid>128612</parentid>
      <timestamp>2014-12-04T21:44:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dqcrcxji8hsegaasz757degrkvdaiw3</sha1>
      <text xml:space="preserve" bytes="5998">
&lt;!--T:1--&gt;
In this tutorial we will learn how to perform a basic plot using Plot module and Python console. You can learn more about [[Plot_Module|Plot module here]].

&lt;!--T:2--&gt;
[[Image:Plot_Trigonometric_Example.png|600px|center|Basic plot example]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Basic plot example.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:3--&gt;
In previous image you can see the result that we aproximately will obtain. Following this tutorial you will learn:
* How to create a Plot from Python Console.
* How to plot some data from Python Console.
* How to show the grid lines.
* How to show the legend.
* How to edit series labels, introducing text in [http://www.latex-project.org LaTeX].
* How to edit axes labels, introducing text in [http://www.latex-project.org LaTeX].
* How to edit series styles.
* How to save your plot.

==Plotting data== &lt;!--T:4--&gt;
In order to plot data you don't need to create a new FreeCAD document, simply show the Python console and start sending commands, or use [[Macros|macros]].

===Creating plot document=== &lt;!--T:5--&gt;
Plots are special documents that can be created manually in order to add data later, or allow the module creates one authomatically when you start plotting data. Create your own plot documents have 2 advantages:
* You can set the document window label.
* You can control easily on wich document you plot your data.

&lt;!--T:6--&gt;
In order to create new plot document simply launch following commands:

&lt;syntaxhighlight&gt;
 import Plot
 Plot.figure(&quot;TrigonometricTest&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
That will create a new tab on main windows called '''TrigonometricTest'''. The new created document already have a set of axes. Each plot document have at least one set of axes that can be removed without using fully matplotlib control.

===Drawing functions=== &lt;!--T:8--&gt;
You can start working here due to plot command will start a new document, but all plot commands that you execute will append series to created plot until you don't create a new document, so ussually is better options control the opened plot documents. First thing that we need to do is create the data for sine and cosine functions that we want to plot:

&lt;syntaxhighlight&gt;
 import math
 t = range(0,101)
 t = [tt/100.0 for tt in t]
 s = [math.sin(2.0*math.pi*tt) for tt in t]
 c = [math.cos(2.0*math.pi*tt) for tt in t]
&lt;/syntaxhighlight&gt;

&lt;!--T:9--&gt;
That will create 3 arrays of data (with 101 points):
* ''t'' = Time in seconds.
* ''s'' = Sine function.
* ''c'' = Cosine function.

&lt;!--T:10--&gt;
In order to plot both function we only need to launch next commands:

&lt;syntaxhighlight&gt;
 Plot.plot(t,s)
 Plot.plot(t,c)
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
That will plot our functions. '''plot''' command allows the series label as argument, but since we will edit it later using Plot module tools we don't pass this data yet.

==Configuring plot== &lt;!--T:12--&gt;

===Showing grid and legend=== &lt;!--T:13--&gt;
Change FreeCAD workbench to [[Plot_Module|Plot module]] in View/Workbench menu. When module has been loaded use grid tool in order to show it.

&lt;!--T:14--&gt;
[[Image:Plot_Grid.png‎|center|Show/hide grid tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Show/hide grid tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:15--&gt;
You can repeat the action in order to hide it. Also you can show the legend with the tool provided.

&lt;!--T:16--&gt;
[[Image:Plot_Legend.png‎|center|Show/hide legend tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Show/hide legend tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:17--&gt;
As you can see, legend is empty because we have not set any series label yet. In [[Plot_Module|Plot module]] series without label are not represented at legend, in order to allow you to draw auxiliar lines.

===Setting series labels=== &lt;!--T:18--&gt;
With the series tool you can edit some series parameters.

&lt;!--T:19--&gt;
[[Image:Plot_Series.png‎|center|Series configuration tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Series configuration tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:20--&gt;
First for all select the line that you want to edit, for example we will start with the first one. Uncheck '''No label''' and set this label:

&lt;syntaxhighlight&gt;
 $y = \sin \left( 2 \pi t \right)$
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
Since [http://matplotlib.org/ matplotlib] supports [http://www.latex-project.org LaTeX] you can set all the labels or titles that you want using it. Set the following label to second serie:

&lt;syntaxhighlight&gt;
 $y = \cos \left( 2 \pi t \right)$
&lt;/syntaxhighlight&gt;

===Setting series style=== &lt;!--T:22--&gt;
Series allows you to set a lot of series properties. Try to set the properties shown at the example image, changing series colors and drawing style of the second one.

===Setting axes labels=== &lt;!--T:23--&gt;
With the labels tool you can set labels associated to all created axes.

&lt;!--T:24--&gt;
[[Image:Plot_Labels.png‎|center|Labels tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Labels tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:25--&gt;
Set this data:
* Title = Trigonometric functions example
* X Label = $t$
* Y Label = $y = \mathrm{f} \left( t \right)$

&lt;!--T:26--&gt;
Also change the size of all of them to 20.

==Saving plot== &lt;!--T:27--&gt;
With saving plot tool you can save your plot as image file in several formats.

&lt;!--T:28--&gt;
[[Image:Plot_Save.png‎|center|Save tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Save tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:29--&gt;
First for all select the path of the output file. You can use file selection dialog using the button at right of the path edition line.

&lt;!--T:30--&gt;
You can set the output image size in inches, for example we can set 11.7x8.3 that is a '''DIN A4''' paper size. DPI (Dots per inch) will control the image resolution, for example using 100 dpi you will get an image of 1170x830 pixels.

&lt;!--T:31--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Grid</title>
    <ns>0</ns>
    <id>36998</id>
    <revision>
      <id>99363</id>
      <parentid>99362</parentid>
      <timestamp>2014-07-28T11:51:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>l4m9ngf6n3njuu0swppsm4ogie2cg68</sha1>
      <text xml:space="preserve" bytes="248">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Grid|MenuLocation=Plot → Grid‏‎||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Icon</title>
    <ns>0</ns>
    <id>51426</id>
    <revision>
      <id>130323</id>
      <parentid>130322</parentid>
      <timestamp>2014-12-08T20:23:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sxsvue74lvglgmy5b2v5mv3rigia4sm</sha1>
      <text xml:space="preserve" bytes="1598">
==Plot Workbench== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Plot Save.png|32px|Plot Save|link=Plot Save]] [[Plot Save|Plot Save]]
 &lt;nowiki&gt;[[Image:Plot Save.png|32px|Plot Save|link=Plot Save]] [[Plot Save|Plot Save]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Plot Axes.png|32px|Plot Axes|link=Plot Axes]] [[Plot Axes|Plot Axes]]
 &lt;nowiki&gt;[[Image:Plot Axes.png|32px|Plot Axes|link=Plot Axes]] [[Plot Axes|Plot Axes]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Plot Series.png|32px|Plot Series|link=Plot Series]] [[Plot Series|Plot Series]]
 &lt;nowiki&gt;[[Image:Plot Series.png|32px|Plot Series|link=Plot Series]] [[Plot Series|Plot Series]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Plot Grid.png|32px|Plot Grid|link=Plot Grid]] [[Plot Grid|Plot Grid]]
 &lt;nowiki&gt;[[Image:Plot Grid.png|32px|Plot Grid|link=Plot Grid]] [[Plot Grid|Plot Grid]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Plot Legend.png|32px|Plot Legend|link=Plot Legend]] [[Plot Legend|Plot Legend]]
 &lt;nowiki&gt;[[Image:Plot Legend.png|32px|Plot Legend|link=Plot Legend]] [[Plot Legend|Plot Legend]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Plot Labels.png|32px|Plot Labels|link=Plot Labels]] [[Plot Labels|Plot Labels]]
 &lt;nowiki&gt;[[Image:Plot Labels.png|32px|Plot Labels|link=Plot Labels]] [[Plot Labels|Plot Labels]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Plot Positions.png|32px|Plot Positions|link=Plot Positions]] [[Plot Positions|Plot Positions]]
 &lt;nowiki&gt;[[Image:Plot Positions.png|32px|Plot Positions|link=Plot Positions]] [[Plot Positions|Plot Positions]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Key</title>
    <ns>0</ns>
    <id>51451</id>
    <revision>
      <id>131457</id>
      <parentid>130962</parentid>
      <timestamp>2014-12-13T21:24:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>kni66e8ldppi8teu0egbjyung9otk18</sha1>
      <text xml:space="preserve" bytes="1731">
==[[Plot Module|Plot Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Plot Save.png|16px|Plot Save|link=Plot Save]] [[Plot Save|Plot Save]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Save.png|16px|Plot Save|link=Plot Save]] [[Plot Save|Plot Save]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Plot Axes.png|16px|Plot Axes|link=Plot Axes]] [[Plot Axes|Plot Axes]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Axes.png|16px|Plot Axes|link=Plot Axes]] [[Plot Axes|Plot Axes]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Plot Series.png|16px|Plot Series|link=Plot Series]] [[Plot Series|Plot Series]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Series.png|16px|Plot Series|link=Plot Series]] [[Plot Series|Plot Series]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Plot Grid.png|16px|Plot Grid|link=Plot Grid]] [[Plot Grid|Plot Grid]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Grid.png|16px|Plot Grid|link=Plot Grid]] [[Plot Grid|Plot Grid]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Plot Legend.png|16px|Plot Legend|link=Plot Legend]] [[Plot Legend|Plot Legend]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Legend.png|16px|Plot Legend|link=Plot Legend]] [[Plot Legend|Plot Legend]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Plot Labels.png|16px|Plot Labels|link=Plot Labels]] [[Plot Labels|Plot Labels]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Labels.png|16px|Plot Labels|link=Plot Labels]] [[Plot Labels|Plot Labels]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Plot Positions.png|16px|Plot Positions|link=Plot Positions]] [[Plot Positions|Plot Positions]]}}
 &lt;nowiki&gt;{{KEY|[[File:Plot Positions.png|16px|Plot Positions|link=Plot Positions]] [[Plot Positions|Plot Positions]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Plot Labels</title>
    <ns>0</ns>
    <id>36972</id>
    <revision>
      <id>99329</id>
      <parentid>99328</parentid>
      <timestamp>2014-07-28T10:52:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5byd8s437b1hm5k0750o3oyyeyirj48</sha1>
      <text xml:space="preserve" bytes="252">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Labels|MenuLocation=Plot → Labels‏‎||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Legend</title>
    <ns>0</ns>
    <id>36977</id>
    <revision>
      <id>99336</id>
      <parentid>99335</parentid>
      <timestamp>2014-07-28T10:53:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6zoqatw62zemtt09a7ueblodfkca83p</sha1>
      <text xml:space="preserve" bytes="252">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Legend|MenuLocation=Plot → Legend‏‎||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Module</title>
    <ns>0</ns>
    <id>3142</id>
    <revision>
      <id>77478</id>
      <parentid>77477</parentid>
      <timestamp>2014-03-21T18:27:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tm1i8v7jrrguc8jrknog81l2x4e2n0k</sha1>
      <text xml:space="preserve" bytes="1323">
&lt;!--T:1--&gt;
The Plot module allows to edit and save output plots created from other modules and tools. With plot module you can edit easily the working area, the axes, labels, titles, styles, etc. Plot module is an abstraction of matplotlib conveniently addapted to FreeCAD.

==Tools== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
These are tools availables.
* [[Image:Plot_Save.png]] [[Plot_Save|Save plot]]: Saves the plot in several formats. You can select the output size and resolution too.
* [[Image:Plot_Axes.png]] [[Plot_Axes|Axes]]: Add, remove or edit plot axes.
* [[Image:Plot_Series.png]] [[Plot_Series|Series]]: Edit series title and styling.
* [[Image:Plot_Grid.png]] [[Plot_Grid|Grid]]: Show/hide grid.
* [[Image:Plot_Legend.png]] [[Plot_Legend|Legend]]: Show/hide legend.
* [[Image:Plot_Labels.png]] [[Plot_Labels|Labels]]: Edit labels.
* [[Image:Plot_Positions.png]] [[Plot_Positions|Positions]]: Set elements positions.

==Scripting== &lt;!--T:4--&gt;
Since Plot module is a layer over matplotlib, you are free to use all matplotlib commands over plot instances. See [[Scripting_examples|scripting examples]] section to see examples.

==Tutorial== &lt;!--T:5--&gt;
* [[Plot Basic tutorial]]
* [[Plot MultiAxes tutorial]]

&lt;!--T:6--&gt;
{{Docnav| | }}

&lt;!--T:7--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot MultiAxes tutorial</title>
    <ns>0</ns>
    <id>3250</id>
    <revision>
      <id>128838</id>
      <parentid>128837</parentid>
      <timestamp>2014-12-05T20:54:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>40f901lf4r5pars6w2xl0jypgt5eoum</sha1>
      <text xml:space="preserve" bytes="7115">
&lt;!--T:1--&gt;
Ensure to visit [[Plot_Basic_tutorial|basic tutorial]] before starting with this tutorial. In this tutorial we will learn how to create and edit a multiaxes plot. You can learn more about [[Plot_Module|Plot module here]].

&lt;!--T:2--&gt;
[[Image:Plot_MultiAxes_Example.png|600px|center|Multiaxes plot example]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Multiaxes plot example.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:3--&gt;
In previous image you can see the result that we aproximately will obtain. Following this tutorial you will learn:
* How to create a multiaxes Plot from Python Console.
* How to edit axes properties.
* How to control grid/legend when several axes is present.
* How to edit labels, titles and legend positions.

==Plotting data== &lt;!--T:4--&gt;
As we did in [[Plot_Basic_tutorial|previous tutorial]] we will use the Python console or [[Macros|macros]] in order to plot the data, with the difference that in this case we will plot the data in two different axes.

===Creating plot data=== &lt;!--T:5--&gt;
In this example we will plot 3 functions, the two ones used in [[Plot_Basic_tutorial|previous tutorial]], and another polynomial one. The fact is that the polynomial one will need new axes due to the variation range is different from all others. Next commands will create data arrays for us:

&lt;syntaxhighlight&gt;
 import math
 p = range(0,1001)
 x = [2.0*xx/1000.0 for xx in p]
 y = [xx**2.0 for xx in x]
 t = [tt/1000.0 for tt in p]
 s = [math.sin(math.pi*2.0*tt) for tt in t]
 c = [math.cos(math.pi*2.0*tt) for tt in t]
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
As ''x'' moves from 0 to 2, ''y'' function has a maximum value of 4, so if we try to plot this function with trigonometrical ones, at least one function will be truncated or bad scaled, then we need a multiaxes plot. Multiaxes plot in FreeCAD is oriented to get a plot with multiple axes, not to get multiple plots in same document.

===Drawing functions, adding new axes=== &lt;!--T:7--&gt;
We will draw polynomial function at main axes. If all your axes will have same size then is not relevant what function is ploted in what axes, but if your plot has axes with other size (as in this example), main axes must be the biggest one (because this axes have the white background). In order to do it we only need to launch a command

&lt;syntaxhighlight&gt;
 import Plot
 Plot.plot(x,y,r&quot;$x^2$&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
In this example we pass directly the series label for the legend. Note that the label string has the ''r'' prefix in order to avoid Python try to interpret special characters (''\'' symbol is used frecuently in [http://www.latex-project.org LaTeX] syntax).

&lt;!--T:9--&gt;
Now we can plot trigonometrical functions, creating new axes before. In [[Plot_Module|FreeCAD Plot module]] when you create new axes this axes are selected as active ones, so new plots will be associated to this axes.

&lt;syntaxhighlight&gt;
 Plot.addNewAxes()
 Plot.plot(t,s,r&quot;$\sin\left( 2 \pi t \right)$&quot;)
 Plot.plot(t,c,r&quot;$\cos\left( 2 \pi t \right)$&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
As you can see you plot has gone crazy, with axes ticks overlaped, curves of same color, etc. Now we needs to use [[Plot_Module|FreeCAD Plot module]] to fix this graph.

==Configuring plot== &lt;!--T:11--&gt;

===Configuring axes=== &lt;!--T:12--&gt;
[[Plot_Module|FreeCAD Plot module]] provides a tool in order to modify the properties of each axes.

&lt;!--T:13--&gt;
[[Image:Plot_Axes.png‎|center|Axes configuration tool icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Axes configuration tool icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:14--&gt;
The first thing that you can find in axes tool is the active axes selector. Since the active axes are the last one, active axes is placed at one. The axes tool, as labels tool, allows to set the active axes, allowing you to plot more data in the axes that you want (including add/remove axes). For the moment we will work over the selected axes, that are the associated to trigonometrical functions.

&lt;!--T:15--&gt;
In the dimensions sliders, we will move left horizontal and bottom vertical sliders (try to emulate example) in order to reduce axes size. Then we can set the axes alignement, changing it to top and right, and setting and small offset of two units.

===Configuring series=== &lt;!--T:16--&gt;
Set series properties as we did in [[Plot_Basic_tutorial|previous tutorial]].

===Showing grid and legend=== &lt;!--T:17--&gt;
Grid and legend is shown and hide with the same tools that used in [[Plot_Basic_tutorial|previous tutorial]], but in this case the behaviour is a little bit different due to the presence of two different axes.

&lt;!--T:18--&gt;
Regarding grid lines, you can show lines for each axes set, for example, if you try to show grid now you will show only the grid of the trigonometrical functions, so in order to show the grid of polynomial function plot you needs to change active axes to 0 (using axes configuration tool) before using grid tool another time (Is possible that you need to press two times the tool).

&lt;!--T:19--&gt;
Regarding legend, the legend will be the same for both axes, so you can choose the axes that you want in order to show the legend, but is strongly recommended to use the biggest ones (0 in this example) because position will be refered to this axes coordinates. If you show the legend you can see that is really bad placed, we will fix this problem later.

===Setting axes labels=== &lt;!--T:20--&gt;
You can set axes labels with same tool used in [[Plot_Basic_tutorial|previous tutorial]], with the difference that now you have more axes. Since axes labels is ussually set as one per axis, is not a significant difference, but [[Plot_Module|FreeCAD Plot module]] allow you to set a title by axes too. In this case we only wants to set title to main axes, so set:

&lt;!--T:21--&gt;
'''Axes 0:'''
* Title = Multiaxes example
* X Label = $x$
* Y Label = $\mathrm{f} \left( x \right)$
'''Axes 1:'''
* X Label = $t$
* Y Label = $\mathrm{f} \left( t \right)$

&lt;!--T:22--&gt;
Set also 20 to fontsize for all but title, that uses a fontsize of 24. As happens with legend, title is bad placed, interseting with second axes set, so we need to solve both problems.

===Setting elements position=== &lt;!--T:23--&gt;
[[Plot_Module|FreeCAD Plot module]] provides a tool in order to set the position of several plot elements, as titles, labels or legend.

&lt;!--T:24--&gt;
[[Image:Plot_Positions.png‎|center|Position editor icon]]
&lt;center&gt;&lt;span style=&quot;font-variant:small-caps&quot;&gt;Position editor icon.&lt;/span&gt;&lt;/center&gt;

&lt;!--T:25--&gt;
When you run the tool you see a list with all the editable elements. Title elements, as well as legend, can be moved in both directions, since axes labels can be moved only on the axes direction. Select title of axes 0 and move it to (0.24,1.01), then select legend and move it to a better position. You can increase legend labels fontsize too.

==Saving plot== &lt;!--T:26--&gt;
Now you can save your work. See [[Plot_Basic_tutorial|previous tutorial]] if you don't remeber how to do it.

&lt;!--T:27--&gt;
[[Category:Tutorials]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Positions</title>
    <ns>0</ns>
    <id>36987</id>
    <revision>
      <id>99350</id>
      <parentid>99349</parentid>
      <timestamp>2014-07-28T11:50:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>f68c0dy4ka2h6lx4s5e80s07ak6re5l</sha1>
      <text xml:space="preserve" bytes="252">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Positions|MenuLocation=Plot → Positions||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Plot Save</title>
    <ns>0</ns>
    <id>3185</id>
    <revision>
      <id>14757</id>
      <parentid>14734</parentid>
      <timestamp>2012-11-21T21:35:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>/it</comment>
      <sha1>rato7o97z0ttgxkc2dea614juprpdzb</sha1>
      <text xml:space="preserve" bytes="1429">{{GuiCommand|Name=Plot Save|Workbenches=[[Plot Module|Plot]]|MenuLocation=Plot -&gt; Save plot}}

==Description==

Plot save tool saves the active plot at desired location. With this tool you can also select the size and resolution of output image.

[[Image:Plot_Trigonometric_Example.png|600px]]

==How to use==

Select the plot tab that you want to save, and run this tool. Use path selector button in order to show a file dialog where you can choose the output image place and format.

[[Image:Plot_Save_Path.png‎|Path selection button]]
&lt;span style=&quot;font-variant:small-caps&quot;&gt;Path selection button&lt;/span&gt;

==Options==

* '''File path''': You can set the output image path (including format extension) inserting it at text line too.
* '''Size''': You can specify output image width and height (inches).
* '''dpi''': You can set the image resolution (Dots Per Inch). Final resolution (in pixels) will be the multiplication of width and height by dpi.

==Scripting==

Plot save tool can be used in [[macros]] and from Python console by using the following function:

'''save(str, (float, float), float)''' : Saves the plot at path, width the size specified in inches, and the resolution specified in Dots Per Inch.

Example:

 import Plot
 Plot.save(&quot;~/example.pdf&quot;, (12.8, 9.6), 50)

That will save a pdf image of 12.8x9.6 inches, with 640x480 pixels.

{{languages | {{es|Plot Save/es}} {{fr|Plot Save/fr}} {{it|Plot Save/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Plot Series</title>
    <ns>0</ns>
    <id>36992</id>
    <revision>
      <id>99356</id>
      <parentid>99355</parentid>
      <timestamp>2014-07-28T11:50:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>nxgc2tjh4kazux8h1p1yy4ejsc1f3ki</sha1>
      <text xml:space="preserve" bytes="252">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Plot Series|MenuLocation=Plot → Series‏‎||Workbenches=[[Plot Module|Plot]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Points Icon</title>
    <ns>0</ns>
    <id>51423</id>
    <revision>
      <id>130341</id>
      <parentid>130340</parentid>
      <timestamp>2014-12-08T20:29:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>tvkpeex6hughoqgonhxb5gnif3cnmxp</sha1>
      <text xml:space="preserve" bytes="203">
==[[Points Module|Points Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Points Key</title>
    <ns>0</ns>
    <id>51445</id>
    <revision>
      <id>131460</id>
      <parentid>130975</parentid>
      <timestamp>2014-12-13T21:25:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>pnetiieuy7ckbfjd6rwdiquq8s6p5cz</sha1>
      <text xml:space="preserve" bytes="225">
==[[Points Module|Points Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Points Module</title>
    <ns>0</ns>
    <id>384</id>
    <revision>
      <id>79636</id>
      <parentid>79635</parentid>
      <timestamp>2014-04-18T20:59:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>00t5r2ym0uv9sjdidiz7dlz8qfyc17z</sha1>
      <text xml:space="preserve" bytes="251">
&lt;!--T:1--&gt;
The Points module is made to give you specific tools for working with [http://en.wikipedia.org/wiki/Point_cloud point clouds]. It is still in development.



&lt;!--T:2--&gt;
[[Category:User Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Points Workbench</title>
    <ns>0</ns>
    <id>382</id>
    <redirect title="Points Module" />
    <revision>
      <id>2006</id>
      <timestamp>2009-04-13T01:24:51Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirecting to [[Points Module]]</comment>
      <sha1>1pe73diiewoz6qc9v83g523kmpqxbya</sha1>
      <text xml:space="preserve" bytes="27">#Redirect [[Points_Module]]</text>
    </revision>
  </page>
  <page>
    <title>Power users hub</title>
    <ns>0</ns>
    <id>116</id>
    <revision>
      <id>124971</id>
      <parentid>104562</parentid>
      <timestamp>2014-11-24T20:51:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>aydf69vsmptjkgbf8334bw3a68ls9gh</sha1>
      <text xml:space="preserve" bytes="7854">

&lt;!--T:1--&gt;
[[Image:Crystal_Clear_app_terminal.png|right|150]]

&lt;!--T:2--&gt;
This is the place to come if you want to have a deeper insight into FreeCAD. Here you can learn about customizing FreeCAD for your needs. 

&lt;!--T:3--&gt;
These pages are in early stage of development.  If you can't find the information you are looking for, or have found useful information somewhere we have not linked to, then please leave a comment on [[Talk:Power_users_hub|the talk page]], or, why not? [[Help_FreeCAD| Add some more content here yourself!]]

&lt;!--T:4--&gt;
One of the nicest features of FreeCAD is that you can script and extend it extremely far without the need to compile anything or touch the source code. All the scripting part is done in [http://en.wikipedia.org/wiki/Python_(programming_language) Python], a very powerful but simple programming language. With simple Python scripts, you have total access to about any part of FreeCAD. For example, you can:
* '''Create and modify geometry''': Is there a special object you need that's not present in the default FreeCAD installation? You can easily create a new object type, either from scratch or by adapting an existing type.
* '''Create custom tools and commands''': At the moment, FreeCAD already has extensive functionality, but there aren't many convenient tools and commands for the final user yet. But it is already easy to create your own sets of tools.
* '''Modify the interface''': The FreeCAD user interface is still very basic at this stage. But everything is there for you to extend it to your needs. You can, for example, create toolbars to put your own tools, create special panels for interacting with your tools, etc.
*'''Modify the scene representation''': FreeCAD has separate processes for building up and computing the geometry and displaying that geometry on your screen. You have full access to the way the scene contents are displayed on screen, therefore you can modify that representation, interact with it, or add all kinds of custom behaviours and screen widgets, like information, draggers, anchors or temporary entities.

== Customizing FreeCAD == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* [[Interface Customization]]: Starting with the beginning: Toolbars and shortcuts
* [[Macros|Working with Macros]]: Easily record often repeated tasks or Python code

== Scripting in FreeCAD == &lt;!--T:7--&gt;

===General=== &lt;!--T:8--&gt;
* [[Introduction to Python]] - See also other Python tutorials at the bottom of this page
* [[Python scripting tutorial|FreeCAD scripting tutorial]] - A general look at python scripting in FreeCAD
* [[FreeCAD Scripting Basics]]: Well, the basics...
* [[Gui Command]] : Adding custom commands to the GUI
* Using mixed [[Units]] in FreeCAD

=== Modules === &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
As the functionality of FreeCAD is separated in Modules which deal with special data types and applications. FreeCAD has built-in modules and Extension Modules (plug-ins). Once plugin modules are installed, they become availible to you as easily as the built-in modules. The modules described below are the default modules, includeed in every FreeCAD installation.

&lt;!--T:30--&gt;
* The [[Builtin modules]] are the principal FreeCAD modules. They contain tools for manipulating general FreeCAD configurations, documents and their contents.

===Working with Meshes=== &lt;!--T:9--&gt;
* [[Mesh Scripting]]: How to interact with the [[Mesh Module]]

===Working with Parts=== &lt;!--T:10--&gt;
* [[Part Module|The Part Module]]: How [http://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology] tools and structure is used in FreeCAD
* [[Topological data scripting]]: How to interact with the Part Module
* [[PythonOCC]]: How to unleash the whole Open CASCADE power
* [[Mesh to Part]]: Converting between object types

===Accessing the Coin scenegraph=== &lt;!--T:11--&gt;
* [[Scenegraph|The Coin/Inventor scenegraph]]: How the FreeCAD scene representation works
* [[Pivy]]: How to access and modify the scenegraph

===Controlling the Qt interface=== &lt;!--T:12--&gt;
* [[PyQt]]: How to access the interface, and modify its contents
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] in another Qt application with PyQt

===Working with parametric objects=== &lt;!--T:13--&gt;
* [[Scripted objects]]: How to make 100% Python-scripted objects in FreeCAD
* [[Drawing Module]]: Automating the 3D-to-2D process

===Examples=== &lt;!--T:14--&gt;
* [[Code snippets]] : A collection of pieces of FreeCAD Python code, to serve as ingredients in your scripts...
* [[Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD]]: How to import FreeCAD as a Python module in other applications
* The [[Draft Module]] adds basic 2d drawing functions to freecad. It is written entirely in Python, so it can be a good example if you want to write your own modules.
* [[FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is also included in the Draft module.

== API Functions == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
The complete API description can be found [[:Category:API|here]]. Note that it can be incomplete, since we still didn't find a way to include it automatically on this wiki. For more accurate information, browse the modules directly from FreeCAD.

== Advanced modification == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
* [[Start up and Configuration]]: Startup and command line options
* [[Install on Windows]]: Using the windows installer
* [[CompileOnWindows|Compiling FreeCAD on Windows]] and [[CompileOnUnix|Compiling FreeCAD on Unix]]
* [[Branding]]: Simple modifications you can do to the source code to change some aspects of FreeCAD
* [[Extra python modules]] : Extend the FreeCAD python interpreter with these powerful modules!

== Python tutorials == &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
These are good generic tutorials, not specific to FreeCAD, that might interest you if you are totally new to python.

&lt;!--T:21--&gt;
'''Python'''
* [http://docs.python.org/tut/tut.html Official python tutorial] - A very complete tutorial for discovering python
* [http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python Non-programmer tutorial for python] - an excellent wikibook
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python for newbies] - one big tutorial covering all the basics

&lt;!--T:22--&gt;
'''PyQt''' - How to create and manage FreeCAD's Qt UI interface from python
* [http://www.cs.usfca.edu/~afedosov/qttut/ Basic PyQt tutorial] : A simple and short linux-based tutorial that will explain how to work with PyQt and Qt Designer
* [http://zetcode.com/tutorials/pyqt4/firstprograms/ First programs in PyQt4] : A platform-agnostic tutorial showing the interns of python + qt
* [http://vizzzion.org/?id=pyqt programming Qt applications in python] : A more in-depth tutorial covering all the process of working with qt and python.

&lt;!--T:23--&gt;
'''Pivy''' - How to interact with FreeCAD's 3D scenes
* [http://pivy.coin3d.org/documentation/pycon Basic Pivy tutorial] : A very simple tutorial form the official Pivy site
* [http://www.google.com.br/url?sa=U&amp;start=3&amp;q=http://studierstube.icg.tu-graz.ac.at/doc/pdf/PivyStudierstubeTutorial.pdf&amp;ei=XyC1Sc2wOeCKmQem_eHnBQ&amp;usg=AFQjCNEYhb-0DcUc6OxFVijAe1epBb-4aA Introducing Pivy into studierstube] : A document that is not really a tutorial, but that illustrates well how Pivy works

== Community projects == &lt;!--T:24--&gt; 

&lt;!--T:25--&gt;
On the [[FreeCAD Community Portal|Community portal]], you can find other FreeCAD-based projects run by the FreeCAD users community. If you are starting a new FreeCAD project, be sure to list it there! We also have a page with things you can do if you would like to [[Help FreeCAD]].

&lt;!--T:27--&gt;
[[Category:Hubs]]
[[Category:Poweruser Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Preferences Editor</title>
    <ns>0</ns>
    <id>373</id>
    <revision>
      <id>79853</id>
      <parentid>79852</parentid>
      <timestamp>2014-04-19T20:17:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ebr7zajtp57vlhtzubj60b9wdaml35y</sha1>
      <text xml:space="preserve" bytes="1615">
&lt;!--T:1--&gt;
The preferences system of FreeCAD is located in the Edit menu -&gt; Preferences. 

&lt;!--T:2--&gt;
FreeCAD functionality is divided into different modules, each module being responsible for the working of a specific [[Workbenches|workbench]]. FreeCAD also uses a concept called late loading, which means that components are loaded only when they are needed. You may have noticed that when you select a workbench on the FreeCAD toolbar, that workbench and all its components get loaded at that moment. This includes its preferences settings.

&lt;!--T:3--&gt;
[[Image:Screenshot_preferences01.jpg]]

&lt;!--T:4--&gt;
The general preferences settings

&lt;!--T:5--&gt;
When you start FreeCAD with no workbench loaded, you will then have a minimal preferences window. As you load additional modules, new sections will appear in the preferences window, allowing you to configure the details of each workbench.

&lt;!--T:6--&gt;
Without any module loaded, you will have access to two configuration sections, responsible for the general application settings and for the display settings.

&lt;!--T:7--&gt;
[[Image:Screenshot_preferences02.jpg]]

&lt;!--T:8--&gt;
The display settings

&lt;!--T:9--&gt;
FreeCAD is always in constant evolution, so the contents of those screens might differ from the above screenshots. The settings are usually self-explanatory, so you shouldn't have any difficulty configuring FreeCAD to your needs.

&lt;!--T:12--&gt;
The Draft module has its [[Draft Preferences|preferences]] screen

&lt;!--T:10--&gt;
{{docnav|Document structure|Interface Customization}}

&lt;!--T:11--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Premiers pas</title>
    <ns>0</ns>
    <id>850</id>
    <revision>
      <id>108086</id>
      <parentid>91012</parentid>
      <timestamp>2014-09-01T19:46:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Preselection</title>
    <ns>0</ns>
    <id>117</id>
    <revision>
      <id>102749</id>
      <parentid>84412</parentid>
      <timestamp>2014-08-03T16:20:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>ProjectShape</title>
    <ns>0</ns>
    <id>11087</id>
    <revision>
      <id>91797</id>
      <parentid>91794</parentid>
      <timestamp>2014-06-17T21:12:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Project template</title>
    <ns>0</ns>
    <id>394</id>
    <revision>
      <id>122804</id>
      <parentid>121935</parentid>
      <timestamp>2014-11-15T17:56:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>p296wo7ydw97j942cneukk10na2qk2m</sha1>
      <text xml:space="preserve" bytes="4595">
&lt;!--T:1--&gt;
This template is the guideline for a FreeCAD development project. It follows the rules of the [http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology Getting Things Done (GTD)] process. The projects are collected in the [[Development roadmap]].

&lt;!--T:2--&gt;
''Lets start by looking at the Natural Planning Model. The Natural Planning Model really is nothing new. It is not some fantastic new model devised by David Allen to help us plan and manage our projects. it is however, the planning model that is recommended by David in his Getting Things Done book. The Natural Planning Model is based upon the planning that we do on a daily basis, using just our brains. For example, think of how many tasks we plan on a day by day basis that we do not even bother to write down as these are normally classed as mundane tasks. For example, getting dressed, or driving to work. All of these can be thought of tasks but we just go ahead and plan them without any thought whatsoever. We utilize the planning aspects of our brain that are conditioned for this natural type of planning.''

&lt;!--T:3--&gt;
''You mind goes through five steps to accomplish virtually any task. These five steps are:''


== Purpose and principles == &lt;!--T:4--&gt;
''The first step in the model is to define '''purpose and principles'''. Think about the last time you booked a family holiday. There is always a purpose for the holiday. This could be to take a well earned break from work, to relax and spend quality time with your spouse and children, or simply to go and see a specific tourist attraction whilst on your holiday. Whatever the reason, there will have been purpose and principles for your trip. You don’t just get up one day and go on holiday, you implement stage one of the natural planning model and this is to have a purpose for the trip.''

== Outcome == &lt;!--T:5--&gt;
''The second step is '''outcome visioning'''. Once you had defined a purpose and the principle for your holiday, the next thing you will have done is to have a vision of the outcome, in other words, where do you want to go, when, and who with? This is classed as outcome visioning as you are thinking about the outcome of your holiday and making mental notes about what you want the outcome to be.''

== Brainstorming == &lt;!--T:6--&gt;
''The third step is '''brainstorming'''. This brainstorming is normally done within your mind, and also other people are usually included when the project or decision impacts upon them. For example, lets say you think about the Maldives for your holiday, but you are going in June. The brainstorming aspect will look at this and probably decide that as June is the rainy season in the Maldives, it may not be the best time to visit. This is a naturally creative aspect of your brain that helps narrow down the vision of the outcome into a definite decision. I say other people are included because for projects such as planning a holiday, you also have to take other peoples viewpoints into consideration. I am sure your spouse would have something to say if you booked the holiday with consulting, and brainstorming their viewpoints on the suitability of the trip and destination choice.
''

== Organizing == &lt;!--T:7--&gt;
''The next, and fourth step is '''organizing'''. Once you have generated your ideas about the project, or holiday in this case, you start to organize these ideas. For example, you may have thought about the travel agent to use for the booking, or whether to book direct, if the in-laws would like to come on the vacation also to double as baby sitters, etc. Your mind normally sorts and organizes these thoughts automatically.''

== Next actions == &lt;!--T:8--&gt;
''The last, and fifth step is to '''identify and set the next actions'''. The GTD methodology covers that the best way to get a task done, is to decide and set the next actions. We do not do tasks, we do next actions. So the best way to get your holiday booked is to decide what the next actions are. These normally would be items such as, look up the resort on the Internet, check online travel comparison sites for cheap flights and accommodation, call in and see a travel agent for their price and recommendation within the resort. Again, I would be surprised if any of you would take the time and effort to write these next actions down, but also, I would be surprised if any of you forgot these next actions. it is funny how our mind has a great way of remembering projects assigned and planning using the Natural Planning Method.''

&lt;!--T:9--&gt;
[[Category:Roadmap]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Project utility</title>
    <ns>0</ns>
    <id>10998</id>
    <revision>
      <id>104424</id>
      <parentid>73318</parentid>
      <timestamp>2014-08-12T20:36:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7veirb16q7rzzad96gtvrs1jfzy76gn</sha1>
      <text xml:space="preserve" bytes="694">&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Project utility|MenuLocation=Tools → Project utility|Shortcut=None|Workbenches=All|SeeAlso=...}}

==Description== &lt;!--T:2--&gt;
The &quot;Project utility&quot; is a tool to fix an [[Fcstd_file_format|FCStd]] file in case it's broken for any reason. Since an FCStd file is a zip archive the tool offers a function to extract a project, then the user can e.g. make changes on the [http://en.wikipedia.org/wiki/XML Document.xml] (or whatever he wants to do) and then he can build again a valid FCStd file.


&lt;!--T:3--&gt;
[[Image:Project_utility_en.png|‎]]
{{clear}}

==Links== &lt;!--T:4--&gt;
[[File_Format_FCStd|File Format FCStd]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Property</title>
    <ns>0</ns>
    <id>118</id>
    <revision>
      <id>70368</id>
      <parentid>70367</parentid>
      <timestamp>2014-02-20T20:29:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>t0idtpkip8beimil7vml1f3ee0uoji4</sha1>
      <text xml:space="preserve" bytes="175">
&lt;!--T:1--&gt;
{{Property}}

&lt;!--T:2--&gt;
{{docnav|Interface Customization|Workbenches}}

&lt;!--T:3--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Property editor</title>
    <ns>0</ns>
    <id>4180</id>
    <revision>
      <id>45494</id>
      <parentid>45493</parentid>
      <timestamp>2013-11-29T22:30:39Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>hf0aypqk6nqx3gbysmmol3mke1pjjzn</sha1>
      <text xml:space="preserve" bytes="1599">
==Overview== &lt;!--T:1--&gt;
The Property Editor is one of the most important tools of FreeCAD and a main element while working with FreeCAD.
The Property Editor allows managing the properties of the objects in your document.

&lt;!--T:2--&gt;
Generally the Property Editor is intended to deal with just one object at one time. The values shown in the Property Editor belong to the active object of your active document (be careful of which document is really active if you work on multiple documents). If you did not select any element (or there are no elements), the Property Editor will be blank.

&lt;!--T:3--&gt;
Not all the properties can be modified in any moment. Depending on the specific status, some properties will be shown as read-only.

&lt;!--T:4--&gt;
The properties of an object are grouped in View properties and Data properties, and shown under different tabs.

&lt;!--T:5--&gt;
Different objects may have different properties. However, some properties are common among all objects, for instance the position and the rotation of an object are Data properties that can be manipulated.

==Property definition== &lt;!--T:6--&gt;
{{Property}}

==Function== &lt;!--T:7--&gt;
The Property Editor has two tabs: the View tab and the Data tab.
* The View tab provides access to the properties related to the visual display of the object
* The Data tab allows modification of the physical parameters of an object.

==Example of Part object properties== &lt;!--T:8--&gt;
{{PartDesign Placement}}


&lt;!--T:9--&gt;
{{docnav|Interface Customization|Workbenches}}

&lt;!--T:10--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>Propriétés des objets</title>
    <ns>0</ns>
    <id>863</id>
    <revision>
      <id>108438</id>
      <parentid>91013</parentid>
      <timestamp>2014-09-05T19:51:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>PyQt</title>
    <ns>0</ns>
    <id>578</id>
    <revision>
      <id>132884</id>
      <parentid>132848</parentid>
      <timestamp>2014-12-22T21:33:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>notes divided - the translation does not work</comment>
      <sha1>5x7z4hkbkpe5nimkpiyzmd0ojk0cnhn</sha1>
      <text xml:space="preserve" bytes="4574">
&lt;!--T:14--&gt;
{{Note|PySide|Recently, FreeCAD has switched internally to use [http://qt-project.org/wiki/PySide PySide] instead of PyQt. That change was mainly done because of the licenses, PySide having an LGPL license which is more compatible with FreeeCAD. Other than that, PySide works exactly the same way as PyQt, and in FreeCAD you can usually use any of them, as you prefer. If you choose to use PySide, just replace all &quot;PyQt&quot; in the example code below with &quot;PySide&quot;. See [http://qt-project.org/wiki/Differences_Between_PySide_and_PyQt Differences Between PySide and PyQt]}}

&lt;!--T:16--&gt;
[http://en.wikipedia.org/wiki/PyQt PyQt] is a python module that allows python applications to create, access and modify [http://en.wikipedia.org/wiki/Qt_(toolkit) Qt] applications. You can use it for example to create your own Qt programs in python, or to access and modify the interface of a running qt application, like FreeCAD. 

&lt;!--T:17--&gt;
By using the PyQt module from inside FreeCAD, you have therefore full control over its interface. You can for example:
* Add your own panels, widgets and toolbars
* Add or hide elements to existing panels
* Change, redirect or add connections between all those elements

&lt;!--T:18--&gt;
PyQt has an extensive [http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/classes.html API documentation], and there are many tutorials on the net to teach you how it works.

&lt;!--T:19--&gt;
If you want to work on the FreeCAD interface, the very first thing to do is create a reference to the FreeCAD main window:

{{Code|code=
import sys
from PySide import QtGui ,QtCore 
app = QtGui.qApp
mw = app.activeWindow()
}}

&lt;!--T:20--&gt;
Then, you can for example browse through all the widgets of the interface:

{{Code|code=
for child in mw.children():
   print 'widget name = ', child.objectName(), ', widget type = ', child
}}

&lt;!--T:21--&gt;
The widgets in a Qt interface are usually nested into &quot;containers&quot; widgets, so the children of our main window can themselves contain other children. Depending on the widget type, there are a lot of things you can do. Check the API documentation to see what is possible.

&lt;!--T:22--&gt;
Adding a new widget, for example a dockWidget (which can be placed in one of FreeCAD's side panels) is easy:

{{Code|code=
myWidget = QtGui.QDockWidget()
mw.addDockWidget(QtCore.Qt.RightDockWidgetArea,myWidget)
}}

&lt;!--T:23--&gt;
You could then add stuff directly to your widget:

{{Code|code=
myWidget.setObjectName(&quot;my Nice New Widget&quot;)
myWidget.resize(QtCore.QSize(300,100)) # sets size of the widget
label = QtGui.QLabel(&quot;Hello World&quot;, myWidget) # creates a label
label.setGeometry(QtCore.QRect(50,50,200,24)) # sets its size
label.setObjectName(&quot;myLabel&quot;) # sets its name, so it can be found by name
}}

&lt;!--T:24--&gt;
But a preferred method is to create a UI object which will do all of the setup of your widget at once. The big advantage is that such an UI object can be [[Dialog creation|created graphically]] with the Qt Designer program. A typical object generated by Qt Designer is like this:

{{Code|code=
class myWidget_Ui(object):
  def setupUi(self, myWidget):
    myWidget.setObjectName(&quot;my Nice New Widget&quot;)
    myWidget.resize(QtCore.QSize(300,100).expandedTo(myWidget.minimumSizeHint())) # sets size of the widget

    self.label = QtGui.QLabel(myWidget) # creates a label
    self.label.setGeometry(QtCore.QRect(50,50,200,24)) # sets its size
    self.label.setObjectName(&quot;label&quot;) # sets its name, so it can be found by name

  def retranslateUi(self, draftToolbar): # built-in QT function that manages translations of widgets
    myWidget.setWindowTitle(QtGui.QApplication.translate(&quot;myWidget&quot;, &quot;My Widget&quot;, None, QtGui.QApplication.UnicodeUTF8))
    self.label.setText(QtGui.QApplication.translate(&quot;myWidget&quot;, &quot;Welcome to my new widget!&quot;, None, QtGui.QApplication.UnicodeUTF8))
}}

&lt;!--T:25--&gt;
To use it, you just need to apply it to your freshly created widget like this:

{{Code|code=
app = QtGui.qApp
FCmw = app.activeWindow()
myNewFreeCADWidget = QtGui.QDockWidget() # create a new dckwidget
myNewFreeCADWidget.ui = myWidget_Ui() # load the Ui script
myNewFreeCADWidget.ui.setupUi(myNewFreeCADWidget) # setup the ui
FCmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,myNewFreeCADWidget) # add the widget to the main window
}}

&lt;!--T:26--&gt;
{{docnav|Pivy|Scripted objects}}

&lt;!--T:27--&gt;
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>PySide</title>
    <ns>0</ns>
    <id>28159</id>
    <revision>
      <id>108087</id>
      <parentid>89284</parentid>
      <timestamp>2014-09-01T19:46:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Python</title>
    <ns>0</ns>
    <id>119</id>
    <revision>
      <id>108791</id>
      <parentid>981</parentid>
      <timestamp>2014-09-09T19:50:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>PythonOCC</title>
    <ns>0</ns>
    <id>566</id>
    <revision>
      <id>84426</id>
      <parentid>84425</parentid>
      <timestamp>2014-05-18T19:50:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7f05r4d449elohn57rztb1df6x2y7zh</sha1>
      <text xml:space="preserve" bytes="1039">
&lt;!--T:1--&gt;
[http://www.pythonocc.org/ PythonOCC] is a pretty young and active project that aims at binding the whole range of OpenCasCADe functions into a python module. This is a very different approach than FreeCAD, where only certain components of OpenCasCade are used, resulting in a much simpler structure.

&lt;!--T:2--&gt;
PythonOCC, on the other hand, since it provides you access to all of OCC classes and functions, is very complex, but also very powerful. It is therefore a very fine addition to FreeCAD. When you are limited by FreeCAD's available OCC functionality in your python scripts, it's time to load pythonOCC.

&lt;!--T:3--&gt;
Currently in the Part module we have the methods: '''Part.__toPythonOCC__()''' and '''Part.__fromPythonOCC__()''' to exchange TopoDS_Shape entities to/from pythonOCC. This allows to use the full power of OCC in python (using pythonocc) and then put the resulting shapes back to FreeCAD.

&lt;!--T:4--&gt;
[[Category:Hubs]]
[[Category:Poweruser_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Python scripting tutorial</title>
    <ns>0</ns>
    <id>1330</id>
    <revision>
      <id>116928</id>
      <parentid>116927</parentid>
      <timestamp>2014-11-03T17:58:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8pbkb5ait11x522r8cqo1nxg3ukuycj</sha1>
      <text xml:space="preserve" bytes="18156">
&lt;!--T:1--&gt;
[http://en.wikipedia.org/wiki/Python_%28programming_language%29 Python] is a programming language, very simple to use and very fast to learn. It is open-source, multi-platform, and can be used alone for a wide array of things, from programming simple shell scripts to very complex programs. But one of its most widespread uses is as a scripting language, since it is easy to embed in other applications. That's exactly how it is used inside FreeCAD. From the python console, or from your custom scripts, you can pilot FreeCAD, and make it perform very complex actions for which there is still no graphical user interface tool.

&lt;!--T:2--&gt;
For example, from a python script, you can:
* create new objects
* modify existing objects
* modify the 3D representation of those objects
* modify the FreeCAD interface

&lt;!--T:3--&gt;
There are also several different ways to use python in FreeCAD:
* From the [[FreeCAD Scripting Basics|FreeCAD python interpreter]], where you can issue simple commands like in a &quot;command line&quot;-style interface
* From [[macros]], which are a convenient way to quickly add a missing tool to the FreeCAD interface
* From external scripts, which can be used to program much more complex things. like entire [[Workbenches]].

&lt;!--T:4--&gt;
In this tutorial, we'll work on a couple of simple examples to get you started, but there is also much more [[Power users hub|documentation about python scripting]] available on this wiki. If you are totally new to python and want to understand how it works, we also have a basic [[introduction to Python]].

&lt;!--T:5--&gt;
'''Important!''' Before proceeding with Python scripting, go to Edit-&gt;Prefences-&gt;General-&gt;Output window and check 2 boxes:
* Redirect internal Python output to report view
* Redirect internal Python errors to report view
Then go to View-&gt;Views and check:
* Report view
This will save you a lot of aggravation!

== Writing python code == &lt;!--T:6--&gt;
There are two easy ways to write python code in FreeCAD: From the python console (available from the View -&gt; Views -&gt; Python console menu) or from the Macro editor (Tools -&gt; Macros). In the console, you write python commands one by one, which are executed when you press return, while the macros can contain a more complex script made of several lines, which is executed only when the macro is executed.

&lt;!--T:7--&gt;
[[Image:Screenshot_pythoninterpreter.jpg|center|frame|The FreeCAD python console]]

&lt;!--T:8--&gt;
In this tutorial, you will be able to use both methods, either by copying/pasting each line one by one in the python console and pressing {{KEY|Return}} after each line, or by copying/pasting the entire code in a new Macro window.

== Exploring FreeCAD == &lt;!--T:9--&gt;
Let's start by creating a new empty document:


&lt;syntaxhighlight&gt;
doc = FreeCAD.newDocument()
&lt;/syntaxhighlight&gt;


&lt;!--T:10--&gt;
If you type this in the FreeCAD python console, you will notice that as soon as you type &quot;FreeCAD.&quot;, a windows pops up, allowing to quickly autocomplete the rest of your line. Even better, each entry in the autocomplete list has a tooltip explaining what it does. This makes it very easy to explore the functionality available. Before choosing &quot;newDocument&quot;, have a look at the other options available.

&lt;!--T:11--&gt;
[[Image:Screenshot_classbrowser.jpg|center|frame|The autocomplete mechanism of the FreeCAD python console]]

&lt;!--T:12--&gt;
Now our new document will be created. This is similar to pressing the &quot;new document&quot; button on the toolbar. In fact, most buttons in FreeCAD do nothing else than executing a line or two of python code. Even better, you can set an option in {{MenuCommand|Edit-&gt;Preferences-&gt;General-&gt;Macro}} to &quot;show script commands in python console&quot;. This will print in the console all python code executed when you press buttons. Very useful to learn how to reproduce actions in python.

&lt;!--T:13--&gt;
Now let's get back to our document. Let's see what we can do with it:


&lt;syntaxhighlight&gt;
doc.
&lt;/syntaxhighlight&gt;


&lt;!--T:14--&gt;
Explore the available options. Usually names that begin with a capital letter are attributes, they contain a value, while names that begin with small letter are functions (also called methods), they &quot;do something&quot;. Names that begin with an underscore are usually there for the internal working of the module, and you shouldn't care about them. Let's use one of the methods to add a new object to our document:


&lt;syntaxhighlight&gt;
box = doc.addObject(&quot;Part::Box&quot;,&quot;myBox&quot;)
&lt;/syntaxhighlight&gt;


&lt;!--T:15--&gt;
Nothing happens. Why? Because FreeCAD is made for the big picture. One day, it will work with hundreds of complex objects, all depending one from another. Making a small change somewhere could have a big impact, you may need to recalculate the whole document, which could take a long time... For that reason, almost no command updates the scene automatically. You must do it manually:


&lt;syntaxhighlight&gt;
doc.recompute()
&lt;/syntaxhighlight&gt;


&lt;!--T:16--&gt;
See? Now our box appeared! Many of the buttons that add objects in FreeCAD actually do 2 things: add the object, and recompute. If you turned on the &quot;show script commands in python console&quot; option above, try now adding a sphere with the GUI button, you'll see the two lines of python code being executed one after the other.

&lt;!--T:17--&gt;
What about the &quot;Part::Box&quot; will you ask? How can I know what other kind of objects can be added? It's all here:


&lt;syntaxhighlight&gt;
doc.supportedTypes()
&lt;/syntaxhighlight&gt;


&lt;!--T:18--&gt;
Now let's explore the contents of our box:


&lt;syntaxhighlight&gt;
box.
&lt;/syntaxhighlight&gt;


&lt;!--T:19--&gt;
You'll immediately see a couple of very interesting things such as:


&lt;syntaxhighlight&gt;
box.Height
&lt;/syntaxhighlight&gt;


&lt;!--T:20--&gt;
This will print the current height of our box. Now let's try to change that:


&lt;syntaxhighlight&gt;
box.Height = 5
&lt;/syntaxhighlight&gt;


&lt;!--T:21--&gt;
If you select your box with the mouse, you'll see that in the properties panel, in the &quot;Data&quot; tab, our &quot;Height&quot; property appears. All properties of a FreeCAD object that appear there (and also in the &quot;View&quot; tab, more about that later), are directly accessible by python too, by their names, like we did with the &quot;Height&quot; property. Try changing the other dimensions of that box.

== Vectors and Placements == &lt;!--T:22--&gt;
[http://en.wikipedia.org/wiki/Euclidean_vector Vectors] are a very fundamental concept in any 3D application. It is a list of 3 numbers (x, y and z), describing a point or position in the 3D space. A lot of things can be done with vectors, such as additions, subtractions, projections and [http://en.wikipedia.org/wiki/Vector_space much more]. In FreeCAD vectors work like this:


&lt;syntaxhighlight&gt;
myvec = FreeCAD.Vector(2,0,0)
myvec
myvec.x
myvec.y
othervec = FreeCAD.Vector(0,3,0)
sumvec = myvec.add(othervec)
&lt;/syntaxhighlight&gt;


&lt;!--T:23--&gt;
Another common feature of FreeCAD objects is their [[Placement|placement]]. Each object has a Placement attributes, which contains the position (Base) and orientation (Rotation) of the object. It is easy to manipulate, for example to move our object:


&lt;syntaxhighlight&gt;
box.Placement.
box.Placement.Base
box.Placement.Base = sumvec
 
otherpla = FreeCAD.Placement()
box.Placement = otherpla
&lt;/syntaxhighlight&gt;


&lt;!--T:24--&gt;
Now you must understand a couple of important concepts before we get further.

== App and Gui == &lt;!--T:25--&gt;
FreeCAD is made from the beginning to work as a command-line application, without its user interface. As a result, almost everything is separated between a &quot;geometry&quot; component and a &quot;visual&quot; component. When you work in command-line mode, the geometry part is present, but all the visual part is simply disabled. Almost any object in FreeCAD therefore is made of two parts, an Object and a ViewObject.

&lt;!--T:26--&gt;
To illustrate the concept, see our cube object, the geometric properties of the cube, such as its dimensions, position, etc... are stored in the object, while its visual properties, such as its color, line thickness, etc... are stored in the viewobject. This corresponds to the &quot;Data&quot; and &quot;View&quot; tabs in the property window. The view object of an object is accessed like this:


&lt;syntaxhighlight&gt;
vo = box.ViewObject
&lt;/syntaxhighlight&gt;

&lt;!--T:27--&gt;
Now you can also change the properties of the &quot;View&quot; tab:


&lt;syntaxhighlight&gt;
vo.Transparency = 80
vo.hide()
vo.show()
&lt;/syntaxhighlight&gt;


&lt;!--T:28--&gt;
When you start FreeCAD, the python console already loads 2 base modules: FreeCAD and FreeCADGui (which can also be accessed by their shortcuts App and Gui). They contain all kinds of generic functionality to work with documents and their objects. To illustrate our concept, see that both FreeCAD and FreeCADGui contain an ActiveDocument attribute, which is the currently opened document. FreeCAD.ActiveDocument and FreeCADGui.ActiveDocument are not the same object. They are the two components of a FreeCAD document, and they contain different attributes and methods. For example, FreeCADGui.ActiveDocument contains ActiveView, which is the currently opened 3D view

== Modules == &lt;!--T:29--&gt;
Now you must surely wonder, what else than &quot;Part::Box&quot; can I do? The FreeCAD base application is more or less an empty container. Without its modules, it can do little more than creating new, empty documents. The true power of FreeCAD is in its faithful modules. Each of them adds not only new workbenches to the interface, but also new python commands and new object types. As a result, several different or even totally incompatible object types can coexist in the same document. The most important modules in FreeCAD, that we'll look at in this tutorial, are [[Part Module|Part]], [[Mesh Module|Mesh]], [[Sketcher Workbench|Sketcher]] or [[Draft Module|Draft]].

&lt;!--T:30--&gt;
[[Sketcher Workbench|Sketcher]] and [[Draft Module|Draft]] both use the [[Part Module|Part]] module to create and handle their geometry, which are BRep while [[Mesh Module|Mesh]] is totally independent, and handles its own objects. More about that below.

&lt;!--T:31--&gt;
You can check all the available base object types for the current document like this:


&lt;syntaxhighlight&gt;
doc.supportedTypes()
&lt;/syntaxhighlight&gt;


&lt;!--T:32--&gt;
The different FreeCAD modules, although they added their object types to FreeCAD, are not automatically loaded in the python console. This is to avoid having a very slow startup. Modules are loaded only when you need them. So, for example, to explore what's inside the Part module:


&lt;syntaxhighlight&gt;
import Part
Part.
&lt;/syntaxhighlight&gt;


&lt;!--T:33--&gt;
But we'll talk more about the Part module below.

&lt;!--T:34--&gt;
By now, you know a bit more about the different modules of FreeCAD: The core modules (FreeCAD, FreeCADGui), and the workbenches modules (Part, Mesh, Sketcher). The other important modules are the 3d scene module (pivy) and the interface module (pyqt), we'll talk about them too below. 

&lt;!--T:35--&gt;
Now it's time to explore a bit deeper the important ones, which are the workbench modules.

== Mesh == &lt;!--T:36--&gt;

&lt;!--T:37--&gt;
[http://en.wikipedia.org/wiki/Polygon_mesh Meshes] are a very simple kind of 3D objects, used for example by [http://en.wikipedia.org/wiki/SketchUp Sketchup], [http://en.wikipedia.org/wiki/Blender_%28software%29 Blender] or [http://en.wikipedia.org/wiki/Autodesk_3ds_Max 3D studio Max]. They are composed of 3 elements: points (also called vertices), lines (also called edges) and faces. In many applications, FreeCAD included, faces can have only 3 vertices. But of course nothing prevents you from having a bigger plane face made of several coplanar triangles.

&lt;!--T:38--&gt;
Meshes are simple, this can be a bad thing, but for many applications such as those above, it turns to be an advantage, because they are so simple that you can easily have millions of them in a single document. In FreeCAD, though, they have less use, and are mostly there so you can import objects in mesh formats (.stl, .obj) from other applications. It was also extensively used as the main test module in the first month of life of FreeCAD.

&lt;!--T:39--&gt;
Mesh objects and FreeCAD objects are different things. You can see the FreeCAD object as a container for a Mesh object (like, we'll see below, for Part objects too). So in order to add a mesh object to FreeCAD, we must first create a FreeCAD object and a Mesh object, then add the Mesh object to the FreeCAD object:


&lt;syntaxhighlight&gt;
import Mesh
mymesh = Mesh.createSphere()
mymesh.
mymesh.Facets
mymesh.Points
 
meshobj = doc.addObject(&quot;Mesh::Feature&quot;,&quot;MyMesh&quot;)
meshobj.Mesh = mymesh
doc.recompute()
&lt;/syntaxhighlight&gt;


&lt;!--T:40--&gt;
This is a standard example, that uses the createSphere() method to automatically create a sphere, but you can very well create custom meshes from scratch, by defining their vertices and faces.

&lt;!--T:41--&gt;
[[Mesh Scripting|Read more about mesh scripting...]]

== Part == &lt;!--T:42--&gt;
The [[Part Module]] is the most powerful module of the whole FreeCAD. It allows to create and manipulate [http://en.wikipedia.org/wiki/Boundary_representation BRep] objects. This kind of object, unlike meshes, can have a wide variety of components. To resume a bit, Brep means Boundary Representation. which means that they are defined by their surfaces, which enclose and define an inner volume. These surface can be a variety of things, such as plane faces or very complex NURBS surfaces. They also carry the concept of volume.

&lt;!--T:43--&gt;
The Part module is based on the powerful [http://en.wikipedia.org/wiki/Open_CASCADE_Technology OpenCasCade] library, which allows a wide range of complex operations to be easily performed on those objects, such as boolean operations, filleting, lofts, etc...

&lt;!--T:44--&gt;
The Part module works the same way as the Mesh module: You create a FreeCAD object, a Part object, then add the Part object to the FreeCAD object:


&lt;syntaxhighlight&gt;
import Part
myshape = Part.makeSphere(10)
myshape.
myshape.Volume
myshape.Area

shapeobj = doc.addObject(&quot;Part::Feature&quot;,&quot;MyShape&quot;)
shapeobj.Shape = myshape
doc.recompute()
&lt;/syntaxhighlight&gt;


&lt;!--T:45--&gt;
The Part module (like the Mesh module) also has a shortcut that automatically creates a FreeCAD object and add a shape to it, so you can skip the 3 last lines above:


&lt;syntaxhighlight&gt;
Part.show(myshape)
&lt;/syntaxhighlight&gt;


&lt;!--T:46--&gt;
By exploring the contents of myshape, you will notice many interesting available subcomponents such as Faces, Edges, Vertexes, Solids or Shells, and a wide range of geometry operations such as cut (subtraction), common (intersection) or fuse (union). The [[Topological data scripting]] page explains all that in detail.

&lt;!--T:47--&gt;
[[Topological data scripting|Read more about part scripting...]]

== Draft == &lt;!--T:48--&gt;
FreeCAD features many more modules, such as [[Sketcher Workbench|Sketcher]] or [[Draft Module|Draft]], which also create Part objects, but add parameters to it, or even carry a whole new way to handle the Part geometry in them. Our box example above, is a perfect example of parametric object. All you need, to define the box, is to specify a couple of parameters, such as height, width and length. Based on those, the object will automatically calculate its Part shape. FreeCAD allows you to [[Scripted objects|create such objects in python]].

&lt;!--T:49--&gt;
The [[Draft Module]] adds a couple of 2D parametric objects types (which are all Part objects) such as lines and circles, and also provides some generic functions that work not only on Draft-made objects, but on any Part object. To explore what is available, simply do:


&lt;syntaxhighlight&gt;
import Draft
Draft.
rec = Draft.makeRectangle(5,2)
mvec = FreeCAD.Vector(4,4,0)
Draft.move(rec,mvec)
Draft.move(box,mvec)
&lt;/syntaxhighlight&gt;


== Interface == &lt;!--T:50--&gt;
The FreeCAD user interface is made with [http://en.wikipedia.org/wiki/Qt_%28framework%29 Qt], a powerful graphical interface system, responsible for drawing and handling all the controls, menus, toolbars, buttons around the 3D view. Qt provides a module, called PyQt, which allows python to access and modify Qt interfaces, such as FreeCAD. Let's try to fiddle with the Qt interface and produce a simple dialog:


&lt;syntaxhighlight&gt;
from PyQt4 import QtGui
QtGui.QMessageBox.information(None,&quot;Apollo program&quot;,&quot;Houston, we have a problem&quot;)
&lt;/syntaxhighlight&gt;


&lt;!--T:51--&gt;
See that the dialog that appears has the FreeCAD icon in its toolbar, meaning that Qt knows that the order has been issued from inside the FreeCAD application. We can therefore easily directly manipulate any part of the FreeCAD interface.

&lt;!--T:52--&gt;
Qt is a very powerful interface system, that allows you to do very complex things, but also has a couple of very easy-to use tools such as the Qt Designer with which you can design dialogs graphically and then add them to the FreeCAD interface with a couple of lines of python.

&lt;!--T:53--&gt;
[[PyQt|Read more about pyqt here...]]

== Macros == &lt;!--T:54--&gt;
Now that you have a good understanding of the basics, where are we going to keep our python scripts, and how are we going to launch them easily from FreeCAD? There is an easy mechanism for that, called [[Macros]]. A macro is simply a python script, that can then be added to a toolbar and be launched from a simple mouse click. FreeCAD provides you with a simple text editor (Macro -&gt; Macros -&gt; Create) where you can write or paste scripts. Once it is done, the Tools -&gt; Customize -&gt; Macros allow you to define a button for it, that can be added to toolbars.

&lt;!--T:55--&gt;
Now you are ready for more in-depth FreeCAD scripting. Head on to the [[Power users hub]]!

&lt;!--T:56--&gt;
{{docnav|Introduction to Python|FreeCAD Scripting Basics}}

&lt;!--T:57--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Quality project</title>
    <ns>0</ns>
    <id>412</id>
    <revision>
      <id>123230</id>
      <parentid>123229</parentid>
      <timestamp>2014-11-16T22:14:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>aju4u61lppx5e2uffh5dfiosjfc59zl</sha1>
      <text xml:space="preserve" bytes="1494">
&lt;!--T:1--&gt;
This is the project plan of the Quality project as part of the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This project is partial a software development and a documentation project. It aims to raise
the quality of the main components of FreeCAD and delivers a better experience to the 
first FreeCAD contact.  

== Outcome == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
[[Image:HelpViewer.jpg|150px|right]]

&lt;!--T:5--&gt;
One important step is the '''Complete''' workbench which is the starting workbench
for the average user (if there is one). The complete workbench hold all 
Commands and Features from all the modules and workbenches which met certain
'''[[Gui Command#Quality requirements | quality criteria]]'''. That will hide away 
the stormy development and half implemented features from the user which wants just model.  


&lt;!--T:6--&gt;
Another important outcome is a complete '''help system''' for all Commands and Features
at least in the Complete workbench. That mean a help page like [[Draft ShapeString|Draft ShapeString]]
exist for all in the [[List_of_Commands|List of Commands]].

== Brainstorming == &lt;!--T:7--&gt;
* Switching to QAssistant
** changing wiki2help
** changing Developer docu doxygen

== Organizing == &lt;!--T:8--&gt;


== Next actions == &lt;!--T:9--&gt;
Work through all the unfinished commands and make a documentation:

&lt;!--T:10--&gt;
{{Special:WhatLinksHere/Template:UnfinishedDocu}}

&lt;!--T:11--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Quantity</title>
    <ns>0</ns>
    <id>11302</id>
    <revision>
      <id>83982</id>
      <parentid>67151</parentid>
      <timestamp>2014-05-16T22:43:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>mxx0xffzys1f9bet53oqu4b67dais44</sha1>
      <text xml:space="preserve" bytes="13397">
&lt;!--T:1--&gt;
The Quantity is a combination of a floating point number and an Unit. It is used throughout all of FreeCAD to handle parameters and all other kind of input/output. 

== General == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
In a CAD or CAE system its very important to keep track on the unit of an value. Lot of trouble can arise when mixing up units or calculating results in different unit systems. One famous disaster is the [http://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure crash of the Mars Climate Orbiter] through out a unit mix-up. Even in the same unit-system the units come in lots of different flavors always tailored to the field of use. Simple examples are e.g. velocity in km/h (cars), m/s (robotics) or mm/minute (milling). A CAD system have to keep reliably track of units. Also it has to calculate with them and check on the right unit for special parameters. 

&lt;!--T:4--&gt;
For that reason the FreeCAD Quantity framework was created. It includes all the code and objects to deal with units, unit calculations, user input, conversion in other unit systems and the pretty output of units and values. In the long run no parameter in FreeCAD should be just a number. 

=== Supported units === &lt;!--T:5--&gt; 

&lt;!--T:6--&gt;
The FreeCAD input parser supports a bunch of units and units-systmes. We do use the Greek letter for micro but also accept 'u' as a replacement.

&lt;!--T:7--&gt;
* Length
** &quot;nm&quot; 
** &quot;µm&quot; 
** &quot;mm&quot; 
** &quot;cm&quot; 
** &quot;dm&quot; 
** &quot;m&quot;  
** &quot;km&quot; 
** &quot;in&quot;  
** &quot;ft&quot;  
** &quot;thou&quot;
** &quot;mil&quot; 
** &quot;yd&quot;  
** &quot;mi&quot;  

&lt;!--T:8--&gt;
Todo: all the rest...


&lt;!--T:9--&gt;
The detailed specification you find in the code:
* Quantity lexer: http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Base/QuantityParser.l  
* Quantity definitions: http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Base/Quantity.cpp#l167

== Internal representation == &lt;!--T:10--&gt;
All physical units can be expressed as a combination of the seven [http://en.wikipedia.org/wiki/International_System_of_Units SI-Units]:

&lt;!--T:11--&gt;
[[File:SI-Derived-Units.jpg|750px]]


&lt;!--T:12--&gt;
An easy way to express a Unit is a integer array of size 7 (number of base units) that defines what the unit is.
The signature of the 7 base units are:
* LENGTH: [1,0,0,0,0,0,0]
* MASS: [0,1,0,0,0,0,0]
* TIME: [0,0,1,0,0,0,0]
* ELECTRIC CURRENT: [0,0,0,1,0,0,0]
* THERMODYNAMIC TEMPERATURE: [0,0,0,0,1,0,0]
* AMOUNT OF SUBSTANCE: [0,0,0,0,0,1,0]
* LUMINOUS INTENSITY: [0,0,0,0,0,0,1]

&lt;!--T:13--&gt;
From these 7 units, we are then able to express all derived units defined in [http://physics.nist.gov/cuu/pdf/sp811.pdf Guide for the Use of the International System of Units (SI)] and create new ones as needed such as for instance:
* MASS DENSITY: [-3,1,0,0,0,0,0]
* AREA: [0,2,0,0,0,0,0]

&lt;!--T:14--&gt;
Since angle is physically dimensionless, but never the less important to a CAD system we add one more virtual unit for Angle. This makes a vector of 8 in the FreeCAD unit signature.

== Units calculator == &lt;!--T:15--&gt;
Often you are in need of calculating units from one system to another. For example you have old parameter tables with wired units. In that cases FreeCAD offers a conversion tool called Units-Calculator which helps in translating units. 

&lt;!--T:16--&gt;
Its description in detail is here:
[[Std_UnitsCalculator]]

== InputField == &lt;!--T:17--&gt;
The InputField is a QLineEdit derived Qt widget to handle all kind of user interaction with Quantities and parameters. It features following properties:
* parsing arbitrary value/unit input
* checking on the right unit (if given) and give the user feedback
* special context menu for operations on Quantities/Values
* history management (save the last used values)
* save often needed values as shortcut in context menu
* dialing values with mouse wheel and arrow keys (tbd)
* dialing with middle mouse button and mouse move (tbd)
* python integration for usage in python only dialogs (tbd)

&lt;!--T:18--&gt;
The UnitsCalculator uses the InputField already. 

&lt;!--T:19--&gt;
Main docu: [[InputField]]

&lt;!--T:20--&gt;
Code:
* http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Gui/InputField.h
* http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Gui/InputField.cpp

== Python scripting == &lt;!--T:21--&gt;
The Unit and Quantity system in FreeCAD is (as nearly everything) fully accessibly via Python. 

=== Unit === &lt;!--T:22--&gt;
The Unit class represents the Fingerprint of any physical unit. As descriped in the Basics section a vector of 8 numbers is used to represent this fingerprint. The Unit class allows the handling and calculation with this information. 


&lt;syntaxhighlight&gt;

from Units import Unit

# creating a Unit with certain signature
Unit(0,1)      # Mass     (kg)
Unit(1)        # Length   (mm)
Unit(-1,1,-2)  # Pressure (kg/mm*s^2)

# using predefined constats
Unit(FreeCAD.Units.Length)
Unit(FreeCAD.Units.Mass)
Unit(FreeCAD.Units.Pressure)

# parsing unit out of an string
Unit('kg/(m*s^2)')    # Pressure
Unit('Pa')            # the same as combined Unit Pascale
Unit('J')             # Joul (Work,Energy) mm^2*kg/(s^2)

# you can use units from all supported unit-systems
Unit('psi')           # Imperial pressure
Unit('lb')            # Mass
Unit('ft^2')          # Area

# comparing units
Unit(0,1) == Unit(FreeCAD.Units.Mass)

# getting type of unit
Unit('kg/(m*s^2)').Type == 'Pressure'

# calculating
Unit('kg') * Unit('m^-1*s^-2') == Unit('kg/(m*s^2)')

&lt;/syntaxhighlight&gt;

&lt;!--T:23--&gt;
The Unit is mainly used to descripe a certain unit-type for a parameter. There fore a special Property Type in FreeCAD can transport a Unit to check and ensure the right Unit. 
A Unit and a float value is called Quantity.

=== Quantity === &lt;!--T:24--&gt;


&lt;syntaxhighlight&gt;

from Units import Unit,Quantity

# to create a quantity you need a value (float) and a Unit
Quantity(1.0,Unit(0,1))               # Mass      1.0 kg
Quantity(1.0,Unit(1))                 # Length    1.0 mm
Quantity(1.0,Unit(-1,1,-2))           # Pressure  1.0 kg/mm*s^2
Quantity(1.0,FreeCAD.Units.Pressure)  # Pressure  1.0 kg/mm*s^2

# you can directly give a signature
Quantity(1.0,0,1)      # Mass      1.0 kg
Quantity(1.0,1)        # Length    1.0 mm
Quantity(1.0,-1,1,-2)  # Pressure  1.0 kg/mm*s^2

# parsing Quantitis out of a string
Quantity('1.0 kg/(m*s^2)')    # Pressure
Quantity('1.0 Pa')            # the same as combined Unit Pascale
Quantity('1.0 J')             # Joul (Work,Energy) mm^2*kg/(s^2)

# You can using a point or comma as float delimiter
Quantity('1,0 m')    
Quantity('1.0 m')   

# you can use units from all supported unit-systems
Quantity('1.0 psi')           # Imperial pressure
Quantity('1.0 lb')            # Mass
Quantity('1.0 ft^2')    

# the quantity parser can do calculations too
Quantity('360/5 deg')           # splitting circle 
Quantity('1/16 in')             # fractions
Quantity('5.3*6.3 m^2')         # calculating an area
Quantity('1/(log(2.3)/sin(pi)*3.4)+1.8e-3 m')
Quantity('1ft 3in')             # imperial style

# and for sure calculation and comparison
Quantity('1 Pa')* Quantity(2.0) == Quantity('2 Pa')
Quantity('1 m')* Quantity('2 m') == Quantity('2 m^2')
Quantity('1 m')* Quantity('2 ft') + Quantity('2 mm^2')
Quantity('1 m') &gt; Quantity('2 ft')

# accessing the components
Quantity('1 m').Value     # get the number (allways internal system (mm/kg/s)
Quantity('1 m').Unit      # get the unit
Quantity('1 m') == Quantity( Quantity('1 m').Value , Quantity('1 m').Unit )

# translating the value into other units then the internal system (mm/kg/s)
Quantity('1 km/h').getValueAs('m/s')               # translate value
Quantity('1 m').getValueAs(2.45,1)                 # translation value and unit signature
Quantity('1 kPa').getValueAs(FreeCAD.Units.Pascal) # predefined standard units 
Quantity('1 MPa').getValueAs(Quantity('N/m^2'))    # a quantity
          
&lt;/syntaxhighlight&gt;


=== User facing values === &lt;!--T:25--&gt;
Normally in script you can use Quantity for all kind of calculation and checking, but there comes the time you have to output information to the user. You could use getValueAs() to force a certain unit, but normally the user sets his preferred unit-schema in the preferences. This unit-schema do all the translations to the representation the user likes to see. At the moment there are 3 schema implemented:
* 1: Internal     (mm/kg/s) 
* 2: MKS          (m/kg/s)
* 3: US customary (in/lb) 
There can be easily additional schemas implemented in the future...

&lt;!--T:26--&gt;
The quantity class has two possibilities to use the actual schema translation:


&lt;syntaxhighlight&gt;

from Units import Unit,Quantity

# Use the translated string:
Quantity('1m').UserString             # '1000 mm' in 1; '1 m' in 2; and '1.09361 yr' in 3


&lt;/syntaxhighlight&gt;

&lt;!--T:27--&gt;
This does the job if you only need a string. But somethimes you need more control, e.g. if you want to have a dialog button which dial up and down. Then you need more information about the translation output. There fore the getUserPrefered() method of quantity is used:


&lt;syntaxhighlight&gt;

Quantity('22 m').getUserPrefered()  # gets a tubple:('22 m', 1000.0, 'm')
Quantity('2  m').getUserPrefered()  # Tuple: ('2000 mm', 1.0, 'mm')

&lt;/syntaxhighlight&gt;

&lt;!--T:28--&gt;
Here you get two more informations as a tuple of size 3. You get the string as before, plus the factor the number is translated and the raw string with only the unit chosen by the translation schema. With this information you can implement a much richer user interaction.

&lt;!--T:29--&gt;
The code for the schema translation you can see here:
* http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Base/UnitsSchemaInternal.cpp
* http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Base/UnitsSchemaMKS.cpp
* http://sourceforge.net/p/free-cad/code/ci/master/tree/src/Base/UnitsSchemaImperial1.cpp

== Appendix == &lt;!--T:30--&gt; 

=== Parser supported Units === &lt;!--T:31--&gt;
Although all physical units can be described with the seven SI units, most of the units used in technical areas are common combined units (like Pa = N/m^2 Pascal ). There fore the units parser in FreeCAD support lot of SI and Imperial combined units. This units are defined in src/Base/QuantityParser.l file and can be further advanced in the future. 


 &lt;!--T:32--&gt;
&quot;nm&quot;   = Quantity(1.0e-6    ,Unit(1));           // nano meter
 &quot;µm&quot;   = Quantity(1.0e-3    ,Unit(1));           // micro meter
 &quot;mm&quot;   = Quantity(1.0       ,Unit(1));           // milli meter
 &quot;cm&quot;   = Quantity(10.0      ,Unit(1));           // centi meter
 &quot;dm&quot;   = Quantity(100.0     ,Unit(1));           // deci meter
 &quot;m&quot;    = Quantity(1.0e3     ,Unit(1));           // meter
 &quot;km&quot;   = Quantity(1.0e6     ,Unit(1));           // kilo meter
 &quot;l&quot;    = Quantity(1000000.0 ,Unit(3));           // Liter      dm^3
                                                  
 &quot;µg&quot;   = Quantity(1.0e-9    ,Unit(0,1));         // micro gram
 &quot;mg&quot;   = Quantity(1.0e-6    ,Unit(0,1));         // milli gram
 &quot;g&quot;    = Quantity(1.0e-3    ,Unit(0,1));         // gram
 &quot;kg&quot;   = Quantity(1.0       ,Unit(0,1));         // kilo gram
 &quot;t&quot;    = Quantity(1000.0    ,Unit(0,1));         // ton
                                                  
 &quot;s&quot;    = Quantity(1.0       ,Unit(0,0,1));       // second                          (internal standard time)
 &quot;min&quot;  = Quantity(60.0      ,Unit(0,0,1));       // minute
 &quot;h&quot;    = Quantity(3600.0    ,Unit(0,0,1));       // hour  
                                                  
 &quot;A&quot;    = Quantity(1.0       ,Unit(0,0,0,1));     // Ampere          (internal standard electric current)
 &quot;mA&quot;   = Quantity(0.001     ,Unit(0,0,0,1));     // milli Ampere         
 &quot;kA&quot;   = Quantity(1000.0    ,Unit(0,0,0,1));     // kilo Ampere         
 &quot;MA&quot;   = Quantity(1.0e6     ,Unit(0,0,0,1));     // Mega Ampere         
                                                  
 &quot;K&quot;    = Quantity(1.0       ,Unit(0,0,0,0,1));   // Kelvin (internal standard thermodynamic temperature)
 &quot;mK&quot;   = Quantity(0.001     ,Unit(0,0,0,0,1));   // Kelvin         
 &quot;µK&quot;   = Quantity(0.000001  ,Unit(0,0,0,0,1));   // Kelvin         

 &lt;!--T:33--&gt;
&quot;mol&quot;  = Quantity(1.0       ,Unit(0,0,0,0,0,1));   // Mole     (internal standard amount of substance)        

 &lt;!--T:34--&gt;
&quot;cd&quot;   = Quantity(1.0       ,Unit(0,0,0,0,0,0,1)); // Candela   (internal standard luminous intensity)        

 &lt;!--T:35--&gt;
&quot;deg&quot;  = Quantity(1.0           ,Unit(0,0,0,0,0,0,0,1));  // degree         (internal standard angle)
 &quot;rad&quot;  = Quantity(180/M_PI      ,Unit(0,0,0,0,0,0,0,1));  // radian         
 &quot;gon&quot;  = Quantity(360.0/400.0   ,Unit(0,0,0,0,0,0,0,1));  // gon         

 &lt;!--T:36--&gt;
&quot;in&quot;   = Quantity(25.4          ,Unit(1));       // inch
 &quot;\&quot;&quot;   = Quantity(25.4          ,Unit(1));       // inch
 &quot;fo&quot;   = Quantity(304.8         ,Unit(1));       // foot
 &quot;'&quot;    = Quantity(304.8         ,Unit(1));       // foot
 &quot;th&quot;   = Quantity(0.0254        ,Unit(1));       // thou
 &quot;yd&quot;   = Quantity(914.4         ,Unit(1));       // yard


 &lt;!--T:37--&gt;
&quot;lb&quot;   = Quantity(0.45359237    ,Unit(0,1));    // pound
 &quot;oz&quot;   = Quantity(0.0283495231  ,Unit(0,1));    // ounce
 &quot;st&quot;   = Quantity(6.35029318    ,Unit(0,1));    // Stone
 &quot;cwt&quot;  = Quantity(50.80234544   ,Unit(0,1));    // hundredweights

&lt;!--T:38--&gt;
[[Category:Developer]]
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>RSS</title>
    <ns>0</ns>
    <id>120</id>
    <revision>
      <id>108792</id>
      <parentid>983</parentid>
      <timestamp>2014-09-09T19:50:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Ray Tracing Workbench</title>
    <ns>0</ns>
    <id>380</id>
    <redirect title="Raytracing Module" />
    <revision>
      <id>88846</id>
      <parentid>2004</parentid>
      <timestamp>2014-05-31T07:24:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>i8n8hxjy88r1zr413u50ahl6sa3kw3v</sha1>
      <text xml:space="preserve" bytes="31">#Redirect [[Raytracing Module]]</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Camera</title>
    <ns>0</ns>
    <id>36903</id>
    <revision>
      <id>99249</id>
      <parentid>99248</parentid>
      <timestamp>2014-07-28T10:31:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7ewp8dsqt8fsy2ik7832jvtxfh2pk55</sha1>
      <text xml:space="preserve" bytes="283">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing Camera‏‎ |MenuLocation=Raytracing → Camera‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Export</title>
    <ns>0</ns>
    <id>36898</id>
    <revision>
      <id>99243</id>
      <parentid>99242</parentid>
      <timestamp>2014-07-28T10:27:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3jawoyn8sux2zonvj21kd3p9pqythr6</sha1>
      <text xml:space="preserve" bytes="284">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing Export‏‎ |MenuLocation=Raytracing  → Export‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing ExportProject</title>
    <ns>0</ns>
    <id>36924</id>
    <revision>
      <id>99273</id>
      <parentid>99272</parentid>
      <timestamp>2014-07-28T10:36:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>fi42r8ev689sbdqk7git0hztf1s6kjv</sha1>
      <text xml:space="preserve" bytes="284">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing ExportProject|MenuLocation=Raytracing → ExportProject||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Icon</title>
    <ns>0</ns>
    <id>51421</id>
    <revision>
      <id>130351</id>
      <parentid>130350</parentid>
      <timestamp>2014-12-08T20:32:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>b28g9ibf510j5tkagqyu1s6f7k0z4bi</sha1>
      <text xml:space="preserve" bytes="1310">
==[[Image:Workbench Raytracing.svg|32px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Raytracing Module]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Raytracing New.png|32px|Raytracing New|link=Raytracing New]] [[Raytracing New|Raytracing New]]
 &lt;nowiki&gt;[[Image:Raytracing New.png|32px|Raytracing New|link=Raytracing New]] [[Raytracing New|Raytracing New]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Raytracing Export.png|32px|Raytracing Export|link=Raytracing Export]] [[Raytracing Export|Raytracing Export]]
 &lt;nowiki&gt;[[Image:Raytracing Export.png|32px|Raytracing Export|link=Raytracing Export]] [[Raytracing Export|Raytracing Export]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Raytracing Camera.png|32px|Raytracing Camera|link=Raytracing Camera]] [[Raytracing Camera|Raytracing Camera]]
 &lt;nowiki&gt;[[Image:Raytracing Camera.png|32px|Raytracing Camera|link=Raytracing Camera]] [[Raytracing Camera|Raytracing Camera]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Raytracing Part.png|32px|Raytracing Part|link=Raytracing Part]] [[Raytracing Part|Raytracing Part]]
 &lt;nowiki&gt;[[Image:Raytracing Part.png|32px|Raytracing Part|link=Raytracing Part]] [[Raytracing Part|Raytracing Part]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing InsertPart</title>
    <ns>0</ns>
    <id>36919</id>
    <revision>
      <id>99267</id>
      <parentid>99266</parentid>
      <timestamp>2014-07-28T10:35:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jkdkbwb13m0kdc7kjimrpvas2qmxlmj</sha1>
      <text xml:space="preserve" bytes="284">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing InsertPart|MenuLocation=Raytracing → InsertPart‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Key</title>
    <ns>0</ns>
    <id>51446</id>
    <revision>
      <id>131462</id>
      <parentid>130981</parentid>
      <timestamp>2014-12-13T21:26:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>8vm7w981v8mb4xqbc1rqd4gwxcmoy68</sha1>
      <text xml:space="preserve" bytes="1389">
==[[File:Workbench Raytracing.svg|32px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Workbench Raytracing]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Raytracing New.png|16px|Raytracing New|link=Raytracing New]] [[Raytracing New|Raytracing New]]}}
 &lt;nowiki&gt;{{KEY|[[File:Raytracing New.png|16px|Raytracing New|link=Raytracing New]] [[Raytracing New|Raytracing New]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Raytracing Export.png|16px|Raytracing Export|link=Raytracing Export]] [[Raytracing Export|Raytracing Export]]}}
 &lt;nowiki&gt;{{KEY|[[File:Raytracing Export.png|16px|Raytracing Export|link=Raytracing Export]] [[Raytracing Export|Raytracing Export]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Raytracing Camera.png|16px|Raytracing Camera|link=Raytracing Camera]] [[Raytracing Camera|Raytracing Camera]]}}
 &lt;nowiki&gt;{{KEY|[[File:Raytracing Camera.png|16px|Raytracing Camera|link=Raytracing Camera]] [[Raytracing Camera|Raytracing Camera]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Raytracing Part.png|16px|Raytracing Part|link=Raytracing Part]] [[Raytracing Part|Raytracing Part]]}}
 &lt;nowiki&gt;{{KEY|[[File:Raytracing Part.png|16px|Raytracing Part|link=Raytracing Part]] [[Raytracing Part|Raytracing Part]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Lux</title>
    <ns>0</ns>
    <id>36934</id>
    <revision>
      <id>99285</id>
      <parentid>99284</parentid>
      <timestamp>2014-07-28T10:38:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ity6p63tdbqyuilt0w0uzcg7wbzuzdj</sha1>
      <text xml:space="preserve" bytes="270">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing Lux|MenuLocation=Raytracing → Lux‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Module</title>
    <ns>0</ns>
    <id>121</id>
    <revision>
      <id>110735</id>
      <parentid>90164</parentid>
      <timestamp>2014-09-22T19:44:31Z</timestamp>
      <contributor>
        <username>Drei</username>
        <id>3319</id>
      </contributor>
      <minor/>
      <comment>Fixed a typo, deleted a couple of commas, and rewrote a few sentences.</comment>
      <sha1>l14o27hadpxxcevzm2hnnz9pbdzewdv</sha1>
      <text xml:space="preserve" bytes="10848">
&lt;!--T:1--&gt;
The Raytracing module is used to generate photorealistic images of your models by rendering them with an external renderer. The Raytracing workbench works with [[Raytracing Module#Templates|templates]], the same way as the [[Drawing Module|Drawing workbench]], by allowing you to create a Raytracing project in which you add views of your objects. The project can then be exported to a ready-to-render file, or be rendered directly.


[[Image:Raytracing_example.jpg|1024px]]


&lt;!--T:2--&gt;
Currenly, two renderers are supported: [http://en.wikipedia.org/wiki/POV-Ray povray] and [http://en.wikipedia.org/wiki/LuxRender luxrender]. To be able to render directly from FreeCAD, at least one of those renderers must be installed on your system, and its path must be configured in the FreeCAD Raytracing preferences. Without any renderer installed, though, you are still able to export a scene file that can be used in any of those renderers later, or on another machine.

&lt;!--T:3--&gt;
The raytracing workbench works with [[Raytracing Module#Templates|templates]], which are complete scene files for the given external renderer, including lights and possibly additional geometry such as ground planes. These scene files contain placeholders, where FreeCAD will insert the position of the camera, and geometry and materials information of each of the objects you insert in the project. That modified scene file is what is then exported to the external renderer.

== Tools == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
{{Raytracing Tools}}

== Typical workflow == &lt;!--T:6--&gt;
# Create or open a FreeCAD project, add some [[Part Module|Part-based]] objects (meshes are currently not supported)
# Create a Raytracing project (luxrender or povray)
# Select the objects you wish to add to the raytracing project and add them to the project with the &quot;Insert Part&quot; tool
# Export or render directly

== Creating a povray file manually == &lt;!--T:7--&gt;
The utility tools described above allow you to export the current 3D view and all of its content to a [http://www.povray.org/ Povray] file. First, you must load or create your CAD data and position the 3D View orientation as you wish. Then choose &quot;Utilities-&gt;Export View...&quot; from the raytracing menu.


[[Image:FreeCAD_Raytracing.jpg|center]]


&lt;!--T:8--&gt;
You will be asked for a location to save the resulting *.pov file. After that you can open it in [http://www.povray.org/ Povray] and render:


[[Image:Povray.jpg|center]]


&lt;!--T:9--&gt;
As usual in a rendererer you can make big and nice pictures:


[[Image:Scharniergreifer_render.jpg|1024px]]


== Scripting == &lt;!--T:10--&gt;

=== Outputting render files === &lt;!--T:11--&gt;
The Raytracing and RaytracingGui modules provide several methods to write scene contents as povray or luxrender data. The most useful are Raytracing.getPartAsPovray() and Raytracing.getPartAsLux() to render a FreeCAD Part object into a povray or luxrender definition, and RaytracingGui.povViewCamera() and RaytracinGui.luxViewCamera() to get the current point of view of the FreeCAD 3D window into povray or luxrender format.

&lt;!--T:12--&gt;
Here is how to write a povray file from python, assuming your document contains a &quot;Box&quot; object:

&lt;syntaxhighlight&gt;
 import Raytracing,RaytracingGui
 OutFile = open('C:/Documents and Settings/jriegel/Desktop/test.pov','w')
 OutFile.write(open(App.getResourceDir()+'Mod/Raytracing/Templates/ProjectStd.pov').read())
 OutFile.write(RaytracingGui.povViewCamera())
 OutFile.write(Raytracing.getPartAsPovray('Box',App.activeDocument().Box.Shape,0.800000,0.800000,0.800000))
 OutFile.close()
 del OutFile
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
And the same for luxrender:

&lt;syntaxhighlight&gt;
 import Raytracing,RaytracingGui
 OutFile = open('C:/Documents and Settings/jriegel/Desktop/test.lxs','w')
 OutFile.write(open(App.getResourceDir()+'Mod/Raytracing/Templates/LuxClassic.lxs').read())
 OutFile.write(RaytracingGui.luxViewCamera())
 OutFile.write(Raytracing.getPartAsLux('Box',App.activeDocument().Box.Shape,0.800000,0.800000,0.800000))
 OutFile.close()
 del OutFile
&lt;/syntaxhighlight&gt;

=== Creating a custom render object === &lt;!--T:14--&gt;
Apart from standard povray and luxrender view objects that provide a view of an existing Part object, and that can be inserted in povray and luxrender projects respectively, a third object exist, called RaySegment, that can be inserted either in povray or luxrender projects. That RaySegment object is not linked to any of the FreeCAD objects, and can contain custom povray or luxrender code, that you might wish to insert into your raytracing project. You can also use it, for example, to output your FreeCAD objects a certain way, if you are not happy with the standard way. You can create and use it like this from the python console:

&lt;syntaxhighlight&gt;
 myRaytracingProject = FreeCAD.ActiveDocument.PovProject
 myCustomRenderObject = FreeCAD.ActiveDocument.addObject(&quot;Raytracing::RaySegment&quot;,&quot;myRenderObject&quot;)
 myRaytracingProject.addObject(myCustomRenderObject)
 myCustomRenderObject.Result = &quot;// Hello from python!&quot;
&lt;/syntaxhighlight&gt;

== Links == &lt;!--T:15--&gt;

=== POVRay=== &lt;!--T:16--&gt;
* http://www.spiritone.com/~english/cyclopedia/
* http://www.povray.org/
* http://en.wikipedia.org/wiki/POV-Ray

=== Luxrender === &lt;!--T:17--&gt;
* http://www.luxrender.net/

=== Future possible renderers to implement === &lt;!--T:18--&gt;
* http://www.yafaray.org/
* http://www.mitsuba-renderer.org/
* http://www.kerkythea.net/

&lt;!--T:19--&gt;
----
Currently there is a new Renderer Workbench in development to support multiple back-ends such as Lux Renderer and Yafaray. Information for using the development version can be viewed at  [[Render_project]]

&lt;!--T:20--&gt;
For Development status of the Render Module look here [[Raytracing_project]]

== Templates == &lt;!--T:21--&gt;
FreeCAD comes with a couple of default templates for povray and luxrender, but you can easily create your own. All you need to do is to create a scene file for the given renderer, then edit it manually with a text editor to insert special tags that FreeCAD will recognize and where it will insert its contents (camera and objects data)

=== Povray === &lt;!--T:22--&gt;
Povray scene files (with extension .pov) can be created manually with a text editor (povray is made primarily to be used as a scripting language), but also with a wide range of 3D applications, such as [http://www.blender.org blender]. On the [http://www.povray.org/ povray website] you can find further information and a list of applications able to produce .pov files.

&lt;!--T:23--&gt;
When you have a .pov file ready, you need to open it with a text editor, and do two operations:
# Strip out the camera information, because FreeCAD will place its own camera data. To do so, locate a text block like this: &lt;tt&gt;camera { ... }&lt;/tt&gt;, which describes the camera parameters, and delete it (or put &quot;//&quot; in front of each line to comment them out).
# Insert the following line somewhere: &lt;tt&gt;//RaytracingContent&lt;/tt&gt;. This is where FreeCAD will insert its contents (camera and objects data). You can, for example, put this line at the very end of the file.

&lt;!--T:24--&gt;
Note that FreeCAD will also add some declarations, that you can use in your template, after the &lt;tt&gt;//RaytracingContent&lt;/tt&gt; tag. These are:
* cam_location: the location of the camera
* cam_look_at: the location of the target point of the camera
* cam_sky: the up vector of the camera.
* cam_angle: the angle of the camera

&lt;!--T:25--&gt;
If you want, for example, to place a lamp above the camera, you can use this:

&lt;syntaxhighlight&gt;
 light_source {
  cam_location + cam_angle * 100
  color rgb &lt;10, 10, 10&gt;
 }
&lt;/syntaxhighlight&gt;

=== Luxrender === &lt;!--T:26--&gt;
Luxrender scene files (with extension.lxs) can either be single files, or a master .lxs file that includes world definition (.lxw), material definition (.lxm) and geometry definition (.lxo) files. You can work with both styles, but it is also easy to transform a group of 4 files in a single .lxs file, by copying the contents of each .lxw, .lxm and .lxo file and pasting it at the point where that file is inserted in the master .lxs file.

&lt;!--T:27--&gt;
Luxrender scene files are hard to produce by hand, but are easy to produce with many 3D applications such as [http://www.blender.org blender]. On the [http://www.luxrender.net luxrender website], you'll find more information and plugins for the main 3D applications out there.

&lt;!--T:28--&gt;
If you will work with separated .lxw, .lxm and .lxo files, beware that the final .lxs exported by FreeCAD might be at a different location than the template file, and therefore these files might not be found by Luxrender at render time. In this case you should or copy these files to the location of your final file, or edit their paths in the exported .lxs file.

&lt;!--T:29--&gt;
If you are exporting a scene file from blender, and wish to merge everything into one single file, you will need to perform one step before exporting: By default, the luxrender exporter in blender exports all mesh geometry as separate .ply files, instead of placing the mesh geometry directly inside the .lxo file. To change that behaviour, you need to select each of your meshes in blender, go to the &quot;mesh&quot; tab and set the option &quot;export as&quot; to &quot;luxrender mesh&quot; for each one of them.

&lt;!--T:30--&gt;
After you have your scene file ready, to turn it into a FreeCAD template, you need to perform the following steps:
# Locate the camera position, a single line that begins with &lt;tt&gt;LookAt&lt;/tt&gt;, and delete it (or place a &quot;#&quot; at the beginning of the line to comment it out)
# At that place, insert the following line: &lt;tt&gt;#RaytracingCamera&lt;/tt&gt;
# At a desired point, for example just after the end of the materials definition, before the geometry information, or at the very end, just before the final &lt;tt&gt;WorldEnd&lt;/tt&gt; line, insert the following line: &lt;tt&gt;#RaytracingContent&lt;/tt&gt;. That is where FreeCAD will insert its own objects.

&lt;!--T:31--&gt;
Note that in luxrender, the objects stored in a scene file can define transformation matrixes, that perform location, rotation or scaling operations. These matrixes can stack and affect everything that come after them, so, by placing your &lt;tt&gt;#RaytracingContent&lt;/tt&gt; tag at the end of the file, you might see your FreeCAD objects affected by a transformation matrix placed earlier in the template. To make sure that this doesn't happen, place your &lt;tt&gt;#RaytracingContent&lt;/tt&gt; tag before any other geometry object present in the template. FreeCAD itself won't define any of those transformation matrixes.

&lt;!--T:32--&gt;
{{docnav|Drawing Module|Image Module}}

&lt;!--T:33--&gt;
[[Category:User Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing New</title>
    <ns>0</ns>
    <id>36914</id>
    <revision>
      <id>99261</id>
      <parentid>99260</parentid>
      <timestamp>2014-07-28T10:34:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>j88f93xqcs2c8vqvycguxy1iqz3gy7h</sha1>
      <text xml:space="preserve" bytes="270">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing New|MenuLocation=Raytracing → New‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Part</title>
    <ns>0</ns>
    <id>36908</id>
    <revision>
      <id>99255</id>
      <parentid>99254</parentid>
      <timestamp>2014-07-28T10:33:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5qiur7t2wwhzlblp1d0l8hqdq8az6h1</sha1>
      <text xml:space="preserve" bytes="279">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing Part‏‎ |MenuLocation=Raytracing → Part‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Render</title>
    <ns>0</ns>
    <id>36939</id>
    <revision>
      <id>99291</id>
      <parentid>99290</parentid>
      <timestamp>2014-07-28T10:39:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6lii49bveieom5t7rj1fmkn9d28btro</sha1>
      <text xml:space="preserve" bytes="276">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Raytracing Render|MenuLocation=Raytracing → Render‏‎||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing ResetCamera</title>
    <ns>0</ns>
    <id>36929</id>
    <revision>
      <id>105866</id>
      <parentid>105865</parentid>
      <timestamp>2014-08-22T20:51:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0tyd4f5aqpm4t8aiv47dhxq7k5cp4eq</sha1>
      <text xml:space="preserve" bytes="291">
&lt;!--T:4--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:3--&gt;
{{GuiCommand|Name=Raytracing ResetCamera|MenuLocation=Raytracing → ResetCamera||Workbenches=[[Raytracing Module|Raytracing]]|Shortcut=|SeeAlso=}}



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Raytracing Workbench</title>
    <ns>0</ns>
    <id>387</id>
    <redirect title="Raytracing Module" />
    <revision>
      <id>88830</id>
      <parentid>2029</parentid>
      <timestamp>2014-05-31T07:19:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <comment>Redirected page to [[Raytracing Module]]</comment>
      <sha1>ijqa662z1wy2yaevtpkyml106c2q3du</sha1>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Raytracing Module]]</text>
    </revision>
  </page>
  <page>
    <title>Raytracing project</title>
    <ns>0</ns>
    <id>2532</id>
    <revision>
      <id>123427</id>
      <parentid>123426</parentid>
      <timestamp>2014-11-17T20:19:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ovhyvegv5t9w7pk3dfml3l8l0vsqrth</sha1>
      <text xml:space="preserve" bytes="4324">
&lt;!--T:1--&gt;
This is the FreeCAD Raytracing development project. It follows the rules of the [http://en.wikipedia.org/wiki/GTD#GTD_methodology| Getting things done] process. The projects are collected in the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This project is to update the current render module [[Raytracing_Module|Raytracing]] that currently uses povray, a biased renderer which gives satisfactory results and allow more modern renderers such as Lux Render, Yafaray, Indigo renderers to be used.

&lt;!--T:3--&gt;
Also to provide a generic interface to allow multiple render back-ends to be used to visualise Features within FreeCad. Providing a more generic programming interface will allow render plugins to be created more easily. 

&lt;!--T:4--&gt;
The interface will allow both open source and proprietary external renderers to be used by generating a compatible scene file and launching a separate process in the background. The output can then be previewed inside Freecad directly by opening the temporary output file (if available).

&lt;!--T:5--&gt;
Each renderer will be a plugin into a generic interface and provide compatible materials and rendering modes.

== Outcome == &lt;!--T:6--&gt;
Nice Visuals!!! Produce high quality outputs of parts within the Freecad document and provide a very simple interface with presets to allow quick initialisation for rendering and previews.

&lt;!--T:7--&gt;
The user interface should allow more complex situations to be created and possibly previewed such as changing and modifying lights and positions. However, the aim is to not provide a full featured render suite.

== Brainstorming == &lt;!--T:8--&gt;
A library of material 'must' be created for each render plugin along with presets. Material properties can be changed. 
Scene presets should allow users with inexperience with Rendering to produce nice visuals in little time.

== Organising == &lt;!--T:9--&gt;
The generic inteface is currently being created and to test the integration [http://www.luxrender.net/en_GB/index Lux render], an unbiased renderer will be first implemented. 
Current work is being completed by mrlukeparry on his render branch [https://github.com/mrlukeparry/FreeCAD_sf_master/tree/raytracing Github Render Branch]. 

&lt;!--T:10--&gt;
'''Currently it is possible to render objects to Lux Render:'''

&lt;!--T:11--&gt;
[[File:LuxRenderOutput.png]]

&lt;!--T:12--&gt;
Featured is a part that was creating using PartDesign/Sketcher then rendered using the new render workbench being developed in Lux Render. Lux Render allows nice effects such as DOF to be created to improve realism.

== Next actions == &lt;!--T:13--&gt;
* Create the Abstraction to provide the interface between renderers '''(Done)'''
*Implement an interface for describing generic materials and collecting these '''(Done)'''
*Implement an interface for describing render presets '''(Done)'''
*Implement an interface for describing templates '''(Done)'''
*Implement a feature to store all this information permanently '''(WIP)'''
*Create a workbench environment for displaying the output '''(Done)'''
*Create workbench tools for changing render properties '''(Done)'''
*Create workbench tools for browsing, changing and applying materials to part features '''(Done)'''
*Create automake scripts (WIP)
* Remove any GUI dependencies from Raytracing/App '''(Done)'''
** Bounding Box data structure should not use coin3d SbBox3f '''(Done)'''
** QWidget Included in QProcess for some reason '''(Fixed)'''
* Test compatibility with Windows (in progress)
** Update Libpack to include QT 4.7 - QT 4.8
** Remove compiler warnings and errors
* Implement saving of Material Properties '''(Done)'''
* Tidying the QML interface '''(WIP)'''
* Creating Render Templates / Render Materials / Render Presets
* Create a blender scene to lux template converter
* Convert LuxBlender Materials .lbm (http://www.luxrender.net/lrmdb/en/material/) to useful Render Materials
* Create python bindings for Render Materials, Cameras, Lights
* Create a RenderCamera Document object
* Allow scene template to be imported into the render feature. 
* User defined preset/material/template directories
* Improve the View Provider
* Convert Povray/Yafaray to use the new Render Module Infrastructure
* Testing

&lt;!--T:14--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Release notes 011</title>
    <ns>0</ns>
    <id>1144</id>
    <revision>
      <id>84454</id>
      <parentid>42606</parentid>
      <timestamp>2014-05-18T19:59:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>rfoodym9xvaoasdhsleadtm2eijx698</sha1>
      <text xml:space="preserve" bytes="4199">This is a summary of the most important changes and new features available in the 0.11 release of FreeCAD. The complete list can be found [http://www.freecadweb.org/tracker/changelog_page.php here].

[[Image:FreeCAD011.png|800px]]

A screenshot of the 0.11 version

=== General ===

* The [http://crowdin.net/project/freecad FreeCAD translation project] has received huge help from many people around the world and FreeCAD now ships with no less than 15 languages: English, German, French, Italian, Swedish, Spanish, Portuguese, Russian, Ukrainian, Norwegian, Afrikaans, Finnish, Simplified Chinese, Croatian and Dutch. And many more languages are being worked on for the next releases.

[[Image:release011-translation.jpg]]

* Several improvements have been brought all over FreeCAD, for example the hierarchy tree now allows complex object stacks, keeping all your geometry history clean and easily accessible and modifiable. New python API improvements also allow objects to interact better with the tree, defining their own behaviour, icons, etc. 

[[Image:release011-dependency.jpg]]

* The copy/paste mechanism has also been much improved, now allowing easy copy/pasting of objects between documents.
* The [[Part Workbench]] features new tools such as mirroring and edge fillets and chamfers.

=== Sketch and part design ===

* The constraint solver of the [[Sketcher Workbench]] has been totally rewritten and the Sketcher, even if still not complete, features already a good array of tools such as lines, rectangles, and constraints such as point coincidence, parallelism, fixed length or horizontal or vertical constraints.

* In addition to the Sketcher, a new PartDesign workbench now allow you to quickly build solids on top of Sketches. As a rule now in FreeCAD, everything is parametric, you can go back anytime to change your sketch, and all geometry that depends on it will be adapted automatically

[[Image:release011-sketcher.jpg]]

[[Image:Movie.png]] Examples: [http://www.youtube.com/watch?v=hvXupH5bA0E Sketcher demo] &amp;bull; [http://www.youtube.com/watch?v=7ih9Jp3OAwA PartDesign demo]

=== Robot simulation ===

* The [[Robot Workbench]] has been extended with many GUI tools and is now fairly functional and allows you to easily simulate industrial robot movements

[[Image:release011-robot.jpg]]

=== 2D drafting ===

* Snapping has been greatly optimized and now works pretty fast, even on complex objects
* The &quot;Trim/Extend&quot; tool can now be called &quot;Trim/Extend/Extrude&quot;, since it allows you to quickly extrude single faces, offering a convenient shortcut to the standard Part Extrude tool
* The Draft-to-Drawing sheet workflow has also been enhanced, all the Draft workbench objects can now be placed on a Drawing page, and they all offer the same level of comfort as standard Part objects, offering the ability to change their position, rotation and scale on the fly. They also offer some extra features, such as hatch pattern fillings

[[Image:release011-draft-drawing.jpg]]

* The Draft workbench also offers new tools such as regular polygons and bSplines
* There is also a new Edit tool, allowing to edit the geometry of most of the Draft objects

[[Image:release011-draft.jpg]]

* Dimensions can now have their text edited and moved, and wires can have an end arrow, allowing to use them as leaders
* Several commands such as move, rotate or dimensioning now allow you to do several copies without exiting the tool
* The Draft workbench also gained a python [[Draft_API|API]].
* The DXF importer now support block attributes

[[Image:Movie.png]] Examples: [http://www.youtube.com/watch?v=Q7cG-LQK8Ps Draft module demo]

=== Images ===

* The image workbench now features an ImagePlane object, allowing you to display an image file inside the 3D scene, that can be used for example to construct geometry on top of scanned blueprints

=== Documentation ===

* The [[Online Help Toc|FreeCAD manual]] now has several well advanced translations. Check the main page!

[[Category:News]]
[[Category:Documentation]]

{{languages | {{de|Release_notes_011/de}} {{es|Release_notes_011/es}} {{fr|Release_notes_011/fr}} {{it|Release_notes_011/it}} {{ru|Release_notes_011/ru}} }}</text>
    </revision>
  </page>
  <page>
    <title>Release notes 012</title>
    <ns>0</ns>
    <id>1672</id>
    <revision>
      <id>96089</id>
      <parentid>96088</parentid>
      <timestamp>2014-07-20T19:23:32Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>tejjp918sgd7n5cu08ldqhinptygecz</sha1>
      <text xml:space="preserve" bytes="3662">This is a summary of the most interesting changes occured in FreeCAD since latest version. See [http://www.freecadweb.org/tracker/changelog_page.php here] for the complete list of changes.

Older versions: [[Release notes 011|0.11]]

=== Welcome! ===

* When you open FreeCAD for the first time, you are now welcomed by a brand new start center, which gathers the most common actions you would want to perform, such as open a particular workbench, load one of the recent files you worked on, read the latest news from the FreeCAD development, or watch one of the many new videos tutorials the heroic FreeCAD community has been making recently.

[[Image:FreeCAD start center.jpg]]

=== Sketcher &amp; PartDesign ===

[[Image:Rim bling.png|800px]]

* The [[Sketcher Workbench|Sketcher]] has received a huge amount of work since the previous version, and is now based on a new solver designed from scratch for the task. The sketcher is now able to perform almost all 2D drawing operations of the [[Draft Module]], and place a wide array of constraints on the sketch elements.

* In addition, the [[PartDesign Workbench]] has also evolved a lot and offers several common (and totally parametric) tools to work on top of sketches, such as extrusion, lofting or revolution.

=== Architecture ===

* A new [[Arch Module|Architecture module]] is now part of FreeCAD. It is still in early development, but already features a couple of handy helper objects, such as walls and structural elements (columns and beams). Those can be built on top of existing 2D geometry, such as lines, wires and sketches, by specifying a width and a height, or, in case of structural elements, on top of 2D profiles. They can also be based on solids, or even include other solid shapes, as additions or even as subtractions, allowing virtually any possible geometry.

[[Image:Arch_screenshot.jpg]]

* The Arch module also features an [http://en.wikipedia.org/wiki/Industry_Foundation_Classes IFC] importer, a [http://en.wikipedia.org/wiki/Collada DAE (collada)] importer and exporter, and a special [http://en.wikipedia.org/wiki/Wavefront_.obj_file OBJ] exporter more suited to architecture models than the standard one.

* Included in the Arch module is also a growing collection of tools to make the process of working with Mesh objects from other applications such as [http://www.blender.org Blender] easier. Mesh objects, if well modeled, can easily and automatically be turned into clean shapes, and then into parametric Arch objects.

=== 2D Drafting ===

[[Image:Draft_taskview.jpg]]

* Reclaim your work space! The Draft module now features a new UI mode that uses the FreeCAD Task system, which gathers all user interaction in one place, redeeming the precious space eaten by the Draft toolbar. To enable this, go to the Draft preferences and enable Taskbar mode.

* The Draft Trim/Extend tool is now able to extrude single faces of existing objects.

* Several new snap modes have been added, now allowing to snap perpendicularly and parallel to existing lines, and to locations that are aligned with other line segments.

* The Draft module also features a new tool that produces, inside the same document, a projected 2D view of any 3D shape.

* Draft objects can now be drawn directly on top of existing faces. If you didn't specify a working plane, it will be adapted temporarily to the underlying face.

* The Draft module is now able to import Bézier curves from SVG files.

[[Category:News]]
[[Category:Documentation]]

{{languages | {{es|Release_notes_012/es}} {{fr|Release_notes_012/fr}} {{it|Release_notes_012/it}}  {{pl|Release_notes_012/pl}} {{ru|Release_notes_012/ru}} }}</text>
    </revision>
  </page>
  <page>
    <title>Release notes 013</title>
    <ns>0</ns>
    <id>2053</id>
    <revision>
      <id>90174</id>
      <parentid>84467</parentid>
      <timestamp>2014-06-04T19:06:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>njczpj5le7r2a1ebo9xt584kwhuur2k</sha1>
      <text xml:space="preserve" bytes="11790">
&lt;!--T:1--&gt;
This is a summary of the most interesting changes occured in FreeCAD since latest version. See [http://www.freecadweb.org/tracker/changelog_page.php the Mantis changelog] on SourceForge for the complete list of changes.

&lt;!--T:2--&gt;
Older versions: [[Release notes 012|0.12]] - [[Release notes 011|0.11]]

&lt;!--T:3--&gt;
[[image:FreeCAD013.jpg|800px]]

&lt;!--T:4--&gt;
&lt;small&gt;''modeled in FreeCAD by psicofil''&lt;/small&gt;


== General == &lt;!--T:5--&gt;
* '''Color preferences''': Getting bored of the good old grey-shapes-on-black-lines FreeCAD default aspect? It is now changeable in the user preferences (Display -&gt; Color), together with several other default colors.
* '''Alignment''': two shapes can be aligned to each other with up to three points with this tool available in the Edit menu.

== Drawing module == &lt;!--T:6--&gt;
* '''Clip feature''': A new [[Drawing Clip]] object allows to place views of objects inside clipped rectangles on Drawing pages.
* '''Editable titleblocks''': When designing [[Drawing templates]], it is now possible to mark texts as editable. Those texts become then directly editable in FreeCAD.
* '''Annotation feature''': A new [[Drawing Annotation]] object, a simple feature to quickly place text blocks on a Drawing page.
* '''Orthographic Views''': A new [[Drawing Orthoviews|Drawing Orthographic Views]] tool facilitate creation of multiple views all aligned to each other, according to first-angle or third-angle projection.
* '''Browser preview''': Since all SVG capabilities are not always supported by the internal Qt SVG viewer, this button allows you to check how a page looks like in the webkit browser, which fully supports the SVG format. This is provisory, until we definitely switch our SVG viewer to webkit...
* '''DXF export''': you can now export a view of a page directly to a DXF file.
* Some bug fixes now allow printing of pages to scale.

== Sketcher module == &lt;!--T:7--&gt;
* '''Point Creation'''
[[File:Release-0.13-PointTool.png]]

&lt;!--T:8--&gt;
Points can now be added and used as a feature within a sketch

&lt;!--T:9--&gt;
* '''Sketch Origin'''
[[File:Release-0.13-Origin.png]]

&lt;!--T:10--&gt;
User can now use the sketch's origin to define geometry as well as the sketch axes.

&lt;!--T:11--&gt;
* '''Tangency and perpendicularity constraints for arcs and circles.'''
* '''Constraints with respect to external (projected) geometry.'''
* '''Improved counting of the sketch degrees of freedom.'''
* '''Symmetry constraint with respect to a symmetry point''' (midpoint constraint).

&lt;!--T:12--&gt;
* '''Improved Datum Label and Constraint Visuals:'''
[[File:Release-0.13-SketcherDimensions.png]]

&lt;!--T:13--&gt;
** Each constraint label (including arrows) will correctly scale to the size of the scene automatically to the 3D viewport 
** Datum label text for Distance, Distance X, Distance Y and Radius can be freely positioned now with greater control.
** Small improvements to overlapping constraint icons and fix freezes.
** Datum Label text will reverse when the view is orientated from the opposite side.

	
&lt;!--T:14--&gt;
*'''Fully constrained Sketches are now highlighted:'''
[[File:Release-0.13-SketcherFullyConstrained.png|The sketch color turns from white to green to indicate it is fully constrained. These default colors can be customized.]]


&lt;!--T:15--&gt;
* '''Rubber band selection:'''
[[File:Release-0.13-RubberBandSelection.png]]

&lt;!--T:16--&gt;
Geometry (Points, Lines and Curves) may be selected by dragging on the background to create a rectangular selection. 

&lt;!--T:17--&gt;
* '''Extended functionality of the polyline tool:''' using the m key one can switch between arc and line mode and among free, tangent and perpendicular transitions from the previous segment.

&lt;!--T:18--&gt;
* '''Map sketch to face''' is a new tool to map (or remap) an existing sketch to the selected face on a solid. This allows the use of this sketch for features such as Pad and Pocket.

&lt;!--T:19--&gt;
* '''Small Improvements:'''
** When constructing geometry, tool tip with related information is shown next to cursor.
** '''Sketch view''' which sets the 3D view perpendicular to the sketch plane has now an icon in the Sketcher toolbar.

== Draft module == &lt;!--T:20--&gt;
* '''Taskmode''': The Taskview mode of the Draft module is now default. Fear not, if you liked the toolbar, it is still available in the Draft preferences settings.
* '''DXF importer''': The DXF importer now supports points (translate to [[Draft Point]]) and leaders (translate to [[Draft Wire]])
* '''Brand-new snapping system''': The [[Draft Snap|snapping system]] of the Draft module has been rewritten almost from scratch. It is now much easier to extend and use in other scripts and modules, has now new visuals with snap cursor icons, and a toolbar that allows to switch on/off individual snap locations or the whole snapping system.

&lt;!--T:21--&gt;
[[image:013-draft-snap.jpg|800px]]

&lt;!--T:22--&gt;
* '''Better constraining''': When entering 3D points, besides the existing Shift-constraining, you can now constrain the movement in X, Y or Z direction by pressing the {{KEY|X}}, {{KEY|Y}} or {{KEY|Z}} keys. Pressing them again switches constraining off.
* '''Draft &lt;-&gt; Sketch conversion''': The Draft workbench now features a new [[Draft_Draft2Sketch|Draft2Sketch]] conversion tool, that converts selected Draft objects (or any flat shape) to Sketches, and vice-versa.
* '''Clone tool''': Make copies of selected objects with this handy tool. When the original changes, the clone gets updated automatically. The clone can be moved, rotated, and also has a scale property that allows you to change the size of the copy.
* '''SVG importer''': The SVG importer now has much better support of bezier curves. Global definition of user units is now respected and the geometry is scaled properly to millimeter. Support for new elements such as ellipses rounded rectangles has been added. The parser has been reworked and now handles paths from Adobe Illustrator.
* '''Curved corners''': Several Draft objects ([[Draft Wire|Wires]], [[Draft Rectangle|Rectangles]] and [[Draft Polygon|Polygons]]) now have a '''Fillet Radius''' property, which curves their corners by the given radius value.

&lt;!--T:23--&gt;
[[image:013-draft-fillet.jpg|800px]]

&lt;!--T:24--&gt;
* '''2D view object''': The new [[Draft Shape2DView|Shape2DView]] tool allows to quickly place a 2D view of a selected object in the document. You can specify the projection vector.

&lt;!--T:25--&gt;
[[image:013-draft-shape2dview.jpg|800px]]

== Arch module == &lt;!--T:26--&gt;
* '''Draft integration''': The Arch and Draft modules are now tightly integrated. The Arch tools use the [[Draft Snap|Draft snapping]] system, and all the Draft tools are present in the Arch workbench. In fact, if you like, you can now completely switch off the Draft module (Preferences -&gt; Draft -&gt; Hide the Draft workbench)
* '''New wall tool''': The [[Arch Wall|wall tool]] has been greatly enhanced, and now features a direct drawing mode, that is activated when you press the Wall button with no object selected, that allows you to draw walls like you draw simple lines. In additions, walls now auto-connect when you snap to an existing wall.

&lt;!--T:27--&gt;
[[image:013-arch-wall.jpg|800px]]

&lt;!--T:28--&gt;
* '''New roof tool''': A new [[Arch Roof|roof tool]] is now available in the Arch module, that allows you to quickly create sloped roofs from a selected face.
* '''New window tool''': [[Arch Window|Windows]] are now created directly on top of a flat shape that contains one or more wires, such as a rectangle or a sketch. If that shape was drawn directly on a wall face, the window will automatically cut an opening in the wall.
* '''New sections system''': It is now very simple to create 2D plans, sections and elevations from your model: Place a [[Arch SectionPlane|Section Plane]] object, orient it the way you want, edit it to include the objects it must see, and you are done!
* '''New solid renderer''': In addition to the OpenCasCADe-based wireframe 2D renderer currently used by the [[Drawing Module]], the Arch module now features a new 2D renderer, that is able to render filled faces to a SVG Drawing sheet, giving much nicer 2D views.

&lt;!--T:29--&gt;
[[image:013-arch-vrm.jpg|800px]]

&lt;!--T:30--&gt;
* '''IFC import with [http://www.ifcopenshell.org IfcOpenShell]''': The Arch module can now use [http://www.ifcopenshell.org IfcOpenShell] if it is installed on your system. This allows for much more powerful IFC import, and all the contents of the IFC file are guaranteed to be imported.
* '''New floor and building objects''': Building and floors are now groups, so you can add and remove objects from them with a simple drag&amp;drop from the tree view.
* '''New axes system''': A new [[Arch Axis|axes system]] feature has been added, that allows to quickly layout complex axes systems. These axes can then be added to [[Arch Structure|Structure]] objects, so they spread automatically on the grid nodes.

&lt;!--T:31--&gt;
[[image:013-arch-axes.jpg|800px]]

&lt;!--T:32--&gt;
* '''Arch objects from meshes''': [[Arch Wall|Walls]] and [[Arch Structure|structures]] can now be made directly from a mesh, provided it is closed, solid and all edges are [http://doc.spatial.com/index.php/Manifold_and_Non-manifold_Objects manifold]. This allows for very quick transformation of geometry imported from other applications such as [http://www.blender.org blender] into valid Arch objects.

== Part module == &lt;!--T:33--&gt;
* '''Refine shape''' is a new utility that cleans up faces after a few operations on a shape. It can be set to run automatically after boolean operations in the Preferences.
* '''New Loft tool''' can extrude a complex set of surfaces or a solid shape through a series of sketches or Draft objects.
* '''New Sweep tool''' can extrude a complex set of surfaces or a solid shape through a series of sketches or Draft objects and a trajectory (sketch, edge or Draft object).
* '''New Offset tool''' can offset a single surface or a shape.
* '''New Thickness tool''' can hollow out a solid shape by setting a wall thickness and opening one or more faces. 
* '''Shape Builder''' and '''Create primitives''' are now in the Part toolbar for quick access.

== Part Design module == &lt;!--T:34--&gt;
* '''Pad''' and '''Pocket''' are now more powerful thanks to more parameters, such as extrude to first/to last, up to face, 2 dimensions, symmetric to plane.
* '''Chamfer''' and '''Fillet''' got an upgrade: selecting a face is now allowed, all the outer and inner edges of this face will be processed.
* '''Revolution''': a construction line can now be used as a revolution axis.
* '''New Groove tool''': cut matter from your solid by revolving a sketch.
* '''Linear pattern''', '''Mirrored''', '''Polar pattern''' and '''Multipattern''' tools, that allow you to align and distribute pads and pockets on a feature.
* A '''Shaft Wizard''' to help you design shaft objects

== Ship Design module == &lt;!--T:35--&gt;
* New ship module ([[FreeCAD-Ship_s60_tutorial|tutorial]])

== 3D mice == &lt;!--T:36--&gt;
* Support for 3D mice (Spaceball, Space Navigator) has been added to the Windows version.
* A new '''Spaceball Motion''' tab in the Customize dialog allows for fine tuning your 3D mouse to the settings you want, directly from FreeCAD.

== OpenSCAD module == &lt;!--T:37--&gt;
* This brand new (experimental) module brings OpenSCAD files import capability into FreeCAD. This file format is wildly popular in the RepRap community and on digital designs sharing site Thingiverse.
* OpenSCAD script can be executed from within FreeCAD, by OpenSCAD (if installed on your computer), with the result appearing in your FreeCAD document. 
* For more information see the [[OpenSCAD Module]] page on the FreeCAD wiki

&lt;!--T:38--&gt;
[[Category:News]]
[[Category:Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Release notes 014</title>
    <ns>0</ns>
    <id>22281</id>
    <redirect title="Release notes 0.14" />
    <revision>
      <id>90084</id>
      <parentid>88062</parentid>
      <timestamp>2014-06-04T06:26:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>p3bd86xhw01pyb8skqr8qdb5hit5l6y</sha1>
      <text xml:space="preserve" bytes="100">#REDIRECT [[Release_notes_0.14]]
&lt;noinclude&gt;[[Category:News]]
[[Category:Documentation]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Release notes 015</title>
    <ns>0</ns>
    <id>41776</id>
    <revision>
      <id>133473</id>
      <parentid>133471</parentid>
      <timestamp>2014-12-26T13:23:14Z</timestamp>
      <contributor>
        <username>Rockn</username>
        <id>1317</id>
      </contributor>
      <comment>/* General */</comment>
      <sha1>nzrb17zvk3rkp2cjxh3n2bsta76l6hl</sha1>
      <text xml:space="preserve" bytes="2521">{{VeryImportantMessage|Work in progress - do not translate yet!!}}
FreeCAD 0.15 was released on *****. This is a summary of the most interesting changes. The complete list of changes can be found in the [http://www.freecadweb.org/tracker/changelog_page.php Mantis changelog]. Older versions at: [[Release notes 014|0.14]] - [[Release notes 013|0.13]] - [[Release notes 012|0.12]] - [[Release notes 011|0.11]]


== General ==
* Import/Export now has an own section in the Edit &gt; Preferences section
* support of units in serveral sections now enabled
* Customized keyboard shortcuts now accept up to 4 keys
* Created new Lib Pack for Windows version
* VR Occulus Rift Support
* Support of custom global toolbars
=== Search box in Selection view ===
The selection window allow usurs to search inside the selected objects. Moreover you have now possibilities to select only one entity, unselect an entity, zoom fit on an entity and go to the entity in the tree view.

[[File:FeatureSelectionView.jpg]]

== Part Module Workbench ==
*New Feature: Parabola &amp; ArcOfParabola
*New Feature: Hyperbola &amp; ArcOfHyperbola

== Part Design &amp; Sketcher Workbench ==
* Added more regular polygons to sketcher
* Edit Sketch datum constraints from data Property view
* Sketcher new feature: Element widget (geometry is listed, like constraints are)
* Sketcher new feature: Selects the elements associated with the selected constraint(s)
* Sketcher new feature: Select Conflict and Redundant Constraints
* Sketcher feature enhancement: Symmetry constraint perpendicular to axis of symmetry
* Sketcher enhancement: Merge sketches
* Sketcher enhancement: Ellipse support

== Draft Workbench ==
* Allow sticky fonts in ShapeString

== Drawing Workbench ==
* Allow export drawing pages to DXF
* Reuse projection settings from an existing view when creating new draft views.

== Spreadsheet ==

== Arch Workbench ==
* Support for new ifc-importer/ifc-exporter
* Panel object
* Furniture
=== New feature: Cut object with plane ===
This new functionality makes it possible to cut an object according to a plan defines by the face of another object. It is possible to cut the object behind or in front of the plan chooses.

[[File:Arch_CutPlane_example.jpg]]
=== New roof tool ===
The Roof tool was completely remade and now makes it possible to define slopes different for each sides from roof, moreover it is possible to define a thickness of roof, the length of the overflow.

[[File:RoofExample.png]]


[[Category:News]]
[[Category:Documentation]]</text>
    </revision>
  </page>
  <page>
    <title>Release process</title>
    <ns>0</ns>
    <id>29411</id>
    <revision>
      <id>124961</id>
      <parentid>124960</parentid>
      <timestamp>2014-11-24T18:28:09Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>6fsbn2k77ttniu1e9c1na33c5zypems</sha1>
      <text xml:space="preserve" bytes="5560">
&lt;!--T:1--&gt;
The aim of this page is to gather ideas and organize things so official releases of FreeCAD require less work, and therefore can happen more often. This topic is discussed on this [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=6441 forum thread].

== General ideas == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
* The &quot;target release&quot; field of the [http://www.freecadweb.org/tracker tracker] should be used more, even on bugs that are not assigned to anybody, to mark bugs that we find important to solve before a release, or features we are working on, so others are aware of &quot;how close&quot; we are to release. This appears on the [http://freecadweb.org/tracker/roadmap_page.php roadmap].

&lt;!--T:4--&gt;
* We should find a way to process the list below (A &quot;tickable&quot; list somewhere?)

== Planning == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* Ideally official releases should happen each 3 to 6 months
* A signal should be emitted (by [[User:Jriegel|jriegel]]?) before the release (3 weeks?) so:
** No more new feature gets introduced, only bug fixes
** The strings are collected and uploaded to crowdin for translation
** The documentation can be fully updated
** The release notes can be prepared/finished

== Tasks == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
These are the tasks required for each release, with the name of the person responsible for it. Add your name if you want to take care of a task!


* [[User:Jriegel|jriegel]] - Giving the signal to the release (3 weeks before?)
* [[User:Yorik|yorik]] - Gathering the strings to translate and uploading them on crowdin
* [[User:Yorik|yorik]] - Announce on the forum and on social networks that translation is needed
* [[User:Yorik|yorik]] - Set the splashscreen
* Unassigned - Update years in source files
* Unassigned - Update dependencies in README
* Unassigned - Change the version number in the FreeCAD code
* Unassigned - Check that all workbenches pages on the wiki are up-to-date (all their commands are listed), list missing pages
* Unassigned - Manage the updates of the wiki
* Unassigned - Manage the release notes
* Unassigned - Update ChangeLog.txt
* [[User:Yorik|yorik]] - Merge back the translations from crowdin
* Unassigned - Check the german translation
* Unassigned - Check the french translation
* Unassigned - Check the other translations that have reached 100% (add them here)
* Unassigned - Tag the exact release commit in git
* Unassigned - Make the windows 32bit build
* Unassigned - Make the windows 64bit build
* Unassigned - Make the mac build
* Unassigned - Make the ubuntu stable build
* Unassigned - Check the windows 32bit build
* Unassigned - Check the windows 64bit build
* Unassigned - Check the mac build
* Unassigned - Check the ubuntu build
* Unassigned - Communicate the release to package managers of linux distributions (debian, fedora)
* [[User:Yorik|yorik]] - Update the release numbers on the tracker
* [[User:Yorik|yorik]] - Update the release numbers and download locations on the main web page for all languages
* [[User:Yorik|yorik]] - Update the python API doc pages
* Unassigned - Official release announcement on the FreeCAD web page
* Unassigned - Spread it around. see chapter Publicity


== Publicity == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
This is a raw list of sites and blogs that have at some point mentioned FreeCAD. It is mostly harvested from http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=143 (until June 29th 2014).

&lt;!--T:12--&gt;
Feel free to add more pages or assign one or more pages to yourself to take care of notifying them about a new release of FreeCAD.

=== Social networks === &lt;!--T:13--&gt;


* http://plus.google.com/107660967460246172334/posts
* [[User:Yorik|yorik]] - http://www.facebook.com/FreeCAD (also updates http://twitter.com/FreeCADNews automatically)

=== News Sites === &lt;!--T:15--&gt;


* http://makezine.com/
* http://www.webupd8.org/
* http://libregraphicsworld.org/
* http://www.techrepublic.com/
* http://www.linuxjournal.com/
* http://www.reddit.com/r/freecad (or http://www.reddit.com/r/cad/)
* http://hackaday.com/contact-hack-a-day/
* http://www.linuxformat.com/
* http://www.inside3dp.com/
* http://diy3dprinting.blogspot.com/

=== Other Sites === &lt;!--T:17--&gt;


* http://www.bld3r.com/
* http://forum.lulzbot.com/viewforum.php?f=30
* http://cad.about.com/
* http://en.wikipedia.org/wiki/FreeCAD
* http://forum.diigiit.com/

=== Spanish === &lt;!--T:19--&gt;


* http://www.taringa.net/

=== Blogs === &lt;!--T:21--&gt;


* http://www.junauza.com/
* http://www.blender3darchitect.com/
* http://linuxaideddesign.blogspot.de/
* http://www.techdrivein.com/
* http://sliptonic.com/
* http://opensourcedesigntools.blogspot.de/
* [[User:Yorik|yorik]] - http://yorik.uncreated.net

=== French === &lt;!--T:23--&gt;


* http://www.linuxgraphic.org/
* http://betlibre.wood3dservices.fr/

=== Portugese === &lt;!--T:25--&gt;


* http://www.geosaber.com.br/ (not sure how appropriate/relevant)

=== Spanish === &lt;!--T:27--&gt;


* http://www.iearobotics.com/blog/

=== Italian === &lt;!--T:29--&gt;


* http://ingegnerialibera.altervista.org/blog/doku.php

=== Polish === &lt;!--T:31--&gt;


* http://www.ubucentrum.net
* http://wkupiesila.blogspot.com
* http://cadblog.pl
* http://jakilinux.org/


=== Chinese === &lt;!--T:33--&gt;


* http://www.lirui.name/post/208.html


&lt;!--T:35--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Render project</title>
    <ns>0</ns>
    <id>2731</id>
    <revision>
      <id>32851</id>
      <parentid>32791</parentid>
      <timestamp>2013-05-01T08:48:14Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>minor</comment>
      <sha1>h6v0ptdzk4d9nlpbwq5xd0h9g2mxcm0</sha1>
      <text xml:space="preserve" bytes="6175">== Render Module ==

The render module provides a simple, straightforward way to quickly create rendered work of FreeCAD parts. It's philosophy is based on a template system so you can view your work more efficiently. The Render Module intends to hide the complicated Render Process from the user, so you can worry about designing parts. 


The render module is designed to work with multiple render back ends, but currently only LuxRender is supported. The workflow as follows:


* Create a Render Feature. 

* Select your desired presets and templates. 

* Assign materials to visible parts within your document. 

* Position your camera

* Preview the render


A brief explanation of the parts in the Render Module:

=== Render Feature ===

The Render Feature contains the information that will be passed to the Render such as camera and render settings, and materials and also what render plugin to use. This means you can create many different features with different materials, camera settings that are independent from each other. The feature also takes control over the rendering process. 

=== Render Material ===

Each Render Material is based on a Library Material which are stored in separate .XML files. These Render Materials can be assigned properties such as colour or shininess and other parameters. These materials are then attached to an object in the your document.    


{{clear}}

{{VeryImportantMessage|To use the new Render Workbench, currently you must be able to compile from the developer's branch.}}

=== Using the Render Module: ===

First checkout the following repository [https://github.com/mrlukeparry/FreeCAD_sf_master/tree/raytracing|raytracing raytracing] and checkout the 'render' branch. Then ensure you can build this. 

Download or install the latest 1.2.1 Lux Render for your system from [http://www.luxrender.net/en_GB/download download] and ensure this runs correctly.

Open FreeCAD and start the Raytracing workbench. You must next set the 'Executable Path' for Lux Render. This can be set in Edit-&gt;Preferences-&gt;Raytracing. This must be set to the path of the luxconsole executable.

[[File:luxRenderExecPath.png]]

Create your part(s) within FreeCAD. Then return to Raytracing workbench and create a 'Render Feature'. Editing this feature a new Task View will appear:

[[File:renderTaskView.png]]

When you create a Render Feature it will store the current position and type of Camera used in your 3D window. You can freely reposition this and click 'Save Camera' to store the current state of the camera into the feature. 

You can set other render settings:

==== Render Preset ====

Render Presets are specific to the render plugin that are used. They change the render process to improve the quality of the output or it the speed that the output is generated. With Lux Render, 'MLT Unbiased' produces good quality results in reasonable time. 'Direct Lighting Preview' produces a fast but low quality result.


==== Render Template ====

Render Templates are currently specific to the render plugin. By selecting a template, it will generate a preset scene such as lighting, geometry with your parts inside it. Currently 'Lux Classic' correctly works and produces satisfactory results. It will attempt to calculate the scene based on your camera position and the overall size of visible parts.

=== Start a Render ===

Once the feature's settings have been set. You can render the scene. For example this is the example scene. Any parts that are not visible in the document will not be included in the Render.

[[File:Example.png]]

The 'Preview Window' button will render the current view of the 3D window. The 'Preview' button will use the saved camera position and also the size of the output. Only one preview can be run at a time per feature, but you may run several render feature render processes. 

[[File:renderButtons.png]]

After starting a render. A new preview view will appear. Depending on the complexity of your scene, this may take a few seconds to be created whilst exported and loaded by the external render program. A loading screen will appear.

[[File:loading.png]]

If the render process is successful, the output will be automatically shown. You can freely move the image and zoom in and out.

[[File:sceneOutput.png]]


=== Unbiased Rendering ===
Essentially the render program will simulate light rays 'bouncing' through a scene. When this light hits a camera it will be visible in the output. Over time more rays hit the camera and an image builds up. At the beginning the image will look noisy where light hasn't reach the camera. 

When you are happy with the output, press 'Stop Render'. You may now save the output to a desired location (currently stored in a .png format)

[[File:unbiasedRendering.png]]

==== Render Speed ====
The render process are typically run on the CPU. The time taken for a satisfactory result, depends on the size of the output, the scene, the number and complexity of materials used, the lights and overall system performance. A quick preview for a simple part can take one minute, whilst a high quality output can taken several hours.


=== Attaching Materials ===

Ensure you are currently in edit mode for the Render feature. Click the Add materials in the tool bar. A list of library materials will be shown in the task view.You can scroll through these by dragging the list or using the mousewheel

[[File:materialSelection.png]]

To attach a material to a part in your document. Drag the material icon and drop it onto an part in the 3D view. 

[[File:materialDragNDrop.png]]

If the material has editable properties such as colour, a new dialog will appear in the task view. Otherwise the task view return to the Render Feature view.

[[File:materialProperties.png]]

When you're happy setting the properties, click 'Save'. 

All materials inside a render feature are displayed in the list view. These can be selected and deleted or if the material has a property it can be edited by double clicking this.

[[File:materialListView.png]]

[[Category:User Documentation]]

{{languages | {{es|Render_project/es}} {{fr|Render_project/fr}} {{it|Render_project/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Resource framework project</title>
    <ns>0</ns>
    <id>410</id>
    <revision>
      <id>123852</id>
      <parentid>123851</parentid>
      <timestamp>2014-11-18T20:20:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>pm6ylq19jik2glljlbh1xhh7pp88afi</sha1>
      <text xml:space="preserve" bytes="8050">
&lt;!--T:1--&gt;
This is the project plan for the FreeCAD resource framework as part of the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This is a software development project aimed to implement [http://en.wikipedia.org/wiki/Product_Data_Management Product Data Management (PDM)] capabilities. It's about implementing the bits and pieces needed.

&lt;!--T:3--&gt;
The development steps are planned here and tracked in the Mantis issue tracking system to get a well formed change log: http://www.freecadweb.org/tracker/change_log.php

== Outcome == &lt;!--T:4--&gt;
* Revision control for large design projects.
* share work with others over the internet/intranet(s): '''Collaboration'''
* Online and offline catalogs with [http://en.wikipedia.org/wiki/Interchangeable_parts standard parts].

== Brainstorming == &lt;!--T:5--&gt;

=== What the others do === &lt;!--T:6--&gt;
Here some links on comparable commercial products:
* PTC's [http://www.ptc.com/product/windchill/pdmlink PDMLink] - ''&quot;...when all product stakeholders are accessing a single, trusted, central data repository, manufacturers have the power to expertly manage all forms of digital product development data ... PDMLink is the ideal solution. Web-based for easy enterprise-wide access, this industry-proven product data management (PDM) system supports geographically dispersed teams while managing critical processes such as change/configuration management, and detailed design.&quot;''
* Aras Corp. [http://www.aras.com/ Aras PLM Software] - They appear to offer Open Source solutions, this may be worth investigating further...

=== Use Cases === &lt;!--T:7--&gt;
''Provided by Charles:''

&lt;!--T:8--&gt;
Of course there will different sorts of people using this software for different reasons, and they may need different PDM solutions perhaps, but it would be good to investigate solutions that could be universal. I see the following different methods of development (there must be others too):

&lt;!--T:9--&gt;
* Individual users - they will probably be a significant percentage of people working this way and they may be fairly self-contained, but revision control and branching still useful. Many of these people may be working in parts of the world where internet access is flaky or expensive, so they maybe working offline for long periods. Would be nice to make these individual projects very easily replicable by other people if it is a good piece of work - so the design can be evolved in multiple directions at once - lots of Darwinian evolution and faster exporing of the solution space

&lt;!--T:10--&gt;
* Small teams of people working together - perhaps from the same education institution - but each individual may want the freedom to explore all aspects of the project rather than rigidly assigned a particular part of the project. We find it generally allows more options to be easily explored and gives greater flexibility.

&lt;!--T:11--&gt;
* Wider open-source design projects - more members and geographically dispersed. The mirror of open-source software projects - where there does seem to be a general trend towards distributed systems (in fact Python [http://mail.python.org/pipermail/python-dev/2009-March/087931.html Moved] over to a DVCS last month). I see design and engineering going the same way for the same reasons. So I think there is all the more reason for us to think hard about how a distributed system could work in CAD - and if we solve this will have a big advantage over the commercial CAD vendors! I am convinced there is a solution (if we don't work it out, some other CAD system developer will!)

&lt;!--T:12--&gt;
* More rigid hierarchical project - there may be some projects where the teams prefer this arrangement but I can only see this as being popular within companies.

====The Blendswap website==== &lt;!--T:13--&gt;
[http://www.blendswap.com/ Blendswap] - in thier own words - is ''&quot;...the place to find and share blends with the entire world. You make awesome blends, share them in the biggest repository of open source 3D models made with the awesome Open Source 3D suite Blender.&quot;''

&lt;!--T:14--&gt;
[http://www.blender.org/ Blender] is a very popular open source '3D content creation suite'.

&lt;!--T:15--&gt;
Whilst not a CAD program, there are many parallels to be drawn and lessons to be learnt from the way Blender and it's community has gone about doing things.

&lt;!--T:16--&gt;
Blendswap is an excellent example of an '''online''' repository. It's key features that I beleive we can learn from are:
* Provides detailed thumbnail images on the website. This allows people to freely browse and find content quickly.
* The models (blend files) come with clear license details (these details are also quicky viewable at a glance from the thumbnail, via a Creative Commons logo).

=== Possible revision control systems === &lt;!--T:17--&gt;
It's only a small step to think of revision control the same way it's used in modern software development. There are basicly two different approaches to that matter:
* Structured, server centric ([http://subversion.tigris.org/ Subversion] or [http://www.nongnu.org/cvs/ CVS])
* Structured, distributed ([http://www.selenic.com/mercurial/wiki/ Mercurial], [http://bazaar-vcs.org/ Bazaar] and  [http://git-scm.com/ Git])

&lt;!--T:18--&gt;
Although the Use Cases demand a distributed revision control system, all the named has a major drawback. If you clone a repository all the previous versions will replicated to your computer. Which can, in the case of CAD data, be a very large Mb count. In contrast do the server centric systems only check out the head revision and therefore transfer relativly small amount of data. 

=== Licensing === &lt;!--T:19--&gt;
In a distributed internet project its needed that every document carries a clear license. Its even more importand if you think of catalogs. Catalog parts get used in projects (free and non free) and need there fore a clear license to make it usage clear. Since there different licensing systems out there, here a set of possible licenses for CAD files:

==== Creative Commons ==== &lt;!--T:20--&gt;
The CC licenses are very popular for creative material, you can find the description here: http://creativecommons.org

==== ISO 16016 ==== &lt;!--T:21--&gt;
fraganaut01 give us a plug to another licensing system for CAD:

&lt;!--T:22--&gt;
* Copyright by Provider (no more restrictions)
* Refer to protection notice ISO16016 (no special restriction)
* Confidential, for internal use only. Use only with confidentiality obligation. Refer to protection notice ISO16016
* Confidential, for internal use only. Refer to protection notice ISO16016
* Any dissemination only with the express approval of the originator



=== Design === &lt;!--T:23--&gt;
All the revision controlled data, catalogs, tutorials and so on, have to have some kind of representation in FreeCAD. All this can be summarized under the name '''Resource'''. There have to be a class design to hold this kind of resource information and distinguish the different cases.

=== Architecture === &lt;!--T:24--&gt;
This kine of service is per definition not only local to the user's machine. Its more up in the [http://en.wikipedia.org/wiki/Cloud_computing Cloud] and implemented on different services on different servers. There is to distinguish four kind of servers:
* Cheap Server - [http://en.wikipedia.org/wiki/LAMP_(software_bundle) LAMP]
* Full Server (e.g. Ubuntu/Debian server)
* Download server - e.g. sf.net
* [http://en.wikipedia.org/wiki/BitTorrent_(protocol) BitTorrent] tracker 

&lt;!--T:25--&gt;
Thad leads to following scenario:

&lt;!--T:26--&gt;
[[Image:ResourceFramework.png|1000px]]

== Organizing == &lt;!--T:27--&gt;

=== Research === &lt;!--T:28--&gt;
First of all the different alternatives of revision control systems have to be tested. To get hard numbers on how they behave on CAD data.

=== Design === &lt;!--T:29--&gt;
A class design for the Resource framwork.


== Next actions == &lt;!--T:30--&gt;
* Build up test repositories on the Server and two local machines
* Test different use cases

&lt;!--T:31--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot CreateRobot</title>
    <ns>0</ns>
    <id>1099</id>
    <revision>
      <id>98057</id>
      <parentid>98056</parentid>
      <timestamp>2014-07-24T19:24:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ngul8wuh4q23253ap488ku3kxg1nbam</sha1>
      <text xml:space="preserve" bytes="309">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot CreateRobot|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Insert robot}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot CreateTrajectory</title>
    <ns>0</ns>
    <id>1109</id>
    <revision>
      <id>98118</id>
      <parentid>98111</parentid>
      <timestamp>2014-07-24T19:35:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>dfjt976xfosg0l1pl5qjewxocge809t</sha1>
      <text xml:space="preserve" bytes="322">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot CreateTrajectory|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Create trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;




&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Edge2Trac</title>
    <ns>0</ns>
    <id>1114</id>
    <revision>
      <id>98167</id>
      <parentid>98166</parentid>
      <timestamp>2014-07-24T19:40:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gota7j503vqif8vlib1ognwbzljpqij</sha1>
      <text xml:space="preserve" bytes="315">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot Edge2Trac|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Edge to trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Export</title>
    <ns>0</ns>
    <id>1106</id>
    <revision>
      <id>98090</id>
      <parentid>98078</parentid>
      <timestamp>2014-07-24T19:31:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gv0q9za9ctkh4hc1ysobvr4pfwnfclh</sha1>
      <text xml:space="preserve" bytes="310">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot Export|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Export trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Icon</title>
    <ns>0</ns>
    <id>51422</id>
    <revision>
      <id>130365</id>
      <parentid>130364</parentid>
      <timestamp>2014-12-08T20:35:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>swtpdgikgfmuo5gx9hilema8avs1amn</sha1>
      <text xml:space="preserve" bytes="4192">
==[[Image:Workbench Robot.png|32px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Robot Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Robot CreateRobot.png|32px|Robot CreateRobot|link=Robot CreateRobot]] [[Robot CreateRobot|Robot CreateRobot]]
 &lt;nowiki&gt;[[Image:Robot CreateRobot.png|32px|Robot CreateRobot|link=Robot CreateRobot]] [[Robot CreateRobot|Robot CreateRobot]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Robot Simulate.png|32px|Robot Simulate|link=Robot Simulate]] [[Robot Simulate|Robot Simulate]]
 &lt;nowiki&gt;[[Image:Robot Simulate.png|32px|Robot Simulate|link=Robot Simulate]] [[Robot Simulate|Robot Simulate]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Robot Export.png|32px|Robot Export|link=Robot Export]] [[Robot Export|Robot Export]]
 &lt;nowiki&gt;[[Image:Robot Export.png|32px|Robot Export|link=Robot Export]] [[Robot Export|Robot Export]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Robot SetHomePos.png|32px|Robot SetHomePos|link=Robot SetHomePos]] [[Robot SetHomePos|Robot SetHomePos]]
 &lt;nowiki&gt;[[Image:Robot SetHomePos.png|32px|Robot SetHomePos|link=Robot SetHomePos]] [[Robot SetHomePos|Robot SetHomePos]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Robot RestoreHomePos.png|32px|Robot RestoreHomePos|link=Robot RestoreHomePos]] [[Robot RestoreHomePos|Robot RestoreHomePos]]
 &lt;nowiki&gt;[[Image:Robot RestoreHomePos.png|32px|Robot RestoreHomePos|link=Robot RestoreHomePos]] [[Robot RestoreHomePos|Robot RestoreHomePos]]&lt;/nowiki&gt;

===Robot CreateTrajectory no parametric=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[[Image:Robot CreateTrajectory.png|32px|Robot CreateTrajectory|link=Robot CreateTrajectory]] [[Robot CreateTrajectory|Robot CreateTrajectory]]
 &lt;nowiki&gt;[[Image:Robot CreateTrajectory.png|32px|Robot CreateTrajectory|link=Robot CreateTrajectory]] [[Robot CreateTrajectory|Robot CreateTrajectory]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Robot SetDefaultOrientation.png|32px|Robot SetDefaultOrientation|link=Robot SetDefaultOrientation]] [[Robot SetDefaultOrientation|Robot SetDefaultOrientation]]
 &lt;nowiki&gt;[[Image:Robot SetDefaultOrientation.png|32px|Robot SetDefaultOrientation|link=Robot SetDefaultOrientation]] [[Robot SetDefaultOrientation|Robot SetDefaultOrientation]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
[[Image:Robot SetDefaultValues.png|32px|Robot SetDefaultValues|link=Robot SetDefaultValues]] [[Robot SetDefaultValues|Robot SetDefaultValues]]
 &lt;nowiki&gt;[[Image:Robot SetDefaultValues.png|32px|Robot SetDefaultValues|link=Robot SetDefaultValues]] [[Robot SetDefaultValues|Robot SetDefaultValues]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Robot InsertWaypoint.png|32px|Robot InsertWaypoint|link=Robot InsertWaypoint]] [[Robot InsertWaypoint|Robot InsertWaypoint]]
 &lt;nowiki&gt;[[Image:Robot InsertWaypoint.png|32px|Robot InsertWaypoint|link=Robot InsertWaypoint]] [[Robot InsertWaypoint|Robot InsertWaypoint]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:Robot InsertWaypointPre.png|32px|Robot InsertWaypointPre|link=Robot InsertWaypointPre]] [[Robot InsertWaypointPre|Robot InsertWaypointPre]]
 &lt;nowiki&gt;[[Image:Robot InsertWaypointPre.png|32px|Robot InsertWaypointPre|link=Robot InsertWaypointPre]] [[Robot InsertWaypointPre|Robot InsertWaypointPre]]&lt;/nowiki&gt;

===Robot CreateTrajectory parametric=== &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
[[Image:Robot Edge2Trac.png|32px|Robot Edge2Trac|link=Robot Edge2Trac]] [[Robot Edge2Trac|Robot Edge2Trac]]
 &lt;nowiki&gt;[[Image:Robot Edge2Trac.png|32px|Robot Edge2Trac|link=Robot Edge2Trac]] [[Robot Edge2Trac|Robot Edge2Trac]]&lt;/nowiki&gt;

&lt;!--T:15--&gt;
[[Image:Robot TrajectoryDressUp.png|32px|Robot TrajectoryDressUp|link=Robot TrajectoryDressUp]] [[Robot TrajectoryDressUp|Robot TrajectoryDressUp]]
 &lt;nowiki&gt;[[Image:Robot TrajectoryDressUp.png|32px|Robot TrajectoryDressUp|link=Robot TrajectoryDressUp]] [[Robot TrajectoryDressUp|Robot TrajectoryDressUp]]&lt;/nowiki&gt;

&lt;!--T:16--&gt;
[[Image:Robot TrajectoryCompound.png|32px|Robot TrajectoryCompound|link=Robot TrajectoryCompound]] [[Robot TrajectoryCompound|Robot TrajectoryCompound]]
 &lt;nowiki&gt;[[Image:Robot TrajectoryCompound.png|32px|Robot TrajectoryCompound|link=Robot TrajectoryCompound]] [[Robot TrajectoryCompound|Robot TrajectoryCompound]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot InsertWaypoint</title>
    <ns>0</ns>
    <id>1112</id>
    <revision>
      <id>98135</id>
      <parentid>98134</parentid>
      <timestamp>2014-07-24T19:37:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bwxxjnxx0w9wo4rqyjss4dankjbtptx</sha1>
      <text xml:space="preserve" bytes="322">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot InsertWaypoint|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Insert in trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot InsertWaypointPre</title>
    <ns>0</ns>
    <id>1113</id>
    <revision>
      <id>98146</id>
      <parentid>98145</parentid>
      <timestamp>2014-07-24T19:39:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>kawwl3ujtyhhd0g5ndmzud53g1msgov</sha1>
      <text xml:space="preserve" bytes="325">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot InsertWaypointPre|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Insert in trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Key</title>
    <ns>0</ns>
    <id>51447</id>
    <revision>
      <id>131464</id>
      <parentid>130991</parentid>
      <timestamp>2014-12-13T21:27:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>9sp3jeusip7gbhzz4ecxa28tx9vhsvu</sha1>
      <text xml:space="preserve" bytes="4395">
==[[File:Workbench Robot.png|32px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Workbench Robot]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Robot CreateRobot.png|16px|Robot CreateRobot|link=Robot CreateRobot]] [[Robot CreateRobot|Robot CreateRobot]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot CreateRobot.png|16px|Robot CreateRobot|link=Robot CreateRobot]] [[Robot CreateRobot|Robot CreateRobot]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Robot Simulate.png|16px|Robot Simulate|link=Robot Simulate]] [[Robot Simulate|Robot Simulate]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot Simulate.png|16px|Robot Simulate|link=Robot Simulate]] [[Robot Simulate|Robot Simulate]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Robot Export.png|16px|Robot Export|link=Robot Export]] [[Robot Export|Robot Export]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot Export.png|16px|Robot Export|link=Robot Export]] [[Robot Export|Robot Export]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Robot SetHomePos.png|16px|Robot SetHomePos|link=Robot SetHomePos]] [[Robot SetHomePos|Robot SetHomePos]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot SetHomePos.png|16px|Robot SetHomePos|link=Robot SetHomePos]] [[Robot SetHomePos|Robot SetHomePos]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Robot RestoreHomePos.png|16px|Robot RestoreHomePos|link=Robot RestoreHomePos]] [[Robot RestoreHomePos|Robot RestoreHomePos]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot RestoreHomePos.png|16px|Robot RestoreHomePos|link=Robot RestoreHomePos]] [[Robot RestoreHomePos|Robot RestoreHomePos]]}}&lt;/nowiki&gt;

===Robot CreateTrajectory no parametric=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Robot CreateTrajectory.png|16px|Robot CreateTrajectory|link=Robot CreateTrajectory]] [[Robot CreateTrajectory|Robot CreateTrajectory]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot CreateTrajectory.png|16px|Robot CreateTrajectory|link=Robot CreateTrajectory]] [[Robot CreateTrajectory|Robot CreateTrajectory]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Robot SetDefaultOrientation.png|16px|Robot SetDefaultOrientation|link=Robot SetDefaultOrientation]] [[Robot SetDefaultOrientation|Robot SetDefaultOrientation]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot SetDefaultOrientation.png|16px|Robot SetDefaultOrientation|link=Robot SetDefaultOrientation]] [[Robot SetDefaultOrientation|Robot SetDefaultOrientation]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Robot SetDefaultValues.png|16px|Robot SetDefaultValues|link=Robot SetDefaultValues]] [[Robot SetDefaultValues|Robot SetDefaultValues]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot SetDefaultValues.png|16px|Robot SetDefaultValues|link=Robot SetDefaultValues]] [[Robot SetDefaultValues|Robot SetDefaultValues]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Robot InsertWaypoint.png|16px|Robot InsertWaypoint|link=Robot InsertWaypoint]] [[Robot InsertWaypoint|Robot InsertWaypoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot InsertWaypoint.png|16px|Robot InsertWaypoint|link=Robot InsertWaypoint]] [[Robot InsertWaypoint|Robot InsertWaypoint]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:Robot InsertWaypointPre.png|16px|Robot InsertWaypointPre|link=Robot InsertWaypointPre]] [[Robot InsertWaypointPre|Robot InsertWaypointPre]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot InsertWaypointPre.png|16px|Robot InsertWaypointPre|link=Robot InsertWaypointPre]] [[Robot InsertWaypointPre|Robot InsertWaypointPre]]}}&lt;/nowiki&gt;

===Robot CreateTrajectory parametric=== &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:Robot Edge2Trac.png|16px|Robot Edge2Trac|link=Robot Edge2Trac]] [[Robot Edge2Trac|Robot Edge2Trac]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot Edge2Trac.png|16px|Robot Edge2Trac|link=Robot Edge2Trac]] [[Robot Edge2Trac|Robot Edge2Trac]]}}&lt;/nowiki&gt;

&lt;!--T:15--&gt;
{{KEY|[[File:Robot TrajectoryDressUp.png|16px|Robot TrajectoryDressUp|link=Robot TrajectoryDressUp]] [[Robot TrajectoryDressUp|Robot TrajectoryDressUp]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot TrajectoryDressUp.png|16px|Robot TrajectoryDressUp|link=Robot TrajectoryDressUp]] [[Robot TrajectoryDressUp|Robot TrajectoryDressUp]]}}&lt;/nowiki&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Robot TrajectoryCompound.png|16px|Robot TrajectoryCompound|link=Robot TrajectoryCompound]] [[Robot TrajectoryCompound|Robot TrajectoryCompound]]}}
 &lt;nowiki&gt;{{KEY|[[File:Robot TrajectoryCompound.png|16px|Robot TrajectoryCompound|link=Robot TrajectoryCompound]] [[Robot TrajectoryCompound|Robot TrajectoryCompound]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Robot Module</title>
    <ns>0</ns>
    <id>1149</id>
    <redirect title="Robot Workbench" />
    <revision>
      <id>4828</id>
      <timestamp>2011-02-20T01:46:52Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Robot Workbench]]</comment>
      <sha1>9gtr1xzhk1c7lderyfo9jwcnos6l1um</sha1>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Robot Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Robot RestoreHomePos</title>
    <ns>0</ns>
    <id>1108</id>
    <revision>
      <id>98101</id>
      <parentid>98100</parentid>
      <timestamp>2014-07-24T19:32:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3swe9temvos1euk1quoqpy98fu2cww7</sha1>
      <text xml:space="preserve" bytes="325">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot RestoreHomePos|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Restore home position}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;




&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot SetDefaultOrientation</title>
    <ns>0</ns>
    <id>1110</id>
    <revision>
      <id>98113</id>
      <parentid>98112</parentid>
      <timestamp>2014-07-24T19:35:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gicmc8nfvodoayhnlcu4hqx9dos1h7q</sha1>
      <text xml:space="preserve" bytes="333">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot SetDefaultOrientation|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Set default orientation}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot SetDefaultValues</title>
    <ns>0</ns>
    <id>1111</id>
    <revision>
      <id>98155</id>
      <parentid>98133</parentid>
      <timestamp>2014-07-24T19:39:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>iapfpmaaz2g6hyqfjc5se5xbojii56e</sha1>
      <text xml:space="preserve" bytes="323">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot SetDefaultValues|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Set default values}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot SetHomePos</title>
    <ns>0</ns>
    <id>1107</id>
    <revision>
      <id>98080</id>
      <parentid>98079</parentid>
      <timestamp>2014-07-24T19:31:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>btskm5i5hrq2dpces0hhlcvc55l68sw</sha1>
      <text xml:space="preserve" bytes="316">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot SetHomePos|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Set home position}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;




&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Simulate</title>
    <ns>0</ns>
    <id>1105</id>
    <revision>
      <id>98068</id>
      <parentid>98067</parentid>
      <timestamp>2014-07-24T19:27:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>occi4pa3qv0q07qtr7hg8uhewrwwfn7</sha1>
      <text xml:space="preserve" bytes="317">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot Simulate|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → Simulate a trajectory}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot TrajectoryCompound</title>
    <ns>0</ns>
    <id>1116</id>
    <revision>
      <id>98189</id>
      <parentid>98188</parentid>
      <timestamp>2014-07-24T19:44:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jfp2jl52k8men4qtytqvlr5fjpb5smj</sha1>
      <text xml:space="preserve" bytes="325">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot TrajectoryCompound|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → TrajectoryCompound}}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot TrajectoryDressUp</title>
    <ns>0</ns>
    <id>1115</id>
    <revision>
      <id>98178</id>
      <parentid>98177</parentid>
      <timestamp>2014-07-24T19:42:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0pybc5vorplftdx0go5bp5bvsk8wpr7</sha1>
      <text xml:space="preserve" bytes="324">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Robot TrajectoryDressUp|Workbenches=[[Robot_Workbench|Robot]]|MenuLocation=Robot → TrajectoryDressUp }}

====Description==== &lt;!--T:3--&gt;

====Usage==== &lt;!--T:4--&gt;



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot Workbench</title>
    <ns>0</ns>
    <id>481</id>
    <revision>
      <id>110032</id>
      <parentid>110031</parentid>
      <timestamp>2014-09-21T17:46:38Z</timestamp>
      <contributor>
        <username>Drei</username>
        <id>3319</id>
      </contributor>
      <minor/>
      <comment>Fixed dead links (changed from sourceforge links to github)</comment>
      <sha1>gymgwdblnwsycnog43yff0dl7u96j50</sha1>
      <text xml:space="preserve" bytes="7843">
&lt;!--T:1--&gt;
[[Image:KukaKR16FreeCAD.jpg|right|400px]]

&lt;!--T:2--&gt;
The robot workbench is a tool to simulate industrial grade [[6-Axis Robot]]s, like e.g. [http://kuka.com/ Kuka].
You can do the following tasks:
* set up a simulation environment with a robot and work pieces
* create and fill up trajectories
* decompose features of an CAD part to a trajectory
* simulate the robot movement and reachability 
* export the trajectory to a robot program file

&lt;!--T:3--&gt;
You can find an example here:
[https://github.com/FreeCAD/FreeCAD_sf_master/blob/master/src/Mod/Robot/RobotExample.py Example files] or try 
the [[Robot tutorial]].

== Tools == &lt;!--T:4--&gt;
Here the principal commands you can use to create a robot set-up. 

=== Robots === &lt;!--T:5--&gt;
The tools to create and manage the 6-Axis robots

&lt;!--T:6--&gt;
* [[Image:Robot_CreateRobot.png|30px]] [[Robot_CreateRobot|Create a robot]]: Insert a new robot into the scene
* [[Image:Robot_Simulate.png|30px]] [[Robot_Simulate|Simulate a trajectory]]: Opens the simulation dialog and let you simulate 
* [[Image:Robot_Export.png|30px]] [[Robot_Export|Export a trajectory]]: Export a robot program file
* [[Image:Robot_SetHomePos.png|30px]] [[Robot_SetHomePos|Set home positon]]: Set the home position of an robot
* [[Image:Robot_RestoreHomePos.png|30px]] [[Robot_RestoreHomePos|Restore home positon]]: move the robot to its home position

=== Trajectories === &lt;!--T:7--&gt;
Tools to creat and manipulate trajectories. There are two kinds, the parametric and non parametric ones.

==== non parametric ==== &lt;!--T:8--&gt;
* [[Image:Robot_CreateTrajectory.png|30px]] [[Robot_CreateTrajectory|Create a trajectory]]: Insert a new robot into the scene
* [[Image:Robot_SetDefaultOrientation.png|30px]] [[Robot_SetDefaultOrientation|Set the default orientation]]: Set the orientation way-points gets created by default
* [[Image:Robot_SetDefaultValues.png|30px]] [[Robot_SetDefaultValues|Set the default speed parameter]]: set the defaults for way-point creation
* [[Image:Robot_InsertWaypoint.png|30px]] [[Robot_InsertWaypoint|Insert a waypoint]]: Insert a way-point from the current robot position into a trajectory
* [[Image:Robot_InsertWaypointPre.png|30px]] [[Robot_InsertWaypointPre|Insert a waypoint]]: Insert a way-point from the current mouse position into a trajectory

==== parametric ==== &lt;!--T:9--&gt;
* [[Image:Robot_Edge2Trac.png|30px]] [[Robot_Edge2Trac|Create a trajectory out of edges]]: Insert a new object which decompose edges to a trajectory
* [[Image:Robot_TrajectoryDressUp.png|30px]] [[Robot_TrajectoryDressUp|Dress-up a trajectory]]: Let you override one or more properties of a trajectory
* [[Image:Robot_TrajectoryCompound.png|30px]] [[Robot_TrajectoryCompound|Trajectory compound]]: create a compound out of some single trajectories

== Scripting == &lt;!--T:10--&gt;
This section is generated out of: https://github.com/FreeCAD/FreeCAD_sf_master/blob/master/src/Mod/Robot/RobotExample.py
You can use this file directly if you want.

&lt;!--T:11--&gt;
Example how to use the basic robot class Robot6Axis which represents a 6-axis 
industrial robot. The Robot module is  dependent on Part but not on other modules.
It works mostly with the basic types Placement, Vector and Matrix. So we need 
only:

 from Robot import *
 from Part import *
 from FreeCAD import *
 
=== Basic robot stuff === &lt;!--T:12--&gt;
create the robot. If you do not specify another kinematic it becomes a Puma 560

 rob = Robot6Axis()
 print rob
 
&lt;!--T:13--&gt;
accessing the axis and the Tcp. Axes go from 1-6 and are in degree:

 Start = rob.Tcp
 print Start
 print rob.Axis1
 
&lt;!--T:14--&gt;
move the first axis of the robot:

 rob.Axis1 = 5.0

&lt;!--T:15--&gt;
the Tcp has changed (forward kinematic)

 print rob.Tcp
 
&lt;!--T:16--&gt;
move the robot back to start position (reverse kinematic):

 rob.Tcp = Start
 print rob.Axis1
 
&lt;!--T:17--&gt;
the same with axis 2:

 rob.Axis2 = 5.0
 print rob.Tcp
 rob.Tcp = Start
 print rob.Axis2
 
&lt;!--T:18--&gt;
Waypoints:

 w = Waypoint(Placement(),name=&quot;Pt&quot;,type=&quot;LIN&quot;)
 print w.Name,w.Type,w.Pos,w.Cont,w.Velocity,w.Base,w.Tool
 
&lt;!--T:19--&gt;
generate more. The trajectory always finds automatically a unique name for the waypoints

 l = [w]
 for i in range(5):
   l.append(Waypoint(Placement(Vector(0,0,i*100),Vector(1,0,0),0),&quot;LIN&quot;,&quot;Pt&quot;))
 
&lt;!--T:20--&gt;
create a trajectory  

 t = Trajectory(l)
 print t
 for i in range(7):
   t.insertWaypoints(Waypoint(Placement(Vector(0,0,i*100+500),Vector(1,0,0),0),&quot;LIN&quot;,&quot;Pt&quot;))
 
&lt;!--T:21--&gt;
see a list of all waypoints:

 print t.Waypoints
 
 del rob,Start,t,l,w
 
=== Working with the document objects === &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
Working with the robot document objects:
first create a robot in the active document

 if(App.activeDocument() == None):App.newDocument()
 
 App.activeDocument().addObject(&quot;Robot::RobotObject&quot;,&quot;Robot&quot;)

&lt;!--T:24--&gt;
Define the visual representation and the kinematic definition (see [[6-Axis Robot]] and [[VRML Preparation for Robot Simulation]] for details about that)

 App.activeDocument().Robot.RobotVrmlFile = App.getResourceDir()+&quot;Mod/Robot/Lib/Kuka/kr500_1.wrl&quot;
 App.activeDocument().Robot.RobotKinematicFile = App.getResourceDir()+&quot;Mod/Robot/Lib/Kuka/kr500_1.csv&quot;

&lt;!--T:25--&gt;
start positon of the Axis (only that which differ from 0)

 App.activeDocument().Robot.Axis2 = -90
 App.activeDocument().Robot.Axis3 = 90
 
&lt;!--T:26--&gt;
retrieve the Tcp position 

 pos = FreeCAD.getDocument(&quot;Unnamed&quot;).getObject(&quot;Robot&quot;).Tcp

&lt;!--T:27--&gt;
move the robot

 pos.move(App.Vector(-10,0,0))
 FreeCAD.getDocument(&quot;Unnamed&quot;).getObject(&quot;Robot&quot;).Tcp = pos
 
&lt;!--T:28--&gt;
create an empty Trajectory object in the active document

 App.activeDocument().addObject(&quot;Robot::TrajectoryObject&quot;,&quot;Trajectory&quot;)

&lt;!--T:29--&gt;
get the Trajectory

 t = App.activeDocument().Trajectory.Trajectory

&lt;!--T:30--&gt;
add the actual TCP position of the robot to the trajectory

 StartTcp = App.activeDocument().Robot.Tcp
 t.insertWaypoints(StartTcp)
 App.activeDocument().Trajectory.Trajectory = t
 print App.activeDocument().Trajectory.Trajectory
 
&lt;!--T:31--&gt;
insert some more Waypoints and the start point at the end again:

 for i in range(7):
   t.insertWaypoints(Waypoint(Placement(Vector(0,1000,i*100+500),Vector(1,0,0),i),&quot;LIN&quot;,&quot;Pt&quot;))
 
 t.insertWaypoints(StartTcp) # end point of the trajectory
 App.activeDocument().Trajectory.Trajectory = t
 print App.activeDocument().Trajectory.Trajectory


=== Simulation === &lt;!--T:32--&gt;
To be done..... 
 
=== Exporting the trajectory ===
The trajectory is exported by Python. That means for every control cabinet type there is a post-processor
Python module. Here is in detail the Kuka post-processor described

 from KukaExporter import ExportCompactSub
 
 ExportCompactSub(App.activeDocument().Robot,App.activeDocument().Trajectory,'D:/Temp/TestOut.src')
 
&lt;!--T:33--&gt;
and that's kind of how it's done:

 for w in App.activeDocument().Trajectory.Trajectory.Waypoints:
 	(A,B,C) = (w.Pos.Rotation.toEuler())
 	print (&quot;LIN {X %.3f,Y %.3f,Z %.3f,A %.3f,B %.3f,C %.3f} ; %s&quot;%(w.Pos.Base.x,w.Pos.Base.y,w.Pos.Base.z,A,B,C,w.Name))


== Tutorials == &lt;!--T:34--&gt;
* [[6-Axis_Robot|6-Axis_Robot]]
* [[VRML Preparation for Robot Simulation|VRML Preparation for Robot Simulation]]

&lt;!--T:35--&gt;
{{docnav|Arch Module|Standard Menu}}

&lt;!--T:36--&gt;
[[Category:User Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Robot project</title>
    <ns>0</ns>
    <id>455</id>
    <revision>
      <id>123658</id>
      <parentid>123657</parentid>
      <timestamp>2014-11-17T21:10:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>to31j1dkau5t5pql2nt6j0zu4mwaasy</sha1>
      <text xml:space="preserve" bytes="2510">
&lt;!--T:1--&gt;
This is the project article for the Robot project. It follows the rules of the [http://en.wikipedia.org/wiki/Getting_Things_Done#GTD_methodology| Getting things done] process. The projects are collected in the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This project should lay down the principal technologies for a realistic robot simulation in FreeCAD. In the first step
it targets the standard 6-axis industrial robot.

== Outcome == &lt;!--T:3--&gt;
Robot simulation

&lt;!--T:4--&gt;
[[Image:Robot.jpg]]

== Brainstorming == &lt;!--T:5--&gt;

=== Libs in field === &lt;!--T:6--&gt;
* [http://www.orocos.org/ OROCOS]libs for inverse kinematic
* [http://www.cours.polymtl.ca/roboop/ ROBOOP] targets directly to robot simulation, but seems inactive.
* [http://www.beremiz.org/ Beremiz] a OpenSource PLC.

=== Standards for communication === &lt;!--T:7--&gt;
* [http://en.wikipedia.org/wiki/OPC_Unified_Architecture OPC UA] to communicate with PLCs
* [http://www.ipk.fraunhofer.de/geschaeftsfelder/automatisierungstechnik/prozessautomatisierung-und-robotik/forschung-und-entwicklung/rrs-realistic-robot-simulation RRS-II] German standard for robot simulation communication

=== Middleware for comunication === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* [http://en.wikipedia.org/wiki/D-Bus D-Bus]
* [http://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture CORBA]

=== Commercial products in that field === &lt;!--T:10--&gt;
* [http://www.visualcomponents.com/Solutions/Robot-Simulation Visual Components]
* [http://www.3ds.com/products/delmia/welcome/ Delmia]
* [http://www.kuka-robotics.com/germany/en/products/software/kuka_sim/start.htm KUKA Sim]

=== Knowledge === &lt;!--T:11--&gt;
* [http://prt.fernuni-hagen.de/lehre/KURSE/PRT001/course_main/node15.html Kinematic definition]
* [http://www.iha.tut.fi/education/IHA-3500/robotlib/ Roboter VRML modele]

== Organizing == &lt;!--T:12--&gt;
* Visual representation of 6-Axis robots (done)
* Forward and inverse kinematic calculation of arbitrary robots (done)
* RobotLib, dynamic readably robot types (work in progress) 
* Trajectory simulation (work in progress)
** collision simulation
** detection of configuration changes and singularities 
** time estimation
** used volume (planed)
* Post processor for Kuka robots (work in progress)
* Process and work cell control (planed)
* Movie making out of simulation (planed)

== Next actions == &lt;!--T:13--&gt;
* Trajectory and Waypoint management.

&lt;!--T:14--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Robot tutorial</title>
    <ns>0</ns>
    <id>1104</id>
    <revision>
      <id>84505</id>
      <parentid>84504</parentid>
      <timestamp>2014-05-18T20:45:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>c7vdw68dkkcv97sod0yso6ja49y8lej</sha1>
      <text xml:space="preserve" bytes="612">
&lt;!--T:1--&gt;
This tutorial is here to teach you how to use the [[Robot Workbench]] to simulate a robot cell set-up.

== before you begin == &lt;!--T:2--&gt;
This tutorial is written for FreeCAD Version 0.11 R3977 or higher. So if you don't have FreeCAD on your 
computer go to the [[Download]] page and do the installation. 

&lt;!--T:3--&gt;
This tutorial targeting on the use of [http://en.wikipedia.org/wiki/Industrial_robot industrial robots]
and not mobile or service robots (see [http://en.wikipedia.org/wiki/Robot#Modern_robots here]).

&lt;!--T:4--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Réglage des préférences</title>
    <ns>0</ns>
    <id>859</id>
    <revision>
      <id>108089</id>
      <parentid>91014</parentid>
      <timestamp>2014-09-01T19:48:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>STEP project</title>
    <ns>0</ns>
    <id>16881</id>
    <revision>
      <id>67368</id>
      <parentid>67367</parentid>
      <timestamp>2014-02-13T22:16:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>j2tgp827gjytzqmjuz8b1dodu7oqph7</sha1>
      <text xml:space="preserve" bytes="2526">
&lt;!--T:1--&gt;
This template is the guideline for a FreeCAD development project. It follows the rules of the [http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology Getting Things Done (GTD)] process. The projects are collected in the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This is a development project to find, discuss and implement a more advanced STEP i/o in FreeCAD. 

== Outcome == &lt;!--T:3--&gt;
* reading/writing complex STEP files into Assembly data definition (with color and all the additional information).
* ....

== Brainstorming == &lt;!--T:4--&gt;
First we need to colect all the information about the matter 

=== general STEP === &lt;!--T:5--&gt;
The ISO 10303 (STEP) is very important in this field. Its the only good standardized and widely discussed
and recognized definition of product structures I know of. 

&lt;!--T:6--&gt;
[[Image:Product structure modeling Process-Data diagram.gif]]
{{clear}}

&lt;!--T:7--&gt;
Here some links with info:
* [http://en.wikipedia.org/wiki/ISO_10303 ISO 10303 on Wikipedia]
* [http://www.wikistep.org/index.php/Main_Page WikiStep.org] with a lot of basic info but mostly toward STEP-NC
* The [http://www.wikistep.org/index.php/Product_Basics product structure] in STEP
* Some [http://www.wikistep.org/index.php/STEP_Tutorial examples] about STEP
* [http://en.wikipedia.org/wiki/ISO_10303-11  ISO 10303-11] about the modeling language (EXPRESS)
* [http://en.wikipedia.org/wiki/Product_Structure_Modeling A Wikipedia article] about product modeling
* [http://www.steptools.com/support/stdev_docs/express/step_irs/index.html#part41 Overview of Part 41 -- Fundamentals of Product Description and Support]
* [http://www.steptools.com/support/stdev_docs/express/step_irs/index.html#part44 Overview of Part 44 (edition 2) -- Product Structure Configuration]
* [http://www.steptools.com/support/stdev_docs/express/ap214/index.html Examples of small AP 214 files]
* [http://www.cax-if.org/library/index.html STEP validation models]
* [http://jotneit.no/www2/www/pdm/pdm_schema/diagrams/diagram_0002.htm Interactive documentation with EXPRESS-G diagrams]
* [http://stepcode.org/stepcode-use-doxygen STEPCode Doxygen docu with diagrams]

=== OCC step i/o information === &lt;!--T:8--&gt;
* [http://dev.opencascade.org/doc/overview/html/user_guides__step.html documentation on OCC step]

== Organizing == &lt;!--T:9--&gt;


== Next actions == &lt;!--T:10--&gt;
* collecting information and testing OCC STEP classes

&lt;!--T:11--&gt;
{{clear}}
[[Category:Roadmap]]


</text>
    </revision>
  </page>
  <page>
    <title>Scenegraph</title>
    <ns>0</ns>
    <id>442</id>
    <revision>
      <id>112024</id>
      <parentid>112023</parentid>
      <timestamp>2014-10-01T19:57:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mdxyyw8dqv9e8l5m650cmq8asvg4phb</sha1>
      <text xml:space="preserve" bytes="5365">
&lt;!--T:1--&gt;
FreeCAD is basically a collage of different powerful libraries, the most important being [http://en.wikipedia.org/wiki/Open_CASCADE openCascade], for managing and constructing geometry, [http://en.wikipedia.org/wiki/Coin3D Coin3d] to display that geometry, and [http://en.wikipedia.org/wiki/Qt_(toolkit) Qt] to put all this in a nice Graphical User Interface.

&lt;!--T:2--&gt;
The geometry that appears in the 3D views of FreeCAD are rendered by the Coin3D library. Coin3D is an implementation of the [http://en.wikipedia.org/wiki/Open_Inventor OpenInventor] standard. The openCascade software also provides the same functionality, but it was decided, at the very beginnings of FreeCAD, not to use the built-in openCascade viewer and rather switch to the more performant coin3D software. A good way to learn about that library is the book [http://www-evasion.imag.fr/Membres/Francois.Faure/doc/inventorMentor/sgi_html/ Open Inventor Mentor].

&lt;!--T:3--&gt;
[http://en.wikipedia.org/wiki/Open_Inventor OpenInventor] is actually a 3D scene description language. The scene described in openInventor is then rendered in OpenGL on your screen. Coin3D takes care of doing this, so the programmer doesn't need to deal with complex openGL calls, he just has to provide it with valid OpenInventor code. The big advantage is that openInventor is a very well-known and well documented standard.

&lt;!--T:4--&gt;
One of the big jobs FreeCAD does for you is basically to translate openCascade geometry information into openInventor language.

&lt;!--T:5--&gt;
OpenInventor describes a 3D scene in the form of a [http://en.wikipedia.org/wiki/Scene_graph scenegraph], like the one below:

&lt;!--T:6--&gt;
[[Image:Scenegraph.gif]]
image from [http://www-evasion.imag.fr/~Francois.Faure/doc/inventorMentor/sgi_html/index.html Inventor mentor]

&lt;!--T:7--&gt;
An openInventor scenegraph describes everything that makes part of a 3D scene, such as geometry, colors, materials, lights, etc, and organizes all that data in a convenient and clear structure. Everything can be grouped into sub-structures, allowing you to organize your scene contents pretty much the way you like. Here is an example of an openInventor file:

&lt;syntaxhighlight&gt;
 #Inventor V2.0 ascii
 
 Separator { 
     RotationXYZ {	
        axis Z
        angle 0
     }
     Transform {
        translation 0 0 0.5
     }
     Separator {	
        Material {
           diffuseColor 0.05 0.05 0.05
        }
        Transform {
           rotation 1 0 0 1.5708
           scaleFactor 0.2 0.5 0.2
        }
        Cylinder {
        }
     }
 }

&lt;/syntaxhighlight&gt;


&lt;!--T:8--&gt;
As you can see, the structure is very simple. You use separators to organize your data into blocks, a bit like you would organize your files into folders. Each statement affects what comes next, for example the first two items of our root separator are a rotation and a translation, both will affect the next item, which is a separator. In that separator, a material is defined, and another transformation. Our cylinder will therefore be affected by both transformations, the one who was applied directly to it and the one that was applied to its parent separator.

&lt;!--T:9--&gt;
We also have many other types of elements to organize our scene, such as groups, switches or annotations. We can define very complex materials for our objects, with color, textures, shading modes and transparency. We can also define lights, cameras, and even movement. It is even possible to embed pieces of scripting in openInventor files, to define more complex behaviours.

&lt;!--T:10--&gt;
If you are interested in learning more about openInventor, head directly to its most famous reference, the [http://www-evasion.imag.fr/~Francois.Faure/doc/inventorMentor/sgi_html/index.html Inventor mentor].

&lt;!--T:11--&gt;
In FreeCAD, normally, we don't need to interact directly with the openInventor scenegraph. Every object in a FreeCAD document, being a mesh, a part shape or anything else, gets automatically converted to openInventor code and inserted in the main scenegraph that you see in a 3D view. That scenegraph gets updated continuously when you do modifications, add or remove objects to the document. In fact, every object (in App space) has a view provider (a corresponding object in Gui space), responsible for issuing openInventor code.

&lt;!--T:12--&gt;
But there are many advantages to be able to access the scenegraph directly. For example, we can temporarily change the appearence of an object, or we can add objects to the scene that have no real existence in the FreeCAD document, such as construction geometry, helpers, graphical hints or tools such as manipulators or on-screen information.

&lt;!--T:13--&gt;
FreeCAD itself features several tools to see or modify openInventor code. For example, the following python code will show the openInventor representation of a selected object:

&lt;syntaxhighlight&gt;
 obj = FreeCAD.ActiveDocument.ActiveObject
 viewprovider = obj.ViewObject
 print viewprovider.toString()

&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
But we also have a python module that allows complete access to anything managed by Coin3D, such as our FreeCAD scenegraph. So, read on to [[Pivy]].

&lt;!--T:15--&gt;
{{docnav|Mesh to Part|Pivy}}

&lt;!--T:16--&gt;
[[Category:Poweruser Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Screenshots</title>
    <ns>0</ns>
    <id>122</id>
    <revision>
      <id>87738</id>
      <parentid>84533</parentid>
      <timestamp>2014-05-27T17:34:53Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>30m339ih6e292atwz9ti99bjhtm0hgl</sha1>
      <text xml:space="preserve" bytes="3830">__NOTOC__


&lt;!--T:1--&gt;
Here are a few screenshots showing different parts of FreeCAD. They are not ordered in any particular timeline, so the images may differ from your actual version. See more screenshots submitted by FeeCAD users on the [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=4751 screenshot forum thread] and on the [http://forum.freecadweb.org/viewforum.php?f=24 &quot;Show your project here!&quot; Users Showcase forum part].

=== The 0.14 release === &lt;!--T:2--&gt;
[[Image:Freecad jeep.png|1024px]]

&lt;!--T:3--&gt;
A jeep modeled by psicofil

&lt;!--T:4--&gt;
[[Image:Rockn house1.png|1024px]]

&lt;!--T:5--&gt;
[[Image:Rockn house2.png|1024px]]

&lt;!--T:6--&gt;
A house made with the Arch module by rockn

&lt;!--T:7--&gt;
[[Image:Mesh curvature plot1.jpeg|1024px]]

&lt;!--T:8--&gt;
Mesh curvature analysis by the Mesh module

&lt;!--T:9--&gt;
[[Image:Cura_export.png|1024px]]

&lt;!--T:10--&gt;
Export to external applications with python macros

=== The 0.12 release === &lt;!--T:11--&gt;
[[Image:FreeCAD_aeroponic_system.jpg|Assembly of multiple objects|1024px]]

&lt;!--T:12--&gt;
[[Image:rim_bling.png|A fully-constrained sketch revolved to create a bike rim section|1024px]]

=== The 0.11 release === &lt;!--T:13--&gt;
[[Image:FreeCAD011.png|1024px]]

=== The 0.10 release === &lt;!--T:14--&gt;
[[Image:Freecad010.png]]

=== Measurement === &lt;!--T:15--&gt;
[[Image:Measurement.jpeg|800px]]

=== The 0.9 release === &lt;!--T:16--&gt;
[[Image:Freecad09.jpg]]

=== STEP Data === &lt;!--T:17--&gt;
[[Image:TaskPanel.jpg|800px]]

&lt;!--T:18--&gt;
With loaded Robot gripper

=== Robot gripper === &lt;!--T:19--&gt;
[[Image:FreeCAD Screenshot.png]]

&lt;!--T:20--&gt;
On XP with Schenkel

=== Boolean operations on Shapes === &lt;!--T:21--&gt;
[[Image:Part BooleanOperations.png|800px]]

&lt;!--T:22--&gt;
Boolean operations

=== STEP === &lt;!--T:23--&gt;
[[Image:Screenshot-gcad.jpg]]

&lt;!--T:24--&gt;
A screenshot showing FreeCAD importing and rendering a gCAD STEP model

=== IGES === &lt;!--T:25--&gt;
[[Image:Freecad-vista01.jpg]]

&lt;!--T:26--&gt;
FreeCAD on Windows Vista, with an IGES model from [http://www13.boschrexroth-us.com Rexroth] loaded

=== Fancy === &lt;!--T:27--&gt;
[[Image:Sceenshot-reversevid.jpg‎]]

&lt;!--T:28--&gt;
You can customize a lot of aspects of FreeCAD!

=== Boolean on Meshes === &lt;!--T:29--&gt;
[[Image:Screenshot_mesh.jpg]]

&lt;!--T:30--&gt;
Mesh boolean operations in FreeCAD

=== Blender === &lt;!--T:31--&gt;
[[Image:Fcblender.jpg]]

&lt;!--T:32--&gt;
Blender has an [http://yorik.orgfree.com/guestblog.php?2009=105 script] to import FreeCAD files.

=== Drawing Extraction === &lt;!--T:33--&gt;
[[Image:Drawing_extraction.png|800px]]

&lt;!--T:34--&gt;
Extracting a 3D part (STEP in this case) to a SVG '''Drawing Extraction''' View. This is fully parametric, 
if the part change the view follows. 

=== FreeCAD vs. QCad === &lt;!--T:35--&gt;
[[Image:Screenshot_qcad.jpg]]

&lt;!--T:36--&gt;
A screenshot showing how a same file gets rendered by FreeCAD and qCAD

=== FreeCAD vs. Inkscape === &lt;!--T:37--&gt;
[[Image:Screenshot_inkscape.jpg]]

&lt;!--T:38--&gt;
A screenshot showing how a same file gets rendered by FreeCAD and inkscape

=== Draft module === &lt;!--T:39--&gt;
[[Image:Screenshot draft.jpg]]

&lt;!--T:40--&gt;
Freecad with the [[Draft Module|draft module]] loaded and a dxf drawing imported

=== Preferences === &lt;!--T:41--&gt;
[[Image:Freecad-vista02.jpg]]

&lt;!--T:42--&gt;
The preferences screen


=== On Ubuntu === &lt;!--T:43--&gt;
[[Image:Interface_screenshot.jpg]]

&lt;!--T:44--&gt;
The FreeCAD interface when you start it for the first time, on Ubuntu

=== Windows intaller === &lt;!--T:45--&gt;
[[Image:Screenshot_installer.jpg]]

&lt;!--T:46--&gt;
Windows installer at work

=== console mode === &lt;!--T:47--&gt;
[[Image:Screenshot_console.jpg]]

&lt;!--T:48--&gt;
FreeCAD runs in console mode (without gui)

=== Save picture === &lt;!--T:49--&gt;
[[Image:Save_picture.png]]

&lt;!--T:50--&gt;
Dialog to save a picture with arbitrary sizes.

&lt;!--T:51--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Scripted objects</title>
    <ns>0</ns>
    <id>435</id>
    <revision>
      <id>109780</id>
      <parentid>109779</parentid>
      <timestamp>2014-09-19T19:30:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>pp4omzrstsr3bdypeyfby340quqr653</sha1>
      <text xml:space="preserve" bytes="20446">
&lt;!--T:1--&gt;
Besides the standard object types such as annotations, meshes and parts objects, FreeCAD also offers the amazing possibility to build 100% python-scripted objects, called Python Features. Those objects will behave exactly as any other FreeCAD object, and are saved and restored automatically on file save/load.

&lt;!--T:2--&gt;
One particularity must be understood, those objects are saved in FreeCAD FcStd files with python's [http://docs.python.org/2/library/json.html json] module. That module turns a python object as a string, allowing it to be added to the saved file. On load, the json module uses that string to recreate the original object, provided it has access to the source code that created the object. This means that if you save such a custom object and open it on a machine where the python code that generated the object is not present, the object won't be recreated. If you distribute such objects to others, you will need to distribute the python script that created it together.

&lt;!--T:3--&gt;
Python Features follow the same rule as all FreeCAD features: they are separated into App and GUI parts. The app part, the Document Object, defines the geometry of our object, while its GUI part, the View Provider Object, defines how the object will be drawn on screen. The View Provider Object, as any other FreeCAD feature, is only available when you run FreeCAD in its own GUI. There are several properties and methods available to build your object. Properties must be of any of the predefined properties types that FreeCAD offers, and will appear in the property view window, so they can be edited by the user. This way,  FeaturePython objects are truly and totally parametric. you can define properties for the Object and its ViewObject separately.

&lt;!--T:4--&gt;
'''Hint:''' In former versions we used Python's [http://docs.python.org/release/2.5/lib/module-cPickle.html cPickle] module. However, this module executes arbitrary code and thus causes a security problem. Thus, we moved to Python's json module. 

== Basic example == &lt;!--T:5--&gt;
The following sample can be found in the [http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Mod/TemplatePyMod/FeaturePython.py?view=markup src/Mod/TemplatePyMod/FeaturePython.py] file, together with several other examples:

&lt;syntaxhighlight&gt;
 &quot;Examples for a feature class and its view provider.&quot;
 
 import FreeCAD, FreeCADGui
 from pivy import coin
 
 class Box:
 	def __init__(self, obj):
 		&quot;'''Add some custom properties to our box feature'''&quot;
 		obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Length&quot;,&quot;Box&quot;,&quot;Length of the box&quot;).Length=1.0
 		obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Width&quot;,&quot;Box&quot;,&quot;Width of the box&quot;).Width=1.0
 		obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Height&quot;,&quot;Box&quot;, &quot;Height of the box&quot;).Height=1.0
 		obj.Proxy = self
 	
 	def onChanged(self, fp, prop):
 		&quot;'''Do something when a property has changed'''&quot;
 		FreeCAD.Console.PrintMessage(&quot;Change property: &quot; + str(prop) + &quot;\n&quot;)
  
 	def execute(self, fp):
 		&quot;'''Do something when doing a recomputation, this method is mandatory'''&quot;
 		FreeCAD.Console.PrintMessage(&quot;Recompute Python Box feature\n&quot;)
  
 class ViewProviderBox:
 	def __init__(self, obj):
 		&quot;'''Set this object to the proxy object of the actual view provider'''&quot;
 		obj.addProperty(&quot;App::PropertyColor&quot;,&quot;Color&quot;,&quot;Box&quot;,&quot;Color of the box&quot;).Color=(1.0,0.0,0.0)
 		obj.Proxy = self
  
 	def attach(self, obj):
 		&quot;'''Setup the scene sub-graph of the view provider, this method is mandatory'''&quot;
 		self.shaded = coin.SoGroup()
 		self.wireframe = coin.SoGroup()
 		self.scale = coin.SoScale()
 		self.color = coin.SoBaseColor()
  		
 		data=coin.SoCube()
 		self.shaded.addChild(self.scale)
 		self.shaded.addChild(self.color)
 		self.shaded.addChild(data)
 		obj.addDisplayMode(self.shaded,&quot;Shaded&quot;);
 		style=coin.SoDrawStyle()
 		style.style = coin.SoDrawStyle.LINES
 		self.wireframe.addChild(style)
 		self.wireframe.addChild(self.scale)
 		self.wireframe.addChild(self.color)
 		self.wireframe.addChild(data)
 		obj.addDisplayMode(self.wireframe,&quot;Wireframe&quot;);
 		self.onChanged(obj,&quot;Color&quot;)
  
 	def updateData(self, fp, prop):
 		&quot;'''If a property of the handled feature has changed we have the chance to handle this here'''&quot;
 		# fp is the handled feature, prop is the name of the property that has changed
 		l = fp.getPropertyByName(&quot;Length&quot;)
 		w = fp.getPropertyByName(&quot;Width&quot;)
 		h = fp.getPropertyByName(&quot;Height&quot;)
 		self.scale.scaleFactor.setValue(l,w,h)
 		pass
  
 	def getDisplayModes(self,obj):
 		&quot;'''Return a list of display modes.'''&quot;
 		modes=[]
 		modes.append(&quot;Shaded&quot;)
 		modes.append(&quot;Wireframe&quot;)
 		return modes
  
 	def getDefaultDisplayMode(self):
 		&quot;'''Return the name of the default display mode. It must be defined in getDisplayModes.'''&quot;
 		return &quot;Shaded&quot;
  
 	def setDisplayMode(self,mode):
 		&quot;'''Map the display mode defined in attach with those defined in getDisplayModes.\'''
                 '''Since they have the same names nothing needs to be done. This method is optional'''&quot;
 		return mode
  
 	def onChanged(self, vp, prop):
 		&quot;'''Here we can do something when a single property got changed'''&quot;
 		FreeCAD.Console.PrintMessage(&quot;Change property: &quot; + str(prop) + &quot;\n&quot;)
 		if prop == &quot;Color&quot;:
 			c = vp.getPropertyByName(&quot;Color&quot;)
 			self.color.rgb.setValue(c[0],c[1],c[2])
  
 	def getIcon(self):
 		&quot;'''Return the icon in XPM format which will appear in the tree view. This method is\'''
                 '''optional and if not defined a default icon is shown.'''&quot;
 		return &quot;&quot;&quot;
 			/* XPM */
 			static const char * ViewProviderBox_xpm[] = {
 			&quot;16 16 6 1&quot;,
 			&quot; 	c None&quot;,
 			&quot;.	c #141010&quot;,
 			&quot;+	c #615BD2&quot;,
 			&quot;@	c #C39D55&quot;,
 			&quot;#	c #000000&quot;,
 			&quot;$	c #57C355&quot;,
 			&quot;        ........&quot;,
 			&quot;   ......++..+..&quot;,
 			&quot;   .@@@@.++..++.&quot;,
 			&quot;   .@@@@.++..++.&quot;,
 			&quot;   .@@  .++++++.&quot;,
 			&quot;  ..@@  .++..++.&quot;,
 			&quot;###@@@@ .++..++.&quot;,
 			&quot;##$.@@$#.++++++.&quot;,
 			&quot;#$#$.$$$........&quot;,
 			&quot;#$$#######      &quot;,
 			&quot;#$$#$$$$$#      &quot;,
 			&quot;#$$#$$$$$#      &quot;,
 			&quot;#$$#$$$$$#      &quot;,
 			&quot; #$#$$$$$#      &quot;,
 			&quot;  ##$$$$$#      &quot;,
 			&quot;   #######      &quot;};
 			&quot;&quot;&quot;
  
 	def __getstate__(self):
 		&quot;'''When saving the document this object gets stored using Python's json module.\'''
                 '''Since we have some un-serializable parts here -- the Coin stuff -- we must define this method\'''
                 '''to return a tuple of all serializable objects or None.'''&quot;
 		return None
  
 	def __setstate__(self,state):
 		&quot;'''When restoring the serialized object from document we have the chance to set some internals here.\'''
                 '''Since no data were serialized nothing needs to be done here.'''&quot;
 		return None
  
  
 def makeBox():
 	FreeCAD.newDocument()
 	a=FreeCAD.ActiveDocument.addObject(&quot;App::FeaturePython&quot;,&quot;Box&quot;)
 	Box(a)
  	ViewProviderBox(a.ViewObject)
&lt;/syntaxhighlight&gt;

== Available properties == &lt;!--T:6--&gt;
Properties are the true building stones of FeaturePython objects. Through them, the user will be able to interact and modify your object. After creating a new FeaturePython object in your document ( obj=FreeCAD.ActiveDocument.addObject(&quot;App::FeaturePython&quot;,&quot;Box&quot;) ), you can get a list of the available properties by issuing:

&lt;syntaxhighlight&gt;
 obj.supportedProperties()
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
You will get a list of available properties:

&lt;syntaxhighlight&gt;
App::PropertyBool
App::PropertyBoolList
App::PropertyFloat
App::PropertyFloatList
App::PropertyFloatConstraint
App::PropertyQuantity
App::PropertyQuantityConstraint
App::PropertyAngle
App::PropertyDistance
App::PropertyLength
App::PropertySpeed
App::PropertyAcceleration
App::PropertyForce
App::PropertyPressure
App::PropertyInteger
App::PropertyIntegerConstraint
App::PropertyPercent
App::PropertyEnumeration
App::PropertyIntegerList
App::PropertyIntegerSet
App::PropertyMap
App::PropertyString
App::PropertyUUID
App::PropertyFont
App::PropertyStringList
App::PropertyLink
App::PropertyLinkSub
App::PropertyLinkList
App::PropertyLinkSubList
App::PropertyMatrix
App::PropertyVector
App::PropertyVectorList
App::PropertyPlacement
App::PropertyPlacementLink
App::PropertyColor
App::PropertyColorList
App::PropertyMaterial
App::PropertyPath
App::PropertyFile
App::PropertyFileIncluded
App::PropertyPythonObject
Part::PropertyPartShape
Part::PropertyGeometryList
Part::PropertyShapeHistory
Part::PropertyFilletEdges
Sketcher::PropertyConstraintList
&lt;/syntaxhighlight&gt;

&lt;!--T:8--&gt;
When adding properties to your custom objects, take care of this:
* Do not use characters &quot;&lt;&quot; or &quot;&gt;&quot; in the properties descriptions (that would break the xml pieces in the .fcstd file)
* Properties are stored alphabetically in a .fcstd file. If you have a shape in your properties, any property whose name comes after &quot;Shape&quot; in alphabetic order, will be loaded AFTER the shape, which can cause strange behaviours.

==Property Type== &lt;!--T:9--&gt;
By default the properties can be updated. It is possible to make the properties read-only, for instance in the case one wants to show the result of a method. It is also possible to hide the property.
The property type can be set using

&lt;syntaxhighlight&gt;
  obj.setEditorMode(&quot;MyPropertyName&quot;, mode)
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
where mode is a short int that can be set to:
  0 -- default mode, read and write
  1 -- read-only
  2 -- hidden

== Other more complex example == &lt;!--T:11--&gt;
This example makes use of the [[Part Module]] to create an octahedron, then creates its coin representation with pivy.

&lt;!--T:12--&gt;
First is the Document object itself:

&lt;syntaxhighlight&gt;
 import FreeCAD, FreeCADGui, Part
 
    class Octahedron:
       def __init__(self, obj):
          &quot;Add some custom properties to our box feature&quot;
          obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Length&quot;,&quot;Octahedron&quot;,&quot;Length of the octahedron&quot;).Length=1.0
          obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Width&quot;,&quot;Octahedron&quot;,&quot;Width of the octahedron&quot;).Width=1.0
          obj.addProperty(&quot;App::PropertyLength&quot;,&quot;Height&quot;,&quot;Octahedron&quot;, &quot;Height of the octahedron&quot;).Height=1.0
          obj.addProperty(&quot;Part::PropertyPartShape&quot;,&quot;Shape&quot;,&quot;Octahedron&quot;, &quot;Shape of the octahedron&quot;)
          obj.Proxy = self
 
       def execute(self, fp):
          # Define six vetices for the shape
          v1 = FreeCAD.Vector(0,0,0)
          v2 = FreeCAD.Vector(fp.Length,0,0)
          v3 = FreeCAD.Vector(0,fp.Width,0)
          v4 = FreeCAD.Vector(fp.Length,fp.Width,0)
          v5 = FreeCAD.Vector(fp.Length/2,fp.Width/2,fp.Height/2)
          v6 = FreeCAD.Vector(fp.Length/2,fp.Width/2,-fp.Height/2)
          
          # Make the wires/faces
          f1 = self.make_face(v1,v2,v5)
          f2 = self.make_face(v2,v4,v5)
          f3 = self.make_face(v4,v3,v5)
          f4 = self.make_face(v3,v1,v5)
          f5 = self.make_face(v2,v1,v6)
          f6 = self.make_face(v4,v2,v6)
          f7 = self.make_face(v3,v4,v6)
          f8 = self.make_face(v1,v3,v6)
          shell=Part.makeShell([f1,f2,f3,f4,f5,f6,f7,f8])
          solid=Part.makeSolid(shell)
          fp.Shape = solid
 
       # helper mehod to create the faces
       def make_face(self,v1,v2,v3):
          wire = Part.makePolygon([v1,v2,v3,v1])
          face = Part.Face(wire)
          return face
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
Then, we have the view provider object, responsible for showing the object in the 3D scene:

&lt;syntaxhighlight&gt;
    class ViewProviderOctahedron:
       def __init__(self, obj):
          &quot;Set this object to the proxy object of the actual view provider&quot;
          obj.addProperty(&quot;App::PropertyColor&quot;,&quot;Color&quot;,&quot;Octahedron&quot;,&quot;Color of the octahedron&quot;).Color=(1.0,0.0,0.0)
          obj.Proxy = self
 
       def attach(self, obj):
          &quot;Setup the scene sub-graph of the view provider, this method is mandatory&quot;
          self.shaded = coin.SoGroup()
          self.wireframe = coin.SoGroup()
          self.scale = coin.SoScale()
          self.color = coin.SoBaseColor()
 
          self.data=coin.SoCoordinate3()
          self.face=coin.SoIndexedLineSet()
 
          self.shaded.addChild(self.scale)
          self.shaded.addChild(self.color)
          self.shaded.addChild(self.data)
          self.shaded.addChild(self.face)
          obj.addDisplayMode(self.shaded,&quot;Shaded&quot;);
          style=coin.SoDrawStyle()
          style.style = coin.SoDrawStyle.LINES
          self.wireframe.addChild(style)
          self.wireframe.addChild(self.scale)
          self.wireframe.addChild(self.color)
          self.wireframe.addChild(self.data)
          self.wireframe.addChild(self.face)
          obj.addDisplayMode(self.wireframe,&quot;Wireframe&quot;);
          self.onChanged(obj,&quot;Color&quot;)
 
       def updateData(self, fp, prop):
          &quot;If a property of the handled feature has changed we have the chance to handle this here&quot;
          # fp is the handled feature, prop is the name of the property that has changed
          if prop == &quot;Shape&quot;:
             s = fp.getPropertyByName(&quot;Shape&quot;)
             self.data.point.setNum(6)
             cnt=0
             for i in s.Vertexes:
                self.data.point.set1Value(cnt,i.X,i.Y,i.Z)
                cnt=cnt+1
             
             self.face.coordIndex.set1Value(0,0)
             self.face.coordIndex.set1Value(1,1)
             self.face.coordIndex.set1Value(2,2)
             self.face.coordIndex.set1Value(3,-1)
 
             self.face.coordIndex.set1Value(4,1)
             self.face.coordIndex.set1Value(5,3)
             self.face.coordIndex.set1Value(6,2)
             self.face.coordIndex.set1Value(7,-1)
 
             self.face.coordIndex.set1Value(8,3)
             self.face.coordIndex.set1Value(9,4)
             self.face.coordIndex.set1Value(10,2)
             self.face.coordIndex.set1Value(11,-1)
 
             self.face.coordIndex.set1Value(12,4)
             self.face.coordIndex.set1Value(13,0)
             self.face.coordIndex.set1Value(14,2)
             self.face.coordIndex.set1Value(15,-1)
 
             self.face.coordIndex.set1Value(16,1)
             self.face.coordIndex.set1Value(17,0)
             self.face.coordIndex.set1Value(18,5)
             self.face.coordIndex.set1Value(19,-1)
 
             self.face.coordIndex.set1Value(20,3)
             self.face.coordIndex.set1Value(21,1)
             self.face.coordIndex.set1Value(22,5)
             self.face.coordIndex.set1Value(23,-1)
 
             self.face.coordIndex.set1Value(24,4)
             self.face.coordIndex.set1Value(25,3)
             self.face.coordIndex.set1Value(26,5)
             self.face.coordIndex.set1Value(27,-1)
 
             self.face.coordIndex.set1Value(28,0)
             self.face.coordIndex.set1Value(29,4)
             self.face.coordIndex.set1Value(30,5)
             self.face.coordIndex.set1Value(31,-1)
 
       def getDisplayModes(self,obj):
          &quot;Return a list of display modes.&quot;
          modes=[]
          modes.append(&quot;Shaded&quot;)
          modes.append(&quot;Wireframe&quot;)
          return modes
 
       def getDefaultDisplayMode(self):
          &quot;Return the name of the default display mode. It must be defined in getDisplayModes.&quot;
          return &quot;Shaded&quot;
 
       def setDisplayMode(self,mode):
          return mode
 
       def onChanged(self, vp, prop):
          &quot;Here we can do something when a single property got changed&quot;
          FreeCAD.Console.PrintMessage(&quot;Change property: &quot; + str(prop) + &quot;\n&quot;)
          if prop == &quot;Color&quot;:
             c = vp.getPropertyByName(&quot;Color&quot;)
             self.color.rgb.setValue(c[0],c[1],c[2])
 
       def getIcon(self):
          return &quot;&quot;&quot;
             /* XPM */
             static const char * ViewProviderBox_xpm[] = {
             &quot;16 16 6 1&quot;,
             &quot;    c None&quot;,
             &quot;.   c #141010&quot;,
             &quot;+   c #615BD2&quot;,
             &quot;@   c #C39D55&quot;,
             &quot;#   c #000000&quot;,
             &quot;$   c #57C355&quot;,
             &quot;        ........&quot;,
             &quot;   ......++..+..&quot;,
             &quot;   .@@@@.++..++.&quot;,
             &quot;   .@@@@.++..++.&quot;,
             &quot;   .@@  .++++++.&quot;,
             &quot;  ..@@  .++..++.&quot;,
             &quot;###@@@@ .++..++.&quot;,
             &quot;##$.@@$#.++++++.&quot;,
             &quot;#$#$.$$$........&quot;,
             &quot;#$$#######      &quot;,
             &quot;#$$#$$$$$#      &quot;,
             &quot;#$$#$$$$$#      &quot;,
             &quot;#$$#$$$$$#      &quot;,
             &quot; #$#$$$$$#      &quot;,
             &quot;  ##$$$$$#      &quot;,
             &quot;   #######      &quot;};
             &quot;&quot;&quot;
 
       def __getstate__(self):
          return None
 
       def __setstate__(self,state):
          return None
&lt;/syntaxhighlight&gt;

&lt;!--T:14--&gt;
Finally, once our object and its viewobject are defined, we just need to call them:

&lt;syntaxhighlight&gt;
       FreeCAD.newDocument()
       a=FreeCAD.ActiveDocument.addObject(&quot;App::FeaturePython&quot;,&quot;Octahedron&quot;)
       Octahedron(a)
       ViewProviderOctahedron(a.ViewObject)
&lt;/syntaxhighlight&gt;

== Making objects selectable == &lt;!--T:15--&gt;
If you want to make your object selectable, or at least part of it, by clicking on it in the viewport, you must include its coin geometry inside a SoFCSelection node. If your object has complex representation, with widgets, annotations, etc, you might want to include only a part of it in a SoFCSelection. Everything that is a SoFCSelection is constantly scanned by FreeCAD to detect selection/preselection, so it makes sense try not to overload it with unneeded scanning. This is what you would do to include a self.face from the example above:

&lt;syntaxhighlight&gt;
 selectionNode = coin.SoType.fromName(&quot;SoFCSelection&quot;).createInstance()
 selectionNode.documentName.setValue(FreeCAD.ActiveDocument.Name)
 selectionNode.objectName.setValue(obj.Object.Name) # here obj is the ViewObject, we need its associated App Object
 selectionNode.subElementName.setValue(&quot;Face&quot;)
 selectNode.addChild(self.face)
 ...
 self.shaded.addChild(selectionNode)
 self.wireframe.addChild(selectionNode)
&lt;/syntaxhighlight&gt;

&lt;!--T:16--&gt;
Simply, you create a SoFCSelection node, then you add your geometry nodes to it, then you add it to your main node, instead of adding your geometry nodes directly.

== Working with simple shapes == &lt;!--T:17--&gt;
If your parametric object simply outputs a shape, you don't need to use a view provider object. The shape will be displayed using FreeCAD's standard shape representation:

&lt;syntaxhighlight&gt;
 class Line:
     def __init__(self, obj):
         '''&quot;App two point properties&quot; '''
         obj.addProperty(&quot;App::PropertyVector&quot;,&quot;p1&quot;,&quot;Line&quot;,&quot;Start point&quot;)
         obj.addProperty(&quot;App::PropertyVector&quot;,&quot;p2&quot;,&quot;Line&quot;,&quot;End point&quot;).p2=FreeCAD.Vector(1,0,0)
         obj.Proxy = self
 
     def execute(self, fp):
         '''&quot;Print a short message when doing a recomputation, this method is mandatory&quot; '''
         fp.Shape = Part.makeLine(fp.p1,fp.p2)
 
 a=FreeCAD.ActiveDocument.addObject(&quot;Part::FeaturePython&quot;,&quot;Line&quot;)
 Line(a)
 a.ViewObject.Proxy=0 # just set it to something different from None (this assignment is needed to run an internal notification)
 FreeCAD.ActiveDocument.recompute()
&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
Same code with use '''ViewProviderLine'''

&lt;syntaxhighlight&gt;
import FreeCAD as App
import FreeCADGui
import FreeCAD
import Part

class Line:
    def __init__(self, obj):
         '''&quot;App two point properties&quot; '''
         obj.addProperty(&quot;App::PropertyVector&quot;,&quot;p1&quot;,&quot;Line&quot;,&quot;Start point&quot;)
         obj.addProperty(&quot;App::PropertyVector&quot;,&quot;p2&quot;,&quot;Line&quot;,&quot;End point&quot;).p2=FreeCAD.Vector(100,0,0)
         obj.Proxy = self
   
    def execute(self, fp):
        '''&quot;Print a short message when doing a recomputation, this method is mandatory&quot; '''
        fp.Shape = Part.makeLine(fp.p1,fp.p2)

class ViewProviderLine:
   def __init__(self, obj):
      ''' Set this object to the proxy object of the actual view provider '''
      obj.Proxy = self

   def getDefaultDisplayMode(self):
      ''' Return the name of the default display mode. It must be defined in getDisplayModes. '''
      return &quot;Flat Lines&quot;

a=FreeCAD.ActiveDocument.addObject(&quot;Part::FeaturePython&quot;,&quot;Line&quot;)
Line(a)
ViewProviderLine(a.ViewObject)
App.ActiveDocument.recompute()
&lt;/syntaxhighlight&gt;


&lt;!--T:18--&gt;
{{docnav|PyQt|Embedding FreeCAD}}

&lt;!--T:19--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Scripting</title>
    <ns>0</ns>
    <id>123</id>
    <redirect title="Power users hub" />
    <revision>
      <id>88582</id>
      <parentid>4450</parentid>
      <timestamp>2014-05-30T18:35:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>epvce7nslah28la2uwnoew03tze4vou</sha1>
      <text xml:space="preserve" bytes="4896">#REDIRECT [[Power users hub]]

*** Text below has been merged in the [[Power users hub]] page. Please do not edit! ***

This page is the starting point for scripting in FreeCAD. As FreeCAD use [http://python.org/ Python] as its scripting language we encourage you to first learn the basics of Python programming before diving into the amazing world of FreeCAD scripting. In the FreeCAD Help Menu, you will find a couple of useful items: a &quot;Python Manuals&quot; item, taking you to the official python manual, and a &quot;Python Modules&quot; entry, which will open a complete description of the python modules, classes and functions available to you in FreeCAD.

== Basics ==

If you are new to python scripting, you'll find here several good tutorials to help you to get the basics.

Generic python documentation:
* [http://docs.python.org/tut/tut.html Official python tutorial] - A very complete tutorial for discovering python
* [http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python Non-programmer tutorial for python] - an excellent wikibook
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python for newbies] - one big tutorial covering all the basics

FreeCAD documentation:
* [[Introduction to Python]]
* [[FreeCAD Scripting Basics]]

== Modules ==

As the functionality of FreeCAD is separated in Modules which deal with special data types and applications. FreeCAD has built-in modules and Extension Modules (plug-ins). Once plugin modules are installed, they become availible to you as easily as the built-in modules. The modules described below are the default modules, includeed in every FreeCAD installation.

* The [[Builtin modules]] are the principal FreeCAD modules. They contain tools for manipulating general FreeCAD configurations, documents and their contents.
* The [[Mesh Module]] handles triangulated meshes. The mesh module can be extensively manipulated by [[Mesh Scripting]].
* The [[Part Module]] deals with the CAD data structures. The [[Topological data scripting]] page describes how to script it.
* The [[Drawing Module]] is in place for bringing the 3D world onto paper or drawings.
* The [[Cam Module]] is dedicated to mechanical machining like milling.
* The [[Raytracing Module]] brings all kind of shapes to renderers (like PovRay).

== Advanced scripting ==

* [[pythonOCC]]: How to access and use the whole OpenCasCade libraries
* [[Scenegraph|The Coin/Inventor scenegraph]]: How the FreeCAD scene representation works
* [[Pivy]]: How to access and modify the scenegraph
* [[PyQt]]: How to access the interface, and modify its contents
* [[Mesh to Part]]: How to convert between Mesh and Part objects
* [[Embedding FreeCAD]]: How to import FreeCAD as a python module in other applications
* [[Embedding FreeCADGui]]: How to embed the FreeCAD Interface into other applications
* [[Scripted objects]]: How to make 100% python-scripted objects in FreeCAD

== Examples ==

After reading what each module can do, you may want to start building your own scripts. You'll find below several documents that can help you to start.

* [[Code snippets]] : A collection of pieces of FreeCAD python code, to serve as ingredients in your scripts...
* [[Line drawing function]] : An example showing how to construct a simple line drawing function
* [[Dialog creation]] : An example showing how to design a Qt dialog and show/use it in FreeCAD
* [[Extra python modules]] : Extend the FreeCAD python interpreter with these powerful modules!
* The [[Draft Module]] adds basic 2d drawing functions to freecad. This module is not scriptable, but is written entirely in python, so it can be a good example if you want to write your own modules.
* [[FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is also included in the Draft module.

== Advanced tutorials ==

'''PyQt''' - How to create and manage FreeCAD's Qt UI interface from python

* [http://www.cs.usfca.edu/~afedosov/qttut/ Basic PyQt tutorial] : A simple and short linux-based tutorial that will explain how to work with PyQt and Qt Designer
* [http://zetcode.com/tutorials/pyqt4/firstprograms/ First programs in PyQt4] : A platform-agnostic tutorial showing the interns of python + qt
* [http://vizzzion.org/?id=pyqt programming Qt applications in python] : A more in-depth tutorial covering all the process of working with qt and python.

'''Pivy''' - How to interact with FreeCAD's 3D scenes

* [http://pivy.coin3d.org/documentation/pycon Basic Pivy tutorial] : A very simple tutorial form the official Pivy site
* [http://www.google.com.br/url?sa=U&amp;start=3&amp;q=http://studierstube.icg.tu-graz.ac.at/doc/pdf/PivyStudierstubeTutorial.pdf&amp;ei=XyC1Sc2wOeCKmQem_eHnBQ&amp;usg=AFQjCNEYhb-0DcUc6OxFVijAe1epBb-4aA Introducing Pivy into studiersturbe] : A document that is not really a tutorialbut that illustrates well how Pivy works

[[Category:Developer]]</text>
    </revision>
  </page>
  <page>
    <title>Scripting examples</title>
    <ns>0</ns>
    <id>628</id>
    <revision>
      <id>83165</id>
      <parentid>83164</parentid>
      <timestamp>2014-05-14T18:54:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qddctk0kn4jmzy0qjm5t6abrdw11jy2</sha1>
      <text xml:space="preserve" bytes="694">
&lt;!--T:1--&gt;
* [[Scripted objects]]: How to make 100% python-scripted objects in FreeCAD
* [[Drawing Module]]: Automating the 3D-to-2D process 
* [[Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD]]: How to import FreeCAD as a python module in other applications
* [[Macros recipes]]: Examples of macro scripts
* [[Code snippets]]: Pieces of code to serve as ingredients in your scripts
* [[Topological data scripting]]: Basic shape manipulation examples

&lt;!--T:2--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]


</text>
    </revision>
  </page>
  <page>
    <title>Selection API</title>
    <ns>0</ns>
    <id>740</id>
    <revision>
      <id>133209</id>
      <parentid>122944</parentid>
      <timestamp>2014-12-23T21:05:57Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>mu464466r39dmfqp4899l1yqiu3a8c5</sha1>
      <text xml:space="preserve" bytes="1169">
&lt;!--T:1--&gt;
The selection submodule is part of the FreeCADGui module. Example:

{{Code|code=
import FreeCADGui
sel = FreeCADGui.Selection.getSelection()
}}


&lt;!--T:2--&gt;
{{APIFunction|addSelection|FreeCAD.Object|Adds an object to the selection| }}
{{APIFunction|clearSelection|[string]|Clears the selection of the given document name. If no document is given the complete selection is cleared.| }}
{{APIFunction|getSelection|[string]|Returns a list of selected document objects for a given document name. If no document is given the complete selection is returned.|a list of document objects in the order they were selected.}}
{{APIFunction|getSelectionEx|[string]|Returns a list of SelectionObject for a given document name. If no document is given the complete selection is returned. Used for selecting subobjects (ex some Edges of a Face).|a list of SelectionObjects in the order they were selected}}
{{APIFunction|isSelected|FreeCAD.Object|Checks if a given object is selected| }}
{{APIFunction|removeSelection|FreeCAD.Object|Removes an object from the selection| }}

&lt;!--T:3--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Ship Workbench</title>
    <ns>0</ns>
    <id>10930</id>
    <revision>
      <id>108111</id>
      <parentid>41511</parentid>
      <timestamp>2014-09-01T19:56:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Simple Box Cover</title>
    <ns>0</ns>
    <id>40757</id>
    <revision>
      <id>109411</id>
      <parentid>109051</parentid>
      <timestamp>2014-09-14T18:02:16Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Formatted images according to ediloren's tips, added TutorialInfo template.</comment>
      <sha1>ld7kzkbqiyqvdnl8pwdjhl2xfoq3yfc</sha1>
      <text xml:space="preserve" bytes="7186">{{VeryImportantMessage|Writing in Progress! This tutorial is not completed yet. ''To wiki translators: please wait for the tutorial to be finished before marking for translation.''}}

{{TutorialInfo|Class=Modeling|Level=Beginner|FCVersion=0.14.3700 or greater|Time=20 minutes|Author=[http://forum.freecadweb.org/memberlist.php?mode=viewprofile&amp;u=202 Normand C.]}}

==Introduction==

This tutorial will explain how to model a simple box cover with engraved text. The cover will have a flat top with a lip all around to fit over a box.

'''The context:''' you have downloaded a sorting box model from a popular &quot;things&quot; sharing site, and you have printed it with your personal 3D printer. It's perfect to sort your bolts, but you would like to have a cover to go with it, with &quot;Bolts&quot; engraved on top of it so it's easy to recognize among your many other printed boxes!

[[File:Tutorial_Simple_Box_Cover_01.png|none]]

For this we will use the [[Draft Workbench|Draft]], [[Part Workbench|Part]] and [[PartDesign Workbench|Part Design]] workbenches.

The sequence of operations will be:
# Create a sketch and draw and constrain a rectangle
# Create a Pad feature out of the sketch
# Hollow out the Pad solid using the Part Thickness tool
# Create text on top of the cover using the Draft ShapeString tool
# Create a PartDesign Pocket feature using the Draft ShapeString object.

==Figuring out the dimensions==
Let's say that the box length and width are 110x110mm. We should allow some play between the box outer dimensions and the cover inner dimensions, so let's add 1mm on each side. We want the cover to be 3mm thick, and the lip to be 7mm high without counting the top.

* Cover inner length: 111mm
* Cover inner width: 111mm
* Cover thickness: 3mm
* Cover lip height: 7mm

==Making the base solid==
We will make a base solid of which dimensions equal the empty volume inside the finished cover.

===Creating the sketch===
# Start FreeCAD, create a new document and using the workbench selector, switch to the [[File:Workbench_PartDesign.svg|32px]] [[PartDesign Workbench]].
# Click on the [[File:Sketcher_NewSketch.png|32px]] '''Create new sketch''' icon in the toolbar.
# In the &quot;Choose orientation&quot; dialog, select the XY-Plane and click OK.
# Click on the [[File:Sketcher_CreateRectangle.png|32px]] [[Sketcher Rectangle|Create a rectangle]] icon.
# Click somewhere in the 3D view to pick the first point of the rectangle, drag your mouse then click again to select the second point, which corresponds to the opposite corner of the rectangle. When clicking, loosely center the rectangle on the red and green axes.
# We will now center the rectangle on the origin. I have found by experience that it is almost always a good idea to center your geometry to the axes. Click on two opposite vertices (corner points) of the rectangle, for example the upper left point and the lower right point; thirdly click on the '''origin point''' (the point at the center of the green and red axes). With the three points selected (they now should be green), click on the [[File:Constraint_Symmetric.png|32px]] [[Constraint Symmetric]] icon. The rectangle is now centered to the origin of the sketch. If you pick either a corner or a side and drag the mouse, you will see that you can resize the rectangle, but it will always remain centered.
# The rectangle should actually be a square, as the length and width have equal values. Select a vertical line of the rectangle, and a horizontal line of the rectangle, then click on the [[File:Constraint_EqualLength.png|32px]] [[Constraint_EqualLength|Equal Length Constraint]] icon.
# If you look at the '''Solver messages''' text box in the Tasks panel, the message reads: &quot;Under-constrained sketch with 1 degree of freedom&quot;. Picking and dragging the contour of the rectangle gives us a hint as to what that degree of freedom may be: we have not set the size of the square. So select the top line of the square, and click on the [[File:Constraint_HorizontalDistance.png|32px]] [[Constraint_HorizontalDistance|Horizontal Distance Constraint]]. If you select a vertical line, you will then use the [[Constraint_VerticalDistance|Vertical Distance Constraint]]. '''Note:''' many people make the error of using the [[File:Constraint_Length.png|32px]] [[Constraint_Length|Length Constraint]] instead. The length constraint should only be used if you need to constrain a diagonal length, as it requires more calculation by the solver.
# The sketch should now be fully constrained, with the Solver messages box saying so. The sketch geometry also turns entirely green. 
# We can now exit the sketch by clicking on the '''Close''' button on the Tasks panel, or on the [[File:Sketcher LeaveSketch.svg|32px]] '''Leave sketch''' icon on the toolbar. Notice that there is now a new '''Sketch''' object listed in the Model tree view. [[File:Tutorial_Simple_Box_Cover_02.png|none|400px]]
{{clear}}

===Padding the sketch===
Let's now add volume to our sketch.
# First, let's change the view orientation to axometric so the next step is displayed better. For that, type {{KEY|0}} (the zero digit) on your keyboard, or click on the [[File:View-axometric.svg|32px]] '''Set to axometric view''' icon in the View toolbar.
# The Sketch object should still be selected in the Model tree view. If not, select it (either in the tree or in the 3D view).
# Click on the [[File:PartDesign_Pad.png|32px]] [[PartDesign Pad]] icon.
# Under '''Pad parameters''' in the Tasks panel, set the length to 7mm. You can see in the 3D view that changing the value makes the solid thicker or thinner. ''Tip: you can quickly raise or lower the value by 5mm increments by placing the mouse pointer over the entry field and scrolling with the mouse wheel.''
# Click OK. Notice that a new '''Pad''' object has been added to the tree, and the Sketch has been hidden and nested under the Pad object. You can reveal the Sketch object by clicking on the arrow besides the &quot;Pad&quot; object in the tree. [[File:Tutorial_Simple_Box_Cover_03.png|none|400px]]
{{clear}}
==Hollowing out the base solid==
For this step we need to switch to the Part workbench.

# Switch to the [[File:Workbench Part.svg|32px]] [[Part Workbench]].
# Select the top face of the '''Pad''' object. [[File:Tutorial Simple Box Cover 04.png|none|300px]]
# Click on the [[File:Part_Thickness.svg|32px]] [[Part Thickness]] icon.
# You will notice in the 3D view that the solid has been replaced with a hollowed box with 4 sides and an open top. This hollowed box is also wider than the base solid. Under the '''Thickness''' parameters in the Tasks panel, the value '''Thickness''' sets the thickness of the walls of the box. With a positive value, the hollowed shape is built outward of the base solid. With a negative value, it would build inward, thus keeping the same outer dimensions as the base solid.
# Set the thickness to 3mm, and '''Joint type''' to '''Intersection'''. The default joint type is set to &quot;Arc&quot; which rounds all outer edges with a radius equal to the thickness, if the thickness has a positive value. [[File:Tutorial Simple Box Cover 05.png|none|300px]]

==Engraving text==
To be continued.

[[Category:Tutorials]]</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Arc</title>
    <ns>0</ns>
    <id>1605</id>
    <revision>
      <id>93781</id>
      <parentid>55369</parentid>
      <timestamp>2014-07-02T09:21:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ck36i9eyjej8mpqkyoh685sv7xtq815</sha1>
      <text xml:space="preserve" bytes="1039">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Arc|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|Part Design]]|MenuLocation=Sketch → Sketcher geometries → Create arc|SeeAlso=[[Sketcher Circle|Sketcher Circle]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws an arc by picking three points: the center, the start angle along the radius, and the end angle.

&lt;!--T:3--&gt;
When starting the tool, the mouse pointer changes to a white cross with a red arc icon. The coordinates of the pointer are shown beside it in blue in real time.

&lt;!--T:4--&gt;
[[Image:Sketcher_ArcExample1.png|The center has been selected, dragging to set the radius‎]] [[Image:Sketcher_ArcExample2.png|407x360px|The center and start angle have been selected, dragging to set end angle‎]]

====Usage==== &lt;!--T:5--&gt;
* Pick points on an empty area of the 3D view, or on an existing object (auto constraints must be active in TaskView).
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.



</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Arc3Point</title>
    <ns>0</ns>
    <id>39773</id>
    <revision>
      <id>106256</id>
      <parentid>106255</parentid>
      <timestamp>2014-08-24T20:04:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ddlpwvehfy81n5f7su2vr1ed35497jq</sha1>
      <text xml:space="preserve" bytes="382">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateArc3Point|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create Arc by three points|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt;



====Usage==== &lt;!--T:3--&gt;




&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Arc of Ellipse</title>
    <ns>0</ns>
    <id>53351</id>
    <revision>
      <id>133231</id>
      <parentid>133075</parentid>
      <timestamp>2014-12-23T22:52:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>3pag27uefkuhttbjffsctcqwo210pyx</sha1>
      <text xml:space="preserve" bytes="2105">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateArcOfEllipse|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|Part Design]]|MenuLocation=Sketch → Sketcher geometries → Create an arc of ellipse|SeeAlso=[[Sketcher Ellipse]], [[Sketcher Arc|Sketcher Arc]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws an arc of ellipse by picking four points: the center, the end of major radius, the start point and the end point.
When starting the tool, the mouse pointer changes to a white cross with a red ellipse arc icon. Besides are coordinates shown in real time.

&lt;!--T:3--&gt;
[[Image:Sketcher_ArcOfEllipseExample1.png‎|thumb|none|500px|The sequence of clicks is indicated by yellow arrows with numbers. C is the center, a - major diameter, b - minor diameter, F1, F2 are foci.]]

====Usage==== &lt;!--T:4--&gt;
* Invoke the command by clicking a toolbar button, picking the menu item, or by using keyboard shortcut (needs to be assigned first in [[Interface Customization]]).
* First click in 3D view sets ellipse center. Second click sets the first radius and orientation of the ellipse. Third click sets the other radius and the start of the arc. The fourth click sets the end of the arc. 
* After the fourth click, the arc of ellipse is created, together with a set of construction geometry aligned to it (major diameter, minor diameter, two foci). The construction geometry can be manually deleted if not needed, and recreated later. See [[Constraint Internal Alignment|Internal Alignment Constraint]] and [[Sketcher Show Hide Internal Geometry]].
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

====Peculiarities==== &lt;!--T:6--&gt;
* Major and minor axes of underlying ellipse are strict and cannot be swapped by resizing. The underlying ellipse must be rotated to swap the axes.
* Unlike ellipse that can be constrained to become a circle, ellipse arc cannot represent an arc of circle.
* Moving the arc of ellipse by edge is the same as moving ellipse's center.

====Version==== &lt;!--T:5--&gt;
Introduced in FreeCAD v0.15.4309


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Circle</title>
    <ns>0</ns>
    <id>1608</id>
    <revision>
      <id>93792</id>
      <parentid>55428</parentid>
      <timestamp>2014-07-02T09:25:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>19pjc9z6tdzf40vf61jyshmqe7b8uhf</sha1>
      <text xml:space="preserve" bytes="803">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Circle|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|Part Design]]|MenuLocation=Sketch → Sketcher geometries → Create circle|SeeAlso=[[Sketcher Arc|Sketcher Arc]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws a circle by picking two points: the center, and a point along the radius.
When starting the tool, the mouse pointer changes to a white cross with a red circle icon. Besides are coordinates shown in real time.

&lt;!--T:3--&gt;
[[Image:Sketcher_CircleExample1.png‎]]

====Usage==== &lt;!--T:4--&gt;
* Pick points on an empty area of the 3D view, or on an existing object (auto constraints must be active in TaskView).
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.



</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Circle3Point</title>
    <ns>0</ns>
    <id>39780</id>
    <revision>
      <id>106264</id>
      <parentid>106263</parentid>
      <timestamp>2014-08-24T20:09:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>999vmw56y57dq4uw361ejbq1xg9c5yw</sha1>
      <text xml:space="preserve" bytes="391">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateCircle3Point|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create circle by three points|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 



====Usage==== &lt;!--T:3--&gt;





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher CloseShape</title>
    <ns>0</ns>
    <id>40534</id>
    <revision>
      <id>108635</id>
      <parentid>108634</parentid>
      <timestamp>2014-09-07T18:37:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>j6e9k1nju6mg2ogyv6737jrxhre2ps8</sha1>
      <text xml:space="preserve" bytes="308">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CloseShape|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Close Shape|Shortcut=Maiusc+Ctrl+S|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher ConnectLines</title>
    <ns>0</ns>
    <id>40541</id>
    <revision>
      <id>108642</id>
      <parentid>108641</parentid>
      <timestamp>2014-09-07T18:39:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qj0jt3x9nfspqizzo4up25v63mxj0qe</sha1>
      <text xml:space="preserve" bytes="312">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher ConnectLines|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Connect Edges|Shortcut=Maiusc+Ctrl+K|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher ConstructionMode</title>
    <ns>0</ns>
    <id>1760</id>
    <revision>
      <id>101440</id>
      <parentid>100661</parentid>
      <timestamp>2014-08-01T18:45:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Revolve -&gt; Revolution</comment>
      <sha1>o5juosealqwk7f3no9rrn8bunr3xnjx</sha1>
      <text xml:space="preserve" bytes="1509">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher AlterConstruction|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Toggle construction line}}

====Description==== &lt;!--T:2--&gt;
This tool toggles sketch geometry from/to construction mode. It can be used on any type of geometry: line, arc or circle.

&lt;!--T:3--&gt;
[[File:Sketcher_ConstructionMode_fr_01.png|480px|Sketcher Mode de Construction]]
{{clear}}
Construction geometry is an important tool of the sketcher. When using a sketch for a 3D operation, construction geometry is ignored. 

&lt;!--T:4--&gt;
In sketch edit mode, construction geometry is shown as blue, and won't turn green when a sketch is fully constrained. Once you exit the sketch mode, construction geometry is hidden on the screen.

&lt;!--T:5--&gt;
'''Note:''' starting with v0.13, construction lines can be used as rotation axis by the [[PartDesign Revolution]] feature.

====Usage==== &lt;!--T:6--&gt;
* Select one or more sketch geometry in the 3D view, then click on the tool or access it in the menu.
{{clear}}
====Example====

&lt;!--T:7--&gt;
&lt;center&gt;
&lt;gallery widths=&quot;400&quot; heights=&quot;200&quot;&gt;
File:Sketcher_ConstructionMode_fr_01.png|Use Construction mode change your sketches, and
Image:Sketcher_ConstructionMode_fr_02.png|once your finished sketch, sketch and leaving the forms used in construction mode, have become invisible to the screen (but are still present in the Sketcher) 
&lt;/gallery&gt;
&lt;/center&gt;


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher EditSketch</title>
    <ns>0</ns>
    <id>39754</id>
    <revision>
      <id>106204</id>
      <parentid>106203</parentid>
      <timestamp>2014-08-23T20:52:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>hfjjd83g8e3pf52pr3vegtk89pinsxr</sha1>
      <text xml:space="preserve" bytes="368">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher EditSketch|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Edit sketch|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 



====Usage==== &lt;!--T:3--&gt; 



====Note==== &lt;!--T:4--&gt;


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Ellipse</title>
    <ns>0</ns>
    <id>53230</id>
    <revision>
      <id>133135</id>
      <parentid>132810</parentid>
      <timestamp>2014-12-23T16:31:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>agawkoxl4ntvob6jjbt297svaymb9gv</sha1>
      <text xml:space="preserve" bytes="2356">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateEllipse|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|Part Design]]|MenuLocation=Sketch → Sketcher geometries → Create ellipse by center|SeeAlso=[[Sketcher Ellipse by 3 Points]], [[Sketcher Circle|Sketcher Circle]], [[Sketcher Arc of Ellipse]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws an ellipse by picking three points: the center, the end of major radius, the minor radius.
When starting the tool, the mouse pointer changes to a white cross with a red ellipse icon. Besides are coordinates shown in real time.

&lt;!--T:3--&gt;
[[Image:Sketcher_EllipseExample1.png‎|thumb|none|500px|The sequence of clicks is indicated by yellow arrows with numbers. C is the center, a - major diameter, b - minor diameter, F1, F2 are foci.]]

====Usage==== &lt;!--T:4--&gt;
* Invoke the command by clicking a toolbar button, picking the menu item, or by using keyboard shortcut (needs to be assigned first in [[Interface Customization]]).
* First click in 3D view sets ellipse center. Second click sets the first radius and orientation of the ellipse. Third click sets the other radius (the distance from the line defined by first two clicks is the second radius). 
* After the third click, the ellipse is created, together with a set of construction geometry aligned to it (major diameter, minor diameter, two foci). The construction geometry can be manually deleted if not needed, and recreated later. See [[Constraint Internal Alignment|Internal Alignment Constraint]] and [[Sketcher Show Hide Internal Geometry]].
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

====Peculiarities==== &lt;!--T:6--&gt;
* Major and minor axes of ellipses are strict and cannot be swapped by resizing the ellipse. This is a consequence of the solver parametrization used (center (x,y), focus1 (x,y) and minor radius length (b)) and the same strict behavior of OpenCascade. The ellipse must be rotated to swap the axes.
* Ellipse can function as a circle when its major and minor diameter lines are deleted, and one of the foci is constrained to coincide with the center. But radius constraint won't work on such a circle.
* Moving the ellipse by edge is the same as moving ellipse's center.

====Version==== &lt;!--T:5--&gt;
Introduced in FreeCAD v0.15.4309


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher External</title>
    <ns>0</ns>
    <id>4351</id>
    <revision>
      <id>93375</id>
      <parentid>84120</parentid>
      <timestamp>2014-06-22T21:23:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>bngud8fgjxxz59wuih4hsk1aj0umgue</sha1>
      <text xml:space="preserve" bytes="5656">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher External|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|Shortcut=E|MenuLocation=Sketch → Sketcher geometries → Sketcher External|SeeAlso=[[Sketcher_ConstructionMode|ConstructionMode]]}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
When a sketch is mapped to a face of a solid, the Sketcher External Geometry tool can be used to link to an edge or vertex of that solid. It works by inserting a linked construction geometry into the sketch. The default colour of externally linked edges, is magenta. As with standard non-linked construction geometry (blue), the externally linked geometry is only visible when the sketch is in edit mode and is not directly used in the subsequent result, from use of the sketch in another tool. Both types of construction geometry are used as a reference for constraints, within the sketch.


&lt;!--T:4--&gt;
This tool is used constrain elements of a sketch with reference to an element of an external solid, to which the sketch has been mapped. For example, it could be used to pocket a hole in the centre of a solid or 30mm from one end etc..

&lt;!--T:5--&gt;
The external geometry tool can only be applied to edges and/or vertices of the solid to which the sketch has been mapped. Consequently you can only link to elements of 3d solids. The edges may be straight, an arc or a circle.

&lt;!--T:25--&gt;
You can not link to an external geometry of the solid which will be created from the sketch you are currently editing. This seems logical, however is a common issue when re-editing a sketch. When re-editing a sketch of a PartDesign feature which is mapped to the face of a solid (e.g. if you want to go back and change a sketch for a Pad002 where that sketch was mapped to a face of another Pad001) it is necessary to hide the solid the currently being edited sketch created (Pad002) and un-hide the previous solid (Pad001), so that you can see the previous solid (Pad001) if you wish to be able to apply the external geometry tool to one of its elements.


&lt;!--T:7--&gt;
[[FILE:Sketcher_ExternalEsempio1.png]]

==Use== &lt;!--T:8--&gt;
* Create a new sketch on face of a solid (Click on the solid face, then click the create sketch button) or map an existing sketch to a selected face of a solid (first select a single face of a solid then use the &quot;Map Sketch to Face&quot; tool).
* Click the 'Sketcher External' button
* Select the edge, or vertex, of the solid that you want to link to in the sketch (remember this must be an edge or vertex of the solid to which the sketch is mapped)


===Appearance When Successfully Linked === &lt;!--T:15--&gt;
A (default magenta) coloured line will be overlaid when an edge is successfully linked (the vertices will be red), and will be visible in your sketch only while your sketch is in edit mode.

===Similarity to Construction Lines=== &lt;!--T:16--&gt;
External geometry (default colour magenta) lines are similar (default colour blue) [[Sketcher_ConstructionMode|Contruction lines]] except in that the external geometry magenta lines are parametrically linked back to an element of the solid to which the sketch is mapped.
Construction geometry are lines that are internal to the sketch, are only visible when the sketch is in edit mode and will be used for constraint references only, and not directly for later solid operations, like Pad or Pocket.


===Use Of External Geometry in a PartDesign Workbench Work Flow=== &lt;!--T:18--&gt;

&lt;!--T:19--&gt;
In the PartDesign workbench work flow, the External Geometry tool is used to assist in the positioning of an aspect of the solid you are constructing, relative to the previous stage in its construction. PartDesign workbench is intended to produce one single solid, therefore these sketches with external geometry are used to create a new feature of that one single solid.

&lt;!--T:21--&gt;
The external Geometry tool can, for example, be used as a reference for a constraint being used to position a hole in an object, at a specific location.

===Use Of External Geometry in a Part Workbench Work Flow=== &lt;!--T:24--&gt;
Part Workbench tools make new separate solids, unlike PartDesign tools which make a new feature of a single solid.

&lt;!--T:26--&gt;
Some of the Part workbench tools can use a sketch for input. Where this is the case, the sketch can use the External geometry tool if the sketch is mapped to a face of a solid in a similar way to the PartDesign workbench. 

&lt;!--T:27--&gt;
Unlike a PartDesign tool, the result of a Part tool will be a separate solid and the placement parameters can be modified after construction. The sketch will define the location of the solid constructed from it, when its placement parameters are set to zero. Any changes made to these placement values will move the solid relative to the location defined by the sketch.

==Example== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
This, below, is a sketch mapped to the top face of a solid created from a Pad of a previous sketch. The magenta lines are External Geometry linked to two edges of this pre-existing Pad.

&lt;!--T:28--&gt;
In this case they are used as a reference for tangency constraints with the circumferences of one circle. They are also used as the reference for a horizontal and a vertical constraint to locate the centre of the second circle relative to the end and top of the Pad.
 
[[FILE:Sketcher_ExternalEsempio2.png]]
 
This is the same sketch in edit mode, with the Pad upon which it is mapped hidden. 

&lt;!--T:13--&gt;
[[FILE:Sketcher_ExternalEsempio4.png]]
 
When the sketch edit mode is closed, External Geometry lines are not visible.
 
[[FILE:Sketcher_ExternalEsempio3.png]]
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Fillet</title>
    <ns>0</ns>
    <id>1759</id>
    <revision>
      <id>63715</id>
      <parentid>58567</parentid>
      <timestamp>2014-01-25T18:18:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>em0e5lydfcuifb0lc5s2it10w1gpl79</sha1>
      <text xml:space="preserve" bytes="891">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateFillet|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|Shortcut=F|MenuLocation=Sketch → Sketcher geometries → Create fillet}}

====Description==== &lt;!--T:2--&gt;
This tool creates a fillet between two lines joined at one point. Activate the tool, then select both lines or click on the corner point.

&lt;!--T:3--&gt;
When starting the tool, the mouse pointer changes to a white cross with a red fillet icon. It stays active so you can do multiple fillets.

&lt;!--T:5--&gt;
[[Image:SketcherCreateFilletExample.png‎]]

====Usage==== &lt;!--T:4--&gt;
* Pick a vertex connecting two lines; or click on two connected lines, the distance you click from the vertex will set the fillet radius. 
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels or terminates the function.
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Heptagon</title>
    <ns>0</ns>
    <id>39819</id>
    <revision>
      <id>108561</id>
      <parentid>106600</parentid>
      <timestamp>2014-09-06T19:16:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>rg67g713kbtqgbluhpgpjo2j99aon29</sha1>
      <text xml:space="preserve" bytes="1073">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateHeptagon|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create heptagon|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 


&lt;!--T:5--&gt;
Draws an heptagon inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreateHeptagonExample.png‎]]


====Usage==== &lt;!--T:3--&gt;


&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreateHeptagon.png|16px]] Create heptagon}} button, click once to set the center, then move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.




&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Hexagon</title>
    <ns>0</ns>
    <id>39812</id>
    <revision>
      <id>108544</id>
      <parentid>106592</parentid>
      <timestamp>2014-09-06T19:14:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>o3h2ali700rtqbc9lgrv89336t6bkdd</sha1>
      <text xml:space="preserve" bytes="1068">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateHexagon|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create hexagon|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 


&lt;!--T:5--&gt;
Draws an hexagon inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreateHexagonExample.png‎]]


====Usage==== &lt;!--T:3--&gt;


&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreateHexagon.png|16px]] Create hexagon}} button, click once to set the center, then move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Icon</title>
    <ns>0</ns>
    <id>51420</id>
    <revision>
      <id>130390</id>
      <parentid>130389</parentid>
      <timestamp>2014-12-08T20:38:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bp9mzd4c6y20dolpuw1duqqbfk9quct</sha1>
      <text xml:space="preserve" bytes="11480">
==[[Image:Sketcher Sketch.png|32px|Sketcher Sketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher Workbench]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Sketcher Point.png|32px|Sketcher Point|link=Sketcher Point]] [[Sketcher Point|Sketcher Point]]
 &lt;nowiki&gt;[[Image:Sketcher Point.png|32px|Sketcher Point|link=Sketcher Point]] [[Sketcher Point|Sketcher Point]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Sketcher Arc.png|32px|Sketcher Arc|link=Sketcher Arc]] [[Sketcher Arc|Sketcher Arc]]
 &lt;nowiki&gt;[[Image:Sketcher Arc.png|32px|Sketcher Arc|link=Sketcher Arc]] [[Sketcher Arc|Sketcher Arc]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Sketcher Circle.png|32px|Sketcher Circle|link=Sketcher Circle]] [[Sketcher Circle|Sketcher Circle]]
 &lt;nowiki&gt;[[Image:Sketcher Circle.png|32px|Sketcher Circle|link=Sketcher Circle]] [[Sketcher Circle|Sketcher Circle]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Sketcher Line.png|32px|Sketcher Line|link=Sketcher Line]] [[Sketcher Line|Sketcher Line]]
 &lt;nowiki&gt;[[Image:Sketcher Line.png|32px|Sketcher Line|link=Sketcher Line]] [[Sketcher Line|Sketcher Line]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Sketcher CreatePolyline.png|32px|Sketcher CreatePolyline|link=Sketcher Polyline]] [[Sketcher Polyline|Sketcher CreatePolyline]]
 &lt;nowiki&gt;[[Image:Sketcher CreatePolyline.png|32px|Sketcher CreatePolyline|link=Sketcher Polyline]] [[Sketcher Polyline|Sketcher CreatePolyline]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Sketcher CreateRectangle.png|32px|Sketcher CreateRectangle|link=Sketcher Rectangle]] [[Sketcher Rectangle|Sketcher CreateRectangle]]
 &lt;nowiki&gt;[[Image:Sketcher CreateRectangle.png|32px|Sketcher CreateRectangle|link=Sketcher Rectangle]] [[Sketcher Rectangle|Sketcher CreateRectangle]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Sketcher CreateFillet.png|32px|Sketcher CreateFillet|link=Sketcher Fillet]] [[Sketcher Fillet|Sketcher CreateFillet]]
 &lt;nowiki&gt;[[Image:Sketcher CreateFillet.png|32px|Sketcher CreateFillet|link=Sketcher Fillet]] [[Sketcher Fillet|Sketcher CreateFillet]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Sketcher Trimming.png|32px|Sketcher Trimming|link=Sketcher Trimming]] [[Sketcher Trimming|Sketcher Trimming]]
 &lt;nowiki&gt;[[Image:Sketcher Trimming.png|32px|Sketcher Trimming|link=Sketcher Trimming]] [[Sketcher Trimming|Sketcher Trimming]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
[[Image:Sketcher External.png|32px|Sketcher External|link=Sketcher External]][[Sketcher External|Sketcher External]]
 &lt;nowiki&gt;[[Image:Sketcher External.png|32px|Sketcher External|link=Sketcher External]][[Sketcher External|Sketcher External]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Sketcher AlterConstruction.png|32px|Sketcher AlterConstruction|link=Sketcher ConstructionMode]] [[Sketcher ConstructionMode|Sketcher AlterConstruction]]
 &lt;nowiki&gt;[[Image:Sketcher AlterConstruction.png|32px|Sketcher AlterConstruction|link=Sketcher ConstructionMode]] [[Sketcher ConstructionMode|Sketcher AlterConstruction]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:Sketcher Sketch.png|32px|Sketcher NewSketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher NewSketch]]
 &lt;nowiki&gt;[[Image:Sketcher Sketch.png|32px|Sketcher NewSketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher NewSketch]]&lt;/nowiki&gt;

&lt;!--T:13--&gt;
[[File:Sketcher ViewSketch.png|32px|Sketcher ViewSketch|link=Sketcher ViewSketch]] [[Sketcher ViewSketch|Sketcher ViewSketch]]
 &lt;nowiki&gt;[[File:Sketcher ViewSketch.png|32px|Sketcher ViewSketch|link=Sketcher ViewSketch]] [[Sketcher ViewSketch|Sketcher ViewSketch]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[Image:Sketcher MapSketch.png|32px|Sketcher MapSketch|link=Sketcher MapSketch]] [[Sketcher MapSketch|Sketcher MapSketch]]
 &lt;nowiki&gt;[[Image:Sketcher MapSketch.png|32px|Sketcher MapSketch|link=Sketcher MapSketch]] [[Sketcher MapSketch|Sketcher MapSketch]]&lt;/nowiki&gt;

&lt;!--T:15--&gt;
[[Image:Sketcher LeaveSketch.png|32px|Sketcher LeaveSketch|link=Sketcher LeaveSketch]] [[Sketcher LeaveSketch|Sketcher LeaveSketch]]
 &lt;nowiki&gt;[[Image:Sketcher LeaveSketch.png|32px|Sketcher LeaveSketch|link=Sketcher LeaveSketch]] [[Sketcher LeaveSketch|Sketcher LeaveSketch]]&lt;/nowiki&gt;

===Sketcher Constrain=== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
[[Image:Sketcher ConstrainLock.png|32px|Sketcher ConstrainLock|link=Constraint Lock]] [[Constraint Lock|Sketcher ConstrainLock]]
 &lt;nowiki&gt;[[Image:Sketcher ConstrainLock.png|32px|Sketcher ConstrainLock|link=Constraint Lock]] [[Constraint Lock|Sketcher ConstrainLock]]&lt;/nowiki&gt;

&lt;!--T:18--&gt;
[[Image:Constraint PointOnPoint.png|32px|Constraint PointOnPoint|link=Constraint PointOnPoint]] [[Constraint PointOnPoint|Constraint PointOnPoint]]
 &lt;nowiki&gt;[[Image:Constraint PointOnPoint.png|32px|Constraint PointOnPoint|link=Constraint PointOnPoint]] [[Constraint PointOnPoint|Constraint PointOnPoint]]&lt;/nowiki&gt;

&lt;!--T:19--&gt;
[[Image:Constraint PointOnObject.png|32px|Constraint PointOnObject|link=Constraint PointOnObject]] [[Constraint PointOnObject|Constraint PointOnObject]]
 &lt;nowiki&gt;[[Image:Constraint PointOnObject.png|32px|Constraint PointOnObject|link=Constraint PointOnObject]] [[Constraint PointOnObject|Constraint PointOnObject]]&lt;/nowiki&gt;

&lt;!--T:20--&gt;
[[Image:Constraint HorizontalDistance.png|32px|Constraint HorizontalDistance|link=Constraint HorizontalDistance]] [[Constraint HorizontalDistance|Constraint HorizontalDistance]]
 &lt;nowiki&gt;[[Image:Constraint HorizontalDistance.png|32px|Constraint HorizontalDistance|link=Constraint HorizontalDistance]] [[Constraint HorizontalDistance|Constraint HorizontalDistance]]&lt;/nowiki&gt;

&lt;!--T:21--&gt;
[[Image:Constraint VerticalDistance.png|32px|Constraint VerticalDistance|link=Constraint VerticalDistance]] [[Constraint VerticalDistance|Constraint VerticalDistance]]
 &lt;nowiki&gt;[[Image:Constraint VerticalDistance.png|32px|Constraint VerticalDistance|link=Constraint VerticalDistance]] [[Constraint VerticalDistance|Constraint VerticalDistance]]&lt;/nowiki&gt;

&lt;!--T:22--&gt;
[[Image:Constraint Vertical.png|32px|Constraint Vertical|link=Constraint Vertical]] [[Constraint Vertical|Constraint Vertical]]
 &lt;nowiki&gt;[[Image:Constraint Vertical.png|32px|Constraint Vertical|link=Constraint Vertical]] [[Constraint Vertical|Constraint Vertical]]&lt;/nowiki&gt;

&lt;!--T:23--&gt;
[[Image:Constraint Horizontal.png|32px|Constraint Horizontal |link=Constraint Horizontal]] [[Constraint Horizontal|Constraint Horizontal]]
 &lt;nowiki&gt;[[Image:Constraint Horizontal.png|32px|Constraint Horizontal |link=Constraint Horizontal]] [[Constraint Horizontal|Constraint Horizontal]]&lt;/nowiki&gt;

&lt;!--T:24--&gt;
[[Image:Constraint Length.png|32px|Constraint Length|link=Constraint Length]] [[Constraint Length|Constraint Length]]
 &lt;nowiki&gt;[[Image:Constraint Length.png|32px|Constraint Length|link=Constraint Length]] [[Constraint Length|Constraint Length]]&lt;/nowiki&gt;

&lt;!--T:25--&gt;
[[Image:Constraint Radius.png|32px|Constraint Radius|link=Constraint Radius]] [[Constraint Radius|Constraint Radius]]
 &lt;nowiki&gt;[[Image:Constraint Radius.png|32px|Constraint Radius|link=Constraint Radius]] [[Constraint Radius|Constraint Radius]]&lt;/nowiki&gt;

&lt;!--T:26--&gt;
[[Image:Constraint Parallel.png|32px|Constraint Parallel|link=Constraint Parallel]] [[Constraint Parallel|Constraint Parallel]]
 &lt;nowiki&gt;[[Image:Constraint Parallel.png|32px|Constraint Parallel|link=Constraint Parallel]] [[Constraint Parallel|Constraint Parallel]]&lt;/nowiki&gt;

&lt;!--T:27--&gt;
[[Image:Constraint Perpendicular.png|32px|Constraint Perpendicular|link=Constraint Perpendicular]] [[Constraint Perpendicular|Constraint Perpendicular]]
 &lt;nowiki&gt;[[Image:Constraint Perpendicular.png|32px|Constraint Perpendicular|link=Constraint Perpendicular]] [[Constraint Perpendicular|Constraint Perpendicular]]&lt;/nowiki&gt;

&lt;!--T:28--&gt;
[[Image:Constraint InternalAngle.png|32px|Constraint InternalAngle|link=Constraint InternalAngle]] [[Constraint InternalAngle|Constraint InternalAngle]]
 &lt;nowiki&gt;[[Image:Constraint InternalAngle.png|32px|Constraint InternalAngle|link=Constraint InternalAngle]] [[Constraint InternalAngle|Constraint InternalAngle]]&lt;/nowiki&gt;

&lt;!--T:29--&gt;
[[Image:Constraint Tangent.png|32px|Constraint Tangent|link=Constraint Tangent]] [[Constraint Tangent|Constraint Tangent]]
 &lt;nowiki&gt;[[Image:Constraint Tangent.png|32px|Constraint Tangent|link=Constraint Tangent]] [[Constraint Tangent|Constraint Tangent]]&lt;/nowiki&gt;

&lt;!--T:30--&gt;
[[Image:Constraint EqualLength.png|32px|Constraint EqualLength|link=Constraint EqualLength]] [[Constraint EqualLength|Constraint EqualLength]]
 &lt;nowiki&gt;[[Image:Constraint EqualLength.png|32px|Constraint EqualLength|link=Constraint EqualLength]] [[Constraint EqualLength|Constraint EqualLength]]&lt;/nowiki&gt;

&lt;!--T:31--&gt;
[[Image:Constraint Symmetric.png|32px|Constraint Symmetric|link=Constraint Symmetric]] [[Constraint Symmetric|Constraint Symmetric]]
 &lt;nowiki&gt;[[Image:Constraint Symmetric.png|32px|Constraint Symmetric|link=Constraint Symmetric]] [[Constraint Symmetric|Constraint Symmetric]]&lt;/nowiki&gt;

&lt;!--T:32--&gt;
[[File:Constraint Concentric.svg|32px|Constraint Concentric|link=Constraint Concentric]] [[Constraint Concentric|Constraint Concentric]]
 &lt;nowiki&gt;[[File:Constraint Concentric.svg|32px|Constraint Concentric|link=Constraint Concentric]] [[Constraint Concentric|Constraint Concentric]]&lt;/nowiki&gt;

&lt;!--T:33--&gt;
[[File:Constraint ExternalAngle.svg|32px|Constraint ExternalAngle|link=Constraint ExternalAngle]] [[Constraint ExternalAngle|Constraint ExternalAngle]]
 &lt;nowiki&gt;[[File:Constraint ExternalAngle.svg|32px|Constraint ExternalAngle|link=Constraint ExternalAngle]] [[Constraint ExternalAngle|Constraint ExternalAngle]]&lt;/nowiki&gt;

&lt;!--T:34--&gt;
[[File:Constraint PointOnEnd.svg|32px|Constraint PointOnEnd|link=Constraint PointOnEnd]] [[Constraint PointOnEnd|Constraint PointOnEnd]]
 &lt;nowiki&gt;[[File:Constraint PointOnEnd.svg|32px|Constraint PointOnEnd|link=Constraint PointOnEnd]] [[Constraint PointOnEnd|Constraint PointOnEnd]]&lt;/nowiki&gt;

&lt;!--T:35--&gt;
[[File:Constraint PointOnMidPoint.svg|32px|Constraint PointOnMidPoint|link=Constraint PointOnMidPoint]] [[Constraint PointOnMidPoint|Constraint PointOnMidPoint]]
 &lt;nowiki&gt;[[File:Constraint PointOnMidPoint.svg|32px|Constraint PointOnMidPoint|link=Constraint PointOnMidPoint]] [[Constraint PointOnMidPoint|Constraint PointOnMidPoint]]&lt;/nowiki&gt;

&lt;!--T:36--&gt;
[[File:Constraint PointOnStart.svg|32px|Constraint PointOnStart|link=Constraint PointOnStart]] [[Constraint PointOnStart|Constraint PointOnStart]]
 &lt;nowiki&gt;[[File:Constraint PointOnStart.svg|32px|Constraint PointOnStart|link=Constraint PointOnStart]] [[Constraint PointOnStart|Constraint PointOnStart]]&lt;/nowiki&gt;

&lt;!--T:37--&gt;
[[File:Constraint PointToObject.svg|32px|Constraint PointToObject|link=Constraint PointToObject]] [[Constraint PointToObject|Constraint PointToObject]]
 &lt;nowiki&gt;[[File:Constraint PointToObject.svg|32px|Constraint PointToObject|link=Constraint PointToObject]] [[Constraint PointToObject|Constraint PointToObject]]&lt;/nowiki&gt;

&lt;!--T:38--&gt;
[[File:Constraint TangentToEnd.svg|32px|Constraint TangentToEnd|link=Constraint TangentToEnd]] [[Constraint TangentToEnd|Constraint TangentToEnd]]
 &lt;nowiki&gt;[[File:Constraint TangentToEnd.svg|32px|Constraint TangentToEnd|link=Constraint TangentToEnd]] [[Constraint TangentToEnd|Constraint TangentToEnd]]&lt;/nowiki&gt;

&lt;!--T:39--&gt;
[[File:Constraint TangentToStart.svg|32px|Constraint TangentToStart|link=Constraint TangentToStart]] [[Constraint TangentToStart|Constraint TangentToStart]]
 &lt;nowiki&gt;[[File:Constraint TangentToStart.svg|32px|Constraint TangentToStart|link=Constraint TangentToStart]] [[Constraint TangentToStart|Constraint TangentToStart]]&lt;/nowiki&gt;

&lt;!--T:40--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Key</title>
    <ns>0</ns>
    <id>51449</id>
    <revision>
      <id>131466</id>
      <parentid>131012</parentid>
      <timestamp>2014-12-13T21:28:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>q63vre8c3nyhd5qns5p8hxow9cg4lor</sha1>
      <text xml:space="preserve" bytes="12034">
==[[File:Sketcher Sketch.png|32px|Sketcher Sketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher Sketch]]== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Sketcher Point.png|16px|Sketcher Point|link=Sketcher Point]] [[Sketcher Point|Sketcher Point]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Point.png|16px|Sketcher Point|link=Sketcher Point]] [[Sketcher Point|Sketcher Point]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Sketcher Arc.png|16px|Sketcher Arc|link=Sketcher Arc]] [[Sketcher Arc|Sketcher Arc]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Arc.png|16px|Sketcher Arc|link=Sketcher Arc]] [[Sketcher Arc|Sketcher Arc]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Sketcher Circle.png|16px|Sketcher Circle|link=Sketcher Circle]] [[Sketcher Circle|Sketcher Circle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Circle.png|16px|Sketcher Circle|link=Sketcher Circle]] [[Sketcher Circle|Sketcher Circle]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Sketcher Line.png|16px|Sketcher Line|link=Sketcher Line]] [[Sketcher Line|Sketcher Line]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Line.png|16px|Sketcher Line|link=Sketcher Line]] [[Sketcher Line|Sketcher Line]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Sketcher CreatePolyline.png|16px|Sketcher CreatePolyline|link=Sketcher Polyline]] [[Sketcher Polyline|Sketcher CreatePolyline]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher CreatePolyline.png|16px|Sketcher CreatePolyline|link=Sketcher Polyline]] [[Sketcher Polyline|Sketcher CreatePolyline]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Sketcher CreateRectangle.png|16px|Sketcher CreateRectangle|link=Sketcher Rectangle]] [[Sketcher Rectangle|Sketcher CreateRectangle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher CreateRectangle.png|16px|Sketcher CreateRectangle|link=Sketcher Rectangle]] [[Sketcher Rectangle|Sketcher CreateRectangle]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Sketcher CreateFillet.png|16px|Sketcher CreateFillet|link=Sketcher Fillet]] [[Sketcher Fillet|Sketcher CreateFillet]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher CreateFillet.png|16px|Sketcher CreateFillet|link=Sketcher Fillet]] [[Sketcher Fillet|Sketcher CreateFillet]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Sketcher Trimming.png|16px|Sketcher Trimming|link=Sketcher Trimming]] [[Sketcher Trimming|Sketcher Trimming]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Trimming.png|16px|Sketcher Trimming|link=Sketcher Trimming]] [[Sketcher Trimming|Sketcher Trimming]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Sketcher External.png|16px|Sketcher External|link=Sketcher External]][[Sketcher External|Sketcher External]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher External.png|16px|Sketcher External|link=Sketcher External]][[Sketcher External|Sketcher External]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Sketcher AlterConstruction.png|16px|Sketcher AlterConstruction|link=Sketcher ConstructionMode]] [[Sketcher ConstructionMode|Sketcher AlterConstruction]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher AlterConstruction.png|16px|Sketcher AlterConstruction|link=Sketcher ConstructionMode]] [[Sketcher ConstructionMode|Sketcher AlterConstruction]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:Sketcher Sketch.png|16px|Sketcher NewSketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher NewSketch]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher Sketch.png|16px|Sketcher NewSketch|link=Sketcher NewSketch]] [[Sketcher NewSketch|Sketcher NewSketch]]}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
{{KEY|[[File:Sketcher ViewSketch.png|16px|Sketcher ViewSketch|link=Sketcher ViewSketch]] [[Sketcher ViewSketch|Sketcher ViewSketch]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher ViewSketch.png|16px|Sketcher ViewSketch|link=Sketcher ViewSketch]] [[Sketcher ViewSketch|Sketcher ViewSketch]]}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:Sketcher MapSketch.png|16px|Sketcher MapSketch|link=Sketcher MapSketch]] [[Sketcher MapSketch|Sketcher MapSketch]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher MapSketch.png|16px|Sketcher MapSketch|link=Sketcher MapSketch]] [[Sketcher MapSketch|Sketcher MapSketch]]}}&lt;/nowiki&gt;

&lt;!--T:15--&gt;
{{KEY|[[File:Sketcher LeaveSketch.png|16px|Sketcher LeaveSketch|link=Sketcher LeaveSketch]] [[Sketcher LeaveSketch|Sketcher LeaveSketch]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher LeaveSketch.png|16px|Sketcher LeaveSketch|link=Sketcher LeaveSketch]] [[Sketcher LeaveSketch|Sketcher LeaveSketch]]}}&lt;/nowiki&gt;

===Sketcher Constrain=== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
{{KEY|[[File:Sketcher ConstrainLock.png|16px|Sketcher ConstrainLock|link=Constraint Lock]] [[Constraint Lock|Sketcher ConstrainLock]]}}
 &lt;nowiki&gt;{{KEY|[[File:Sketcher ConstrainLock.png|16px|Sketcher ConstrainLock|link=Constraint Lock]] [[Constraint Lock|Sketcher ConstrainLock]]}}&lt;/nowiki&gt;

&lt;!--T:18--&gt;
{{KEY|[[File:Constraint PointOnPoint.png|16px|Constraint PointOnPoint|link=Constraint PointOnPoint]] [[Constraint PointOnPoint|Constraint PointOnPoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointOnPoint.png|16px|Constraint PointOnPoint|link=Constraint PointOnPoint]] [[Constraint PointOnPoint|Constraint PointOnPoint]]}}&lt;/nowiki&gt;

&lt;!--T:19--&gt;
{{KEY|[[File:Constraint PointOnObject.png|16px|Constraint PointOnObject|link=Constraint PointOnObject]] [[Constraint PointOnObject|Constraint PointOnObject]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointOnObject.png|16px|Constraint PointOnObject|link=Constraint PointOnObject]] [[Constraint PointOnObject|Constraint PointOnObject]]}}&lt;/nowiki&gt;

&lt;!--T:20--&gt;
{{KEY|[[File:Constraint HorizontalDistance.png|16px|Constraint HorizontalDistance|link=Constraint HorizontalDistance]] [[Constraint HorizontalDistance|Constraint HorizontalDistance]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint HorizontalDistance.png|16px|Constraint HorizontalDistance|link=Constraint HorizontalDistance]] [[Constraint HorizontalDistance|Constraint HorizontalDistance]]}}&lt;/nowiki&gt;

&lt;!--T:21--&gt;
{{KEY|[[File:Constraint VerticalDistance.png|16px|Constraint VerticalDistance|link=Constraint VerticalDistance]] [[Constraint VerticalDistance|Constraint VerticalDistance]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint VerticalDistance.png|16px|Constraint VerticalDistance|link=Constraint VerticalDistance]] [[Constraint VerticalDistance|Constraint VerticalDistance]]}}&lt;/nowiki&gt;

&lt;!--T:22--&gt;
{{KEY|[[File:Constraint Vertical.png|16px|Constraint Vertical|link=Constraint Vertical]] [[Constraint Vertical|Constraint Vertical]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Vertical.png|16px|Constraint Vertical|link=Constraint Vertical]] [[Constraint Vertical|Constraint Vertical]]}}&lt;/nowiki&gt;

&lt;!--T:23--&gt;
{{KEY|[[File:Constraint Horizontal.png|16px|Constraint Horizontal |link=Constraint Horizontal]] [[Constraint Horizontal|Constraint Horizontal]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Horizontal.png|16px|Constraint Horizontal |link=Constraint Horizontal]] [[Constraint Horizontal|Constraint Horizontal]]}}&lt;/nowiki&gt;

&lt;!--T:24--&gt;
{{KEY|[[File:Constraint Length.png|16px|Constraint Length|link=Constraint Length]] [[Constraint Length|Constraint Length]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Length.png|16px|Constraint Length|link=Constraint Length]] [[Constraint Length|Constraint Length]]}}&lt;/nowiki&gt;

&lt;!--T:25--&gt;
{{KEY|[[File:Constraint Radius.png|16px|Constraint Radius|link=Constraint Radius]] [[Constraint Radius|Constraint Radius]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Radius.png|16px|Constraint Radius|link=Constraint Radius]] [[Constraint Radius|Constraint Radius]]}}&lt;/nowiki&gt;

&lt;!--T:26--&gt;
{{KEY|[[File:Constraint Parallel.png|16px|Constraint Parallel|link=Constraint Parallel]] [[Constraint Parallel|Constraint Parallel]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Parallel.png|16px|Constraint Parallel|link=Constraint Parallel]] [[Constraint Parallel|Constraint Parallel]]}}&lt;/nowiki&gt;

&lt;!--T:27--&gt;
{{KEY|[[File:Constraint Perpendicular.png|16px|Constraint Perpendicular|link=Constraint Perpendicular]] [[Constraint Perpendicular|Constraint Perpendicular]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Perpendicular.png|16px|Constraint Perpendicular|link=Constraint Perpendicular]] [[Constraint Perpendicular|Constraint Perpendicular]]}}&lt;/nowiki&gt;

&lt;!--T:28--&gt;
{{KEY|[[File:Constraint InternalAngle.png|16px|Constraint InternalAngle|link=Constraint InternalAngle]] [[Constraint InternalAngle|Constraint InternalAngle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint InternalAngle.png|16px|Constraint InternalAngle|link=Constraint InternalAngle]] [[Constraint InternalAngle|Constraint InternalAngle]]}}&lt;/nowiki&gt;

&lt;!--T:29--&gt;
{{KEY|[[File:Constraint Tangent.png|16px|Constraint Tangent|link=Constraint Tangent]] [[Constraint Tangent|Constraint Tangent]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Tangent.png|16px|Constraint Tangent|link=Constraint Tangent]] [[Constraint Tangent|Constraint Tangent]]}}&lt;/nowiki&gt;

&lt;!--T:30--&gt;
{{KEY|[[File:Constraint EqualLength.png|16px|Constraint EqualLength|link=Constraint EqualLength]] [[Constraint EqualLength|Constraint EqualLength]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint EqualLength.png|16px|Constraint EqualLength|link=Constraint EqualLength]] [[Constraint EqualLength|Constraint EqualLength]]}}&lt;/nowiki&gt;

&lt;!--T:31--&gt;
{{KEY|[[File:Constraint Symmetric.png|16px|Constraint Symmetric|link=Constraint Symmetric]] [[Constraint Symmetric|Constraint Symmetric]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Symmetric.png|16px|Constraint Symmetric|link=Constraint Symmetric]] [[Constraint Symmetric|Constraint Symmetric]]}}&lt;/nowiki&gt;

&lt;!--T:32--&gt;
{{KEY|[[File:Constraint Concentric.svg|16px|Constraint Concentric|link=Constraint Concentric]] [[Constraint Concentric|Constraint Concentric]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint Concentric.svg|16px|Constraint Concentric|link=Constraint Concentric]] [[Constraint Concentric|Constraint Concentric]]}}&lt;/nowiki&gt;

&lt;!--T:33--&gt;
{{KEY|[[File:Constraint ExternalAngle.svg|16px|Constraint ExternalAngle|link=Constraint ExternalAngle]] [[Constraint ExternalAngle|Constraint ExternalAngle]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint ExternalAngle.svg|16px|Constraint ExternalAngle|link=Constraint ExternalAngle]] [[Constraint ExternalAngle|Constraint ExternalAngle]]}}&lt;/nowiki&gt;

&lt;!--T:34--&gt;
{{KEY|[[File:Constraint PointOnEnd.svg|16px|Constraint PointOnEnd|link=Constraint PointOnEnd]] [[Constraint PointOnEnd|Constraint PointOnEnd]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointOnEnd.svg|16px|Constraint PointOnEnd|link=Constraint PointOnEnd]] [[Constraint PointOnEnd|Constraint PointOnEnd]]}}&lt;/nowiki&gt;

&lt;!--T:35--&gt;
{{KEY|[[File:Constraint PointOnMidPoint.svg|16px|Constraint PointOnMidPoint|link=Constraint PointOnMidPoint]] [[Constraint PointOnMidPoint|Constraint PointOnMidPoint]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointOnMidPoint.svg|16px|Constraint PointOnMidPoint|link=Constraint PointOnMidPoint]] [[Constraint PointOnMidPoint|Constraint PointOnMidPoint]]}}&lt;/nowiki&gt;

&lt;!--T:36--&gt;
{{KEY|[[File:Constraint PointOnStart.svg|16px|Constraint PointOnStart|link=Constraint PointOnStart]] [[Constraint PointOnStart|Constraint PointOnStart]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointOnStart.svg|16px|Constraint PointOnStart|link=Constraint PointOnStart]] [[Constraint PointOnStart|Constraint PointOnStart]]}}&lt;/nowiki&gt;

&lt;!--T:37--&gt;
{{KEY|[[File:Constraint PointToObject.svg|16px|Constraint PointToObject|link=Constraint PointToObject]] [[Constraint PointToObject|Constraint PointToObject]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint PointToObject.svg|16px|Constraint PointToObject|link=Constraint PointToObject]] [[Constraint PointToObject|Constraint PointToObject]]}}&lt;/nowiki&gt;

&lt;!--T:38--&gt;
{{KEY|[[File:Constraint TangentToEnd.svg|16px|Constraint TangentToEnd|link=Constraint TangentToEnd]] [[Constraint TangentToEnd|Constraint TangentToEnd]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint TangentToEnd.svg|16px|Constraint TangentToEnd|link=Constraint TangentToEnd]] [[Constraint TangentToEnd|Constraint TangentToEnd]]}}&lt;/nowiki&gt;

&lt;!--T:39--&gt;
{{KEY|[[File:Constraint TangentToStart.svg|16px|Constraint TangentToStart|link=Constraint TangentToStart]] [[Constraint TangentToStart|Constraint TangentToStart]]}}
 &lt;nowiki&gt;{{KEY|[[File:Constraint TangentToStart.svg|16px|Constraint TangentToStart|link=Constraint TangentToStart]] [[Constraint TangentToStart|Constraint TangentToStart]]}}&lt;/nowiki&gt;

&lt;!--T:40--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Sketcher LeaveSketch</title>
    <ns>0</ns>
    <id>1786</id>
    <revision>
      <id>57212</id>
      <parentid>57211</parentid>
      <timestamp>2013-12-22T18:00:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>kb1jzps2etoai2osfra3jdy1npi125g</sha1>
      <text xml:space="preserve" bytes="291">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher LeaveSketch|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Leave sketch|}}

====Description==== &lt;!--T:2--&gt;


====Usage==== &lt;!--T:3--&gt;



&lt;!--T:4--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Line</title>
    <ns>0</ns>
    <id>1613</id>
    <revision>
      <id>93560</id>
      <parentid>55474</parentid>
      <timestamp>2014-07-02T07:51:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>23ruui4rkgx9qaixcw2aokdqcuzruj7</sha1>
      <text xml:space="preserve" bytes="787">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Line|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|Part Design]]|MenuLocation=Sketch → Sketcher geometries → Create line|Shortcut=L|SeeAlso=[[Sketcher Polyline|Sketcher Polyline]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws a line by picking two points in the 3D view.
When starting the tool, the mouse pointer changes to a white cross with a red line icon. Besides are coordinates shown in real time.

&lt;!--T:3--&gt;
[[Image:Sketcher_LineExample1.png‎]]

====Usage==== &lt;!--T:4--&gt;
* Pick points on an empty area of the 3d view, or on an existing object (auto constraints must be active in TaskView).
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.



</text>
    </revision>
  </page>
  <page>
    <title>Sketcher MapSketch</title>
    <ns>0</ns>
    <id>10771</id>
    <revision>
      <id>109474</id>
      <parentid>109473</parentid>
      <timestamp>2014-09-16T01:56:12Z</timestamp>
      <contributor>
        <username>Normandc</username>
        <id>332</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>4rmulim45r0831fs6rczmekv9ha6imj</sha1>
      <text xml:space="preserve" bytes="1615">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher MapSketch|Create a sketch on a face|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Part Design/Sketch → Map sketch to face...|SeeAlso=[[Sketcher NewSketch|Create a new sketch]]}}

==Description== &lt;!--T:2--&gt;
This tool maps an existing sketch on the face of a shape. PartDesign features created from this sketch will be fused with the underlying solid for additive features (Pad, Revolution) or be subtracted from the underlying solid in case of subtractive features (Pocket, Groove).

&lt;!--T:4--&gt;
Please note that this tool is not to be used to create new sketches. It only maps, or remaps an existing sketch to the face of a solid or a PartDesign feature. Typical use cases are:
* The sketch was created on a standard plane (XY, XZ, YZ) and you want to map it to the face of a solid in order to build a feature upon it.
* The sketch was mapped on a specific face of a solid but you need to map it to a different face.
* Repairing a broken model.

[[File:Sketcher_MapSketch_00.png|480px|none]]


==How to use== &lt;!--T:3--&gt;
* Select the face of a PartDesign feature or a solid.
* Click on the {{KEY|[[Image:Sketcher_MapSketch.png|16px|Sketcher_MapSketch]] [[Sketcher_MapSketch|Map sketch to face]]}} icon in the toolbar (or go to the PartDesign or Sketch menu depending on which workbench is active)
* In the '''Select sketch''' dialog window that opens, select from the list the sketch to map to the face and click OK.
* The sketch is automatically opened in edit mode.


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher MergeSketch</title>
    <ns>0</ns>
    <id>53200</id>
    <revision>
      <id>132700</id>
      <timestamp>2014-12-21T10:31:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>N</comment>
      <sha1>857ssb368x3z45r54hm0zqeyj9pjndp</sha1>
      <text xml:space="preserve" bytes="198">{{GuiCommand|Name=Sketcher MergeSketch|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Merge sketches|SeeAlso=}}

Merge two or more sketches.</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Module</title>
    <ns>0</ns>
    <id>2774</id>
    <redirect title="Sketcher Workbench" />
    <revision>
      <id>12185</id>
      <timestamp>2012-08-29T22:15:20Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Sketcher Workbench]]</comment>
      <sha1>su5a1gxlat4xg57w5bjslk7tdgmhk6w</sha1>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Sketcher Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Sketcher NewSketch</title>
    <ns>0</ns>
    <id>1785</id>
    <revision>
      <id>125192</id>
      <parentid>125168</parentid>
      <timestamp>2014-11-26T18:24:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>+ SeeAlso</comment>
      <sha1>k1ejds96cdc114a7qf4w3ns9isddtw6</sha1>
      <text xml:space="preserve" bytes="916">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher NewSketch|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Create sketch|SeeAlso=[[Sketcher_MapSketch|Sketcher MapSketch]], [[Sketcher_Reorient|Sketcher Reorient]]}}

====Description==== &lt;!--T:2--&gt;
This will create a new sketch.

====Usage==== &lt;!--T:3--&gt;
Clicking on the icon without a face (pre-)selected will pop up a dialog asking if the sketch should be drawn on the
* XY-Plane
* XZ-Plane
* YZ-Plane
You can change an offset to any of the three planes and the side of the offset.

&lt;!--T:6--&gt;
Clicking on the icon with a (pre-selected) face will cause the sketch to be mapped to the selected face.

====Note==== &lt;!--T:4--&gt;
The sketch can be re-mapped to antoher already existing face.

&lt;!--T:7--&gt;
The sketch can be moved in the 3D-Space using [[Placement]].


&lt;!--T:5--&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Octagon</title>
    <ns>0</ns>
    <id>39826</id>
    <revision>
      <id>108564</id>
      <parentid>106608</parentid>
      <timestamp>2014-09-06T19:17:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>4w83waf4lnamt7cloneo19g1opi4ocu</sha1>
      <text xml:space="preserve" bytes="1067">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateOctagon|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create octagon|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 


&lt;!--T:5--&gt;
Draws an octagon inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreateOctagonExample.png‎]]


====Usage==== &lt;!--T:3--&gt;


&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreateOctagon.png|16px]] Create octagon}} button, click once to set the center, then move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.




&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Pentagon</title>
    <ns>0</ns>
    <id>39803</id>
    <revision>
      <id>108548</id>
      <parentid>108540</parentid>
      <timestamp>2014-09-06T19:14:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>qgjx2ph8wg041pgz755vwxsp5ah37sa</sha1>
      <text xml:space="preserve" bytes="1074">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreatePentagon|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create pentagon|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 


&lt;!--T:5--&gt;
Draws a pentagon inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreatePentagonExample.png‎]]



====Usage==== &lt;!--T:3--&gt;


&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreatePentagon.png|16px]] Create pentagon}} button, click once to set the center, then move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.





&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Point</title>
    <ns>0</ns>
    <id>2906</id>
    <revision>
      <id>100686</id>
      <parentid>92812</parentid>
      <timestamp>2014-07-31T09:25:05Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <minor/>
      <comment>calling off  &quot;Key&quot;</comment>
      <sha1>izn68thyb7v7v6fepvx2inm00cfdsza</sha1>
      <text xml:space="preserve" bytes="794">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Point|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create point}}

==Description== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
The tools Point create a point in the current sheet of &quot;'''Sketcher'''&quot;.
 
[[IMAGE:Sketcher_Point_fr_01.png|480px|Point in the sketcher]] 
{{clear}}

==Use== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* Click the Point, to activate the function.
* Must be pressed each time the command Point, to create a new Point.
* Press the key {{KEY|CTRL}} while drawing, force the [[Draft_Snap|snap]], your point to the nearest location of the snap, regardless of the distance.
* Press on {{KEY|ESC}} to cancel the operation, and exit the function.
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Polyline</title>
    <ns>0</ns>
    <id>1757</id>
    <revision>
      <id>95291</id>
      <parentid>55520</parentid>
      <timestamp>2014-07-11T20:01:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>7j5xh5bix5ngg9s24gb1ccrebmp0cz4</sha1>
      <text xml:space="preserve" bytes="1258">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreatePolyline|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create polyline|SeeAlso=[[Sketcher Line|Sketcher Line]]}}

====Description==== &lt;!--T:2--&gt;
This tool works like the [[Sketcher Line]] tool, but creates continuous line segments connected by their vertices.
When starting the tool, the mouse pointer changes to a white cross with a red polyline icon. The coordinates of the pointer are shown beside it in blue in real time.

&lt;!--T:3--&gt;
[[Image:Sketcher_PolylineExample1.png|Three points where chosen, drag an click to add further points]]

====Usage==== &lt;!--T:4--&gt;
The Sketcher polyline tool has multiple modes that can be toggled with the letter '''M'''. For example you can draw tangent or perpendicular arcs following a line or arc segment. Just repeatedly hit '''M''' to toggle through the different modes.

&lt;!--T:5--&gt;
'''Ps : But you can only start with a line'''.
* Pick points on an empty area of the 3D view, or on an existing object (auto constraints must be active in TaskView).
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels or finishes the function.
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Rectangle</title>
    <ns>0</ns>
    <id>1758</id>
    <revision>
      <id>94959</id>
      <parentid>58574</parentid>
      <timestamp>2014-07-08T21:10:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>35x4zoyzm4728xx5urk4h3vgctxy7ch</sha1>
      <text xml:space="preserve" bytes="902">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateRectangle|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|Shortcut=R|MenuLocation=Sketch → Sketcher geometries → Create rectangle|SeeAlso=[[Sketcher Polyline|Sketcher Polyline]]}}

====Description==== &lt;!--T:2--&gt;
This tool draws a rectangle by picking two opposite points.
When starting the tool, the mouse pointer changes to a white cross with a red rectangle icon. 
The coordinates of the pointer are shown beside it in blue in real time.

&lt;!--T:4--&gt;
[[Image:SketcherCreateRectangleExample.png‎]]

====Usage==== &lt;!--T:3--&gt;
* After pressing the 'Create Rectangle' button, click once to set the first corner, then move the mouse and click a second time to set the opposite corner.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:5--&gt;
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Reorient</title>
    <ns>0</ns>
    <id>18486</id>
    <revision>
      <id>74253</id>
      <parentid>74252</parentid>
      <timestamp>2014-03-05T22:03:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>csuyvy5q33jhq0sfb4sy4yndsit7yki</sha1>
      <text xml:space="preserve" bytes="644">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Reorient|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Part design → Reorient sketch|SeeAlso=[[Sketcher_MapSketch|Map sketch]], [[Sketcher_NewSketch|New Sketch]]}}

===Description=== &lt;!--T:2--&gt;
=== Use ===
# 
# 


&lt;!--T:3--&gt;
[[IMAGE:Sketcher_New_it.png|left|Finestra di selezione del piano]] 
&lt;br /&gt;


&lt;!--T:4--&gt;
* Piano XY [[IMAGE:View-top.svg|24px]]
* Piano XZ [[IMAGE:View-front.svg|24px]]
* Piano YZ [[IMAGE:View-right.svg|24px]]
&lt;br /&gt;
* 
* '''Offset'''
{{clear}}

# 
# 
# 
# 
=== Note === &lt;!--T:5--&gt;




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectConflictingConstraints</title>
    <ns>0</ns>
    <id>53478</id>
    <revision>
      <id>133408</id>
      <parentid>133407</parentid>
      <timestamp>2014-12-25T21:33:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>acbs1j5jgt5fyxzltqdqrb0eausacan</sha1>
      <text xml:space="preserve" bytes="397">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectConflictingConstraints|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher tools → Select Conflicting Constraints|Shortcut=Maiusc+Ctrl+E|SeeAlso=}}


====Description====  &lt;!--T:2--&gt;
FreeCAD v 0.15


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectConstraints</title>
    <ns>0</ns>
    <id>40547</id>
    <revision>
      <id>108649</id>
      <parentid>108648</parentid>
      <timestamp>2014-09-07T18:41:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5h18bbc0ypdza3pxjfacuqio2f8noph</sha1>
      <text xml:space="preserve" bytes="322">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectConstraints|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Select Constraints|Shortcut=Maiusc+Ctrl+C|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectElementsAssociatedWithConstraints</title>
    <ns>0</ns>
    <id>53490</id>
    <revision>
      <id>133423</id>
      <parentid>133422</parentid>
      <timestamp>2014-12-25T21:41:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bma0hctiy6hye1dap4k5x32nt8l0pws</sha1>
      <text xml:space="preserve" bytes="421">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectElementsAssociatedWithConstraints|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher tools → Select Elements Associated with constraints|Shortcut=Maiusc+Ctrl+E|SeeAlso=}}


====Description====  &lt;!--T:2--&gt;
FreeCAD v 0.15


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectHorizontalAxis</title>
    <ns>0</ns>
    <id>40566</id>
    <revision>
      <id>108670</id>
      <parentid>108669</parentid>
      <timestamp>2014-09-07T18:46:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>7ky39ucynlrz1m2l47ix7dflgyk5qev</sha1>
      <text xml:space="preserve" bytes="329">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectHorizontalAxis|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Select Horizontal Axis|Shortcut=Maiusc+Ctrl+H|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectOrigin</title>
    <ns>0</ns>
    <id>40553</id>
    <revision>
      <id>108656</id>
      <parentid>108655</parentid>
      <timestamp>2014-09-07T18:42:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qk6eo03zq3vwc4dhhwudo47fwdvsxuk</sha1>
      <text xml:space="preserve" bytes="312">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectOrigin|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Select Origin|Shortcut=Maiusc+Ctrl+O|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectRedundantConstraints</title>
    <ns>0</ns>
    <id>53473</id>
    <revision>
      <id>133402</id>
      <parentid>133401</parentid>
      <timestamp>2014-12-25T21:27:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sw6mi5n9ewcvllm0f7vj5921jqx3r83</sha1>
      <text xml:space="preserve" bytes="393">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectRedundantConstraints|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher tools → Select Redundant Constraints|Shortcut=Maiusc+Ctrl+R|SeeAlso=}}


====Description====  &lt;!--T:2--&gt;
FreeCAD v 0.15


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher SelectVerticalAxis</title>
    <ns>0</ns>
    <id>40560</id>
    <revision>
      <id>108663</id>
      <parentid>108662</parentid>
      <timestamp>2014-09-07T18:44:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6r5xpq7wo9sfanaqdpqipfq7m476jco</sha1>
      <text xml:space="preserve" bytes="325">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher SelectVerticalAxis|Workbenches=[[Sketcher Workbench|Sketcher]]|MenuLocation=Sketch → Sketcher tools → Select Vertical Axis|Shortcut=Maiusc+Ctrl+V|SeeAlso=}}


====Description==== &lt;!--T:2--&gt; 


&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Show Hide Internal Geometry</title>
    <ns>0</ns>
    <id>53312</id>
    <revision>
      <id>133380</id>
      <parentid>133379</parentid>
      <timestamp>2014-12-25T18:36:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>q5aukhiwmden5zrimrbfk7v9bs3w7wg</sha1>
      <text xml:space="preserve" bytes="1850">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher RestoreInternalAlignmentGeometry|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher tools → Show/hide internal geometry|Shortcut=Ctrl+Shift+E|SeeAlso=[[Sketcher Ellipse|Ellipse]], [[Constraint Internal Alignment|Internal Alignment Constraint]]}}

====Description==== &lt;!--T:2--&gt;
The command deletes unused elements aligned to internal geometry, or recreates the missing ones. 

====Usage==== &lt;!--T:3--&gt;
* Select an element of a sketch that supports internal alignment (currently only Ellipse/Arc).
* Invoke the command by clicking a toolbar button, picking the menu item or using the keyboard shortcut.
If there are free alignment places for the selected element, new construction geometry is created and aligned to the available places. If all alignment places are occupied, the unused internal geometry is deleted (the element is treated as unused if it is not constrained to anything else).

====Example==== &lt;!--T:4--&gt;
Create a new ellipse. New ellipses are always fully-packed. You'll see an ellipse and a bunch of construction geometry: major diameter, minor diameter, foci.

&lt;!--T:5--&gt;
Select minor diameter line and hit {{KEY|DEL}}. The diameter is gone, but the ellipse remains. How do we get the diameter back?

&lt;!--T:6--&gt;
Select the ellipse and invoke the Sketcher_RestoreInternalAlignmentGeometry command. The diameter is restored.

&lt;!--T:7--&gt;
Now, constrain the major diameter of the ellipse to some length. Select the ellipse and invoke the Sketcher_RestoreInternalAlignmentGeometry command. Minor diameter and foci are deleted, but the major diameter is kept, because it participates in other constraints. Ellipse's center remains too, because it is inherent, like center of a circle.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Slot</title>
    <ns>0</ns>
    <id>39833</id>
    <revision>
      <id>108529</id>
      <parentid>106630</parentid>
      <timestamp>2014-09-06T19:08:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>37inht3alel8ceodfasvdf6pa44izvt</sha1>
      <text xml:space="preserve" bytes="1001">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateSlot|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create slot|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt;

&lt;!--T:5--&gt;
Draws a slot by selecting the center of one semicircle and an endpoint of the other semicircle.
When starting the tool, the mouse pointer changes to a white cross with a red slot icon. 
The coordinates of the pointer are shown beside it in blue in real time. 


&lt;!--T:6--&gt;
[[Image:SketcherCreateSlotExample.png‎]]


====Usage==== &lt;!--T:3--&gt;

&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreateSlot.png|16px]] Create slot}} button, click once to set the center of one semicircle, then move the mouse and click a second time to set endpoint of the other semicircle.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.



&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Square</title>
    <ns>0</ns>
    <id>39795</id>
    <revision>
      <id>108551</id>
      <parentid>108536</parentid>
      <timestamp>2014-09-06T19:15:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>db9m3uye1iqe2jf46hy58lkeof5zsql</sha1>
      <text xml:space="preserve" bytes="1061">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateSquare|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create square|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 


&lt;!--T:5--&gt;
Draws a square inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreateSquareExample.png‎]]



====Usage==== &lt;!--T:3--&gt;


&lt;!--T:7--&gt;
* After pressing the {{KEY|[[File:Sketcher CreateSquare.png|16px]] Create square}} button, click once to set the center, then move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.




&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Triangle</title>
    <ns>0</ns>
    <id>39787</id>
    <revision>
      <id>108555</id>
      <parentid>108532</parentid>
      <timestamp>2014-09-06T19:16:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>hf6yerqw6evrztqtdwdi3z7vxn7axt1</sha1>
      <text xml:space="preserve" bytes="1102">


&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher CreateTriangle|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → Sketcher geometries → Create equilateral triangle|Shortcut=|SeeAlso=}}

====Description==== &lt;!--T:2--&gt; 

&lt;!--T:5--&gt;
Draws a equilateral triangle inscribed in a construction geometry circle.
When starting the tool, the mouse pointer changes to a white cross with a red hexagon icon. 
The coordinates of the pointer are shown beside it in blue in real time.


&lt;!--T:6--&gt;
[[Image:SketcherCreateTriangleExample.png‎]]


====Usage==== &lt;!--T:3--&gt;

&lt;!--T:7--&gt;
* Press the {{KEY|[[File:Sketcher CreateTriangle.png|16px]]}} '''Create equilateral triangle button''',
* Click once to set the center,
* Move the mouse and click a second time to set one of the vertices.
* Pressing {{KEY|ESC}} or clicking the right mouse button cancels the function.

&lt;!--T:8--&gt;
When editing the sketch the circumscribed circle is visible, when you close the sketch is hidden.




&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Trimming</title>
    <ns>0</ns>
    <id>2897</id>
    <revision>
      <id>92909</id>
      <parentid>63710</parentid>
      <timestamp>2014-06-19T19:18:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>0gw4x3v9enrebnraguqq9qd5uyfqqx2</sha1>
      <text xml:space="preserve" bytes="702">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Trimming|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|Shortcut=T|MenuLocation=Sketch → Sketcher geometries → Trim edge}}

====Description==== &lt;!--T:2--&gt;
This tool trims a line or circle to the nearest overlapping line.

&lt;!--T:4--&gt;
[[Image:SketcherTrimExample1.png‎]]

&lt;!--T:5--&gt;
[[Image:SketcherTrimExample2.png‎]]

&lt;!--T:6--&gt;
[[Image:SketcherTrimExample3.png‎]]


====Use==== &lt;!--T:3--&gt;
To use the tool click the 'Trim Edge' button, then click on the line segment that you want to trim.
The line segment will be trimmed to the nearest overlapping line(s).


&lt;!--T:7--&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Tutorial</title>
    <ns>0</ns>
    <id>28758</id>
    <revision>
      <id>90385</id>
      <parentid>89942</parentid>
      <timestamp>2014-06-05T20:01:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>ivr1xaslrb1nq157m2esi6qj1cnddg9</sha1>
      <text xml:space="preserve" bytes="25185">

== Introduction == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
The Sketcher is a tool to generate 2D-objects for usage in parts design. The sketcher is different to traditional drawing tools. A way to show the difference is the construction of a triangle. A triangle is fully defined by 3 values, which can be any from the following list: side length, angle, height, area. The one exception is three angles, which will not define the size.

&lt;!--T:3--&gt;
In order to construct a triangle from 3 lengths in the traditional way, the following has to be done: 
* draw the base line
* make two circles with a radius given by the other two side lengths, or alternatively calculate the coordinates of the third vertex 
* draw the missing two sides from the endpoints of the base line to the crossing point of the two circles or the calculated vertex.

&lt;!--T:4--&gt;
[[File:Traditional_triangle.png]]

&lt;!--T:5--&gt;
The [[wikipedia:Triangle]] page shows a collection of formulas to calculate the missing information in order to draw a triangle from the minimum specification. Those are needed, if the triangle has to be defined by pre-calculated coordinates.

&lt;!--T:6--&gt;
The Sketcher is different. The formulas and the above helper constructions are not needed. In order to understand the difference, it is best to construct a triangle by yourself.

== First sketch: a triangle == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
An open document is needed in order to make a sketch. When there is no open document, a new one will be created by clicking on [[Image:Document-new.svg|32px]] The sketcher workbench has to be selected: 

&lt;!--T:9--&gt;
[[Image:Workbench_select_sketcher.png]]

&lt;!--T:10--&gt;
A new sketch will be created by clicking at [[Image:Sketcher_NewSketch.png‎‎|32px]]. A dialog appears, where the orientation of the new sketch in the 3D-space can be selected. It doesn't matter in this case, so the xy-plane can be confirmed. A new empty sketch will be created and opened in edit mode. A grid with a coordinate system will be shown with a red point at the origin.

&lt;!--T:11--&gt;
In the Sketcher it is ok to draw an arbitrary triangle with the [[Image:Sketcher_CreatePolyline.png|32px]]polyline tool and define its properties in a later step. Each click in the drawing plane sets a vertex. The triangle needs to be closed. So for the last line a click is needed on the first created vertex. A red point should be visible near the mouse pointer before clicking.

&lt;!--T:12--&gt;
[[Image:Closed_triangle_with_pointer_small.png]]

&lt;!--T:13--&gt;
This will make sure that the last vertex is identical to the first one and the profile is closed. Those symbols that appear beneath the drawing pointer do indicate auto-constraints. They are set automatically at clicking at this location. The red dot beneath the drawing pointer indicates a coincidence constraint between two vertices, i.e. the vertices of this different drawing elements are constrained to an identical location.

&lt;!--T:14--&gt;
The created triangle is flexible. A vertex can be touched with the mouse and dragged around. The sides of the triangle follow the vertex. The same can be done with a line.

&lt;!--T:15--&gt;
Each length of the side is now easily defined by selecting it with the mouse: selected item turns into green.  When clicking on the[[Image:Constraint_Length.png|16px]] length tool, a dialog opens and the desired length can be put in. The picture below shows a triangle with side lengths set to 35 mm, 27 mm and 25 mm. The baseline was set horizontally by selecting it and clicking on the horizontal constraint tool[[Image:Constraint_Horizontal.svg|16px]].
 
[[Image:Sketcher_triangle3_small.png]]

&lt;!--T:16--&gt;
These length-definitions are called constraints. Constraints are used to define a fixed design from the flexible geometric input. The sketcher provides all constraints needed to define any kind of triangle. Only the area can not be used to define one. So the created triangle can be redefined by changing the value of a constraint or by deleting constraints and add other ones. Here comes a list of triangles with other given properties. It is no problem to turn the just created triangle into one of these.

&lt;!--T:17--&gt;
* One or two angles given:  Two sides of the triangle needs to be selected. A click on [[Image:Constraint_InternalAngle.png|32px]] opens a dialog to define the angle.

&lt;!--T:18--&gt;
[[Image:Triangel_angle_small.png]]

&lt;!--T:19--&gt;
* Right triangle:  Two sides of the triangle needs to be selected. A click on[[Image:Constraint_Perpendicular.png|32px]] sets a right angle between the two sides.

&lt;!--T:20--&gt;
[[Image:Right_triangle_sketcher.png]]

&lt;!--T:21--&gt;
* Equilateral: One side has to be set to a defined length. Then all sides needs to be selected. A click on[[Image:Constraint_EqualLength.png|32px]] defines two equal length constrains in order to give all sides the same length.

&lt;!--T:22--&gt;
[[Image:Triangle_equilateral_small.png]]

&lt;!--T:23--&gt;
* Isosceles triangle (two identical length) with given height: Select first the two sides with the equal length. A click on [[Image:Constraint_Symmetric.png|32px]] sets a equality between the two sides. Then select the base line and the top vertex and click the [[Image:Constraint_Length.png|32px]] length tool.

&lt;!--T:24--&gt;
[[Image:Triangle_isosceles_small.png]]

&lt;!--T:25--&gt;
Constraints can be selected by clicking on the symbol or by clicking in the constraint-list. They can be deleted or in case of constraints with a value edited after a double click. A given triangle can be later changed into another type of triangle by editing or changing the constraints. The sketcher is a part of the parametric FreeCAD-modelling approach. What you have created, can be easily changed at a later time, if for example a variant of the design is needed.

&lt;!--T:26--&gt;
The above shown triangles have white lines. This is an indication that the sketch has some degrees of freedom left. It can be tested by dragging on some lines or points. If the line or point moves, this item is not fully defined. A sketch with no degrees of freedom left turns green.

&lt;!--T:27--&gt;
The isoscele triangle is missing the length setting for the base line and it can move and rotate freely in the sketcher drawing plane.

&lt;!--T:28--&gt;
If the triangle properties are defined, it still needed to be fixed in the drawing plane. The sketcher drawing plane has a coordinate system. The origin of the coordinate system is visible as the red dot in the center of the pink x-axis and light-green y-axis. The easiest way to fix it, is selecting a vertex and clicking at [[Image:Constraint_Lock.svg|16px]]. This adds a horizontal and a vertical distance from the vertex to the origin of the coordinate system. The triangle may still have an degree of freedom for rotation. So one sides needs a horizontal or vertical constraint or an defined angle to one of the coordinate system axes. The next picture shows a fully constraint sketch. All lines and vertices have now a green color.

&lt;!--T:29--&gt;
[[Image:Sketcher_triangle3_fc_small.png]]

== More about Constraints == &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
The sketcher does not know the triangle formulas from the wikipedia. Instead it sets up a system of equation for the 2-dimensional coordinates based on the given constraints. This system of equations is then solved numerically.

&lt;!--T:32--&gt;
In this way a wide variety of geometric problem can be solved. But there is also a disadvantage. If the set of equations has multiple solutions, we may get something totally different from what we expect. This is especially annoying, if the same design should be used for different dimensions. The typical symptom is, that after a change of a length constraint, the sketch flips to something totally different. A simple example is the division of a distance into three equal partitions. The following picture shows three lines in a row with equality and parallel constraint set. The total distance is set to 10 mm.

&lt;!--T:33--&gt;
[[Image:Dimension_partitions_parallel.png]]

&lt;!--T:34--&gt;
This works well, as long as only larger distances are put in. When the distance is reduced above a certain ratio, the lines are folding together. So we do not get any more a third of the given distance but the distance itself or two third of it. Some lines of our row have changed their orientation. This gives still a valid solution for the set of constraints, but is not what was intended. So following image of the same sketch shows this. The length constraint was set to 1000 mm and then reduced to 5 mm.

&lt;!--T:35--&gt;
[[Image:Dimension_partitions_flipped.png]]

&lt;!--T:36--&gt;
The solution is to define an angle of 180° between the partition lines as replacement of the parallel constraint. The 180°-constraint has only one solution. The sketch is now robust against large changes of the distance. It has to be said, that also a 0°-constraint serves for the same purpose, where appropriate.

&lt;!--T:37--&gt;
[[Image:Constraint180 600x400.png]]

&lt;!--T:38--&gt;
The 180°-constraint is a solution for a lot of problems. Some older versions of FreeCAD have problems to show the 180°-constraint in the sketcher plane. In most of the cases the 180°-arc is '''not''' shown as expected in the sketcher drawing plane. This is a known issue for FreeCAD before version 14.3613.

&lt;!--T:39--&gt;
In case of several incremental dimensions in a straight line, it may be advisable to draw a zig-zag-line first and then set the 180°-constraints. This helps, not forgetting one, or setting one twice.




&lt;!--T:40--&gt;
The following table shows some constraints combinations for the definition of a simple elbow. The combination was tested by enlarging the 10 mm length horizontal dimension to greater values until the elbow flips its orientation. The table documents for each shown constraint combination the changed length where the flipping occurs. 

&lt;!--T:41--&gt;
{| {{prettytable}} width=&quot;100%&quot; border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;
|-
!Constraints Combination
!Remarks
|-
|
[[Image:Elbow equality horizontal vertical.png]]
|
Definition of length: Equality constraint for definition of length&lt;br /&gt;&lt;br /&gt;
Definition of orientation: horizontal and vertical constraints&lt;br /&gt;&lt;br /&gt;
Flips at 51 mm
|-
|
[[Image:Elbow fix point onto object 52mm.png]]
|
Definition of length: Equality constraint for definition of vertical length, arc for definition of horizontal length.&lt;br /&gt;&lt;br /&gt;
Definition of orientation: two points for definition of orientation of horizontal line and vertical constraints&lt;br /&gt;&lt;br /&gt;
Flips at 52 mm
|-
|
[[Image:Elbow equality perpendicular vertical.png]]
|
Definition of length: Equality constraint for definition of length&lt;br /&gt;&lt;br /&gt;
Definition of orientation: horizontal line perpendicular to Y-axis and vertical line with vertical constraint&lt;br /&gt;&lt;br /&gt;
Flips at 51 mm
|-
|
[[Image:Elbow dimension length 82 mm.png]]
|
Definition of length: Horizontal length defined with the '''general''' length constraint. Equality constraint for definition of vertical length.&lt;br /&gt;&lt;br /&gt;
Definition of orientation: horizontal and vertical constraints&lt;br /&gt;&lt;br /&gt;
Flips at 82 mm&lt;br /&gt;&lt;br /&gt;
Definition of length: Horizontal length defined with the '''horizontal''' length constraint. Equality constraint for definition of vertical length.&lt;br /&gt;&lt;br /&gt;
Definition of orientation: horizontal and vertical constraints&lt;br /&gt;&lt;br /&gt;
The horizontal line does not flip at a test of 10 km, but the vertical line was flipped!&lt;br /&gt;&lt;br /&gt;
|-
|
[[Image:Elbow equality_90°to_vertical.png]]
|
Definition of length: Equality constraint for definition of length&lt;br /&gt;&lt;br /&gt;
Definition of orientation: horizontal line 90°-angle to vertical line and vertical line with vertical constraint&lt;br /&gt;&lt;br /&gt;
Flips not, tested up to 10 km
|}

&lt;!--T:110--&gt;
The test showed the following: larger changes of dimension constraints may cause a flipping of some lines of the sketch due to multiple solutions of the underlying system of equations. The only constraints that do preserve the orientation of the elements they are applied to, are the angle constraint and the horizontal and vertical dimension constraints. 
The differences between the other constraints regarding maintaining orientation are minor.

&lt;!--T:55--&gt;
Recommendation: ''' Use angle constraints and horizontal and vertical dimension constraints at critical places in order to make a sketch robust against dimension changes. '''

== Problematic combination of constraints == &lt;!--T:56--&gt;

&lt;!--T:57--&gt;
Sometimes two or more constraints define the same property. An example can be made of two connected lines, where the connection point is the center point of a symmetry constraint for the endpoints of the lines. Those lines now have equal length and are parallel. All this is the consequence of the symmetry constraint.
 
What happens, if those two lines already have an equality constraint and a parallel constraint and the symmetry constraint is added too? Now the parallel property is defined by two constraints and the equal length is also defined by two constraints. In principle the underlying system of equations should have a solution. But there may be numerical problems. This can be tested by trying to move the lines. In most cases the lines are frozen, even if the sketcher still reports several degrees of freedom.

&lt;!--T:58--&gt;
The above case shows a problem that seems to be difficult to solve for the sketcher programmers. So the user has to take care, to avoid such situations. Sketches with redundant constraints do behave unexpected and problematic. Symptoms of those redundant constraints are the above frozen state or reported redundant constraints after modifying a different object in the sketch.

&lt;!--T:59--&gt;
In general the sketcher gives a warning, when redundant constraints are detected. But this detection mechanism seems not to work in all cases. When the problem is recognized, it can be avoided by just deleting the redundant constraints. Sometimes it is necessary to choose a different combination of constraints.  

&lt;!--T:60--&gt;
The following cases are sources for redundant constraints:

&lt;!--T:61--&gt;
* An equality constraint for two radii of the same arc
* An symmetry constraint for two radii of the same arc
* A symmetry constraint in combination with parallel, equality and or perpendicular constraints

&lt;!--T:62--&gt;
A different problematic case are parallels with an intersection point in infinity. It is possible to set a 180°-constraint for two parallel lines without an intersection point. This is '''not''' recommended. An angle to an other line or axis should be used instead.


&lt;!--T:63--&gt;
A different problem is the change of orientation of angles. This can happen if, angle changes above 180° are made. Doing this in smaller steps avoid the problem.

== Construction Lines - Step by Step Example == &lt;!--T:64--&gt;

&lt;!--T:65--&gt;
In the first part was shown, that helper constructions are not necessary for the triangle. But nevertheless the sketcher provides construction geometry, which is useful for more complex problems. Any line can be converted to a construction line with the [[Image:Sketcher_AlterConstruction.svg|24px]] button. The construction lines are shown in the sketch as blue lines. They can be used for constraints in the same way as other lines, but are not shown and not used when the sketch is closed.

&lt;!--T:66--&gt;
Giving the task to make a rectangle with the side length having the golden ratio. Wikipedia shows how to construct two lines with a length ratio of the golden ratio. 

&lt;!--T:67--&gt;
[[Image:Goldener Schnitt Konstr beliebt.svg]]

&lt;!--T:68--&gt;
The sketcher is a perfect tool to construct a rectangle with the golden ratio for the side length. The size of the rectangle can be later changed without making a new construction. The construction steps for the golden ratio according to Wikipedia are:

&lt;!--T:69--&gt;
# Having a line segment AB, construct a perpendicular BC at point B, with BC half the length of AB. Draw the hypotenuse AC.
# Draw an arc with center C and radius BC. This arc intersects the hypotenuse AC at point D.
# Draw an arc with center A and radius AD. This arc intersects the original line segment AB at point S. Point S divides the original segment AB into line segments AS and SB with lengths in the golden ratio.



&lt;!--T:70--&gt;
Here is a step by step explanation, how this can be done.

&lt;!--T:71--&gt;
* Make a new sketch as explained at the triangle example.
* Draw a rectangle in the sketch. Use the button [[Image:Sketcher_Rectangle.svg]] The following picture shows the rectangle. FreeCAD did add horizontal and vertical constraints to the rectangle. This rectangle can not be rotated.

&lt;!--T:72--&gt;
[[Image:Step1 rectangle 600x400.png]]

&lt;!--T:73--&gt;
The rectangle should stay in the center of the coordinate system. To achieve this, a symmetry constraint is added to a horizontal line. This is done by selecting first the two vertices of the horizontal line and then the vertical axis of the coordinate system. The symmetry constraint is added by clicking on the button [[Image:Constraint_Symmetric.svg|24px]]. The same is done for a vertical line, but instead now the horizontal axis is selected as symmetry axis. The picture below shows the result. The rectangle stays now at the center and can only be resized but not moved.

&lt;!--T:74--&gt;
[[Image:Step2 rectangle with symmetry 600x400.png]]

&lt;!--T:75--&gt;
This was the preparation for the rectangle. The top horizontal line should be the distance AS of the golden ration construction. An additional line is needed to represent the SB-distance. It is drawn a little bit skewed as shown below. This avoids the auto-constraining to horizontal. This line should instead be constrained later with a 180°-angle, in order to avoid the existence of multiple solutions to the constructed constrain-combination. If the line is drawn with an horizontal constrained, the sketcher will complain later at adding the 180°-angle constrained. The horizontal constrained has to be removed in such a case. The picture shows how to add an angle-constraint by selecting two lines and clicking at [[Image:Constraint_InternalAngle.svg|24px]]. After adding a line, it is often advisable to drag at the line with the mouse. This will easily show, if a line is not attached to the other drawn elements. If a line is not connected right to the other lines, problems may arise in later steps of the part construction.

&lt;!--T:76--&gt;
[[Image:Step3 making SB 600x400.png]]

&lt;!--T:77--&gt;
The last line is not part of the rectangle. It is therefore necessary to convert it into a construction line. Selecting the line and clicking at the [[Image:Sketcher_AlterConstruction.svg|24px]] button does the conversion. 

&lt;!--T:78--&gt;
[[Image:Step4 make SB construction line 600x400.png]]

&lt;!--T:79--&gt;
The line has now a blue color as visible below. The recipe from Wikipedia for the golden ratio requires a line half of the distance AB. In order to get a reference point for this, an additional vertex is set at the line with the [[Image:Sketcher_Point.svg|24px]] tool. This is shown below.

&lt;!--T:80--&gt;
[[Image:Step5 helper vertex.png]]

&lt;!--T:81--&gt;
The reference point should stay at the center of the distance AB. This will be achieved by selecting first the two endpoints of the distance AB and third selecting the center point. When all three points are selected in the right sequence, the symmetry constraint can be set at clicking at the [[Image:Constraint_Symmetric.svg|24px]] button, as shown below.

&lt;!--T:82--&gt;
[[Image:Step6 symmetry setting.png]]

&lt;!--T:83--&gt;
The Picture below shows already the second side BC of the construction triangle. This line was drawn as described above and converted to a construction line. This line must have a vertical constraint as visible in the picture. This can be easily achieved by drawing the line nearly vertical. If the line is nearly vertical a vertical constraint symbol is shown and set by the Sketcher when finishing the line at this state.

&lt;!--T:84--&gt;
The line BC must have half of the length of AB. There is only a reference point available for this purpose, so the equality constraint can not be used. The equality constraint would need a line with this length as reference, which is not available in the construction. Therefore the classical arc is used to define the length BC. The picture below shows the drawing of the arc. The arc-tool [[Image:|24px]] is used. First the center point is set at B. The point should be visible beneath the arc-tool at clicking at B. Often the arc-tool has not has to be not directly over the target point but a little beneath, in order to get the coincidence point visible. Second the radius of the arc is defined by setting the next point at the reference point. The last point of the arc is set in the neighborhood of the point C. It is important, that the first two points are fixed to C and the center point. This should be tested with dragging at the arc after finishing it.

&lt;!--T:85--&gt;
[[Image:Step7 arc defining BC.png]]

&lt;!--T:86--&gt;
In order to define the length of BC, the line must end at the arc. This will be done by setting a coincidence constraint between the last arc point and the C point as shown below. Both points have to be selected and the create a coincidence button [[Image:Constraint_PointOnPoint.svg|24px]] has to be clicked.

&lt;!--T:87--&gt;
[[Image:Step8 arc BC finishing.png]]

&lt;!--T:88--&gt;
The next picture shows the ready triangle. The hypotenuse AC is already drawn and converted to a construction line.

&lt;!--T:89--&gt;
[[Image:Step9 triangle ready.png]]

&lt;!--T:90--&gt;
Now step 2 of the Wikipedia recipe has to be constructed. A second arc has to be drawn with the center point at C and the starting point at B. The last point should be end at the hypotenuse as shown in the picture below. 

&lt;!--T:91--&gt;
[[Image:Step10 second arc.png]]

&lt;!--T:92--&gt;
The drawn arc was converted to a construction line. Now step 3 of the Wikipedia recipe starts with drawing the last arc as shown in the picture below. The radius of this arc has to be defined with the above constructed point on the hypotenuse. The last point will usually not end at a corner of the rectangle. But this is not a problem, as it will be fixed later. The last point may set as shown below.

&lt;!--T:93--&gt;
[[Image:Step11 last arc.png]]

&lt;!--T:94--&gt;
Now the final step has to be made, in order to made the horizontal line of the rectangle equal to the distance AS. This is shown below by setting a coincidence constraint between the end of the last arc and the corner of the rectangle. 

&lt;!--T:95--&gt;
[[Image:Step12 define ratio.png]]

&lt;!--T:96--&gt;
Now the vertical line has to be made the length of the distance SC. Setting an equality constraint by selecting the button [[Image:Constraint_EqualLength.svg|24px]] as shown below, will do this.

&lt;!--T:97--&gt;
[[Image:Step12 define rectangle.png]]

&lt;!--T:98--&gt;
The next picture shows the rectangle with a side length ratio equal to the golden ratio. The rectangle should have only left one degree of freedom. So at dragging at it, it should only change its size but not move. If a certain size of one side is needed, a length constraint can be added to this side. Other wise the sketch is ready and can be closed. Only a rectangle should than be visible in the FreeCAD window.

&lt;!--T:99--&gt;
[[Image:Step14 rectangle with golden ratio.png]]



== Exercise: resilient sketch == &lt;!--T:100--&gt;

&lt;!--T:101--&gt;
The above example introduced construction lines. Now some important things to make resilient sketches are discussed. Here is an exercise to get some practice at working with the sketcher. The goal is to make a sketch for something like a special frame as shown below.

&lt;!--T:102--&gt;
[[Image:Frame erxercise pad.png]]

&lt;!--T:103--&gt;
There should be only three dimensions needed to define the frame. In order to make changing dimensions easier, the constraints can be renamed to something memorable. Just select the constraint in the list view and press &lt;F2&gt;. The constraint can be named for example to &quot;Thickness&quot;. 
The drawing below shows the dimensions. The peak at the right side should have two times the wall thickness.

&lt;!--T:104--&gt;
[[Image:Frame exercise dimensions.png]]

&lt;!--T:105--&gt;
The sketch should look as intended also after changing the key dimensions for example to 2000 mm and back to 30. You may need to use angle constraints at certain places to reach this goal. The picture below shows a sketch, which was not robust against such changes. It is unusable now. In order to get the original state back, the undo-button [[Image:Edit-undo.svg|24px]] can be used.

&lt;!--T:106--&gt;
[[Image:Frame erxercise failed sketch.png]]

&lt;!--T:107--&gt;
The above sketch is unusable for the Part-Design Workbench. Only Profile without intersecting lines are allowed. Construction lines may intersect. Those are not used for making solids.


&lt;!--T:108--&gt;
One of the main usage of the Sketcher is the construction of parts in the Part-Design-workbench. The already existing geometry can be used similar to construction lines. As this tutorial takes its focus more on the basic sketcher functionality, have a look here for usage of external geometry: [[Sketcher External]]


&lt;!--T:109--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Validate</title>
    <ns>0</ns>
    <id>11477</id>
    <revision>
      <id>74241</id>
      <parentid>74240</parentid>
      <timestamp>2014-03-05T21:50:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>acq6qfz7uhu1gj39gzggzuko5fnaox7</sha1>
      <text xml:space="preserve" bytes="276">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher Validate|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketcher → Validate sketch}}



&lt;!--T:2--&gt;
[[IMAGE:Sketcher_Validate_it.png|left]]




{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Sketcher ViewSketch</title>
    <ns>0</ns>
    <id>3657</id>
    <revision>
      <id>55343</id>
      <parentid>55342</parentid>
      <timestamp>2013-12-14T21:06:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>99p4wxskygqe1ruoaxjf7d8908ntuqy</sha1>
      <text xml:space="preserve" bytes="731">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Sketcher ViewSketch|Workbenches=[[Sketcher Workbench|Sketcher]], [[PartDesign Workbench|PartDesign]]|MenuLocation=Sketch → View sketch}}

===Description=== &lt;!--T:2--&gt;
This tool sets the model view perpendicular to the sketch plane. It is useful when the user has changed the model view orientation to examine another aspect of the model and wants to return to a view normal to the sketch.

===Usage=== &lt;!--T:3--&gt;
While in sketch edit mode, either
* Click on the {{KEY|[[File:Sketcher_ViewSketch.png|16px|View sketch icon]]'''View Sketch'''}} icon in the Sketcher or Part Design toolbar, or
* go to the '''Sketcher → View sketch''' menu.


&lt;!--T:4--&gt;
{{clear}}


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Wire</title>
    <ns>0</ns>
    <id>2162</id>
    <revision>
      <id>108212</id>
      <parentid>9758</parentid>
      <timestamp>2014-09-01T21:06:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Sketcher Workbench</title>
    <ns>0</ns>
    <id>1578</id>
    <revision>
      <id>88195</id>
      <parentid>85803</parentid>
      <timestamp>2014-05-29T18:39:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <comment>link Draft Module</comment>
      <sha1>k96c40folnvaj895j22hwr0djagwj4k</sha1>
      <text xml:space="preserve" bytes="6409">
&lt;!--T:1--&gt;
[[File:FC_ConstrainedSketch.png|thumb|left|A basic, fully-constrained sketch‎]]

&lt;!--T:2--&gt;
The '''Sketcher Workbench''' is used to create 2D geometries intended for use in the '''[[PartDesign Workbench|Part Design Workbench]]''' and other workbenches.
Generally a 2D geometry is considered the starting-point for most CAD models - a simple 2D sketch can be 'extruded' into a 3D shape, further 2D sketches can be used to create pockets in the surface of this shape and sketches can be used to define 'pads' (extrusions) on the surface of 3D objects.
Along with [[Part Module|boolean operations]], the sketcher forms the core of generative solid shape design.

&lt;!--T:3--&gt;
The Sketcher workbench itself features constraints - allowing 2D shapes to be constrained to precise geometrical definitions. And a constraint solver which calculates the constrained-extent of 2D geometry and allows interactive exploration of sketch degrees-of-freedom.
{{clear}}

=== Basics of constraint sketching === &lt;!--T:4--&gt;
To explain how the Sketcher works, it may be useful to compare it to the &quot;traditional&quot; way of drafting.

==== Traditional Drafting ==== &lt;!--T:5--&gt;
The traditional way of CAD drafting inherits from the old [http://en.wikipedia.org/wiki/Drawing_board drawing board]. [http://en.wikipedia.org/wiki/Multiview_orthographic_projection Orthogonal (2D) views] are drawn manually and intended for producing technical drawings (also known as blueprints). Objects are drawn precisely to the intended size or dimension. If you want to draw an horizontal line 100mm in length starting at (0,0), you activate the line tool, either click on the screen or input the (0,0) coordinates for the first point, then make a second click or input the second point coordinates at (100,0). Or you will draw your line without regard to its position, and move it afterward. When you've finished drawing your geometries, you add dimensions to them.

==== Constraint Sketching ==== &lt;!--T:6--&gt;
The '''Sketcher''' moves away from this logic. Objects do not need to be drawn exactly as you intend to, because they will be defined later on by constraints. Objects can be drawn loosely, and as long as they are unconstrained, can be modified. They are in effect &quot;floating&quot; and can be moved, stretched, rotated, scaled, and so on. This gives great flexibility in the design process.

==== What are constraints? ==== &lt;!--T:7--&gt;
Constraints are used to limit the degrees of freedom of an object. For example, a line without constraints has 4 degrees of freedom: it can be moved horizontally or vertically, it can be stretched, and it can be rotated.

&lt;!--T:8--&gt;
Applying a horizontal or vertical constraint, or an angle constraint (relative to another line or to one of the axes), will limit its capacity to rotate, thus leaving it with 3 degrees of freedom. Locking one of its points in relation to the origin will remove another 2 degrees of freedom. And applying a dimension constraint will remove the last degree of freedom. The line is then considered '''fully-constrained'''.

&lt;!--T:9--&gt;
Multiple objects can be constrained between one another. Two lines can be joined through one of their points with the coincident point constraint. An angle can be set between them, or they can be set perpendicular. A line can be tangent to an arc or a circle, and so on.

&lt;!--T:10--&gt;
There are two kinds of constraints: geometric and dimensional. They are detailed in the [[#The tools|'The tools']] section below.

=== What the Sketcher is not good for === &lt;!--T:11--&gt;
The Sketcher is not intended for producing 2D blueprints. Once sketches are used to generate a solid feature, they are automatically hidden. Dimensions are only visible in Sketch edit mode.

&lt;!--T:12--&gt;
If you only need to produce 2D views for print, and don't want to create 3D models, check out the [[Draft Module|Draft workbench]] (keep in mind though that the Draft workbench can also be useful to create 2D geometry not available in the Sketcher at this time, like B-Splines.)

=== Sketching Workflow === &lt;!--T:13--&gt;
To be added

=== Good Practices === &lt;!--T:14--&gt;
Every CAD user develops his own way of working over time, but there are some useful general principles to follow.

&lt;!--T:15--&gt;
* A series of simple sketches is easier to manage than a single complex one. For example, a first sketch can be created for the base 3D feature (either a pad or a revolve), while a second one can contain holes or cutouts (pockets). Some details can be left out, to be realized later on as 3D features. You can choose to avoid fillets in your sketch if there are too many, and add them as a 3D feature.
* Always create a closed profile, or your sketch won't produce a solid, but rather a set of open faces. If you don't want some of the objects to be included in the solid creation, turn them to construction elements with the Construction Mode tool.
* Use the auto constraints feature to limit the number of constraints you'll have to add manually.
* As a general rule, apply geometric constraints first, then dimensional constraints, and lock your sketch last. But remember: rules are made to be broken. If you're having trouble manipulating your sketch, it may be useful to constrain a few objects first before completing your profile.
* If possible, center your sketch to the origin (0,0) with the lock constraint. If your sketch is not symmetric, locate one of its points to the origin, or choose nice round numbers for the lock distances. In v0.12, external constraints (constraining the sketch to existing 3D geometry like edges or to other sketches) are not implemented. This means that to locate following sketches geometry to your first sketch, you'll need to set distances relative to your first sketch manually. A lock constraint of (25,75) from the origin is more easily remembered than (23.47,73.02).
* If you have the possibility to choose between the Length constraint and the Horizontal or Vertical Distance constraints, prefer the latter. Horizontal and Vertical Distance constraints are computationally cheaper.

=== The tools === &lt;!--T:16--&gt;
The Sketcher Workbench tools are all located in the Sketcher menu that appears when you load the Sketcher Workbench. 

&lt;!--T:17--&gt;
{{Sketcher Tools}}

=== Tutorials === &lt;!--T:19--&gt;
See [[Sketcher_Tutorial|Sketcher Tutorial]]

&lt;!--T:18--&gt;
[[Category:User Documentation]]


</text>
    </revision>
  </page>
  <page>
    <title>Sketcher project</title>
    <ns>0</ns>
    <id>1380</id>
    <revision>
      <id>121579</id>
      <parentid>121578</parentid>
      <timestamp>2014-11-14T20:21:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ofyitjo6sr2lvvkj5ekta9nx4cyhzhg</sha1>
      <text xml:space="preserve" bytes="6520">
&lt;!--T:1--&gt;
This is the FreeCAD Sketcher development project. It follows the rules of the [http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology| Getting things done] process. The projects are collected in the [[Development roadmap]].


== Purpose and principles == &lt;!--T:2--&gt;
This is a software development project aimed to implement a Constraint Sketcher capabilities. Its about
implementing some Gui elements and the binding to the constraint solver. 

&lt;!--T:3--&gt;
The development steps are planed here and tracked in the Issue tracking system to get a well formed [http://www.freecadweb.org/tracker/ Change Log.]

== Outcome == &lt;!--T:4--&gt;


== Brainstorming == &lt;!--T:5--&gt;
In order to improve the solving performance of the sketcher, a graph-based partitioning of the constraints system can take place. The set of the constraints and the set of the unknown parameters can be represented in a [http://en.wikipedia.org/wiki/Bipartite_graph bipartite graph] with constraints corresponding to left nodes and unknowns to right nodes. '''DONE'''

&lt;!--T:6--&gt;
A simple but often very useful preprocessing step is to recognize any disjoint subgroups so that they can be treated separately in the solver. '''DONE'''

&lt;!--T:7--&gt;
Moreover one could reduce the number of the unknown parameters that are taken into account in the solution. At the beginning of a solution it should be checked which constraints are not already satisfied. By graph analysis one could find a minimum set of unknown parameters that should be taken into account in order to satisfy all unsatisfied constraints.

&lt;!--T:8--&gt;
Going one step further, rigid sub-parts of a sketch could be detected and reduced to 3 degrees of freedom (x,y,rotation).

== Organizing == &lt;!--T:9--&gt;

== Next actions == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
For 0.14:
# Mouse Dragging for multiple selection
# List of Geometries in the task panel (similar to the list of Constraints)
# Add a popup menu option to convert a coincident points constraint to tangency constraints 
# Polygon tool (convenience)
# Update wiki documentation on Symmetry constraint and Polyline tool (m-key)


&lt;!--T:12--&gt;
Idea Brainstorm:

&lt;!--T:13--&gt;
User Interface :
# Full Screen Grid (Units aware)
# Smarter Auto-constraints:
## Algorithm only considers geometry that is on the screen to increase performance and improve selection
## Prevent constraint conflicts
# Hint Lines: horizontal, vertical, perpendicular, tangent constraints?
# Overhaul of constraint icons by merging into one SoNode
## Merge into one SoNode to improve performance
## Remove need for ray pick to increase performance
## Share texture memory more efficiently. 
## Improve algorithm for preventing overlap
## Tool Bar for toggling constraint visuals independently 
# Datum Label Improvements:
## Radius label can be positioned at any angle
## Remove need for storing in SoImage which isn't needed any more
# Fix Grid Edge
# Auto constraints whilst dragging (Point on Point, Point on Line Coincident)?
# Highlight entities or zoom to over constrained area of sketch
# Related to part design (transparent support objects)
# Implement Sketch Plane Feature with introduction of Assembly module
# Improve Point Selection by implementing new custom node.
# Construction lines use dashes instead of solid lines.


&lt;!--T:14--&gt;
For 0.13:
# support for arc/arc and arc/circle in the tangent constraint - '''DONE''' [logari81]
# support for arcs in the perpendicular constraint - '''DONE''' [logari81]
# zoom-independent arrows (symmetry constraint) / dimension lines - '''DONE''' [mrlukeparry]
# external geometry / constraints -  '''DONE''' [logari81]
# box selection -  '''DONE''' [mrlukeparry]
# mouse dragging of multiple selection - '''SKIPPED for 0.14'''
# better constrainess diagnostics [http://www.freecadweb.org/tracker/view.php?id=691 (Issue #691)]- '''DONE''' [logari81]
# list of Geometries in the task panel (similar to the list of Constraints) - '''SKIPPED for 0.14'''
# support for points as construction geometry - '''DONE''' [logari81]
# add a popup menu option to convert a coincident points constraint to tangency constraints - '''SKIPPED for 0.14'''
# make symmetry constraint to work with symmetry points instead of symmetry lines (useful e.g. for midpoint definition) - '''DONE''' [logari81]


&lt;!--T:15--&gt;
For 0.12:
# constraint parameters (datums) editable in the 3D view '''DONE''' [jriegel]
# synchronization between listwidgetview selection - 3D view selection - '''DONE''' [wmayer]
# avoid overlapping of constraints symbols '''DONE''' - [mrlukeparry]
## make constraints symbols smaller, selectable and avoid overlapping when zooming out '''DONE''' - [mrlukeparry]
## create constraint icons for 3D Inventor view '''DONE''' - [mrlukeparry]
## make datum text size dependant on zoom '''DONE''' - [mrlukeparry]
## make datum text easier to select '''DONE''' - [mrlukeparry]
## Prevent text overlap on Datum Labels '''DONE''' - [mrlukeparry]
# testing the new solver in stand alone mode
# external constraints (having constraints with references outside the sketch, some edge of the 3D model e.g.) '''0.13''' [jriegel]
# auto-constraining '''DONE''' [jriegel]
## auto-constraint for perpendicular '''DONE''' - [mrlukeparry]
# visualize tangency constraints '''DONE''' - [mrlukeparry]
# visualize point to line distance constraints and point to point distance constraints '''DONE''' - [logari81]
# add indexes to the constraints symbols in 3D view in order to distinguish between constraints of the same kind '''DONE''' - [mrlukeparry]
# radius constraint (including visualization) '''DONE''' - [logari81]
# angle constraint (including visualization) '''DONE''' - [logari81]
# implement a fillet tool in the sketcher '''DONE''' [mrlukeparry]
## provide a method of setting fillet radius [http://www.freecadweb.org/tracker/view.php?id=437 (Issue #437)]
# implement a trim/extend tool in the sketcher '''DONE''' [logari81]
## implement an extend tool '''SKIPPED''' [logari81]
## trim support on arcs '''DONE''' [mrlukeparry]
# equal lengths constraint (including visualization) '''DONE''' - [logari81]
# constrainess diagnostics - degree of freedom counting '''DONE''' - [logari81] 
# symmetry constraint (including visualization) '''DONE''' -  [logari81]
# implement point on object constraint '''DONE''' - [mrlukeparry]
# Make Snap-Grid less 'greedy' '''DONE''' [mrlukeparry]
# Wiki page for the Sketcher Workbench '''DONE''' [normandc]

&lt;!--T:16--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Soluzione1</title>
    <ns>0</ns>
    <id>3806</id>
    <revision>
      <id>85458</id>
      <parentid>32271</parentid>
      <timestamp>2014-05-21T21:14:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>7txija99b9262e8xkadfbjorwjoend9</sha1>
      <text xml:space="preserve" bytes="1627">{{VeryImportantMessage|pagina in costruzione}}

=Costruzione di contorno non vincolato=

___TOC___

==Preparare l'ambiente==

* Avviare l'ambiente '''Sketcher'''
* Creare un '''Nuovo file''' (documento)
* Cliccare sull'icona '''Crea un nuovo sketch'''. Si apre il dialogo per l'orientamento
* Scegliere il piano '''XZ'''
* Impostare una griglia con maglie di '''10 mm'''
* Ruotare la rotella del mouse per ingrandire la griglia
* Premere '''Ctrl+Alt''' + '''destro del mouse''' e spostare la griglia
* Attivare '''Snap alla griglia'''
* Attivare '''Vincoli automatici'''

==Disegnare le linee di costruzione==

* Selezionare lo strumento '''Polilinea''' e tracciare un rombo
* Con lo strumento '''Linea''' tracciare la diagonale minore
** Fissare i punti quando quelli presenti assumono il colore '''bianco'''
[[Image:Rombo.png|Rombo base]]

* Selezionare tutte i segmenti del rombo
* Cliccare sullo strumento '''Linea di costruzione'''
* Notare che tutti gli oggetti assumono il colore '''blu'''
[[Image:RomboCostruzione.png|Rombo linea di Costruzione]]

==Disegnare il contorno==

* Avviare lo strumento '''Arco''' e con centro nei vertici del poligono tracciare gli archi del contorno
** Notare il prodursi dei vincoli automatici
[[Image:SagomaMaglia.png|Sagoma della Maglia]]

* Chiudere lo strumento Schizzo
** Notare che è visibile solo il contorno
[[Image:ContornoFinito.png|Contorno Finito]]


* Rinominare lo schizzo in '''Maglia'''
** Notare che attribuire dei '''nomi descrittivi''' agli oggetti è molto utile

Torna a [[Esercitazioni]]

[[Category:Documentation/it]]
[[Category:Tutorials/it]]

{{languages/it | }}</text>
    </revision>
  </page>
  <page>
    <title>Soluzione2</title>
    <ns>0</ns>
    <id>3807</id>
    <revision>
      <id>85459</id>
      <parentid>77889</parentid>
      <timestamp>2014-05-21T21:15:24Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>bn4hh5kjef2kdyu4cbblvmstzd3eosk</sha1>
      <text xml:space="preserve" bytes="3795">
{{VeryImportantMessage|pagina in costruzione}}

==Costruzione di contorno completamente vincolato==



==Preparare l'ambiente==

Come per il caso precedente:

* Avviare l'ambiente '''Sketcher'''
* Creare un nuovo file (documento) e rinominarlo '''Maglia'''
* Cliccare sull'icona '''Crea un nuovo sketch''', si apre il dialogo per l'orientamento
* Scegliere il piano '''XZ'''
* Impostare una griglia con maglie di 10 mm
* Ruotare la rotella del mouse per ingrandire la griglia
* Premere '''Ctrl+Alt''' + '''destro del mouse''' e spostare la griglia
* Attivare '''Snap alla griglia'''
* Attivare '''Vincoli automatici'''

==Disegnare le linee di costruzione==

* Selezionare lo strumento '''Polilinea''' e tracciare un rombo
* Con lo strumento '''Linea''' tracciare la diagonale minore
** Fissare i punti quando quelli presenti assumono il colore '''bianco''': significa che coincidono
[[Image:Rombo.png|Rombo base]]

* Selezionare tutte i segmenti del rombo
* Cliccare sullo strumento '''Linea di costruzione'''
* Notare che tutti gli oggetti assumono il colore '''blu'''
[[Image:RomboCostruzione.png|Rombo come linee di Costruzione]]

==Disegnare il contorno==

* Avviare lo strumento '''arco''' e, con centro nei vertici del poligono, tracciare gli archi del contorno utilizzando come limiti i lati del rombo
** Notare il prodursi dei '''vincoli automatici'''
[[Image:SagomaMaglia.png|Sagoma della Maglia]]

==Stabilire i vincoli==

Come si può vedere nell'immagine precedente, alcuni vincoli sono attribuiti automaticamente.
Ora si tratta di '''vincolare completamente''' lo schizzo:
* Selezionare un vertice del rombo poi cliccare sull'icona '''Blocca''' (il lucchetto).Nell'area di disegno appaiono le quote e nell'elenco dei vincoli vengono inserite due nuove voci con, tra parentesi, i valori delle quote.
* Proseguire in questo modo per tutti i vertici del rombo.
** Nel risultato notare la pessima disposizione delle quote e
** notare il messaggio (in giallo) del solutore che consiglia di rimuovere il vincolo 23 in quanto ripetizione di un altro vincolo:
[[Image:RomboVincolato1.png|Rombo Vincolato 1]]

Risolvere la rindondanza e sistemare le quote:
* Cliccare sulla quota indicata nel messaggio e premere '''Canc'''
* Sorvolare la quotatura da riposizionare, Quando assume il colore '''giallo''', cliccare e tenere premuto trascinando il mouse per spostarla. Se l'operazione non riesce, provare a disattivare '''Snap alla griglia'''
[[Image:RomboVincolato2.png|Rombo Vincolato 2]]

Correggere eventuali errori di posizionamento:
* Cliccare due volte sulla voce del vincolo o direttamente sulla nota da modificare per visualizzare la seguente finestra di inserimento dati:
[[Image:CorrezioneDati.png|Finestra di inserimento dati]]&lt;br&gt;

I punti finora vincolati sono i centri degli archi. Ora vincolare il loro raggio:
* Selezionare un arco poi selezionare lo strumento '''Fissa il raggio'''
* Ripetere le operazioni per tutti gli archi
** Notare i messaggi del solutore
[[Image:ConflittiVincoli.png|Conflitti tra vincoli]]&lt;br&gt;

* Eliminare i vincoli in conflitto
** Notare che lo schizzo completamente vincolato in modo corretto assume il colore '''verde''':
[[Image:MagliaVincolata1.png|Maglia correttamenta vincolata 1]]&lt;br&gt;  


* Chiudere lo strumento Schizzo
** Notare che rimane visibile solo il contorno senza le annotazioni dello schizzo e senza le linee di costruzione
[[Image:MagliaVincolataFinita.png|Contorno vincolato finito]]


* Rinominare lo schizzo in '''maglia'''
* Salvare il file con il nome '''maglia vincolata''' e osservare che questo diventa anche il nome del documento attivo
** Ricordare che attribuire dei nomi descrittivi agli oggetti è molto utile


Torna a [[Esercitazioni]]

[[Category:Documentation/it]]
[[Category:Tutorials/it]]

{{languages/it | }}</text>
    </revision>
  </page>
  <page>
    <title>Source code management</title>
    <ns>0</ns>
    <id>1990</id>
    <revision>
      <id>127047</id>
      <parentid>127046</parentid>
      <timestamp>2014-11-30T22:18:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>p9jbbxw8xa93smc1ak9t8u2ag8haf4z</sha1>
      <text xml:space="preserve" bytes="9656">
&lt;!--T:1--&gt;
Our main source code management tool is [http://en.wikipedia.org/wiki/Git_%28software%29 git]. This article explain how to use it and the general rules apply in case of FreeCAD. You are highly advised to learn how git works first (there is a lot of documentation and tutorials about git on the internet) before working with the FreeCAD source code.

&lt;!--T:2--&gt;
There are also many good graphical clients to git, such as [http://github.com/git-cola/git-cola git-cola], that make the whole process of managing git repositories easier.

== Access == &lt;!--T:3--&gt;
Everybody can access and get a copy of the FreeCAD source code, but only the FreeCAD project managers have write access to it. You can get a copy of the code, study it and modify it as you wish, but if you make a change that you wish to see included in the official source code, you need to ask for a pull request on the [http://forum.freecadweb.org/viewforum.php?f=17 pull requests] section of the FreeCAD forum.

&lt;!--T:4--&gt;
The procedure below show how to get a copy of the FreeCAD source code, from one of our two official repositories:

=== From Github === &lt;!--T:5--&gt;
An easy way to start with the FreeCAD source code is using [http://www.github.com github]. While the official FreeCAD Git repository is currently hosted on Sourceforge (see below), we also maintain an automatic mirror of the master branch on this github repository:

https://github.com/FreeCAD/FreeCAD_sf_master


&lt;!--T:6--&gt;
You can start simply by using the &quot;fork&quot; button on top of the above page. This will create a copy of the FreeCAD repository on your own github account. The general procedure is as follows:
# Create yourself a github account
# Go to https://github.com/FreeCAD/FreeCAD_sf_master
# Pres the &quot;fork&quot; button
# On your machine, clone your newly created freecad fork
# Do your changes to the code
# Create a new branch
# Checkout to that new branch
# Commit your changes to that new branch
# Push that new branch to your github repo

&lt;!--T:7--&gt;
You can also start normally, without using the &quot;fork&quot; button:
# clone the FreeCAD code with git
# Do your changes to the code
# create a new branch
# Checkout to that new branch
# Commit your changes to that new branch
# Create yourself an account on a public git server (github, gitorious, sourceforge or any other)
# Push your branch to that server

&lt;!--T:8--&gt;
'''important Note''': As our github repository is only a mirror, we don't watch it very carefully. Therefore, please don't use it for pull requests. If you have code you wish to see merged into the FreeCAD source code, please post a note in the [http://forum.freecadweb.org/viewforum.php?f=17 pull requests] section of the FreeCAD forum instead.

=== From Sourceforge === &lt;!--T:9--&gt;
To access a Git repository on sf.net, configure your Git client as follows :

  &lt;!--T:10--&gt;
git://git.code.sf.net/p/free-cad/code  (read-only)
  ssh://USERNAME@git.code.sf.net/p/free-cad/code (read/write) 

==== Access rules ==== &lt;!--T:11--&gt;
We will give everyone interested in participating write access to the git repository 
as long as you stay away from ''master'' branch (tip).

==== Authentication ==== &lt;!--T:12--&gt;
The read-only access does not prompt for a password.

&lt;!--T:13--&gt;
The read/write access uses your ssh password or ssh key to authorize your access. 
To perform write operations, your project administrator must have granted you write 
access to the repository.

&lt;!--T:14--&gt;
'''Note:''' In all examples below, &quot;USERNAME&quot; represents your SourceForge.net user account.

==== How to clone the repository ==== &lt;!--T:15--&gt;
You can simply clone your remote repository and get working:

 git clone ssh://USERNAME@git.code.sf.net/p/free-cad/code REPONAME
 cd REPONAME

&lt;!--T:16--&gt;
The first time you try connecting to the free-cad.git.sourceforge.net host, 
you should see a message similar to the following:

 The authenticity of host 'git.code.sf.net (216.34.181.91)' can't be established.
 RSA key fingerprint is 86:7b:1b:12:85:35:8a:b7:98:b6:d2:97:5e:96:58:1d.
 Are you sure you want to continue connecting (yes/no)? 

&lt;!--T:17--&gt;
Before typing 'yes' to accept the host fingerprint, ensure the fingerprint is correct for the host. 
You can find a listing of SSH host keys in the SSH Host Key Fingerprints list. If you receive a host 
key warning, please contact the SourceForge.net team.

==== Setting your git username ==== &lt;!--T:18--&gt;
Users should commit to their project repository using their SourceForge.net username. 
If that is not already set globally, you can set it locally for the current Git repository like this:

 git config user.name &quot;YOUR NAME&quot;
 git config user.email &quot;USERNAME@users.sourceforge.net&quot;

&lt;!--T:19--&gt;
You can now use some combination of &quot;git add&quot; and &quot;git commit&quot; commands to create one or more 
commits in your local repository.

=== From alternative repositories === &lt;!--T:20--&gt;
The beauty of git is that everybody can clone a project, and start modifying the code. Several frequent collaborators of the FreeCAD project have their own git repository, where they build up their work before it is ready to be included in the official source code, or simply where they experiment new ideas. In certain cases, you might want to clone your FreeCAD code from one of these, instead of the official repos, to benefit from the changes their users did.

&lt;!--T:21--&gt;
Be warned, though, that this is at your own risk, and only the two official repositories above are fully guaranteed to work and contain clean code.

&lt;!--T:22--&gt;
It is also possible to attach several remote repositories to a same local FreeCAD git code, using the &quot;git remote&quot; command. This is useful to keep in sync with the master code branch, but keep an eye on the work of different developers.

== Developing == &lt;!--T:23--&gt;
First of all '''never develop on the ''master'' branch!''' Create a local branch for development. 
You can learn how to do this [http://book.git-scm.com/3_basic_branching_and_merging.html here].

=== Branching === &lt;!--T:24--&gt;
An important feature of Git is that it is extremely easy to work with branches and merge 
them together. Best practices recommend to create a new branch whenever you want to work 
on a new feature. Creating a branch is done with:

 git branch myNewBranch
 git checkout myNewBranch

&lt;!--T:25--&gt;
or, both operation in one:

 git checkout -b myNewBranch

&lt;!--T:26--&gt;
you can always check in which branch you are with:

 git branch

=== Committing === &lt;!--T:27--&gt;
Once you did some work, you commit them with:

 git commit -a

&lt;!--T:28--&gt;
Unlike SVN, you need to specifically tell which files to commit (or all with the 
-a option). Your text editor will open to allow you to write a commit message.

=== Publishing your work on the sourceforge repository=== &lt;!--T:29--&gt;
After done some changes on your local branch and commit it (this means commit 
''locally'') you can push your repository to the server. This opens your branch 
to the public and allows the main developers to review and integrate your 
branch into ''master''. 

 git push my-branch

=== Publishing on another repository === &lt;!--T:30--&gt;
Git also allows you to merge branches from more than one repository. If you don't 
have write access to the sourceforge hosted FreeCAD Git repository, you can also setup 
an account on any other free Git host such as [https://github.com/ github] or 
[http://gitorious.org/ gitorious] and tell other people to get your changes from there.

=== Writing good commit messages === &lt;!--T:31--&gt;
You should try to work in small chunks.  If you cannot summarize your changes in one 
sentence, then it has probably been too long since you have made a commit.  It is also 
important that you have helpful and useful descriptions of your work. For commit messages, 
FreeCAD has adopted a format mentioned in book Pro Git (see [[#Further Reading]]).

 &lt;!--T:32--&gt;
Short (50 chars or less) summary of changes
 
 More detailed explanatory text, if necessary.  Wrap it to about 72
 characters or so.  In some contexts, the first line is treated as the
 subject of an email and the rest of the text as the body.  The blank
 line separating the summary from the body is critical (unless you omit
 the body entirely); tools like rebase can get confused if you run the
 two together.
 
 Further paragraphs come after blank lines. 
 
  - Bullet points are okay, too
 
  - Typically a hyphen or asterisk is used for the bullet, preceded by a
    single space, with blank lines in between, but conventions vary here

&lt;!--T:33--&gt;
If you are doing a lot of related work, it has been suggested 
[http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=2062&amp;p=14887#p14886 here] 
that one should make as many commits large or small as makes sense for what you are working 
on using the short one sentence commit messages. When you want to merge,  do a 
git log master..BRANCH and use the output as a basis for your quality commit message. 
Then when you merge to master use the --squash option and commit with your quality commit message. 
This will allow you to be very liberal with your commits and help to provide a good level of detail 
in commit messages without so many distinct descriptions.

== Further reading == &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
* [http://spheredev.org/wiki/Git_for_the_lazy Git for the lazy]
* [http://progit.org/book/ Git pro on-line book]

&lt;!--T:36--&gt;
[[Category:Hubs]]
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Source documentation</title>
    <ns>0</ns>
    <id>124</id>
    <revision>
      <id>110470</id>
      <parentid>110469</parentid>
      <timestamp>2014-09-22T18:22:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6ymdije30cadibk4ck85viu1htgdoct</sha1>
      <text xml:space="preserve" bytes="2286">
&lt;!--T:1--&gt;
FreeCAD source is commented to allow automatic html documentation generation with [http://www.doxygen.org Doxygen].

&lt;!--T:2--&gt;
For those wanting to follow closely the latest svn versions of FreeCAD, and who try to have a look at the c++ part, the first insight in the sources can give the feeling you're looking at an hedgehog: you can't discriminate head from tail and don't really know how to catch it!

&lt;!--T:3--&gt;
In complement to the Wiki, ''source documentation'' can hopefully alleviate this feeling, providing an entry point, and allowing for easy browsing through the dozens of files and directories.

==== Build source documentation ==== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
If you have Doxygen installed, it's very easy to build the doc. Go to your FreeCAD build directory, configure your sources with CMake, issue

&lt;syntaxhighlight&gt;
 make DevDoc
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
and consult the resulting html files starting from Doc/SourceDocu/html/index.html
(note: the DevDoc target is not valid for autotools builds)

&lt;!--T:7--&gt;
By nature, source doc is, and will ever be, work in progress. Don't hesitate to rebuild as often as needed. If you fall upon blatant inadequacies, feel free to post on the forum (note: It is really fully checked with cMake build process only).

&lt;!--T:8--&gt;
As an alternative, the doc is generated from time to time and accessible on sourceforge [http://free-cad.sf.net/SrcDocu/index.html here]

==== Integrate Coin3D documentation ==== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
On unix systems, it is possible to link Coin3D source documentation with FreeCAD's.
It allows easier navigation and complete inheritance diagrams for Coin derived classes.

&lt;!--T:11--&gt;
* On Debian and derived systems:
: - Install the package libcoin60-doc
: - Uncompress the file /usr/share/doc/libcoin60-doc/html/coin.tag.gz
: - Regenerate source documentation
: You are up for offline browsing.

&lt;!--T:12--&gt;
* If you don't want to or can't install Coin doc package, the links will be generated to access coin doc online at doc.coin3D.org, if doxygen tag file can be downloaded at configure time (wget).

&lt;!--T:13--&gt;
{{docnav|Extra python modules|List of Commands}}

&lt;!--T:14--&gt;
[[Category:Developer Documentation]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Spinning</title>
    <ns>0</ns>
    <id>125</id>
    <revision>
      <id>109447</id>
      <parentid>109446</parentid>
      <timestamp>2014-09-15T17:51:56Z</timestamp>
      <contributor>
        <username>Berndhahnebach</username>
        <id>3296</id>
      </contributor>
      <sha1>oh0xtmwrlbkqzi2wtympfcli1fyhice</sha1>
      <text xml:space="preserve" bytes="720">
&lt;!--T:7--&gt;
Spinning is the ability of FreeCAD to display a dynamic rotation of the modell without user interaction.


== Usage == &lt;!--T:2--&gt;
Spinning is by default enabled. To enable or disable spinning go to the ''Edit→Preferences'' menu, change to the ''Display'' settings and click on ''Enable animation''.

&lt;!--T:3--&gt;
To make a 3D-object spin, [[Mouse Model|rotate]] it with the mouse and release the mouse buttons before stopping the mouse motion. The object then continues with its rotation.

== View Turntable == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
Another way to put in rotation an object is use Tools -&gt; View turntable... command

&lt;!--T:4--&gt;
[[Category:User Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Splash screen</title>
    <ns>0</ns>
    <id>126</id>
    <revision>
      <id>84605</id>
      <parentid>84604</parentid>
      <timestamp>2014-05-19T17:59:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rcggqqghcdiu0i8rqkn3nx1a3lypu6a</sha1>
      <text xml:space="preserve" bytes="301">
&lt;!--T:1--&gt;
The '''splash screen''' is an image that appears during the startup of FreeCAD. You can disable the splash screen in the Preferences Menu of FreeCAD by removing the option &quot;Enable splash screen at startup&quot;.

&lt;!--T:2--&gt;
[[Category:User Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet CSV</title>
    <ns>0</ns>
    <id>26403</id>
    <revision>
      <id>84612</id>
      <parentid>84611</parentid>
      <timestamp>2014-05-19T18:02:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>0qkgv685oyt2asu830yjjg27lqgnsvm</sha1>
      <text xml:space="preserve" bytes="872">
&lt;!--T:1--&gt;
The [http://en.wikipedia.org/wiki/Comma-separated_values CSV format] (Comma-Separated Values) is a plain-text format to exchange spreadsheet data. It can usually be imported and exported by any spreadsheet application such as LibreOffice or Microsoft Excel. Reading and writing to csv format is done with python's built-in [http://docs.python.org/2/library/csv.html csv module].

== Importing == &lt;!--T:2--&gt;
Importing a .csv file into FreeCAD creates a [[Spreadsheet Create|spreadsheet]] object, then fills it with the values from the file.

== Exporting == &lt;!--T:3--&gt;
Exporting a [[Spreadsheet Create|spreadsheet]] object to a .csv file simply writes all the values of the spreadsheet object. Functions, such as &quot;=A3+B5&quot; are written as functions, not resulting values.

&lt;!--T:4--&gt;
[[Category:User_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet Controller</title>
    <ns>0</ns>
    <id>26410</id>
    <revision>
      <id>75244</id>
      <parentid>75243</parentid>
      <timestamp>2014-03-11T21:03:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>i4ne8bmy89v063izv1x9j55td82mdzu</sha1>
      <text xml:space="preserve" bytes="2566">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Spreadsheet Controller|Workbenches=[[Spreadsheet Module|Spreadsheet]]|MenuLocation=Spreadsheet -&gt; Controller}}

==Description== &lt;!--T:2--&gt;
This tool adds a new cell controller object to a selected [[Spreadsheet Create|spreadsheet]] object. The controller can then extract certain values from certain objects in the active document, and fill a cells range of the host spreadsheet with these values.

==How to use== &lt;!--T:3--&gt;
# Select an existing [[Spreadsheet Create|spreadsheet]] object
# Press the {{KEY|[[Image:Spreadsheet Controller.png|16px]] [[Spreadsheet Controller]]}} button
# Adjust the needed properties

==Options== &lt;!--T:4--&gt;
* As soon as the needed properties are set, and objects corresponding to the filter properties are found, the values of the host spreadsheet are filled. There is no way to undo this operation at the moment.
* The best way to set the properties of a cell controller object is to start from the bottom, setting the filter options first, and finishing with the starting cell. This way, you won't write to the spreadsheet before all the needed settings are set.

==Properties== &lt;!--T:5--&gt;
* {{PropertyData|Base Cell}}: The cell address to start automatic filling (ex: A5)
* {{PropertyData|Direction}}: Specifies if the values will fill cells horizontally or vertically from the starting cell
* {{PropertyData|Data}}: If &quot;Data Type&quot; is set to &quot;Get Property&quot;, you can indicate here a property of the filtered objects to be retrieved. You can specify nested properties by using a dot (ex: Shape.Volume)
* {{PropertyData|Data Type}}: Specifies if you want to retrieve a property of the filtered objects, or to count them
* {{PropertyData|Filter}}: A pattern to look for in the label or type of the objects in the document. For example, setting this value to &quot;Struct&quot; will get all objects containing Struct in their name, such as Structure001
* {{PropertyData|Filter Type}}: Specifies if the filter must be applied to the object label or type.

==Scripting== &lt;!--T:6--&gt;
Spreadsheets can be created from python scripts and [[macros]] using the makeSpreadsheetController() function:

&lt;syntaxhighlight&gt;
 import Spreadsheet
 mySpreadsheet = Spreadsheet.makeSpreadsheet()
 controller = Spreadsheet.makeSpreadsheetController(mySpreadsheet)
&lt;/syntaxhighlight&gt;

==Limitations== &lt;!--T:7--&gt;
* This tool is not available below FreeCAd version 0.14
* Currently it is not possible to undo the changes that a controller does to its host spreadsheet.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet Create</title>
    <ns>0</ns>
    <id>26408</id>
    <revision>
      <id>75255</id>
      <parentid>75254</parentid>
      <timestamp>2014-03-11T21:07:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>9j166ti47tyqe0wxfkbfsoxl2e5paoj</sha1>
      <text xml:space="preserve" bytes="2505">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Spreadsheet Create|Workbenches=[[Spreadsheet Module|Spreadsheet]]|MenuLocation=Spreadsheet -&gt; Create}}

==Description== &lt;!--T:2--&gt;
This tool adds a new spreadsheet object to the active document. The spreadsheet can then be edited with standard FreeCAD editing methods (right-clicking it in the tree view or using the [[Std Edit]] command.

==How to use== &lt;!--T:3--&gt;
# Press the {{KEY|[[Image:Spreadsheet Create.png|16px]] [[Spreadsheet Create]]}} button
# Press the {{KEY|[[Image:Std Edit.png|16px]] [[Std Edit]]}} button to edit the spreadsheet contents
# Edit the contents of the cells
# Close the spreadsheet editor tab when you are finished, the values are saved automatically as you type them

==Options== &lt;!--T:4--&gt;
* Cell contents can be edited by double-clicking them, or using the edit line on top of the editor
* The values are saved on-the-fly and stored in the FreeCAD document
* You can enter text, numbers, or formulas, by starting your entry with the = character. Only simple arithmetic (+, -, * and /) and parenthesis are supported at the moment. Example: =B4*2 will show the contents of the B4 cell multiplied by 2.
* You can insert values automatically retrieved from the model by using a [[Spreadsheet Controller|Cell controller]] object
* Spreadsheet objects can be imported and exported to the [[Spreadsheet CSV|csv]] format

==Scripting== &lt;!--T:5--&gt;
Spreadsheets can be created from python scripts and [[macros]] using the makeSpreadsheet() function:

&lt;syntaxhighlight&gt;
 import Spreadsheet
 mySpreadsheet = Spreadsheet.makeSpreadsheet()
&lt;/syntaxhighlight&gt;

&lt;!--T:6--&gt;
The contents of the spreadsheet can then be manipulated like this:

&lt;syntaxhighlight&gt;
 mySpreadsheet.Proxy.A1 = &quot;my text&quot;
 print mySpreadsheet.Proxy.A1
&lt;/syntaxhighlight&gt;

&lt;!--T:7--&gt;
Spreadsheet objects can also be created purely in the python space, with no existence in the FreeCAD document. These won't be saved when you close the FreeCAD file, so it is only meant for temporary purposes:

&lt;syntaxhighlight&gt;
 import Spreadsheet
 myPySpreadsheet = Spreadsheet.Spreadsheet()
 myPySpreadsheet.A1 = &quot;my other text&quot;
 print myPySpreadsheet.A1
&lt;/syntaxhighlight&gt;

==Limitations== &lt;!--T:8--&gt;
* This tool is not available below FreeCAd version 0.14
* The maximum size of a spreadsheet is currently limited to 26x256 cells (columns between A and Z and rows between 1 and 256)


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet Module</title>
    <ns>0</ns>
    <id>26407</id>
    <redirect title="Spreadsheet Workbench" />
    <revision>
      <id>74812</id>
      <timestamp>2014-03-10T15:37:17Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Spreadsheet Workbench]]</comment>
      <sha1>jfho14qijlubs2o2ih0pfykxpm2rvzm</sha1>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Spreadsheet Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet PropertyController</title>
    <ns>0</ns>
    <id>28116</id>
    <revision>
      <id>78880</id>
      <parentid>78814</parentid>
      <timestamp>2014-04-08T20:20:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>admcda077ebpxtudlkpuat8vytkpdl5</sha1>
      <text xml:space="preserve" bytes="1762">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Spreadsheet PropertyController|Workbenches=[[Spreadsheet Module|Spreadsheet]]|MenuLocation=Spreadsheet -&gt; Property Controller|SeeAlso=[[Spreadsheet Controller]]}}

==Description== &lt;!--T:2--&gt;
This tool adds a new property controller object to a selected [[Spreadsheet Create|spreadsheet]] object. The controller can then manage a certain property of a certain object, and update it with the value of a cell from the spreadsheet, whenever that cell changes.

==How to use== &lt;!--T:3--&gt;
# Select an existing [[Spreadsheet Create|spreadsheet]] object
# Press the {{KEY|[[Image:Spreadsheet PropertyController.png|16px]] [[Spreadsheet PropertyController|Property Controller]]}} button
# Adjust the needed properties

==Properties== &lt;!--T:4--&gt;
* {{PropertyData|Target Type}}: The type of item to control: a property of the target object, or a datum-based constraint if the target object is a sketch
* {{PropertyData|Target Object}}: The object to be controlled
* {{PropertyData|Target Property}}: The name of the property to control, or the number of the datum-based constraint
* {{PropertyData|Cell}}: The cell from the host spreadsheet to take the value from

==Scripting== &lt;!--T:5--&gt;
Spreadsheets can be created from python scripts and [[macros]] using the makeSpreadsheetPropertyController() function:

&lt;syntaxhighlight&gt;
 import Spreadsheet
 mySpreadsheet = Spreadsheet.makeSpreadsheet()
 controller = Spreadsheet.makeSpreadsheetPropertyController(mySpreadsheet)
&lt;/syntaxhighlight&gt;

==Limitations== &lt;!--T:6--&gt;
* This tool is not available below FreeCAD version 0.14
* Currently it is not possible to undo the changes that a controller does to its controlled object.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Spreadsheet Workbench</title>
    <ns>0</ns>
    <id>26401</id>
    <revision>
      <id>84619</id>
      <parentid>84618</parentid>
      <timestamp>2014-05-19T18:03:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>ctgynaakztnuu3mz95ul4ya7zao6r7g</sha1>
      <text xml:space="preserve" bytes="1110">
&lt;!--T:1--&gt;
The spreadsheet workbench allows you to create and edit spreadsheets, perform calculations, and retrieve data from a model, and export its contents to other spreadsheet applications such as LibreOffice or Microsoft Excel. The spreadsheet workbench features an internal editor, that allows you to edit the spreadsheet contents.

[[Image:Arch tutorial 53.jpg]]

== Tools == &lt;!--T:2--&gt;
* [[Image:Spreadsheet Create.png|16px]] [[Spreadsheet Create|Spreadsheet]]: Creates a new spreadsheet object in the active document.
* [[Image:Spreadsheet Controller.png|16px]] [[Spreadsheet Controller|Cell Controller]]: Adds a cell controller to a selected spreadsheet.
* [[Image:Spreadsheet PropertyController.png|16px]] [[Spreadsheet PropertyController|Property Controller]]: Adds a property controller to a selected spreadsheet.

== File formats == &lt;!--T:3--&gt;
* [[Spreadsheet CSV|Comma-separated values (.CSV)]]: Imports and exports spreadsheet data from/to a .csv file

&lt;!--T:4--&gt;
{{Docnav| | }}

&lt;!--T:5--&gt;
[[Category:User_Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Standard Menu</title>
    <ns>0</ns>
    <id>9811</id>
    <revision>
      <id>105005</id>
      <parentid>104933</parentid>
      <timestamp>2014-08-18T19:18:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <comment>Renatorivo moved page [[Std Menu]] to [[Standard Menu]] without leaving a redirect: more understandable</comment>
      <sha1>smyo9ug6z6dz00qpgk5c4bxcbfarb09</sha1>
      <text xml:space="preserve" bytes="2057">__NOTOC__

&lt;!--T:6--&gt;
&lt;!-- ==The Standard Menu== --&gt;

&lt;!--T:7--&gt;
{{StdMenu| File &amp;nbsp;&amp;nbsp;&amp;nbsp;  Edit &amp;nbsp;&amp;nbsp;&amp;nbsp;  View &amp;nbsp;&amp;nbsp;&amp;nbsp;  Tools &amp;nbsp;&amp;nbsp;&amp;nbsp;  Macro &amp;nbsp;&amp;nbsp;&amp;nbsp;  Workbench &amp;nbsp;&amp;nbsp;&amp;nbsp;  Measure &amp;nbsp;&amp;nbsp;&amp;nbsp; Windows &amp;nbsp;&amp;nbsp;&amp;nbsp;  Help }}

===Overview=== &lt;!--T:1--&gt;
The standard FreeCAD menu allows access to functions which are used in all workbenches.  Your menu may look slightly different depending on your desktop environment (KDE, Gnome, Windows, OS X, etc). 

===File=== &lt;!--T:2--&gt;
The [[Std_File_Menu|File]] option provides functions related to input and output, such as Open, Print, Export, etc.

===Edit=== &lt;!--T:9--&gt;
The [[Std_Edit_Menu|Edit]] option provides functions related to changing the model, such as Copy, Paste, etc.

===View=== &lt;!--T:3--&gt;
The [[Std_View Menu|View]] option provides functions related to the display of the model, such as which panels to show, Zoom, etc.

===Tools=== &lt;!--T:10--&gt;
The [[Std_Tools Menu|Tools]] option provides functions for debugging models and customizing FreeCAD's behaviour. 

===Macro=== &lt;!--T:11--&gt;
The [[Std_Macro_Menu|Macro]] option provides functions related to the recording and execution of groups of FreeCAD commands.

===Workbench=== &lt;!--T:15--&gt;
The [[Std Workbench Menu|Workbench]] option provides functions related to the [[Workbenches|workbench]] in use.  It contains functions specific to the current workbench.

===Measure=== &lt;!--T:14--&gt;
The [[Std_Measure_Menu|Measure]] option provides functions related to the Delta and/or 3D distances. This menu appears only in the Part Workbench.

===Windows=== &lt;!--T:12--&gt;
The [[Std_Windows Menu|Windows]] option allows for switching between and arranging open FreeCAD windows.

===Help=== &lt;!--T:13--&gt;
The [[Std_Help Menu|Help]] option provides access to the FreeCAD help system and provides information about your FreeCAD installation.


&lt;!--T:4--&gt;
{{docnav|Robot Workbench|Macros}}

&lt;!--T:5--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]



</text>
    </revision>
  </page>
  <page>
    <title>Start Workbench</title>
    <ns>0</ns>
    <id>38005</id>
    <revision>
      <id>101499</id>
      <parentid>101498</parentid>
      <timestamp>2014-08-01T19:40:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>skrixbg3ha28yyb7pet6827ugy7dtmv</sha1>
      <text xml:space="preserve" bytes="626">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
'''From [[Getting started]]:'''


&lt;!--T:3--&gt;
When you start FreeCAD for the first time, you are presented with the start center:


&lt;!--T:4--&gt;
[[Image:Startcenter.jpg|1024px|center]]



&lt;!--T:5--&gt;
The Start Center allows you to quickly jump to one of the most common workbenches, open one of the recent files, or see the latest news from the FreeCAD world. You can change the default workbench in the [[Preferences Editor|preferences]].

&lt;!--T:6--&gt;
ToDo


&lt;!--T:7--&gt;
[[Category:User Documentation]]
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Start up and Configuration</title>
    <ns>0</ns>
    <id>127</id>
    <revision>
      <id>116472</id>
      <parentid>116471</parentid>
      <timestamp>2014-10-31T21:15:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>elhk6tp57dm7mx3k9o3fgrju33ni00i</sha1>
      <text xml:space="preserve" bytes="12219">
&lt;!--T:1--&gt;
This page shows the different ways to start FreeCAD and the most important configuration features. 

== Starting FreeCAD from the Command line == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
FreeCAD can be started normally, by double-clicking on its desktop icon or selecting it from the start menu, but it can also be started directly from the command line. This allows you to change soem of the default startup options.

=== Command line options === &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
The command line options are subject of frequent changes, therefore it is a good idea to check the current options by typing:

 FreeCAD --help

&lt;!--T:6--&gt;
From the response you can read the possible parameters:

 Usage:
 FreeCAD [options] File1 File2 .....
 Allowed options:  
 
 Generic options:
  -v [ --version ]      print version string
  -h [ --help ]         print help message
  -c [ --console ]      start in console mode
 
 Configuration:
  -l [ --write-log ] arg    write a log file
  -t [ --run-test ] arg     test level
  -M [ --module-path ] arg  additional module paths
  -P [ --python-path ] arg  additional python paths
  --response-file arg       can be specified with '@name', too

=== Response and config files === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
FreeCAD can read some of these options from a config file. This file must be in the bin path and must be named FreeCAD.cfg. Be aware that options specified in the command line override the config file!

&lt;!--T:9--&gt;
Some operating system have very low limit of the command line length. The common way to work around those limitations is using response files. A response file is just a configuration file which uses the same syntax as the command line. If the command line specifies a name of response file to use, it's loaded and parsed in addition to the command line:

 FreeCAD @ResponseFile.txt 

&lt;!--T:10--&gt;
or:
 
 FreeCAD --response-file=ResponseFile.txt

=== Hidden options === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
There are a couple of options not visible to the user. These options are e.g. the X-Window parameters parsed by the Windows system:
* -display display, sets the X display (default is $DISPLAY).
* -geometry geometry, sets the client geometry of the first window that is shown.
* -fn or -font font, defines the application font. The font should be specified using an X logical font description.
* -bg or -background color, sets the default background color and an application palette (light and dark shades are calculated).
* -fg or -foreground color, sets the default foreground color.
* -btn or -button color, sets the default button color.
* -name name, sets the application name.
* -title title, sets the application title.
* -visual TrueColor, forces the application to use a TrueColor visual on an 8-bit display.
* -ncols count, limits the number of colors allocated in the color cube on an 8-bit display, if the application is using the QApplication::ManyColor color   specification. If count is 216 then a 6x6x6 color cube is used (i.e. 6 levels of red, 6 of green, and 6 of blue); for other values, a cube approximately proportional to a 2x3x1 cube is used.
* -cmap, causes the application to install a private color map on an 8-bit display.


== Running FreeCAD without User Interface == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
FreeCAD normally starts in GUI mode, but you can also force it to start in console mode by typing:

 FreeCAD -c

&lt;!--T:15--&gt;
from the command line. In console mode, no user interface will be displayed, and you will be presented with a python interpreter prompt. From that python prompt, you have the same functionality as the python interpreter that runs inside the FreeCAD GUI, and normal access to all modules and plugins of FreeCAD, excepted the FreeCADGui module. Be aware that modules that depend on FreeCADGui might also be unavailable.


== Running FreeCAD as a python module == &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
FreeCAD can also be used to run as a python module inside other applications that use python or from an external python shell. For that, the host python application must know where your FreeCAD libs reside. The best way to obtain that is to temporarily append FreeCAD's lib path to the sys.path variable. The following code typed from any python shell will import FreeCAD and let you run it the same way as in console mode:


&lt;syntaxhighlight&gt;
import sys
sys.path.append(&quot;path/to/FreeCAD/lib&quot;) # change this by your own FreeCAD lib path
import FreeCAD
&lt;/syntaxhighlight&gt;


&lt;!--T:18--&gt;
Once FreeCAD is loaded, it is up to you to make it interact with your host application in any way you can imagine!

== The Config set == &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
On every Startup FreeCAD examines its surrounding and the command line parameters. It builds up a '''configuration set''' which holds the essence of the runtime information. This information is later used to determine the place where to save user data or log files. It is also very important for post postmortem analyzes. Therefore it is saved in the log file.

=== User related information=== &lt;!--T:21--&gt;

&lt;!--T:22--&gt;
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse;&quot;
|+ User config entries
|-
! Config var name      !! Synopsis                         !! Example M$                 !! Example Posix (Linux)    
|-               
| UserAppData          || Path where FreeCAD stores User Related application data. ||  C:\Documents and Settings\username\Application Data\FreeCAD ||/home/username/.FreeCAD      
|-               
| UserParameter        || File where FreeCAD stores User Related application data. ||  C:\Documents and Settings\username\Application Data\FreeCAD\user.cfg ||/home/username/.FreeCAD/user.cfg      
|-               
| SystemParameter      || File where FreeCAD stores Application Related data. ||  C:\Documents and Settings\username\Application Data\FreeCAD\system.cfg ||/home/username/.FreeCAD/system.cfg      
|-               
| UserHomePath         || Home path of the current user  ||  C:\Documents and Settings\username\My Documents ||/home/username      
|}

=== Command line arguments === &lt;!--T:23--&gt;

&lt;!--T:24--&gt;
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse;&quot;
|+ User config entries
|-
! Config var name      !! Synopsis                         !! Example                
|-               
| LoggingFile          || 1 if the logging is switched on || 1      
|-               
| LoggingFileName      || File name where the log is placed ||  C:\Documents and Settings\username\Application Data\FreeCAD\FreeCAD.log      
|-               
| RunMode              || This indicates how the main loop will work. '''&quot;Script&quot;''' means that the given script is called and then exit. '''&quot;Cmd&quot;''' runs the command line interpreter. '''&quot;Internal&quot;''' runs an internal script. '''&quot;Gui&quot;''' enters the Gui event loop. '''&quot;Module&quot;''' loads a given python module. || &quot;Cmd&quot;
|-               
| FileName             || Meaning depends on the RunMode ||       
|-               
| ScriptFileName       || Meaning depends on the RunMode ||       
|-               
| Verbose              || Verbosity level of FreeCAD      || &quot;&quot; or &quot;strict&quot; 
|-               
| OpenFileCount        ||Holds the number of files opened through command line arguments   || &quot;12&quot; 
|-            
| AdditionalModulePaths||Holds the additional Module paths given in the cmd line   || &quot;extraModules/&quot; 
|}

=== System related === &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse;&quot;
|+ User config entries
|-
! Config var name      !! Synopsis                        !! Example M$                 !! Example Posix (Linux)    
|-               
| AppHomePath          || Path where FreeCAD is installed || c:/Progam Files/FreeCAD_0.7|| /user/local/FreeCAD_0.7
|-               
| PythonSearchPath     || Holds a list of paths which python search modules. This is at startup can change during execution  ||  ||      
|}

&lt;!--T:27--&gt;
Some libraries need to call system environment variables. Sometimes when there is a problem with a FreeCAD installation, it is because some environment variable is absent or set wrongly. Therefore, some important variables get duplicated in the Config and saved in the log file.

&lt;!--T:28--&gt;
'''Python related environment variables:'''

* PYTHONPATH
* PYTHONHOME
* TCL_LIBRARY
* TCLLIBPATH

&lt;!--T:29--&gt;
'''OpenCascade related environment variables:'''

* CSF_MDTVFontDirectory
* CSF_MDTVTexturesDirectory
* CSF_UnitsDefinition
* CSF_UnitsLexicon
* CSF_StandardDefaults
* CSF_PluginDefaults
* CSF_LANGUAGE
* CSF_SHMessage
* CSF_XCAFDefaults
* CSF_GraphicShr
* CSF_IGESDefaults
* CSF_STEPDefaults

&lt;!--T:30--&gt;
'''System related environment variables:'''

* PATH

=== Build related information=== &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
The table below shows the availible informations about the Build version. Most of it comes from the Subversion repository. This stuff is needed to exactly rebuild a version!

&lt;!--T:33--&gt;
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse;&quot;
|+ User config entries
|-
! Config var name      !! Synopsis                         !! Example                  
|-               
| BuildVersionMajor    || Major Version number of the Build. Defined in src/Build/Version.h.in   || 0
|-               
| BuildVersionMinor    || Minor Version number of the Build. Defined in src/Build/Version.h.in   || 7
|-               
| BuildRevision        || SVN Repository Revision number of the src in the Build. Generated by SVN    || 356         
|-               
| BuildRevisionRange   || Range of differnt changes     ||  123-356 
|-               
| BuildRepositoryURL   || Repository URL    || https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk/src
|-               
| BuildRevisionDate    || Date of the above Revision    || 2007/02/03 22:21:18    
|-               
| BuildScrClean        || Indicates if the source was changed ager checkout   ||Src modified            
|-               
| BuildScrMixed        ||       || Src not mixed
|}

 
=== Branding related === &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
These Config entries are related to the branding mechanism of FreeCAD. See [[Branding]] for more details.

&lt;!--T:36--&gt;
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse;&quot;
|+ User config entries
|-
! Config var name      !! Synopsis                         !! Example  
|-               
| ExeName              || Name of the build Executable file. Can diver from FreeCAD if a different main.cpp is used.     || FreeCAD.exe 
|-               
| ExeVersion           || Over all Version shows up at start time   || V0.7 
|-               
| AppIcon              || Icon which is used for the Executable, shows in Application MainWindow.     || &quot;FCIcon&quot;     
|-               
| ConsoleBanner        || Banner which is prompted in console mode     ||  
|-               
| SplashPicture        || Name of the Icon used for the Splash Screen    || &quot;FreeCADSplasher&quot;        
|-               
| SplashAlignment      || Alignment of the Text in the Splash dialog    || &quot;Bottom|Left&quot;     
|-               
| SplashTextColor      || Color of the splasher Text    || &quot;#000000&quot;         
|-               
| StartWorkbench       || Name of the Workbech which get started automaticly after Startup     || &quot;Part design&quot;  
|-               
| HiddenDockWindow     || List of dockwindows (separated by a semicolon) which will be disabled || &quot;Property editor&quot;    
|}

&lt;!--T:37--&gt;
{{docnav|Third Party Tools|FreeCAD Build Tool}}

&lt;!--T:38--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std About</title>
    <ns>0</ns>
    <id>128</id>
    <revision>
      <id>78412</id>
      <parentid>78411</parentid>
      <timestamp>2014-03-27T14:42:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rfyb8m53i7kjgio7shq0qbfbj7fhv1z</sha1>
      <text xml:space="preserve" bytes="528">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std About|Workbenches=All|MenuLocation=Help → About FreeCAD|SeeAlso=...}}

&lt;!--T:2--&gt;
Provides all information on the used version of FreeCAD.

&lt;!--T:3--&gt;
When a request for help on the [http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=2264 forum], '''it is imperative to give information about your installation'''.

&lt;!--T:4--&gt;
Click on '''&quot;Copy to Clipboard&quot;''' and paste the information into your post.



&lt;!--T:5--&gt;
[[Image:Std_About_en.png|‎]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std AboutQt</title>
    <ns>0</ns>
    <id>129</id>
    <revision>
      <id>16104</id>
      <parentid>15772</parentid>
      <timestamp>2013-01-11T20:21:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>languages it</comment>
      <sha1>n1iyehx90qh3b4fnajngrrg61djhrww</sha1>
      <text xml:space="preserve" bytes="321">{{GuiCommand|Name=Std_AboutQt|MenuLocation=Help → About Qt|Workbenches=All|SeeAlso=...}}
==Description==
All version and license information '''[http://qt.digia.com/Product/ QT]''' used.
&lt;br&gt;&lt;br&gt;
[[Image:Std_AboutQt_fr.png]]


{{clear}}
{{languages | {{fr|Std_AboutQt/fr}} {{it|Std_AboutQt/it}} {{jp|Std_AboutQt/jp}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std Alignment</title>
    <ns>0</ns>
    <id>4159</id>
    <revision>
      <id>111379</id>
      <parentid>111369</parentid>
      <timestamp>2014-09-26T20:17:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>k8kb8cu7o93t9x1eq9xphlnzvx7fj8v</sha1>
      <text xml:space="preserve" bytes="2096">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Alignment|MenuLocation=[[Std_Edit_Menu|Edit]] → Alignment...|Workbenches=All|SeeAlso=[[Std Placement|Placement]]}}


=== Description === &lt;!--T:3--&gt;

&lt;!--T:10--&gt;
This function allows you to position and orientate two selected shapes, by aligning two or more selected points, on each of those two different shapes, with each other. It works in all workbenches.

&lt;!--T:11--&gt;
The Alignment tool requires only one pair of reference points, however in most cases correct orientation and positioning will require 3 reference points.

==Example== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
This is the example project before objects have been aligned  

&lt;!--T:12--&gt;
[[Image:Std_Alignment1.png|500px]]

&lt;!--T:13--&gt;
To Align the objects start by Multi-selecting two objects only. The first object selected will be the fixed object. The second object selected will be moved by the Alignment tool. 

&lt;!--T:14--&gt;
After you have multi-selected two objects, start the Alignment tool from the ''Edit'' menu → ''Alignment ...''.

&lt;!--T:15--&gt;
A double window will appear, showing a view of each of the selected objects. The window on the left will show the movable object and the window on the right will show the fixed object. {{clear}}


&lt;!--T:6--&gt;
Select one or more pairs of points in the two views, that you want the Alignment tool to make coincide.
 
[[Image:Std_Alignment2.png|500px]]
{{clear}}


&lt;!--T:7--&gt;
Right mouse click in either windows to access the context menu. From the context menu you can 
#remove the last pair of points, 
#run and then close the Alignment tool, 
#cancel the Alignment operation and close the Alignment tool 
#or syncronise views. If ticked, this will synchronise pan/rotate/zoom of the views in the double windows, with each other.    
[[Image:Std_Alignment3.png]]
{{clear}}


&lt;!--T:8--&gt;
After running the Alignment tool several times, the project could be made to look like this:
 
[[Image:Std_Alignment4.png|500px]]
{{clear}}

&lt;!--T:9--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std BoxSelection</title>
    <ns>0</ns>
    <id>4246</id>
    <revision>
      <id>105195</id>
      <parentid>100381</parentid>
      <timestamp>2014-08-18T20:29:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2y65o5s20bm37t30qbra9t3f0c1ouv7</sha1>
      <text xml:space="preserve" bytes="334">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std BoxSelection|MenuLocation=[[Std Edit_Menu|Edit]] → Box Selection|Workbenches=All|Shortcut=Maiusc+B|SeeAlso=[[Std_ViewFitSelection|Fit Selection]]}}


&lt;!--T:3--&gt;
ToDo.



&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std CameraPosition</title>
    <ns>0</ns>
    <id>11079</id>
    <revision>
      <id>103073</id>
      <parentid>103072</parentid>
      <timestamp>2014-08-04T11:37:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qx58c4ktqlbmzukuv2hiukqm43c6mdf</sha1>
      <text xml:space="preserve" bytes="375">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std CameraPosition|MenuLocation=[[Std View Menu|View]] → Stereo → Issue camera position|Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
[[Image:CameraPosition1_it.png|CameraPosition1_it.png]]


&lt;!--T:4--&gt;
ToDo


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ClippingPlane</title>
    <ns>0</ns>
    <id>38608</id>
    <revision>
      <id>102541</id>
      <parentid>102540</parentid>
      <timestamp>2014-08-03T10:11:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>5tsftkbjagffmwqitgbt4a3ace95myr</sha1>
      <text xml:space="preserve" bytes="1389">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ClippingPlane|MenuLocation=[[Std View Menu|View]] → Clipping plane‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
A '''clipping plane''' is a plane that divides the object space in two half spaces. All object parts in one half space are visible, parts in the other half space are invisible. The objects look like sliced and interiour details become visible. The clipping plane is activated by the [[Std View Menu|View]] → '''Clipping plane''' menu.


&lt;!--T:4--&gt;
ToDo

&lt;!--T:5--&gt;
FreeCAD 0.13 version and latest

===Set a standard plane=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[[Image:ClippingPlane1_it.png|left|piani standard]]

====Option==== &lt;!--T:8--&gt;
* Offset: Offset
* Flip: reverses the view direction 
{{clear}}
===Set a definite plane===

&lt;!--T:9--&gt;
[[Image:ClippingPlane2_it.png|left|piano personalizzato]]
{{clear}}

&lt;!--T:10--&gt;
{{Note|Obsolete Version|
[[Image:PianoTaglio1.png|512px|Selezione dell'oggetto]]
[[Image:PianoTaglio2.png|512px|Commutare la posizione del piano]]
[[Image:PianoTaglio3.png|512px|Scalare il piano]]
[[Image:PianoTaglio4.png|512px|Spostare il piano]]
[[Image:PianoTaglio5.png|512px|Separare il piano dall'oggetto]]&lt;br /&gt;
[[Image:PianoTaglio6.png|Verificare la posizione dell'oggetto]]}}


&lt;!--T:11--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Close</title>
    <ns>0</ns>
    <id>4213</id>
    <revision>
      <id>105180</id>
      <parentid>105177</parentid>
      <timestamp>2014-08-18T20:20:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>l4va4rg08vha6aydf3h0f3i0zejpvg3</sha1>
      <text xml:space="preserve" bytes="245">

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Close|MenuLocation=[[Std File Menu|File]] → Close||Workbenches=All|Shortcut=Ctrl+W|SeeAlso=[[Std CloseAll|CloseAll]]}}


&lt;!--T:3--&gt;
Closes the current document



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std CloseAll</title>
    <ns>0</ns>
    <id>4215</id>
    <revision>
      <id>99793</id>
      <parentid>99792</parentid>
      <timestamp>2014-07-28T18:55:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>i1661ys27pjqfhv8qvt233jm7wfwn0t</sha1>
      <text xml:space="preserve" bytes="347">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std_CloseAll|MenuLocation=[[Std_File_Menu|File]] → Close All|Workbenches=All|Shortcut=...|SeeAlso=[[Std_Close|Close]], [[Std_SaveAs|Save As...]] e [[Std_Save|Save]]}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std CommandLine</title>
    <ns>0</ns>
    <id>130</id>
    <revision>
      <id>102787</id>
      <parentid>102773</parentid>
      <timestamp>2014-08-03T17:12:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>73rjbk5u9mo3zsoycvd4182zcf4daps</sha1>
      <text xml:space="preserve" bytes="648">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std CommandLine|MenuLocation=|Workbenches=|SeeAlso=[[Start_up_and_Configuration|Start up and Configuration]]}}

==Description== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
ToDo

=== Starting FreeCAD from the Command line === &lt;!--T:5--&gt;
FreeCAD can be started normally, by double-clicking on its desktop icon or selecting it from the start menu, but it can also be started directly from the command line.

===Start up and Configuration=== &lt;!--T:6--&gt;
See [[Start_up_and_Configuration|Start up and Configuration]]

&lt;!--T:7--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Copy</title>
    <ns>0</ns>
    <id>131</id>
    <revision>
      <id>89315</id>
      <parentid>89314</parentid>
      <timestamp>2014-06-01T08:12:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>t0k9ch50j4y4u9kkqfp8wqqey7wfwbz</sha1>
      <text xml:space="preserve" bytes="973">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std_Copy|Name=Std_Copy|MenuLocation=Edit → Copy|Shortcut=Ctrl+C|Workbenches=All|SeeAlso=[[Std_Paste|Paste]], [[Std_DuplicateSelection|Duplicate Selection]]}}

==Description== &lt;!--T:2--&gt;
The Copy command is involved in replicating [[Document_structure|Document]] objects.  It places the currently selected objects into the &quot;clipboard&quot; for later use by the [[Std_Paste|Paste]] command.  Objects may be copied between Documents.

==How to use== &lt;!--T:3--&gt;
# Select the Object(s) to be replicated.
# Press the {{KEY|[[File:Std Copy.png|16px|Copy]]}} icon, {{KEY|ctrl}} + {{KEY|C}} keys or use menu choices Edit → Copy.

==Limitations== &lt;!--T:4--&gt;
* In general, it is not possible to copy FreeCAD objects into other applications, or copy objects from other applications into a FreeCAD document.

==More== &lt;!--T:5--&gt;
* See the [[Copying_Objects|Copying objects]] page for more details on replicating objects.

</text>
    </revision>
  </page>
  <page>
    <title>Std CreateGroup</title>
    <ns>0</ns>
    <id>4277</id>
    <revision>
      <id>16701</id>
      <timestamp>2013-02-01T07:15:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>languages</comment>
      <sha1>1fv28q0lca1fmy4hbvkm33iu1aovba7</sha1>
      <text xml:space="preserve" bytes="168">{{GuiCommand|Name=Std_CreateGroup|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}











{{languages | {{it|Std_CreateGroup/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std Cut</title>
    <ns>0</ns>
    <id>132</id>
    <revision>
      <id>102992</id>
      <parentid>102991</parentid>
      <timestamp>2014-08-03T22:20:36Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>r61qxvj0l47l7jmgn45okoecib6hfq6</sha1>
      <text xml:space="preserve" bytes="334">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Cut|MenuLocation=[[Std_Edit_Menu|Edit]] → Cut|Shortcut=Ctrl+X|Workbenches=All|SeeAlso=[[Std Copy|Copy]], [[Std Paste|Paste]], [[Std Delete|Delete]]}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DebugInto</title>
    <ns>0</ns>
    <id>37596</id>
    <revision>
      <id>105232</id>
      <parentid>104430</parentid>
      <timestamp>2014-08-18T20:56:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>5vrrz9yeej14t0qg7x55x2y3zrcz42n</sha1>
      <text xml:space="preserve" bytes="286">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DebugInto|Workbenches=All|MenuLocation=[[Std Macro Menu|Macro]] → Step into |Shortcut=F11|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DebugMacro</title>
    <ns>0</ns>
    <id>37363</id>
    <revision>
      <id>105223</id>
      <parentid>99913</parentid>
      <timestamp>2014-08-18T20:53:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>sjammkfhapp5zr0f9tbcusgwdx1luxz</sha1>
      <text xml:space="preserve" bytes="288">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DebugMacro|Workbenches=All|MenuLocation=[[Std Macro Menu|Macro]] → Debug Macro |Shortcut=F6|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DebugOver</title>
    <ns>0</ns>
    <id>37390</id>
    <revision>
      <id>105229</id>
      <parentid>99950</parentid>
      <timestamp>2014-08-18T20:55:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>h9tjwye6gq65g6lz0dkpsjk7usl7emq</sha1>
      <text xml:space="preserve" bytes="288">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DebugOver|Workbenches=All|MenuLocation=[[Std Macro Menu|Macro]] → Debug Over |Shortcut=F10|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DebugStop</title>
    <ns>0</ns>
    <id>37435</id>
    <revision>
      <id>105226</id>
      <parentid>100009</parentid>
      <timestamp>2014-08-18T20:54:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>gf46c4wpf60dbzxslvtdijlom8govvq</sha1>
      <text xml:space="preserve" bytes="293">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DebugStop|Workbenches=All|MenuLocation=[[Std Macro Menu|Macro]] → Debug Stop |Shortcut=Maiusc+F6|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DebugToggle</title>
    <ns>0</ns>
    <id>37603</id>
    <revision>
      <id>105235</id>
      <parentid>104431</parentid>
      <timestamp>2014-08-18T20:57:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>23rvgjn4aupfytfrt6j669gwhlk4mg8</sha1>
      <text xml:space="preserve" bytes="295">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DebugToggle|Workbenches=All|MenuLocation=[[Std Macro Menu|Macro]] → Toggle breakpoint |Shortcut=F9|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Delete</title>
    <ns>0</ns>
    <id>133</id>
    <revision>
      <id>102912</id>
      <parentid>102911</parentid>
      <timestamp>2014-08-03T21:51:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8b1exazvlods28vdtmyd4vxr61cxdx7</sha1>
      <text xml:space="preserve" bytes="463">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Delete|Workbenches=All|MenuLocation=[[Std Edit Menu|Edit]] → Delete}}

&lt;!--T:3--&gt;
This command deletes the selected object(s). If no object is selected, nothing is done.

&lt;!--T:2--&gt;
Selected object(s) can be deleted from the document by pressing {{KEY|DEL}}, from the menu item Edit → Delete, or from the Tree View context menu. All Delete operations can be undone and redone.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DependencyGraph</title>
    <ns>0</ns>
    <id>10061</id>
    <revision>
      <id>131509</id>
      <parentid>131508</parentid>
      <timestamp>2014-12-14T15:28:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>bnq4anv1p7cobyi418ir0558rodwho7</sha1>
      <text xml:space="preserve" bytes="2308">
&lt;!--T:1--&gt;
&lt;div id=&quot;itsfree&quot; style=&quot;text-align:center; background:#FDE0A8;margin:1em 7em;padding:0.5em 2em;border:2px solid #FF5706;&quot;&gt;

&lt;!--T:2--&gt;
This documentation is not finished. Please help and contribute documentation.

&lt;!--T:3--&gt;
See [[Std ViewScreenShot]] for good documented Command. [[Gui Command]] gives an overview over commands. And see [[List of Commands]] for other commands.

&lt;!--T:4--&gt;
Go to the [http://www.freecadweb.org/wiki/index.php?title=Main_Page FreeCAD Wiki] to contribute.

&lt;!--T:5--&gt;
&lt;/div&gt;

== Description == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
'''Tools → Dependency graph...'''

&lt;!--T:8--&gt;
[[Image:DependencyGraph1.png|DependencyGraph1.png]]
{{clear}}

==Installation== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
'''Ubuntu Linux:''' You just need to install the graphviz package from the Ubuntu repositories.

&lt;!--T:15--&gt;
'''Windows:''' See http://graphviz.org/ 

&lt;!--T:16--&gt;
You don't need any configuration of FreeCAD preferences. If FreeCAD cannot find the utility &quot;dot&quot; (from the Graphviz package) then a dialog comes up and asks the user for its path. It then tries to start the utility again and in case it succeeds the value is written automatically to the user parameters.

&lt;!--T:11--&gt;
'''Mac/OSX:'''
You can install graphviz using brew:

&lt;syntaxhighlight&gt;
  $ brew install graphviz
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
This installs the graphviz binaries under /usr/local/bin. Unfortunately we can't navigate there from the file dialog that comes up from FreeCAD-&gt;Tools-&gt;Dependency graph. So let's create a link to /usr/local/bin in our home directory:

&lt;syntaxhighlight&gt;
  $ ln -s /usr/local/bin ~/
&lt;/syntaxhighlight&gt;

&lt;!--T:13--&gt;
Now when asked to select the graphviz install directory go to your home directory and select &quot;bin&quot;.

==Save/Export== &lt;!--T:17--&gt;
With version 014.3700 and above you can save/export the displayed dependency graph.
:Just choose '''File''' → [[Std_SaveAs|Save As]] to save the graph as a picture (PNG/BMP/GIF/JPG), a vector graphic (SVG) or as a pdf-file (PDF).
:'''File''' → [[Std_Export|Export]] or '''Tools''' → [[Std ViewScreenShot|Save picture]] will '''NOT''' work.

&lt;!--T:14--&gt;
[[Category:UnfinishedDocu]]
[[Category:User Documentation]]
[[Category:Command_Reference]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DlgCustomize</title>
    <ns>0</ns>
    <id>134</id>
    <revision>
      <id>103037</id>
      <parentid>103036</parentid>
      <timestamp>2014-08-04T10:37:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2gnex671kvima6vfprnmbo74f5xcial</sha1>
      <text xml:space="preserve" bytes="338">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DlgCustomize|MenuLocation=[[Std Tools Menu|Tools]] → Customize...|Workbenches=All|Shortcut=|SeeAlso=[[Interface_Customization|Interface Customization]]}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DlgMacroExecute</title>
    <ns>0</ns>
    <id>135</id>
    <revision>
      <id>16079</id>
      <parentid>15908</parentid>
      <timestamp>2013-01-11T09:38:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>languages it</comment>
      <sha1>3uwy4yjaxqfj5wdwwvqdchq5x8thg93</sha1>
      <text xml:space="preserve" bytes="235">{{GuiCommand|Name=Std_DlgMacroExecute|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}
{{clear}}
{{languages | {{fr|Std_DlgMacroExecute/fr}} {{it|Std_DlgMacroExecute/it}} {{jp|Std_DlgMacroExecute/jp}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std DlgMacroExecuteDirect</title>
    <ns>0</ns>
    <id>136</id>
    <revision>
      <id>105214</id>
      <parentid>105213</parentid>
      <timestamp>2014-08-18T20:52:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6ue50c8utp7jzuuo44umwdw3yzioxg5</sha1>
      <text xml:space="preserve" bytes="305">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DlgMacroExecuteDirect|MenuLocation=[[Std Macro Menu|Macro]] → Execute macro||Workbenches=All|Shortcut=Ctrl+F6|SeeAlso=}}



&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DlgMacroRecord</title>
    <ns>0</ns>
    <id>137</id>
    <revision>
      <id>16061</id>
      <parentid>15930</parentid>
      <timestamp>2013-01-11T07:46:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>languages it</comment>
      <sha1>a8frzbiv3835soctqtfk3kboqy97tiy</sha1>
      <text xml:space="preserve" bytes="231">{{GuiCommand|Name=Std_DlgMacroRecord|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}
{{clear}}
{{languages | {{fr|Std_DlgMacroRecord/fr}} {{it|Std_DlgMacroRecord/it}} {{jp|Std_DlgMacroRecord/jp}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std DlgMacroStop</title>
    <ns>0</ns>
    <id>138</id>
    <revision>
      <id>16070</id>
      <parentid>15939</parentid>
      <timestamp>2013-01-11T09:15:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>languages it</comment>
      <sha1>7yap8dy8qllb66bdc0l6axhq6gdvqvu</sha1>
      <text xml:space="preserve" bytes="223">{{GuiCommand|Name=Std_DlgMacroStop|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}
{{clear}}
{{languages | {{fr|Std_DlgMacroStop/fr}} {{it|Std_DlgMacroStop/it}} {{jp|Std_DlgMacroStop/jp}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std DlgParameter</title>
    <ns>0</ns>
    <id>139</id>
    <revision>
      <id>101337</id>
      <parentid>99690</parentid>
      <timestamp>2014-08-01T18:21:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>gwacnxjf7un3gdffwgsfs5h543wsg25</sha1>
      <text xml:space="preserve" bytes="286">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DlgParameter|Workbenches=All|MenuLocation=[[Std Tools Menu|Tools]] → Parameter |Shortcut=|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DlgPreferences</title>
    <ns>0</ns>
    <id>140</id>
    <revision>
      <id>102042</id>
      <parentid>102041</parentid>
      <timestamp>2014-08-02T15:49:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>q8w5vbgruocnuhbmpvnns8huv49os61</sha1>
      <text xml:space="preserve" bytes="288">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std DlgPreferences|MenuLocation=[[Std Edit Menu|Edit]] → Preferences||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std DuplicateSelection</title>
    <ns>0</ns>
    <id>4242</id>
    <revision>
      <id>108214</id>
      <parentid>108213</parentid>
      <timestamp>2014-09-01T21:10:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>irt0j4bemmysgn1abliehm76wvm4s3m</sha1>
      <text xml:space="preserve" bytes="648">

&lt;!--T:1--&gt;
{{GuiCommand|Name=Std DuplicateSelection|MenuLocation=Edit → Copy|Shortcut= |Workbenches=All|SeeAlso=[[Std_Copy|Copy]], [[Std_Paste|Paste]]}}

==Description== &lt;!--T:2--&gt;
The Duplicate Selection command is a short-cut for the Copy+Paste commands. It creates replicas of the currently selected objects into the current document. 

==How to use== &lt;!--T:3--&gt;
# Select the objects to be duplicated.
# Use menu choice Edit → Duplicate Selection.

==Limitations== &lt;!--T:4--&gt; 

 
==More== &lt;!--T:5--&gt;
* See the [[Copying_Objects|Copying objects]] page for more details on replicating objects.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Duplicate Selection</title>
    <ns>0</ns>
    <id>9671</id>
    <revision>
      <id>108231</id>
      <parentid>108228</parentid>
      <timestamp>2014-09-01T21:24:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Replaced content with &quot;[[Category:Pages_to_delete]]&quot;</comment>
      <sha1>n8hrgybn6cyp8fh9q5jx3gc3m8s6o7g</sha1>
      <text xml:space="preserve" bytes="28">[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Std Edit</title>
    <ns>0</ns>
    <id>2048</id>
    <revision>
      <id>103308</id>
      <parentid>103300</parentid>
      <timestamp>2014-08-05T20:32:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>joumh9l7wo5qjdxjqjm3zzkeeiljtyd</sha1>
      <text xml:space="preserve" bytes="978">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Edit|MenuLocation=[[Std_Edit_Menu|Edit]] → Toggle Editmode|Workbenches=All|SeeAlso=...}}


==== Synopsis ==== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This command allows to enter or leave the edit mode of a selected object. An object
must be either selected (then it enters edit mode) or in edit mode (then it leaves edit mode)
for this command to work.

&lt;!--T:4--&gt;
The behaviour that occurs when entering edit mode depends on the object type. Some object types
don't define any edit mode behaviour, in that case the standard behaviour (a transform widget)
is used.

&lt;!--T:5--&gt;
You can also perform the same action by double-clicking an object in the Tree View.

==== Scripting ==== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
This enters edit mode of a determined object:


 FreeCADGui.ActiveDocument.setEdit(&quot;myObjectName&quot;,0)


&lt;!--T:11--&gt;
This closes the edit mode:


 FreeCADGui.ActiveDocument.resetEdit()


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Edit Menu</title>
    <ns>0</ns>
    <id>9821</id>
    <revision>
      <id>105095</id>
      <parentid>103352</parentid>
      <timestamp>2014-08-18T19:36:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>style</comment>
      <sha1>1zy7w6gj6hm12ih09529u6ytsy8jexa</sha1>
      <text xml:space="preserve" bytes="1676">__NOTOC__

&lt;!--T:1--&gt;
{{StdMenu| Edit}}


&lt;!--T:3--&gt;
[[File:Std_Undo.png|16px]] [[Std_Undo|Undo]] reverses the last command.

&lt;!--T:4--&gt;
[[File:Std_Redo.png|16px]] [[Std_Redo|Redo]] reapplies the last command reversed by Undo.

&lt;!--T:5--&gt;
[[File:Std_Cut.png|16px]] [[Std_Cut|Cut]] places selected objects onto the clipboard and deletes them.

&lt;!--T:6--&gt;
[[File:Std_Copy.png|16px]] [[Std_Copy|Copy]] places selected objects onto the clipboard.

&lt;!--T:7--&gt;
[[File:Std_Paste.png|16px]] [[Std_Paste|Paste]] moves the contents of the clipboard to the current document.

&lt;!--T:8--&gt;
[[File:Std_DuplicateSelection.png|16px]] [[Std_DuplicateSelection|Duplicate Selection]] is a shortcut for Copy + Paste.

&lt;!--T:9--&gt;
[[File:Std_Refresh.png|16px]] [[Std_Refresh|Refresh]] redraws the display.

&lt;!--T:10--&gt;
[[File:Std_BoxSelection.png|16px]] [[Std_BoxSelection|Box Selection]] allows selecting all objects in a rectangular area.

&lt;!--T:11--&gt;
[[File:Std_SelectAll.png|16px]] [[Std_SelectAll|Select All]] selects all objects in the current document.

&lt;!--T:12--&gt;
[[File:Std_Delete.png|16px]] [[Std_Delete|Delete]] deletes the current selection.

&lt;!--T:13--&gt;
[[Std Placement|Placement...]] opens the Placement dialog for the selected object.

&lt;!--T:14--&gt;
[[Std_Alignment|Alignment...]] opens the Alignment dialog for the selected objects.

&lt;!--T:15--&gt;
[[File:Std_Edit.png|16px]] [[Std_Edit|Toggle Edit Mode]] turns Edit Mode on or off for the selected objects.

&lt;!--T:16--&gt;
[[File:Std DlgPreferences.png|16px]] [[Std DlgPreferences|Preferences]] opens the user Preferences dialog.



&lt;!--T:2--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]


</text>
    </revision>
  </page>
  <page>
    <title>Std Exit</title>
    <ns>0</ns>
    <id>37250</id>
    <revision>
      <id>105189</id>
      <parentid>99708</parentid>
      <timestamp>2014-08-18T20:26:02Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>|Shortcut=</comment>
      <sha1>del9t6ul0tx6sp4axybfxczgru3an0d</sha1>
      <text xml:space="preserve" bytes="322">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Exit|MenuLocation=[[Std_File_Menu|File]] → Exit|Workbenches=All|Shortcut=Alt+F4|SeeAlso=[[Std Open|Std Open]],[[Std Import|Std Import]]}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Export</title>
    <ns>0</ns>
    <id>141</id>
    <revision>
      <id>99758</id>
      <parentid>99742</parentid>
      <timestamp>2014-07-28T17:49:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>dlz2xlae42nuyzvc3wztor4fq3d22vl</sha1>
      <text xml:space="preserve" bytes="302">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Export|Workbenches=All|MenuLocation=[[Std File Menu|File]] → Export |Shortcut=Ctrl+E|SeeAlso=[[Std_Import|Import]]}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std File Menu</title>
    <ns>0</ns>
    <id>9851</id>
    <revision>
      <id>105091</id>
      <parentid>99811</parentid>
      <timestamp>2014-08-18T19:34:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>style</comment>
      <sha1>1puxwx9njizicjxivod59sz18wkftzv</sha1>
      <text xml:space="preserve" bytes="1409">__NOTOC__


&lt;!--T:1--&gt;
{{StdMenu|File}}
 
 
[[Std_New|New]] creates a new FreeCAD document.
  
[[Std_Open|Open]] opens an existing FreeCAD document file.

&lt;!--T:2--&gt;
[[Std_Close|Close]] closes the current document.

&lt;!--T:3--&gt;
[[Std_CloseAll|Close All]] closes all open documents.

&lt;!--T:4--&gt;
[[Std_Save|Save]] write the current document to disk.

&lt;!--T:5--&gt;
[[Std_SaveAs|Save As]] writes the current document to disk under a new name.

&lt;!--T:6--&gt;
[[Std_Import|Import]] reads a file from another application into the current document.

&lt;!--T:7--&gt;
[[Std_Export|Export]] writes the current document to a file for use in another application. 

&lt;!--T:8--&gt;
[[Std_MergeProject|Merge project]] adds the objects in a FreeCAD file to the current document.

&lt;!--T:9--&gt;
[[Std_ProjectInfo|Project Information]] add/update project metadata - author, revision date, etc.

&lt;!--T:10--&gt;
[[Std_Print|Print]] prints the contents of the current document window.

&lt;!--T:11--&gt;
[[Std_PrintPreview|Print Preview]] displays a print image of the current document window on screen.

&lt;!--T:12--&gt;
[[Std_PrintPdf|Export PDF]] writes the current document window to a PDF file.

&lt;!--T:13--&gt;
[[Std_RecentFiles|Recent Files]] is a short cut for opening a recently used document file.

&lt;!--T:14--&gt;
[[Std_Exit|Exit]] shuts down FreeCAD.

&lt;!--T:15--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]


</text>
    </revision>
  </page>
  <page>
    <title>Std FreeCADWebsite</title>
    <ns>0</ns>
    <id>142</id>
    <revision>
      <id>101592</id>
      <parentid>101591</parentid>
      <timestamp>2014-08-01T20:37:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>i0t9m5d73zhfcpvmpftxdk8uvbenhgt</sha1>
      <text xml:space="preserve" bytes="286">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Std FreeCADWebsite|MenuLocation=[[Std Help Menu|Help]] → FreeCADWebsite‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std FreezeViews</title>
    <ns>0</ns>
    <id>143</id>
    <revision>
      <id>101701</id>
      <parentid>101700</parentid>
      <timestamp>2014-08-02T09:52:10Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a7oldfjz6ks51bo7rk4q2b9vdujzr8e</sha1>
      <text xml:space="preserve" bytes="294">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std FreezeViews|MenuLocation=[[Std View Menu|View]] → Freeze display‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Help</title>
    <ns>0</ns>
    <id>38227</id>
    <revision>
      <id>105241</id>
      <parentid>101922</parentid>
      <timestamp>2014-08-18T21:00:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>6yqd1piddfd4t46pawgxgqr4jroimtb</sha1>
      <text xml:space="preserve" bytes="279">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Help|MenuLocation=[[Std Help Menu|Help]] → Help‏‎||Workbenches=All|Shortcut=F1|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Help Menu</title>
    <ns>0</ns>
    <id>30980</id>
    <revision>
      <id>105417</id>
      <parentid>105144</parentid>
      <timestamp>2014-08-19T21:11:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>links</comment>
      <sha1>tculmi1zzmqevadr761bku60v019rwu</sha1>
      <text xml:space="preserve" bytes="933">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{StdMenu|Help}}


&lt;!--T:3--&gt;
[[Image:Std Help.png|32px]][[Std_Help|Help]]

&lt;!--T:5--&gt;
[[File:Std OnlineHelp.png|32px]][[Std_FreeCADWebsite|FreeCAD Website]]

&lt;!--T:6--&gt;
[[File:Std OnlineHelp.png|32px]] [[User_hub|User Documentation]]

&lt;!--T:7--&gt;
[[File:Std OnlineHelp.png|32px]] [[Power_users_hub|Python scripting documentation]]

&lt;!--T:8--&gt;
[[File:Std OnlineHelp.png|32px]] [http://localhost:7465/ Automatic Python modules  documentation]

&lt;!--T:9--&gt;
[[File:Std OnlineHelp.png|32px]] [http://forum.freecadweb.org FreeCAD forum]

&lt;!--T:10--&gt;
[[File:Std OnlineHelp.png|32px]] [[FAQ|FreeCAD FAQ]]

&lt;!--T:11--&gt;
[[File:Std_About.png|32px]] [[Std_About|About FreeCAD]]

&lt;!--T:12--&gt;
[[File:Std_WhatsThis.png|32px]] [[Std_WhatsThis|What's This]]




&lt;!--T:4--&gt;
[[Category:Help]]
[[Category:User Documentation]]
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Icon</title>
    <ns>0</ns>
    <id>51427</id>
    <revision>
      <id>130693</id>
      <parentid>130611</parentid>
      <timestamp>2014-12-09T18:25:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>2v2vwlvozdqym086dczi34m2iope7qr</sha1>
      <text xml:space="preserve" bytes="25076">
==Draft The wireline tools== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[Image:Draft UndoLine.png|32px|Draft UndoLine|link=Draft UndoLine]] [[Draft UndoLine|Draft UndoLine]]
 &lt;nowiki&gt;[[Image:Draft UndoLine.png|32px|Draft UndoLine|link=Draft UndoLine]] [[Draft UndoLine|Draft UndoLine]]&lt;/nowiki&gt;

&lt;!--T:3--&gt;
[[Image:Draft FinishLine.png|32px|Draft FinishLine|link=Draft FinishLine]] [[Draft FinishLine|Draft FinishLine]]
 &lt;nowiki&gt;[[Image:Draft FinishLine.png|32px|Draft FinishLine|link=Draft FinishLine]] [[Draft FinishLine|Draft FinishLine]]&lt;/nowiki&gt;

&lt;!--T:4--&gt;
[[Image:Draft CloseLine.png|32px|Draft CloseLine|link=Draft CloseLine]] [[Draft CloseLine|Draft CloseLine]]
 &lt;nowiki&gt;[[Image:Draft CloseLine.png|32px|Draft CloseLine|link=Draft CloseLine]] [[Draft CloseLine|Draft CloseLine]]&lt;/nowiki&gt;

&lt;!--T:5--&gt;
[[Image:Draft SelectPlane.png|32px|Draft SelectPlan|link=Draft SelectPlane]] [[Draft SelectPlane|Draft SelectPlan]]
 &lt;nowiki&gt;[[Image:Draft SelectPlane.png|32px|Draft SelectPlan|link=Draft SelectPlane]] [[Draft SelectPlane|Draft SelectPlan]]&lt;/nowiki&gt;

&lt;!--T:6--&gt;
[[Image:Draft ToggleConstructionMode.png|32px|Draft ToggleConstructionMode|link=Draft ToggleConstructionMode]] [[Draft ToggleConstructionMode|Draft ToggleConstructionMode]]
 &lt;nowiki&gt;[[Image:Draft ToggleConstructionMode.png|32px|Draft ToggleConstructionMode|link=Draft ToggleConstructionMode]] [[Draft ToggleConstructionMode|Draft ToggleConstructionMode]]&lt;/nowiki&gt;

&lt;!--T:7--&gt;
[[Image:Draft ToggleContinueMode.png|32px|Draft ToggleContinueMode|link=Draft ToggleContinueMode]] [[Draft ToggleContinueMode|Draft ToggleContinueMode]]
 &lt;nowiki&gt;[[Image:Draft ToggleContinueMode.png|32px|Draft ToggleContinueMode|link=Draft ToggleContinueMode]] [[Draft ToggleContinueMode|Draft ToggleContinueMode]]&lt;/nowiki&gt;

&lt;!--T:8--&gt;
[[Image:Draft Apply.png|32px|Draft Apply|link=Draft Apply]] [[Draft Apply|Draft Apply]]
 &lt;nowiki&gt;[[Image:Draft Apply.png|32px|Draft Apply|link=Draft Apply]] [[Draft Apply|Draft Apply]]&lt;/nowiki&gt;

&lt;!--T:9--&gt;
[[Image:Draft ToggleDisplayMode.png|32px|Draft ToggleDisplayMode|link=Draft ToggleDisplayMode]] [[Draft ToggleDisplayMode|Draft ToggleDisplayMode]]
 &lt;nowiki&gt;[[Image:Draft ToggleDisplayMode.png|32px|Draft ToggleDisplayMode|link=Draft ToggleDisplayMode]] [[Draft ToggleDisplayMode|Draft ToggleDisplayMode]]&lt;/nowiki&gt;

&lt;!--T:10--&gt;
[[Image:Draft AddToGroup.png|32px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]
 &lt;nowiki&gt;[[Image:Draft AddToGroup.png|32px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]&lt;/nowiki&gt;

&lt;!--T:11--&gt;
[[Image:Draft SelectGroup.png|32px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]
 &lt;nowiki&gt;[[Image:Draft SelectGroup.png|32px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]&lt;/nowiki&gt;

&lt;!--T:12--&gt;
[[Image:Draft ToggleSnap.png|32px|Draft ToggleSnap|link=Draft ToggleSnap]] [[Draft ToggleSnap|Draft ToggleSnap]]
 &lt;nowiki&gt;[[Image:Draft ToggleSnap.png|32px|Draft ToggleSnap|link=Draft ToggleSnap]] [[Draft ToggleSnap|Draft ToggleSnap]]&lt;/nowiki&gt;

&lt;!--T:13--&gt;
[[Image:Draft ToggleGrid.png|32px|Draft ToggleGrid|link=Draft ToggleGrid]] [[Draft ToggleGrid|Draft ToggleGrid]]
 &lt;nowiki&gt;[[Image:Draft ToggleGrid.png|32px|Draft ToggleGrid|link=Draft ToggleGrid]] [[Draft ToggleGrid|Draft ToggleGrid]]&lt;/nowiki&gt;

&lt;!--T:14--&gt;
[[Image:Draft ShowSnapBar.png|32px|Draft ShowSnapBar|link=Draft ShowSnapBar]] [[Draft ShowSnapBar|Draft ShowSnapBar]]
 &lt;nowiki&gt;[[Image:Draft ShowSnapBar.png|32px|Draft ShowSnapBar|link=Draft ShowSnapBar]] [[Draft ShowSnapBar|Draft ShowSnapBar]]&lt;/nowiki&gt;

==Workbench== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
[[Image:Arch Wall.png|32px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]
 &lt;nowiki&gt;[[Image:Arch Wall.png|32px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]&lt;/nowiki&gt;

&lt;!--T:17--&gt;
[[Image:Workbench Complete.svg|32px|Workbench Complete|link=Complete Workbench]] [[Complete Workbench|Complete Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Complete.svg|32px|Workbench Complete|link=Complete Workbench]] [[Complete Workbench|Complete Workbench]]&lt;/nowiki&gt;

&lt;!--T:18--&gt;
[[Image:Workbench Draft.png|32px|Workbench Draft|link=Draft Module]] [[Draft Module|Draft Module]]
 &lt;nowiki&gt;[[Image:Workbench Draft.png|32px|Workbench Draft|link=Draft Module]] [[Draft Module|Workbench Draft]]&lt;/nowiki&gt;

&lt;!--T:19--&gt;
[[Image:Workbench Drawing.png|32px|Workbench Drawing|link=Drawing Workbench]] [[Drawing Workbench|Drawing Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Drawing.png|32px|Drawing Workbench|link=Drawing Workbench]] [[Drawing Workbench|Drawing Workbench]]&lt;/nowiki&gt;

&lt;!--T:20--&gt;
[[Image:Workbench FEM.png|32px|Workbench FEM|link=FEM project]] [[FEM project|FEM project]]
 &lt;nowiki&gt;[[Image:Workbench FEM.png|32px|Workbench FEM|link=FEM project]] [[FEM project|FEM project]]&lt;/nowiki&gt;

&lt;!--T:21--&gt;
[[Image:foldBase.svg|32px|foldBase|link=foldBase]] [[foldBase|foldBase]]
 &lt;nowiki&gt;[[Image:foldBase.svg|32px|foldBase|link=foldBase]] [[foldBase|foldBase]]&lt;/nowiki&gt;

&lt;!--T:22--&gt;
[[Image:Workbench Image.png|32px|Workbench Image|link=Image Workbench]] [[Image Workbench |Image Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Image.png|32px|Image Workbench|link=Workbench Image]] [[Image Workbench|Image Workbench]]&lt;/nowiki&gt;

&lt;!--T:23--&gt;
[[Image:Workbench Mesh.png|32px|Workbench Mesh|link=Mesh Module]] [[Mesh Module|Mesh Module]]
 &lt;nowiki&gt;[[Image:Workbench Mesh.png|32px|Workbench Mesh|link=Mesh Module]] [[Mesh Module|Mesh Module]]&lt;/nowiki&gt;

&lt;!--T:24--&gt;
[[Image:Workbench OpenSCAD.png|32px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Module]]
 &lt;nowiki&gt;[[Image:Workbench OpenSCAD.png|32px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Module]]&lt;/nowiki&gt;

&lt;!--T:25--&gt;
[[Image:Workbench Part.png|32px|Workbench Part|link=Part Module]] [[Part Module|Part Module]]
 &lt;nowiki&gt;[[Image:Workbench Part.png|32px|Workbench Part|link=Part Module]] [[Part Module|Part Module]]&lt;/nowiki&gt;

&lt;!--T:26--&gt;
[[Image:Workbench PartDesign.png|32px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]
 &lt;nowiki&gt;[[Image:Workbench PartDesign.png|32px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]&lt;/nowiki&gt;

&lt;!--T:27--&gt;
[[Image:Points Module.png|32px|Module Points|link=Points Module]] [[Points Module|Points Module]]
 &lt;nowiki&gt;[[Image:Points Module.png|32px|Module Points|link=Points Module]] [[Points Module|Points Module]]&lt;/nowiki&gt;

&lt;!--T:28--&gt;
[[Image:Workbench Raytracing.svg|32px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Raytracing Module]]
 &lt;nowiki&gt;[[Image:Workbench Raytracing.svg|32px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Raytracing Module]]&lt;/nowiki&gt;

&lt;!--T:29--&gt;
[[Image:Workbench Robot.png|32px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Robot Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Robot.png|32px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Robot Workbench]]&lt;/nowiki&gt;

&lt;!--T:30--&gt;
[[Image:FreeCAD-Ship-Ico.png|32px|FreeCADShip Workbench|link=FreeCADShip Workbench]] [[FreeCADShip Workbench|FreeCADShip Workbench]]
 &lt;nowiki&gt;[[Image:FreeCAD-Ship-Ico.png|32px|FreeCADShip Workbench|link=FreeCADShip Workbench]] [[FreeCADShip Workbench|FreeCADShip Workbench]]&lt;/nowiki&gt;

&lt;!--T:31--&gt;
[[Image:Workbench Sketcher.png|32px|Sketcher Workbench|link=Sketcher Workbench]] [[Sketcher Workbench|Sketcher Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Sketcher.png|32px|Sketcher Workbench|link=Sketcher Workbench]] [[Sketcher Workbench|Sketcher Workbench]]&lt;/nowiki&gt;

&lt;!--T:32--&gt;
[[Image:Workbench Start.svg|32px|Workbench Start|link=Start Workbench]] [[Start Workbench|Start Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Start.svg|32px|Workbench Start|link=Start Workbench]] [[Start Workbench|Start Workbench]]&lt;/nowiki&gt;

&lt;!--T:33--&gt;
[[Image:Workbench Web.svg|32px|Workbench Web|link=Main Page]] [[Web Workbench|Web Workbench]]
 &lt;nowiki&gt;[[Image:Workbench Web.svg|32px|Workbench Web|link=Main Page]] [[Web Workbench|Web Workbench]]&lt;/nowiki&gt;

==Other== &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
[[Image:Case a cocher O.png|16px]]
 &lt;nowiki&gt;[[Image:Case a cocher O.png|16px]]&lt;/nowiki&gt;

&lt;!--T:36--&gt;
[[Image:Case a cocher N.png|16px]]
 &lt;nowiki&gt;[[Image:Case a cocher N.png|16px]]&lt;/nowiki&gt;

&lt;!--T:37--&gt;
{{TRUE}}
 &lt;nowiki&gt;{{TRUE}}&lt;/nowiki&gt;

&lt;!--T:38--&gt;
{{FALSE}}
 &lt;nowiki&gt;{{FALSE}}&lt;/nowiki&gt;

&lt;!--T:39--&gt;
[[Image:View-zoom-all.svg|32px|vertical-align: top=zoom-all]]
 &lt;nowiki&gt;[[Image:View-zoom-all.svg|32px|vertical-align: top=zoom-all]]&lt;/nowiki&gt;

&lt;!--T:40--&gt;
[[Image:View-zoom-border.svg|32px|zoom-border]]
 &lt;nowiki&gt;[[Image:View-zoom-border.svg|32px|zoom-border]]&lt;/nowiki&gt;

&lt;!--T:41--&gt;
[[Image:View-zoom-in.svg|32px|zoom-in]]
 &lt;nowiki&gt;[[Image:View-zoom-in.svg|32px|zoom-in]]&lt;/nowiki&gt;

&lt;!--T:42--&gt;
[[Image:View-zoom-out.svg|32px|zoom-out]]
 &lt;nowiki&gt;[[Image:View-zoom-out.svg|32px|zoom-out]]&lt;/nowiki&gt;

&lt;!--T:43--&gt;
[[Image:View-perspective.svg|32px|perspective]]
 &lt;nowiki&gt;[[Image:View-perspective.svg|32px|perspective]]&lt;/nowiki&gt;

&lt;!--T:44--&gt;
[[Image:View-isometric.svg|32px|isometric]]
 &lt;nowiki&gt;[[Image:View-isometric.svg|32px|isometric]]&lt;/nowiki&gt;

&lt;!--T:45--&gt;
[[Image:View-bottom.svg|32px|bottom]]
 &lt;nowiki&gt;[[Image:View-bottom.svg|32px|bottom]]&lt;/nowiki&gt;

&lt;!--T:46--&gt;
[[Image:View-rear.svg|32px|rear]]
 &lt;nowiki&gt;[[Image:View-rear.svg|32px|rear]]&lt;/nowiki&gt;

&lt;!--T:47--&gt;
[[Image:View-right.svg|32px|right]]
 &lt;nowiki&gt;[[Image:View-right.svg|32px|right]]&lt;/nowiki&gt;

&lt;!--T:48--&gt;
[[Image:View-left.svg|32px|View-left]]
 &lt;nowiki&gt;[[Image:View-left.svg|32px|View-left]]&lt;/nowiki&gt;

&lt;!--T:49--&gt;
[[Image:View-front.svg|32px|front]]
 &lt;nowiki&gt;[[Image:View-front.svg|32px|front]]&lt;/nowiki&gt;

&lt;!--T:50--&gt;
[[Image:View-top.svg|32px|top]]
 &lt;nowiki&gt;[[Image:View-top.svg|32px|top]]&lt;/nowiki&gt;
 
[[File:View-zoom-selection.svg|32px|View-zoom-selection]]
 &lt;nowiki&gt;[[File:View-zoom-selection.svg|32px|View-zoom-selection]]&lt;/nowiki&gt;

&lt;!--T:51--&gt;
[[File:View-zoom-out.svg|32px|View-zoom-out]]
 &lt;nowiki&gt;[[File:View-zoom-out.png|32px|View-zoom-out]]&lt;/nowiki&gt;

&lt;!--T:52--&gt;
[[File:View-zoom-in.svg|32px|View-zoom-in]]
 &lt;nowiki&gt;[[File:View-zoom-in.svg|32px|View-zoom-in]]&lt;/nowiki&gt;

&lt;!--T:53--&gt;
[[File:View-zoom-border.svg|32px|View-zoom-border]]
 &lt;nowiki&gt;[[File:View-zoom-border.svg|32px|View-zoom-border]]&lt;/nowiki&gt;

&lt;!--T:54--&gt;
[[File:View-zoom-all.svg|32px|View-zoom-all]]
 &lt;nowiki&gt;[[File:View-zoom-all.svg|32px|View-zoom-all]]&lt;/nowiki&gt;

&lt;!--T:55--&gt;
[[File:Tree Annotation.svg|32px|Tree Annotation]]
 &lt;nowiki&gt;[[File:Tree Annotation.svg|32px|Tree Annotation]]&lt;/nowiki&gt;

&lt;!--T:56--&gt;
[[File:Measure.svg|32px|Measure]]
 &lt;nowiki&gt;[[File:Measure.svg|32px|Measure]]&lt;/nowiki&gt;

==STD (editor)== &lt;!--T:57--&gt;

&lt;!--T:58--&gt;
[[File:Std About.png|32px|Std About|link=Std About]] [[Std About|Std About]]

 &lt;!--T:59--&gt;
&lt;nowiki&gt;[[File:Std About.png|32px|Std About|link=Std About]] [[Std About|Std About]]&lt;/nowiki&gt;

&lt;!--T:60--&gt;
[[File:Std AboutQt.png|32px|Std AboutQt|link=Std AboutQt]] [[Std AboutQt|Std AboutQt]]

 &lt;!--T:61--&gt;
&lt;nowiki&gt;[[File:Std AboutQt.png|32px|Std AboutQt|link=Std AboutQt]] [[Std AboutQt|Std AboutQt]]&lt;/nowiki&gt;

&lt;!--T:62--&gt;
[[File:Std ClippingPlane.png|32px|Std ClippingPlane|link=Std ClippingPlane]] [[Std ClippingPlane|Std ClippingPlane]]

 &lt;!--T:63--&gt;
&lt;nowiki&gt;[[File:Std ClippingPlane.png|32px|Std ClippingPlane|link=Std ClippingPlane]] [[Std ClippingPlane|Std ClippingPlane]]&lt;/nowiki&gt;

&lt;!--T:64--&gt;
[[File:Std CommandLine.png|32px|Std CommandLine|link=Std CommandLine]] [[Std CommandLine|Std CommandLine]]

 &lt;!--T:65--&gt;
&lt;nowiki&gt;[[File:Std CommandLine.png|32px|Std CommandLine|link=Std CommandLine]] [[Std CommandLine|Std CommandLine]]&lt;/nowiki&gt;

&lt;!--T:66--&gt;
[[File:Std Copy.png|32px|Std Copy|link=Std Copy]] [[Std Copy|Std Copy]]

 &lt;!--T:67--&gt;
&lt;nowiki&gt;[[File:Std Copy.png|32px|Std Copy|link=Std Copy]] [[Std Copy|Std Copy]]&lt;/nowiki&gt;

&lt;!--T:68--&gt;
[[File:Std Cut.png|32px|Std Cut|link=Std Cut]] [[Std Cut|Std Cut]]

 &lt;!--T:69--&gt;
&lt;nowiki&gt;[[File:Std Cut.png|32px|Std Cut|link=Std Cut]] [[Std Cut|Std Cut]]&lt;/nowiki&gt;

&lt;!--T:70--&gt;
[[File:Std Delete.png|32px|Std Delete|link=Std Delete]] [[Std Delete|Std Delete]]

 &lt;!--T:71--&gt;
&lt;nowiki&gt;[[File:Std Delete.png|32px|Std Delete|link=Std Delete]] [[Std Delete|Std Delete]]&lt;/nowiki&gt;

&lt;!--T:72--&gt;
[[File:Std DlgCustomize.png|32px|Std DlgCustomize|link=Std DlgCustomize]] [[Std DlgCustomize|Std DlgCustomize]]

 &lt;!--T:73--&gt;
&lt;nowiki&gt;[[File:Std DlgCustomize.png|32px|Std DlgCustomize|link=Std DlgCustomize]] [[Std DlgCustomize|Std DlgCustomize]]&lt;/nowiki&gt;

&lt;!--T:74--&gt;
[[File:Std DlgMacroExecute.png|32px|Std DlgMacroExecute|link=Std DlgMacroExecute]] [[Std DlgMacroExecute|Std DlgMacroExecute]]

 &lt;!--T:75--&gt;
&lt;nowiki&gt;[[File:Std DlgMacroExecute.png|32px|Std DlgMacroExecute|link=Std DlgMacroExecute]] [[Std DlgMacroExecute|Std DlgMacroExecute]]&lt;/nowiki&gt;

&lt;!--T:76--&gt;
[[File:Std DlgMacroExecuteDirect.png|32px|Std DlgMacroExecuteDirect|link=Std DlgMacroExecuteDirect]] [[Std DlgMacroExecuteDirect|Std DlgMacroExecuteDirect]]

 &lt;!--T:77--&gt;
&lt;nowiki&gt;[[File:Std DlgMacroExecuteDirect.png|32px|Std DlgMacroExecuteDirect|link=Std DlgMacroExecuteDirect]] [[Std DlgMacroExecuteDirect|Std DlgMacroExecuteDirect]]&lt;/nowiki&gt;

&lt;!--T:78--&gt;
[[File:Std DlgMacroRecord.png|32px|Std DlgMacroRecord|link=Std DlgMacroRecord]] [[Std DlgMacroRecord|Std DlgMacroRecord]]

 &lt;!--T:79--&gt;
&lt;nowiki&gt;[[File:Std DlgMacroRecord.png|32px|Std DlgMacroRecord|link=Std DlgMacroRecord]] [[Std DlgMacroRecord|Std DlgMacroRecord]]&lt;/nowiki&gt;

&lt;!--T:80--&gt;
[[File:Std DlgMacroStop.png|32px|Std DlgMacroStop|link=Std DlgMacroStop]] [[Std DlgMacroStop|Std DlgMacroStop]]

 &lt;!--T:81--&gt;
&lt;nowiki&gt;[[File:Std DlgMacroStop.png|32px|Std DlgMacroStop|link=Std DlgMacroStop]] [[Std DlgMacroStop|Std DlgMacroStop]]&lt;/nowiki&gt;

&lt;!--T:82--&gt;
[[File:Std DlgParameter.png|32px|Std DlgParameter|link=Std DlgParameter]] [[Std DlgParameter|Std DlgParameter]]

 &lt;!--T:83--&gt;
&lt;nowiki&gt;[[File:Std DlgParameter.png|32px|Std DlgParameter|link=Std DlgParameter]] [[Std DlgParameter|Std DlgParameter]]&lt;/nowiki&gt;

&lt;!--T:84--&gt;
[[File:Std DlgPreferences.png|32px|Std DlgPreferences|link=Std DlgPreferences]] [[Std DlgPreferences|Std DlgPreferences]]

 &lt;!--T:85--&gt;
&lt;nowiki&gt;[[File:Std DlgPreferences.png|32px|Std DlgPreferences|link=Std DlgPreferences]] [[Std DlgPreferences|Std DlgPreferences]]&lt;/nowiki&gt;

&lt;!--T:86--&gt;
[[File:Std Edit.png|32px|Std Edit|link=Std Edit]] [[Std Edit|Std Edit]]

 &lt;!--T:87--&gt;
&lt;nowiki&gt;[[File:Std Edit.png|32px|Std Edit|link=Std Edit]] [[Std Edit|Std Edit]]&lt;/nowiki&gt;

&lt;!--T:88--&gt;
[[File:Std Export.png|32px|Std Export|link=Std Export]] [[Std Export|Std Export]]

 &lt;!--T:89--&gt;
&lt;nowiki&gt;[[File:Std Export.png|32px|Std Export|link=Std Export]] [[Std Export|Std Export]]&lt;/nowiki&gt;

&lt;!--T:90--&gt;
[[File:Std FreeCADWebsite.png|32px|Std FreeCADWebsite|link=Std FreeCADWebsite]] [[Std FreeCADWebsite|Std FreeCADWebsite]]

 &lt;!--T:91--&gt;
&lt;nowiki&gt;[[File:Std FreeCADWebsite.png|32px|Std FreeCADWebsite|link=Std FreeCADWebsite]] [[Std FreeCADWebsite|Std FreeCADWebsite]]&lt;/nowiki&gt;

&lt;!--T:92--&gt;
[[File:Std FreezeViews.png|32px|Std FreezeViews|link=Std FreezeViews]] [[Std FreezeViews|Std FreezeViews]]

 &lt;!--T:93--&gt;
&lt;nowiki&gt;[[File:Std FreezeViews.png|32px|Std FreezeViews|link=Std FreezeViews]] [[Std FreezeViews|Std FreezeViews]]&lt;/nowiki&gt;

&lt;!--T:94--&gt;
[[File:Std Import.png|32px|Std Import|link=Std Import]] [[Std Import|Std Import]]

 &lt;!--T:95--&gt;
&lt;nowiki&gt;[[File:Std Import.png|32px|Std Import|link=Std Import]] [[Std Import|Std Import]]&lt;/nowiki&gt;

&lt;!--T:96--&gt;
[[File:Std MeasureDistance.png|32px|Std MeasureDistance|link=Std MeasureDistance]] [[Std MeasureDistance|Std MeasureDistance]]

 &lt;!--T:97--&gt;
&lt;nowiki&gt;[[File:Std MeasureDistance.png|32px|Std MeasureDistance|link=Std MeasureDistance]] [[Std MeasureDistance|Std MeasureDistance]]&lt;/nowiki&gt;

&lt;!--T:98--&gt;
[[File:Std New.png|32px|Std New|link=Std New]] [[Std New|Std New]]

 &lt;!--T:99--&gt;
&lt;nowiki&gt;[[File:Std New.png|32px|Std New|link=Std New]] [[Std New|Std New]]&lt;/nowiki&gt;

&lt;!--T:100--&gt;
[[File:Std OnlineHelp.png|32px|Std OnlineHelp|link=Std OnlineHelp]] [[Std OnlineHelp|Std OnlineHelp]]

 &lt;!--T:101--&gt;
&lt;nowiki&gt;[[File:Std OnlineHelp.png|32px|Std OnlineHelp|link=Std OnlineHelp]] [[Std OnlineHelp|Std OnlineHelp]]&lt;/nowiki&gt;

&lt;!--T:102--&gt;
[[File:Std OnlineHelpPython.png|32px|Std OnlineHelpPython|link=Std OnlineHelpPython]] [[Std OnlineHelpPython|Std OnlineHelpPython]]

 &lt;!--T:103--&gt;
&lt;nowiki&gt;[[File:Std OnlineHelpPython.png|32px|Std OnlineHelpPython|link=Std OnlineHelpPython]] [[Std OnlineHelpPython|Std OnlineHelpPython]]&lt;/nowiki&gt;

&lt;!--T:104--&gt;
[[File:Std OnlineHelpWebsite.png|32px|Std OnlineHelpWebsite|link=Std OnlineHelpWebsite]] [[Std OnlineHelpWebsite|Std OnlineHelpWebsite]]

 &lt;!--T:105--&gt;
&lt;nowiki&gt;[[File:Std OnlineHelpWebsite.png|32px|Std OnlineHelpWebsite|link=Std OnlineHelpWebsite]] [[Std OnlineHelpWebsite|Std OnlineHelpWebsite]]&lt;/nowiki&gt;

&lt;!--T:106--&gt;
[[File:Std Open.png|32px|Std Open|link=Std Open]] [[Std Open|Std Open]]

 &lt;!--T:107--&gt;
&lt;nowiki&gt;[[File:Std Open.png|32px|Std Open|link=Std Open]] [[Std Open|Std Open]]&lt;/nowiki&gt;

&lt;!--T:108--&gt;
[[File:Std OrthographicCamera.png|32px|Std OrthographicCamera|link=Std OrthographicCamera]] [[Std OrthographicCamera|Std OrthographicCamera]]

 &lt;!--T:109--&gt;
&lt;nowiki&gt;[[File:Std OrthographicCamera.png|32px|Std OrthographicCamera|link=Std OrthographicCamera]] [[Std OrthographicCamera|Std OrthographicCamera]]&lt;/nowiki&gt;

&lt;!--T:110--&gt;
[[File:Std Paste.png|32px|Std Paste|link=Std Paste]] [[Std Paste|Std Paste]]

 &lt;!--T:111--&gt;
&lt;nowiki&gt;[[File:Std Paste.png|32px|Std Paste|link=Std Paste]] [[Std Paste|Std Paste]]&lt;/nowiki&gt;

&lt;!--T:112--&gt;
[[File:Std PerspectiveCamera.png|32px|Std PerspectiveCamera|link=Std PerspectiveCamera]] [[Std PerspectiveCamera|Std PerspectiveCamera]]

 &lt;!--T:113--&gt;
&lt;nowiki&gt;[[File:Std PerspectiveCamera.png|32px|Std PerspectiveCamera|link=Std PerspectiveCamera]] [[Std PerspectiveCamera|Std PerspectiveCamera]]&lt;/nowiki&gt;

&lt;!--T:114--&gt;
[[File:Std Print.png|32px|Std Print|link=Std Print]] [[Std Print|Std Print]]

 &lt;!--T:115--&gt;
&lt;nowiki&gt;[[File:Std Print.png|32px|Std Print|link=Std Print]] [[Std Print|Std Print]]&lt;/nowiki&gt;

&lt;!--T:116--&gt;
[[File:Std PrintPdf.png|32px|Std PrintPdf|link=Std PrintPdf]] [[Std PrintPdf|Std PrintPdf]]

 &lt;!--T:117--&gt;
&lt;nowiki&gt;[[File:Std PrintPdf.png|32px|Std PrintPdf|link=Std PrintPdf]] [[Std PrintPdf|Std PrintPdf]]&lt;/nowiki&gt;

&lt;!--T:118--&gt;
[[File:Std ProjectInfo.png|32px|Std ProjectInfo|link=Std ProjectInfo]] [[Std ProjectInfo|Std ProjectInfo]]

 &lt;!--T:119--&gt;
&lt;nowiki&gt;[[File:Std ProjectInfo.png|32px|Std ProjectInfo|link=Std ProjectInfo]] [[Std ProjectInfo|Std ProjectInfo]]&lt;/nowiki&gt;

&lt;!--T:120--&gt;
[[File:Std PythonWebsite.png|32px|Std PythonWebsite|link=Std PythonWebsite]] [[Std PythonWebsite|Std PythonWebsite]]

 &lt;!--T:121--&gt;
&lt;nowiki&gt;[[File:Std PythonWebsite.png|32px|Std PythonWebsite|link=Std PythonWebsite]] [[Std PythonWebsite|Std PythonWebsite]]&lt;/nowiki&gt;

&lt;!--T:122--&gt;
[[File:Std Quit.png|32px|Std Quit|link=Std Quit]] [[Std Quit|Std Quit]]

 &lt;!--T:123--&gt;
&lt;nowiki&gt;[[File:Std Quit.png|32px|Std Quit|link=Std Quit]] [[Std Quit|Std Quit]]&lt;/nowiki&gt;

&lt;!--T:124--&gt;
[[File:Std RecentFiles.png|32px|Std RecentFiles|link=Std RecentFiles]] [[Std RecentFiles|Std RecentFiles]]

 &lt;!--T:125--&gt;
&lt;nowiki&gt;[[File:Std RecentFiles.png|32px|Std RecentFiles|link=Std RecentFiles]] [[Std RecentFiles|Std RecentFiles]]&lt;/nowiki&gt;

&lt;!--T:126--&gt;
[[File:Std Redo.png|32px|Std Redo|link=Std Redo]] [[Std Redo|Std Redo]]

 &lt;!--T:127--&gt;
&lt;nowiki&gt;[[File:Std Redo.png|32px|Std Redo|link=Std Redo]] [[Std Redo|Std Redo]]&lt;/nowiki&gt;

&lt;!--T:128--&gt;
[[File:Std Save.png|32px|Std Save|link=Std Save]] [[Std Save|Std Save]]

 &lt;!--T:129--&gt;
&lt;nowiki&gt;[[File:Std Save.png|32px|Std Save|link=Std Save]] [[Std Save|Std Save]]&lt;/nowiki&gt;

&lt;!--T:130--&gt;
[[File:Std SaveAs.png|32px|Std SaveAs|link=Std SaveAs]] [[Std SaveAs|Std SaveAs]]

 &lt;!--T:131--&gt;
&lt;nowiki&gt;[[File:Std SaveAs.png|32px|Std SaveAs|link=Std SaveAs]] [[Std SaveAs|Std SaveAs]]&lt;/nowiki&gt;

&lt;!--T:132--&gt;
[[File:Std SceneInspector.png|32px|Std SceneInspector|link=Std SceneInspector]] [[Std SceneInspector|Std SceneInspector]]

 &lt;!--T:133--&gt;
&lt;nowiki&gt;[[File:Std SceneInspector.png|32px|Std SceneInspector|link=Std SceneInspector]] [[Std SceneInspector|Std SceneInspector]]&lt;/nowiki&gt;

&lt;!--T:134--&gt;
[[File:Std SelectAll.png|32px|Std SelectAll|link=Std SelectAll]] [[Std SelectAll|Std SelectAll]]

 &lt;!--T:135--&gt;
&lt;nowiki&gt;[[File:Std SelectAll.png|32px|Std SelectAll|link=Std SelectAll]] [[Std SelectAll|Std SelectAll]]&lt;/nowiki&gt;

&lt;!--T:136--&gt;
[[File:Std SetAppearance.png|32px|Std SetAppearance|link=Std SetAppearance]] [[Std SetAppearance|Std SetAppearance]]

 &lt;!--T:137--&gt;
&lt;nowiki&gt;[[File:Std SetAppearance.png|32px|Std SetAppearance|link=Std SetAppearance]] [[Std SetAppearance|Std SetAppearance]]&lt;/nowiki&gt;

&lt;!--T:138--&gt;
[[File:Std TipOfTheDay.png|32px|Std TipOfTheDay|link=Std TipOfTheDay]] [[Std TipOfTheDay|Std TipOfTheDay]]

 &lt;!--T:139--&gt;
&lt;nowiki&gt;[[File:Std TipOfTheDay.png|32px|Std TipOfTheDay|link=Std TipOfTheDay]] [[Std TipOfTheDay|Std TipOfTheDay]]&lt;/nowiki&gt;

&lt;!--T:140--&gt;
[[File:Std ToggleVisibility.png|32px|Std ToggleVisibility|link=Std ToggleVisibility]] [[Std ToggleVisibility|Std ToggleVisibility]]

 &lt;!--T:141--&gt;
&lt;nowiki&gt;[[File:Std ToggleVisibility.png|32px|Std ToggleVisibility|link=Std ToggleVisibility]] [[Std ToggleVisibility|Std ToggleVisibility]]&lt;/nowiki&gt;

&lt;!--T:142--&gt;
[[File:Std TreeSelection.png|32px|Std TreeSelection|link=Std TreeSelection]] [[Std TreeSelection|Std TreeSelection]]

 &lt;!--T:143--&gt;
&lt;nowiki&gt;[[File:Std TreeSelection.png|32px|Std TreeSelection|link=Std TreeSelection]] [[Std TreeSelection|Std TreeSelection]]&lt;/nowiki&gt;

&lt;!--T:144--&gt;
[[File:Std ViewBoxZoom.png|32px|Std ViewBoxZoom|link=Std ViewBoxZoom]] [[Std ViewBoxZoom|Std ViewBoxZoom]]

 &lt;!--T:145--&gt;
&lt;nowiki&gt;[[File:Std ViewBoxZoom.png|32px|Std ViewBoxZoom|link=Std ViewBoxZoom]] [[Std ViewBoxZoom|Std ViewBoxZoom]]&lt;/nowiki&gt;

&lt;!--T:146--&gt;
[[File:Std ViewCreate.png|32px|Std ViewCreate|link=Std ViewCreate]] [[Std ViewCreate|Std ViewCreate]]

 &lt;!--T:147--&gt;
&lt;nowiki&gt;[[File:Std ViewCreate.png|32px|Std ViewCreate|link=Std ViewCreate]] [[Std ViewCreate|Std ViewCreate]]&lt;/nowiki&gt;

&lt;!--T:148--&gt;
[[File:Std ViewDockUndockFullscreen.png|32px|Std ViewDockUndockFullscreen|link=Std ViewDockUndockFullscreen]] [[Std ViewDockUndockFullscreen|Std ViewDockUndockFullscreen]]

 &lt;!--T:149--&gt;
&lt;nowiki&gt;[[File:Std ViewDockUndockFullscreen.png|32px|Std ViewDockUndockFullscreen|link=Std ViewDockUndockFullscreen]] [[Std ViewDockUndockFullscreen|Std ViewDockUndockFullscreen]]&lt;/nowiki&gt;

&lt;!--T:150--&gt;
[[File:Std ViewExamples.png|32px|Std ViewExamples|link=Std ViewExamples]] [[Std ViewExamples|Std ViewExamples]]

 &lt;!--T:151--&gt;
&lt;nowiki&gt;[[File:Std ViewExamples.png|32px|Std ViewExamples|link=Std ViewExamples]] [[Std ViewExamples|Std ViewExamples]]&lt;/nowiki&gt;

&lt;!--T:152--&gt;
[[File:Std ViewFitAll.png|32px|Std ViewFitAll|link=Std ViewFitAll]] [[Std ViewFitAll|Std ViewFitAll]]

 &lt;!--T:153--&gt;
&lt;nowiki&gt;[[File:Std ViewFitAll.png|32px|Std ViewFitAll|link=Std ViewFitAll]] [[Std ViewFitAll|Std ViewFitAll]]&lt;/nowiki&gt;

&lt;!--T:154--&gt;
[[File:Std ViewFitSelection.png|32px|Std ViewFitSelection|link=Std ViewFitSelection]] [[Std ViewFitSelection|Std ViewFitSelection]]

 &lt;!--T:155--&gt;
&lt;nowiki&gt;[[File:Std ViewFitSelection.png|32px|Std ViewFitSelection|link=Std ViewFitSelection]] [[Std ViewFitSelection|Std ViewFitSelection]]&lt;/nowiki&gt;

&lt;!--T:156--&gt;
[[File:Std ViewIvIssueCamPos.png|32px|Std ViewIvIssueCamPos|link=Std ViewIvIssueCamPos]] [[Std ViewIvIssueCamPos|Std ViewIvIssueCamPos]]

 &lt;!--T:157--&gt;
&lt;nowiki&gt;[[File:Std ViewIvIssueCamPos.png|32px|Std ViewIvIssueCamPos|link=Std ViewIvIssueCamPos]] [[Std ViewIvIssueCamPos|Std ViewIvIssueCamPos]]&lt;/nowiki&gt;

&lt;!--T:158--&gt;
[[File:Std ViewIvStereo.png|32px|Std ViewIvStereo|link=Std ViewIvStereo]] [[Std ViewIvStereo|Std ViewIvStereo]]

 &lt;!--T:159--&gt;
&lt;nowiki&gt;[[File:Std ViewIvStereo.png|32px|Std ViewIvStereo|link=Std ViewIvStereo]] [[Std ViewIvStereo|Std ViewIvStereo]]&lt;/nowiki&gt;

&lt;!--T:160--&gt;
[[File:Std ViewScreenShot.png|32px|Std ViewScreenShot|link=Std ViewScreenShot]] [[Std ViewScreenShot|Std ViewScreenShot]]

 &lt;!--T:161--&gt;
&lt;nowiki&gt;[[File:Std ViewScreenShot.png|32px|Std ViewScreenShot|link=Std ViewScreenShot]] [[Std ViewScreenShot|Std ViewScreenShot]]&lt;/nowiki&gt;

&lt;!--T:162--&gt;
[[File:Std ViewXX.png|32px|Std ViewXX|link=Std ViewXX]] [[Std ViewXX|Std ViewXX]]

 &lt;!--T:163--&gt;
&lt;nowiki&gt;[[File:Std ViewXX.png|32px|Std ViewXX|link=Std ViewXX]] [[Std ViewXX|Std ViewXX]]&lt;/nowiki&gt;

&lt;!--T:164--&gt;
[[File:Std ViewZoom.png|32px|Std ViewZoom|link=Std ViewZoom]] [[Std ViewZoom|Std ViewZoom]]

 &lt;!--T:165--&gt;
&lt;nowiki&gt;[[File:Std ViewZoom.png|32px|Std ViewZoom|link=Std ViewZoom]] [[Std ViewZoom|Std ViewZoom]]&lt;/nowiki&gt;

&lt;!--T:166--&gt;
[[File:Std WhatsThis.png|32px|Std WhatsThis|link=Std WhatsThis]] [[Std WhatsThis|Std WhatsThis]]

 &lt;!--T:167--&gt;
&lt;nowiki&gt;[[File:Std WhatsThis.png|32px|Std WhatsThis|link=Std WhatsThis]] [[Std WhatsThis|Std WhatsThis]]&lt;/nowiki&gt;

&lt;!--T:168--&gt;
[[File:Std Workbench.png|32px|Std Workbench|link=Std Workbench]] [[Std Workbench|Std Workbench]]

 &lt;!--T:169--&gt;
&lt;nowiki&gt;[[File:Std Workbench.png|32px|Std Workbench|link=Std Workbench]] [[Std Workbench|Std Workbench]]&lt;/nowiki&gt;

&lt;!--T:170--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Import</title>
    <ns>0</ns>
    <id>144</id>
    <revision>
      <id>79985</id>
      <parentid>79984</parentid>
      <timestamp>2014-04-20T19:28:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>6mmyklq06md487tc5opfijyg0nhks3c</sha1>
      <text xml:space="preserve" bytes="994">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Import|Workbenches=All|MenuLocation=File → Import|Shortcut=CTRL+I|SeeAlso=[[Std_Open|Std Open]]...}}

&lt;!--T:2--&gt;
Adds the content of a file from another application to the current document.  A number of file formats are supported: [http://en.wikipedia.org/wiki/IGES *.IGES], [http://en.wikipedia.org/wiki/Step_file *.STEP], [http://en.wikipedia.org/wiki/BREP *.BREP], [http://en.wikipedia.org/wiki/STL_%28file_format%29 *.STL], [http://en.wikipedia.org/wiki/Wavefront_.obj_file *.OBJ], [http://en.wikipedia.org/wiki/PLY_%28file_format%29 *.PLY], etc.

&lt;!--T:3--&gt;
When loading, the file is added to the current (already open) project. If you want to load a new file in a new window, use the [[Std_Open|Open]] command.

&lt;!--T:4--&gt;
FreeCAD Project files have the extension &quot;FCStd&quot;. For more information on the internal structure of FreeCAD project files, read the [[File_Format_FCStd|FCStd file format]] article.



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Key</title>
    <ns>0</ns>
    <id>51450</id>
    <revision>
      <id>132315</id>
      <parentid>131468</parentid>
      <timestamp>2014-12-18T21:26:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>3kkum5p4xiy9hwikndbkrrxfgz36km3</sha1>
      <text xml:space="preserve" bytes="27067">
==The wireline tools== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
{{KEY|[[File:Draft UndoLine.png|16px|Draft UndoLine|link=Draft UndoLine]] [[Draft UndoLine|Draft UndoLine]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft UndoLine.png|16px|Draft UndoLine|link=Draft UndoLine]] [[Draft UndoLine|Draft UndoLine]]}}&lt;/nowiki&gt;

&lt;!--T:3--&gt;
{{KEY|[[File:Draft FinishLine.png|16px|Draft FinishLine|link=Draft FinishLine]] [[Draft FinishLine|Draft FinishLine]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft FinishLine.png|16px|Draft FinishLine|link=Draft FinishLine]] [[Draft FinishLine|Draft FinishLine]]}}&lt;/nowiki&gt;

&lt;!--T:4--&gt;
{{KEY|[[File:Draft CloseLine.png|16px|Draft CloseLine|link=Draft CloseLine]] [[Draft CloseLine|Draft CloseLine]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft CloseLine.png|16px|Draft CloseLine|link=Draft CloseLine]] [[Draft CloseLine|Draft CloseLine]]}}&lt;/nowiki&gt;

&lt;!--T:5--&gt;
{{KEY|[[File:Draft SelectPlane.png|16px|Draft SelectPlan|link=Draft SelectPlane]] [[Draft SelectPlane|Draft SelectPlan]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft SelectPlane.png|16px|Draft SelectPlan|link=Draft SelectPlane]] [[Draft SelectPlane|Draft SelectPlan]]}}&lt;/nowiki&gt;

&lt;!--T:6--&gt;
{{KEY|[[File:Draft ToggleConstructionMode.png|16px|Draft ToggleConstructionMode|link=Draft ToggleConstructionMode]] [[Draft ToggleConstructionMode|Draft ToggleConstructionMode]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ToggleConstructionMode.png|16px|Draft ToggleConstructionMode|link=Draft ToggleConstructionMode]] [[Draft ToggleConstructionMode|Draft ToggleConstructionMode]]}}&lt;/nowiki&gt;

&lt;!--T:7--&gt;
{{KEY|[[File:Draft ToggleContinueMode.png|16px|Draft ToggleContinueMode|link=Draft ToggleContinueMode]] [[Draft ToggleContinueMode|Draft ToggleContinueMode]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ToggleContinueMode.png|16px|Draft ToggleContinueMode|link=Draft ToggleContinueMode]] [[Draft ToggleContinueMode|Draft ToggleContinueMode]]}}&lt;/nowiki&gt;

&lt;!--T:8--&gt;
{{KEY|[[File:Draft Apply.png|16px|Draft Apply|link=Draft Apply]] [[Draft Apply|Draft Apply]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft Apply.png|16px|Draft Apply|link=Draft Apply]] [[Draft Apply|Draft Apply]]}}&lt;/nowiki&gt;

&lt;!--T:9--&gt;
{{KEY|[[File:Draft ToggleDisplayMode.png|16px|Draft ToggleDisplayMode|link=Draft ToggleDisplayMode]] [[Draft ToggleDisplayMode|Draft ToggleDisplayMode]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ToggleDisplayMode.png|16px|Draft ToggleDisplayMode|link=Draft ToggleDisplayMode]] [[Draft ToggleDisplayMode|Draft ToggleDisplayMode]]}}&lt;/nowiki&gt;

&lt;!--T:10--&gt;
{{KEY|[[File:Draft AddToGroup.png|16px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft AddToGroup.png|16px|Draft AddToGroup|link=Draft AddToGroup]] [[Draft AddToGroup|Draft AddToGroup]]}}&lt;/nowiki&gt;

&lt;!--T:11--&gt;
{{KEY|[[File:Draft SelectGroup.png|16px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft SelectGroup.png|16px|Draft SelectGroup|link=Draft SelectGroup]] [[Draft SelectGroup|Draft SelectGroup]]}}&lt;/nowiki&gt;

&lt;!--T:12--&gt;
{{KEY|[[File:Draft ToggleSnap.png|16px|Draft ToggleSnap|link=Draft ToggleSnap]] [[Draft ToggleSnap|Draft ToggleSnap]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ToggleSnap.png|16px|Draft ToggleSnap|link=Draft ToggleSnap]] [[Draft ToggleSnap|Draft ToggleSnap]]}}&lt;/nowiki&gt;

&lt;!--T:13--&gt;
{{KEY|[[File:Draft ToggleGrid.png|16px|Draft ToggleGrid|link=Draft ToggleGrid]] [[Draft ToggleGrid|Draft ToggleGrid]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ToggleGrid.png|16px|Draft ToggleGrid|link=Draft ToggleGrid]] [[Draft ToggleGrid|Draft ToggleGrid]]}}&lt;/nowiki&gt;

&lt;!--T:14--&gt;
{{KEY|[[File:Draft ShowSnapBar.png|16px|Draft ShowSnapBar|link=Draft ShowSnapBar]] [[Draft ShowSnapBar|Draft ShowSnapBar]]}}
 &lt;nowiki&gt;{{KEY|[[File:Draft ShowSnapBar.png|16px|Draft ShowSnapBar|link=Draft ShowSnapBar]] [[Draft ShowSnapBar|Draft ShowSnapBar]]}}&lt;/nowiki&gt;

==Workbench== &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
{{KEY|[[File:Arch Wall.png|16px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]}}
 &lt;nowiki&gt;{{KEY|[[File:Arch Wall.png|16px|Arch Wall|link=Arch Module]] [[Arch Module|Arch Module]]}}&lt;/nowiki&gt;

&lt;!--T:17--&gt;
{{KEY|[[File:Workbench Complete.svg|16px|Workbench Complete|link=Complete Workbench]] [[Complete Workbench|Complete Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Complete.svg|16px|Workbench Complete|link=Complete Workbench]] [[Complete Workbench|Complete Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:18--&gt;
{{KEY|[[File:Workbench Draft.png|16px|Workbench Draft|link=Draft Module]] [[Draft Module|Draft Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Draft.png|16px|Workbench Draft|link=Draft Module]] [[Draft Module|Draft Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:19--&gt;
{{KEY|[[File:Workbench Drawing.png|16px|Workbench Drawing|link=Drawing Workbench]] [[Drawing Workbench|Drawing Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Drawing.png|16px|Workbench Drawing|link=Drawing Workbench]] [[Drawing Workbench|Drawing Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:20--&gt;
{{KEY|[[File:Workbench FEM.png|16px|Workbench FEM|link=FEM project]] [[FEM project|FEM Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench FEM.png|16px|Workbench FEM|link=FEM project]] [[FEM project|FEM Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:21--&gt;
{{KEY|[[File:foldBase.svg|16px|foldBase|link=foldBase]] [[foldBase|foldBase]]}}
 &lt;nowiki&gt;{{KEY|[[File:foldBase.svg|16px|foldBase|link=foldBase]] [[foldBase|foldBase]]}}&lt;/nowiki&gt;

&lt;!--T:22--&gt;
{{KEY|[[File:Workbench Image.png|16px|Image Workbench|link=Image Workbench]] [[Image Workbench|Image Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Image.png|16px|Image Workbench|link=Image Workbench]] [[Image Workbench|Image Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:23--&gt;
{{KEY|[[File:Workbench Mesh.png|16px|Workbench Mesh|link=Mesh Module]] [[Mesh Module|Mesh Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Mesh.png|16px|Workbench Mesh|link=Mesh Module]] [[Mesh Module|Mesh Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:24--&gt;
{{KEY|[[File:Workbench OpenSCAD.png|16px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench OpenSCAD.png|16px|Workbench OpenSCAD|link=OpenSCAD Module]] [[OpenSCAD Module|OpenSCAD Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:25--&gt;
{{KEY|[[File:Workbench Part.png|16px|Workbench Part|link=Part Module]] [[Part Module|Part Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Part.png|16px|Workbench Part|link=Part Module]] [[Part Module|Part Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:26--&gt;
{{KEY|[[File:Workbench PartDesign.png|16px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench PartDesign.png|16px|Workbench PartDesign|link=PartDesign Workbench]] [[PartDesign Workbench|PartDesign Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:27--&gt;
{{KEY|[[File:Points Module.png|16px|Module Points|link=Points Module]] [[Points Module|Points Module]]}}
 &lt;nowiki&gt;{{KEY|[[File:Points Module.png|16px|Module Points|link=Points Module]] [[Points Module|Points Module]]}}&lt;/nowiki&gt;

&lt;!--T:28--&gt;
{{KEY|[[File:Workbench Raytracing.svg|16px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Raytracing Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Raytracing.svg|16px|Workbench Raytracing|link=Raytracing Module]] [[Raytracing Module|Raytracing Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:29--&gt;
{{KEY|[[File:Workbench Robot.png|16px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Robot Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Robot.png|16px|Workbench Robot|link=Robot Workbench]] [[Robot Workbench|Robot Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:30--&gt;
{{KEY|[[File:FreeCAD-Ship-Ico.png|16px|FreeCADShip Workbench|link=FreeCADShip Workbench]] [[FreeCADShip Workbench|FreeCADShip Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:FreeCAD-Ship-Ico.png|16px|FreeCADShip Workbench|link=FreeCADShip Workbench]] [[FreeCADShip Workbench|FreeCADShip Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:31--&gt;
{{KEY|[[File:Workbench Sketcher.png|16px|Sketcher Workbench|link=Sketcher Workbench]] [[Sketcher Workbench|Sketcher Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Sketcher.png|16px|Sketcher Workbench|link=Sketcher Workbench]] [[Sketcher Workbench|Sketcher Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:32--&gt;
{{KEY|[[File:Workbench Start.svg|16px|Workbench Start|link=Start Workbench]] [[Start Workbench|Start Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Start.svg|16px|Workbench Start|link=Start Workbench]] [[Start Workbench|Start Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:33--&gt;
{{KEY|[[File:Workbench Web.svg|16px|Workbench Web|link=Main Page]] [[Main Page|Web Workbench]]}}
 &lt;nowiki&gt;{{KEY|[[File:Workbench Web.svg|16px|Workbench Web|link=Main Page]] [[Main Page|Web Workbench]]}}&lt;/nowiki&gt;

==Other== &lt;!--T:145--&gt;

&lt;!--T:146--&gt;
{{KEY|[[Image:Case a cocher O.png|16px]] texte}}
 &lt;nowiki&gt;{{KEY|[[Image:Case a cocher O.png|16px]] text}}&lt;/nowiki&gt;

&lt;!--T:147--&gt;
{{KEY|[[Image:Case a cocher N.png|16px]] texte}}
 &lt;nowiki&gt;{{KEY|[[Image:Case a cocher N.png|16px]] text}}&lt;/nowiki&gt;

&lt;!--T:148--&gt;
{{KEY|[[File:View-zoom-all.svg|16px|vertical-align: top=zoom-all]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-all.svg|16px|vertical-align: top=zoom-all]]}}&lt;/nowiki&gt;

&lt;!--T:149--&gt;
{{KEY|[[File:View-zoom-border.svg|16px|zoom-border]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-border.svg|16px|zoom-border]]}}&lt;/nowiki&gt;

&lt;!--T:150--&gt;
{{KEY|[[File:View-zoom-in.svg|16px|zoom-in]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-in.svg|16px|zoom-in]]}}&lt;/nowiki&gt;

&lt;!--T:151--&gt;
{{KEY|[[File:View-zoom-out.svg|16px|zoom-out]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-out.svg|16px|zoom-out]]}}&lt;/nowiki&gt;

&lt;!--T:152--&gt;
{{KEY|[[File:View-perspective.svg|16px|perspective]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-perspective.svg|16px|perspective]]}}&lt;/nowiki&gt;

&lt;!--T:153--&gt;
{{KEY|[[File:View-isometric.svg|16px|isometric]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-isometric.svg|16px|isometric]]}}&lt;/nowiki&gt;

&lt;!--T:154--&gt;
{{KEY|[[File:View-bottom.svg|16px|bottom]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-bottom.svg|16px|bottom]]}}&lt;/nowiki&gt;

&lt;!--T:155--&gt;
{{KEY|[[File:View-rear.svg|16px|rear]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-rear.svg|16px|rear]]}}&lt;/nowiki&gt;

&lt;!--T:156--&gt;
{{KEY|[[File:View-right.svg|16px|right]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-right.svg|16px|right]]}}&lt;/nowiki&gt;

&lt;!--T:157--&gt;
{{KEY|[[File:View-left.svg|16px|View-left]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-left.svg|16px|View-left]]}}&lt;/nowiki&gt;

&lt;!--T:158--&gt;
{{KEY|[[File:View-front.svg|16px|front]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-front.svg|16px|front]]}}&lt;/nowiki&gt;

&lt;!--T:159--&gt;
{{KEY|[[File:View-top.svg|16px|top]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-top.svg|16px|top]]}}&lt;/nowiki&gt;

&lt;!--T:160--&gt;
{{KEY|[[File:View-zoom-selection.svg|16px|top]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-selection.svg|16px|top]]}}&lt;/nowiki&gt;

&lt;!--T:161--&gt;
{{KEY|[[File:View-zoom-out.png|16px|View-zoom-out]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-out.png|16px|View-zoom-out]]}}&lt;/nowiki&gt;

&lt;!--T:162--&gt;
{{KEY|[[File:View-zoom-in.svg|16px|View-zoom-in]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-in.svg|16px|View-zoom-in]]}}&lt;/nowiki&gt;

&lt;!--T:163--&gt;
{{KEY|[[File:View-zoom-border.svg|16px|View-zoom-border]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-border.svg|16px|View-zoom-border]]}}&lt;/nowiki&gt;

&lt;!--T:164--&gt;
{{KEY|[[File:View-zoom-all.svg|16px|View-zoom-all]]}}
 &lt;nowiki&gt;{{KEY|[[File:View-zoom-all.svg|16px|View-zoom-all]]}}&lt;/nowiki&gt;

&lt;!--T:165--&gt;
{{KEY|[[File:Tree Annotation.svg|16px|Tree Annotation]]}}
 &lt;nowiki&gt;{{KEY|[[File:Tree Annotation.svg|16px|Tree Annotation]]}}&lt;/nowiki&gt;

&lt;!--T:166--&gt;
{{KEY|[[File:Measure.svg|16px|Measure]]}}
 &lt;nowiki&gt;{{KEY|[[File:Measure.svg|16px|Measure]]}}&lt;/nowiki&gt;

==STD (editor)== &lt;!--T:167--&gt;

&lt;!--T:168--&gt;
{{KEY|[[File:Std About.png|16px|Std About|link=Std About]] [[Std About|Std About]]}}

 &lt;!--T:169--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std About.png|16px|Std About|link=Std About]] [[Std About|Std About]]}}&lt;/nowiki&gt;

&lt;!--T:170--&gt;
{{KEY|[[File:Std AboutQt.png|16px|Std AboutQt|link=Std AboutQt]] [[Std AboutQt|Std AboutQt]]}}

 &lt;!--T:171--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std AboutQt.png|16px|Std AboutQt|link=Std AboutQt]] [[Std AboutQt|Std AboutQt]]}}&lt;/nowiki&gt;

&lt;!--T:172--&gt;
{{KEY|[[File:Std ClippingPlane.png|16px|Std ClippingPlane|link=Std ClippingPlane]] [[Std ClippingPlane|Std ClippingPlane]]}}

 &lt;!--T:173--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ClippingPlane.png|16px|Std ClippingPlane|link=Std ClippingPlane]] [[Std ClippingPlane|Std ClippingPlane]]}}&lt;/nowiki&gt;

&lt;!--T:174--&gt;
{{KEY|[[File:Std CommandLine.png|16px|Std CommandLine|link=Std CommandLine]] [[Std CommandLine|Std CommandLine]]}}

 &lt;!--T:175--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std CommandLine.png|16px|Std CommandLine|link=Std CommandLine]] [[Std CommandLine|Std CommandLine]]}}&lt;/nowiki&gt;

&lt;!--T:176--&gt;
{{KEY|[[File:Std Copy.png|16px|Std Copy|link=Std Copy]] [[Std Copy|Std Copy]]}}

 &lt;!--T:177--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Copy.png|16px|Std Copy|link=Std Copy]] [[Std Copy|Std Copy]]}}&lt;/nowiki&gt;

&lt;!--T:178--&gt;
{{KEY|[[File:Std Cut.png|16px|Std Cut|link=Std Cut]] [[Std Cut|Std Cut]]}}

 &lt;!--T:179--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Cut.png|16px|Std Cut|link=Std Cut]] [[Std Cut|Std Cut]]}}&lt;/nowiki&gt;

&lt;!--T:180--&gt;
{{KEY|[[File:Std Delete.png|16px|Std Delete|link=Std Delete]] [[Std Delete|Std Delete]]}}

 &lt;!--T:181--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Delete.png|16px|Std Delete|link=Std Delete]] [[Std Delete|Std Delete]]}}&lt;/nowiki&gt;

&lt;!--T:182--&gt;
{{KEY|[[File:Std DlgCustomize.png|16px|Std DlgCustomize|link=Std DlgCustomize]] [[Std DlgCustomize|Std DlgCustomize]]}}

 &lt;!--T:183--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgCustomize.png|16px|Std DlgCustomize|link=Std DlgCustomize]] [[Std DlgCustomize|Std DlgCustomize]]}}&lt;/nowiki&gt;

&lt;!--T:184--&gt;
{{KEY|[[File:Std DlgMacroExecute.png|16px|Std DlgMacroExecute|link=Std DlgMacroExecute]] [[Std DlgMacroExecute|Std DlgMacroExecute]]}}

 &lt;!--T:185--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgMacroExecute.png|16px|Std DlgMacroExecute|link=Std DlgMacroExecute]] [[Std DlgMacroExecute|Std DlgMacroExecute]]}}&lt;/nowiki&gt;

&lt;!--T:186--&gt;
{{KEY|[[File:Std DlgMacroExecuteDirect.png|16px|Std DlgMacroExecuteDirect|link=Std DlgMacroExecuteDirect]] [[Std DlgMacroExecuteDirect|Std DlgMacroExecuteDirect]]}}

 &lt;!--T:187--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgMacroExecuteDirect.png|16px|Std DlgMacroExecuteDirect|link=Std DlgMacroExecuteDirect]] [[Std DlgMacroExecuteDirect|Std DlgMacroExecuteDirect]]}}&lt;/nowiki&gt;

&lt;!--T:188--&gt;
{{KEY|[[File:Std DlgMacroRecord.png|16px|Std DlgMacroRecord|link=Std DlgMacroRecord]] [[Std DlgMacroRecord|Std DlgMacroRecord]]}}

 &lt;!--T:189--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgMacroRecord.png|16px|Std DlgMacroRecord|link=Std DlgMacroRecord]] [[Std DlgMacroRecord|Std DlgMacroRecord]]}}&lt;/nowiki&gt;

&lt;!--T:190--&gt;
{{KEY|[[File:Std DlgMacroStop.png|16px|Std DlgMacroStop|link=Std DlgMacroStop]] [[Std DlgMacroStop|Std DlgMacroStop]]}}

 &lt;!--T:191--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgMacroStop.png|16px|Std DlgMacroStop|link=Std DlgMacroStop]] [[Std DlgMacroStop|Std DlgMacroStop]]}}&lt;/nowiki&gt;

&lt;!--T:192--&gt;
{{KEY|[[File:Std DlgParameter.png|16px|Std DlgParameter|link=Std DlgParameter]] [[Std DlgParameter|Std DlgParameter]]}}

 &lt;!--T:193--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgParameter.png|16px|Std DlgParameter|link=Std DlgParameter]] [[Std DlgParameter|Std DlgParameter]]}}&lt;/nowiki&gt;

&lt;!--T:194--&gt;
{{KEY|[[File:Std DlgPreferences.png|16px|Std DlgPreferences|link=Std DlgPreferences]] [[Std DlgPreferences|Std DlgPreferences]]}}

 &lt;!--T:195--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DlgPreferences.png|16px|Std DlgPreferences|link=Std DlgPreferences]] [[Std DlgPreferences|Std DlgPreferences]]}}&lt;/nowiki&gt;

&lt;!--T:196--&gt;
{{KEY|[[File:Std DuplicateSelection.png|16px|Std DuplicateSelection|link=Std DuplicateSelection]] [[Std DuplicateSelection|Std DuplicateSelection]]}}

 &lt;!--T:197--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std DuplicateSelection.png|16px|Std DuplicateSelection|link=Std DuplicateSelection]] [[Std DuplicateSelection|Std DuplicateSelection]]}}&lt;/nowiki&gt;

&lt;!--T:198--&gt;
{{KEY|[[File:Std Edit.png|16px|Std Edit|link=Std Edit]] [[Std Edit|Std Edit]]}}

 &lt;!--T:199--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Edit.png|16px|Std Edit|link=Std Edit]] [[Std Edit|Std Edit]]}}&lt;/nowiki&gt;

&lt;!--T:200--&gt;
{{KEY|[[File:Std Export.png|16px|Std Export|link=Std Export]] [[Std Export|Std Export]]}}

 &lt;!--T:201--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Export.png|16px|Std Export|link=Std Export]] [[Std Export|Std Export]]}}&lt;/nowiki&gt;

&lt;!--T:202--&gt;
{{KEY|[[File:Std FreeCADWebsite.png|16px|Std FreeCADWebsite|link=Std FreeCADWebsite]] [[Std FreeCADWebsite|Std FreeCADWebsite]]}}

 &lt;!--T:203--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std FreeCADWebsite.png|16px|Std FreeCADWebsite|link=Std FreeCADWebsite]] [[Std FreeCADWebsite|Std FreeCADWebsite]]}}&lt;/nowiki&gt;

&lt;!--T:204--&gt;
{{KEY|[[File:Std FreezeViews.png|16px|Std FreezeViews|link=Std FreezeViews]] [[Std FreezeViews|Std FreezeViews]]}}

 &lt;!--T:205--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std FreezeViews.png|16px|Std FreezeViews|link=Std FreezeViews]] [[Std FreezeViews|Std FreezeViews]]}}&lt;/nowiki&gt;

&lt;!--T:206--&gt;
{{KEY|[[File:Std Import.png|16px|Std Import|link=Std Import]] [[Std Import|Std Import]]}}

 &lt;!--T:207--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Import.png|16px|Std Import|link=Std Import]] [[Std Import|Std Import]]}}&lt;/nowiki&gt;

&lt;!--T:208--&gt;
{{KEY|[[File:Std MeasureDistance.png|16px|Std MeasureDistance|link=Std MeasureDistance]] [[Std MeasureDistance|Std MeasureDistance]]}}

 &lt;!--T:209--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std MeasureDistance.png|16px|Std MeasureDistance|link=Std MeasureDistance]] [[Std MeasureDistance|Std MeasureDistance]]}}&lt;/nowiki&gt;

&lt;!--T:210--&gt;
{{KEY|[[File:Std New.png|16px|Std New|link=Std New]] [[Std New|Std New]]}}

 &lt;!--T:211--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std New.png|16px|Std New|link=Std New]] [[Std New|Std New]]}}&lt;/nowiki&gt;

&lt;!--T:212--&gt;
{{KEY|[[File:Std OnlineHelp.png|16px|Std OnlineHelp|link=Std OnlineHelp]] [[Std OnlineHelp|Std OnlineHelp]]}}

 &lt;!--T:213--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std OnlineHelp.png|16px|Std OnlineHelp|link=Std OnlineHelp]] [[Std OnlineHelp|Std OnlineHelp]]}}&lt;/nowiki&gt;

&lt;!--T:214--&gt;
{{KEY|[[File:Std OnlineHelpPython.png|16px|Std OnlineHelpPython|link=Std OnlineHelpPython]] [[Std OnlineHelpPython|Std OnlineHelpPython]]}}

 &lt;!--T:215--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std OnlineHelpPython.png|16px|Std OnlineHelpPython|link=Std OnlineHelpPython]] [[Std OnlineHelpPython|Std OnlineHelpPython]]}}&lt;/nowiki&gt;

&lt;!--T:216--&gt;
{{KEY|[[File:Std OnlineHelpWebsite.png|16px|Std OnlineHelpWebsite|link=Std OnlineHelpWebsite]] [[Std OnlineHelpWebsite|Std OnlineHelpWebsite]]}}

 &lt;!--T:217--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std OnlineHelpWebsite.png|16px|Std OnlineHelpWebsite|link=Std OnlineHelpWebsite]] [[Std OnlineHelpWebsite|Std OnlineHelpWebsite]]}}&lt;/nowiki&gt;

&lt;!--T:218--&gt;
{{KEY|[[File:Std Open.png|16px|Std Open|link=Std Open]] [[Std Open|Std Open]]}}

 &lt;!--T:219--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Open.png|16px|Std Open|link=Std Open]] [[Std Open|Std Open]]}}&lt;/nowiki&gt;

&lt;!--T:220--&gt;
{{KEY|[[File:Std OrthographicCamera.png|16px|Std OrthographicCamera|link=Std OrthographicCamera]] [[Std OrthographicCamera|Std OrthographicCamera]]}}

 &lt;!--T:221--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std OrthographicCamera.png|16px|Std OrthographicCamera|link=Std OrthographicCamera]] [[Std OrthographicCamera|Std OrthographicCamera]]}}&lt;/nowiki&gt;

&lt;!--T:222--&gt;
{{KEY|[[File:Std Paste.png|16px|Std Paste|link=Std Paste]] [[Std Paste|Std Paste]]}}

 &lt;!--T:223--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Paste.png|16px|Std Paste|link=Std Paste]] [[Std Paste|Std Paste]]}}&lt;/nowiki&gt;

&lt;!--T:224--&gt;
{{KEY|[[File:Std PerspectiveCamera.png|16px|Std PerspectiveCamera|link=Std PerspectiveCamera]] [[Std PerspectiveCamera|Std PerspectiveCamera]]}}

 &lt;!--T:225--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std PerspectiveCamera.png|16px|Std PerspectiveCamera|link=Std PerspectiveCamera]] [[Std PerspectiveCamera|Std PerspectiveCamera]]}}&lt;/nowiki&gt;

&lt;!--T:226--&gt;
{{KEY|[[File:Std Print.png|16px|Std Print|link=Std Print]] [[Std Print|Std Print]]}}

 &lt;!--T:227--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Print.png|16px|Std Print|link=Std Print]] [[Std Print|Std Print]]}}&lt;/nowiki&gt;

&lt;!--T:228--&gt;
{{KEY|[[File:Std PrintPdf.png|16px|Std PrintPdf|link=Std PrintPdf]] [[Std PrintPdf|Std PrintPdf]]}}

 &lt;!--T:229--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std PrintPdf.png|16px|Std PrintPdf|link=Std PrintPdf]] [[Std PrintPdf|Std PrintPdf]]}}&lt;/nowiki&gt;

&lt;!--T:230--&gt;
{{KEY|[[File:Std ProjectInfo.png|16px|Std ProjectInfo|link=Std ProjectInfo]] [[Std ProjectInfo|Std ProjectInfo]]}}

 &lt;!--T:231--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ProjectInfo.png|16px|Std ProjectInfo|link=Std ProjectInfo]] [[Std ProjectInfo|Std ProjectInfo]]}}&lt;/nowiki&gt;

&lt;!--T:232--&gt;
{{KEY|[[File:Std PythonWebsite.png|16px|Std PythonWebsite|link=Std PythonWebsite]] [[Std PythonWebsite|Std PythonWebsite]]}}

 &lt;!--T:233--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std PythonWebsite.png|16px|Std PythonWebsite|link=Std PythonWebsite]] [[Std PythonWebsite|Std PythonWebsite]]}}&lt;/nowiki&gt;

&lt;!--T:234--&gt;
{{KEY|[[File:Std Quit.png|16px|Std Quit|link=Std Quit]] [[Std Quit|Std Quit]]}}

 &lt;!--T:235--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Quit.png|16px|Std Quit|link=Std Quit]] [[Std Quit|Std Quit]]}}&lt;/nowiki&gt;

&lt;!--T:236--&gt;
{{KEY|[[File:Std RecentFiles.png|16px|Std RecentFiles|link=Std RecentFiles]] [[Std RecentFiles|Std RecentFiles]]}}

 &lt;!--T:237--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std RecentFiles.png|16px|Std RecentFiles|link=Std RecentFiles]] [[Std RecentFiles|Std RecentFiles]]}}&lt;/nowiki&gt;

&lt;!--T:238--&gt;
{{KEY|[[File:Std Redo.png|16px|Std Redo|link=Std Redo]] [[Std Redo|Std Redo]]}}

 &lt;!--T:239--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Redo.png|16px|Std Redo|link=Std Redo]] [[Std Redo|Std Redo]]}}&lt;/nowiki&gt;

&lt;!--T:240--&gt;
{{KEY|[[File:Std Save.png|16px|Std Save|link=Std Save]] [[Std Save|Std Save]]}}

 &lt;!--T:241--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Save.png|16px|Std Save|link=Std Save]] [[Std Save|Std Save]]}}&lt;/nowiki&gt;

&lt;!--T:242--&gt;
{{KEY|[[File:Std SaveAs.png|16px|Std SaveAs|link=Std SaveAs]] [[Std SaveAs|Std SaveAs]]}}

 &lt;!--T:243--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std SaveAs.png|16px|Std SaveAs|link=Std SaveAs]] [[Std SaveAs|Std SaveAs]]}}&lt;/nowiki&gt;

&lt;!--T:244--&gt;
{{KEY|[[File:Std SceneInspector.png|16px|Std SceneInspector|link=Std SceneInspector]] [[Std SceneInspector|Std SceneInspector]]}}

 &lt;!--T:245--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std SceneInspector.png|16px|Std SceneInspector|link=Std SceneInspector]] [[Std SceneInspector|Std SceneInspector]]}}&lt;/nowiki&gt;

&lt;!--T:246--&gt;
{{KEY|[[File:Std SelectAll.png|16px|Std SelectAll|link=Std SelectAll]] [[Std SelectAll|Std SelectAll]]}}

 &lt;!--T:247--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std SelectAll.png|16px|Std SelectAll|link=Std SelectAll]] [[Std SelectAll|Std SelectAll]]}}&lt;/nowiki&gt;

&lt;!--T:248--&gt;
{{KEY|[[File:Std SetAppearance.png|16px|Std SetAppearance|link=Std SetAppearance]] [[Std SetAppearance|Std SetAppearance]]}}

 &lt;!--T:249--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std SetAppearance.png|16px|Std SetAppearance|link=Std SetAppearance]] [[Std SetAppearance|Std SetAppearance]]}}&lt;/nowiki&gt;

&lt;!--T:250--&gt;
{{KEY|[[File:Std TipOfTheDay.png|16px|Std TipOfTheDay|link=Std TipOfTheDay]] [[Std TipOfTheDay|Std TipOfTheDay]]}}

 &lt;!--T:251--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std TipOfTheDay.png|16px|Std TipOfTheDay|link=Std TipOfTheDay]] [[Std TipOfTheDay|Std TipOfTheDay]]}}&lt;/nowiki&gt;

&lt;!--T:252--&gt;
{{KEY|[[File:Std ToggleVisibility.png|16px|Std ToggleVisibility|link=Std ToggleVisibility]] [[Std ToggleVisibility|Std ToggleVisibility]]}}

 &lt;!--T:253--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ToggleVisibility.png|16px|Std ToggleVisibility|link=Std ToggleVisibility]] [[Std ToggleVisibility|Std ToggleVisibility]]}}&lt;/nowiki&gt;

&lt;!--T:254--&gt;
{{KEY|[[File:Std TreeSelection.png|16px|Std TreeSelection|link=Std TreeSelection]] [[Std TreeSelection|Std TreeSelection]]}}

 &lt;!--T:255--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std TreeSelection.png|16px|Std TreeSelection|link=Std TreeSelection]] [[Std TreeSelection|Std TreeSelection]]}}&lt;/nowiki&gt;

&lt;!--T:256--&gt;
{{KEY|[[File:Std ViewBoxZoom.png|16px|Std ViewBoxZoom|link=Std ViewBoxZoom]] [[Std ViewBoxZoom|Std ViewBoxZoom]]}}

 &lt;!--T:257--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewBoxZoom.png|16px|Std ViewBoxZoom|link=Std ViewBoxZoom]] [[Std ViewBoxZoom|Std ViewBoxZoom]]}}&lt;/nowiki&gt;

&lt;!--T:258--&gt;
{{KEY|[[File:Std ViewCreate.png|16px|Std ViewCreate|link=Std ViewCreate]] [[Std ViewCreate|Std ViewCreate]]}}

 &lt;!--T:259--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewCreate.png|16px|Std ViewCreate|link=Std ViewCreate]] [[Std ViewCreate|Std ViewCreate]]}}&lt;/nowiki&gt;

&lt;!--T:260--&gt;
{{KEY|[[File:Std ViewDockUndockFullscreen.png|16px|Std ViewDockUndockFullscreen|link=Std ViewDockUndockFullscreen]] [[Std ViewDockUndockFullscreen|Std ViewDockUndockFullscreen]]}}

 &lt;!--T:261--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewDockUndockFullscreen.png|16px|Std ViewDockUndockFullscreen|link=Std ViewDockUndockFullscreen]] [[Std ViewDockUndockFullscreen|Std ViewDockUndockFullscreen]]}}&lt;/nowiki&gt;

&lt;!--T:262--&gt;
{{KEY|[[File:Std ViewExamples.png|16px|Std ViewExamples|link=Std ViewExamples]] [[Std ViewExamples|Std ViewExamples]]}}

 &lt;!--T:263--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewExamples.png|16px|Std ViewExamples|link=Std ViewExamples]] [[Std ViewExamples|Std ViewExamples]]}}&lt;/nowiki&gt;

&lt;!--T:264--&gt;
{{KEY|[[File:Std ViewFitAll.png|16px|Std ViewFitAll|link=Std ViewFitAll]] [[Std ViewFitAll|Std ViewFitAll]]}}

 &lt;!--T:265--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewFitAll.png|16px|Std ViewFitAll|link=Std ViewFitAll]] [[Std ViewFitAll|Std ViewFitAll]]}}&lt;/nowiki&gt;

&lt;!--T:266--&gt;
{{KEY|[[File:Std ViewFitSelection.png|16px|Std ViewFitSelection|link=Std ViewFitSelection]] [[Std ViewFitSelection|Std ViewFitSelection]]}}

 &lt;!--T:267--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewFitSelection.png|16px|Std ViewFitSelection|link=Std ViewFitSelection]] [[Std ViewFitSelection|Std ViewFitSelection]]}}&lt;/nowiki&gt;

&lt;!--T:268--&gt;
{{KEY|[[File:Std ViewIvIssueCamPos.png|16px|Std ViewIvIssueCamPos|link=Std ViewIvIssueCamPos]] [[Std ViewIvIssueCamPos|Std ViewIvIssueCamPos]]}}

 &lt;!--T:269--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewIvIssueCamPos.png|16px|Std ViewIvIssueCamPos|link=Std ViewIvIssueCamPos]] [[Std ViewIvIssueCamPos|Std ViewIvIssueCamPos]]}}&lt;/nowiki&gt;

&lt;!--T:270--&gt;
{{KEY|[[File:Std ViewIvStereo.png|16px|Std ViewIvStereo|link=Std ViewIvStereo]] [[Std ViewIvStereo|Std ViewIvStereo]]}}

 &lt;!--T:271--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewIvStereo.png|16px|Std ViewIvStereo|link=Std ViewIvStereo]] [[Std ViewIvStereo|Std ViewIvStereo]]}}&lt;/nowiki&gt;

&lt;!--T:272--&gt;
{{KEY|[[File:Std ViewScreenShot.png|16px|Std ViewScreenShot|link=Std ViewScreenShot]] [[Std ViewScreenShot|Std ViewScreenShot]]}}

 &lt;!--T:273--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewScreenShot.png|16px|Std ViewScreenShot|link=Std ViewScreenShot]] [[Std ViewScreenShot|Std ViewScreenShot]]}}&lt;/nowiki&gt;

&lt;!--T:274--&gt;
{{KEY|[[File:Std ViewXX.png|16px|Std ViewXX|link=Std ViewXX]] [[Std ViewXX|Std ViewXX]]}}

 &lt;!--T:275--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewXX.png|16px|Std ViewXX|link=Std ViewXX]] [[Std ViewXX|Std ViewXX]]}}&lt;/nowiki&gt;

&lt;!--T:276--&gt;
{{KEY|[[File:Std ViewZoom.png|16px|Std ViewZoom|link=Std ViewZoom]] [[Std ViewZoom|Std ViewZoom]]}}

 &lt;!--T:277--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std ViewZoom.png|16px|Std ViewZoom|link=Std ViewZoom]] [[Std ViewZoom|Std ViewZoom]]}}&lt;/nowiki&gt;

&lt;!--T:278--&gt;
{{KEY|[[File:Std WhatsThis.png|16px|Std WhatsThis|link=Std WhatsThis]] [[Std WhatsThis|Std WhatsThis]]}}

 &lt;!--T:279--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std WhatsThis.png|16px|Std WhatsThis|link=Std WhatsThis]] [[Std WhatsThis|Std WhatsThis]]}}&lt;/nowiki&gt;

&lt;!--T:280--&gt;
{{KEY|[[File:Std Workbench.png|16px|Std Workbench|link=Std Workbench]] [[Std Workbench|Std Workbench]]}}

 &lt;!--T:281--&gt;
&lt;nowiki&gt;{{KEY|[[File:Std Workbench.png|16px|Std Workbench|link=Std Workbench]] [[Std Workbench|Std Workbench]]}}&lt;/nowiki&gt;

&lt;!--T:282--&gt;
&lt;noinclude&gt;[[Category:Developer Documentation]] [[Category:Icon]] [[Category:Help]]&lt;/noinclude&gt;

{{clear}}
&lt;noinclude&gt;&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Std Macro Menu</title>
    <ns>0</ns>
    <id>9971</id>
    <revision>
      <id>105110</id>
      <parentid>48534</parentid>
      <timestamp>2014-08-18T19:42:07Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>qtqy6arapmaz1y122bivt6adqx55l1j</sha1>
      <text xml:space="preserve" bytes="869">__NOTOC__
&lt;!-- ==The Macro Menu== --&gt;

&lt;!--T:1--&gt;
{{StdMenu|Macro}}


&lt;!--T:2--&gt;
[[Std_DlgMacroRecord|Macro recording]] opens a dialog for recording a new macro.

&lt;!--T:3--&gt;
[[Std_DlgMacroStop|Stop macro recording]] ends the current macro recording session.

&lt;!--T:4--&gt;
[[Std_DlgMacroExecute|Macros...]] select and execute a stored macro.

&lt;!--T:5--&gt;
[[Std_DlgMacroExecuteDirect|Execute macro]] executes the macro currently in the macro editor.

&lt;!--T:6--&gt;
[[Std_DebugMacro|Debug macro]] starts debug session for the macro currently in the macro editor.

&lt;!--T:7--&gt;
[[Std_DebugStop|Stop debugging]] ends the debugging session.

&lt;!--T:8--&gt;
[[Std_DebugOver|Step over]] 

&lt;!--T:9--&gt;
[[Std_DebugInto|Step into]]

&lt;!--T:10--&gt;
[[Std_DebugToggle|Toggle breakpoint]]


&lt;!--T:11--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]



</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureAngular</title>
    <ns>0</ns>
    <id>39322</id>
    <revision>
      <id>105320</id>
      <parentid>105319</parentid>
      <timestamp>2014-08-19T20:12:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sy1bct7hs7blydkokx056xmj8wxtede</sha1>
      <text xml:space="preserve" bytes="379">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureAngular|MenuLocation=[[Std Measure Menu|Measure]] → Measure Angular‏‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


===Measure Angular=== &lt;!--T:3--&gt;

&lt;!--T:5--&gt;
[[File:MeasureAngular1.PNG]]


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureClearAll</title>
    <ns>0</ns>
    <id>39323</id>
    <revision>
      <id>104790</id>
      <parentid>104780</parentid>
      <timestamp>2014-08-15T21:33:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sbt9mt6l2bbn7y1fcq3uvkul1syq5fp</sha1>
      <text xml:space="preserve" bytes="313">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureClearAll|MenuLocation=[[Std Measure Menu|Measure]] → Clear All‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureDistance</title>
    <ns>0</ns>
    <id>145</id>
    <revision>
      <id>101523</id>
      <parentid>101522</parentid>
      <timestamp>2014-08-01T19:51:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>teml3tev514jxtawflmlhy3eu747eeo</sha1>
      <text xml:space="preserve" bytes="289">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Std MeasureDistance|MenuLocation=[[Std View Menu|View]] → Measure distance‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:2--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureLinear</title>
    <ns>0</ns>
    <id>39321</id>
    <revision>
      <id>105312</id>
      <parentid>105311</parentid>
      <timestamp>2014-08-19T20:09:11Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>kst4bopg7gu786k39svzpmmjk818wx2</sha1>
      <text xml:space="preserve" bytes="485">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureLinear|MenuLocation=[[Std Measure Menu|Measure]] → Measure Linear‏‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


===Measure Linear 3D=== &lt;!--T:3--&gt;

&lt;!--T:5--&gt;
[[File:MeasureLinear3D1.png|left]]{{Clear}}



===Measure Linear Delta=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[[File:MeasureLinearDelta1.PNG|left]]


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureToggle3D</title>
    <ns>0</ns>
    <id>39325</id>
    <revision>
      <id>104798</id>
      <parentid>104782</parentid>
      <timestamp>2014-08-15T21:33:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>spj8yh7pj0ombl6rv1c7nmnwfs2btdg</sha1>
      <text xml:space="preserve" bytes="316">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureToggle3D|MenuLocation=[[Std Measure Menu|Measure]] → Toggle 3D‏‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureToggleAll</title>
    <ns>0</ns>
    <id>39324</id>
    <revision>
      <id>105328</id>
      <parentid>105327</parentid>
      <timestamp>2014-08-19T20:18:28Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>oiobor301ee866zjfl4ks10ykb8q56q</sha1>
      <text xml:space="preserve" bytes="385">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureToggleAll|MenuLocation=[[Std Measure Menu|Measure]] → Toggle All‏‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


===Toggle Measure=== &lt;!--T:3--&gt;

&lt;!--T:5--&gt;
[[File:MeasureLinear3DandDelta1.PNG]] 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std MeasureToggleDelta</title>
    <ns>0</ns>
    <id>39326</id>
    <revision>
      <id>104807</id>
      <parentid>104783</parentid>
      <timestamp>2014-08-15T21:34:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>axfctb51r9mtn5p4uvntiagiowxdqus</sha1>
      <text xml:space="preserve" bytes="322">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MeasureToggleDelta|MenuLocation=[[Std Measure Menu|Measure]] → Toggle Delta‏‎||Workbenches=[[Part Module|Part]]|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Measure Menu</title>
    <ns>0</ns>
    <id>39290</id>
    <revision>
      <id>105334</id>
      <parentid>105333</parentid>
      <timestamp>2014-08-19T20:29:32Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>63r4kqsum2jfn8vb6g5dws1er0ps792</sha1>
      <text xml:space="preserve" bytes="1024">__NOTOC__


&lt;!--T:2--&gt;
{{StdMenu| Measure}}

&lt;!--T:11--&gt;
Do not confuse this menu with the tool [[File:Measure.svg|32px]] [[Std_MeasureDistance|Distance]]

&lt;!--T:3--&gt;
[[File:Std MeasureLinear.png|16px]] [[Std MeasureLinear|Measure Linear]] allows you to make linear measurements


&lt;!--T:4--&gt;
[[File:Std MeasureAngular.png|16px]] [[Std MeasureAngular|Measure Angular]] allows you to make angular measurements


&lt;!--T:5--&gt;
[[File:Std MeasureClearAll.png|16px]] [[Std MeasureClearAll|Clear All]] deletes all measures


&lt;!--T:6--&gt;
[[File:Std MeasureToggleAll.png|16px]] [[Std MeasureToggleAll|Toggle All]] shows or hides all measures


&lt;!--T:7--&gt;
[[File:Std MeasureToggle3D.png|16px]] [[Std MeasureToggle3D|Toggle 3D]] shows or hides 3D measurements


&lt;!--T:8--&gt;
[[File:Std MeasureToggleDelta.png|16px]] [[Std MeasureToggleDelta|Toggle Delta]] shows or hides Delta measurements


&lt;!--T:9--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]

&lt;!--T:10--&gt;
[[Category:UnfinishedDocu]]



</text>
    </revision>
  </page>
  <page>
    <title>Std MergeProject</title>
    <ns>0</ns>
    <id>4221</id>
    <revision>
      <id>99717</id>
      <parentid>99716</parentid>
      <timestamp>2014-07-28T17:31:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mmyce0c6xp6jh68dlgj0g2k5mnv5amb</sha1>
      <text xml:space="preserve" bytes="288">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std MergeProject|Workbenches=All|MenuLocation=[[Std File Menu|File]] → Merge project |Shortcut=|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std New</title>
    <ns>0</ns>
    <id>146</id>
    <revision>
      <id>105170</id>
      <parentid>79918</parentid>
      <timestamp>2014-08-18T20:16:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>fbrc84cbdpw7c0qpwzkjgkm6zfxtm8v</sha1>
      <text xml:space="preserve" bytes="420">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std New|MenuLocation=[[Std_File_Menu|File]] → New|Workbenches=All|Shortcut=Ctrl+N|SeeAlso=[[Std Open]],[[Std Import]]}}


&lt;!--T:2--&gt;
Creates a new empty document. FreeCAD can also be configured to create automatically a new empty document on startup, by checking the appropriate setting in Edit → Preferences → General → Document tab.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std OnlineHelp</title>
    <ns>0</ns>
    <id>147</id>
    <revision>
      <id>101253</id>
      <parentid>101252</parentid>
      <timestamp>2014-08-01T10:33:46Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2f5omdyrfzqgll8w3aeddvt2smh84qz</sha1>
      <text xml:space="preserve" bytes="289">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std OnlineHelp|MenuLocation=[[Std Help|Help]] → FreeCAD Website‏‎||Workbenches=All|Shortcut=|SeeAlso=}}



&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std OnlineHelpPython</title>
    <ns>0</ns>
    <id>148</id>
    <revision>
      <id>101985</id>
      <parentid>101984</parentid>
      <timestamp>2014-08-02T15:26:16Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bp9gcxndm6y1ss0e3fhganxseo2cdmh</sha1>
      <text xml:space="preserve" bytes="309">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std OnlineHelpPython|MenuLocation=[[Std Help Menu|Help]] → Online-help → Python Website||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std OnlineHelpWebsite</title>
    <ns>0</ns>
    <id>149</id>
    <revision>
      <id>102005</id>
      <parentid>1096</parentid>
      <timestamp>2014-08-02T15:35:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>nv4ws9cedgtbp7a1dv4oziquainnjmm</sha1>
      <text xml:space="preserve" bytes="311">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std OnlineHelpWebsite|MenuLocation=[[Std Help Menu|Help]] → Online-help → FreeCAD Website||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Open</title>
    <ns>0</ns>
    <id>150</id>
    <revision>
      <id>105173</id>
      <parentid>79884</parentid>
      <timestamp>2014-08-18T20:17:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>an6x6ugvln1yqn614zvg3ep5cfdm6t9</sha1>
      <text xml:space="preserve" bytes="1008">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Open|MenuLocation=[[Std_File_Menu|File]] → Open|Workbenches=All|Shortcut=Ctrl+O|SeeAlso=[[Std Save]],[[Std Import]]}}

&lt;!--T:2--&gt;
Opens and loads project files into FreeCAD's workspace and depending on the installed extension modules further file types are supported such as [http://en.wikipedia.org/wiki/IGES *.IGES], [http://en.wikipedia.org/wiki/Step_file *.STEP], [http://en.wikipedia.org/wiki/BREP *.BREP], [http://en.wikipedia.org/wiki/STL_%28file_format%29 *.STL], [http://en.wikipedia.org/wiki/Wavefront_.obj_file *.OBJ], [http://en.wikipedia.org/wiki/PLY_%28file_format%29 *.PLY], etc.

&lt;!--T:3--&gt;
When loading files always a new document gets created. If you want to load a file into an existing document use the [[Std_Import]] instead.

&lt;!--T:4--&gt;
FreeCAD project files have the extension &quot;FCStd&quot;. To get more information about the internal layout of FreeCAD projects files read the article [[File Format FCStd]].


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std OrthographicCamera</title>
    <ns>0</ns>
    <id>151</id>
    <revision>
      <id>105196</id>
      <parentid>101722</parentid>
      <timestamp>2014-08-18T20:31:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>e7e16hur4bfu3t9cj62jt1pn5g22m2t</sha1>
      <text xml:space="preserve" bytes="341">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std OrthographicCamera|MenuLocation=[[Std View Menu|View]] → Orthographic view||Workbenches=All|Shortcut=O|SeeAlso=[[Std PerspectiveCamera|Perspective View]]}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Paste</title>
    <ns>0</ns>
    <id>152</id>
    <revision>
      <id>89322</id>
      <parentid>89321</parentid>
      <timestamp>2014-06-01T08:12:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>sw9j5qbkdp8w6brkm0p2wmvo346umtv</sha1>
      <text xml:space="preserve" bytes="1004">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std_Paste|Name=Std_Paste|MenuLocation=Edit → Paste|Shortcut=Ctrl+V|Workbenches=All|SeeAlso=[[Std_Copy|Copy]], [[Std_DuplicateSelection|Duplicate Selection]]}}

==Description== &lt;!--T:2--&gt;
The Paste command is involved in replicating [[Document_structure|Document]] objects.  It places the current &quot;clipboard&quot; contents into the current document.  Objects may be copy/pasted between Documents.

==How to use== &lt;!--T:3--&gt;
# Make the target Document active by clicking on it in the Project tab or Document window.
# Press the {{KEY|[[File:Std Paste.png|16px|Paste]]}} icon, {{KEY|ctrl}} + {{KEY|V}} keys or use menu choices Edit → Paste.

==Limitations== &lt;!--T:4--&gt;
* In general, it is not possible to paste FreeCAD objects into other applications, or paste objects from other applications into a FreeCAD document.

==More== &lt;!--T:5--&gt;
* See the [[Copying_Objects|Copying objects]] page for more details on replicating objects.


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std PerspectiveCamera</title>
    <ns>0</ns>
    <id>153</id>
    <revision>
      <id>105199</id>
      <parentid>101738</parentid>
      <timestamp>2014-08-18T20:31:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>gsrqw5wheknwimkr5mr94s0ey9acx9q</sha1>
      <text xml:space="preserve" bytes="347">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std PerspectiveCamera|MenuLocation=[[Std View Menu|View]] → Perspective view‏‎||Workbenches=All|Shortcut=P|SeeAlso=[[Std OrthographicCamera|Orthographic view]]}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Placement</title>
    <ns>0</ns>
    <id>38693</id>
    <revision>
      <id>102845</id>
      <parentid>102844</parentid>
      <timestamp>2014-08-03T21:20:12Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>2trpkjobkj6ahfpckqcye5y1vjphynh</sha1>
      <text xml:space="preserve" bytes="728">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Placement|MenuLocation=[[Std Edit Menu|Edit]] → Placement...‏‎||Workbenches=All|Shortcut=|SeeAlso=[[Tasks Placement|Tasks Placement]], [[Placement|Placement]]}}


&lt;!--T:3--&gt;
ToDo

&lt;!--T:4--&gt;
'''Placement''' is how FreeCAD specifies the location and attitude (orientation) of an object in space.  Placement can be specified in multiple forms and manipulated via [[Python_scripting_tutorial#Vectors_and_Placements|scripting]], the Properties panel or the '''Edit → Placement...''' dialog.
See [[Tasks Placement|Tasks Placement]] and [[Placement|Placement]]


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Print</title>
    <ns>0</ns>
    <id>154</id>
    <revision>
      <id>99822</id>
      <parentid>99821</parentid>
      <timestamp>2014-07-28T19:13:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>t0f5kxybhkgn9qamclaxoj8zp5sd3c1</sha1>
      <text xml:space="preserve" bytes="318">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Print|MenuLocation=[[Std_File_Menu|File]] → Print...|Workbenches=All|Shortcut=Ctrl+P|SeeAlso=[[Std_PrintPreview|Print Preview...]]}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std PrintPdf</title>
    <ns>0</ns>
    <id>155</id>
    <revision>
      <id>99676</id>
      <parentid>99675</parentid>
      <timestamp>2014-07-28T16:59:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>hnayttlooyduupyukz7ubjsyiirf8au</sha1>
      <text xml:space="preserve" bytes="302">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std PrintPdf|Workbenches=All|MenuLocation=[[Std File Menu|File]] → PrintPdf |Shortcut=|SeeAlso=File [[Std_Export|Export]]}}

&lt;!--T:4--&gt;
ToDo. 

&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std PrintPreview</title>
    <ns>0</ns>
    <id>4227</id>
    <revision>
      <id>99774</id>
      <parentid>99773</parentid>
      <timestamp>2014-07-28T18:43:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>h36vk33oic5wi1r8o50mh7anuitx9hq</sha1>
      <text xml:space="preserve" bytes="373">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std PrintPreview|Workbenches=All|MenuLocation=[[Std File Menu|File]] → Print Preview |Shortcut=Ctrl+P|SeeAlso=File [[Std Print|Print]]}}


&lt;!--T:3--&gt;
ToDo.

&lt;!--T:4--&gt;
[[Image:PrintPreview1.png|left]]
{{clear}}



&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ProjectInfo</title>
    <ns>0</ns>
    <id>156</id>
    <revision>
      <id>102874</id>
      <parentid>102873</parentid>
      <timestamp>2014-08-03T21:39:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>aae9f77d3vryw5qvyud6fml1giaacps</sha1>
      <text xml:space="preserve" bytes="463">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ProjectInfo|MenuLocation=[[Std File Menu|File]] → Project Info||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo

&lt;!--T:4--&gt;
Provides information on the project: name, author, etc., and allows you to add a comment to the project through the following window:
[[Image:InfoProject1.png|left]]

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std PythonConsole</title>
    <ns>0</ns>
    <id>38666</id>
    <revision>
      <id>102802</id>
      <parentid>102801</parentid>
      <timestamp>2014-08-03T17:28:35Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>rl6m24gopq9x371h0yq2jgumple6ers</sha1>
      <text xml:space="preserve" bytes="314">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std PythonConsole|MenuLocation=[[Std View Menu|View]] → Views → Python console|Workbenches=All|SeeAlso=}}

==Description== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
ToDo


&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std PythonWebsite</title>
    <ns>0</ns>
    <id>157</id>
    <revision>
      <id>102154</id>
      <parentid>1114</parentid>
      <timestamp>2014-08-02T17:27:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>spqoci8uohgb936blyqf4w2fyy49rt7</sha1>
      <text xml:space="preserve" bytes="285">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}
 
{{GuiCommand|Name=Std PythonWebsite|MenuLocation=[[Std Help Menu|Help]] → Python Website‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo



&lt;!--T:2--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Quit</title>
    <ns>0</ns>
    <id>158</id>
    <revision>
      <id>100660</id>
      <parentid>100646</parentid>
      <timestamp>2014-07-30T20:47:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>sorjc9e6tu56llsbnqmk1fzaxshrnrb</sha1>
      <text xml:space="preserve" bytes="72">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
replaced by Std Exit</text>
    </revision>
  </page>
  <page>
    <title>Std RecentFiles</title>
    <ns>0</ns>
    <id>159</id>
    <revision>
      <id>101787</id>
      <parentid>101786</parentid>
      <timestamp>2014-08-02T10:42:44Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>e5m3snv8jygcj6wlesps38j7gj079a6</sha1>
      <text xml:space="preserve" bytes="286">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std RecentFiles|MenuLocation=[[Std File Menu|File]] → Recent files||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Redo</title>
    <ns>0</ns>
    <id>160</id>
    <revision>
      <id>105192</id>
      <parentid>103092</parentid>
      <timestamp>2014-08-18T20:27:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>9ma67h71u8dbrsminyppb94m2zd8gtq</sha1>
      <text xml:space="preserve" bytes="307">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Redo|MenuLocation=[[Std View Menu|View]] → Redo‏‎||Workbenches=All|Shortcut=Maiusc+Ctrl+Z|SeeAlso=[[Std_Undo|Undo]]}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Refresh</title>
    <ns>0</ns>
    <id>11082</id>
    <revision>
      <id>102217</id>
      <parentid>101810</parentid>
      <timestamp>2014-08-02T18:42:34Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>pdcg9f41iywycrpsx56ez9bcpd0txur</sha1>
      <text xml:space="preserve" bytes="290">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std_Refresh|MenuLocation=[[Std_Edit_Menu|Edit]] → Refresh|Workbenches=All|Shortcut=F5 or Ctrl+R|SeeAlso=...}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std RotateLeft</title>
    <ns>0</ns>
    <id>4238</id>
    <revision>
      <id>16638</id>
      <timestamp>2013-01-27T09:39:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Std_RotateLeft en</comment>
      <sha1>pdadujhcgufd28yie9ug458yuu7bvw8</sha1>
      <text xml:space="preserve" bytes="166">{{GuiCommand|Name=Std_RotateLeft|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}











{{languages | {{it|Std_RotateLeft/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std RotateRight</title>
    <ns>0</ns>
    <id>4237</id>
    <revision>
      <id>16637</id>
      <timestamp>2013-01-27T09:36:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Std_RotateRight en</comment>
      <sha1>3ahu5svyx5q2ejftae3wspwcvhdo2rw</sha1>
      <text xml:space="preserve" bytes="166">{{GuiCommand|Name=Std_RotateRight|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}









{{languages | {{it|Std_RotateRight/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std Save</title>
    <ns>0</ns>
    <id>4211</id>
    <revision>
      <id>93906</id>
      <parentid>80060</parentid>
      <timestamp>2014-07-02T12:20:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>4ki0na9syh537hrefb0i2ui0owd9c1r</sha1>
      <text xml:space="preserve" bytes="1353">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std Save|MenuLocation=[[Std_File_Menu|File]] → Save|Workbenches=All|Shortcut=Crtl+S|SeeAlso=[[Std_SaveAs|Save as...]]}}

&lt;!--T:2--&gt;
The {{KEY|Save}} command stores the active document of the current project to a file. If there are other documents in the project, they are not saved.

&lt;!--T:3--&gt;
The first time a document is saved, a dialog to define the path and file name will appear.


&lt;!--T:4--&gt;
[[Image:FileSaveAs.png|left]]
{{clear}}


&lt;!--T:5--&gt;
The name assigned to the document to save it also becomes the name used for the root in the document tree structure.

&lt;!--T:6--&gt;
Subsequent {{KEY|Save}} commands automatically use the path and file name defined in the first save. To save the file in a 
different location, or assign to it a new name, you must use the Save As command.

&lt;!--T:7--&gt;
When you try to close a modified document, or exit FreeCAD with modified documents in use, you will receive a warning:

&lt;!--T:8--&gt;
[[Image:UnsavedDocument.png|left]]
{{clear}}


&lt;!--T:9--&gt;
You can define a default location for opening and saving files using the menu Tools → Edit Parameters → BaseApp →  Preferences → General → FileOpenSavePath.

&lt;!--T:10--&gt;
[[Image:FileOpenSavePath.png|left]]

&lt;!--T:11--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std SaveAs</title>
    <ns>0</ns>
    <id>161</id>
    <revision>
      <id>105186</id>
      <parentid>100044</parentid>
      <timestamp>2014-08-18T20:23:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>im3makpan20qvu64o7o6tn2lkw3jzrt</sha1>
      <text xml:space="preserve" bytes="307">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std SaveAs|MenuLocation=[[Std_File_Menu|File]] → Save as...|Workbenches=All|Shortcut=Maius+Crtl+S|SeeAlso=[[Std_Save|Save]]}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std SceneInspector</title>
    <ns>0</ns>
    <id>162</id>
    <revision>
      <id>101338</id>
      <parentid>100487</parentid>
      <timestamp>2014-08-01T18:21:51Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>as6f5erxkwzt5m51rgke4qmnmuynw1x</sha1>
      <text xml:space="preserve" bytes="302">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std SceneInspector|MenuLocation=[[Std Tools Menu|Tools]] → Scene inspector‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo.



&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std SelectAll</title>
    <ns>0</ns>
    <id>163</id>
    <revision>
      <id>100414</id>
      <parentid>100413</parentid>
      <timestamp>2014-07-29T21:34:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1dz82ui3qrq2e8vvaoegi95gjpksbws</sha1>
      <text xml:space="preserve" bytes="286">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std SelectAll|MenuLocation=[[Std Edit Menu|Edit]] → Select All|Workbenches=All|Shortcut=...|SeeAlso=...}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std SetAppearance</title>
    <ns>0</ns>
    <id>164</id>
    <revision>
      <id>103278</id>
      <parentid>101416</parentid>
      <timestamp>2014-08-04T20:40:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>8xpufh7esm83jj25loslt3epytha85r</sha1>
      <text xml:space="preserve" bytes="316">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std SetAppearance|MenuLocation=[[Std View Menu|View]] → Set Appearance|Workbenches=All|Shortcut=|SeeAlso=[[Std SetColors|Set Colors]]}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std SetColors</title>
    <ns>0</ns>
    <id>30400</id>
    <revision>
      <id>102452</id>
      <parentid>102451</parentid>
      <timestamp>2014-08-02T20:38:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>9cbqe7xz4djk0w9ec15licqelr7o79m</sha1>
      <text xml:space="preserve" bytes="944">
&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

==Change the color of the faces== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
This feature allows you to define a color for each face or surface of an object.
[[Image:Std_SetColors1_it.png|right|Avvio della funzione]]
In the tree view:
* 
* 
* 
{{clear}}
In '''Set colors per face''':
[[Image:Std_SetColors2_it.png|right|Finestra Imposta colore per faccia]]
* 
Nella finestra viene mostrato il numero della faccia.
* Cliccare sul rettangolo sottostante (campione di colore) per visualizzare lo spettro dei colori.
* Selezionare il colore desiderato.
* Procedere eventualmente per altre facce e poi conferemare.
{{clear}}
Per ripristinare i colori di defualt usare il pulsante '''Imposta al valore predefinito''' oppure '''Shape color''' della scheda '''Vista'''

&lt;!--T:4--&gt;
[[Category:User Documentation]]
[[Category:Command_Reference]]

&lt;!--T:5--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std TipOfTheDay</title>
    <ns>0</ns>
    <id>165</id>
    <revision>
      <id>1133</id>
      <parentid>1132</parentid>
      <timestamp>2009-02-02T13:09:55Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>qc066y7pjpgnbjv1d4idljahn967ugq</sha1>
      <text xml:space="preserve" bytes="114">{{GuiCommand|Name=Std_TipOfTheDay|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Std ToggleClipPlane</title>
    <ns>0</ns>
    <id>166</id>
    <revision>
      <id>107806</id>
      <parentid>95464</parentid>
      <timestamp>2014-08-30T19:31:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>5r2nopt6682uy1rydcsgborj3v5qsmi</sha1>
      <text xml:space="preserve" bytes="60">
replaced by Std ClippingPlane

[[Category:Pages_to_delete]]</text>
    </revision>
  </page>
  <page>
    <title>Std ToggleVisibility</title>
    <ns>0</ns>
    <id>167</id>
    <revision>
      <id>101419</id>
      <parentid>101290</parentid>
      <timestamp>2014-08-01T18:29:20Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>lfk5imuk307zzscssxzp9tt2z34zr0u</sha1>
      <text xml:space="preserve" bytes="320">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ToggleVisibility|MenuLocation=[[Std View Menu|View]] → Visibility → Select Option ‏‎||Workbenches=All|Shortcut=Space|SeeAlso=}}


&lt;!--T:4--&gt;
ToDo



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ToggleVisibilityAll</title>
    <ns>0</ns>
    <id>11076</id>
    <revision>
      <id>42164</id>
      <timestamp>2013-10-27T11:04:33Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>UnfinishedDocu</comment>
      <sha1>5f5g0wvb3sjpbdc6i7lpoe1copmnlkg</sha1>
      <text xml:space="preserve" bytes="251">
{{GuiCommand|Name=Std_ToggleVisibilityAll|MenuLocation=View → Visibility|Workbenches=All|Shortcut=...|SeeAlso=[[Std_ToggleVisibility|Toggle visibility]]}}

{{Template:UnfinishedDocu}}
  

{{clear}}
{{languages | {{it|Std_ToggleVisibilityAll/it}} }}</text>
    </revision>
  </page>
  <page>
    <title>Std Tools Menu</title>
    <ns>0</ns>
    <id>11069</id>
    <revision>
      <id>105105</id>
      <parentid>101310</parentid>
      <timestamp>2014-08-18T19:40:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>rcyhoy81bc8uqotf2eihm2j8jqiqbkv</sha1>
      <text xml:space="preserve" bytes="1047">


&lt;!--T:5--&gt;
{{StdMenu|Tools}}


&lt;!--T:6--&gt;
[[Std DlgParameter|Edit parameters]] allows many of the settings that control FreeCAD to be changed. It does not set parameters for a model.

&lt;!--T:3--&gt;
[[Std ViewScreenShot|Save picture]] takes a snapshot of the current 3D window.

&lt;!--T:7--&gt;
[[Std SceneInspector|Scene inspector]] displays details of the Open Inventor representation of the 3D window.

&lt;!--T:8--&gt;
[[Std_DependencyGraph|Dependency graph]] shows how the various features in a model are related.

&lt;!--T:9--&gt;
[[Project_utility|Project utility]] assists in repairing damaged project files.

&lt;!--T:10--&gt;
[[Spinning|View turntable]] displays a rotating view of model in the 3D window.

&lt;!--T:11--&gt;
[[Std UnitsCalculator|Units Calculator]] provides quick conversions between measurement systems, ex mm to inches.

&lt;!--T:4--&gt;
[[Interface Customization|Customize]] allows menus, shortcut keys and toolbars to be modified.

&lt;!--T:2--&gt;
[[Category:User Documentation]]
[[Category:Command_Reference]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std TreeSelection</title>
    <ns>0</ns>
    <id>168</id>
    <revision>
      <id>103296</id>
      <parentid>1139</parentid>
      <timestamp>2014-08-05T19:58:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>jpv7hlrxn03b4yleb6fg06ivikf22vp</sha1>
      <text xml:space="preserve" bytes="38">not used


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Std Undo</title>
    <ns>0</ns>
    <id>169</id>
    <revision>
      <id>103120</id>
      <parentid>103119</parentid>
      <timestamp>2014-08-04T18:14:08Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>oc6wxjaspcdrbw4usadoyss8t3sdoub</sha1>
      <text xml:space="preserve" bytes="295">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Undo|MenuLocation=[[Std_Edit_Menu|Edit]] → Annulla|Workbenches=All|Shortcut=Ctrl+Z|SeeAlso=[[Std Redo|Redo]]}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std UnitsCalculator</title>
    <ns>0</ns>
    <id>11304</id>
    <revision>
      <id>65717</id>
      <parentid>65716</parentid>
      <timestamp>2014-02-11T21:24:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>c9ytq90xqln7613mq7f6zq7o8d2fbdt</sha1>
      <text xml:space="preserve" bytes="1243">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std_UnitsCalculator|MenuLocation=Tools -&gt; Unit calculator...|Workbenches=All|SeeAlso=...}}

&lt;!--T:2--&gt;
Opens the unit calculator dialog, which allow to transform Quantities into different units.

==== Synopsis ==== &lt;!--T:3--&gt;
The first field defines a value and a corresponding unit (what kind of units get recognized you can see in the [[Quantity]] description). In the second field you specify the resulting unit. The third field present the result. Pressing return in field one or two will add the result of the calculation to the log area for later usage.

&lt;!--T:4--&gt;
If one of the fields get red in the background means an error occourd. Either the parser gets and error in the unit expression or the source and target unit do not fit. Hovering over an red input field shows you the error string. 

&lt;!--T:5--&gt;
The Copy button copies the result into the Clipboard, so you can use it in any other dialog of FreeCAD. 

&lt;!--T:6--&gt;
The dialog is a non-modal dialog and can stay open as long as you want. It do not block the rest of FreeCAD.

==== Dialog ==== &lt;!--T:7--&gt;
[[File:Units_Calculator_it.png]]

&lt;!--T:8--&gt;
The Dialog with the three fields and the log area. 
{{clear}}

</text>
    </revision>
  </page>
  <page>
    <title>Std ViewBoxZoom</title>
    <ns>0</ns>
    <id>170</id>
    <revision>
      <id>101420</id>
      <parentid>99848</parentid>
      <timestamp>2014-08-01T18:30:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>rj41z0nx0ppp349plmscz92ac3orzg6</sha1>
      <text xml:space="preserve" bytes="279">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewBoxZoom|Workbenches=All|MenuLocation=[[Std View Menu|View]] → Zoom |Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewCreate</title>
    <ns>0</ns>
    <id>171</id>
    <revision>
      <id>101852</id>
      <parentid>101851</parentid>
      <timestamp>2014-08-02T11:45:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1qtr9ne93yvi38o0ho9ivkngmd6mgea</sha1>
      <text xml:space="preserve" bytes="294">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewCreate|MenuLocation=[[Std View Menu|View]] → Create new view‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewDockUndockFullscreen</title>
    <ns>0</ns>
    <id>172</id>
    <revision>
      <id>105909</id>
      <parentid>105908</parentid>
      <timestamp>2014-08-22T20:58:41Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8zqft2rsoombn1h268xc0wu9gjndesi</sha1>
      <text xml:space="preserve" bytes="307">
&lt;!--T:5--&gt;
{{Template:UnfinishedDocu}}



&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewDockUndockFullscreen|MenuLocation=[[Std View Menu|View]] → Document window‏‎||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewExamples</title>
    <ns>0</ns>
    <id>173</id>
    <revision>
      <id>1149</id>
      <parentid>1148</parentid>
      <timestamp>2009-02-02T13:09:55Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>bu0k5rvx1izlelh89e69fs5es4eyywo</sha1>
      <text xml:space="preserve" bytes="115">{{GuiCommand|Name=Std_ViewExamples|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Std ViewFitAll</title>
    <ns>0</ns>
    <id>174</id>
    <revision>
      <id>102283</id>
      <parentid>102282</parentid>
      <timestamp>2014-08-02T19:09:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>bumabizxpfuclo4y3qfx2bn2plrlp31</sha1>
      <text xml:space="preserve" bytes="342">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewFitAll|MenuLocation=[[Std View Menu|View]] → Standard views‏‎ → FitAll||Workbenches=All|Shortcut=|SeeAlso=[[Std_ViewFitSelection|Fit Selection]]}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewFitSelection</title>
    <ns>0</ns>
    <id>175</id>
    <revision>
      <id>101423</id>
      <parentid>100026</parentid>
      <timestamp>2014-08-01T18:30:47Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>nuibjqus7wyrtche6cpzb4ikqlb7tu6</sha1>
      <text xml:space="preserve" bytes="290">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewFitSelection|MenuLocation=[[Std View Menu|View]] → Fit Selection|Workbenches=All|Shortcut=|SeeAlso=}}

&lt;!--T:3--&gt;
ToDo. 


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewIvIssueCamPos</title>
    <ns>0</ns>
    <id>176</id>
    <revision>
      <id>102312</id>
      <parentid>102311</parentid>
      <timestamp>2014-08-02T19:21:53Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>nkkfcgpb30fb3mzyio45sdvw9zopk1r</sha1>
      <text xml:space="preserve" bytes="312">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewIvIssueCamPos|MenuLocation=[[Std View Menu|View]] → Stereo → Issue camera position||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewIvStereo</title>
    <ns>0</ns>
    <id>177</id>
    <revision>
      <id>103208</id>
      <parentid>103207</parentid>
      <timestamp>2014-08-04T19:05:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>qsfstz2nnhb4s8spuoy93snxc8rxa3n</sha1>
      <text xml:space="preserve" bytes="298">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewIvStereo|MenuLocation=[[Std View Menu|View]] → Stereo‏‎ → option||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewScreenShot</title>
    <ns>0</ns>
    <id>178</id>
    <revision>
      <id>101342</id>
      <parentid>100514</parentid>
      <timestamp>2014-08-01T18:22:30Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>lh0cfojkc7ddopjbl1va1lgopq47ycd</sha1>
      <text xml:space="preserve" bytes="3093">
&lt;!--T:1--&gt;
{{GuiCommand|Name=Std ViewScreenShot|MenuLocation=[[Std Tools Menu|Tools]] → Save picture...|Workbenches=All|SeeAlso=...}}


==== Synopsis ==== &lt;!--T:2--&gt;
This command opens a dialog to save the current content of the 3D view to 
a file. It can save to various image formats. Additionally, you can change the 
aspect ratio and the resolution of the screen shot using the &quot;Options&quot;
button to get access to more parameters. 

&lt;!--T:3--&gt;
This command can also use the image comment field of some image formats, like PNG or JPEG
to save [[MIBA]] information along with the picture.


==== Image formats ==== &lt;!--T:4--&gt;
FreeCAD uses the QT built-in image types and some QT plugins in the bin/imageformats directory
to save pictures. So how many and what formats you can choose depends on your platform.
 
==== Dialog ====

&lt;!--T:5--&gt;
[[Image:Save_picture.png|550px]]


===== Image Size ===== &lt;!--T:6--&gt;
The image size parameters are set to the screen size of the active 3D view. But you can change it to any value you like. Some OpenGL drivers don't allow renderings greater then 8000 pixels. It depends on your system.

&lt;!--T:7--&gt;
With the four buttons you can change the aspect to a certain value.

===== Image background ===== &lt;!--T:8--&gt;
With this combo box you can choose the background of the picture you make.
* '''Current''' use the current view background (as chosen in the preferences)
* '''White''' creates a plain white background (for e.g. printings)
* '''Black''' plain black background
* '''Transparent''' creates a transparent background on image formats which support transparency

===== Comment ===== &lt;!--T:9--&gt;
Some image formats can transport a comment along the picture. In case you choose one of this formats you can insert a comment or use the comment field for the [[MIBA]] information.

==== Scripting ==== &lt;!--T:10--&gt;
It's also possible to save the screen by python:

&lt;syntaxhighlight&gt;
 Gui.ActiveDocument.ActiveView.saveImage('C:/temp/test.png',1656,783,'Current')
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
This script makes a series of pictures of different sizes and from different
points of view. The type of the camera, i.e. orthographic or perspective can also be changed. 

&lt;syntaxhighlight&gt;
 import Part,PartGui
 # loading test part
 Part.open(&quot;C:/Documents and Settings/jriegel/My Documents/Projects/FreeCAD/data/Blade.stp&quot;)
 OutDir = 'c:/temp/'
 
 # creating images with different Views, Cameras and sizes
 for p in [&quot;PerspectiveCamera&quot;,&quot;OrthographicCamera&quot;]:
   Gui.SendMsgToActiveView(p)
   for f in [&quot;ViewAxo&quot;,&quot;ViewFront&quot;,&quot;ViewTop&quot;]:
     Gui.SendMsgToActiveView(f)
     for x,y in [[500,500],[1000,3000],[3000,1000],[3000,3000],[8000,8000]]:
       Gui.ActiveDocument.ActiveView.saveImage(OutDir + &quot;Blade_&quot; + p +&quot;_&quot; + f + &quot;_&quot; + `x` + &quot;_&quot; + `y` + &quot;.jpg&quot;,x,y,&quot;White&quot;)
       Gui.ActiveDocument.ActiveView.saveImage(OutDir + &quot;Blade_&quot; + p +&quot;_&quot; + f + &quot;_&quot; + `x` + &quot;_&quot; + `y` + &quot;.png&quot;,x,y,&quot;Transparent&quot;)
 
 # close active document
 App.closeDocument(App.ActiveDocument.Name)

&lt;/syntaxhighlight&gt;
{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std ViewXX</title>
    <ns>0</ns>
    <id>179</id>
    <revision>
      <id>1178</id>
      <parentid>1177</parentid>
      <timestamp>2009-02-02T13:09:55Z</timestamp>
      <contributor>
        <username>Jriegel</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>1 revision</comment>
      <sha1>94embp0judvvff0q9d8eftofhnd2kh7</sha1>
      <text xml:space="preserve" bytes="109">{{GuiCommand|Name=Std_ViewXX|Workbenches=All|SeeAlso=...}}
'''Synopsis'''
ToDo.


{{Template:UnfinishedDocu}}</text>
    </revision>
  </page>
  <page>
    <title>Std ViewZoom</title>
    <ns>0</ns>
    <id>180</id>
    <revision>
      <id>102227</id>
      <parentid>102226</parentid>
      <timestamp>2014-08-02T18:47:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gudq20v1rpejywmnod8nzeddvyl3le8</sha1>
      <text xml:space="preserve" bytes="292">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std ViewZoom|MenuLocation=[[Std View Menu|View]] → Zoom‏‎ → option||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std View Menu</title>
    <ns>0</ns>
    <id>11067</id>
    <revision>
      <id>105202</id>
      <parentid>105099</parentid>
      <timestamp>2014-08-18T20:44:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>cypn6dpf714l8mrneaxeqnih7gydwck</sha1>
      <text xml:space="preserve" bytes="5233">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{StdMenu|View}}

&lt;!--T:3--&gt;
Contains all functions related to the display of the model, such as panels show, zoom, etc.. .

&lt;!--T:4--&gt;
* [[Std_ViewCreate|Create new view]]

&lt;!--T:6--&gt;
* [[Image:View-isometric.svg|32px]] [[Std OrthographicCamera|Orthographic view]]

&lt;!--T:7--&gt;
* [[Image:View-perspective.svg|32px]] [[Std PerspectiveCamera|Perspective view]]

&lt;!--T:8--&gt;
* Standard views
** [[Image:View-zoom-all.svg|32px|vertical-align: top=zoom-all]] [[Std_ViewFitAll|Fit all]]
** [[File:View-zoom-selection.svg|32px|text-top=View-zoom-selection]] [[Std_ViewFitSelection|Fit selection]]
** [[Image:View-isometric.svg|32px|text-top=isometric]] Axometric 0
** [[Image:View-front.svg|32px|text-top=front]] Front 1
** [[Image:View-top.svg|32px|text-top=top]] Top 2
** [[Image:View-right.svg|32px|text-top=right]] Right 3
** [[Image:View-rear.svg|32px|text-top=rear]] Rear 4
** [[Image:View-bottom.svg|32px|text-top=bottom]] Bottom 5
** [[Image:View-left.svg|32px|text-top=View-left]] Left 6
** [[Image:Std_RotateLeft.png]] [[Std_RotateLeft|Rotate left]]
** [[Image:Std_RotateRight.png]] [[Std_RotateRight|Rotate right]]

&lt;!--T:9--&gt;
* [[Std_FreezeViews|Freeze display]]
** Save views...
** Load views...
** Freeze view
** Clear views

&lt;!--T:26--&gt;
* Draw Style
** [[File:DrawStyleAsIs.svg|32px]] As is
** [[File:DrawStyleFlatLines.svg|32px]] Flat lines
** [[File:DrawStyleShaded.svg|32px]] Shaded
** [[File:DrawStyleWireFrame.svg|32px]] Wireframe
** [[File:DrawStylePoints.svg|32px]] Points

&lt;!--T:10--&gt;
* [[Std_ViewIvStereo|Stereo]]
** [[File:Std_Tool7.svg|32px]] red/green
** [[File:Std_Tool7.svg|32px]] quad buffer
** [[File:Std_Tool7.svg|32px]] interleaved rows
** [[File:Std_Tool7.svg|32px]] interleaved columns
** [[File:Std_Tool6.svg|32px]] Stereo Off
** [[File:Std_Tool8.svg|32px]] Issue camera position

&lt;!--T:11--&gt;
* 

&lt;!--T:12--&gt;
* [[Std_ViewZoom|Zoom]] see also [[Mouse_Model|Mouse Model]]
** [[File:View-zoom-in.svg|32px|text-top=View-zoom-in]] In
** [[Image:View-zoom-out.svg|32px|text-top=zoom-out]] Out
** [[File:View-zoom-border.svg|32px|text-top=View-zoom-border]] [[Std_ViewBoxZoom|Box zoom]] (....)
* [[Std_ViewDockUndockFullscreen|Document window]]
** [[Std_ViewDockUndockFullscreen|Docked]]
** [[Std_ViewDockUndockFullscreen|Undocked]]
** [[Std_ViewDockUndockFullscreen|Full screen]]

&lt;!--T:13--&gt;
* Toggle axis cross

&lt;!--T:14--&gt;
* [[Std ClippingPlane|Clipping plane]]

&lt;!--T:15--&gt;
* Texture mapping see [[Macro_Texture_Objects|Macro Texture Objects]] and [[Draft_Rectangle|Vista texture]] 

&lt;!--T:16--&gt;
* Visibility
** [[Std_ToggleVisibility|Toggle visibility]] (....) (... &quot;space&quot;)
** Show selection
** Hide selection
** Toggle all objects
** Show all objects
** Hide all objects
** [[File:View-unselectable.svg|32px]] Toggle selectability
** [[File:Part_Measure_Toggle_All.svg|32px]] Toggle measurement
** [[File:Part_Measure_Clear_All.svg|32px]] Clear measurement

&lt;!--T:17--&gt;
* Toggle visibility

&lt;!--T:18--&gt;
* Toggle navigation/edit mode

&lt;!--T:19--&gt;
* [[Std_SetAppearance|Appearance...]]
** Viewing mode
** [[Material|Material]]
** Display
*** Point size
*** Line width
*** Transparency
*** Line transparency

&lt;!--T:20--&gt;
* Random color

&lt;!--T:21--&gt;
* [[File:Measure.svg|32px]] [[Std_MeasureDistance|Measure distance]]

&lt;!--T:22--&gt;
* [[Std_Workbench|Workbench]]
** None
** [[Image:Arch.png|16px]] [[Arch Module|Arch]]
** [[Image:Workbench_Assembly.png|16px]] [[Assembly_project|Assembly]]
** [[Image:Workbench_Complete.svg|16px]] [[Complete Workbench|Complet]]
** [[Image:Workbench_Draft.png|16px]]    [[Draft Module|Draft]]
** [[Image:Workbench_Drawing.png|16px]]  [[Drawing Module|Drawing]]
** [[Image:Workbench_Mesh.png|16px]]     [[Fem Workbench|Fem]]
** [[Image:Workbench_Image.png|16px]]    [[Image Module|Immage]]
** [[Macro ObjectInfo|Info]]
** [[File:Freecad.svg|16px]] Inspection
** [[Image:Workbench_Mesh.png|16px]] [[Mesh Module|Mesh]]
** [[Image:Workbench_OpenSCAD.png|16px]] [[OpenSCAD_Module|OpenSCAD]]
** [[Image:Workbench_Part.png|16px]] [[Part Module|Part]]
** [[Image:Workbench_PartDesign.png|16px]] [[PartDesign Workbench|Part Design]]
** [[Image:Plot_Save.png|16px]] [[Plot_Module|Plot]]
** [[Points_Module|Points]]
** [[Image:Raytracing.png|16px]] [[Raytracing Module|Raytracing]]
** Reverse Engineering
** [[Image:Workbench_Robot.png|16px]] [[Robot Module|Robot]]
** [[Image:FreeCAD-Ship-Ico.png|16px]] [[FreeCADShip_Workbench|Ship]]
** [[Image:Workbench_Sketcher.png|16px]] [[Sketcher Workbench|Sketcher]]
** [[Image:Spreadsheet Create.png|16px]] [[Spreadsheet Workbench|Spreadsheet]]
** [[Image:Workbench_Start.svg|16px]] [[Start Workbench|Start Center]]
** [[Image:Std Test framework.png|16px]] [[Testing|Test framework]]
** [[Image:Workbench_Web.svg|16px]] [[Main_Page|Web]]

&lt;!--T:23--&gt;
* Toolbars
** File
** Macro
** View
** Part Design
** Sketcher geometries
** Sketcher constraints
** Bolts
** Info
** FreeCAD Part
** Screw
** Draft Snap

&lt;!--T:24--&gt;
* [[Std_Views|Views]]
** Report
** Tree
** Property
** Selection
** Combo View
** Python console

&lt;!--T:25--&gt;
* Status bar

&lt;!--T:5--&gt;
[[Category:User Documentation]]
[[Category:Command_Reference]]
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Views</title>
    <ns>0</ns>
    <id>4139</id>
    <revision>
      <id>102826</id>
      <parentid>102825</parentid>
      <timestamp>2014-08-03T20:50:38Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>jdbu739btldp8mj6vdscb11kbg9ttgy</sha1>
      <text xml:space="preserve" bytes="290">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Views|MenuLocation=[[Std View Menu|View]] → Views‏‎ → option||Workbenches=All|Shortcut=|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std WhatsThis</title>
    <ns>0</ns>
    <id>181</id>
    <revision>
      <id>105238</id>
      <parentid>101603</parentid>
      <timestamp>2014-08-18T20:59:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Shortcut</comment>
      <sha1>9bo0uy75moxbgq4g0ht0lsd4dudy460</sha1>
      <text xml:space="preserve" bytes="298">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

 
&lt;!--T:2--&gt;
{{GuiCommand|Name=Std WhatsThis|MenuLocation=[[Std Help Menu|Help]] → What's This‏‎||Workbenches=All|Shortcut=Maiusc+F1|SeeAlso=}}


&lt;!--T:3--&gt;
ToDo


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Windows Menu</title>
    <ns>0</ns>
    <id>30401</id>
    <revision>
      <id>105132</id>
      <parentid>105131</parentid>
      <timestamp>2014-08-18T20:04:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1w7ng726byz2hqogyvnh2qatjgfsh2s</sha1>
      <text xml:space="preserve" bytes="579">
&lt;!--T:4--&gt;
{{StdMenu|Windows}}

&lt;!--T:1--&gt;
Typical window management menu, which includes these commands:

&lt;!--T:2--&gt;
[[Image:Std WindowNext.svg|32px]] [[Std WindowNext|Next]]

&lt;!--T:5--&gt;
[[Image:Std WindowPrev.svg|32px]] [[Std WindowPrevious|Previous]]

&lt;!--T:6--&gt;
[[Image:Std WindowTileVer.svg|32px]] [[Std WindowTile|Tile]]

&lt;!--T:7--&gt;
[[Image:Std WindowCascade.svg|32px]] [[Std WindowCascade|Cascade]]

&lt;!--T:8--&gt;
Arrange icons

&lt;!--T:9--&gt;
Windows...


&lt;!--T:3--&gt;
[[Category:User Documentation]]
[[Category:Command_Reference]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Workbench</title>
    <ns>0</ns>
    <id>182</id>
    <revision>
      <id>104423</id>
      <parentid>101426</parentid>
      <timestamp>2014-08-12T20:35:26Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>0pgw0qi3ar8lvvu89sk2eyt6vz048ge</sha1>
      <text xml:space="preserve" bytes="285">

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}

&lt;!--T:2--&gt;
{{GuiCommand|Name=Std Workbench|MenuLocation=[[Std View Menu|View]] → Workbench|Workbenches=All|Shortcut=...|SeeAlso=...}}


&lt;!--T:3--&gt;
ToDo.


&lt;!--T:4--&gt;
[[Category:UnfinishedDocu]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Std Workbench Menu</title>
    <ns>0</ns>
    <id>39435</id>
    <revision>
      <id>105159</id>
      <parentid>105113</parentid>
      <timestamp>2014-08-18T20:08:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>f8r0wfcuq4y7p4exouuse519hftlj26</sha1>
      <text xml:space="preserve" bytes="268">__NOTOC__
&lt;!-- ==The Workbench Menu== --&gt;

&lt;!--T:1--&gt;
{{Template:UnfinishedDocu}}


&lt;!--T:2--&gt;
{{StdMenu|Workbench}}



&lt;!--T:3--&gt;
[[Category:UnfinishedDocu]]


&lt;!--T:4--&gt;
[[Category:Documentation]]
[[Category:Command_Reference]]



</text>
    </revision>
  </page>
  <page>
    <title>Svg Namespace</title>
    <ns>0</ns>
    <id>2016</id>
    <revision>
      <id>86852</id>
      <parentid>84641</parentid>
      <timestamp>2014-05-24T20:54:17Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>5mwj6jwz2iw5xrpd5pnrn2ftbsahkcl</sha1>
      <text xml:space="preserve" bytes="8001">
&lt;!--T:1--&gt;
In the [http://en.wikipedia.org/wiki/Scalable_Vector_Graphics SVG] documents exported by FreeCAD's [[Drawing Module|Drawing Module]] and used as page [[Drawing templates|templates]], several custom [http://www.w3schools.com/xml/xml_attributes.asp attributes] can be used, originally for FreeCAD's own internal use, but could also be used by other FreeCAD-aware applications in the future. These attributes all use the '''freecad:''' [http://www.w3schools.com/xml/xml_namespaces.asp namespace] prefix. The namespace URL defined in those SVG documents refers to this page. 

==Usage== &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
One pixel = one millimeter.

&lt;!--T:4--&gt;
You must insert, somewhere inside your svg code, where you want the contents of the drawing to appear (for example at the end of the file, just before the last '''&lt;/svg&gt;''' tag), the following line:



&lt;syntaxhighlight&gt;
&lt;!-- DrawingContent --&gt;
&lt;/syntaxhighlight&gt;



&lt;syntaxhighlight&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;svg
   xmlns:freecad=&quot;http://www.freecadweb.org/wiki/index.php?title=Svg_Namespace&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:5--&gt;
In order to enable up to scale printing, the real word size has to be given in the width and height attributes of the SVG-Tag. The size of the document in user units, (px), has to be given in the viewBox attribute.

&lt;!--T:42--&gt;
The following is to be formatted like the example below where:
* xxx = pixel width
* yyy = pixel height


&lt;syntaxhighlight&gt;
width=&quot;xxxmm&quot;
height=&quot;yyymm&quot;
viewBox=&quot;0 0 xxx yyy&quot;
&lt;/syntaxhighlight&gt;


&lt;!--T:44--&gt;
Additional information for Working space and Title block may be added, and is defined on the [[Drawing templates]] page.

==Attributes== &lt;!--T:6--&gt;

===[[#Example_of_code freecad:EditableText|freecad:EditableText]]=== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
To use any of the '''freecad:''' attributes in your SVG documents, you must first define the freecad namespace as an attribute of the opening &lt;svg&gt; tag:

&lt;!--T:9--&gt;
Defines a text in a template that can be edited by FreeCAD.

&lt;!--T:10--&gt;
Example:


&lt;syntaxhighlight&gt;

 &lt;text freecad:EditableText=&quot;MyTitleText&quot;&gt;
     &lt;tspan&gt;This is a title&lt;/tspan&gt;
 &lt;/text&gt;
&lt;/syntaxhighlight&gt;

===freecad:basepoint1=== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
Defines the first point of a [[Draft Dimension]] object (represented as a group in a SVG document). This attribute is used when importing the SVG fragment in FreeCAD, in order to recreate the dimension object. The group contains paths and other graphical items to correctly render the dimension object in other SVG applications.

&lt;!--T:13--&gt;
Example:

&lt;syntaxhighlight&gt;
 &lt;g freecad:basepoint1=&quot;0.5 4.34&quot; freecad:basepoint2=&quot;2.4 5.8&quot; dimpoint=&quot;3.2 7.76&quot;&gt;
     &lt;path d=&quot;...&quot;&gt;
 &lt;/g&gt;
&lt;/syntaxhighlight&gt;

===freecad:basepoint2=== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
Defines the second point of a [[Draft Dimension|Draft Dimension]] object (represented as a group in a SVG document). This attribute is used when importing the SVG fragment in FreeCAD, in order to recreate the dimension object. The group contains paths and other graphical items to correctly render the dimension object in other SVG applications.

&lt;!--T:16--&gt;
Example: see [[#freecad:basepoint1|freecad:basepoint1]]

===freecad:dimpoint=== &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
Defines the point of a [[Draft Dimension]] object through which the dimension line passes. This attribute is used when importing the SVG fragment in FreeCAD, in order to recreate the dimension object. The group contains paths and other graphical items to correctly render the dimension object in other SVG applications.

&lt;!--T:19--&gt;
Example: see [[#freecad:basepoint1|freecad:basepoint1]]

===Example of code freecad:EditableText=== &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
This example is taken from a cartridge to a sheet [[Misc_templates#A3_Landscape_US_Text_Complet_With_Convention_US|A3_Landscape]]

====1 : Title without textedit==== &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
[[Image:Svg Namespace 01.png|300px]]

&lt;syntaxhighlight&gt;

  &lt;g
     id=&quot;g3587&quot;&gt;
    &lt;text
       sodipodi:linespacing=&quot;119.00001%&quot;
       id=&quot;text3482&quot;
       y=&quot;229.10912&quot;
       x=&quot;220.8476&quot;
       style=&quot;font-size:1.97555566px;font-style:normal;font-weight:normal;line-height:119.00000572%;letter-spacing:0.01975556px;word-spacing:0.00846667px;writing-mode:lr-tb;fill:#000000;fill-opacity:1;stroke:none;font-family:Sans;-inkscape-font-specification:Sans&quot;
       xml:space=&quot;preserve&quot;&gt;&lt;tspan
         y=&quot;229.10912&quot;
         x=&quot;220.8476&quot;
         id=&quot;tspan3484&quot;
         sodipodi:role=&quot;line&quot;&gt;AUTHOR NAME :&lt;/tspan&gt;&lt;/text&gt;

&lt;/syntaxhighlight&gt;

====2 : Title with textedit==== &lt;!--T:24--&gt;

&lt;!--T:25--&gt;
[[Image:Svg Namespace 02.png|300px]]

&lt;syntaxhighlight&gt;
  &lt;g
     style=&quot;fill:none;stroke:#000000;stroke-width:0.13;stroke-linecap:butt;stroke-linejoin:miter&quot;
     id=&quot;g578-7&quot;
     transform=&quot;translate(0,4)&quot;&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:4px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:sans;-inkscape-font-specification:sans&quot;
       x=&quot;220.9935&quot;
       y=&quot;228.95425&quot;
       id=&quot;text3331&quot;
       sodipodi:linespacing=&quot;125%&quot;
       freecad:editable=&quot;AuthorName&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan3333&quot;
         x=&quot;220.9935&quot;
         y=&quot;228.95425&quot;&gt;AUTHOR NAME&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
    ...
    ...
    ...
    ... &lt;/text&gt;
  
  &lt;/g&gt;
&lt;/syntaxhighlight&gt;

====Explanations==== &lt;!--T:26--&gt;

&lt;syntaxhighlight&gt;
  &lt;g
&lt;/syntaxhighlight&gt;

&lt;!--T:27--&gt;
Beginning of the framework

&lt;syntaxhighlight&gt;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.13;stroke-linecap:butt;stroke-linejoin:miter&quot;
     id=&quot;g578-7&quot;
     transform=&quot;translate(0,4)&quot;&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:28--&gt;
Data on the framework

&lt;syntaxhighlight&gt;
    &lt;text
&lt;/syntaxhighlight&gt;

&lt;!--T:29--&gt;
Beginning of the text block

&lt;syntaxhighlight&gt;
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:4px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:sans;-inkscape-font-specification:sans&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:30--&gt;
All the information about the text that will be displayed

&lt;syntaxhighlight&gt;
       x=&quot;220.9935&quot;
       y=&quot;228.95425&quot;
       id=&quot;text3331&quot;
       sodipodi:linespacing=&quot;125%&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:31--&gt;
Coordinates and identity where the text will appear

&lt;syntaxhighlight&gt;
       freecad:editable=&quot;AuthorName&quot;&gt;&lt;tspan
&lt;/syntaxhighlight&gt;

&lt;!--T:32--&gt;
Here '''AuthorName''' is the var managed by '''freecad:editable''' who saves the string to change that will be displayed

&lt;syntaxhighlight&gt;
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan3333&quot;
         x=&quot;220.9935&quot;
         y=&quot;228.95425&quot;&gt;AUTHOR NAME&lt;/tspan&gt;&lt;/text&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:33--&gt;
Coordinates and identity of the text that is displayed by default and '''&lt;/text&gt;''' means the end of the block text

&lt;syntaxhighlight&gt;
    &lt;text
    ...
    ...
    ...
    ... &lt;/text&gt;
  &lt;/g&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:34--&gt;
Other blocks texts and end '''&lt;/g&gt;''' the framework grouping text blocks

&lt;!--T:35--&gt;
It is possible after having worked the Inkscape SVG file as the file no longer works, it is possible that information has gone missing.

&lt;!--T:36--&gt;
Then check that the edit text is not modified 

&lt;!--T:37--&gt;
Example :
* '''editable''' = &quot;AuthorName&quot;
* replace by '''freecad:editable''' = &quot;AuthorName&quot;

==Other attributes availlables== &lt;!--T:38--&gt;

&lt;!--T:39--&gt;
See [[Drawing_templates]]

&lt;!--T:45--&gt;
[[Category:Poweruser_Documentation]]
[[Category:Developer]]
[[Category:Python_Code]]
[[Category:Macros]]


</text>
    </revision>
  </page>
  <page>
    <title>Syndication feeds</title>
    <ns>0</ns>
    <id>183</id>
    <revision>
      <id>87226</id>
      <parentid>87225</parentid>
      <timestamp>2014-05-26T14:30:09Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1jlk9ggt38hypelkq9o7x9x10ts2nd9</sha1>
      <text xml:space="preserve" bytes="2655">
&lt;!--T:1--&gt;
There are several [http://en.wikipedia.org/wiki/RSS RSS feeds] available for the FreeCAD project:

__NOTOC__


== General FreeCAD feed == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
* http://pipes.yahoo.com/pipes/pipe.run?_id=da8b612e97a6bb4588b1ce27db30efd9&amp;_render=rss : This is the general FreeCAD feed, that appears on the [http://www.freecadweb.org FreeCAD homepage] and in the FreeCAD start center. It gathers information from several sources, such as code commits, FreeCAD-related videos posted on youtube, and articles from the blogs of FreeCAD developers.

== File Releases == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* http://sourceforge.net/api/file/index/project-id/49159/mtime/desc/limit/20/rss : This feed informs of the files uploaded on the Sourceforge server and available to download. It includes releases of FreeCAD installers for all platforms, both stable and development versions, and related files such as documentation.

== Source code commits == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* http://sourceforge.net/p/free-cad/code/feed : A feed showing all commits made to the FreeCAD source code.
* http://github.com/FreeCAD/FreeCAD_sf_master/commits/master.atom : An alternative feed, showing the same thing, but taken from the github mirror instead of the official Sourceforge repository.

== Wiki documentation == &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* {{SERVER}}{{localurl:Special:Recentchanges|feed=rss}} : Shows most recent changes to the wiki documentation

&lt;!--T:10--&gt;
* {{SERVER}}{{localurl:Special:Newpages|feed=rss}} : Shows the new pages created on this wiki

&lt;!--T:11--&gt;
* {{SERVER}}{{localurl:{{FULLPAGENAME}}|action=history&amp;feed=rss}} : Gives the history of a certain page. Replace &quot;Syndication_feeds&quot; with the page you wish to obtain. Replace &quot;rss&quot; by &quot;atom&quot; in the links above for the atom version.

== Forum == &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* http://forum.freecadweb.org/feed.php : This is the complete feed of the forum, it lists all new entries.
* http://forum.freecadweb.org/feed.php?mode=forums : A static feed showing all categories of the forum, updated everytime the contents changes
* http://forum.freecadweb.org/feed.php?f=3 : The feed of a particular forum. Change the number by the number of the forum you wish to follow.
* http://forum.freecadweb.org/feed.php?f=3&amp;t=6681 : The feed of a particular thread. Change the forum and thread numbers to the one you wish to follow.

== Bug tracker == &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
* http://freecadweb.org/tracker/issues_rss.php?project_id=0 : This feed tracks all updates made to the [http://www.freecadweb.org/tracker FreeCAD bug tracker]

&lt;!--T:16--&gt;
[[Category:News]]

</text>
    </revision>
  </page>
  <page>
    <title>Tabela de Conteúdos Online</title>
    <ns>0</ns>
    <id>3501</id>
    <revision>
      <id>108115</id>
      <parentid>89286</parentid>
      <timestamp>2014-09-01T20:02:03Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Table des matières</title>
    <ns>0</ns>
    <id>848</id>
    <revision>
      <id>108116</id>
      <parentid>91015</parentid>
      <timestamp>2014-09-01T20:02:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Tango icons</title>
    <ns>0</ns>
    <id>184</id>
    <revision>
      <id>127455</id>
      <parentid>127454</parentid>
      <timestamp>2014-12-02T20:05:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>belq7ur8fx8wrjh1zrklwma0oz82sxk</sha1>
      <text xml:space="preserve" bytes="5444">
&lt;!--T:1--&gt;
This page is a gathering point for converting old freecad icons to the tango style. 

&lt;!--T:2--&gt;
Here is a list of all freecad commands that need an icon, then see what's available on the [http://tango.freedesktop.org/Tango_Desktop_Project Tango Project]. Then we can make a list of needed new icons, and start drawing!

&lt;!--T:3--&gt;
A good but not complete list of tango icons here: http://commons.wikimedia.org/wiki/Tango_icons

&lt;!--T:4--&gt;
Still have to check Inkscape tango icon theme, there might be many icons that can be used for FreeCAD

&lt;!--T:5--&gt;
* FreeCAD icon - see the [[artwork]] page.
* FreeCAD document icon - '''TODO'''

&lt;!--T:6--&gt;
'''File'''
* New - [http://commons.wikimedia.org/wiki/Image:Document-new.svg Document-new] (tango)
* Open - [http://commons.wikimedia.org/wiki/Image:Document-open.svg Document-open] (tango)
* Save - [http://commons.wikimedia.org/wiki/Image:Document-save.svg Document-save] (tango)
* Save as - [http://commons.wikimedia.org/wiki/Image:Document-save-as.svg Document-save-as] (tango)
* Import - [[Media:Document-import.svg]] (inkscape)
* Export - [[Media:Document-export.svg]] (inkscape)
* Project information (document properties) - [http://commons.wikimedia.org/wiki/Image:Document-properties.svg Document-properties] (tango)
* Print - [http://commons.wikimedia.org/wiki/Image:Document-print.svg Document-print] (tango)
* Print to PDF - '''TODO'''
* Exit - [http://commons.wikimedia.org/wiki/Image:System-log-out.svg System-log-out] (tango)

&lt;!--T:7--&gt;
'''Edit'''
* Undo - [http://commons.wikimedia.org/wiki/Image:Edit-undo.svg Edit-undo] (tango)
* Redo - [http://commons.wikimedia.org/wiki/Image:Edit-redo.svg Edit-redo] (tango)
* Cut - [http://commons.wikimedia.org/wiki/Image:Edit-cut.svg Edit-cut] (tango)
* Copy - [http://commons.wikimedia.org/wiki/Image:Edit-copy.svg Edit-copy] (tango)
* Paste - [http://commons.wikimedia.org/wiki/Image:Edit-paste.svg Edit-paste] (tango)
* Refresh - [http://commons.wikimedia.org/wiki/Image:View-refresh.svg View-refresh] (tango)
* Select All - [http://commons.wikimedia.org/wiki/Image:Edit-select-all.svg Edit-select-all] (tango)
* Delete - [http://commons.wikimedia.org/wiki/Image:Edit-delete.svg Edit-delete] (tango)
* Preferences - [http://commons.wikimedia.org/wiki/Image:Preferences-system.svg Preferences-system] (tango)

&lt;!--T:8--&gt;
'''View'''
* Create new view - [http://commons.wikimedia.org/wiki/Image:Window-new.svg Window-new] (tango)
* Orthographic view - [[Media:View-isometric.svg]]
* Perspective view - [[Media:View-perspective.svg]]
* Clipping plane - '''TODO'''
* Appearence - '''TODO'''
* Toggle visibility - '''TODO'''
* Random color - '''TODO'''
* Measure distance - [http://commons.wikimedia.org/wiki/Image:Measure.svg Measure] (tango)
* Dock views - '''TODO'''

&lt;!--T:9--&gt;
'''Standard views'''
* Fit All - [[Media:View-zoom-all.svg]]
* Fit Selection - [[Media:View-zoom-selection.svg]]
* Axonometric - [[Media:View-axometric.svg]]
* Top - [[Media:View-top.svg]]
* Front - [[Media:View-front.svg]]
* Left - [[Media:View-left.svg]]
* Right - [[Media:View-right.svg]]
* Rear - [[Media:View-rear.svg]]
* Bottom - [[Media:View-bottom.svg]]

&lt;!--T:10--&gt;
'''Freeze Display'''
* Save view - '''TODO'''
* Load view - '''TODO'''
* Freeze view - '''TODO'''
* Clear view - '''TODO'''

&lt;!--T:11--&gt;
'''3D View'''
* Stereo red/green - '''TODO'''
* Stereo quad buffer - '''TODO'''
* Stereo interleaved rows - '''TODO'''
* Stereo interleaved columns - '''TODO'''
* Stereo Off - '''TODO'''
* Issue camera position - [http://commons.wikimedia.org/wiki/Image:Camera-photo.svg Camera-photo] (tango)

&lt;!--T:12--&gt;
'''Zoom'''
* Zoom in - [http://commons.wikimedia.org/wiki/Image:View-zoom-in.svg View-zoom-in] (tango) or [[Media:View-zoom-in.svg]]
* Zoom out - [http://commons.wikimedia.org/wiki/Image:View-zoom-out.svg View-zoom-out] (tango) or [[Media:View-zoom-out.svg]]
* Box zoom - [[Media:View-zoom-border.svg]]

&lt;!--T:13--&gt;
'''Display mode'''
* Docked - '''TODO'''
* Undocked - '''TODO'''
* Fullscreen - '''TODO'''

&lt;!--T:14--&gt;
'''Tools'''
* Start command line - [http://commons.wikimedia.org/wiki/Image:Utilities-terminal.svg Utilities-terminal] (tango)
* Edit parameters - [http://commons.wikimedia.org/wiki/Image:Preferences-system.svg Preferences-system] (tango)
* Macro recording - [http://commons.wikimedia.org/wiki/Image:Media-record.svg Media-record] (tango)
* Stop macro recording - [http://commons.wikimedia.org/wiki/Image:Media-playback-stop.svg Media-stop] (tango)
* Execute macro - [http://commons.wikimedia.org/wiki/Image:Media-playback-start.svg Media-playback-start] (tango)
* Execute editor - [http://commons.wikimedia.org/wiki/Image:Accessories-text-editor.svg Accessories-text-editor] (tango)
* Save picture - [http://commons.wikimedia.org/wiki/Image:Camera-photo.svg Camera-photo] (tango)
* Scene inspector - '''TODO'''
* Customize - [http://commons.wikimedia.org/wiki/Image:Applications-accessories.svg Applications-accessories] (tango)

&lt;!--T:15--&gt;
'''Windows'''
* Close
* Close all
* Next
* Previous
* Tile
* Cascade
* Arrange icons
* Windows...

&lt;!--T:16--&gt;
'''Help'''
* Help
* Python manuals - [http://www.python.org/community/logos/python-logo-generic.svg New official python logo] (python)
* Python modules
* Tip of the day
* What's this

&lt;!--T:17--&gt;
'''Tree view'''
* Document
* Mesh
* Part
* Scenegraph


&lt;!--T:18--&gt;
[[Category:Administration]]
[[Category:Image]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Tasks Placement</title>
    <ns>0</ns>
    <id>3531</id>
    <revision>
      <id>112806</id>
      <parentid>112764</parentid>
      <timestamp>2014-10-07T19:23:57Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>mkrf226mh8jvjdgziz2sls4l6kxpeyt</sha1>
      <text xml:space="preserve" bytes="6165">
==Description== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
Command for modifying '''Placement'''.
These options relate only to the position and orientation of the object in space, they do not affect other attributes of the shape.

==Usage== &lt;!--T:4--&gt;

&lt;!--T:28--&gt;
The function '''Placement''' can be accessed in several ways:
* via [[Python_scripting_tutorial#Vecteurs_et_Positions|script]] Python in the console and its [[Placement_API|API]].
[[Image:PlacePyConv10.png|Scripting Placement as y/p/r and Matrix]] 
* or, in the window '''Combo View → Properties → Data → Placement → {{KEY|...}}''',
[[Image: Tache_Placement_fr_01.png|Task_Placement]]
* or by the menu '''Edit → Placement...'''.


===Enable Placement in Combo View=== &lt;!--T:7--&gt;


&lt;!--T:8--&gt;
* Click a shape to select it.
* Click '''Placement''' (the title, not the little arrow), and a button with three dots appears:  [[Image: Tache_Placement_01_fr_00.png | 256px | Tache_Placement]] 
* click on this button, and the '''Placement Dialog''' is displayed:


&lt;!--T:11--&gt;
[[File: Tache_Placement_en_02.png | left]]{{clear}}

===Options=== &lt;!--T:12--&gt;
{{TitreProprietes | Translation:}}
* {{TasksTag | X}} [[File: Tache_Placement_Translation_X_fr.gif | 150px | Translation in X direction (Click to enlarge)]] Moves the coordinate system of the object in the '''X''' direction in relation to the axis coordinates of origin 0, 0, 0.
* {{TasksTag | Y}} [[File: Tache_Placement_Translation_Y_fr.gif | 150px | Translation in the Y direction (Click to enlarge)]] Moves the coordinate system of the object in the '''Y''' direction in relation to the axis coordinates of origin 0, 0, 0.
* {{TasksTag | Z}} [[File: Tache_Placement_Translation_Z_fr.gif | 150px | Translation in the Z direction (Click to enlarge)]] Moves the coordinate system of the object in the '''Z''' direction in relation to the axis coordinates of origin 0, 0, 0.

&lt;!--T:13--&gt;
{{TitreProprietes | Center}}
* {{TasksTag | X}}: Move the center of rotation in the direction '''X''', from the coordinates of the selected object. (default: 0,0,0).
* {{TasksTag | Y}}: Move the center of rotation in the direction '''Y''' from the coordinates of the selected object. (default: 0,0,0).
* {{TasksTag | Z}}: Move the center of rotation in the direction '''Z''', from the coordinates of the selected object. (default: 0,0,0).
* {{TasksTag | User Defined ... }}: Allows you to change the three axes ( '''X, Y, Z''') in a single operation [[Image: Part_Revolve_fr_06.png | 96px | User Defined]].

&lt;!--T:14--&gt;
{{TitreProprietes | Rotation}}
To adjust our '''rotation parameters''' we have two methods available.

&lt;!--T:29--&gt;
* First option. Select ''' Rotation axis with angle '''[[Image: Tache_Placement_fr_05.png | 256px | Tache_Placement Option rotation axis and angle]] (Default).
** {{TasksTag | Axis: X}}: The rotation will be on the '''X''' axis.
** {{TasksTag | Axis: Y}}: The rotation will be on the '''Y''' axis.
** {{TasksTag | Axis: Z}}: The rotation will be on the '''Z''' axis. (Default axis).
** {{TasksTag | Angle:}} Angle of rotation in degrees from '''-360.00 °''' to '''360.00 °'''. (Default: '''0.00°''').

&lt;!--T:15--&gt;
* Second option. Select '''Euler Angles''' [[Image: Tache_Placement_fr_04.png | 256px | Tache_Placement Option Euler angles]].

&lt;!--T:16--&gt;
This option may be easier to work with, however, even in this mode, there are important things to remember:
Positive rotations are in the '''clockwise''' direction, looking '''out''' from the origin along a positive axis. Or to put it differently, the rotations are positive in the '''counterclockwise''' direction, looking '''in''' to the origin along a positive axis.

&lt;!--T:18--&gt;
:* '''[http://en.wikipedia.org/wiki/Flight_dynamics_%28fixed_wing_aircraft%29 Yaw]''' : is a horizontal rotation of a body about a vertical axis. (The symbol '''ψ''' is often used for yaw.)
:* '''[http://en.wikipedia.org/wiki/Flight_dynamics_%28fixed_wing_aircraft%29 Pitch]''' : is defined as an oscillating movement of a vessel fore and aft.
:* '''[http://en.wikipedia.org/wiki/Flight_dynamics_%28fixed_wing_aircraft%29 Roll]''' : is a rotary movement of a body about its longitudinal axis (roll axis).

&lt;!--T:19--&gt;
Yaw, pitch and roll refer to the '''attitude''' of an object in 3D space.  These terms are commonly used in aviation.
The angles are the '''Tait-Bryan angles.''' If you want more information, try [http://en.wikipedia.org/wiki/Euler_angles Euler angles].

&lt;!--T:21--&gt;
[[Image: Tache_Placement_en_03.png | left | Option Euler angles]]
{{clear}}


&lt;!--T:22--&gt;
[[Image: Tache_Placement_Lacet_fr.gif  | Left | Yaw]]
* {{TasksTag | yaw axis}} '''Yaw is the rotation about the Z axis''', that is to say a rotation from left to right. (The yaw angle is the '''Psi ψ'''). Value '''-360.00 °''' to '''360, 00 ° '''(Def,  '''0.00 °''').


&lt;!--T:23--&gt;
[[Image: Tache_Placement_Tangage_fr.gif | Left | Pitch]]
* {{TasksTag | pitch axis}} '''Pitch is rotation about the Y axis''', that is to say nose-up and nose-down. (The Pitch angle is the '''Phi φ'''). Value '''-360.00 °''' to '''360, 00 ° '''(Default,  '''0.00 °''').


&lt;!--T:24--&gt;
[[Image: Tache_Placement_Roulis_fr.gif | Left | Roll]]
* {{TasksTag | roll axis}} '''Roll is rotation about the X axis''', that is to say wing up and down. (The Roll angle is the '''Thêta θ'''). Value '''-360.00 °''' to '''360, 00 ° '''(Default,  '''0.00 °''').


&lt;!--T:25--&gt;
* {{TasksTag | Apply incremental changes to the placement of the object}}: Once selected, this option '''virtually''' sets all parameters to zero, to allow you to enter your values ​​without having to calculate with the original parameters of the form. Once you have confirmed with {{KEY|OK}}, the entered values ​​will be added to the values ​​on the form.

&lt;!--T:26--&gt;
* The {{KEY | Reset}} returns all values ​​to '''0,0,0'''.

==Links and Example== &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
A practical example of using this command is in the tutorial [[Aeroplane| Aeroplane]].

&lt;!--T:32--&gt;
Other explanation on [[Placement|Placement]]


&lt;!--T:27--&gt;
[[Category: User_Documentation]]
[[Category: Command_Reference]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Test Ambiente PartDesign</title>
    <ns>0</ns>
    <id>10929</id>
    <revision>
      <id>101772</id>
      <parentid>41521</parentid>
      <timestamp>2014-08-02T10:24:37Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <comment>/* Gli strumenti di costruzione */</comment>
      <sha1>ff7brbyh3ygf8f4awkp06ewklnm3ggy</sha1>
      <text xml:space="preserve" bytes="4596">{{VeryImportantMessage|This section is work in progress, for test. For now only in Italian.
There are no links that direct to this page.
Sezione in costruzione.}}
=PartDesign e i suoi strumenti=

{{TOCright}}

==Descrizione==

Part Design mette a disposizione gli strumenti per modellare delle parti solide complesse basate su dei disegni 2D. Non è un doppione di Part, è un ambiente pensato per lavorare su del materiale.&lt;br&gt;Di solito, in PartDesign la forma finale viene ottenuta lavorando una forma iniziale. Sovente, sia la forma iniziale che le lavorazioni sono realizzate utilizzando dei semplici disegni di base prodotti con l'ambiente [[Sketcher Workbench/it|Sketcher]], ma si possono usare anche altri flussi di lavoro. 

=== Gli strumenti di PartDesign ===

Gli strumenti dell'ambiente PartDesign sono tutti situati nel '''Menu PartDesign ''' che viene visualizzato quando si carica questo modulo.

====Gli strumenti di costruzione====

Sono gli strumenti per creare gli oggetti solidi o rimuovere del materiale da un oggetto solido esistente.

* [[Image:PartDesign_Pad.png|32px]] [[PartDesign_Pad/it|Prisma]]: Estrude lo schizzo selezionato - Questo strumento utilizza un disegno selezionato come input (lo &quot;schizzo scelto&quot;) per produrre un Pad. Ad esempio, se viene selezionato uno schizzo che contiene due cerchi concentrici e su di esso si usa lo strumento Pad si ottiene un tubo. Le estrusioni sono realizzate [http://en.wikipedia.org/wiki/Surface_normal normali] al piano su cui giace lo schizzo.&lt;br&gt;
Un Pad è una protuberanza realizzata estrudendo uno schizzo di base. (questa denominazione viene utilizzata per distinguere le operazioni realizzate con questo strumento da quelle realizzate con lo strumento &quot;estrusione&quot; di Part).
* [[Image:PartDesign_Pocket.png|32px]] [[PartDesign_Pocket/it|Scavo]]: Crea uno scavo o tasca da uno schizzo selezionato, ad es. un foro in una pistra. Lo schizzo deve essere posizionato sulla superficie di un oggetto solido. Gli scavi si realizzano [http://en.wikipedia.org/wiki/Surface_normal normali] al piano dello schizzo. Si può stabilire il verso e la profondità.
* [[Image:PartDesign_Revolution.png|32px]] [[PartDesign_Revolution/it|Rivoluzione]]: Crea un solido ruotando un disegno attorno ad un asse. Per ottenere un oggetto solido, il disegno deve avere un profilo chiuso. Numerose opzioni consentono di regolare e orientare la rotazione.
* [[Image:PartDesign_Groove.png|32px]] [[PartDesign_Groove/it|Scanalatura]]: Crea una scanalatura ruotando uno schizzo attorno ad un asse. Il disegno deve essere mappato sulla faccia di un oggetto solido.

====Gli strumenti di modifica====

Sono gli strumenti per modificare gli oggetti esistenti.

* [[Image:PartDesign_Fillet.png|32px]] [[PartDesign_Fillet/it|Raccordo]]: Raccorda (arrotonda) i bordi di un oggetto. Prestare attenzione alle differenze con il [[Part Fillet/it|Raccordo dell'ambiente Parte]]
* [[Image:PartDesign_Chamfer.png|32px]] [[PartDesign_Chamfer/it|Smusso]]: Smussa i bordi di un oggetto. Non deve essere confuso con lo [[Part_Chamfer/it|smusso di Part]].
* [[Image:PartDesign_Draft.png|32px]] [[PartDesign_Draft/it|Sformo]]: Applica uno sformo angolare alle facce di un oggetto.

====Gli strumenti di trasformazione====

Sono gli strumenti per trasformare gli elementi esistenti.

* [[Image:PartDesign_Mirrored.png|32px]] [[PartDesign_Mirrored/it|Rifletti]]: Operazione di simmetria su un piano o una faccia. Produce una copia di una operazione originale riflessa rispetto a un determinato piano.
* [[Image:PartDesign_LinearPattern.png|32px]] [[PartDesign_LinearPattern/it|Schiera lineare]]: Crea una schiera lineare di elementi.
* [[Image:PartDesign_PolarPattern.png|32px]] [[PartDesign_PolarPattern/it|Schiera polare]]: Crea una schiera polare di elementi.
* [[Image:PartDesign_Scaled.png|32px]] [[PartDesign_Scaled/it|Scala]]: Scala gli elementi in un formato differente.
* [[Image:PartDesign_MultiTransform.png|32px]] [[PartDesign_MultiTransform/it|MultiTrasformazione]]: Permette di creare una trasformazione con qualsiasi combinazione delle altre trasformazioni.

====I disegni di base====

Per vedere come creare gli schizzi di base fare riferimento alla pagina dedicata a [[Sketcher Workbench/it|Sketcher]].

Torna a [[Esercitazioni]]
{{clear}}

&lt;!-- {{Docnav/it|[[Mesh Module/it|Ambiente Mesh]]|[[Drawing Module/it|Ambiente Disegno - Proiezioni]]}}

{{languages/it | {{en|Part Module}} {{de|Part Module/de}} {{es|Part Module/es}} {{fr|Part Module/fr}} {{pl|Part Module/pl}} {{ru|Part Module/ru}} {{se|Part Module/se}} }} --&gt;

[[Category:User Documentation/it]]</text>
    </revision>
  </page>
  <page>
    <title>Test Ambiente Parte</title>
    <ns>0</ns>
    <id>9751</id>
    <revision>
      <id>41508</id>
      <parentid>36911</parentid>
      <timestamp>2013-09-19T20:49:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>imfo5q8x23zh8616t1fnu70parb7qna</sha1>
      <text xml:space="preserve" bytes="10085">{{VeryImportantMessage|This section is work in progress, for test. For now only in Italian.
There are no links that direct to this page.
Sezione in costruzione.}}
=Part e i suoi strumenti=

{{TOCright}}

==Descrizione==

Questo ambiente serve per creare degli oggetti di base parametrici di tipo Parte e per modellarli.&lt;br&gt;
In questo ambiente si possono anche lavorare quasi tutti gli elementi CAD 3D degli altri ambienti. 

==Gli strumenti==

Gli strumenti del modulo Parte sono tutti situati nel '''Menu Parte ''' che viene visualizzato quando si carica questo modulo.

=== Le primitive ===

Le primitive sono create con delle dimensioni (altezza, raggio, ecc,) predefinite che sono modificabili nelle schede delle proprietà.
Questi sono gli strumenti per creare gli oggetti primitivi.

[[Image:Part_Box.png|32px]] [[Part_Box/it|Prisma]]: Crea un semplice prisma parametrico,  con i parametri posizione, altezza, lunghezza e larghezza.&lt;br&gt;Di default, il prisma è un cubo e viene posizionato in corrispondenza dell'origine (il punto 0,0,0 è nell'anglo in basso a sinistra). 
Altezza (Height) è la dimensione sull'asse z. Lunghezza (Length) è la dimensione sull'asse x. Larghezza (Width) è la dimensione sull'asse y.


[[Image:Part_Cone.png|32px]] [[Part_Cone/it|Cono]]: Crea un semplice cono parametrico, con i parametri posizione, angolo, altezza, raggio 1 e raggio 2.&lt;br&gt;Di default, il cono viene creato con il centro del cerchio inferiore nel punto di origine, (0,0,0).&lt;br&gt;Il parametro angolo permette di creare una rivoluzione incompleta (porzione di cono, invece di un cono completo).&lt;br&gt;Le impostazione predefinite sono: angolo 360°, altezza 10 mm, raggio 1 (base) 2 mm, e raggio 2 (sommità) 4 mm.


[[Image:Part_Cylinder.png|32px]] [[Part_Cylinder/it|Cilindro]]: Crea un semplice cilindro  parametrico, con i parametri posizione, angolo, raggio e altezza.&lt;br&gt;Di default, viene creato un cilindro completo, con il centro della base posizionato nel punto 0, 0, 0, con un raggio di 2 mm, una altezza di 10 mm e un angolo di 360°.&lt;br&gt;Il parametro angolo permette la creazione di una porzione di cilindro. L'altezza è misurata sull'asse z. Il raggio è definito sul piano di x-y.


[[Image:Part_Sphere.png|32px]] [[Part_Sphere/it|Sfera]]: Crea una semplice Sfera parametrica, con i parametri posizione, raggio, angolo1, angolo2 e angolo3.&lt;br&gt;Di default, la sfera viene posizionata con il centro nel punto di origine (0,0,0), gli angoli sono -90°, 90° e 360° e ​​il raggio è 5 mm.&lt;br&gt;I parametri angolari permettono di creare una rivoluzione parziale (porzione di sfera) invece di una sfera completa. Di default . 


[[Image:Part_Torus.png|32px]] [[Part_Torus/it|Toro]]: Crea un semplice toro parametrico, con i parametri posizione, raggio1, raggio2, angolo1, angolo2 e angolo3. Il Toro viene creato con il suo centro nel punto di origine (0,0,0).&lt;br&gt;
Il parametro Angle3 permette di creare una rivoluzione parziale (settore di toro), invece di un toro completo.&lt;br&gt;
Di default, gli angoli sono definiti come segue: Angle1 -180°, Angle2 180°, Angle3 360°.&lt;br&gt;
I raggi 1 e 2 definiscono rispettivamente il raggio dell'anello e il raggio del tubo, e i volori di default sono 10 mm e 2 mm.


[[Image:Part_CreatePrimitives.png|32px]] [[Part_CreatePrimitives/it|Crea Primitive]]: Crea diverse geometrie primitive parametriche.&lt;br&gt;Attualmente lo strumento crea: [[Part_Plane/it|Piano]], [[Part_Box/it|Prisma]], [[Part_Cylinder/it|Cilindro]], [[Part_Cone/it|Cono]], [[Part_Sphere/it|Sfera]], Ellissoide,  [[Part Torus/it|Toro]], Cuneo, Elica, Cerchio, Ellisse, Linea (Bordo), Punto (Vertice).


[[Image:Part_Shapebuilder.png|32px]] [[Part_Shapebuilder/it|Generatore di forma]]: Crea diverse forme complesse basate su geometrie primitive parametriche. 

=== Le operazioni booleane ===

Queste operazioni sono una peculiarità dell'ambiente Part, sono operazioni completamente parametriche e i componenti possono essere modificati e il risultato ricalcolato.

[[Image:Part_Booleans.png|32px]] [[Part_Booleans/it|Booleana]]: E' uno strumento booleano generico tutto-in-uno che tramite la finestra di dialogo consente di specificare quale operazione eseguire e quali parametri utilizzare.&lt;br&gt;Per accedere più velocemente alle operazioni booleane, vedere [[Part Fuse/it | Unione ]], [[Part Common/it | Intersezione]], [[Part Cut/it | Sottrazione]], [[Part_Section/it|Sezione]].


[[Image:Part_Fuse.png|32px]] [[Part_Fuse/it|Unione]]: Fonde gli oggetti selezionati in uno solo.


[[Image:Part_Common.png|32px]] [[Part_Common/it|Intersezione]]: Estrae la parte comune (intersezione) tra gli oggetti selezionati.  


[[Image:Part_Cut.png|32px]] [[Part_Cut/it|Differenza]]: Sottrae un oggetto da un'altro, l'ultimo selezionato viene sottratto dal primo.

===Modificare gli oggetti===

Questi strumenti servono per modificare gli oggetti esistenti.

[[Image:Part_Extrude.png|32px]] [[Part_Extrude/it|Estrudi]]: Estrude una forma piana, ad esempio una geometria 2D, lungo una determinata direzione e crea una forma solida chiusa oppre guscio vuoto.&lt;br&gt;Una finestra di dialogo permette di scegliere l'asse, o la combinazione di assi, e la lunghezza di estrusione. 


[[Image:Part_Revolve.png|32px]] [[Part_Revolve/it|Rivoluziona]]: Ruota l'oggetto selezionato e crea una rivoluzione intorno a un dato asse. Si possono ruotare i seguenti tipi di oggetti che producono le corrispondenti forme:

{| class=&quot;wikitable&quot;
|-
! Forma originale
! Forma prodotta
|-
| Vertice
| Bordo
|-
| Bordo 
| Superficie
|-
| Wire (polilinea)
| Shell (guscio)
|-
| Faccia
| Solido
|-
| Shell 
| Solido composto
|}

I solidi o i solidi composti non sono ammessi come forme di ingresso. I solidi composti, attualmente, non sono ancora permessi. Le versioni future verificheranno le forme effettive e il tipo di oggetto composto.&lt;br&gt;L'argomento Angolo specifica di quanto l'oggetto deve essere ruotato. Le coordinate spostano l'origine dell'asse di rotazione, rispetto all'origine del sistema di coordinate.&lt;br&gt;If you select a user defined axis, the numbers define the direction of the revolving axis with respect to the coordinate system: If the Z coordinate is 0 and the Y and X coordinate are non-zero, then the axis will lie in the X-Y-plane.  Its angle is such that its tangent is the ratio of the given X and Y coordinates.


[[Image:Part_Mirror.png|32px]] [[Part_Mirror/it|Specchia]]: Crea un duplicato di una forma che è la riflessione della forma originale. Il duplicato viene creato tramite un piano di riflessione. Il piano di riflessione può essere un piano standard (XY, YZ o XZ), o qualsiasi piano parallelo a uno dei piani standard. 
* Selezionare l'oggetto sorgente nella lista.&lt;br&gt;
* Selezionare un Piano di specchiatura.&lt;br&gt;
* Definire un eventuale Punto base diverso da 0,0,0.&lt;br&gt;
* Premere OK per creare il duplicato.&lt;br&gt;
Le caselle Punto base possono essere utilizzate per spostare il piano di specchiatura parallelamente al piano standard selezionato (scostamento). Solo una delle caselle X, Y, e Z è attiva per un determinato piano.

{| class=&quot;wikitable&quot; border=&quot;1&quot;
!Piano Standard!!Punto Base!!Effetto
|- align=&quot;center&quot; 
|'''XY'''||'''Z'''|| align=&quot;left&quot; |Sposta il piano lungo l'asse '''Z'''.
|- align=&quot;center&quot;
|'''XY'''||'''X''', '''Y'''|| align=&quot;left&quot; |Nessun effetto.
|- align=&quot;center&quot;
|'''XZ'''||'''Y'''|| align=&quot;left&quot; |Sposta il piano lungo l'asse '''Y'''.
|- align=&quot;center&quot;
|'''XZ'''||'''X''', '''Z'''|| align=&quot;left&quot; |Nessun effetto.
|- align=&quot;center&quot;
|'''YZ'''||'''X'''|| align=&quot;left&quot; |Sposta il piano lungo l'asse '''X'''.
|- align=&quot;center&quot;
|'''YZ'''||'''Y''', '''Z'''|| align=&quot;left&quot; |Nessun effetto.
|}

Al momento non è possibile usare dei piani arbitrari, non paralleli ai piani standard, come piani di specchiatura.


[[Image:Part_Section.png|32px]] [[Part_Section/it|Seziona]]: Crea una sezione attraverso l'intersezione di due oggetti selezionati, l'ultimo oggetto viene utilizzato come piano di sezione. Questa operazione è completamente parametrica. 


[[Image:Part_SectionCross.png|32px]] [[Part_SectionCross/it|Sezioni...]]: Crea una sezione intersecando un oggetto con uno o più piani di sezione


[[Image:Part_Fillet.png|32px]] [[Part_Fillet/it|Raccorda]]: Raccorda (arrotonda) i bordi selezionati in un oggetto. Una finestra di dialogo consente di scegliere gli oggetti e i bordi su cui lavorare.
* Avviare lo strumento. Gli oggetti possono essere selezionati in precedenza.
* Se la forma non è stata selezionata in precedenza, è possibile selezionarla nel menu della scheda Azioni.
* Selezionare il Tipo di raccordo, a raggio costante (di default), oppure a raggio variabile.
* Selezionare gli Spigoli da raccordare, nella vista 3D, oppure nel pannello delle Azioni.
* Stabilire il valore del Raggio, poi 
* Confermare con il pulsante {{KEY/it|OK}}.
Anche PartDesign dipone uno strumento di raccordo. Ricordare che il suo funzionamento è molto diverso. Per le differenze vedere la pagina [[PartDesign Fillet/it|Raccordo di PartDesign]].


[[Image:Part_Chamfer.png|32px]] [[Part_Chamfer/it|Smussa]]: Smussa i bordi selezionati di un oggetto. Una finestra di dialogo consente di scegliere su quali oggetti e su quali bordi lavorare.


[[Image:Part_RuledSurface.png|32px]] [[Part_RuledSurface/it|Superficie rigata]]&amp;nbsp;&amp;nbsp;&amp;nbsp;


[[Image:Part_Sweep.png|32px]] [[Part_Sweep/it|Sweep]]: Estrude un profilo seguendo un percorso determinato (vers 0.13)


[[Image:Part_Loft.png|32px]] [[Part_Loft/it|Loft]]: Crea una estrusione tra due sagome diverse (vers 0.13)


[[Image:Part_Offset.png|32px]] [[Part_Offset/it|Offset]]: Crea una copia scalata dell'oggetto originale.


[[Image:Part_Thickness.png|32px]] [[Part_Thickness/it|Spessore]]: Attribuisce uno spessore alle facce di una forma.
{{clear}}


Torna a [[Esercitazioni]]
{{clear}}

&lt;!-- {{Docnav/it|[[Mesh Module/it|Ambiente Mesh]]|[[Drawing Module/it|Ambiente Disegno - Proiezioni]]}}

{{languages/it | {{en|Part Module}} {{de|Part Module/de}} {{es|Part Module/es}} {{fr|Part Module/fr}} {{pl|Part Module/pl}} {{ru|Part Module/ru}} {{se|Part Module/se}} }} --&gt;

[[Category:User Documentation/it]]</text>
    </revision>
  </page>
  <page>
    <title>Testing</title>
    <ns>0</ns>
    <id>185</id>
    <revision>
      <id>124887</id>
      <parentid>124770</parentid>
      <timestamp>2014-11-23T22:33:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>spelling</comment>
      <sha1>q2fkxii7hme03halh4x9e72h316nfhj</sha1>
      <text xml:space="preserve" bytes="1039">
&lt;!--T:1--&gt;
FreeCAD comes with an extensive testing framework. The testing bases on a set of Python scripts which are located in the test module.

== Introduction == &lt;!--T:2--&gt;
This is the list of test apps as of 0.15 Git 4207:

=== TestAPP.All === &lt;!--T:3--&gt;
Add test function

=== BaseTests === &lt;!--T:5--&gt;
Add test function

=== UnitTests === &lt;!--T:6--&gt;
Add test function

=== Document === &lt;!--T:7--&gt;
Add test function

=== UnicodeTests === &lt;!--T:8--&gt;
Add test function

=== MeshTestsApp === &lt;!--T:9--&gt;
Add test function

=== TestSketcherApp === &lt;!--T:10--&gt;
Add test function

=== TestPartApp === &lt;!--T:11--&gt;
Add test function

=== TestPartDesignApp === &lt;!--T:12--&gt;
Add test function

=== Workbench === &lt;!--T:13--&gt;
Add test function

=== Menu === &lt;!--T:14--&gt;
Add test function

=== Menu.MenuDeleteCases === &lt;!--T:15--&gt;
Add test function

=== Menu.MenuCreateCases === &lt;!--T:16--&gt;
Add test function

&lt;!--T:17--&gt;
{{docnav|Debugging|Branding}}

&lt;!--T:18--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>The App and Gui modules</title>
    <ns>0</ns>
    <id>186</id>
    <revision>
      <id>108117</id>
      <parentid>89287</parentid>
      <timestamp>2014-09-01T20:02:55Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Third Party Libraries</title>
    <ns>0</ns>
    <id>187</id>
    <revision>
      <id>119350</id>
      <parentid>119349</parentid>
      <timestamp>2014-11-08T17:52:48Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>g2d4lce850rw6cdgsx8b8nr4aaec2sn</sha1>
      <text xml:space="preserve" bytes="12155">
=== Overview ===  &lt;!--T:1--&gt;
These are libraries which are not changed in the FreeCAD project. They are basically used unchanged as a dynamic link library (*.so or *.dll). If there is a change necessary or a wrapper class is needed, then the code of the wrapper or the changed library code have to be moved to the FreeCAD base package.
The used libraries are:

&lt;!--T:2--&gt;
Consider using [[#LibPack|LibPack]] instead of downloading and installing all the stuff on your own.

=== Links === &lt;!--T:3--&gt; 

&lt;!--T:4--&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align:left&quot;
|+ Link table
|-
! Lib name             !! Version needed    !! Link to get it    
|-               
| Python               || &gt;= 2.5.x          || http://www.python.org/           
|-               
| OpenCasCade          || &gt;= 5.2            || http://www.opencascade.org       
|-               
| Qt                   || &gt;= 4.1.x          || http://www.qtsoftware.com              
|-               
| Coin3D               || &gt;= 2.x            || http://www.coin3d.org            
|-               
| ODE                  || &gt;= 0.10.x         || http://www.ode.org            
|-               
| SoQt                 || &gt;= 1.2            || http://www.coin3d.org            
|-               
| Xerces-C++           || &gt;= 2.7.x &lt; 3.0    || http://xml.apache.org/xerces-c/  
|-               
| GTS                  || &gt;= 0.7.x          || http://gts.sourceforge.net/      
|-               
| Zlib                 || &gt;= 1.x.x          || http://www.zlib.net/             
|-               
| Boost                || &gt;= 1.33.x         || http://www.boost.org/   
|-               
| Eigen3               || &gt;= 3.0.1          || http://eigen.tuxfamily.org/index.php?title=Main_Page   
|}

=== Details === &lt;!--T:5--&gt; 

==== Python ==== &lt;!--T:6--&gt;
'''Version:''' 2.5 or higher

&lt;!--T:7--&gt;
'''License:''' Python 2.5 license

&lt;!--T:8--&gt;
You can use the source or binary from http://www.python.org/ or use alternetivly ActiveState Python from http://www.activestate.com/ though it is a little bit hard to get the debug libs from ActiveState.

===== Description =====  &lt;!--T:9--&gt;
Python is the primary scripting language and is used throughout the application.
For example:
* Implement test scripts for testing on:
** memory leaks
** ensure presents of functionality after changes
** post build checks
** test coverage tests
* Macros and macro recording
* Implement application logic for standard packages
* Implementation of whole workbenches
* Dynamic loading of packages
* Implementing rules for design (Knowledge engineering)
* Doing some fancy Internet stuff like work groups and PDM
* And so on ...

&lt;!--T:10--&gt;
Especially the dynamic package loading of Python is used to load at run time additional functionality and workbenches needed for the actual tasks. For a closer look to Python see: www.python.org Why Python you may ask. There are some reasons: So far I used different scripting languages in my professional life:
* Perl
* Tcl/Tk
* VB
* Java
Python is more OO then Perl and Tcl, the code is not a mess like in Perl and VB. Java isn't a script language in the first place and hard (or impossible) to embed. Python is well documented and easy to embed and extend. It is also well tested and has a strong back hold in the open source community.

===== Credits ===== &lt;!--T:11--&gt;
Goes to Guido van Rossum and a lot of people made Python such a success!

==== OpenCasCade ==== &lt;!--T:12--&gt; 

&lt;!--T:13--&gt;
'''Version:''' 5.2 or higher

&lt;!--T:14--&gt;
'''License:''' OCTPL

&lt;!--T:15--&gt;
OCC is a full-featured CAD Kernel. Originally, it's developed by Matra Datavision in France for the Strim (Styler) and Euclid Quantum applications and later on made Open Source. It's a really huge library and makes a free CAD application possible in the first place, by providing some packages which would be hard or impossible to implement in an Open Source project:
* A complete STEP compliant geometry kernel
* A topological data model and all needed functions to work on (cut, fuse, extrude, and so on. . . )
* Standard Import- / Export processors like STEP, IGES, VRML
* 3D and 2D viewer with selection support
* A document and project data structure with support for save and restore, external linking of documents, recalculation of design history (parametric modeling) and a facility to load new data types as an extension package dynamically

&lt;!--T:16--&gt;
To learn more about OpenCasCade take a look at the OpenCasCade page or http://www.opencascade.org.

==== Qt ==== &lt;!--T:17--&gt; 

&lt;!--T:18--&gt;
'''Version:''' 4.1.x or higher

&lt;!--T:19--&gt;
'''License:''' GPL v2.0/v3.0 or Commercial (from version 4.5 on also LPGL v2.1)

&lt;!--T:20--&gt;
I don't think I need to tell a lot about Qt. It's one of the most often used GUI toolkits in Open Source projects. For me the most important point to use Qt is the Qt Designer and the possibility to load whole dialog boxes as a (XML) resource and incorporate specialized widgets. In a CAX application the user interaction and dialog boxes are by far the biggest part of the code and a good dialog designer is very important to easily extend FreeCAD with new functionality. Further information and a very good online documentation you'll find on http://www.qtsoftware.com.

==== Coin3D ==== &lt;!--T:21--&gt; 

&lt;!--T:22--&gt;
'''Version:''' 2.0 or higer

&lt;!--T:23--&gt;
'''License:''' GPL v2.0 or Commercial

&lt;!--T:24--&gt;
Coin is a high-level 3D graphics library with a C++ Application Programming Interface. Coin uses scenegraph data structures to render real-time graphics suitable for mostly all kinds of scientific and engineering visualization applications.

&lt;!--T:25--&gt;
Coin is portable over a wide range of platforms: any UNIX / Linux / *BSD platform, all Microsoft Windows operating system, and Mac OS X.

&lt;!--T:26--&gt;
Coin is built on the industry-standard OpenGL immediate mode rendering library, and adds abstractions for higher-level primitives, provides 3D interactivity, immensely increases programmer convenience and productivity, and contains many complex optimization features for fast rendering that are transparent for the application programmer.

&lt;!--T:27--&gt;
Coin is based on the SGI Open Inventor API. Open Inventor, for those who are not familiar with it, has long since become the de facto standard graphics library for 3D visualization and visual simulation software in the scientific and engineering community. It has proved it's worth over a period of more than 10 years, its maturity contributing to its success as a major building block in thousands of large-scale engineering applications around the world.

&lt;!--T:28--&gt;
We will use OpenInventor as 3D viewer in FreeCAD because the OpenCasCade viewer (AIS and Graphics3D) has serios limitations and performace bottlenecks, especially when it goes in large-scale engineering rendering. Other things like textures or volumetric rendering are not really supported, and so on ....

&lt;!--T:29--&gt;
Since Version 2.0 Coin uses a different licence model. It's not longer LGPL. They use GPL for open source and a commercial licence for closed source. That means if you want to sell your work based on FreeCAD (extension modules) you need to purchase a Coin licence!

==== ODE (Open dynamic engine) ==== &lt;!--T:30--&gt;

&lt;!--T:31--&gt;
'''Version:''' 0.10.0 or higher

&lt;!--T:32--&gt;
'''License:''' LGPL v2.1 or later or BSD

&lt;!--T:33--&gt;
ODE is an open source, high performance library for simulating rigid body dynamics. It is fully featured, stable, mature and platform independent with an easy to use C/C++ API. It has advanced joint types and integrated collision detection with friction. ODE is useful for simulating vehicles, objects in virtual reality environments and virtual creatures. It is currently used in many computer games, 3D authoring tools and simulation tools. 

===== Credits ===== &lt;!--T:34--&gt;
Russell Smith is the primary author of ODE.


==== SoQt ==== &lt;!--T:35--&gt; 

&lt;!--T:36--&gt;
'''Version:''' 1.2.0 or higher

&lt;!--T:37--&gt;
'''License:''' GPL v2.0 or Commercial

&lt;!--T:38--&gt;
SoQt is the Inventor binding to the Qt Gui Toolkit. Unfortunately, it's not longer LGPL so we have to remove it from the code base of FreeCAD and link it as a library. It has the same licence model like Coin. And you have to compile it with your version of Qt.

==== Xerces-C++ ==== &lt;!--T:39--&gt; 

&lt;!--T:40--&gt;
'''Version:''' 2.7.0 or higher

&lt;!--T:41--&gt;
'''License:''' Apache Software License Version 2.0

&lt;!--T:42--&gt;
Xerces-C++ is a validating XML parser written in a portable subset of C++. Xerces-C++ makes it easy to give your application the ability to read and write XML data. A shared library is provided for parsing, generating, manipulating, and validating XML documents.

&lt;!--T:43--&gt;
Xerces-C++ is faithful to the XML 1.0 recommendation and many associated standards (see Features below).

&lt;!--T:44--&gt;
The parser provides high performance, modularity, and scalability. Source code, samples and API documentation are provided with the parser. For portability, care has been taken to make minimal use of templates, no RTTI, and minimal use of #ifdefs.

&lt;!--T:45--&gt;
The parser is used for saving and restoring parameters in FreeCAD.

==== GTS ==== &lt;!--T:46--&gt; 

&lt;!--T:47--&gt;
'''Version:''' 0.7.x

&lt;!--T:48--&gt;
'''License:''' LGPL v2.0 or later

&lt;!--T:49--&gt;
GTS stands for the GNU Triangulated Surface Library. It is an Open Source Free Software Library intended to provide a set of useful functions to deal with 3D surfaces meshed with interconnected triangles. The source code is available free of charge under the Free Software LGPL license.

&lt;!--T:50--&gt;
Actually not needed to compile FreeCAD. You can switch on the usage with a proprocessor switch in FCConfig.h.

==== Zlib ==== &lt;!--T:51--&gt; 

&lt;!--T:52--&gt;
'''Version:''' 1.x.x

&lt;!--T:53--&gt;
'''License:''' zlib License

&lt;!--T:54--&gt;
zlib is designed to be a free, general-purpose, legally unencumbered -- that is, not covered by any patents -- lossless data-compression library for use on virtually any computer hardware and operating system. The zlib data format is itself portable across platforms. Unlike the LZW compression method used in Unix compress(1) and in the GIF image format, the compression method currently used in zlib essentially never expands the data. (LZW can double or triple the file size in extreme cases.) zlib's memory footprint is also independent of the input data and can be reduced, if necessary, at some cost in compression. 



==== Boost ==== &lt;!--T:55--&gt; 

&lt;!--T:56--&gt;
'''Version:''' 1.33.x

&lt;!--T:57--&gt;
'''License:''' Boost Software License - Version 1.0

&lt;!--T:58--&gt;
The Boost C++ libraries are a collection of peer-reviewed, open source libraries that extend the functionality of C++. The libraries are licensed under the Boost Software License, designed to allow Boost to be used with both open and closed source projects. Many of Boost's founders are on the C++ standard committee and several Boost libraries have been accepted for incorporation into the Technical Report 1 of C++0x.

&lt;!--T:59--&gt;
The libraries are aimed at a wide range of C++ users and application domains. They range from general-purpose libraries like SmartPtr, to OS Abstractions like FileSystem, to libraries primarily aimed at other library developers and advanced C++ users, like MPL.

&lt;!--T:60--&gt;
In order to ensure efficiency and flexibility, Boost makes extensive use of templates. Boost has been a source of extensive work and research into generic programming and meta-programming in C++.

&lt;!--T:61--&gt;
See: http://www.boost.org/ for details.

=== LibPack === &lt;!--T:62--&gt;
LibPack is a convenient package with all the above libraries packed together. It is currently available for the 
Windows platform on the [[Download]] page! If you're working under Linux you don't need a LibPack, instead of you should make use of the package repositories of your Linux distribution. 

==== FreeCADLibs7.x Changelog ==== &lt;!--T:63--&gt;
* Using QT 4.5.x and Coin 3.1.x
* Eigen template lib for Robot added
* SMESH experimental 


&lt;!--T:64--&gt;
{{docnav|CompileOnMac|Third Party Tools}}

&lt;!--T:65--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Third Party Tools</title>
    <ns>0</ns>
    <id>188</id>
    <revision>
      <id>115032</id>
      <parentid>115031</parentid>
      <timestamp>2014-10-16T19:25:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>o59qmgndu1n4f7ntl0wjlz46d4m3a7m</sha1>
      <text xml:space="preserve" bytes="2867">
== Tool Page == &lt;!--T:1--&gt;
For every serious software development you need tools. Here is a list of tools we use to develop FreeCAD:

=== Platform independend tools === &lt;!--T:2--&gt;
 
==== Qt-Toolkit ====
The Qt-toolkit is a state of the art, plattform independend user interface design tool. It is contained in the [[Third Party Libraries|LibPack]] of FreeCAD, but can also be downloaded at [http://qt-project.org/downloads Qt project].

==== InkScape ==== &lt;!--T:3--&gt;
Great vector drawing programm. Adhers to the SVG standard and is used to draw Icons and Pictures. Get it at [http://www.inkscape.org www.inkscape.org].

==== Doxygen ==== &lt;!--T:4--&gt;
A very good and stable tool to generate source documentation from the .h and .cpp files.

==== The Gimp ==== &lt;!--T:5--&gt;
Not much to say about the Gnu Image Manipulation Program. Besides it can handle .xpm files which is a very convenient way to handle Icons in QT Programms. XPM is basicly C-Code which can be compiled into a programme.

&lt;!--T:6--&gt;
Get the GIMP here: [http://www.gimp.org/ www.gimp.org]

=== Tools on Windows === &lt;!--T:7--&gt;

==== Visual Studio 8 Express ==== &lt;!--T:8--&gt;
Although VC8 is for C++ development not really a step forward since VisualStudio 6 (IMO a big step back), its a free development system on Windows. For native Win32 applications you need to download the PlatformSDK from M$. 

&lt;!--T:9--&gt;
So the Express edition is hard to find. But you might try [http://msdn.microsoft.com/vstudio/express/visualc/default.aspx this link]

==== CamStudio ==== &lt;!--T:10--&gt;
Is a Open Source tool to record Screencasts (Webcasts). Its a very good tool to create tutorials by recording them. Its far not so boring as writing documentation.  

&lt;!--T:11--&gt;
See [http://camstudio.org/ camstudio.org] for details.


==== Tortoise SVN ==== &lt;!--T:12--&gt;
This is a very great tool. It makes using Subversion (our version control system on sf.net) a real pleasure. You can throught out the explorer integration, easily manage Revisions, check on Diffs, resolve Confilcts, make branches, and so on.... The commit dialog itself is a piece of art. It gives you an overview over your changed files and allows you to put them in the commit or not. That makes it easy to bundle the changes to logical units and give them an clear commit message.

&lt;!--T:13--&gt;
You find ToroiseSVN on [http://tortoisesvn.tigris.org/ tortoisesvn.tigris.org].

==== StarUML ==== &lt;!--T:14--&gt;
A full featured Open Source UML programm. It has a lot of features of the big ones, including reverse engeniering C++ source code....

&lt;!--T:15--&gt;
Download here: [http://staruml.sourceforge.net/en/ staruml.sourceforge.net]


=== Tools on Linux === &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
TODO

&lt;!--T:18--&gt;
{{docnav|Third Party Libraries|Start up and Configuration}}

&lt;!--T:19--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Tip of the day</title>
    <ns>0</ns>
    <id>189</id>
    <revision>
      <id>127220</id>
      <parentid>127219</parentid>
      <timestamp>2014-12-01T21:29:15Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>j9ongruhnn7331q2qo2eaqiu7eu9ohd</sha1>
      <text xml:space="preserve" bytes="890">
&lt;!--T:1--&gt;
The tip of the day page gather all topics shown to the user if he/she uses the &quot;Tip of the day&quot; dialog.

&lt;!--T:2--&gt;
* Tip 1 (Introduction)
You find the latest information and tutorials on FreeCAD on the FreeCADDocu Wiki on http://free-cad.sf.net/ 

&lt;!--T:3--&gt;
Here is also the first place to find help and contribute.

&lt;!--T:4--&gt;
* Tip 2 (Tip of the day)
You can contribute to the &quot;Tip of the day&quot; topics by visiting the Tip of the day page on the FreeCADDocu Wiki.

&lt;!--T:5--&gt;
http://apps.sourceforge.net/mediawiki/free-cad/index.php?title=Tip_of_the_day

&lt;!--T:6--&gt;
* Tip 3 (Freeze views)
You can freeze the camera position of the current 3D view. Go to View-&gt;Freeze views-&gt;Freeze view (or simply press SHIFT+F).

&lt;!--T:7--&gt;
Frozen views can also be exported to or imported from an external file.


&lt;!--T:8--&gt;
[[Category:Help]]



{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>TopoShape API</title>
    <ns>0</ns>
    <id>753</id>
    <revision>
      <id>133282</id>
      <parentid>133197</parentid>
      <timestamp>2014-12-23T23:03:43Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>8j6lftdtfl66j9s7b7x5k3a015u0ede</sha1>
      <text xml:space="preserve" bytes="8928">
&lt;!--T:6--&gt;
The TopoShape is the mother object of the Part Module. All shape types (wire, face, solid, etc...) of the Part module are TopoShapes, and share the following attributes and methods. Example:

{{Code|code=
import Part
sh = Part.makeBox(10,10,10)
print sh.Faces
for f in sh.Faces:
   print f.Edges
}}



&lt;!--T:7--&gt;
{{APIProperty|Area|The total area of the faces of the shape.}}
{{APIProperty|BoundBox|The BoundBox of the object}}
{{APIProperty|CenterOfMass|The center of mass of the current system. If the gravitational field is uniform, it is the center of gravity. The coordinates returned for the center of mass are expressed in the absolute Cartesian coordinate system.}}
{{APIProperty|CompSolids|Lists the subsequent shapes in this shape.}}
{{APIProperty|Compounds|Lists the coumpounds in this shape.}}
{{APIProperty|Edges|Lists the Edges in this shape.}}
{{APIProperty|Faces|Lists the faces in this shape.}}
{{APIProperty|Length|Total length of the edges of the shape.}}
{{APIProperty|Matrix|The current transformation of the object as matrix}}
{{APIProperty|Orientation|the orientation of the shape.}}
{{APIProperty|Placement|The current transformation of the object as placement}}
{{APIProperty|ShapeType|The type of the shape.}}
{{APIProperty|Shells|Lists the subsequent shapes in this shape.}}
{{APIProperty|Solids|List of subsequent shapes in this shape.}}
{{APIProperty|Vertexes|List of vertexes in this shape.}}
{{APIProperty|Volume|Total volume of the solids of the shape.}}
{{APIProperty|Wires|List of wires in this shape.}}
{{APIFunction|approximate| |Approximates a B-Spline-curve from this wire|a BSplineCurve object}}
{{APIFunction|check| |Checks the shape and report errors in the shape structure. This is a more detailed check as done in isValid().| }}
{{APIFunction|common|TopoShape|Intersection of this and a given topo shape.|a TopoShape}}
{{APIFunction|complement| |Computes the complement of the orientation of this shape, i.e. reverses the interior/exterior status of boundaries of this shape.|a TopoShape}}
{{APIFunction|copy| |Creates a copy of this shape|a TopoShape}}
{{APIFunction|cut|TopoShape|Difference of this and a given topo shape.|a TopoShape}}
{{APIFunction|distToShape| TopoShape |Calculates the minimum distance between this and a given TopoShape.|float&lt;minimum distance&gt;,list&lt;nearest points&gt;,list&lt;nearest subshapes &amp; parameters&gt; }}
{{APIFunction|exportBrep| string |Exports the content of this shape to an BREP file. BREP is a CasCade native format.| }}
{{APIFunction|exportIges| string |Exports the content of this shape to an IGES file.| }}
{{APIFunction|exportStep| string |Exports the content of this shape to an STEP file.| }}
{{APIFunction|exportStl| string |Exports the content of this shape to an STL mesh file.| }}
{{APIFunction|extrude|Vector|Extrudes the shape along a direction.|a TopoShape}}
{{APIFunction|fuse|TopoShape|Union of this and a given topo shape.|a TopoShape}}
{{APIFunction|getAllDerivedFrom| |Returns all descentences of this object type|a list}}
{{APIFunction|hashCode| |This value is computed from the value of the underlying shape reference and the location. Orientation is not taken into account.|a string}}
{{APIFunction|isClosed| |Checks if the shape is closed.|a boolean}}
{{APIFunction|isDerivedFrom|string|Returns true if given type is a father|boolean}}
{{APIFunction|isEqual|TopoShape|Checks if both shapes are equal.|a boolean}}
{{APIFunction|isInside|Vector,float,Boolean|Checks if a point is inside a solid with a certain tolerance. If the 3rd parameter is True a point on a face is considered as inside|a boolean}}
{{APIFunction|isNull| |Checks if the shape is null.|a boolean}}
{{APIFunction|isSame|TopoShape|Checks if both shapes share the same geometry.|a boolean}}
{{APIFunction|isValid| |Checks if the shape is valid, i.e. neither null, nor empty nor corrupted.|a boolean}}
{{APIFunction|makeFillet|float,TopoShape|Returns a new object based on TopoShape, but with a fillet of radius 'float' applied to each edge.|a TopoShape}}
{{APIFunction|makeHomogenousWires|wire|Makes this and the given wire homogenous to have the same number of edges| a wire}}
{{APIFunction|makeOffset|float|Offsets the shape by a given ammount|a TopoShape}}
{{APIFunction|makePipe|wire|Makes a pipe by sweeping along a wire.|a TopoShape}}
{{APIFunction|makePipeShell|wire|Makes a loft defined by profiles along a wire.|a TopoShape}}
{{APIFunction|makeShapeFromMesh|mesh|Makes a compound shape out of mesh data. Note: This should be used for rather small meshes only.|a TopoShape}}
{{APIFunction|makeThickness|list,float,float|A hollowed solid is built from an initial solid and a set of faces on this solid, which are to be removed. The remaining faces of the solid become the walls of the hollowed solid, their thickness defined at the time of construction. The arguments to be passed are a list of faces to be skipped, the thickness of the walls and a tolerance value.|a TopoShape}}
{{APIFunction|nullify| |Destroys the reference to the underlying shape stored in this shape. As a result, this shape becomes null.|}}
{{APIFunction|project|TopoShape|Project a shape on this shape|a TopoShape}}
{{APIFunction|read|string|Reads in an IGES, STEP or BREP file.|a TopoShape}}
{{APIFunction|reverse| |Reverses the orientation of this shape.| }}
{{APIFunction|revolve|Vector, Vector, float|Revolves the shape around a Axis to a given degree. ex: Part.revolve(Vector(0,0,0),Vector(0,0,1),360) revolves the shape around the Z Axis 360 degree.|a TopoShape}}
{{APIFunction|rotate|Vector&lt;position&gt;, Vector&lt;direction&gt;, float&lt;angle&gt;|Rotates this shape by angle degrees around an axis specified by position and direction. ex: Shp.rotate(Vector(0,0,0),Vector(0,0,1),180) rotate the shape around the Z Axis 180 degrees.| }}
{{APIFunction|scale|float&lt;factor&gt;, [Vector&lt;centre&gt;]|Uniformly scales this shape by factor. Optionally specify centre of scaling transformation.| }}
{{APIFunction|section|TopoShape|Section of this with a given topo shape.|a TopoShape}}
{{APIFunction|sewShape| |Sews the shape if there is a gap.| }}
{{APIFunction|tessellate|float|Tessellate the the shape and return a list of vertices and face indices. The given float is the tolerance.|a list}}
{{APIFunction|toNurbs| |Conversion of the complete geometry of a shape into NURBS geometry. For example, all curves supporting edges of the basis shape are converted into BSpline curves, and all surfaces supporting its faces are converted into BSpline surfaces.|a NURBS curve}}
{{APIFunction|transformGeometry|matrix|Applies geometric transformation on a copy of the shape. The transformation to be applied is defined as a 4x4 matrix. The underlying geometry of the following shapes may change to a curve which supports an edge of the shape, or a surface which supports a face of the shape. For example, a circle may be transformed into an ellipse when applying an affinity transformation. It may also happen that the circle then is represented as a b-spline curve. The transformation is applied to all the curves which support edges of the shape, and all the surfaces which support faces of the shape. Note: If you want to transform a shape without changing the underlying geometry then use the methods translate or rotate.|a TopoShape}}
{{APIFunction|transformShape|matrix|Applies transformation on a shape without changing the underlying geometry.| }}
{{APIFunction|translate|Vector|Applies the translation to the current location of this shape.| }}
{{APIFunction|writeInventor| |Writes the mesh in OpenInventor format to a string.|a string}}

&lt;!--T:8--&gt;
Some attributes and methods apply only to certain TopoShapes. These items apply to Edges (TopoShapeEdge).  


&lt;!--T:9--&gt;
{{APIProperty|FirstParameter|The parameter value at one end of the Edge. Not necessarily at Vertex[0]. [http://en.wikipedia.org/wiki/Parametric_equations See Parametric Equations]}}
{{APIProperty|LastParameter|The parameter value at the other end of the Edge. Not necessarily at Vertex[1].}}
{{APIFunction|getParameterByLength|Float|Maps the interval [0,Length] to the interval [FirstParameter,LastParameter]|Float }}
{{APIFunction|valueAt|Float|Returns the 3D vector corresponding to a parameter value.|Vector}}
{{APIFunction|parameterAt|Vertex,[Face]|Returns the parameter value corresponding to a Vertex (3D point).|Float}}
{{APIFunction|tangentAt|Float|Returns the direction vector of the tangent to the edge at a parameter value (if it exists).|Vector}}
{{APIFunction|normalAt|Float|Returns the direction vector of the normal to the edge at a parameter value (if it exists uniquely).|Vector}}
{{APIFunction|curvatureAt|Float|Returns the curvature of the edge at a parameter value.|Float}}
{{APIFunction|centerOfCurvatureAt|Float|Returns the center (3D point) of the osculating circle at a parameter value.|Vector}}


&lt;!--T:10--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Topological data scripting</title>
    <ns>0</ns>
    <id>190</id>
    <revision>
      <id>133480</id>
      <parentid>125308</parentid>
      <timestamp>2014-12-26T21:06:57Z</timestamp>
      <contributor>
        <username>Quick61</username>
        <id>3300</id>
      </contributor>
      <sha1>kh8nef75zkems4mj4539ro52k2didoz</sha1>
      <text xml:space="preserve" bytes="35549">
&lt;!--T:1--&gt;
This page describes several methods for creating and modifying [[Part Module|Part shapes]] from python. Before reading this page, if you are new to python, it is a good idea to read about [[Introduction to Python|python scripting]] and [[FreeCAD Scripting Basics|how python scripting works in FreeCAD]].

== Introduction == &lt;!--T:2--&gt;
We will here explain you how to control the [[Part Module]] directly from the FreeCAD python interpreter, or from any external script. The basics about Topological data scripting are described in [[Part_Module#Explaining_the_concepts|Part Module Explaining the concepts]].  Be sure to browse the [[Scripting]] section and the [[FreeCAD Scripting Basics]] pages if you need more information about how python scripting works in FreeCAD.

=== Class Diagram === &lt;!--T:3--&gt;
This is a [http://en.wikipedia.org/wiki/Unified_Modeling_Language Unified Modeling Language (UML)] overview of the most important classes of the Part module:
[[Image:Part_Classes.jpg|center|Python classes of the Part module]]

=== Geometry === &lt;!--T:4--&gt;
The geometric objects are the building block of all topological objects:
* '''Geom''' Base class of the geometric objects
* '''Line''' A straight line in 3D, defined by starting point and end point
* '''Circle''' Circle or circle segment defined by a center point and start and end point
* '''......''' And soon some more

=== Topology === &lt;!--T:5--&gt;
The following topological data types are available:
* '''Compound''' A group of any type of topological object.
* '''Compsolid''' A composite solid is a set of solids connected by their faces. It expands the notions of WIRE and SHELL to solids.
* '''Solid''' A part of space limited by shells. It is three dimensional.
* '''Shell''' A set of faces connected by their edges. A shell can be open or closed.
* '''Face''' In 2D it is part of a plane; in 3D it is part of a surface. Its geometry is constrained (trimmed) by contours. It is two dimensional.
* '''Wire''' A set of edges connected by their vertices. It can be an open or closed contour depending on whether the edges are linked or not.
* '''Edge''' A topological element corresponding to a restrained curve. An edge is generally limited by vertices. It has one dimension.
* '''Vertex''' A topological element corresponding to a point. It has zero dimension.
* '''Shape''' A generic term covering all of the above.

=== Quick example : Creating simple topology === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
[[Image:Wire.png|right|Wire]]

&lt;!--T:8--&gt;
We will now create a topology by constructing it out of simpler geometry. 
As a case study we use a part as seen in the picture which consists of 
four vertexes, two circles and two lines.

==== Creating Geometry ==== &lt;!--T:9--&gt;
First we have to create the distinct geometric parts of this wire.
And we have to take care that the vertexes of the geometric parts 
are at the '''same''' position. Otherwise later on we might not be
able to connect the geometric parts to a topology!

&lt;!--T:10--&gt;
So we create first the points:

&lt;syntaxhighlight&gt;
from FreeCAD import Base
V1 = Base.Vector(0,10,0)
V2 = Base.Vector(30,10,0)
V3 = Base.Vector(30,-10,0)
V4 = Base.Vector(0,-10,0)
&lt;/syntaxhighlight&gt;

==== Arc ==== &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
[[Image:Circel.png|right|Circle]]

&lt;!--T:13--&gt;
To create an arc of circle we make a helper point and create the arc of 
circle through three points:

&lt;syntaxhighlight&gt;
VC1 = Base.Vector(-10,0,0)
C1 = Part.Arc(V1,VC1,V4)
# and the second one
VC2 = Base.Vector(40,0,0)
C2 = Part.Arc(V2,VC2,V3)
&lt;/syntaxhighlight&gt;

==== Line ==== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
[[Image:Line.png|right|Line]]

&lt;!--T:16--&gt;
The line can be created very simple out of the points:

&lt;syntaxhighlight&gt;
L1 = Part.Line(V1,V2)
# and the second one
L2 = Part.Line(V4,V3)
&lt;/syntaxhighlight&gt;

==== Putting all together ==== &lt;!--T:17--&gt;
The last step is to put the geometric base elements together
and bake a topological shape:

&lt;syntaxhighlight&gt;
S1 = Part.Shape([C1,C2,L1,L2])
&lt;/syntaxhighlight&gt;

==== Make a prism ==== &lt;!--T:18--&gt;
Now extrude the wire in a direction and make an actual 3D shape:

&lt;syntaxhighlight&gt;
W = Part.Wire(S1.Edges)
P = W.extrude(Base.Vector(0,0,10))
&lt;/syntaxhighlight&gt;

==== Show it all ==== &lt;!--T:19--&gt;

&lt;syntaxhighlight&gt;
Part.show(P)
&lt;/syntaxhighlight&gt;

== Creating basic shapes == &lt;!--T:20--&gt;
You can easily create basic topological objects with the &quot;make...()&quot; 
methods from the Part Module:

&lt;syntaxhighlight&gt;
b = Part.makeBox(100,100,100)
Part.show(b)
&lt;/syntaxhighlight&gt;

&lt;!--T:21--&gt;
A couple of other make...() methods available:
* '''makeBox(l,w,h)''': Makes a box located in p and pointing into the direction d with the dimensions (l,w,h)
* '''makeCircle(radius)''': Makes a circle with a given radius
* '''makeCone(radius1,radius2,height)''': Makes a cone with a given radii and height
* '''makeCylinder(radius,height)''': Makes a cylinder with a given radius and height.
* '''makeLine((x1,y1,z1),(x2,y2,z2))''': Makes a line of two points
* '''makePlane(length,width)''': Makes a plane with length and width
* '''makePolygon(list)''': Makes a polygon of a list of points
* '''makeSphere(radius)''': Make a sphere with a given radius
* '''makeTorus(radius1,radius2)''': Makes a torus with a given radii
See the [[Part API]] page for a complete list of available methods of the Part module.

==== Importing the needed modules ==== &lt;!--T:22--&gt;
First we need to import the Part module so we can use its contents in python. 
We'll also import the Base module from inside the FreeCAD module:

&lt;syntaxhighlight&gt;
import Part
from FreeCAD import Base
&lt;/syntaxhighlight&gt;

==== Creating a Vector ==== &lt;!--T:23--&gt;
[http://en.wikipedia.org/wiki/Euclidean_vector Vectors] are one of the most 
important pieces of information when building shapes. They contain a 3 numbers 
usually (but not necessarily always) the x, y and z cartesian coordinates. You 
create a vector like this:

&lt;syntaxhighlight&gt;
myVector = Base.Vector(3,2,0)
&lt;/syntaxhighlight&gt;

&lt;!--T:24--&gt;
We just created a vector at coordinates x=3, y=2, z=0. In the Part module, 
vectors are used everywhere. Part shapes also use another kind of point 
representation, called Vertex, which is acually nothing else than a container 
for a vector. You access the vector of a vertex like this:

&lt;syntaxhighlight&gt;
myVertex = myShape.Vertexes[0]
print myVertex.Point
&gt; Vector (3, 2, 0)
&lt;/syntaxhighlight&gt;

==== Creating an Edge ==== &lt;!--T:25--&gt;
An edge is nothing but a line with two vertexes:

&lt;syntaxhighlight&gt;
edge = Part.makeLine((0,0,0), (10,0,0))
edge.Vertexes
&gt; [&lt;Vertex object at 01877430&gt;, &lt;Vertex object at 014888E0&gt;]
&lt;/syntaxhighlight&gt;

&lt;!--T:26--&gt;
Note: You can also create an edge by passing two vectors:

&lt;syntaxhighlight&gt;
vec1 = Base.Vector(0,0,0)
vec2 = Base.Vector(10,0,0)
line = Part.Line(vec1,vec2)
edge = line.toShape()
&lt;/syntaxhighlight&gt;

&lt;!--T:27--&gt;
You can find the length and center of an edge like this:

&lt;syntaxhighlight&gt;
edge.Length
&gt; 10.0
edge.CenterOfMass
&gt; Vector (5, 0, 0)
&lt;/syntaxhighlight&gt;

==== Putting the shape on screen ==== &lt;!--T:28--&gt;
So far we created an edge object, but it doesn't appear anywhere on screen. 
This is because we just manipulated python objects here. The FreeCAD 3D scene 
only displays what you tell it to display. To do that, we use this simple 
method:

&lt;syntaxhighlight&gt;
Part.show(edge)
&lt;/syntaxhighlight&gt;

&lt;!--T:29--&gt;
An object will be created in our FreeCAD document, and our &quot;edge&quot; shape 
will be attributed to it. Use this whenever it's time to display your 
creation on screen. 

==== Creating a Wire ==== &lt;!--T:30--&gt;
A wire is a multi-edge line and can be created from a list of edges 
or even a list of wires:

&lt;syntaxhighlight&gt;
edge1 = Part.makeLine((0,0,0), (10,0,0))
edge2 = Part.makeLine((10,0,0), (10,10,0))
wire1 = Part.Wire([edge1,edge2]) 
edge3 = Part.makeLine((10,10,0), (0,10,0))
edge4 = Part.makeLine((0,10,0), (0,0,0))
wire2 = Part.Wire([edge3,edge4])
wire3 = Part.Wire([wire1,wire2])
wire3.Edges
&gt; [&lt;Edge object at 016695F8&gt;, &lt;Edge object at 0197AED8&gt;, &lt;Edge object at 01828B20&gt;, &lt;Edge object at 0190A788&gt;]
Part.show(wire3)
&lt;/syntaxhighlight&gt;

&lt;!--T:31--&gt;
Part.show(wire3) will display the 4 edges that compose our wire. Other 
useful information can be easily retrieved:

&lt;syntaxhighlight&gt;
wire3.Length
&gt; 40.0
wire3.CenterOfMass
&gt; Vector (5, 5, 0)
wire3.isClosed()
&gt; True
wire2.isClosed()
&gt; False
&lt;/syntaxhighlight&gt;

==== Creating a Face ==== &lt;!--T:32--&gt;
Only faces created from closed wires will be valid. In this example, wire3 
is a closed wire but wire2 is not a closed wire (see above)

&lt;syntaxhighlight&gt;
face = Part.Face(wire3)
face.Area
&gt; 99.999999999999972
face.CenterOfMass
&gt; Vector (5, 5, 0)
face.Length
&gt; 40.0
face.isValid()
&gt; True
sface = Part.Face(wire2)
face.isValid()
&gt; False
&lt;/syntaxhighlight&gt;

&lt;!--T:33--&gt;
Only faces will have an area, not wires nor edges.

==== Creating a Circle ==== &lt;!--T:34--&gt;
A circle can be created as simply as this:

&lt;syntaxhighlight&gt;
circle = Part.makeCircle(10)
circle.Curve
&gt; Circle (Radius : 10, Position : (0, 0, 0), Direction : (0, 0, 1))
&lt;/syntaxhighlight&gt;

&lt;!--T:35--&gt;
If you want to create it at certain position and with certain direction:

&lt;syntaxhighlight&gt;
ccircle = Part.makeCircle(10, Base.Vector(10,0,0), Base.Vector(1,0,0))
ccircle.Curve
&gt; Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
&lt;/syntaxhighlight&gt;

&lt;!--T:36--&gt;
ccircle will be created at distance 10 from origin on x and will be facing 
towards x axis. Note: makeCircle only accepts Base.Vector() for position 
and normal but not tuples. You can also create part of the circle by giving 
start angle and end angle as:

&lt;syntaxhighlight&gt;
from math import pi
arc1 = Part.makeCircle(10, Base.Vector(0,0,0), Base.Vector(0,0,1), 0, 180)
arc2 = Part.makeCircle(10, Base.Vector(0,0,0), Base.Vector(0,0,1), 180, 360)
&lt;/syntaxhighlight&gt;

&lt;!--T:37--&gt;
Both arc1 and arc2 jointly will make a circle. Angles should be provided in 
degrees, if you have radians simply convert them using formula:
degrees = radians * 180/PI or using python's math module (after doing import 
math, of course):

&lt;syntaxhighlight&gt;
degrees = math.degrees(radians)
&lt;/syntaxhighlight&gt;

==== Creating an Arc along points ==== &lt;!--T:38--&gt;
Unfortunately there is no makeArc function but we have Part.Arc function to 
create an arc along three points. Basically it can be supposed as an arc 
joining start point and end point along the middle point. Part.Arc creates 
an arc object on which .toShape() has to be called to get the edge object, 
the same way as when using Part.Line instead of Part.makeLine.

&lt;syntaxhighlight&gt;
arc = Part.Arc(Base.Vector(0,0,0),Base.Vector(0,5,0),Base.Vector(5,5,0))
arc
&gt; &lt;Arc object&gt;
arc_edge = arc.toShape()
&lt;/syntaxhighlight&gt;

&lt;!--T:39--&gt;
Arc only accepts Base.Vector() for points but not tuples. arc_edge is what 
we want which we can display using Part.show(arc_edge). You can also obtain 
an arc by using a portion of a circle:

&lt;syntaxhighlight&gt;
from math import pi
circle = Part.Circle(Base.Vector(0,0,0),Base.Vector(0,0,1),10)
arc = Part.Arc(c,0,pi)
&lt;/syntaxhighlight&gt;

&lt;!--T:40--&gt;
Arcs are valid edges, like lines. So they can be used in wires too.

==== Creating a polygon ==== &lt;!--T:41--&gt;
A polygon is simply a wire with multiple straight edges. The makePolygon 
function takes a list of points and creates a wire along those points:

&lt;syntaxhighlight&gt;
lshape_wire = Part.makePolygon([Base.Vector(0,5,0),Base.Vector(0,0,0),Base.Vector(5,0,0)])
&lt;/syntaxhighlight&gt;

==== Creating a Bezier curve ==== &lt;!--T:42--&gt;
Bézier curves are used to model smooth curves using a series of poles (points) and optional weights.  The function below makes a Part.BezierCurve from a series of FreeCAD.Vector points.  (Note: when &quot;getting&quot; and &quot;setting&quot; a single pole or weight indices start at 1, not 0.)

&lt;syntaxhighlight&gt;
def makeBCurveEdge(Points):
   geomCurve = Part.BezierCurve()
   geomCurve.setPoles(Points)
   edge = Part.Edge(geomCurve)
   return(edge)
&lt;/syntaxhighlight&gt;

==== Creating a Plane ==== &lt;!--T:43--&gt;
A Plane is simply a flat rectangular surface. The method used to create one is 
this: '''makePlane(length,width,[start_pnt,dir_normal])'''. By default 
start_pnt = Vector(0,0,0) and dir_normal = Vector(0,0,1). Using dir_normal = Vector(0,0,1) 
will create the plane facing z axis, while dir_normal = Vector(1,0,0) will create the 
plane facing x axis:

&lt;syntaxhighlight&gt;
plane = Part.makePlane(2,2)
plane
&gt;&lt;Face object at 028AF990&gt;
plane = Part.makePlane(2,2, Base.Vector(3,0,0), Base.Vector(0,1,0))
plane.BoundBox
&gt; BoundBox (3, 0, 0, 5, 0, 2)
&lt;/syntaxhighlight&gt;

&lt;!--T:44--&gt;
BoundBox is a cuboid enclosing the plane with a diagonal starting at 
(3,0,0) and ending at (5,0,2). Here the BoundBox thickness in y axis is zero, 
since our shape is totally flat.

&lt;!--T:45--&gt;
Note: makePlane only accepts Base.Vector() for start_pnt and dir_normal but not tuples

==== Creating an ellipse ==== &lt;!--T:46--&gt;
To create an ellipse there are several ways:

&lt;syntaxhighlight&gt;
Part.Ellipse()
&lt;/syntaxhighlight&gt;

&lt;!--T:47--&gt;
Creates an ellipse with major radius 2 and minor radius 1 with the center in (0,0,0)

&lt;syntaxhighlight&gt;
Part.Ellipse(Ellipse)
&lt;/syntaxhighlight&gt;

&lt;!--T:48--&gt;
Create a copy of the given ellipse

&lt;syntaxhighlight&gt;
Part.Ellipse(S1,S2,Center)
&lt;/syntaxhighlight&gt;

&lt;!--T:49--&gt;
Creates an ellipse centered on the point Center, where the plane of the 
ellipse is defined by Center, S1 and S2, its major axis is defined by 
Center and S1, its major radius is the distance between Center and S1, 
and its minor radius is the distance between S2 and the major axis.

&lt;syntaxhighlight&gt;
Part.Ellipse(Center,MajorRadius,MinorRadius)
&lt;/syntaxhighlight&gt;

&lt;!--T:50--&gt;
Creates an ellipse with major and minor radii MajorRadius and MinorRadius, 
and located in the plane defined by Center and the normal (0,0,1)

&lt;syntaxhighlight&gt;
eli = Part.Ellipse(Base.Vector(10,0,0),Base.Vector(0,5,0),Base.Vector(0,0,0))
Part.show(eli.toShape())
&lt;/syntaxhighlight&gt;

&lt;!--T:51--&gt;
In the above code we have passed S1, S2 and center. Similarly to Arc, 
Ellipse also creates an ellipse object but not edge, so we need to 
convert it into edge using toShape() to display.

&lt;!--T:52--&gt;
Note: Arc only accepts Base.Vector() for points but not tuples

&lt;syntaxhighlight&gt;
eli = Part.Ellipse(Base.Vector(0,0,0),10,5)
Part.show(eli.toShape())
&lt;/syntaxhighlight&gt;

&lt;!--T:53--&gt;
for the above Ellipse constructor we have passed center, MajorRadius and MinorRadius

==== Creating a Torus ==== &lt;!--T:54--&gt;
Using the method '''makeTorus(radius1,radius2,[pnt,dir,angle1,angle2,angle])'''. By 
default pnt=Vector(0,0,0),dir=Vector(0,0,1),angle1=0,angle2=360 and angle=360.
Consider a torus as small circle sweeping along a big circle. Radius1 is the 
radius of big cirlce, radius2 is the radius of small circle, pnt is the center 
of torus and dir is the normal direction. angle1 and angle2 are angles in 
radians for the small circle, the last parameter angle is to make a section of 
the torus:

&lt;syntaxhighlight&gt;
torus = Part.makeTorus(10, 2)
&lt;/syntaxhighlight&gt;

&lt;!--T:55--&gt;
The above code will create a torus with diameter 20(radius 10) and thickness 4
(small cirlce radius 2)

&lt;syntaxhighlight&gt;
tor=Part.makeTorus(10,5,Base.Vector(0,0,0),Base.Vector(0,0,1),0,180)
&lt;/syntaxhighlight&gt;

&lt;!--T:56--&gt;
The above code will create a slice of the torus

&lt;syntaxhighlight&gt;
tor=Part.makeTorus(10,5,Base.Vector(0,0,0),Base.Vector(0,0,1),0,360,180)
&lt;/syntaxhighlight&gt;

&lt;!--T:57--&gt;
The above code will create a semi torus, only the last parameter is changed 
i.e the angle and remaining angles are defaults. Giving the angle 180 will 
create the torus from 0 to 180, that is, a half torus.

==== Creating a box or cuboid ==== &lt;!--T:58--&gt;
Using '''makeBox(length,width,height,[pnt,dir])'''. 
By default pnt=Vector(0,0,0) and dir=Vector(0,0,1)

&lt;syntaxhighlight&gt;
box = Part.makeBox(10,10,10)
len(box.Vertexes)
&gt; 8
&lt;/syntaxhighlight&gt;

==== Creating a Sphere ==== &lt;!--T:59--&gt;
Using '''makeSphere(radius,[pnt, dir, angle1,angle2,angle3])'''. By default 
pnt=Vector(0,0,0), dir=Vector(0,0,1), angle1=-90, angle2=90 and angle3=360. 
angle1 and angle2 are the vertical minimum and maximum of the sphere, angle3 
is the sphere diameter itself.

&lt;syntaxhighlight&gt;
sphere = Part.makeSphere(10)
hemisphere = Part.makeSphere(10,Base.Vector(0,0,0),Base.Vector(0,0,1),-90,90,180)
&lt;/syntaxhighlight&gt;

==== Creating a Cylinder ==== &lt;!--T:60--&gt;
Using '''makeCylinder(radius,height,[pnt,dir,angle])'''. By default 
pnt=Vector(0,0,0),dir=Vector(0,0,1) and angle=360

&lt;syntaxhighlight&gt;
cylinder = Part.makeCylinder(5,20)
partCylinder = Part.makeCylinder(5,20,Base.Vector(20,0,0),Base.Vector(0,0,1),180)
&lt;/syntaxhighlight&gt;

==== Creating a Cone ==== &lt;!--T:61--&gt;
Using '''makeCone(radius1,radius2,height,[pnt,dir,angle])'''. By default 
pnt=Vector(0,0,0), dir=Vector(0,0,1) and angle=360

&lt;syntaxhighlight&gt;
cone = Part.makeCone(10,0,20)
semicone = Part.makeCone(10,0,20,Base.Vector(20,0,0),Base.Vector(0,0,1),180)
&lt;/syntaxhighlight&gt;

== Modifying shapes == &lt;!--T:62--&gt;
There are several ways to modify shapes. Some are simple transformation operations 
such as moving or rotating shapes, other are more complex, such as unioning and
subtracting one shape from another. Be aware that 

=== Transform operations === &lt;!--T:63--&gt;

==== Translating a shape ==== &lt;!--T:64--&gt;
Translating is the act of moving a shape from one place to another. 
Any shape (edge, face, cube, etc...) can be translated the same way:

&lt;syntaxhighlight&gt;
myShape = Part.makeBox(2,2,2)
myShape.translate(Base.Vector(2,0,0))
&lt;/syntaxhighlight&gt;

&lt;!--T:65--&gt;
This will move our shape &quot;myShape&quot; 2 units in the x direction.

==== Rotating a shape ==== &lt;!--T:66--&gt;
To rotate a shape, you need to specify the rotation center, the axis, 
and the rotation angle:

&lt;syntaxhighlight&gt;
myShape.rotate(Vector(0,0,0),Vector(0,0,1),180)
&lt;/syntaxhighlight&gt;

&lt;!--T:67--&gt;
The above code will rotate the shape 180 degrees around the Z Axis.

==== Generic transformations with matrixes ==== &lt;!--T:68--&gt;
A matrix is a very convenient way to store transformations in the 3D
world. In a single matrix, you can set translation, rotation and scaling
values to be applied to an object. For example:

&lt;syntaxhighlight&gt;
myMat = Base.Matrix()
myMat.move(Base.Vector(2,0,0))
myMat.rotateZ(math.pi/2)
&lt;/syntaxhighlight&gt;

&lt;!--T:69--&gt;
Note: FreeCAD matrixes work in radians. Also, almost all matrix operations
that take a vector can also take 3 numbers, so those 2 lines do the same thing:

&lt;syntaxhighlight&gt;
myMat.move(2,0,0)
myMat.move(Base.Vector(2,0,0))
&lt;/syntaxhighlight&gt;

&lt;!--T:70--&gt;
When our matrix is set, we can apply it to our shape. FreeCAD provides 2
methods to do that: transformShape() and transformGeometry(). The difference
is that with the first one, you are sure that no deformations will occur (see
&quot;scaling a shape&quot; below). So we can apply our transformation like this:

&lt;syntaxhighlight&gt;
 myShape.trasformShape(myMat)
&lt;/syntaxhighlight&gt;

&lt;!--T:71--&gt;
or

&lt;syntaxhighlight&gt;
myShape.transformGeometry(myMat)
&lt;/syntaxhighlight&gt;

==== Scaling a shape ==== &lt;!--T:72--&gt;
Scaling a shape is a more dangerous operation because, unlike translation 
or rotation, scaling non-uniformly (with different values for x, y and z) 
can modify the structure of the shape. For example, scaling a circle with
a higher value horizontally than vertically will transform it into an
ellipse, which behaves mathematically very differenty. For scaling, we
can't use the transformShape, we must use transformGeometry():

&lt;syntaxhighlight&gt;
myMat = Base.Matrix()
myMat.scale(2,1,1)
myShape=myShape.transformGeometry(myMat)
&lt;/syntaxhighlight&gt;

=== Boolean Operations === &lt;!--T:73--&gt;

==== Subtraction ==== &lt;!--T:74--&gt;
Subtracting a shape from another one is called &quot;cut&quot; in OCC/FreeCAD jargon
and is done like this:

&lt;syntaxhighlight&gt;
cylinder = Part.makeCylinder(3,10,Base.Vector(0,0,0),Base.Vector(1,0,0))
sphere = Part.makeSphere(5,Base.Vector(5,0,0))
diff = cylinder.cut(sphere)
&lt;/syntaxhighlight&gt;

==== Intersection ==== &lt;!--T:75--&gt;
The same way, the intersection between 2 shapes is called &quot;common&quot; and is done
this way:

&lt;syntaxhighlight&gt;
cylinder1 = Part.makeCylinder(3,10,Base.Vector(0,0,0),Base.Vector(1,0,0))
cylinder2 = Part.makeCylinder(3,10,Base.Vector(5,0,-5),Base.Vector(0,0,1))
common = cylinder1.common(cylinder2)
&lt;/syntaxhighlight&gt;

==== Union ==== &lt;!--T:76--&gt;
Union is called &quot;fuse&quot; and works the same way:

&lt;syntaxhighlight&gt;
cylinder1 = Part.makeCylinder(3,10,Base.Vector(0,0,0),Base.Vector(1,0,0))
cylinder2 = Part.makeCylinder(3,10,Base.Vector(5,0,-5),Base.Vector(0,0,1))
fuse = cylinder1.fuse(cylinder2)
&lt;/syntaxhighlight&gt;

==== Section ==== &lt;!--T:77--&gt;
A Section is the intersection between a solid shape and a plane shape.
It will return an intersection curve, a compound with edges

&lt;syntaxhighlight&gt;
cylinder1 = Part.makeCylinder(3,10,Base.Vector(0,0,0),Base.Vector(1,0,0))
cylinder2 = Part.makeCylinder(3,10,Base.Vector(5,0,-5),Base.Vector(0,0,1))
section = cylinder1.section(cylinder2)
section.Wires
&gt; []
section.Edges
&gt; [&lt;Edge object at 0D87CFE8&gt;, &lt;Edge object at 019564F8&gt;, &lt;Edge object at 0D998458&gt;, 
 &lt;Edge  object at 0D86DE18&gt;, &lt;Edge object at 0D9B8E80&gt;, &lt;Edge object at 012A3640&gt;, 
 &lt;Edge object at 0D8F4BB0&gt;]
&lt;/syntaxhighlight&gt;

==== Extrusion ==== &lt;!--T:78--&gt;
Extrusion is the act of &quot;pushing&quot; a flat shape in a certain direction resulting in
a solid body. Think of a circle becoming a tube by &quot;pushing it out&quot;: 

&lt;syntaxhighlight&gt;
circle = Part.makeCircle(10)
tube = circle.extrude(Base.Vector(0,0,2))
&lt;/syntaxhighlight&gt;

&lt;!--T:79--&gt;
If your circle is hollow, you will obtain a hollow tube. If your circle is actually 
a disc, with a filled face, you will obtain a solid cylinder:

&lt;syntaxhighlight&gt;
wire = Part.Wire(circle)
disc = Part.makeFace(wire)
cylinder = disc.extrude(Base.Vector(0,0,2))
&lt;/syntaxhighlight&gt;

== Exploring shapes == &lt;!--T:80--&gt;
You can easily explore the topological data structure:

&lt;syntaxhighlight&gt;
import Part
b = Part.makeBox(100,100,100)
b.Wires
w = b.Wires[0]
w
w.Wires
w.Vertexes
Part.show(w)
w.Edges
e = w.Edges[0]
e.Vertexes
v = e.Vertexes[0]
v.Point
&lt;/syntaxhighlight&gt;

&lt;!--T:81--&gt;
By typing the lines above in the python interpreter, you will gain a good 
understanding of the structure of Part objects. Here, our makeBox() command 
created a solid shape. This solid, like all Part solids, contains faces. 
Faces always contain wires, which are lists of edges that border the face. 
Each face has at least one closed wire (it can have more if the face has a hole). 
In the wire, we can look at each edge separately, and inside each edge, we can 
see the vertexes. Straight edges have only two vertexes, obviously. 

=== Edge analysis === &lt;!--T:82--&gt;
In case of an edge, which is an arbitrary curve, it's most likely you want to 
do a discretization. In FreeCAD the edges are parametrized by their lengths. 
That means you can walk an edge/curve by its length:

&lt;syntaxhighlight&gt;
import Part
box = Part.makeBox(100,100,100)
anEdge = box.Edges[0]
print anEdge.Length
&lt;/syntaxhighlight&gt;

&lt;!--T:83--&gt;
Now you can access a lot of properties of the edge by using the length as a 
position. That means if the edge is 100mm long the start position is 0 and 
the end position 100. 

&lt;syntaxhighlight&gt;
anEdge.tangentAt(0.0)      # tangent direction at the beginning
anEdge.valueAt(0.0)        # Point at the beginning
anEdge.valueAt(100.0)      # Point at the end of the edge
anEdge.derivative1At(50.0) # first derivative of the curve in the middle
anEdge.derivative2At(50.0) # second derivative of the curve in the middle
anEdge.derivative3At(50.0) # third derivative of the curve in the middle
anEdge.centerOfCurvatureAt(50) # center of the curvature for that position
anEdge.curvatureAt(50.0)   # the curvature
anEdge.normalAt(50)        # normal vector at that position (if defined)
&lt;/syntaxhighlight&gt;

=== Using the selection === &lt;!--T:84--&gt;
Here we see now how we can use the selection the user did in the viewer.
First of all we create a box and shows it in the viewer

&lt;syntaxhighlight&gt;
import Part
Part.show(Part.makeBox(100,100,100))
Gui.SendMsgToActiveView(&quot;ViewFit&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:85--&gt;
Select now some faces or edges. With this script you can
iterate all selected objects and their sub elements:

&lt;syntaxhighlight&gt;
for o in Gui.Selection.getSelectionEx():
	print o.ObjectName
	for s in o.SubElementNames:
		print &quot;name: &quot;,s
	for s in o.SubObjects:
		print &quot;object: &quot;,s
&lt;/syntaxhighlight&gt;

&lt;!--T:86--&gt;
Select some edges and this script will calculate the length:

&lt;syntaxhighlight&gt;
length = 0.0
for o in Gui.Selection.getSelectionEx():
	for s in o.SubObjects:
		length += s.Length
print &quot;Length of the selected edges:&quot; ,length
&lt;/syntaxhighlight&gt;

== Complete example: The OCC bottle == &lt;!--T:87--&gt;
A typical example found on the 
[http://www.opencascade.org/org/gettingstarted/appli/ OpenCasCade Getting Started Page] 
is how to build a bottle. This is a good exercise for FreeCAD too. In fact, 
you can follow our example below and the OCC page simultaneously, you will 
understand well how OCC structures are implemented in FreeCAD. The complete script 
below is also included in FreeCAD installation (inside the Mod/Part folder) and 
can be called from the python interpreter by typing:

&lt;syntaxhighlight&gt;
import Part
import MakeBottle
bottle = MakeBottle.makeBottle()
Part.show(bottle)
&lt;/syntaxhighlight&gt;

=== The complete script === &lt;!--T:88--&gt;
Here is the complete MakeBottle script:

&lt;syntaxhighlight&gt;
import Part, FreeCAD, math
from FreeCAD import Base
 
def makeBottle(myWidth=50.0, myHeight=70.0, myThickness=30.0):
   aPnt1=Base.Vector(-myWidth/2.,0,0)
   aPnt2=Base.Vector(-myWidth/2.,-myThickness/4.,0)
   aPnt3=Base.Vector(0,-myThickness/2.,0)
   aPnt4=Base.Vector(myWidth/2.,-myThickness/4.,0)
   aPnt5=Base.Vector(myWidth/2.,0,0)
   
   aArcOfCircle = Part.Arc(aPnt2,aPnt3,aPnt4)
   aSegment1=Part.Line(aPnt1,aPnt2)
   aSegment2=Part.Line(aPnt4,aPnt5)
   aEdge1=aSegment1.toShape()
   aEdge2=aArcOfCircle.toShape()
   aEdge3=aSegment2.toShape()
   aWire=Part.Wire([aEdge1,aEdge2,aEdge3])
   
   aTrsf=Base.Matrix()
   aTrsf.rotateZ(math.pi) # rotate around the z-axis
   
   aMirroredWire=aWire.transformGeometry(aTrsf)
   myWireProfile=Part.Wire([aWire,aMirroredWire])
   myFaceProfile=Part.Face(myWireProfile)
   aPrismVec=Base.Vector(0,0,myHeight)
   myBody=myFaceProfile.extrude(aPrismVec)
   myBody=myBody.makeFillet(myThickness/12.0,myBody.Edges)
   neckLocation=Base.Vector(0,0,myHeight)
   neckNormal=Base.Vector(0,0,1)
   myNeckRadius = myThickness / 4.
   myNeckHeight = myHeight / 10
   myNeck = Part.makeCylinder(myNeckRadius,myNeckHeight,neckLocation,neckNormal)	
   myBody = myBody.fuse(myNeck)
   
   faceToRemove = 0
   zMax = -1.0
   
   for xp in myBody.Faces:
       try:
           surf = xp.Surface
           if type(surf) == Part.Plane:
               z = surf.Position.z
               if z &gt; zMax:
                   zMax = z
                   faceToRemove = xp
       except:
           continue
   
   myBody = myBody.makeThickness([faceToRemove],-myThickness/50 , 1.e-3)
   
   return myBody
&lt;/syntaxhighlight&gt;

=== Detailed explanation === &lt;!--T:89--&gt;

&lt;syntaxhighlight&gt;
import Part, FreeCAD, math
from FreeCAD import Base
&lt;/syntaxhighlight&gt;

&lt;!--T:90--&gt;
We will need,of course, the Part module, but also the FreeCAD.Base module, 
which contains basic FreeCAD structures like vectors and matrixes.

&lt;syntaxhighlight&gt;
def makeBottle(myWidth=50.0, myHeight=70.0, myThickness=30.0):
   aPnt1=Base.Vector(-myWidth/2.,0,0)
   aPnt2=Base.Vector(-myWidth/2.,-myThickness/4.,0)
   aPnt3=Base.Vector(0,-myThickness/2.,0)
   aPnt4=Base.Vector(myWidth/2.,-myThickness/4.,0)
   aPnt5=Base.Vector(myWidth/2.,0,0)
&lt;/syntaxhighlight&gt;

&lt;!--T:91--&gt;
Here we define our makeBottle function. This function can be called without 
arguments, like we did above, in which case default values for width, height, 
and thickness will be used. Then, we define a couple of points that will be used 
for building our base profile.

&lt;syntaxhighlight&gt;
   aArcOfCircle = Part.Arc(aPnt2,aPnt3,aPnt4)
   aSegment1=Part.Line(aPnt1,aPnt2)
   aSegment2=Part.Line(aPnt4,aPnt5)
&lt;/syntaxhighlight&gt;

&lt;!--T:92--&gt;
Here we actually define the geometry: an arc, made of 3 points, and two 
line segments, made of 2 points.

&lt;syntaxhighlight&gt;
   aEdge1=aSegment1.toShape()
   aEdge2=aArcOfCircle.toShape()
   aEdge3=aSegment2.toShape()
   aWire=Part.Wire([aEdge1,aEdge2,aEdge3])
&lt;/syntaxhighlight&gt;

&lt;!--T:93--&gt;
Remember the difference between geometry and shapes? Here we build 
shapes out of our construction geometry. 3 edges (edges can be straight 
or curved), then a wire made of those three edges.

&lt;syntaxhighlight&gt;
   aTrsf=Base.Matrix()
   aTrsf.rotateZ(math.pi) # rotate around the z-axis
   aMirroredWire=aWire.transformGeometry(aTrsf)
   myWireProfile=Part.Wire([aWire,aMirroredWire])
&lt;/syntaxhighlight&gt;

&lt;!--T:94--&gt;
Until now we built only a half profile. Easier than building the whole profile 
the same way, we can just mirror what we did, and glue both halfs together. 
So we first create a matrix. A matrix is a very common way to apply transformations 
to objects in the 3D world, since it can contain in one structure all basic 
transformations that 3D objects can suffer (move, rotate and scale). Here, 
after we create the matrix, we mirror it, and we create a copy of our wire 
with that transformation matrix applied to it. We now have two wires, and 
we can make a third wire out of them, since wires are actually lists of edges.

&lt;syntaxhighlight&gt;
   myFaceProfile=Part.Face(myWireProfile)
   aPrismVec=Base.Vector(0,0,myHeight)
   myBody=myFaceProfile.extrude(aPrismVec)
   myBody=myBody.makeFillet(myThickness/12.0,myBody.Edges)
&lt;/syntaxhighlight&gt;

&lt;!--T:95--&gt;
Now that we have a closed wire, it can be turned into a face. Once we have a face, 
we can extrude it. Doing so, we actually made a solid. Then we apply a nice little 
fillet to our object because we care about good design, don't we?

&lt;syntaxhighlight&gt;
   neckLocation=Base.Vector(0,0,myHeight)
   neckNormal=Base.Vector(0,0,1)
   myNeckRadius = myThickness / 4.
   myNeckHeight = myHeight / 10
   myNeck = Part.makeCylinder(myNeckRadius,myNeckHeight,neckLocation,neckNormal)
&lt;/syntaxhighlight&gt;

&lt;!--T:96--&gt;
Then, the body of our bottle is made, we still need to create a neck. So we 
make a new solid, with a cylinder.

&lt;syntaxhighlight&gt;
   myBody = myBody.fuse(myNeck)
&lt;/syntaxhighlight&gt;

&lt;!--T:97--&gt;
The fuse operation, which in other apps is sometimes called union, is very 
powerful. It will take care of gluing what needs to be glued and remove parts that 
need to be removed.

&lt;syntaxhighlight&gt;
   return myBody
&lt;/syntaxhighlight&gt;

&lt;!--T:98--&gt;
Then, we return our Part solid as the result of our function. That Part solid, 
like any other Part shape, can be attributed to an object in a FreeCAD document, with:

&lt;syntaxhighlight&gt;
myObject = FreeCAD.ActiveDocument.addObject(&quot;Part::Feature&quot;,&quot;myObject&quot;)
myObject.Shape = bottle
&lt;/syntaxhighlight&gt;

&lt;!--T:99--&gt;
or, more simple:

&lt;syntaxhighlight&gt;
Part.show(bottle)
&lt;/syntaxhighlight&gt;

==Box pierced== &lt;!--T:100--&gt;
Here a complete example of building a box pierced.

&lt;!--T:101--&gt;
The construction is done side by side and when the cube is finished, it is hollowed out of a cylinder through.

&lt;syntaxhighlight&gt;
import Draft, Part, FreeCAD, math, PartGui, FreeCADGui, PyQt4
from math import sqrt, pi, sin, cos, asin
from FreeCAD import Base

size = 10
poly = Part.makePolygon( [ (0,0,0), (size, 0, 0), (size, 0, size), (0, 0, size), (0, 0, 0)])

face1 = Part.Face(poly)
face2 = Part.Face(poly)
face3 = Part.Face(poly)
face4 = Part.Face(poly)
face5 = Part.Face(poly)
face6 = Part.Face(poly)
     
myMat = FreeCAD.Matrix()
myMat.rotateZ(math.pi/2)
face2.transformShape(myMat)
face2.translate(FreeCAD.Vector(size, 0, 0))

myMat.rotateZ(math.pi/2)
face3.transformShape(myMat)
face3.translate(FreeCAD.Vector(size, size, 0))

myMat.rotateZ(math.pi/2)
face4.transformShape(myMat)
face4.translate(FreeCAD.Vector(0, size, 0))

myMat = FreeCAD.Matrix()
myMat.rotateX(-math.pi/2)
face5.transformShape(myMat)

face6.transformShape(myMat)               
face6.translate(FreeCAD.Vector(0,0,size))

myShell = Part.makeShell([face1,face2,face3,face4,face5,face6])   

mySolid = Part.makeSolid(myShell)
mySolidRev = mySolid.copy()
mySolidRev.reverse()

myCyl = Part.makeCylinder(2,20)
myCyl.translate(FreeCAD.Vector(size/2, size/2, 0))

cut_part = mySolidRev.cut(myCyl)

Part.show(cut_part)
&lt;/syntaxhighlight&gt;

== Loading and Saving == &lt;!--T:102--&gt;
There are several ways to save your work in the Part module. You can 
of course save your FreeCAD document, but you can also save Part 
objects directly to common CAD formats, such as BREP, IGS, STEP and STL.

&lt;!--T:103--&gt;
Saving a shape to a file is easy. There are exportBrep(), exportIges(), 
exportStl() and exportStep() methods availables for all shape objects. 
So, doing:

&lt;syntaxhighlight&gt;
import Part
s = Part.makeBox(0,0,0,10,10,10)
s.exportStep(&quot;test.stp&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:104--&gt;
this will save our box into a STEP file. To load a BREP, 
IGES or STEP file, simply do the contrary:

&lt;syntaxhighlight&gt;
import Part
s = Part.Shape()
s.read(&quot;test.stp&quot;)
&lt;/syntaxhighlight&gt;

&lt;!--T:105--&gt;
To convert an '''.stp''' in '''.igs''' file simply :

&lt;syntaxhighlight&gt;
 import Part
 s = Part.Shape()
 s.read(&quot;file.stp&quot;)       # incoming file igs, stp, stl, brep
 s.exportIges(&quot;file.igs&quot;) # outbound file igs
&lt;/syntaxhighlight&gt;

&lt;!--T:106--&gt;
Note that importing or opening BREP, IGES or STEP files can also be done 
directly from the File -&gt; Open or File -&gt; Import menu, while exporting
is with File -&gt; Export

&lt;!--T:107--&gt;
{{docnav|Mesh Scripting|Mesh to Part}}

&lt;!--T:108--&gt;
[[Category:Poweruser Documentation]]
[[Category:Python Code]]
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Tracker</title>
    <ns>0</ns>
    <id>191</id>
    <revision>
      <id>111178</id>
      <parentid>111177</parentid>
      <timestamp>2014-09-23T20:48:54Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1lo3ym9opdx6zkiejny7rz4perllzm2</sha1>
      <text xml:space="preserve" bytes="2846">
&lt;!--T:1--&gt;
The adress of our bug tracker is:

&lt;!--T:2--&gt;
http://www.freecadweb.org/tracker

&lt;!--T:3--&gt;
There you can report bugs, submit feature requests, patches, or request to merge your branch if you developed something using git. The tracker is divided into modules, so please be specific and file your request in the appropriate subsection. In cas of doubt, leave it in the &quot;FreeCAD&quot; section.

== Reporting bugs == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
If you think you might have found a bug, you are welcome to report it there. But before reporting a bug, please check the following items:

&lt;!--T:6--&gt;
* Make sure your bug is really a bug, that is, something that should be working and that is not working. If you are not sure, don't hesitate to explain your problem on the [http://forum.freecadweb.org/ forum] and ask what to do.
* Before submitting anything, read the [[FAQ|frequently asked questions]], do a search on the [http://forum.freecadweb.org/ forum], and make sure the same bug hasn't been reported before, by doing a search on the bug tracker.
* Describe as clearly as possible the problem, and how it can be reproduced. If we can not verify the bug, we might not be able to fix it.
* Join the following information: Your operating system, if it is 32 or 64 bits, and the version of FreeCAD you are running.
* Please file one separate report for each bug.
* If you are on a linux system and your bug causes a crash in FreeCAD, you can try running a debug backtrace: From a terminal run ''gdb freecad'' (assuming package gdb is installed), then, inside gdb, type ''run'' . FreeCAD will then run. After the crash happens, type ''bt'' , to get the full backtrace. Include that backtrace in your bug report.

== Requesting features == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
If you want something to appear in FreeCAD that is not implemented yet, it is not a bug but a feature request. You can also submit it on the same tracker (file it as feature request instead of bug), but keep in mind there are no guarantees that your wish will be fulfilled.

== Submitting patches == &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
In case you have programmed a bug fix, an extension or something else that can be of public use in FreeCAD, create a patch using the Git diff tool and submit it on the same tracker (file it as patch).

== Requesting merge == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
If you have created a git branch containing changes that you would like to see merged into the FreeCAD code, you can ask there to have your branch reviewed and merged if the FreeCAD developers are OK with it. You must first publish your branch to a public git repository (github,bitbucket, sourceforge...) and then give the URL of your branch in your merge request.

&lt;!--T:13--&gt;
{{docnav|Licence|CompileOnWindows}}

&lt;!--T:14--&gt;
[[Category:Developer Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Travailler avec les ateliers</title>
    <ns>0</ns>
    <id>865</id>
    <revision>
      <id>108118</id>
      <parentid>91016</parentid>
      <timestamp>2014-09-01T20:03:22Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Tutorial Guidelines</title>
    <ns>0</ns>
    <id>41225</id>
    <revision>
      <id>115819</id>
      <parentid>110446</parentid>
      <timestamp>2014-10-19T21:09:18Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>+ Category:Wiki</comment>
      <sha1>t3eilv27xpqx06apkhy61r12m3gat4j</sha1>
      <text xml:space="preserve" bytes="6451">{{Note|Note|This is meant as a test for a new style guideline for tutorials.Feel free to add any ideas or test formatting. DO NOT TRANSLATE!

Inspirations &amp; ideas: 
Comments from yorik and normandc:
*http://manuals.info.apple.com/MANUALS/1000/MA1569/en_US/ipad_2_user_guide.pdf
* https://docs.djangoproject.com/en/1.6/
* Tutorials are not a standalone link but each section should have a box with related leaning material and tutorials
* http://www.blender.org/support/tutorials/}}

__NOTOC__

{{TutorialInfo|Class=What is the tutorial about? Modeling? Drafting? Introduction to a module?|Level=What level of user is it meant for?|FCVersion=What FreeCAD version are you using?|Time= How long does it take to complete?|Author= Add a link to your forum profile}}
=== Introduction ===

Hello readers, the following document is meant as both a proof of concept and as a test platform to try new ideas; this in order to set a new standard in the creation of tutorials. Hopefully you will find it useful whether as a real guideline or as reference material.  And so, without further ado allow me to describe each section of the document. What you are reading right now is meant to be used as a brief summary for your work, perhaps mentioning what modules you will use and screenshot of the finished project to use as a thumbnail (hopefully someone will figure how to do it). The box to the right is a new template for tutorials in which concise information can be obtained, such as author, FreeCAD version, and the intended user level.
[[Image:Screenshot arch window.jpg|thumb|left|upright=4.0|Thumbnail for the project.]]
{{Clear}}

{{Rightbox|Learning|
[[Tutorial Guidelines]]: Links and descriptions within the template Rightbox should be meant as a tool to reference other wiki pages that may aid in the comprehension of the tutorial. Such as a link to the [[Part Module]].

[[Video tutorials]]: Discover the extensive collections of FreeCAD videos made by community members}}
=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

{{Clear}}

=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

{{Clear}}
{{Rightbox|Learning|
Avoid abusing boxes, however. Perhaps one per two sections of the tutorial might be enough.
Note that you can include images wihtin the boxes as well.

[[Image:Screenshot arch window.jpg|thumb|center|upright=1.5|Thumbnail for the project.]]
}}
=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

{{Clear}}
=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
{{Clear}}

{{Note|Note|Remember that it is possible to use boxes to occupy the entire width of the page. This can be useful to highlight something or to create a gallery. Below are two styles to present a gallery.}}
{{Clear}}
{|style=&quot;margin: 0 auto;&quot;
| [[Image:Screenshot arch window.jpg|thumb|upright=2.0|Thumbnail for the project.]]
| [[Image:Screenshot arch window.jpg|thumb|upright=2.0|Thumbnail for the project.]]
|}

{{Clear}}

&lt;gallery mode=&quot;packed-hover&quot;&gt;
Image:Astronotus_ocellatus.jpg|''[[commons:Astronotus ocellatus|Astronotus ocellatus]]'' (Oscar)
Image:Salmonlarvakils.jpg|''[[commons:Salmo salar|Salmo salar]]'' (Salmon Larva)
Image:Georgia Aquarium - Giant Grouper.jpg|''[[commons:Epinephelus lanceolatus|Epinephelus lanceolatus]]'' (Giant grouper)
Image:Pterois volitans Manado-e.jpg|''[[commons:Pterois volitans|Pterois volitans]]'' (Red Lionfish)
Image:Macropodus opercularis - front (aka).jpg|''[[commons:Macropodus opercularis|Macropodus opercularis]]'' (Paradise fish)
Image:Canthigaster valentini 1.jpg|''[[commons:Canthigaster valentini|Canthigaster valentini]]'' (Valentinni's sharpnose puffer)
Image:Flughahn.jpg|[[Image:POTY ribbon 2007.svg|25px]] ''[[commons:Dactylopterus volitans|Dactylopterus volitans]]'' (Flying gurnard)
Image:Fishmarket 01.jpg|''[[commons:Semicossyphus pulcher|Semicossyphus pulcher]]'' (California Sheephead)
&lt;/gallery&gt;

[[Category:Wiki]]</text>
    </revision>
  </page>
  <page>
    <title>Tutorial Mouse Interaction</title>
    <ns>0</ns>
    <id>192</id>
    <revision>
      <id>127342</id>
      <parentid>127339</parentid>
      <timestamp>2014-12-01T22:07:40Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Replaced content with &quot;&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;&quot;</comment>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Tutorials</title>
    <ns>0</ns>
    <id>457</id>
    <redirect title="Category:Tutorials" />
    <revision>
      <id>5066</id>
      <parentid>3326</parentid>
      <timestamp>2011-03-28T12:32:45Z</timestamp>
      <contributor>
        <username>Yorik</username>
        <id>2997</id>
      </contributor>
      <comment>Redirected page to [[Category:Tutorials]]</comment>
      <sha1>26uuqtv2ifraq5mawl1zbc7sagbwxh9</sha1>
      <text xml:space="preserve" bytes="33">#REDIRECT [[:Category:Tutorials]]</text>
    </revision>
  </page>
  <page>
    <title>Tutorials New</title>
    <ns>0</ns>
    <id>41224</id>
    <revision>
      <id>115818</id>
      <parentid>110338</parentid>
      <timestamp>2014-10-19T21:06:49Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>+ Category:Wiki</comment>
      <sha1>07zfs78wi3h4s1fa4dmqu9arfcdleqf</sha1>
      <text xml:space="preserve" bytes="1534">{{Note|Note|This is meant as a test for a new formatting of the tutorials homepage.Feel free to add any ideas or test formatting. DO NOT TRANSLATE!

Inspirations &amp; ideas: 
Comments from yorik and normandc:
* http://manuals.info.apple.com/MANUALS/1000/MA1569/en_US/ipad_2_user_guide.pdf
* https://docs.djangoproject.com/en/1.6/
* Tutorials are not a standalone link but each section should have a box with related leaning material and tutorials
* http://www.blender.org/support/tutorials/}}

__NOTOC__

{{Rightbox|FreeCAD executable info|
Post the information about your FreeCAD version here. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.}}

=== Welcome! ===

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
{{Clear}}


[[Category:Wiki]]</text>
    </revision>
  </page>
  <page>
    <title>UTF Project</title>
    <ns>0</ns>
    <id>3056</id>
    <revision>
      <id>123532</id>
      <parentid>123531</parentid>
      <timestamp>2014-11-17T20:45:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>4k6rn1y5tpbja7n31ukkfzyd8h2qgfh</sha1>
      <text xml:space="preserve" bytes="1382">
&lt;!--T:1--&gt;
This is the project plan for the FreeCAD part of the [[Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
To improve multi-language capabilities in FreeCAD by implementing support for UTF characters within the Coin3D interface.

&lt;!--T:3--&gt;
Despite Coin3D now moving to a more open development platform, it's still very difficult to contribute back into the project. 

&lt;!--T:4--&gt;
(mrlukeparry) I have yet to receive a response on contributing back and for now it seems more appropriate to keep this within the FreeCAD project and would mean we can let users test without requiring development versions of Coin3D. I would aim to achieve this by 0.14 considering it's a big priority for increasing accessibility of FreeCAD to non-english users. 

== Organizing == &lt;!--T:5--&gt;
* Provide a basic UTF string handling functionality that is independent of major libraries except STL.
* Implement the Coin3D fields and 3D text nodes for handling the new UTF data storage.
* Migrate modules over to use the new textual nodes.
* Rigorous testing

== Next actions == &lt;!--T:6--&gt;
* Implement the UTF String Handling Class '''(WIP)'''
* Handling of fonts and glyphs. 
* Implement Coin3D text fields and nodes for use in project
* Migrate modules using SoText2 and SoText3 to utilise new nodes

&lt;!--T:7--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Units</title>
    <ns>0</ns>
    <id>580</id>
    <revision>
      <id>126439</id>
      <parentid>126438</parentid>
      <timestamp>2014-11-30T16:15:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>gha4wd83q30wrcsu4avm7ndftg0iw1y</sha1>
      <text xml:space="preserve" bytes="17364">
&lt;!--T:1--&gt;
Here some reading about units:
*[http://en.wikipedia.org/wiki/International_System_of_Units SI system]
*[http://en.wikipedia.org/wiki/Imperial_units Imperial units]
*[http://en.wikipedia.org/wiki/SI_derived_unit SI derived units]
*[http://en.wikipedia.org/wiki/Degree_%28angle%29 angle units]

== Examples == &lt;!--T:2--&gt;

 &lt;!--T:3--&gt;
# -- some examples of the FreeCAD unit translation system --
 # make a shortcut for the examples
 tu = FreeCAD.Units.parseQuantity
 
 # 10 meters in internal numbers
 tu('10 m')
 # doing math
 tu('3/8 in')
 # combined stuff
 tu('100 km/h')
 # transfer to other units
 tu('100 km/h')/tu('m/s')
 # derived units (Ohm)
 tu('m^2*kg*s^-3*A^-2')
 # or
 tu('(m^2*kg)/(A^2*s^3)')
 # angles 
 tu('2*pi rad') # full circle
 # as gon
 tu('2*pi rad') / tu('gon')
 # more imperial
 tu('1ft (3+7/16)in')
 # or 
 tu('1\' (3+7/16)&quot;') # the ' we have to escape because of python
 # trigonometry
 tu('sin(pi)')
 # Using translated units as parameters, this command will create a 50.8mm x 20mm x 10mm box
 b = Part.makeBox(tu('2in'),tu('2m')/100,10)

== Supported units == &lt;!--T:4--&gt;
Here the defined units in FreeCAD so far. It's easy to add a new user defined unit. The definition is here[http://free-cad.svn.sourceforge.net/viewvc/free-cad/trunk/src/Base/UnitsApi.l?view=markup]. 

&lt;!--T:5--&gt;
Metric length
 &quot;mm&quot;    1.0;        // millimeter       (internal standard length)
 &quot;m&quot;     1000.0;     // meter
 &quot;cm&quot;    10.0;       // centimeter
 &quot;dm&quot;    100.0;      // decimeter
 &quot;km&quot;    1000000.0;  // kilometer

&lt;!--T:6--&gt;
Imperial lenth
 &quot;in&quot; &quot;\&quot;&quot;  25.4;       // inch
 &quot;ft&quot; &quot;'&quot;   304.8;      // foot
 &quot;th&quot;       0.0254;     // thou
 &quot;yr&quot;       914.4;      // yard

&lt;!--T:7--&gt;
Metric mass
 &quot;kg&quot;    1.0;        // kilogram       (internal standard mass)
 &quot;g&quot;     0.001;      // gram
 &quot;mg&quot;    0.000001;   // milligram
 &quot;t&quot;     1000.0;     // ton 

&lt;!--T:8--&gt;
Imperial mass
 &quot;lb&quot;    0.45359237; // pound
 &quot;oz&quot;    0.45359237; // ounce
 &quot;st&quot;    6.35029318; // Stone
 &quot;cwt&quot;   50.80234544;// hundredweights

&lt;!--T:9--&gt;
Angle
 &quot;deg&quot;   1.0;        // degree         (internal standard angle)
 &quot;rad&quot;   180/M_PI;   // radian         
 &quot;gon&quot;   360.0/400.0;// gon   
      
Time
 &quot;s&quot;     1.0;        // second         (internal standard time)
 &quot;min&quot;   60.0;       // minute
 &quot;h&quot;     3600.0;     // hour  

&lt;!--T:10--&gt;
Rest of SI
 &quot;A&quot;     1.0;        // Ampere         (internal standard electric current)
 &quot;K&quot;     1.0;        // Kelvin         (internal standard thermodynamic temperature)
 &quot;cd&quot;    1.0;        // Candela        (internal standard luminous intensity)        
 &quot;mol&quot;   1.0;        // Mole           (internal standard amount of substance)
        
Metric Volume
 &quot;µl&quot;    1.0;        // microliter mm^3(derived  standard volume)
 &quot;ml&quot;    1000.0;     // milliliter cm^3    
 &quot;l&quot;     1000000.0;  // Liter      dm^3

== Purpose and principles: proposal of an extension of the unit management system == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
An extension unit management system is proposed in the following sections, developping the concept of ''unit system'', activated during a running FreeCAD instance.
The interest in defining such a new concept is to work more easily with as many type of '''physical''' units as one wants (even user-created ones), without increasing the complexity of unit management for the user, nor for FreeCAD developpers.

&lt;!--T:13--&gt;
In short, event of unit scaling are localized precisely, and carried out in a generic fashion.

&lt;!--T:14--&gt;
Achieving such a flexibility is most notably required when one starts to deal with material properties that can have very different units, difficult to manage one by one manually.

&lt;!--T:15--&gt;
The reasoning proposed allows handling the units such as described in the [http://physics.nist.gov/cuu/pdf/sp811.pdf Guide for the Use of the International System of Units (SI)] and [http://physics.nist.gov/Pubs/SP330/sp330.pdf The International System of Units (SI)] both from NIST.

&lt;!--T:16--&gt;
In this proposal, one first recall in [[Units#Brainstorming|Brainstorming]] section what are the possible contexts for which unit management is required.

&lt;!--T:17--&gt;
In [[Units#Organizing|Organizing]] section, we present the data model retained to achieve unit management, based on 3 objects, the ''unit'', the ''unit dictionary'', and the ''unit system''.
Finally, a short API of a 4th object called the ''unit manager'' is presented as well.

== Outcome == &lt;!--T:18--&gt;
Thanks to this extension, one aims to ease unit scaling that can occurs between different business tasks. For instance, technical drawings can be done in standard unit system, while FE modelling can be managed in an unit system more suited for it.

&lt;!--T:19--&gt;
The exchange of data between these two kind of activities become easier with this extension.

== Brainstorming == &lt;!--T:20--&gt;
In this section are highlighted the contexts of use of such an unit management system.
From these contexts, we are then able to defined its technical specifications.

&lt;!--T:21--&gt;
Essentially 2 contexts are given as example.

=== Context 1: opening a data file === &lt;!--T:22--&gt;
This case is probably the most frequent case.
You receive a file containing for instance a geometrical model, or describing a material with quite a lot of properties. The geometrical model is expressed in meters, or the material properties according the international unit system.

&lt;!--T:23--&gt;
Too bad...

&lt;!--T:24--&gt;
You are an expert FE modelling, and you usually work with millimeter for length, MegaPascal for stress, tonne for mass...

&lt;!--T:25--&gt;
In this context, unit management is required to scale data from an initial unit system defined in the input file to a user-defined target unit system.

=== Context 2: switching the unit system at runtime === &lt;!--T:26--&gt;
In this case, you can be at the same time the guy that carries out a drawing, and the guy that will manage the FE modelling. Similarly to the previous case, the unit systems for these 2 tasks are not the same, and you need to switch the initial unit system at runtime to your favorite one.

== Organizing == &lt;!--T:27--&gt;

=== Logic of unit scaling === &lt;!--T:28--&gt;
In the [[Units#Brainstorming|Brainstorming]] section have been presented 2 contexts when using unit scaling.
Some items should be highlighted from these two contexts.

==== Unit coherence throughout the FreeCAD running instance ==== &lt;!--T:29--&gt;
The system proposed is based on a primary assumption: the user is working in a coherent unit system.
For instance, this means that if the user expresses length in millimeters, necessarily areras will be expressed in terms of squared millimeters, not squared meters.
This is '''hypothesis one'''.

==== Unit system ==== &lt;!--T:30--&gt;
Because of ''hypothesis one'', it is possible and relevant to define an unit system.
An unit system applies to:
* a running FreeCAD instance into which you are working
* or it may also apply globally to the content of an input file
According [http://physics.nist.gov/cuu/pdf/sp811.pdf Guide for the Use of the International System of Units (SI)] from NIST, they are 7 physical base units.
We chose to express a unit system in terms of these 7 base units.

&lt;!--T:31--&gt;
When working within an instance of FreeCAD, the user has thus to define first the unit system according to which she/he is working before she/he decides to switch to another unit system, or before importing data from an input file.

&lt;!--T:32--&gt;
This unit system will apply till the user decides to change it. If she/he does, all data with dimensions will be scaled.

&lt;!--T:33--&gt;
Considering ''hypothesis one'', all data that the user will input manually in FreeCAD are assumed to be coherent with the chosen unit system.

&lt;!--T:34--&gt;
The benefit to work with a ''unit system'' defined at a FreeCAD running instance level, or at data file level (instead of ''unit'' which are defined at the data level) is then that unit management is considerably simplified.

&lt;!--T:35--&gt;
Here are some examples of unit systems.
* meter, kilogram, second, ampere, Kelvin, mole, candela
* millimeter, tonne, millisecond, ampere, Kelvin, mole, candela
* millimeter, kilogramme, millisecond, ampere, Kelvin, mole, candela
*...

==== Base and derived units ==== &lt;!--T:36--&gt;
Derived units are created by combination of base units. For instance, an acceleration (m/s) combines at the same time length and time. An interesting picture presenting the relationships between base and derived units can be seen [http://physics.nist.gov/cuu/pdf/SIDiagramColorAnnot.pdf here] also from NIST.

&lt;!--T:37--&gt;
Thanks to the definition of ''unit system'', it is possible for the user to work with any kind of derived units, without the need for FreeCAD developpers to foresee them in advance.

==== Base and derived unit symbols ==== &lt;!--T:38--&gt;
According to [http://physics.nist.gov/Pubs/SP330/sp330.pdf The International System of Units (SI)], the symbols to specify a units are officially approved. Two consequences can be highlighted from this.
* it is not easy for a computer program to work with unit symbols because some are greek letters for instance. Hence they can be a bit difficult to process by a program
* while some units and their symbols can be used widely, they may be not approved officially, like for instance ''tonne'' unit (see p32 of [http://physics.nist.gov/Pubs/SP330/sp330.pdf The International System of Units (SI)])

&lt;!--T:39--&gt;
To overcome these limitations and remain flexible, the proposed system favors the use of unit magnitudes instead of unit symbols, which remain nonetheless available for an ergonomy reason.

=== Data model === &lt;!--T:40--&gt;
The three core objects of the unit management system are presented, namely the ''unit'', the ''unit dictionary'' and the ''unit system''.

==== Unit ==== &lt;!--T:41--&gt;
As a foreword, it is important to highlight that a ''unit'' object in itself only indicates a '''dimension''' like length, mass, time... It doesn't specify a '''magnitude''' like meter, millimeter, kilometer... This last information is specified through the unit system.

===== Dimension ===== &lt;!--T:42--&gt;
Compulsory string indicating the ''dimension'' of the unit. The ''dimension'' of the 7 base units are indicated below (from [http://physics.nist.gov/cuu/pdf/sp811.pdf Guide for the Use of the International System of Units (SI)]).
* LENGTH
* MASS
* TIME
* ELECTRIC CURRENT
* THERMODYNAMIC TEMPERATURE
* AMOUNT OF SUBSTANCE
* LUMINOUS INTENSITY

&lt;!--T:43--&gt;
''Dimension'' attribute allows identifying the unit.
Two units cannot share the same ''dimension''.

===== Signature ===== &lt;!--T:44--&gt;

&lt;!--T:45--&gt;
Compulsory integer array of size 7 (number of base units) that defines what the unit is.
The signature of the 7 base units are:
* LENGTH: [1,0,0,0,0,0,0]
* MASS: [0,1,0,0,0,0,0]
* TIME: [0,0,1,0,0,0,0]
* ELECTRIC CURRENT: [0,0,0,1,0,0,0]
* THERMODYNAMIC TEMPERATURE: [0,0,0,0,1,0,0]
* AMOUNT OF SUBSTANCE: [0,0,0,0,0,1,0]
* LUMINOUS INTENSITY: [0,0,0,0,0,0,1]

&lt;!--T:46--&gt;
From these 7 units, we are then able to express all derived units defined in [http://physics.nist.gov/cuu/pdf/sp811.pdf Guide for the Use of the International System of Units (SI)] and create new ones as needed such as for instance:
* MASS DENSITY: [-3,1,0,0,0,0,0]
* AREA: [0,2,0,0,0,0,0]

&lt;!--T:47--&gt;
''Signature'' is the attribute thanks to which unit scaling can be achieved in a generic way.

===== Symbols ===== &lt;!--T:48--&gt;
Array of [real, string] (meaning [''magnitude'', ''symbol'']) that lists all ''symbols'' known by FreeCAD.
Thanks to this array, the unit scaling API becomes more ergonomic because ''symbols'' and related ''magnitudes'' are linked.

&lt;!--T:49--&gt;
This array can be extended as required.

&lt;!--T:50--&gt;
For instance, the list of ''symbols'' of the LENGTH unit, and their related ''magnitudes'' is:

 &lt;!--T:51--&gt;
[1e+12,&quot;Tm&quot;],[1e+09,&quot;Gm&quot;],[1e+06,&quot;Mm&quot;],
 [1e+03,&quot;km&quot;],[1e+02,&quot;hm&quot;],[1e+01,&quot;dam&quot;],
 [1e+00,&quot;m&quot;],[1e-01,&quot;dm&quot;],[1e-02,&quot;cm&quot;],
 [1e-03,&quot;mm&quot;],[1e-06,&quot;µm&quot;],[1e-09,&quot;nm&quot;],
 [1e-12,&quot;pm&quot;],[1e-15,&quot;fm&quot;]

&lt;!--T:52--&gt;
Standard ''symbols'' can be found on [http://physics.nist.gov/cuu/Units/units.html NIST website] and p23 to 26 and p32 (''metric ton'' or ''tonne'') of [http://physics.nist.gov/Pubs/SP330/sp330.pdf The International System of Units (SI)].

==== Unit dictionary ==== &lt;!--T:53--&gt;
All the units available in FreeCAD, and new ones created by the user, should be stored in ''unit dictionary'', which is an XML file (FreeCAD configuration file), so as to be retrieved when needed, i.e. when achieving unit scaling.

===== Units ===== &lt;!--T:54--&gt;
Array of units, contained in the ''unit dictionary''.

==== Unit system ==== &lt;!--T:55--&gt;
A ''unit system'' is the object that allows the user defining the current unit ''magnitude'' of each base units with which she/he is working.
For instance, knowing that the user is working with millimeter, tonne, and second, thanks to the use of a unit system, FreeCAD can know that energy is expressed in terms of milliJoule, force in terms of Newton, and stress in terms of MegaPascal.
Hence a unit system is only defined by a ''name'' (for instance ''Standard unit system'') and a ''magnitude table'' specifying for each of the 7 base units, what is its corresponding ''magnitude''.

===== Name ===== &lt;!--T:56--&gt;
String allowing to the user identifying what is the unit system.

===== Magnitudes ===== &lt;!--T:57--&gt;
By specifying the magnitude of the 7 base units, a unit system is defined.

&lt;!--T:58--&gt;
For instance [1e-03, 1e+03, 1, 1, 1, 1, 1], meaning millimeter, tonne, second, ampere, Kelvin, mole, candela

==== Unit management API ==== &lt;!--T:59--&gt;
Only the logic of some methods is presented, in order to highlight some features.
These methods could belong to an object called ''Unit manager''.

===== Checking the unit dictionary ===== &lt;!--T:60--&gt;

====== isValid ====== &lt;!--T:61--&gt;
The unit dictionary can be an XML file (FreeCAD configuration file). It contains a list of defined units.
Such a dictionary is required for the proposed unit management system to work.

&lt;!--T:62--&gt;
It must fulfills some conditions that should be checked before activating the unit management system.
These conditions are:
* check that all base units are defined
* check that a ''dimension'' is not defined twice through the units
* check that a ''symbol'' is not defined twice in all the existing symbols
* check that the ''signatures'' of all units have all the same size
* chacke that a ''standard symbol'' (for which ''magnitude'' is 1) is defined for all units

====== isCompatibleWithThisSignature ====== &lt;!--T:63--&gt;
A unit dictionary defines a set of units and their known magnitudes.
When managing a unit, it is relevant to check that its signature is compatible with the set of units registered in the unit dictionary, so as to process it.
This check includes:
* check that the input ''signature'' length is of the same size than the unit dictionary unit ''signatures''

===== Scaling units ===== &lt;!--T:64--&gt;

====== scaleUnitFromSymbolToSymbol ====== &lt;!--T:65--&gt;
Knowing a value, an initial unit by its symbol, the target unit by its symbol, scale the value.

====== scaleUnitFromSymbolToUnitSystem ====== &lt;!--T:66--&gt;
Knowing a value, an initial unit by its symbol, the target unit system, scale the value.

====== scaleUnitFromUnitSystemToSymbol ====== &lt;!--T:67--&gt;
Knowing a value, an initial unit system, the target unit by its symbol, scale the value.

==== Motivations for such a management: example of application ==== &lt;!--T:68--&gt;
Let's assume that we are going to setup a finite element model.
To build our model, we need the mesh, material properties, and to define numerical parameters.
Considering that they can be tens of material properties to manage, expressed with different units, sometimes not always very common, it is interesting for the user to only have to specify a global unit system, without caring much.

&lt;!--T:69--&gt;
FreeCAD would then just do the job.

&lt;!--T:70--&gt;
As FreeCAD developpers and FreeCAD users do not necessarily know all units that can be defined in the material property files, it is interesting to rely on a generic system.

&lt;!--T:71--&gt;
Let's assume that in such a file we have a fair number of exotic material properties expressed with exotic units, and that we want to work in a specific unit system.

&lt;!--T:72--&gt;
It is easy with the proposed extension to scale any of these properties by knowing their signatures, magnitudes, and the target unit system.

&lt;!--T:73--&gt;
For each of the properties, the scaling is obtained by multiplying the initial property value with the factor &lt;math&gt;\frac{initialMagnitude}{targetMagnitude}&lt;/math&gt;.

&lt;!--T:74--&gt;
The ''targetMagnitude'' is then simply obtained with the operation &lt;math&gt;\prod_{bu} targetMagnitude_{bu}^{signature_{bu}}&lt;/math&gt;, ''bu'' standing for ''base unit''.

&lt;!--T:75--&gt;
It becomes thus very easy to manage any number of properties with any kind of units with very few lines of Python.

== Next actions == &lt;!--T:76--&gt;
* Implementing Quantity and Unit classes (mostly done)
* Implementing InputField as User front end (in progress)
* UnitsCalculator as test bed (in progress)
* [[Quantity]] documentation (in progress)
* UnitsCalculator documentation 
* Update Material framework to work only with Quantities
* Test Cases


&lt;!--T:77--&gt;
[[Category:Poweruser Documentation]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Units project</title>
    <ns>0</ns>
    <id>1733</id>
    <revision>
      <id>122689</id>
      <parentid>122688</parentid>
      <timestamp>2014-11-15T17:30:01Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>c9tkow6n5auetsyl1zv9z6d5l1k1p0v</sha1>
      <text xml:space="preserve" bytes="2013">
&lt;!--T:1--&gt;
This project is toward the implementation of a decent Units system in FreeCAD. It follows the rules of the [http://en.wikipedia.org/wiki/GTD#GTD_methodology| Getting things done] process. The projects are collected in the [[Development roadmap|Development roadmap]].

== Purpose and principles == &lt;!--T:2--&gt;
This is a software development project aimed to implement a Unit-system framework into FreeCAD.   

&lt;!--T:3--&gt;
The development steps are planed here (Next actions) and tracked in the Issue tracking system to get a well formed change log: [http://apps.sourceforge.net/mantisbt/free-cad/my_view_page.php Issue tracker]

== Outcome == &lt;!--T:4--&gt;
It will enable FreeCAD to handle wired measurement systems, like the imperial system, and complex compound [http://en.wikipedia.org/wiki/International_System_of_Units SI] units.
Also handle the import/export formats which are able to transport Units (like STEP). And allow scaling based on assumptions of Units (mm-&gt;m, m-&gt;in).

== Brainstorming == &lt;!--T:5--&gt;
Lots of discussion was done here:
http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=1616

&lt;!--T:6--&gt;
And lot of information you'll find in the [[Units|Units]] article.

== Organizing == &lt;!--T:7--&gt;

=== Upgrading units parser === &lt;!--T:8--&gt;
Upgrading the parser to handle and generate signatures as discussed in the [[Units|Units]] article. 

=== Properties === &lt;!--T:9--&gt;
Changing the properties form e.g. PropertyLength to PropertyUntit with a unit signature.

&lt;!--T:10--&gt;
Eventually a property editor for the PropertyUntit.

=== Workbenches === &lt;!--T:11--&gt;
* Upgrading workbenches to use the Units framework. I would start with Sketcher and PartDesign and go subsequently further...
* Documenting that upgrade process so other people can do the same with other workbenches --[[User:Yorikvanhavre|Yorikvanhavre]] 13:13, 28 November 2011 (UTC)

== Next actions == &lt;!--T:12--&gt;
* Upgrading units parser (jriegel)

&lt;!--T:13--&gt;
[[Category:Roadmap]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>User hub</title>
    <ns>0</ns>
    <id>193</id>
    <revision>
      <id>124988</id>
      <parentid>88864</parentid>
      <timestamp>2014-11-24T20:55:21Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>lf6tgziw5bam4fho95p2ftwgzpciz3b</sha1>
      <text xml:space="preserve" bytes="3804">
&lt;!--T:1--&gt;
[[Image:Crystal_Clear_app_display.png|right|150]]

&lt;!--T:2--&gt;
This area is the main help area for newcomers to FreeCAD. 

&lt;!--T:3--&gt;
Please note that like FreeCAD itself, these pages are in continuous development. FreeCAD already features many interesting tools for the final user, and more are continuously added, which is why at the moment there is still missing or outdated documentation for the end user.

&lt;!--T:4--&gt;
But don't feel discouraged, browse the contents of this section, and, if you cannot find the information you need, don't hesitate to ask! Among the developers or in the small but growing FreeCAD users community, there will certainly be someone who can help you. You can leave comments related to this wiki documentation site on the [[Talk:User hub|User hub talk page]], or head directly to the [http://forum.freecadweb.org FreeCAD help forum] and ask your questions there.

And if you have some information you would like to appear here, why not contribute and help us make this manual grow. Head to the [[Help FreeCAD]] page, that will help you to get started.
__NOTOC__
== Using FreeCAD == &lt;!--T:5--&gt;

===Introduction=== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
* [[About FreeCAD|Application Overview]]: A general overview of FreeCAD
* [[Installing]]: How to install FreeCAD on [[Install on Windows|Windows]], [[Install on Unix|Unix/Linux]] and [[Install on Mac|Mac]]
* [[Getting started]]: A quick overview of the available tools
* [[FAQ]]: Frequently asked questions

===Basic Application=== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
* [[Mouse Model]]: The use of the mouse to navigate in the 3D space
* [[Document structure]]: How is a FreeCAD document organized
* [[Preferences Editor|Preferences]] and [[Interface Customization|Customization]]: How you can configure FreeCAD to your needs
* [[Property editor|Properties]]: How objects properties work in FreeCAD
* [[Workbenches|Workbench Concept]]: How the FreeCAD interface is organized
* [[Macros]]: How to easily automate often repeated tasks

===Workbenches=== &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
{{workbenches}}

==Reference== &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
* [[List of Commands|Commands Reference]]: A complete list of the available FreeCAD commands.

== Online Help == &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
&lt;!-- To download the online help in FreeCAD you need to set the proper Url in the [[Preferences Editor]] of FreeCAD. Currently the right url has to point to this page. That means you need to set it to:
 [http://juergen-riegel.net/FreeCAD/Docu/index.php/User_hub http://juergen-riegel.net/FreeCAD/Docu/index.php/User_hub]
--&gt;

&lt;!--T:16--&gt;
This is the official FreeCAD online help. Please note that the whole online help system is currently in rework. It will be used to generate a .CHM file, that will be distributed with the binary packages of FreeCAD. At the moment the online help summarizes some of the most complete sections of this wiki.
* [[Online Help Toc| Online help system - Table of Contents]]

== More == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
* The [[Power users hub]] is the place to go if you would like to see more advanced use of FreeCAD
* [[David]] is a very low cost 3D scanning system that can already work well with FreeCAD
* [http://yorik.orgfree.com/guestblog.php?2009=40 Architecture workflow] : An example of how FreeCAD can begin to have its preliminary place in an architecture workflow...
* If you would like to help FreeCAD, head to the [[Help FreeCAD]] page.
* The [[FreeCAD Community Portal]] lists projects made by community members around FreeCAD.
* The [[Wished tools]] page lists CAD tools that end-users would like to see in FreeCAD. Why not add yours there?
* Don't understand a term or phrase as used in FreeCAD?  Try the [[Glossary]] page.


&lt;!--T:20--&gt;
[[Category:Hubs]]
[[Category:User Documentation]]



</text>
    </revision>
  </page>
  <page>
    <title>Users hub</title>
    <ns>0</ns>
    <id>626</id>
    <revision>
      <id>108119</id>
      <parentid>89288</parentid>
      <timestamp>2014-09-01T20:03:56Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>VRML Preparation for Robot Simulation</title>
    <ns>0</ns>
    <id>1207</id>
    <revision>
      <id>90304</id>
      <parentid>90303</parentid>
      <timestamp>2014-06-04T20:13:59Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>e44p0kxm4479wlscc4opx3zl4feuudg</sha1>
      <text xml:space="preserve" bytes="13354">
&lt;!--T:1--&gt;
This tutorial explains how to use FreeCAD and the Robot Simulation Workbench to simulate the motions of 6-axis serial robot. '''The tutorial focuses on the creation of the vrml file''' used as visualization. The base of the vrml file is a FreeCAD model. The version of FreeCAD used is 0.11.4252ppa1 on Ubuntu 32bit.

== Open a file or create one with FreeCAD == &lt;!--T:2--&gt;
The tutorial is based on a STEP-file of a Stäubli TX40 (TX40-HB.stp). You can download the file from [https://secure.staubli.com/Intranet_Applications/Robotics/Group/RobDoc.nsf/ea05b3f4b301f597c1256d5f005665e8/bc3707ec036c9f6bc12576c700327958/$FILE/page.html Stäubli]. However, though I still didn't have time to check this, the method should also apply to a model completely made in FreeCAD.
After opening the file, you should obtain this:

&lt;!--T:3--&gt;
[[File:staeubli_step_import.png|1024px]]

&lt;!--T:4--&gt;
Notice, that on import, the robot is made of 8 shapes, directly on the root of the document tree. The structure of the exported vrml file may change if groups are used. The shapes are ordered from the base to the tool. The last shape contains the axes of rotations of all robot axes. The correlation shape name – part name is given by (as for now (March 2011) FreeCAD doesn't import the names included in STEP files):

&lt;!--T:5--&gt;
{| class=&quot;wikitable&quot;
|-
! FreeCAD name
! STEP name
|-
| TX40_HB 
|HORIZONTAL BASE CABLE OUTLET
|-
| TX40_HB001
| SHOULDER
|-
| TX40_HB002
| ARM
|-
| TX40_HB003
| ELBOW
|-
| TX40_HB004
| FOREARM
|-
| TX40_HB005
| WRIST
|-
| TX40_HB006
| TOOL FLANGE
|-
| TX40_HB007
| ?
|}

&lt;!--T:6--&gt;
For this import, change the “Display Mode” of each shape, TX40_HB007 excepted, from “Flat Lines” to “Shaded” for the vrml export to look good. I also changed the colors to [245, 196, 0] and [204, 204, 204] to better correspond to Stäubli's yellow. Hide TX40_HB007 because it contains the axes of all joints and cannot be taken apart.

== Measure geometric characteristics == &lt;!--T:7--&gt;
In order to build the Denavit-Hartenberg table (see [http://www.freecadweb.org/wiki/index.php?title=6-Axis_Robot 6-Axis Robot]) and prepare the vrml file, you need to get characteristics of the robot. For now, the measurement tool of FreeCAD is not ready, you can use the axes included in TX40_HB007 (the co-ordinates are indicated on the bottom left when you point an object with the mouse) or you have to use the Python console to get some information about the geometry. Note that the DH-table is only required if you need to use the inverse kinematics, i.e.  get the Cartesian coordinates or drive the robot with Cartesian coordinates.
The DH-table for this robot is the following (mm, deg and deg/s):

&lt;!--T:8--&gt;
{| class=&quot;wikitable&quot;
|-
! i
! d
! θ
! r
! α
! θmin
! θmax
! Axis velocity
|-
| 1
| 320
| q1
| 0
| -90
| -180
| 180
| 555
|-
| 2
| 35
| q2 - 90
| 225
| 0
| -125
| 125
| 475
|-
| 3
| 0
| q3 + 90
| 0
| 90
| -138
| 138
| 585
|-
| 4
| 225
| q4
| 0
| -90
| -270
| 270
| 1035
|-
| 5
| 0
| q5
| 0
| 90
| -120
| 133.5
| 1135
|-
| 6
| 65
| q6
| 0
| 0
| -270
| 270
| 1575
|}

&lt;!--T:9--&gt;
The csv file is then:

 &lt;!--T:10--&gt;
a  , alpha, d  , theta, rotDir, maxAngle, minAngle, AxisVelocity
 0  ,   -90, 320,     0,      1,      180,     -180, 555
 225,     0,  35,   -90,      1,      125,     -125, 475
 0  ,    90,   0,    90,      1,      138,     -138, 585
 0  ,   -90, 225,     0,      1,      270,     -270, 1035
 0  ,    90,   0,     0,      1,    133.5,     -120, 1135
 0  ,     0,  65,     0,      1,      270,     -270, 1575

== Export to vrml == &lt;!--T:11--&gt;
Export the document to a vrml file. The structure of the vrml file is the following:

&lt;syntaxhighlight&gt;

 #VRML V2.0 utf8
 
 
 Group {
   children 
     Group {
       children [ 
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         },
           
         Group {
         …
 
         } ]
 
     }
 
 }
&lt;/syntaxhighlight&gt;


&lt;!--T:12--&gt;
You can notice that we have 8 independent groups corresponding to the 8 shapes.

== Preparation of the vrml file == &lt;!--T:13--&gt;
All shapes in the vrml file are expressed in the base frame, independently from each other. For the Robot Simulation Workbench, we need to create a structure where a movement of a shape induces a movement of all shapes situated afterwards in the structure. The placement of the shapes will be relative to the preceding shape, so we need to include some translations from the absolute reference system to the relative one. The translations are described in the following picture:

&lt;!--T:14--&gt;
[[Image:staeubli_important_points.png]]

&lt;!--T:15--&gt;
With
: 	A=(0, 0, 168)
:	B=(0, 107.8, 320)
:	C=(0, 104.15, 545)
:	D=(0, 35, 601)
:	E=(0, 35, 770)
:	F=(0, 35, 835).

&lt;!--T:16--&gt;
Let's take the example of axis 4 between ELBOW and FOREARM, situated at D=(xd, yd, zd). The anchor for the FreeCAD axis is

&lt;syntaxhighlight&gt;
 &quot;DEF FREECAD_AXIS4 Transform { rotation 0 1 0 0 children [&quot;
&lt;/syntaxhighlight&gt;

&lt;!--T:17--&gt;
This corresponds to a rotation about the y-axis. In the CAD model, the rotation is about the z-axis. Thus, we need to a rotation about the x-axis of &lt;math&gt;\pi&lt;/math&gt; before the FreeCAD axis definition and of &lt;math&gt;-\pi&lt;/math&gt; after it. Also, a translation of (-xd, -yd, -zd) is needed just before the Group corresponding to the definition of FOREARM to express it in the relative reference frame centered at D. This means that a translation of (xd, yd, zd) must be inserted before the first rotation.
At the end, the vrml-file from the definition of ELBOW to the definition of FOREARM looks like this:

&lt;syntaxhighlight&gt;
       # ELBOW
       Group {
         … here comes the unmodified definition of ELBOW
   
       },
         
       Transform {
         translation 0 35 601
         rotation 1 0 0 1.5707963
         children
           DEF FREECAD_AXIS4 Transform { rotation 0 1 0 0 children
             Transform {
               rotation 1 0 0 -1.5707963
               children
                 Transform {
                   translation 0 -35 -601
                   children [
       # FOREARM  
       Group {
         ... here comes the unmodified definition of FOREARM
   
       },
&lt;/syntaxhighlight&gt;
  
&lt;!--T:18--&gt;
At the end of the document, the appropriate closing brackets must be inserted: 
&lt;syntaxhighlight&gt;  ]}}}},&lt;/syntaxhighlight&gt;  
&lt;!--T:21--&gt;
for each of the 6 axes. Eventually, the document looks like this (I don't know if I can link the file here because of copyrights):

&lt;syntaxhighlight&gt;
 #VRML V2.0 utf8
   
   
 Group {
   children
   Group {
     children [ 
       # HORIZONTAL BASE CABLE OUTLET 
       Group {
           ... here comes the unmodified definition of HORIZONTAL BASE CABLE OUTLET
    
       },
         
       Transform {
         translation 0 0 168
         rotation 1 0 0 1.5707963
         children
           DEF FREECAD_AXIS1 Transform { rotation 0 1 0 0 children
             Transform {
               rotation 1 0 0 -1.5707963
               children
                 Transform {
                   translation 0 0 -168
                   children [
       # SHOULDER
       Group {
           ... here comes the unmodified definition of SHOULDER 
   
       },
         
       Transform {
         translation 0 107.8 320
         #rotation 0 0 1 0
         children
           DEF FREECAD_AXIS2 Transform { rotation 0 1 0 0 children
             Transform {
               #rotation 0 0 1 0
               children
                 Transform {
                   translation 0 -107.8 -320
                   children [
       # ARM  
       Group {
           ... here comes the unmodified definition of ARM 
   
       },
         
       Transform {
         translation 0 104.15 545
         #rotation 0 0 1 0
         children
           DEF FREECAD_AXIS3 Transform { rotation 0 1 0 0 children
             Transform {
               #rotation 0 0 1 0
               children
                 Transform {
                   translation 0 -104.15 -545
                   children [
       # ELBOW
       Group {
           ... here comes the unmodified definition of ELBOW
   
       },
         
       Transform {
         translation 0 35 601
         rotation 1 0 0 1.5707963
         children
           DEF FREECAD_AXIS4 Transform { rotation 0 1 0 0 children
             Transform {
               rotation 1 0 0 -1.5707963
               children
                 Transform {
                   translation 0 -35 -601
                   children [
       # FOREARM  
       Group {
           ... here comes the unmodified definition of FOREARM
   
       },
         
       Transform {
         translation 0 35 770
         #rotation 0 0 1 0
         children
           DEF FREECAD_AXIS5 Transform { rotation 0 1 0 0 children
             Transform {
               #rotation 0 0 1 0
               children
                 Transform {
                   translation 0 -35 -770
                   children [
       # WRIST
       Group {
           ... here comes the unmodified definition of WRIST
   
       },
         
       Transform {
         translation 0 35 835
         rotation 1 0 0 1.5707963
         children
           DEF FREECAD_AXIS6 Transform { rotation 0 1 0 0 children
             Transform {
               rotation 1 0 0 -1.5707963
               children
                 Transform {
                   translation 0 -35 -835
                   children [
       # TOOL FLANGE
       Group {
           ... here comes the unmodified definition of TOOL FRAME
   
       },
         
       Group {
           ... here comes the unmodified definition of TX40_HB007
   
       } # &quot;]&quot; was deleted from this line
     ]}}}},
     ]}}}},
     ]}}}},
     ]}}}},
     ]}}}},
     ]}}}},
     ] # this is the &quot;]&quot; deleted from the line above
   }
 }
&lt;/syntaxhighlight&gt;

&lt;!--T:19--&gt;
Here is a patch to obtain the vrml file suitable for robot simulation:

&lt;syntaxhighlight&gt;

 7a8
 &gt;         # HORIZONTAL BASE CABLE OUTLET 
 95968a95970,95981
 &gt;         Transform {
 &gt;           translation 0 0 168
 &gt;           rotation 1 0 0 1.5707963
 &gt;           children
 &gt;             DEF FREECAD_AXIS1 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 rotation 1 0 0 -1.5707963
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 0 -168
 &gt;                     children [
 &gt;         # SHOULDER
 128428a128442,128453
 &gt;         Transform {
 &gt;           translation 0 107.8 320
 &gt;           #rotation 0 0 1 0
 &gt;           children
 &gt;             DEF FREECAD_AXIS2 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 #rotation 0 0 1 0
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 -107.8 -320
 &gt;                     children [
 &gt;         # ARM  
 206503a206529,206540
 &gt;         Transform {
 &gt;           translation 0 104.15 545
 &gt;           #rotation 0 0 1 0
 &gt;           children
 &gt;             DEF FREECAD_AXIS3 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 #rotation 0 0 1 0
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 -104.15 -545
 &gt;                     children [
 &gt;         # ELBOW
 267111a267149,267160
 &gt;         Transform {
 &gt;           translation 0 35 601
 &gt;           rotation 1 0 0 1.5707963
 &gt;           children
 &gt;             DEF FREECAD_AXIS4 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 rotation 1 0 0 -1.5707963
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 -35 -601
 &gt;                     children [
 &gt;         # FOREARM  
 417854a417904,417915
 &gt;         Transform {
 &gt;           translation 0 35 770
 &gt;           #rotation 0 0 1 0
 &gt;           children
 &gt;             DEF FREECAD_AXIS5 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 #rotation 0 0 1 0
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 -35 -770
 &gt;                     children [
 &gt;         # WRIST
 422053a422115,422126
 &gt;         Transform {
 &gt;           translation 0 35 835
 &gt;           rotation 1 0 0 1.5707963
 &gt;           children
 &gt;             DEF FREECAD_AXIS6 Transform { rotation 0 1 0 0 children
 &gt;               Transform {
 &gt;                 rotation 1 0 0 -1.5707963
 &gt;                 children
 &gt;                   Transform {
 &gt;                     translation 0 -35 -835
 &gt;                     children [
 &gt;         # TOOL FLANGE
 435627c435700,435707
 &lt;         } ]
 ---
 &gt;         } 
 &gt;       ]}}}},
 &gt;       ]}}}},
 &gt;       ]}}}},
 &gt;       ]}}}},
 &gt;       ]}}}},
 &gt;       ]}}}},
 &gt;       ]

&lt;/syntaxhighlight&gt;

&lt;!--T:20--&gt;
[[Category:Tutorials]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Vector API</title>
    <ns>0</ns>
    <id>736</id>
    <revision>
      <id>133210</id>
      <parentid>122983</parentid>
      <timestamp>2014-12-23T21:07:14Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>tknzmd8te88tt6xniq3gkic6qd6qghb</sha1>
      <text xml:space="preserve" bytes="1697">
&lt;!--T:1--&gt;
Vectors are used everywhere in FreeCAD.

&lt;!--T:2--&gt;
Example:

{{Code|code=
v=FreeCAD.Vector()
v=FreeCAD.Vector(1,0,0)
v=FreeCAD.Base.Vector()
v2 = FreeCAD.Vector(3,2,-5)
v3 = v.add(v2)
print v3.Length
}}



&lt;!--T:3--&gt;
{{APIProperty|Length|returns the length of the vector.}}
{{APIFunction|add|Vector|adds another vector to this one|the sum of both vectors.}}
{{APIFunction|cross|Vector| |the crossproduct between two vectors.}}
{{APIFunction|distanceToLine|Vector1,Vector2| |the distance between the vector and a line between Vector1 and Vector2.}}
{{APIFunction|distanceToPlane|Vector1,Vector2| |the distance between the vector and a plane defined by a point and a normal.}}
{{APIFunction|dot|Vector| |the dot product between 2 vectors.}}
{{APIFunction|getAngle|Vector| |the angle in radians between 2 vectors.}}
{{APIFunction|multiply|Float|multiplies (scales) a vector by the given factor|nothing.}}
{{APIFunction|normalize| |normalizes a vector (sets its length to 1.0).|nothing.}}
{{APIFunction|projectToLine|Vector1,Vector2|projects the vector on a line between Vector1 and Vector2.|nothing.}}
{{APIFunction|projectToPlane|Vector1,Vector2|projects the vector on a plane defined by a point and a normal.|nothing.}}
{{APIFunction|scale|Float,Float,Float|Same as multiply but lets specify different values for x, y and z directions.|nothing.}}
{{APIFunction|sub|Vector|subtracts another vector from the first one.|the resulting vector.}}
{{APIProperty|x|the x coordinate of a vector.}}
{{APIProperty|y|the y coordinate of a vector.}}
{{APIProperty|z|the z coordinate of a vector.}}

&lt;!--T:19--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Video tutorials</title>
    <ns>0</ns>
    <id>1211</id>
    <revision>
      <id>77908</id>
      <parentid>77907</parentid>
      <timestamp>2014-03-23T22:44:52Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>1ersp30x0q7hzo9agzyiligbpguranb</sha1>
      <text xml:space="preserve" bytes="2130">
&lt;!--T:1--&gt;
A collection of video tutorials made by FreeCAD users.


[http://YouTube.com YouTube] has also a [http://www.youtube.com/user/FreeCADNews FreeCAD channel] collecting some of the most interesting tutorial videos.
== Valid Videos == &lt;!--T:2--&gt;

* Bejant Tutorials - FreeCAD 0.14 detailed lessons : http://www.youtube.com/channel/UCuwmvJXdUCik-Z6goNzTxKQ/videos
* Bram de Vries Tutorials - complete workflow to 3D design : http://www.youtube.com/user/boumdadaque/videos
* MarthamEngineering Tutorials - Basics and Draft workbench : http://www.youtube.com/user/MarthamEngineering/videos
* John Durston Tutorials - Advanced manipulations : http://www.youtube.com/user/5needinput/videos
* openPLM demo - FreeCAD interface : http://www.youtube.com/watch?v=SanPyZhLq6w
* Tremblou Tutorials - Draft, Part, Importing :  http://www.youtube.com/watch?v=SanPyZhLq6w
* Beginners tutorial part 1 : http://www.youtube.com/watch?v=_VR_XOPcaVw
* Introduction to FreeCAD in German : http://youtu.be/m49z0weonog

== Outdated Videos == &lt;!--T:3--&gt;

* FreeCAD - free multiplatform CAD 3D :                     http://www.youtube.com/watch?v=LOAxc1StGW8
* FreeCAD - Drawing 2D from Model 3D :                      http://www.youtube.com/watch?v=GFuyF78QLGc
* FreeCAD (0.11.3520): Make a &quot;mushroom&quot; ;) :               http://www.youtube.com/watch?v=hyBlOL_MFlY
* FreeCAD: Python power - create an array :                 http://www.youtube.com/watch?v=xnlEVKAtFYw
* FreeCAD: Sketcher preview :                               http://www.youtube.com/watch?v=hvXupH5bA0E
* FreeCAD: BSpline edit mode + Extrude :                    http://www.youtube.com/watch?v=bD3OWgSC5y0
* FreeCAD Sketcher/Part Design demo :                       http://www.youtube.com/watch?v=7ih9Jp3OAwA
* FreeCAD: modeling part from Autocad 3D tutorial :         http://www.youtube.com/watch?v=6RxHCR7TLtI
* FreeCAD - [[Tutorial Mouse Interaction]]
* FreeCAD: Sketcher, PartDesign, 2D drawing from 3D model : http://www.youtube.com/watch?v=ib72_bT6O5Q



&lt;!--T:4--&gt;
[[Category:Tutorials]]



</text>
    </revision>
  </page>
  <page>
    <title>ViewObject API</title>
    <ns>0</ns>
    <id>743</id>
    <revision>
      <id>133211</id>
      <parentid>122969</parentid>
      <timestamp>2014-12-23T21:08:19Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>{{Code|code=</comment>
      <sha1>jjllyot1x3pyrb3d4pb58rs6epmjlb7</sha1>
      <text xml:space="preserve" bytes="2327">
&lt;!--T:1--&gt;
When the GUI is up, each object in the FreeCAD document has an associated ViewObject, that resides in the FreeCADGui document counterpart. A view object can be retrieved by two ways. Example:

{{Code|code=
myViewObj = FreeCAD.ActiveDocument.myObjectName.ViewObject
myViewObj = FreeCADGui.ActiveDocument.myObjectName
print myViewObj.IV
}}



&lt;!--T:2--&gt;
{{APIProperty|Annotation|the annotation node of a ViewObject}}
{{APIProperty|BoundingBox|the bounding box}}
{{APIProperty|Content|an XML representation of a ViewObject's properties}}
{{APIProperty|DisplayMode|the current display mode}}
{{APIProperty|IV|an Inventor representation of the ViewObject}}
{{APIProperty|Object|the associated FreeCAD Document Object of this ViewObject}}
{{APIProperty|PropertiesList|a list of properties of this ViewObject}}
{{APIProperty|RootNode|the Inventor node of this ViewObject (pivy.coin object)}}
{{APIProperty|Selectable|True if the object is selectable}}
{{APIProperty|Type|the type of this ViewObject}}
{{APIProperty|Visibility|True if the viewObject is visible}}
{{APIFunction|getAllDerivedFrom| | |all descentences of this object}}
{{APIFunction|getDocumentationOfProperty| | |the documentation string of the property of this class.}}
{{APIFunction|getGroupOfProperty| | |the name of the group which the property belongs to in this class. The properties sorted in differnt named groups for convenience.}}
{{APIFunction|getPropertyByName| | |the value of a named property.}}
{{APIFunction|getTypeOfProperty| | |the type of a named property. This can be (Hidden,ReadOnly,Output) or any combination.}}
{{APIFunction|hide| |Hides the object.| }}
{{APIFunction|isDerivedFrom|string|Checks if this object is derived from the given object type|True if given type is a father}}
{{APIFunction|isVisible| |Checks if the object is visible|a boolean}}
{{APIFunction|listDisplayModes| |Shows a list of all display modes|a list}}
{{APIFunction|setTransformation|coin.SoTransform|Sets a transformation on the Inventor node|nothing}}
{{APIFunction|show| |Shows the object if hidden|nothing}}
{{APIFunction|toString| | |a string representation of the Inventor node}}
{{APIFunction|update| |Updates the view representation of the object| }}

&lt;!--T:3--&gt;
[[Category:API]]


{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Washer</title>
    <ns>0</ns>
    <id>10101</id>
    <revision>
      <id>38081</id>
      <parentid>38071</parentid>
      <timestamp>2013-06-09T07:40:27Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>t93izggocp1sngik75carmi46l58ico</sha1>
      <text xml:space="preserve" bytes="2132">==Some way to create a washer==
&lt;br&gt;Comparison of some workflows to create a simple washer with FreeCAD.
You can create many other workflows.&lt;br&gt;&lt;br&gt;
{| align=&quot;center&quot; border=&quot;1&quot;
|-
! Version
! workflow
! move the washer, placement
! change the shape
! note
|-
| washer1 
[[Image:washer1a.png|200px]] 
[[Image:washer1b.png|200px]]
| Part-&gt;Cut(cylinder001-cylinder)
Part-&gt;Fillet 
| Can be moved Fillet, Cylinder001 and Cylinder
| Edit Cylinder001 and Cylinder
| If it is moved only Cylinder001 or Cylinder you create an eccentric washer
|-
| washer2
[[Image:washer2a.png|200px]]
| Sketcher-&gt;Create a new
PartDesign-&gt;Pad(sketch)
PartDesign-&gt;Fillet
| placement is greyed out, to move the washer move the sketch
| to change the shape simply edit the sketch
|
|-
| washer3
[[Image:washer3a.png|200px]]
| Sketcher-&gt;Create a new
PartDesign-&gt;Revolve(sketch)
PartDesign-&gt;Fillet
| move the sketch
| to change the shape simply edit the sketch
| allows you to easily create portions of washers
|-
| washer4
[[Image:washer4a.png|200px]]
| Sketcher-&gt;Create a new
PartDesign-&gt;Revolve(sketch)
| move the sketch
| to change the shape simply edit the sketch
| as washer3 but with the fillets included in the sketch
|-
| washer5
[[Image:washer5a.png|200px]]
| PartDesign-&gt;Cylinder)
Sketcher-&gt;Create a new 
PartDesign-&gt;Pocket(sketch)
PartDesign-&gt;Fillet
| placement greyed out, to move the washer move the sketch
| edit Cylinder or edit sketch
| move sketch001 does not change anything (automatic reset), you must edit the sketch
|-
| washer6
[[Image:washer6a.png|200px]]
| PartDesign-&gt;Cylinder
Sketcher-&gt;Create a new 
PartDesign-&gt;Pocket(sketch)
PartDesign-&gt;Fillet
| placement greyed out, to move the washer move the sketch
| edit Cylinder or edit sketch
| move sketch does not change anything, you must edit the sketch
|}
&lt;br&gt;&lt;br&gt;....... to be continued .......&lt;br&gt;&lt;br&gt;

Other&lt;br&gt;&lt;br&gt;
Split washer [[Image:washerSplit1a.png]]&lt;br&gt;&lt;br&gt;
Using Draft [[Image:washerDraft1a.png]]&lt;br&gt;&lt;br&gt;


 [[Image:washer1a.png]] 
 [[Image:washer1b.png]]
 [[Image:washer2a.png]]
 [[Image:washer3a.png]]
 [[Image:washer4a.png]]
 [[Image:washer5a.png]]
 [[Image:washer6a.png]]</text>
    </revision>
  </page>
  <page>
    <title>WikiPages</title>
    <ns>0</ns>
    <id>9761</id>
    <revision>
      <id>111261</id>
      <parentid>109289</parentid>
      <timestamp>2014-09-24T14:26:35Z</timestamp>
      <contributor>
        <username>Ediloren</username>
        <id>3292</id>
      </contributor>
      <comment>Added the new 'Quote' template in the table</comment>
      <sha1>k0csjpgkbv40js191l7t067wsv8kgzl</sha1>
      <text xml:space="preserve" bytes="34660">&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;
==Overview==

This page gives common guidelines on the best practices to be followed when writing or updating FreeCAD documentation.

It also has the goal to bring together the threads that are dispersed in the forum and try to make order, being a single point of reference for FreeCAD documentation discussion and brainstorming, to better organize the wiki.

==Before Starting==

Editing wiki pages is easy. Before starting editing FreeCAD wiki pages, be sure to be familiar with the [[Help:Editing|Wiki editing basics]].

==General Guidelines==

===Concise Descriptions===
When describing FreeCAD functionality try to be concise and to the point. Also, please describe what FreeCAD does, '''NOT''' what FreeCAD does not do. There might be exceptions for justifying why FreeCAD does not support a certain functionality, in case for instance there is a different philosophy or way to achieve the result with respect to traditional CAD systems, but these cases must be the exception.

===Centralized Information===
Ideally, you should try to avoid duplicating the same information in different places. While it is simple to copy &amp; paste some text, it will eventually lead to misaligned information when a page is update and the other not. You should insert the information in one place only, and make reference to this single point.

A possible solution for the above problem is the use of templates and transclusions (see [[Help:Editing#Templates and transcluding pages|Templates and transcluding pages]] if you are not familiar with this concept), but their usage for this goal is strongly discouraged. The reason is that in the printed manual created from the Wiki help you will have the same information printed over and over again; but even a reader using the Wiki can be confused by finding the same text in different pages. 
In case you need the same explanations in more than one point of the documentation, please consider creating a new page topic, and make explicit references (links) to this page.

===Styling===
[[#Templates|Templates]] are heavily used, instead, for styling the text. For instance, there is a template for styling menu commands, like {{MenuCommand|File-&gt;Save}}, another template to style keys to be pressed, like {{KEY|SHIFT}}, etc.. This allows to have a consistent look and feel of the documentation, as well as to be able to update the style by simply changing the template. Please get familiar with the [[#Templates|templates]] used in FreeCAD Wiki Help documentation before writing help pages.

==Examples==

Working by examples will help you keep the right track, and be ahead on the learning curve. So even if reading the following sections is highly recommended, you can quickly get familiar with the structure and style of FreeCAD wiki looking at the following pages, that can be considered reference for best style practices of FreeCAD documentation.

If you are consistent with this look &amp; feel, you won't be far from a correct FreeCAD documentation page, and your contribution will blend more easily in the wiki. 

* [[Draft ShapeString]]
* [[Draft Line]]

==Structure==

===General===
You should normally not use a '''=header=''' for a page, since the page title is automatically added.

The User's hub provides a [[Online Help Toc|Table of Contents]]. This is used as the main reference for (automatically) building the offline help you can reach from FreeCAD, as well as the offline pdf documentation. The [[Template:Docnav]], which is used to link a page with the previous and the next page of the same section (see [[#Templates]] section below for a list of all templates, including [[Template:Docnav|Docnav]]) should be aligned with the structure in the [[Online Help Toc|Table of Contents]].

===Page Names===
Page names should be short, and every word should begin with a capital letter, unless they are articles, prepositions, conjunctions (e.g. 'of', 'on', 'and')

====Bad name====
[[Working with architecture walls]]

====Good name====
[[Arch Wall]]


Workbench pages must have the format '''XYZ Workbench''', where '''XYZ''' is the name of the referred workbench.

Pages describing the tools of a workbench must have the format '''XYZ MyTool''', where '''MyTool''' is the name of the specific tool.

===Links===
You should use the original link name for the links whenever possible. This clarifies the referenced chapter in printed / pdf documentation. You must anyway avoid the usage of non-meaningful words for the link.

====Bad link====
For more information on this topic, click [[Draft Workbench|here]].

====So-so link====
For more information on this topic, refer to [[Draft Workbench|drafting 2D objects]].

====Good link====
For more information on this topic, see how to draft 2D objects in the [[Draft Workbench]].

===Workbench pages===
Every page of a workbench should start with:
* the name of the workbench
* an image of (an example) of the look of the workbench. Not necessary to show a model (see anyway the [[#Screen capture]] section for rules), but the menu and toolbar should be visible, in their default position
* a description of what the workbench is used for

===Command (tool) pages===
The command pages describing workbench tools should not be too long, they should only explain what a command can do and what it can't, and how to use it. You should keep pictures to a minimum, and not give too many examples - tutorials is where we should go in step-by-step details.

Restrictions should be documented right in the command page itself rather than elsewhere, possibly under a &quot;restrictions&quot; chapter.

Please refer to the [[Gui Command]] page for specific indications on Gui Command rules (naming, documenting, etc.).

===Tutorials===
Good tutorial examples are available at [http://freecad-tutorial.blogspot.it FreeCAD tutorial - Unofficial tutorial blog].
Though they are not styled as FreeCAD wiki pages, they are a valid example of how a written tutorial should look like.

== Language ==

===Expressions===
You should avoid colloquial generic expressions as 'a couple'. Please re-phrase as 'some' if inteterminate, or with the correct cardinality.

===Conciseness===
Try to avoid repetitions to keep descriptions short.

====Bad description====

[[PartDesign Workbench|Part Design Workbench]]: the Part Design Workbench is a workbench for part design that aims to provide tools for modelling complex solid parts.

====Good description====

[[PartDesign Workbench|Part Design Workbench]]: aims to provide tools for modelling complex solid parts.

==Style==

===Templates===
Styling of FreeCAD Wiki pages is mainly achieved through the usage of templates. The table here below reports the templates that should be used in FreeCAD Wiki pages. Please use the templates listed below as much as possible, since these allows to re-style the whole Wiki in one shot by updating the template, and is the preferred method in the Wiki. For special cases '''only''' you can resort to direct HTML tags.

Remark: you can see the complete list of defined templates accessing [[Special:PrefixIndex/Template:]]. However, not all the templates defined here are used for styling the text, and others are deprecated. Please refer to the table below for the list of templates you should use when documenting FreeCAD in the Wiki.

{|{{Prettytable}}
 !Template
 !Appearance
 !Description
 |--
 |[[Template:Emphasis|Emphasis]]
 |{{Emphasis|emphasis}}
 |Text to emphasize
 |--
 |[[Template:KEY|KEY]]
 |{{KEY|ALT}}
 |Show a keyboard key
 |--
 |[[Template:FALSE|FALSE]]
 |{{FALSE}}
 |False value (e.g. of a [[Property editor|property]])
 |--
 |[[Template:TRUE|TRUE]]
 |{{TRUE}}
 |False value (e.g. of a [[Property editor|property]])
 |--
 |[[Template:MenuCommand|MenuCommand]]
 |{{MenuCommand|File-&gt;Save}}
 |GUI menu text
 |--
 |[[Template:FileName|FileName]]
 |{{FileName|File name}}
 |Names of files or directories
 |--
 |[[Template:Code|Code]]
 |{{Code|import FreeCAD}}
 |Style source code. Default language is Python, other languages can be specified.
 |--
 |[[Template:SystemInput|SystemInput]]
 |{{SystemInput|Type this text}}
 |User typed input text
 |--
 |[[Template:SystemOutput|SystemOutput]]
 |{{SystemOutput|Output text}}
 |Text output from the system
 |--
 |[[Template:Variable|Variable]]
 |{{Variable|MyAttribute|TYPE}}
 |Value or parameter, optionally with a type
 |--
 |[[Template:Optional|Optional]]
 |{{Optional|InsertThis..OrNot}}
 |Optional text or value
 |--
 |[[Template:Choice|Choice]]
 |{{Choice|This|That}}
 |Choice of values from which one is used
 |--
 |[[Template:Prettytable|Prettytable]]
 |this table
 |Create tables
 |--
 |[[Template:Clear|Clear]]
 |
 |Clear columns. Follow the hyperlink for a detailed explanation. Often used to stop text from flowing next to unrelated images.
 |--
 |[[Template:Fake heading|Fake heading]]
 |{{Fake heading|Heading|2}}
 |Heading that will not be included in the automatic TOC
 |--
 |[[Template:GuiCommand|GuiCommand]]
 |See example [[GuiCommand model]]
 |Main template for creating right side box for documenting GuiCommands
 |--
 |[[Template:Macro|Macro]]
 |See example [[Macro FlattenWire]]
 |Main template for creating right side box for documenting macros
 |--
 |[[Template:PropertyView|PropertyView]]
 |{{PropertyView|Color}}
 |Show a View [[Property editor|property]]
 |--
 |[[Template:PropertyData|PropertyData]]
 |{{PropertyData|Position}}
 |Show a Data [[Property editor|property]]
 |--
 |[[Template:Properties Title|Properties Title]] / [[Template:TitleProperty|TitleProperty]]
 |{{Properties_Title|Base}}
 |Title for a [[Property editor|property]] group. Will not be included in the automatic TOC.
 |--
 |[[Template:PropertyTasks|PropertyTasks]] / [[Template:TasksTag|TasksTag]]
 |{{PropertyTasks|Tasks}}
 |Argument for Tasks
 |--
 |[[Template:TitleTasks|TitleTasks]]
 |{{TitleTasks|Tasks Title}}
 |Title for Tasks
 |--
 |[[Template:Docnav|Docnav]]
 |{{Docnav|Online Help Startpage|Feature list}}
 |Used to create the 'next', 'previous' and 'index' links (usually at the bottom of a page)
 |--
 |[[Template:Version|Version]]
 |{{Version|0.13}}
 |Indicate that a feature is available only starting with a specific FreeCAD version
 |--
 |[[Template:VeryImportantMessage|VeryImportantMessage]]
 |{{VeryImportantMessage|Important Message}}
 |Used to highlight very important messages. Use sparingly.
 |--
 |[[Template:Softredirect|Softredirect]]
 |
 |Use it instead of the normal redirect, when you are redirecting to a special page (such as Media: or Category:), in which cases the normal redirect is disabled.
 |--
 |[[Template:UnfinishedDocu|UnfinishedDocu]]
 |{{UnfinishedDocu}}
 |Marks work in progress on a documentation page.
 |--
 |[[Template:Quote|Quote]]
 |{{Quote|text=Cry &quot;Havoc&quot; and let slip the dogs of war.|sign=[[William Shakespeare]]|source=''[[Julius Caesar (play)|Julius Caesar]]'', act III, scene I}}
 |Quote for citations.
 |--
 |Click
 |'''Deprecated'''
 |Superimpose an invisible link on an image. You should use the native Wiki picture inclusion method instead.
 |--
 |DASH
 |'''Deprecated'''
 |Text box type code, colorful background. You should use the style you obtain starting the source line with a space.
 |--
 |Disambig
 |'''Deprecated'''
 |Not used.
 |--
 |Information
 |'''Deprecated'''
 |Not used. A standardized table providing complete information about the file, including description of what it shows and how it was made, copyright status and source.
 |--
 |Languages
 |'''Deprecated'''
 |Obsolete with the new wiki, translations and languages are managed via a dedicated tool.
 |--
 |Message
 |'''Deprecated'''
 |For not very important messages. Not used.
 |--
 |Powerdocnavi, Devdocnavi, Userdocnavi
 |'''Deprecated'''
 |Bottom page navigation. Not to be used, redundant.
 |--
 |Screenshot
 |'''Deprecated'''
 |See [[#Screen capture]] instead.
 |}

To have a global view on the chromatic aspect, see [[WikiPagesBasicColors|Basic Graphic Template]].

===Code===
Code must be styled using the [[Template:Code|Code]] template.

Code description should follow the text box generated by the [[Template:Code|Code]] template, so that the description is structured according to the content. Accentuation should be strictly used ''only'' on the word or lines that must be accentuated.

====Example of bad code description====

{{Code|code=
makeAngularDimension (center,[angle1,angle2],p3): creates an angular Dimension from the given center,
 with the given list of angles, passing through p3. Returns the newly created object.
}}

====Example of good code description====

{{Code|code=
makeAngularDimension (center,[angle1,angle2],p3)
}}

* Creates an angular Dimension from the given center, with the given list of angles, passing through p3.
* Returns the newly created object.

==Graphics content==

===General===
Avoid thumbnails whenever possible. Pictures should be shown in their original size, to avoid the need for the user to continuously navigate back and forth between different pages. Most important even, in the automatically generated printed manual (e.g. pdf version), thumbnails may not be readable. Thumbnails should be used only as last resource.

For the same reason, you should avoid animated pictures (i.e. gif). Animation should be reserved for tutorials not intended to be read as static content (e.g. video).

Pictures must be uploaded through the [[Special:Upload]] page.

===Screen capture===
Recommended size for screen captures, to avoid any resizing when showing the picture, should be:
* native 400x200 (or width=400 and height&lt;=200), for [[Gui Command]] pages, to allow the picture to fit in the left part of the page, and for other standard snapshots
* native 600x400 (or width=600 and height&lt;=400), for [[Gui Command]] pages, when you really need a bigger picture, and still allow the picture to fit in the left part of the page, and for other standard snapshots
* native 1024x768 (or width=1024 and height&lt;=768), only for full screen images
* Smaller sizes are possible when showing details, however use native resolution, not resizing or thumbnails, unless you have a very good reason to do so.
* Avoid larger resolutions, as they won't be much portable to any kind of display or in printed (pdf) documentation.

If possible, you shouldn't depend too much on any OS. While of course achieving 100% independency from the underlying OS is not possible, you should use visual defaults whenever possible.

====Text====
To ease documentation translations, if you put a screenshot showing the interface, you should not show the 3D model view in the same screenshot. In this way, the translator will not have to hunt for the model used to create the screenshot, and can simply take a screenshot of the localized interface. If there are drop down menus in the taskbar, the options should be listed in the text content.

If your screen capture contains text (e.g. a menu), use the same resolution of the original interface item in FreeCAD. This avoids to have images containing very large or very small text, and keeps the same look and feel of the FreeCAD native interface.

=====Good picture text dimension=====
[[Image:partdesign_revolution_parameters.png]]

=====Bad picture text dimension=====
[[Image:partdesign_revolution_parameters.png|190px]]

In this picture, note that the text dimension is acceptable, but there still are visual artifacts due to rescaling (the original width is 307px, rescaled to 190px)
You should use native resolution to avoid visual artifacts due to rescaling.

===Icons and graphics===
Refer to this page for ready-to-use [[Artwork]] and Icon creation rules.

==Models==
The following pages contain models for FreeCAD documentation.

* [[GuiCommand_model]]
* [[Boiler_NonCommand]]

==Translations==

As per general consensus, the reference page is the English page, that should be created first. Moreover, if you want to change or add content in a page, you should do it in the the English page first, and only once the update is completed, port the modification to the translated page.

The FreeCAD wiki supports a Translation plugin which allows to manage translations between pages.

For details on translation, see FreeCAD Wiki Translation Process under [[Localisation]].

Other useful resources are:
* Language Codes: http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
* Country Flags: http://en.wikipedia.org/wiki/Gallery_of_sovereign_state_flags
* Google Translate: http://translate.google.com/

== Some tips for translators ==

===Setting Docnav===

See this link in the forum: http://forum.freecadweb.org/viewtopic.php?f=21&amp;t=6716

===Using special pages===

*[[Special:LonelyPages|Orphaned pages]] list those pages that are not linked from or transcluded into other pages in FreeCAD Documentation. These pages are not accessible via links (no one sees them). If you find in your native language, try to create the connection that exists in the English page, otherwise no one can read them.
*[[Special:UncategorizedPages|Uncategorized pages]] pages without category. They do not appear when you browse the categories. Assign a category.
*[[Special:WantedPages|Wanted pages]] pages that are called, but that do not exist. Red link in the texts. Deprecated and very annoying. 
*Others Wanted (files and templates) 
*[[Special:WantedCategories|Wanted categories]] they exist always, not only has been edited text. Skip.
*[[Special:Categories|Categories]] allow you to compare the number of pages of a given type of the original version with those translated into the specified language.
*[[Special:ListRedirects|List of redirects]] allows you to control the correct redirection pages. If there are any red links, something does not work well. Investigate. Light blue links lead to pages outside the site, no problem.
*[[Special:RecentChanges|Recent changes]] track the most recent changes to the wiki.
*[[Special:LanguageStats|Language statistics]] shows translation statistics for all message groups for a language. Shows the parts not translated in a given language, only for those pages marked for translation. To see what has not been translated, set the language code and press Show statistic. It also contains the link to see what has been recently translated into that language. Note: If entering code en pages appear, it is likely that the original page contains markup errors (Sidebar apart).
*[[Special:PageTranslation|Page translation]] allows you to see all the pages marked for translation, but also the updated and unmarked pages. Only administrators can mark pages for translation.
*Category:Pages to delete: list of pages to be deleted, created by mistake or unnecessary. 

==Robots==

At the page [[WikiRobots]] you can find instructions on how to set-up and use robots to automate repetitive tasks on the FreeCAD Wiki.

==Discussion==
The Forum provides a dedicated section for discussing [http://forum.freecadweb.org/viewforum.php?f=21 documentation wiki] topics. Direct your questions there.


==Brainstorming==

{{VeryImportantMessage|All that follows from now on is only for open discussion. You can stop reading here if you don't intend to brainstorm modifications of the FreeCAD WikiPages style rules. You can anyway post and discuss any Wiki-related topic on the [[http://forum.freecadweb.org/viewforum.php?f=21 Forum]]. Contributions are welcome.}}

===Workflow, Roadmap===

Organize pages in the wiki

====Content and Appearance:====
** Renato: ''width of the page, now much space is unused (only for monitor 16:10)''
** Renato: ''white background, text more readable''
** Renato: '' links to similar commands, similar tools, scripts, examples, discussions, insights, forum, other... On all pages or only on some pages?''

====Templates====
I think the things like this are also templates?  &lt;nowiki&gt;{{PartDesign Tools}}&lt;/nowiki&gt;
This template contains headlines, icons, short textual description, long textual description, list elements. May be easier to handle when splitted in pieces (at least: icon list, description list, &quot;full featured&quot;: array of someWorkbenchTools[icon|description,{2-4}]...) ?

* Basic Template that would be useful
{|{{Prettytable}}
 !Template
 !Note
 !Note
 |--
 |suggestion
caution
 |useful?
 |as Message?
 |--
 |alert
 |useful?
 |as VeryImportantMessage?
 |--
 |idea
 |useful?
 |
 |--
 |shortcut
 |
 |as KEY?
 |}



{|{{Prettytable}}
 !Template
 !Appearance
 !Description
 |--
 |Clear
 |ok
 |Template for clearing columns
 |--
 |Click
 |rarely used
 |superimpose an invisible link on an image
 |--
 |DASH
 |rarely used
 |text box type code, colorful background 
 |--
 |Disambig
 |not used
 |
 |--
 |Docnav
 |ok
 |
 |--
 |FALSE
 |color or black and gray?
 |&lt;span style=&quot;color: #990000; background-color: #f1cece;&quot;&gt;'''FALSE'''&lt;/span&gt;       &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;'''FALSE'''&lt;/span&gt;      &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;FALSE&lt;/span&gt;       &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;'''False'''&lt;/span&gt;   &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;False&lt;/span&gt;  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;   &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''False'''&lt;/span&gt;  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''False'''&lt;/span&gt; &lt;span style=&quot;background: #FFFFFF; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''False'''&lt;/span&gt;
 |--
 |[[Gui Command]]
 |ok
 |the main anchor on documenting GuiCommands
 |--
 |[[MenuCommand]]
 |{{MenuCommand|File-&gt;Save}}
 |Text that is displayed in a GUI command menu
 |--
 |Information
 |not used
 |A standardized table providing complete information about the file, including description of what it shows and how it was made, copyright status and source.
 |--
 |[[KEY]]
 |{{KEY|ALT}}
 |Show a keyboard key
 |--
 |Languages
 |ok
 |obsolete with the new wiki
 |--
 |Macro
 |ok, used
 |the main anchor on documenting macros
 |--
 |Message
 |rarely used
 |for message not very important
 |--
 |VeryImportantMessage
 |ok, used
 |for message very important
 |--
 |Prettytable
 |used for this table
 |could have different colors
 |--
 |PropertyView
 |background green or gray?
 |&lt;span style=&quot;background: #C2EEAA; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Property'''&lt;/span&gt;   &lt;span style=&quot;background: #DDDDDD; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;View&lt;/small&gt; '''Property'''&lt;/span&gt;
 |--
 |Properties Title
 |spelling. color or black and gray?
 |{{Properties_Title|Base}}
 |--
 |PropertyTasks
 |color or black and gray?
 |{{PropertyTasks|Length}} Renato: ''serve but too many disturbing reading''
 |--
 |Screenshot
 |link
 |&lt;small&gt;{{{2}}} - see more [[screenshots]]&lt;/small&gt;
 |--
 |Softredirect
 |
 |Use it instead of the normal redirect, when you are redirecting to a special page (such as Media: or Category:), in which cases the normal redirect is disabled.
 |--
 |TasksTag
 |color or black and gray?
 |{{TasksTag|Text}}
 |--
 |TRUE
 |color or black and gray?
 |{{TRUE}}
 |--
 |UnfinishedDocu
 |ok
 |mark not finished documentation.
 |--
 |Version
 |FreeCAD version, small text
 |
 |--
 |
 |
 |
 |}


* Other Template
 * PartDesignTools
 * _______________

===Forum===
* Reflect on requests for help made ​​in the forum and use the given examples (if it is required an aid often means that the manual is not exhaustive, in the forum there are good examples, but hard to find)
** Renato: ''Insert a link on the document page or insert the example or insert nothing?'' 
***Ralf: insert link(s) always in a field/area which is always there on every page. If there is nothing to link, there should be a text in this area as &quot;There is currently no link to forum examples.&quot;
***Ralf #2 examples: no examples at pages which are describing more than exactly the use of (probably mostly) a tool. If there would be examples (at different pages) which differ in various ways and are not comparable are confusing.
*** Ralf #3 examples: But beside of existing examples: defining a &quot;standard model&quot; (or some of them if needed for fairly different tasks as p.e. Part-Design vs. Arch) for really every example would promise a lot of advantages. The first one: if one like to try an example the related model file is available right there with the next click. Whatever the &quot;standard model&quot; could be - the most important condition it have to be usable for all examples/task from to simplest up to the most complex (FEM,assembly?!) 
*** May be such an ''standard model'' and his incarnations could be also a kind of a &quot;figurehead&quot; for FC.&lt;br&gt;
*** [[User:Ediloren|Ediloren]] ([[User talk:Ediloren|talk]]) 18:01, 3 September 2013 (CEST) : looks like a good idea but not too practical; I expect that the burden of adding examples for everything would be very high. I would prefer to resort on tutorials, videos, and forum unless somebody has really the time and commitment to follow this part (me not, sorry :) )
[[WikiPagesFromForum|Some useful examples taken from the forum]]

===Documentation structure:===
* Links between pages (tree and hierarchy linear, orderly, full)
** Renato:  ''If there is an index the docnav does not serves.''
* Page titles descriptive
** Renato:  ''Translated or not translated? With the new translator seems outdated''
* Structure of the documentation (depending on the type of user and the type of documentation). ''Group some things? - If possible in any way: group everything to maximal seven (7) entrys (per group)(Ralf).'':
** Reference (needs indicate precise criteria) (Ralf: for me for advanced users/using, #3)
** How to (Ralf: additional, #4)
** Tutorial (Ralf: additional, #5)
*** External links
** Themed (Ralf: 1st thing / start point while using the documentation? - for me #1)
** examples - in relevant cases - the most basic example for using the tool / workbench /feature (is that possible with complex tools?) ; may be one &quot;standard&quot; example case for the most examples, if possible (so the fcstd file can be supplied and re-used for a lot of uses) for me #2 or to #1&lt;br&gt;
** linear (all, as now)
** structured with sub-structures (very clear if there are no more than 5..7 entrys per structure layer)
** task - specific (features is other than transform than handle mouse etc.)
** FAQ
** Books
** Plugins
** Macro

===Documentation schemes===

See [[WikiPagesDocSchemes|Documentation schemes]]

===Repository===
* fcstd file 
* pics, images
* icons (there are almost all)
* &quot;Show your FreeCAD projects here!&quot; archives

===Who are the users:===
* New users FreeCAD:
** Users without CAD experience -&gt; not the job of the FreeCAD doc to teach them CAD - the job to teach them how to use FreeCAD? ''Renato: I think that FreeCAD is currently the only free CAD program with a professional approach. Many people exactly look for this to begin.''
** Users with CAD experience (2D/3D/parametric); users with 3D experience - no CAD
** Users who know how to program (version?)

* Users who know FreeCAD:
** Users
** Advanced users
** Developers

===What the users needs:===
* According to the category of the previous point they need different things (to be determined).
* Renato: ''In my opinion the beginners to FreeCAD (or to CAD?) needs:''
** ''find the information immediately'' + Ralf: in the expected, consistent way
** ''know what are the workbenches, when and how to use them,'' + Ralf: is this one workbench all I need or do I need more than one? 
** ''the commands that are available,'' + Ralf: in the workbench - for the task - all
** ''the workflow to use,'' - Ralf: workflow sounds specific - may be the most basic way to use this - may be especially for tools there could be more than page per tool (as above: basic for beginners, extended use for advanced users)
** ....

===Translations===

* Consistent (the reference page is the English page, see the various discussions regarding the rules in the forum)
* Updated (how?) + Ralf: 1st: Version, 2nd: frozen state of doc page - &quot;this is the actual version of the documentation of ... for FC version xxx&quot;; 3rd linked archiv pages of other versions (and maybe other frozen states), all with corresponding &quot;tags&quot; / marks
** ''Use a document type that including at least one complete section of the manual (not just one page at a time). Comparable off line with an previous version. With &quot;Recent changes&quot; is difficult to follow all the changes, when they are frequent.''
* FCSTD files for Documentation ''(wandererfan wrote: It would be nice to have a repository for the fcstd files +Ralf and it would be very helpful - used to generate screenshots, etc. Then the 2nd author/translator could just open the fcstd with a different locale to generate the new screenshot. This would also for standardization of background colours, font sizes, etc. )''
* Renato. My personal:
''- The wiki, is the best way to create documentation FreeCAD? Would not it be better to reserve it for some issues and create a comprehensive manual for each version?''&lt;br&gt;
''- About updates, this is a crucial point, I've seen that you do not like docboock, and I do not intend to return to this theme, but docboock allows translators to easily work on documents. Allows you to download the entire document and compare it with the previous one. With this way changes are made always and only in the original document. Then the translators periodically (even daily if they want)  downloading the document and compares with an earlier version and update it indicating the upgrade version. I've experienced that this procedure is very good. Can I do a similar thing with the wiki? In this way there is no need to continuously monitor Recent Changes and updates are easier to control.''

===Some notes taken from the forum===

yorikvanhavre wrote: ''Actually we could do a little brainstorming, see things that should be changed on the wiki...''
''I already thought of a couple of things: - a new wiki homepage with a clear view of the contents - better formatting of the 3 principal sections, for user (basically the command pages), for power users (everything about python) and the higher-level stuff (compiling, etc) - more professional aspect of the wiki pages - build a better and more strict model for command pages - find a good system to handle translations''

gdo wrote: ''But maybe a survey to freecad users could help to understand precisely what is the beginners needs.''

Ralf wrote: ''Even for the ones who are trying FreeCAD the first times, it's essential to find a consistent documentation otherwise they weren't motivated to give even some first tries.''


And many more ... dispersed and mixed in:
*[http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=3167 SF hosted app retairement &amp; call for help]
*[http://forum.freecadweb.org/viewtopic.php?f=10&amp;t=3899 doc - some detail questions about changing, display, structure]: Misalignment of ToC (left menu vs. ToC and page titles), links should be called as the pages
*[http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=3988 wiki pages]: Best pages examples (long) discussion, propose to establish clear rules, minimize screenshots, don't use thumbnails, English pages are master, Navigation bar at the bottom like in Sketcher_Point (my view: no; use ToC), image dimensions, misalignment of ToC (Each information is linked to an index directly from the main page. The main menu expands into sub-menu. You can clearly see the hierarchy of the entire document. The documentation must be so.), how to manage docs for different FC versions, (OT: is there a timeout for editing a post? On-again some of my posts are lost in space)
* [http://forum.freecadweb.org/viewtopic.php?f=21&amp;t=1805 Online Help (Wiki) TODO List]: Misalignment and importance of ToC (it is what gets in FreeCAD Help), grouping of workbenches (alphabetically says normandc) topic left in April 10
*[http://forum.freecadweb.org/viewtopic.php?f=21&amp;t=3818 Wiki for New Functions?]: How to mark versions in the Wiki
*[http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=3959 Règles a suivre pour le nouveau wiki]
*[http://forum.freecadweb.org/viewtopic.php?f=13&amp;t=4025 Tutorials auf Deutsch für FreeCAD]

===Examples of CAD documentation===

http://help.solidworks.com/2013/English/SolidWorks/sldworks/c_Sketch_Fillets.htm?id=cb1f4dfbe23245aeb58d17af808ee10c#Pg0 &lt;br&gt;

Ralf: good: you can see where you are ; bad: a huge lot of entrys in the navigation / summary at left - the opposite of structured; sorry: pieces of the forum at the documentation page: what is the documentation page good for than? (but the link to the forum / forum search - ok.)&lt;br&gt;
http://www.gcad3d.org/ &lt;br&gt;
Ralf: thumbs up. clear, well structured. sometimes long but I don't know how to avoid that at some themes. Maybe the tree structure layers could be separated in two directions at the page for more place for the content. They have &quot;last updates&quot; I prefer &quot;this version of the documentation is xxx and depend the program version xxy&quot;

Reported by  wandererfan&lt;br&gt;
guidelines for wiki authors:&lt;br&gt;
http://wiki.blender.org/index.php/Meta:Guides/Writer_Guide&lt;br&gt;
http://wiki.blender.org/index.php/Meta:Guides/Style_Guide&lt;br&gt;
Manual TOC:&lt;br&gt;
http://docs.gimp.org/2.8/en/&lt;br&gt;
http://wiki.blender.org/index.php/Doc:2.6/Manual&lt;br&gt;

Reported by  Ralf:&lt;br&gt;
http://opensourceecology.org/wiki/FreeCAD&lt;br&gt;

For the Italian translation also:&lt;br&gt;
http://tp.linux.it/

===Next actions === 
# gather ideas
# build Table of Contents
# build good models (in the template created by Wandererfan)
# edit the master page in English (updated until a new FreeCAD version is released then freeze the document in pdf or doc or other)
# translate (updated until a new FreeCAD version is released then freeze)
# continue to develop the documentation for the new version of FreeCAD (repeats 4) 
# continue to develop the translation for the new version of FreeCAD (repeats 5)

== Terminology - Naming policy==

===English===
See [[Glossary]]

===Other languages===
*[[Italian_Translation|Italiano]]
*





'''proposal to create the page:'''

==[[Start Workbench|Start Center]] ==


When you start FreeCAD for the first time, you are presented with the start center:



[[Image:Startcenter.jpg|1024px|center]]



The Start Center allows you to quickly jump to one of the most common workbenches, open one of the recent files, or see the latest news from the FreeCAD world. You can change the default workbench in the [[Preferences Editor|preferences]].

'''Use this part of  [[Getting started]] then add more information'''

{{languages | {{|}}  {{|}}  }}

[[Category:Documentation]]</text>
    </revision>
  </page>
  <page>
    <title>WikiPagesBasicColors</title>
    <ns>0</ns>
    <id>9831</id>
    <revision>
      <id>87423</id>
      <parentid>43249</parentid>
      <timestamp>2014-05-26T20:43:06Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Category:Wiki</comment>
      <sha1>73vomkwyi72xu09fh1hjvg7lerngvu2</sha1>
      <text xml:space="preserve" bytes="12919">&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;
===Basic Graphic Template===

This is to have a global view on the chromatic  aspect.
====Current template====

-------
DASH: 
{{DASH|text}}
-------
Disambig: 
&lt;div class=&quot;notice metadata&quot; id=&quot;disambig&quot;&gt;
{|style=&quot;background:none&quot;
|style=&quot;vertical-align:middle;&quot;|[[Image:Disambig.png|30px]]
|style=&quot;vertical-align:middle;&quot;|''This [[Wikipedia:Disambiguation|disambiguation]] page lists articles associated with the same title. If an [[Special:Whatlinkshere/{{NAMESPACE}}:{{PAGENAME}}|internal link]] led you here, you may wish to change the link to point directly to the intended article.''
|}&lt;/div&gt;
--------
Docnav: 
&lt;div class=&quot;docnav&quot;&gt;
  &lt;div style=&quot;float:left&quot;&gt;[[{{{1}}}|&amp;lt; previous: {{{1}}}]]&lt;/div&gt;
  &lt;div style=&quot;float:right&quot;&gt;[[{{{2}}}|next: {{{2}}} &amp;gt;]]&lt;/div&gt;
  &lt;div style=&quot;text-align:center&quot;&gt;[[Online Help Toc|Index]]&lt;/div&gt;
&lt;/div&gt;
-----
False:  &lt;span style=&quot;color: #990000; background-color: #f1cece;&quot;&gt;'''FALSE'''&lt;/span&gt;&lt;noinclude&gt;
-----
GUI Command: 
{|class=&quot;wikitable ct&quot; width=100% height=100% style=&quot;float: right; width: 200px;&quot; |
  | class=&quot;ctTitle&quot;|
=== [[Image:{{{Name}}}.png|32px]] {{{Name}}} ===
  |-
  ! class=&quot;ctOdd&quot;|Menu location
  |-
  | class=&quot;ctEven&quot;|{{{MenuLocation}}}
  |-
  ! class=&quot;ctOdd&quot;|Workbenches
  |-
  | class=&quot;ctEven&quot;|{{{Workbenches}}}
  |-
  ! class=&quot;ctOdd&quot;|Default shortcut
  |-
  | class=&quot;ctEven&quot;|{{{Shortcut|None}}}
  |-
  ! class=&quot;ctOdd&quot;|See also
  |-
  | class=&quot;ctEven&quot;|{{{SeeAlso|None}}}
  |-
  | class=&quot;ctToc&quot;|&lt;br/&gt;__TOC__
|}
{{Clear}}
-----
Information: 
{| summary=&quot;A standardized table providing complete information about the file, including description of what it shows and how it was made, copyright status and source.&quot; class=&quot;toccolours&quot; style=&quot;width: 100%&quot; cellpadding=&quot;2&quot;
! style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em; width: 15%&quot; |Description
|
{{{Description}}}
|-
! style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em&quot; | Source
|
{{{Source}}}
|-
! style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em; white-space: nowrap&quot; | Date
|
{{{Date}}}
|-
! style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em&quot; | Author
|
{{{Author}}}
|-
! style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em&quot; | Permission
|
{{{Permission}}}
{{#switch: {{{other_versions|}}}
|   =
| - =
| none =
| #default = &lt;tr&gt;&lt;td style=&quot;background: #ccf; text-align: right; vertical-align: top; padding-right: 0.4em; font-weight: bold&quot;&gt;Other versions&lt;/td&gt;&lt;td&gt;
{{{other_versions}}}&lt;/td&gt;&lt;/tr&gt;}}
|}
-----
KEY:  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;Shift&lt;/span&gt;
{{Clear}}
---------
Macro: 
{|class=&quot;wikitable ct&quot; width=100% height=100% style=&quot;float: right; width: 200px;&quot; |
  | class=&quot;ctTitle&quot;|
=== [[Image:{{{Icon}}}.png|32px]] {{{Name}}} ===
  |-
  ! class=&quot;ctOdd&quot;|Description
  |-
  | class=&quot;ctEven left&quot;|{{{Description|None}}}
  |-
  ! class=&quot;ctOdd&quot;|Author
  |-
  | class=&quot;ctEven&quot;|[[User:{{{Author}}}|{{{Author}}}]]
  |-
  | class=&quot;ctToc&quot;|&lt;br/&gt;__TOC__
  |-
  ! class=&quot;ctOdd&quot;|&lt;br/&gt;
  |-
  | class=&quot;ctEven&quot;|back to [[Macros recipes]]
|}
{{Clear}}
----
Message: 
{{Message|This is a not so important message}}
-----
Prettytable: 
{|{{Prettytable}}
 !Head1
 !Head2
 |--
 |Line1 Column 1
 |Line1 Column 2
 |--
 |Line2 Column 1
 |Line2 Column 2
 |}
{|{{Prettytable}}
 !Head1
 !Head2
 |--
 |style=&quot;background-color:lightgreen&quot;|Column 1
 |style=&quot;background-color:lightblue&quot;|Column 2
 |}
----
PropertyView: 
{{PropertyView|Length}}
-----
Properties Title;  {{Properties_Title|Base}}
------
PropertyTasks:  {{PropertyTasks|Length}}
------
Property Tab View: 
&lt;span style=&quot;color: #ffffff; background-color: #a0a0a0;&quot;&gt;''' Base '''&lt;/span&gt;

* {{PropertyView|Bounding Box}} : To view the occupation, and, overall, of the object dimensions in space. Value {{FALSE}}, or {{TRUE}} (Default, {{FALSE}}).

* {{PropertyView|Control Point}} : Value {{FALSE}}, or {{TRUE}} (Default, {{FALSE}}).

* {{PropertyView|Display Mode}} :Display mode of the form, '''Flat lines, Shaded, Wireframe, Points''' [[IMAGE:Vue_DisplayModePartDesign_fr_00.png|96px]]. (Default, '''Flat lines''').

* {{PropertyView|Lighting}} : Lighting '''One side, Two side''' [[IMAGE:Vue_Lighting_fr_00.png|96px]].  (Default, '''Two side''').

* ..........

* {{PropertyView|Visibility}} : Determines the visibility of the form (like the bar {{KEY|SPACE}}). Value {{FALSE}}, or {{TRUE}} (Default, {{TRUE}}).
----------
TasksTag:  {{TasksTag|Text}}
-----
TRUE:  {{TRUE}}
------
UnfinishedDocu: 
&lt;div id=&quot;itsfree&quot; style=&quot;text-align:center; background:#FDE0A8;margin:1em 7em;padding:0.5em 2em;border:2px solid #FF5706;&quot;&gt;

This documentation is not finished. Please help and contribute documentation.

See [[Draft ShapeString]] for good documented Command. [[Gui Command]] gives an overview over commands. And see [[List of Commands]] for other commands.

Go to the [http://www.freecadweb.org/wiki/index.php?title=Main_Page FreeCAD Wiki] to contribute.

&lt;/div&gt;
-----
====Types of template elements====
Types of template elements inserted into the texts to istinguish and standardize.&lt;br&gt;
My opinion is that in the texts is good to use black and white.&lt;br&gt;The color should be used only for special things.&lt;br&gt;The color according to the importance.&lt;br&gt;
Besides these elements must have always the same formatting:
# Command path (Part -&gt; Primitives -&gt; ...)
# User actions (Press the {{KEY|[[Image:Draft Circle.png|16px]] [[Draft Circle]]}} button)(Press {{KEY|ESC}} or the {{KEY|'''Cancel'''}} button)
# Shortcut commands (press {{KEY|C}} then {{KEY|I}} keys)
# Default values  (Value {{FALSE}}, or {{TRUE}} (Default, {{FALSE}}). Default, '''25, 25, 25''')
# Links
# Property
#* View ({{PropertyView|Bounding Box}})
#* Data ({{PropertyData|Length}})
#* Task ({{PropertyTasks|Length}})
#* Title ({{Properties_Title|Base}})
# Summary boxes, macro
# Alerts
# Very important message


====Possible template====

# Command path: Part → Primitives → ... or ''Part → Primitives → ...'' or '''Part → Primitives → ...''' or &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;Part → Primitives → ...&lt;/span&gt;
# User actions: {{KEY|[[Image:Draft Circle.png|16px]] [[Draft Circle]]}} or only  [[Draft Circle]] or '''Draft Circle''' &lt;br&gt;{{KEY|ESC}} or  {{KEY|''Esc''}} or {{KEY|'''Esc'''}} or &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;Esc&lt;/span&gt; or &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''Esc'''&lt;/span&gt;
# Shortcut commands: {{KEY|C}} {{KEY|I}}
# Default values:  &lt;span style=&quot;color: #990000; background-color: #f1cece;&quot;&gt;'''FALSE'''&lt;/span&gt;       &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;'''FALSE'''&lt;/span&gt;      &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;FALSE&lt;/span&gt;       &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;'''False'''&lt;/span&gt;   &lt;span style=&quot;color: #990000; background-color: #DDDDDD;&quot;&gt;False&lt;/span&gt;  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;   &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''False'''&lt;/span&gt;  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;'''false'''&lt;/span&gt;. Default, '''25, 25, 25''')
# Links
# Property
#* View: &lt;span style=&quot;background: #C2EEAA; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Property'''&lt;/span&gt; or  &lt;span style=&quot;background: #DDDDDD; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;View&lt;/small&gt; '''Property'''&lt;/span&gt; or &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;View&lt;/small&gt; Property&lt;/span&gt; or &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Property&lt;/span&gt;
#* Data: {{PropertyData|Length}} or &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;Data&lt;/small&gt; Length&lt;/span&gt;
#* Task: {{PropertyTasks|Length}} or &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;Task&lt;/small&gt; '''Length'''&lt;/span&gt;
#* Title: {{Properties_Title|Base}} or &lt;span style=&quot;color: #000000; background-color: #dcdcdc;&quot;&gt;''' Base '''&lt;/span&gt;
# Summary boxes, macro
# Alerts
# Very important message
#Property Tab View: &lt;span style=&quot;color: #ffffff; background-color: #a0a0a0;&quot;&gt;''' Base '''&lt;/span&gt; ''- Current version -''
#* {{PropertyView|Bounding Box}} : To view the occupation, and, overall, of the object dimensions in space. Value {{FALSE}}, or {{TRUE}} (Default, {{FALSE}}).
#* {{PropertyView|Control Point}} : Value {{FALSE}}, or {{TRUE}} (Default, {{FALSE}}).
#* {{PropertyView|Display Mode}} :Display mode of the form, '''Flat lines, Shaded, Wireframe, Points''' [[IMAGE:Vue_DisplayModePartDesign_fr_00.png|96px]]. (Default, '''Flat lines''').
#* {{PropertyView|Lighting}} : Lighting '''One side, Two side''' [[IMAGE:Vue_Lighting_fr_00.png|96px]].  (Default, '''Two side''').
#* ..........
#* {{PropertyView|Visibility}} : Determines the visibility of the form (like the bar {{KEY|SPACE}}). Value {{FALSE}}, or {{TRUE}} (Default, {{TRUE}}).
#* ..........
#* ..........
# Property Tab View: &lt;span style=&quot;color: #000000; background-color: #dcdcdc;&quot;&gt;''' Base '''&lt;/span&gt; ''- New version A -''
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Bounding Box&lt;/span&gt; : To view the occupation, and, overall, of the object dimensions in space. Value &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;True&lt;/span&gt;, or &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt; - Default, &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Control Point&lt;/span&gt; : Value &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;, or &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;True&lt;/span&gt; - Default, &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Display Mode&lt;/span&gt; :Display mode of the form, '''Flat lines, Shaded, Wireframe, Points''' [[IMAGE:Vue_DisplayModePartDesign_fr_00.png|96px]]. - Default, '''Flat lines'''.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Lighting&lt;/span&gt; : Lighting '''One side, Two side''' [[IMAGE:Vue_Lighting_fr_00.png|96px]]. - Default, '''Two side'''.
#* ..........
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; Visibility&lt;/span&gt; : Determines the visibility of the form - like the bar {{KEY|SPACE}} -. Value &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;False&lt;/span&gt;, or &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;True&lt;/span&gt; - Default, &lt;span style=&quot;background: #ffffff; border: 1px solid #888888; padding: 0px 5px 1px 5px;&quot;&gt;True&lt;/span&gt;.
#* ..........
#* ..........
# Property Tab View: &lt;span style=&quot;color: #000000; background-color: #dcdcdc;&quot;&gt;''' Base '''&lt;/span&gt;    ''- New version B -''
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Bounding Box'''&lt;/span&gt; : To view the occupation, and, overall, of the object dimensions in space. Value '''True''', or '''False''' - Default, '''False'''.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Control Point'''&lt;/span&gt; : Value '''False''', or '''True''' - Default, '''False'''.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Display Mode'''&lt;/span&gt; :Display mode of the form, '''Flat lines, Shaded, Wireframe, Points'''. - Default, '''Flat lines'''.
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Lighting'''&lt;/span&gt; : Lighting '''One side, Two side'''. - Default, '''Two side'''.
#* ..........
#* &lt;span style=&quot;background: #ffffff; border: 1px solid #bbbbbb; padding: 0px 5px 1px 5px;&quot;&gt;&lt;small&gt;VIEW&lt;/small&gt; '''Visibility'''&lt;/span&gt; : Determines the visibility of the form - like the bar {{KEY|SPACE}} -. Value '''False''', or '''True''' - Default, '''True'''.

.......to be continued......


returns to [[WikiPages]]</text>
    </revision>
  </page>
  <page>
    <title>WikiPagesDocSchemes</title>
    <ns>0</ns>
    <id>9841</id>
    <revision>
      <id>87426</id>
      <parentid>42984</parentid>
      <timestamp>2014-05-26T20:44:19Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>[[Category:Wiki]]</comment>
      <sha1>fqrwqo7ff4pb6pdn3th9idfo8fhq64i</sha1>
      <text xml:space="preserve" bytes="11976">&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;
Documentation schemes

== - DOC Scheme &quot;'''User type'''&quot; based on the type of '''users'''==

# Introduction and commons for User type &quot;'''all users'''&quot; (at this time named at freecadweb.org &quot;the home user/ hobbyist, the experienced CAD user and the programmer&quot;) 
## FreeCAD Commons
### CAD Commons
#### [http://en.wikipedia.org/wiki/Computer-aided_design Commons, Introduction to CAD (link to wikipedia)]
#### [http://en.wikipedia.org/wiki/Parametric_feature_based_modeler#Parametric_and_feature-based_modeling Commons, Intro 3D - Solid Modeling (wikipedia link)]
#### [http://en.wikipedia.org/wiki/Parametric_feature_based_modeler#Parametric_and_feature-based_modeling Commons to parametric 3D CAD (link to wikipedia)]
### General functions of FreeCAD 
#### FreeCAD GUI: FreeCAD is usable and accessible with a graphical user interface and a pointig device (e.g. mouse)
####* FreeCAD offers several pointing-device use-models (e.g. CAD, blender)
####: &lt;a name=&quot;MMM&quot;&gt;&quot;MMM&quot; - &quot;Mind the gap!&quot; - always &quot;'''mind your choosen mouse model'''&quot; ! &lt;/a&gt;
####: If you're not very familar with FreeCADs possibility to change the mouse model while working you may think sometimes that especially selection but also other functions are not working properly while you've just choosen a mouse model which works different as you've expected it. Therefore: always &quot;MMM&quot; !
#### FreeCAD CLI: FreeCAD is usable and accessible with a command-line interface, with or without GUI
####* FreeCAD offers several programming and scripting concepts (macro recording, python, pligins etc.)
#### FreeCAD Workbench Concept: FreeCAD uses the [http://www.freecadweb.org/wiki/index.php?title=Workbench_Concept Workbench Concept]
####* see [http://www.freecadweb.org/wiki/index.php?title=Workbench_Concept getting started/workbenches] how to use them. Improve the description of workbenches. Workbenches are a key aspect of FreeCAD. When you start it is hard to understand quickly how they work. Need some simple examples.
####: there are already two: [http://www.freecadweb.org/wiki/index.php?title=Workbench_Concept Workbench Concept] and [http://www.freecadweb.org/wiki/index.php?title=Workbenches Workbenches]. From the Workbench Concept could be the workbenches left out, to the Workbenches page the &quot;&lt;none&gt;&quot; and &quot;Complete&quot; Workbench could be added. Alternative try:
####: 1st: FreeCAD has a lot of functions and respective buttons
####: 2nd: for the most task some only some of the funcions are needed, the other functions not or seldom
####: 3rd: therefore the functions are grouped together in &quot;workbenches&quot; accordung to specific tasks
####: 4th: if you've a specific task try to choose the correspondig workbench for beginning your work
####: 5th: if you want to do anything else there are the possibility &quot;all&quot; - all functions instead of one group or
####: 6th: the possibility to choose &quot;&lt;none&gt;&quot; for no workbench functions beeing displayed as buttons and in menus
#### FreeCAD Feature principle: FreeCAD uses features. 
####* All things created are representated by features. 
####* The most actions depend on features.
#### FreeCAD Feature-Properties principle: FreeCAD uses feature specific properties
####* to control physical values of the features
####* to control display parameters of the features
#### FreeCAD Feature-Tree principle: FreeCAD uses a feature-tree.
####* All features are structured, organized, handled by a graphical tree
#### FreeCAD works parametric and associative, objects are controlled by their properties
## FreeCAD Licensing and Legals
### FreeCAD licensing: [http://www.freecadweb.org/wiki/index.php?title=Licence#Impact_of_the_licences Impact of the licences] (short version / explanation of the license (see below))
## FreeCAD versions, features and limits 
{| align=&quot;center&quot; border=&quot;1&quot;
|-
! Version
! new features
! limitations
! in OS distribution
! particular DOC link
|-
| 0.9
| changelog link
|
|
|http://sourceforge.net/p/free-cad/screenshot/302717.jpg
|-
| 0.10
| changelog link
|
| Debian GNU/Linux 6
|http://sourceforge.net/p/free-cad/screenshot/270825.jpg
|-
| 0.11
| http://www.freecadweb.org/wiki/index.php?title=Release_notes_011
|
|
|
|-
| 0.12
| http://www.freecadweb.org/wiki/index.php?title=Release_notes_012
|
|
|
|-
| 0.13
| http://www.freecadweb.org/wiki/index.php?title=Release_notes_013
|
|
|
|}
// Mediawiki != TeX :(( - Ralf
## FreeCAD help
### Workbenches
### Tools
### Functions
### Properties &amp; Property-Editor
### Display, Render etc
### Files, saving, readung, export, import etc
## Command reference
## Glossary
# Documentation for User type &quot;'''new users'''&quot;
## FreeCAD - getting started the first time / before you start
### Description of the GUI
#### Main window
##### Menu bar
##### Views - additional displaying areas
###### Tree view
###### Property view
###### Selection view
#####* combo view - the combination of tree, property and task view
###### Report view
###### Python console
##### Toolbars
#####* Workbench dependent toolbars

==- DOC Scheme  &quot;'''Document type'''&quot; based on the type of '''documents'''==

# User manual
## navigation
## manipulators
## preferences
## placement
# Tutorials organized
## Mechanical: create a nut, bolt, washer, grower washer, gear, ...
## Piping: create a pipe, elbow, tee, cap, ball valve, ...
## Electrotechnical, electronic: .....
## Arch: window, door, ....
## other categories ...
# Workflows
## Compare different workflows in modeling. Pros/cons. See [[Washer]]
### Create a shape with a rotation. Part-&gt;Revolve or PartDesign-&gt;Revolve.
### Create a shape with an extrusion. Pad or Extrude.
### Create a shape with a boolean operation.
## Compare the use of different Workbench in modeling. Pros/cons.
### Create edges or faces with Draft. 
### Create edges or faces with Sketcher.
# Standard Parts. They save a lot of work. Recent forum discussions: [http://forum.freecadweb.org/viewtopic.php?f=8&amp;t=3849 here].
## How to create own Standard Parts Libraries (special parts).
## How to create unified library (ISO, sub EN, ...).
## How to import libraries (from manufacturers, ... , OpenSCAD, ...).
# Books
# FAQ
## install
## use
## script &amp; develop
## ''Show your FreeCAD projects here!'' archives 
# Command reference; Glossary
## workbench a
### command a
#### intro
#### image
#### how to use
#### option
#### see also
#### link
#### script
#### macro
#### dev info
#### ____
### command b
#### intro
#### ____
## workbench b
### command a
#### intro
#### ____
### command b
## ______
# &quot;standard&quot; defined FC-files (the example files)
# DOC as &quot;all-in-one-files&quot; html / pdf , e.g. for offline use

==- DOC Scheme &quot;Work type&quot; - Workflow aligned help==

# Workflow mechanical parts and assembly construction
## mesuring, interpolating and understanding an existing construction - workbench Reverse Engineering (in case of reverse engineering)
## create sketch - workbench Sketcher or PartDesign
## create part(s), save CAD- and/or mesh-files of the wanted geometry - workbench PartDesign or Part
## derive drawing and save drawing if needed - workbench Drawing (partly possible)
## create assembly - workbench Assembly (not yet possible inside FreeCAD; may be blender is your friend at this time ...)
## verify and work with the mesh - workbench Mesh Design
## do further computations - workbench FEM (not yet possible inside FreeCAD; Salome-Meca can use meshes ...)
## create a section
## displaying dimension
## orthographic projections
# Workflow building construction
----

==- DOC Scheme  &quot;'''Content type'''&quot;==
Main template
* CommRef
# Command Reference
## → Menu
### Introduction to Command Reference ''(optional)''
### [[#Scheme 4-1 ComRefFile|→ File]]
### → New
*### → ___
*## → Edit
*### → Undo
*## View
*## Tools
*## Macro
*## [[#Scheme 4-7 ComRefWorkbench|Workbench]]
*### None
*## Windows
*## Help
*## View 3D
*## Utility
*## Snap
*## ContextMenu
*## Appaerance
*## Manipulator
*## Properties

----

===Scheme 4-1 ComRefFile===

*## File menu
*### Introduction to File Menu ''(optional)''
*### File → New
*### → Open
*### Close
*### Close All
*### Save
*### Save As
*### Import
*### Export
*### Merge project
*### Project Information
*### Print
*### Print Preview
*### Export PDF
*### Recent Files
*### Exit

----

===Scheme 4-2 ....===
===Scheme 4-3 ComRefEdit===
===Scheme 4-4 ComRefView===
===Scheme 4-5 ComRefTools===
===Scheme 4-6 ComRefMacro===

----

===Scheme 4-7 ComRefWorkbench===
*# Workbench
*## Introduction to Workbench ''(optional)''
*## Workbench → None 	- only shows the main menu -
*## → Arch 	- for working with architectural elements -
*## Assembly - for working with multiple shapes, multiple documents, multiple files, multiple relationships... -
*## Complete - is the default start workbench of FreeCAD (and incorporates all GuiCommands which meet certain Quality  requirements ?)-
*## [[#Scheme 4-7-4 ComRefWorkbench-Draft|Draft]] - for doing basic 2D CAD drafting -
*## Drawing - for displaying your 3D work on a 2D sheet respectively a mechanical drawing -
*## Fem - for Pre/Post-processing FEM studies -
*## Image - for working with bitmap images - 
*## Info - provides some information about the objects -
*## Inspection - shows RMS value - undocumented -
*## Mesh - for working with triangulated meshes -
*## OpenScad - for interoperability with OpenSCAD and repairing CSG model history - 
*## Part - for working with CAD parts -
*## PartDesign - for building Part shapes from sketches -
*## Plot - allows to edit and save output plots created from other modules and tools - 
*## Points - for working with point clouds - It is still in development -
*## Raytracing - for working with ray-tracing (rendering) -
*## Robot - for studying robot movements -
*## Ship FreeCAD-Ship - works over Ship entities, that must be created on top of provided geometry - 
*## Sketcher - for working with geometry-constrained sketches -
*## Start - opens browser in the main window of FreeCAD -
*## Test - extensive testing framework -
*## Web - opens a website in FreeCAD -

----

====Scheme 4-7-1 ComRefWorkbench-None====
====Scheme 4-7-2 ComRefWorkbench-Arch====
====Scheme 4-7-3 ComRefWorkbench-Complete====

----

====Scheme 4-7-4 ComRefWorkbench-Draft====
Page template with some deviations from [[GuiCommand_model]]. Editing Template:GuiCommand ?

*# Draft Workbench
*## Introduction to Draft ''- optional''
*## Draft Workbench → Line
*### intro, description
*### image ''- optional''
*### how to use
*### options
*### properties ''- only a link to a page of the manual or other documentation,  which must be written''
*### see also ''- only a link''
*### links to forum or other
*### scripting ''- only a link to a page of a documentation section dedicated to scripts ''
*### example ''- only a link to a page of the manual or to a page of a documentation section dedicated to examples. In this way you can make exhaustive examples, without putting too many things in Command Ref ''
*### macro ''- only a link  to a page of a documentation section dedicated to macros ''
*### dev info ''- only a link to a page of a documentation section dedicated to developers ''
*### other, version note, alerts, ...
*## Draft Workbench → DWire
*## Draft Workbench → 
* Glossary

''Ralf: in this way I find the description much more useful, great, thanks! Small addidtion: &quot;still in development&quot; may stay a state for some workbenches some time, may be this hint can be a kind of a &quot;flag&quot;; similar if there are special conditions (as for Complete), moreover there is already an entry for &quot;special conditions&quot; in &quot;FreeCAD commons&quot;.''
====Scheme 4-7-5 ...====

-----

===Scheme 4-8 ComRefWindows===
===Scheme 4-9 ComRefHelp===
===Scheme 4-10 ComRefView 3D===
===Scheme 4-11 ComRefUtility===
===Scheme 4-12 ComRefSnap===
===Scheme 4-13 ComRefContextMenu===
===Scheme 4-14 ComRefAppaerance===
===Scheme 4-15 ComRefManipulator===
===Scheme 4-16 ComRefProperty===



----
----
returns to [[WikiPages]]</text>
    </revision>
  </page>
  <page>
    <title>WikiPagesFromForum</title>
    <ns>0</ns>
    <id>10031</id>
    <revision>
      <id>87427</id>
      <parentid>42985</parentid>
      <timestamp>2014-05-26T20:45:39Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>Category:Wiki</comment>
      <sha1>ti15id5qdj1de3k5tu7v6vmbodp7x26</sha1>
      <text xml:space="preserve" bytes="2336">&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;
This page collects the most important examples from the forum


&quot;Info&quot; module:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4036&amp;p=31667&amp;hilit=shape+info#p31667

&quot;Thickness&quot; tool:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3766&amp;p=29741&amp;hilit=enclosure#p29547

Modeling a spring:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=1461

Torsion spring:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3786&amp;hilit=torsion+spring

Hole on pipe:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3907&amp;p=30704#p30704

External geometry + Polar pattern:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3733&amp;start=10#p29329


Constrain one sketch to another:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4092

Sweep along a compound curve:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4081


Hole in a cilinder:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4064

Edit position attributes:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4088&amp;p=31993&amp;hilit=spar_rudder#p31993

Closing sketch:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4054

Drawing the views of a 3D piece:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4084

Using Thickness Tool with a Sweep, Cut Object:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4096

Cut an object with a line that is extruded with Halfspace:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4119

Nuts and bolts:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3768&amp;hilit=bolt

pycollada:
http://forum.freecadweb.org/viewtopic.php?f=12&amp;t=3640&amp;hilit=pycollada

tutorial to model a box buick455s_box_normandc:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3733&amp;start=10

knurling - zigrinatura:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4078&amp;p=31918&amp;hilit=helix#p31918

intersection of two surfaces extruded from sketches:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3975&amp;p=31200&amp;hilit=intersection#p31200

cylinder oscillating - elliptical slot:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=3909&amp;p=30716&amp;hilit=intersection#p30716

spiral (near):
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4211

pyramid:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4230

Part, PartDesign workflow and OpenSCAD Refine Shape:
http://forum.freecadweb.org/viewtopic.php?f=3&amp;t=4478&amp;hilit=refine+shape




----
----

returns to [[WikiPages]]</text>
    </revision>
  </page>
  <page>
    <title>WikiRobots</title>
    <ns>0</ns>
    <id>11305</id>
    <revision>
      <id>85462</id>
      <parentid>58523</parentid>
      <timestamp>2014-05-21T21:21:05Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>e18od3m617ft0eeggdalohococ9ofiy</sha1>
      <text xml:space="preserve" bytes="6273">{{VeryImportantMessage|Robots are intrinsically dangerous as they can automatically do a lot of damage. Use with extreme care!}}

==Overview==

Repetitive tasks can be automated using Robots, i.e. software programs operating on the Wiki.

The natural and most used Robots for Wiki sites are provided by Wikipedia, under the name of [http://www.mediawiki.org/wiki/Manual:Pywikibot Pywikibot].

In a nutshell, the Pywikibot is a collection of Python scripts able to use the native Wiki API to act on the Wiki sites (to see for instance the API list for FreeCAD Wiki, select this link http://www.freecadweb.org/wiki/api.php).

In order to use the Pywikibot, you need to:

# install the Pywikibot
# configure the Pywikibot to work on the FreeCAD Wiki
# launch the script(s) you need for the task at hand

There is a wealth of information on how to install, configure and use the Pywikibot. However, please be aware that this information, although useful, can be highly misleading, since it is mixing instructions related to two different Pywikibot codebases, and different versions of the Pywikibot scripts collection.

In the following, you will find the basic instructions to set up and use Pywikibot on FreeCAD wiki. This will allow you to perform most of the tasks. For more detailed information and advanced usage, you'll have eventually to refer to the [http://www.mediawiki.org/wiki/Manual:Pywikibot Pywikibot manual] and, even better, to the Python source code / source code comments.

==Installation==

Go to http://tools.wmflabs.org/pywikibot/ and download {{FileName|package/pywikipedia/core.zip}} (the project is also under github, gerrit, etc. but this is a simple way to get a full self-contained package).

Unzip the content in your preferred directory.

Unless you want to install the libraries into your Python libs, you are done (if you still want to install them, check the file {{FileName|INSTALL}} in the base directory).

Pywikibot works with Python 2.6 and 2.7 with no issues. Python 3 has been not tested so far with FreeCAD wiki.

==Configuration==

You must save the following Python code as a file with the name {{FileName|user-config.py}} in the base directory where you unzipped {{FileName|package/pywikipedia/core.zip}} (to be clear, in the same directory where you already find a file called {{FileName|user-config.py.sample}}).

{{Code|code=
# -*- coding: cp437  -*-
family = 'freecadwiki'
mylang = 'en'
usernames['freecadwiki']['en'] = u'&lt;&lt;yourWikiUserName&gt;&gt;'
#usernames['freecadwiki']['freecadwiki'] = u'&lt;&lt;yourWikiUserName&gt;&gt;'
console_encoding = 'cp437'
}}

In the above code:

* replace ''&lt;&lt;yourWikiUserName&gt;&gt;'' with your Wiki user name
* replace ''cp437'' with your ''console_encoding''. To find out what is your console encoding, for Windows and Linux, launch the Python interpreter, enter {{SystemInput|import sys}} followed by {{SystemInput|print sys.stdout.encoding}}. Python will write your {{SystemOutput|console_encoding}} on the screen.


Then you must save the following Python code as a file with the name {{FileName|freecadwiki_family.py}} under the sub-directory {{FileName|/pywikibot/families}} (together with the other {{FileName|family_xxx.py}} files).

{{Code|code=
# -*- coding: utf-8  -*-

__version__ = '$Id: 7f3891c3bbbfbd69c0b005de953514803d783d92 $'

from pywikibot import family


# The MediaWiki family
# user-config.py: usernames['mediawiki']['mediawiki'] = 'User name'
class Family(family.WikimediaFamily):
    def __init__(self):
        super(Family, self).__init__()
        self.name = 'freecadwiki'

        self.langs = {
            'en': 'www.freecadweb.org',
        }

    def scriptpath(self, code):
        return 'wiki'

    def path(self, code):
        return '/index.php' #The path of index.php, look at your wiki address. 
	 
    def apipath(self, code):
        return '/api.php' #The path of api.php

    def version(self, code):
        # Replace with the actual version being run on your wiki
        return '1.20.3'

    def protocol(self, code):
        &quot;&quot;&quot;
        Can be overridden to return 'https'. Other protocols are not supported.
        &quot;&quot;&quot;
        return 'http'
        #return 'https' # My server uses https
}}

==Usage==

You are now all set to launch the Pywikibot scripts. The scripts themselves are contained in the {{FileName|/scripts}} subdirectory, from which you can know the names.

To launch the scripts, open a shell and move to the base directory (the installation one, NOT the {{FileName|/scripts}} subdirectory), and write

{{SystemInput|python pwb.py &lt;&lt;scriptname&gt;&gt;.py -&lt;&lt;parameter&gt;&gt;}}

where of course you replace ''&lt;&lt;scriptname&gt;&gt;'' with the name of the script you are interested in, and ''&lt;&lt;parameter&gt;&gt;'' with the parameter(s) required for the given script.

To have a description of the usage and parameters of any script, simply use the ''-help'' parameter. For instance, to have a description of the {{FileName|replace.py}} script (one of the most useful), type

{{SystemInput|python pwb.py replace.py -help}}

There is another very useful parameter, valid for all the scripts, called ''-simulate'', that allows you to test commands without harming the Wiki. Use it, before going 'live'.

==Examples==

This command will log into the wiki

{{SystemInput|pwb.py login.py}}


This command will print a list of all the pages containing a link to SourceForge

{{SystemInput|pwb.py listpages.py -weblink:sourceforge.net}}


This command will replace all the links to the old SourceForge Forum with a link to the new freecadweb.org-hosted Forum

{{SystemInput|pwb.py replace.py -weblink:sourceforge.net/apps/phpbb/free-cad &quot;sourceforge.net/apps/phpbb/free-cad&quot; &quot;forum.freecadweb.org&quot;}}


This command will print a list of all the pages containing the word 'PartDesign', starting with the page titled &quot;2d Drafting Module&quot; and going on alphabetically

{{SystemInput|pwb.py listpages.py -start:&quot;2d Drafting Module&quot; -grep:PartDesign}}


This command will replace all the secure links to the old SourceForge Forum with a link to the new freecadweb.org-hosted Forum in the translated pages

{{SystemInput|pwb.py replace.py -start:Translations:! &quot;https://sourceforge.net/apps/phpbb/free-cad&quot; &quot;http://forum.freecadweb.org&quot;}}

[[Category:Administration]]
[[Category:Developer]]</text>
    </revision>
  </page>
  <page>
    <title>Wiki Resources</title>
    <ns>0</ns>
    <id>9801</id>
    <revision>
      <id>87486</id>
      <parentid>54723</parentid>
      <timestamp>2014-05-26T21:23:58Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>36xfcfqxjet4cx735r2rr5ipiwm9sb1</sha1>
      <text xml:space="preserve" bytes="1036">&lt;!-- Title = Wiki_Resources --&gt;
__NOTOC__
{{VeryImportantMessage|Page mock-up for discussion.}}

==Resources for Wiki Authors, Editors and Translators==

===Wiki Pages White Board===
[[WikiPages]] &lt;br&gt;

===Policies===
[[Wiki_Writer_Guide|Contributor's Guide]] &lt;br&gt;
[[Wiki_Style_Guide|Style Guide]]
&lt;br&gt;
===Boilerplate===
[[Boiler_NonCommand|Non Command Page Layout]] &lt;br&gt;
[[Boiler_GuiCommand|Gui Command Page Layout]] &lt;br&gt;
[[Boiler_StdCommand|Std Menu Command Page Layout]]
&lt;br&gt;
===Reuseable Components===
Icons, etc: [[Artwork]] &lt;br&gt; 
Templates: [[Wiki_Template_List|Available Wiki Templates]]
&lt;br&gt;
===Translation===
FC Wiki Translation Process: [[Localisation|Translation Process]] &lt;br&gt;
Language Codes: http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes &lt;br&gt;
Country Flags: http://en.wikipedia.org/wiki/Gallery_of_sovereign_state_flags &lt;br&gt;
Google Translate: http://translate.google.com/ 


{{docnav|Previous|Next}}

{{languages | {{|}} {{|}} }}

[[Category:Documentation]]
[[Category:Cat2]]
&lt;noinclude&gt;[[Category:Wiki]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Wiki Template List</title>
    <ns>0</ns>
    <id>9781</id>
    <revision>
      <id>54722</id>
      <parentid>35211</parentid>
      <timestamp>2013-12-11T20:53:09Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>removed </comment>
      <sha1>6b5f4ltqtcjslhaxxry9u18p3htd4cv</sha1>
      <text xml:space="preserve" bytes="342">&lt;!-- Wiki_Template_List --&gt;
 __NOTOC__
{{VeryImportantMessage|Page mock-up for discussion.}}
==List of Wiki Templates==

===Overview===
This page displays a list of templates available for use in the FreeCAD Wiki. 

The list is generated automatically.

{{Special:PrefixIndex/Template:}}


{{docnav|Previous|Next}}

[[Category:Documentation]]</text>
    </revision>
  </page>
  <page>
    <title>Willkommen</title>
    <ns>0</ns>
    <id>1262</id>
    <revision>
      <id>108120</id>
      <parentid>95804</parentid>
      <timestamp>2014-09-01T20:04:23Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Wished tools</title>
    <ns>0</ns>
    <id>431</id>
    <revision>
      <id>88340</id>
      <parentid>84656</parentid>
      <timestamp>2014-05-29T20:38:50Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>d82en811rorvtpove6f3f99xk823gqv</sha1>
      <text xml:space="preserve" bytes="5093">
&lt;!--T:1--&gt;
I begin this page as an attempt to gather end-user wishes on specific tools they would like to find in FreeCAD. Several cad users already chatted with me about cad tools, about what they use most, what they would like to see in FreeCAD, what they couldn't live without, etc... Although FreeCAD is not meant to specifically become a replacement for any other famous CAD software (especially the one that begins with Auto and ends with CAD), I think this can become a good reference to know about end-users expectations, and maybe to prioritize things over others in development.

&lt;!--T:2--&gt;
If you are a CAD user and would like to add stuff here, feel free to edit, we would be glad to have your opinion here.

==2d drawing== &lt;!--T:3--&gt;
*&lt;strike&gt;'''Line''': Draws a line&lt;/strike&gt; - see [[Draft Line]].
*'''Construction Line''': Draws a line at any angle infinitely - should be easy if possible in coin. To be investigated
*&lt;strike&gt;'''Polyline''': Line with as many points as you like until command is ended&lt;/strike&gt; - see [[Draft_Wire]].
*'''Polygon''': dependant on no. of sides
*&lt;strike&gt;'''Rectangle'''&lt;/strike&gt; - see [[Draft Rectangle]].
*&lt;strike&gt;'''Arc'''&lt;/strike&gt; - see [[Draft Arc]].
*&lt;strike&gt;'''Circle'''&lt;/strike&gt; - see [[Draft Circle]].
*'''Hatch''': Be able to fill an area with technical-style pattern (oblique lines, etc...) - Under investigation
*'''Make and insert Blocks''': That is in FreeCAD two things: &lt;strike&gt;be able to group elements in one object (compound?)&lt;/strike&gt; - see [[Draft Upgrade]] - and be able to instantiate those objects (several documents objects share same shape?)
*'''Text'''  - see [[Draft Text]]. To be extended to more complex stuff...
*'''Display Order''': That is showing coplanar objects in desired order. Not sure this is possible, though... Maybe, in a 3D world, we should rethink the way we draw 2D objects, and consider those &quot;overlapping&quot; objects differently (= draw them differently). To be discussed...
*&lt;strike&gt;'''Erase'''&lt;/strike&gt; - see [[Std Delete]].
*&lt;strike&gt;'''Copy'''&lt;/strike&gt; - see [[Draft Move]].
*&lt;strike&gt;'''Copy with base point'''&lt;/strike&gt; - see [[Draft Move]].
*'''Multiple copy''': Copy an object several times from same base point
*'''Paste'''
*'''Paste as Block'''
*&lt;strike&gt;'''Offset'''&lt;/strike&gt; - see [[Draft Offset]].
*&lt;strike&gt;'''Move'''&lt;/strike&gt; - see [[Draft Move]].
*&lt;strike&gt;'''Rotate'''&lt;/strike&gt; - see [[Draft Rotate]]
*'''Array''': interesting, could be merged with copy tool...
*'''Stretch'''
*&lt;strike&gt;'''Trim'''&lt;/strike&gt; - see [[Draft Trimex]], but could be extended
*&lt;strike&gt;'''Extend'''&lt;/strike&gt; - see [[Draft Trimex]], but could be extended
*'''Chamfer'''
*&lt;strike&gt;'''Fillet (with angle input)'''&lt;/strike&gt; - implemented in Fold module
* &lt;strike&gt;'''Explode''': Explodes blocks/lines&lt;/strike&gt; - see [[Draft Downgrade]].
*&lt;strike&gt;'''Dimension'''&lt;/strike&gt; - see [[Draft Dimension]]
*'''Angle Dimension''' - planned in Draft module
*'''Arc Length''' - planned in Draft module
*'''Diameter'''&lt;/strike&gt; - see [[Draft Dimension]]
*&lt;strike&gt;'''Radius'''&lt;/strike&gt; - see [[Draft Dimension]]
*&lt;strike&gt;'''Continue Dimension''': continues a running dimension - planned in Draft module
*&lt;strike&gt;'''Views: Top, Bottom, Right, Left'''&lt;/strike&gt; - see [[Std ViewXX]].
*&lt;strike&gt;'''View: Isometric views'''&lt;/strike&gt; - see [[Std OrthographicCamera]].
*&lt;strike&gt;'''Model Space and Paper space'''&lt;/strike&gt; - see the [[Drawing Module]] - Model space = Where the model is drawn, Paper space = tabs with different setups that can be plotted. (tab can be drawn in and has viewports made by closed polylines or shapes that view into the model space.) you need to be able to click in and out of model space so you can set up the paper with boders and title boxes. The view needs to be scaled as needed ie. 1:50 or 1:100 - planned in Drawing module
*'''Drawing units''': All drawing units should be mm - this is a quite special topic, there are many things to be considered. To be discussed further.

==Mesh modeling== &lt;!--T:4--&gt;
*'''Primitives''': Cubes, spheres etc. - present but no toolbar button
*'''Convert Part objects into meshes''' - present but no toolbar button
*'''Flip mesh normals''' - present but no toolbar button
*'''Close holes in meshes''' - present but no toolbar button
*'''Remove faces of meshes''' - present but no toolbar button
*'''Boolean operations''': Union, subtract and intersect meshes - present but no toolbar button

==Part modeling== &lt;!--T:5--&gt;
*&lt;strike&gt;'''Primitives'''&lt;/strike&gt;
*'''Mesh conversion''' to Part shapes
*&lt;strike&gt;'''Boolean operations'''&lt;/strike&gt;
*&lt;strike&gt;'''Extrude flat shapes'''&lt;/strike&gt;
*&lt;strike&gt;'''Fillet edges of shapes'''&lt;/strike&gt;

==Parametric modeling== &lt;!--T:6--&gt;
*'''Custom properties for all objects''': so scripts and exporting to other software can carry additional information
*&lt;strike&gt;'''Python objects'''&lt;/strike&gt;: 100% python-scripted objects - see [[Scripted objects]].

==Architecture modeling== &lt;!--T:7--&gt;
*Wall
*Window
*Door
*Beam
*Slab
*Roof
*Assemblies

&lt;!--T:8--&gt;
[[Category:Hubs]]
[[Category:Roadmap]]
[[Category:Developer]]



</text>
    </revision>
  </page>
  <page>
    <title>Workbench Concept</title>
    <ns>0</ns>
    <id>194</id>
    <redirect title="Workbenches" />
    <revision>
      <id>111371</id>
      <parentid>108122</parentid>
      <timestamp>2014-09-26T19:02:25Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <comment>restored REDIRECT [[Workbenches]]</comment>
      <sha1>hqtyf7r9kaz3ot5ev7lblyfbnj3vfcn</sha1>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Workbenches]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench ICON</title>
    <ns>0</ns>
    <id>3710</id>
    <revision>
      <id>130642</id>
      <parentid>130619</parentid>
      <timestamp>2014-12-08T21:01:00Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>erdwgf6lxj76md3wn24zt200d35yexu</sha1>
      <text xml:space="preserve" bytes="1297">
&lt;!--T:1--&gt;
You can use the code for the button, copying the grayed-out part. This code creates a link on the tool, both on the image on the text.

&lt;!--T:2--&gt;
You can, if need be, modify the text view (the last field in bold) ''&lt;nowiki&gt;[[Image:Arch_Wall.png|32px|Wall|link=Arch_Wall]][[Arch_Wall| &lt;/nowiki&gt;'' '' '''&lt;nowiki&gt;Arch_Wall&lt;/nowiki&gt;]]''' '' or,

&lt;!--T:3--&gt;
delete the text, and its link ''&lt;nowiki&gt;[[Image:Arch_Wall.png|32px|Wall|link=Arch_Wall]]&lt;/nowiki&gt;'' '' '''&lt;nowiki&gt;[[Arch_Wall|Arch_Wall]]&lt;/nowiki&gt;''' '',

&lt;!--T:4--&gt;
The same tools in the form of {{KEY|[[Workbench_KEY|buttons]]}}. See also [[Artwork|Artwork]].

&lt;!--T:5--&gt;
{{:Arch Icon/en|Arch Icon}}
{{:Draft Icon/en|Draft Icon}}
{{:Plot Icon/en|Plot Icon}}
{{:Drawing Icon/en|Drawing Icon}}
{{:FEM Icon/en|FEM Icon}}
{{:Image Icon/en|Image Icon}}
{{:Mesh Icon/en|Mesh Icon}}
{{:OpenSCAD Icon/en|OpenSCAD Icon}}
{{:Part Icon/en|Part Icon}}
{{:PartDesign Icon/en|PartDesign Icon}}
{{:Points Icon/en|Points Icon}}
{{:Raytracing Icon/en|Raytracing Icon}}
{{:Robot Icon/en|Robot Icon}}
{{:FreeCAD-Ship Icon/en|FreeCAD-Ship Icon}}
{{:Sketcher Icon/en|Sketcher Icon}}
{{:Std Icon/en|Std and Other Icon}}


&lt;!--T:6--&gt;
[[Category:Developer Documentation]]
[[Category:Icon]]
[[Category:Help]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Workbench KEY</title>
    <ns>0</ns>
    <id>3723</id>
    <revision>
      <id>131486</id>
      <parentid>131296</parentid>
      <timestamp>2014-12-13T22:42:29Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <minor/>
      <sha1>63cs8h50ybi9eno4bdkgbhsproob6nt</sha1>
      <text xml:space="preserve" bytes="1274">
&lt;!--T:1--&gt;
You can use the code for the button, copying the grayed-out part. This code creates a link on the tool, both on the image on the text.

&lt;!--T:2--&gt;
You can, if need be, modify the text view (the last field in bold) ''&lt;nowiki&gt;{{KEY|[[File:Arch_Wall.png|16px|Arch_Wall|link=Arch_Wall]] [[Arch_Wall|&lt;/nowiki&gt;'' '' '''&lt;nowiki&gt;Arch_Wall]]}}&lt;/nowiki&gt;''' '' or,

&lt;!--T:3--&gt;
delete the text, and its link ''&lt;nowiki&gt;{{KEY|[[File:Arch_Wall.png|16px|Wall|link=Arch_Wall]]&lt;/nowiki&gt;'' '' '''&lt;nowiki&gt;[[Arch_Wall|Arch_Wall]]}}&lt;/nowiki&gt;''' '',

&lt;!--T:4--&gt;
The same tools in the form of [[Workbench_ICON|Icon]]. See also [[Artwork|Artwork]].

&lt;!--T:5--&gt;
{{:Arch Key/en|Arch Key}}
{{:Draft Key/en|Draft Key}}
{{:Plot Key/en|Plot Key}}
{{:Drawing Key/en|Drawing Key}}
{{:FEM Key/en|FEM Key}}
{{:Image Key/en|Image Key}}
{{:Mesh Key/en|Mesh Key}}
{{:OpenSCAD Key/en|OpenSCAD Key}}
{{:Part Key/en|Part Key}}
{{:PartDesign Key/en|PartDesign Key}}
{{:Points Key/en|Points Key}}
{{:Raytracing Key/en|Raytracing Key}}
{{:Robot Key/en|Robot Key}}
{{:FreeCAD-Ship Key/en|FreeCAD-Ship Key}}
{{:Sketcher Key/en|Sketcher Key}}
{{:Std Key/en|Std and Other Key}}


&lt;!--T:6--&gt;
[[Category:Developer Documentation]]
[[Category:Icon]]
[[Category:Help]]

{{clear}}
</text>
    </revision>
  </page>
  <page>
    <title>Workbenches</title>
    <ns>0</ns>
    <id>195</id>
    <revision>
      <id>45510</id>
      <parentid>45509</parentid>
      <timestamp>2013-11-29T22:32:50Z</timestamp>
      <contributor>
        <username>Mario52</username>
        <id>1993</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <sha1>a1lkc6cmyxjitwj5kuhw0zlbqveghob</sha1>
      <text xml:space="preserve" bytes="1615">
&lt;!--T:1--&gt;
FreeCAD, like many modern design applications such as [[wikipedia:Revit|Revit]] or [[wikipedia:CATIA|CATIA]], is based on the concept of [[wikipedia:Workbench|Workbench]]. A workbench can be considered as a set of tools specially grouped for a certain task. In a traditional furniture workshop, you would have a work table for the person who works with wood, another one for the one who works with metal pieces, and maybe a third one for the guy who mounts all the pieces together.

&lt;!--T:2--&gt;
In FreeCAD, the same concept applies. Tools are grouped into workbenches according to the tasks they are related to.

&lt;!--T:3--&gt;
The following workbenches are available:

&lt;!--T:4--&gt;
{{workbenches}}

&lt;!--T:5--&gt;
New workbenches are in development, stay tuned!

&lt;!--T:6--&gt;
When you switch from one workbench to another, the tools available on the interface change. Toolbars, command bars and eventually other parts of the interface switch to the new workbench, but the contents of your scene doesn't change. You could, for example, start drawing 2D shapes with the Draft Workbench, then work further on them with the Part Workbench.

&lt;!--T:7--&gt;
Note that sometimes a Workbench is referred to as a ''Module''. However, Workbenches and Modules are different entities. A Module is any extension of FreeCAD, while a Workbench is a special GUI configuration that groups some toolbars and menus. Usually every Module contains its own Workbench, hence the cross-use of the name.

&lt;!--T:8--&gt;
{{docnav|Property editor|PartDesign Workbench}}

&lt;!--T:9--&gt;
[[Category:User Documentation]]

</text>
    </revision>
  </page>
  <page>
    <title>À propos de FreeCAD</title>
    <ns>0</ns>
    <id>847</id>
    <revision>
      <id>108124</id>
      <parentid>91017</parentid>
      <timestamp>2014-09-01T20:05:45Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Établi Maillage</title>
    <ns>0</ns>
    <id>1346</id>
    <revision>
      <id>108125</id>
      <parentid>91018</parentid>
      <timestamp>2014-09-01T20:06:14Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Établi Pièce</title>
    <ns>0</ns>
    <id>1047</id>
    <revision>
      <id>108127</id>
      <parentid>91019</parentid>
      <timestamp>2014-09-01T20:06:42Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>hmwwu8rp45nzpfzxbtqd7mmwxp09uyg</sha1>
      <text xml:space="preserve" bytes="51">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Über FreeCAD</title>
    <ns>0</ns>
    <id>1264</id>
    <revision>
      <id>108128</id>
      <parentid>95805</parentid>
      <timestamp>2014-09-01T20:07:04Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Übersicht</title>
    <ns>0</ns>
    <id>1263</id>
    <revision>
      <id>108129</id>
      <parentid>95806</parentid>
      <timestamp>2014-09-01T20:07:31Z</timestamp>
      <contributor>
        <username>Renatorivo</username>
        <id>1744</id>
      </contributor>
      <sha1>135tc4scqjuvtfjhr78hgpaxnnxnle0</sha1>
      <text xml:space="preserve" bytes="106">&lt;noinclude&gt;[[Category:Pages_to_delete]]&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Pages_to_delete/de]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
</mediawiki>
